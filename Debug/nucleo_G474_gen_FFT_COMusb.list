
nucleo_G474_gen_FFT_COMusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015068  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015fb0  08015248  08015248  00025248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b1f8  0802b1f8  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  0802b1f8  0802b1f8  0003b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b200  0802b200  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b200  0802b200  0003b200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b204  0802b204  0003b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0802b208  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131cc  200002b0  0802b4b8  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2001347c  0802b4b8  0004347c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f0a4  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005279  00000000  00000000  0006f384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed8  00000000  00000000  00074600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  000764d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f606  00000000  00000000  000781d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029e92  00000000  00000000  000a77d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013a3c8  00000000  00000000  000d1668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0020ba30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099e0  00000000  00000000  0020baf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002946  00000000  00000000  002154d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b0 	.word	0x200002b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015230 	.word	0x08015230

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002b4 	.word	0x200002b4
 800021c:	08015230 	.word	0x08015230

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f5 	b.w	80010e4 <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e f99d 	bl	800f440 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_ADC1_Init+0xf4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_ADC1_Init+0xf4>)
 800112e:	2204      	movs	r2, #4
 8001130:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_ADC1_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001140:	2201      	movs	r2, #1
 8001142:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_ADC1_Init+0xf4>)
 800114e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0xf4>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0xf4>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001176:	f003 ffe7 	bl	8005148 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001180:	f002 fbd4 	bl	800392c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_ADC1_Init+0xf4>)
 800119a:	f005 f8c5 	bl	8006328 <HAL_ADCEx_MultiModeConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80011a4:	f002 fbc2 	bl	800392c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_ADC1_Init+0xf8>)
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0xf4>)
 80011c6:	f004 f995 	bl	80054f4 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80011d0:	f002 fbac 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002cc 	.word	0x200002cc
 80011e0:	04300002 	.word	0x04300002

080011e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e f925 	bl	800f440 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <MX_ADC2_Init+0xb8>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_ADC2_Init+0xb4>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC2_Init+0xb4>)
 800121c:	2204      	movs	r2, #4
 800121e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_ADC2_Init+0xb4>)
 800122e:	2201      	movs	r2, #1
 8001230:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC2_Init+0xb4>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_ADC2_Init+0xb4>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001254:	f003 ff78 	bl	8005148 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f002 fb65 	bl	800392c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC2_Init+0xbc>)
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001266:	2306      	movs	r3, #6
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126e:	237f      	movs	r3, #127	; 0x7f
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001272:	2304      	movs	r3, #4
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001280:	f004 f938 	bl	80054f4 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800128a:	f002 fb4f 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000338 	.word	0x20000338
 800129c:	50000100 	.word	0x50000100
 80012a0:	1d500080 	.word	0x1d500080

080012a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a0      	sub	sp, #128	; 0x80
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00e f8bb 	bl	800f440 <memset>
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d16a      	bne.n	80013aa <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80012da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fd1b 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f0:	f002 fb1c 	bl	800392c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f005 ff7c 	bl	8007248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_ADC_MspInit+0x1f8>)
 8001354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001358:	2205      	movs	r2, #5
 800135a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	4842      	ldr	r0, [pc, #264]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800138e:	f005 fbe1 	bl	8006b54 <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001398:	f002 fac8 	bl	800392c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013a8:	e06d      	b.n	8001486 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_ADC_MspInit+0x1fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d168      	bne.n	8001486 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fcab 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80013d0:	f002 faac 	bl	800392c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <HAL_ADC_MspInit+0x200>)
 800142a:	f005 ff0d 	bl	8007248 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0x208>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800146c:	f005 fb72 	bl	8006b54 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8001476:	f002 fa59 	bl	800392c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001486:	bf00      	nop
 8001488:	3780      	adds	r7, #128	; 0x80
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000464 	.word	0x20000464
 8001494:	40021000 	.word	0x40021000
 8001498:	200003a4 	.word	0x200003a4
 800149c:	40020008 	.word	0x40020008
 80014a0:	50000100 	.word	0x50000100
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20000404 	.word	0x20000404
 80014ac:	40020408 	.word	0x40020408

080014b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CRC_Init+0x54>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_CRC_Init+0x58>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_CRC_Init+0x54>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_CRC_Init+0x54>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CRC_Init+0x54>)
 80014c8:	f248 0205 	movw	r2, #32773	; 0x8005
 80014cc:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CRC_Init+0x54>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_CRC_Init+0x54>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CRC_Init+0x54>)
 80014de:	2220      	movs	r2, #32
 80014e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_CRC_Init+0x54>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CRC_Init+0x54>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CRC_Init+0x54>)
 80014f0:	f005 f932 	bl	8006758 <HAL_CRC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80014fa:	f002 fa17 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000468 	.word	0x20000468
 8001508:	40023000 	.word	0x40023000

0800150c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_CRC_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6493      	str	r3, [r2, #72]	; 0x48
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023000 	.word	0x40023000
 8001548:	40021000 	.word	0x40021000

0800154c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel4
  */
void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_DMA_Init+0x104>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	4a3e      	ldr	r2, [pc, #248]	; (8001650 <MX_DMA_Init+0x104>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6493      	str	r3, [r2, #72]	; 0x48
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_DMA_Init+0x104>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <MX_DMA_Init+0x104>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <MX_DMA_Init+0x104>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6493      	str	r3, [r2, #72]	; 0x48
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <MX_DMA_Init+0x104>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <MX_DMA_Init+0x104>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <MX_DMA_Init+0x104>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6493      	str	r3, [r2, #72]	; 0x48
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_DMA_Init+0x104>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <MX_DMA_Init+0x108>)
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <MX_DMA_Init+0x10c>)
 800159e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <MX_DMA_Init+0x108>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_DMA_Init+0x108>)
 80015a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ac:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_DMA_Init+0x108>)
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MX_DMA_Init+0x108>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_DMA_Init+0x108>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_DMA_Init+0x108>)
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_DMA_Init+0x108>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_DMA_Init+0x108>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <MX_DMA_Init+0x108>)
 80015d8:	f005 fabc 	bl	8006b54 <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 80015e2:	f002 f9a3 	bl	800392c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f005 f87f 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f005 f896 	bl	8006722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200c      	movs	r0, #12
 80015fc:	f005 f877 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001600:	200c      	movs	r0, #12
 8001602:	f005 f88e 	bl	8006722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f005 f86f 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001610:	200d      	movs	r0, #13
 8001612:	f005 f886 	bl	8006722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200e      	movs	r0, #14
 800161c:	f005 f867 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001620:	200e      	movs	r0, #14
 8001622:	f005 f87e 	bl	8006722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200f      	movs	r0, #15
 800162c:	f005 f85f 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001630:	200f      	movs	r0, #15
 8001632:	f005 f876 	bl	8006722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2038      	movs	r0, #56	; 0x38
 800163c:	f005 f857 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001640:	2038      	movs	r0, #56	; 0x38
 8001642:	f005 f86e 	bl	8006722 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	2000048c 	.word	0x2000048c
 8001658:	40020044 	.word	0x40020044

0800165c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <MX_GPIO_Init+0x11c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80016d8:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_GPIO_Init+0x120>)
 80016da:	f005 ff4f 	bl	800757c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f005 ff49 	bl	800757c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <MX_GPIO_Init+0x120>)
 8001700:	f005 fda2 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 8001704:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <MX_GPIO_Init+0x120>)
 800171e:	f005 fd93 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001722:	2320      	movs	r3, #32
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f005 fd84 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001746:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f005 fd75 	bl	8007248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2028      	movs	r0, #40	; 0x28
 8001764:	f004 ffc3 	bl	80066ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001768:	2028      	movs	r0, #40	; 0x28
 800176a:	f004 ffda 	bl	8006722 <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	48000800 	.word	0x48000800

08001780 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ac      	sub	sp, #176	; 0xb0
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8001786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8001796:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80017a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80017b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	2260      	movs	r2, #96	; 0x60
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00d fe3a 	bl	800f440 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017d8:	4a73      	ldr	r2, [pc, #460]	; (80019a8 <MX_HRTIM1_Init+0x228>)
 80017da:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	609a      	str	r2, [r3, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_MASTER_CMP1;
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 80017f0:	4b6c      	ldr	r3, [pc, #432]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	615a      	str	r2, [r3, #20]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80017f8:	486a      	ldr	r0, [pc, #424]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017fa:	f005 ff09 	bl	8007610 <HAL_HRTIM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001804:	f002 f892 	bl	800392c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001808:	210c      	movs	r1, #12
 800180a:	4866      	ldr	r0, [pc, #408]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800180c:	f005 ffd0 	bl	80077b0 <HAL_HRTIM_DLLCalibrationStart>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001816:	f002 f889 	bl	800392c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800181a:	210a      	movs	r1, #10
 800181c:	4861      	ldr	r0, [pc, #388]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800181e:	f006 f81f 	bl	8007860 <HAL_HRTIM_PollForDLLCalibration>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001828:	f002 f880 	bl	800392c <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	485d      	ldr	r0, [pc, #372]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001830:	f006 f8d1 	bl	80079d6 <HAL_HRTIM_EventPrescalerConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_HRTIM1_Init+0xbe>
  {
    Error_Handler();
 800183a:	f002 f877 	bl	800392c <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EEV1SRC_TIM1_TRGO;
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8001856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185a:	461a      	mov	r2, r3
 800185c:	2101      	movs	r1, #1
 800185e:	4851      	ldr	r0, [pc, #324]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001860:	f006 f88a 	bl	8007978 <HAL_HRTIM_EventConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 800186a:	f002 f85f 	bl	800392c <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	484c      	ldr	r0, [pc, #304]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001872:	f006 faa9 	bl	8007dc8 <HAL_HRTIM_FaultPrescalerConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 800187c:	f002 f856 	bl	800392c <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_INTERNAL;
 8001880:	2301      	movs	r3, #1
 8001882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 8001898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800189c:	461a      	mov	r2, r3
 800189e:	2101      	movs	r1, #1
 80018a0:	4840      	ldr	r0, [pc, #256]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018a2:	f006 f8d1 	bl	8007a48 <HAL_HRTIM_FaultConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_HRTIM1_Init+0x130>
  {
    Error_Handler();
 80018ac:	f002 f83e 	bl	800392c <Error_Handler>
  }
  pFaultBlkCfg.Threshold = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018c6:	461a      	mov	r2, r3
 80018c8:	2101      	movs	r1, #1
 80018ca:	4836      	ldr	r0, [pc, #216]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018cc:	f006 fba2 	bl	8008014 <HAL_HRTIM_FaultCounterConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 80018d6:	f002 f829 	bl	800392c <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018de:	461a      	mov	r2, r3
 80018e0:	2101      	movs	r1, #1
 80018e2:	4830      	ldr	r0, [pc, #192]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018e4:	f006 faaa 	bl	8007e3c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 80018ee:	f002 f81d 	bl	800392c <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018f8:	f006 fc84 	bl	8008204 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 1700;
 80018fc:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	677b      	str	r3, [r7, #116]	; 0x74
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001906:	2300      	movs	r3, #0
 8001908:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800190a:	2308      	movs	r3, #8
 800190c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800190e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001912:	461a      	mov	r2, r3
 8001914:	2106      	movs	r1, #6
 8001916:	4823      	ldr	r0, [pc, #140]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001918:	f005 ffd6 	bl	80078c8 <HAL_HRTIM_TimeBaseConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_HRTIM1_Init+0x1a6>
  {
    Error_Handler();
 8001922:	f002 f803 	bl	800392c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASrcAddress = 0x0000;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = 0x0000;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  pTimerCfg.DMASize = 0x1;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800195e:	2300      	movs	r3, #0
 8001960:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	461a      	mov	r2, r3
 8001968:	2106      	movs	r1, #6
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800196c:	f006 fccc 	bl	8008308 <HAL_HRTIM_WaveformTimerConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8001976:	f001 ffd9 	bl	800392c <Error_Handler>
  }
  pCompareCfg.CompareValue = 850;
 800197a:	f240 3352 	movw	r3, #850	; 0x352
 800197e:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2201      	movs	r2, #1
 8001984:	2106      	movs	r1, #6
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001988:	f006 fd4c 	bl	8008424 <HAL_HRTIM_WaveformCompareConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 8001992:	f001 ffcb 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001998:	f000 f828 	bl	80019ec <HAL_HRTIM_MspPostInit>

}
 800199c:	bf00      	nop
 800199e:	37b0      	adds	r7, #176	; 0xb0
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200004ec 	.word	0x200004ec
 80019a8:	40016800 	.word	0x40016800

080019ac <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_HRTIM_MspInit+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10b      	bne.n	80019d6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40016800 	.word	0x40016800
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_HRTIM_MspPostInit+0x64>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11b      	bne.n	8001a46 <HAL_HRTIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB1     ------> HRTIM1_SCOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a26:	2302      	movs	r3, #2
 8001a28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001a36:	230d      	movs	r3, #13
 8001a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a42:	f005 fc01 	bl	8007248 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40016800 	.word	0x40016800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000400 	.word	0x48000400

08001a5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a84:	e000      	b.n	8001a88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f9      	beq.n	8001a86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abe:	f043 0204 	orr.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <__critical_enter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	static uint32_t lock_nesting_count = 0;
	void __critical_enter(void)
	{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
		__disable_irq();
		++lock_nesting_count;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__critical_enter+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <__critical_enter+0x1c>)
 8001ae4:	6013      	str	r3, [r2, #0]
	}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20011f38 	.word	0x20011f38

08001af4 <__critical_exit>:
	void __critical_exit(void)
	{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
		/* Unlock interrupts only when we are exiting the outermost nested call. */
		--lock_nesting_count;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <__critical_exit+0x24>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <__critical_exit+0x24>)
 8001b00:	6013      	str	r3, [r2, #0]
		if (lock_nesting_count == 0) {
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <__critical_exit+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b0a:	b662      	cpsie	i
}
 8001b0c:	bf00      	nop
			__enable_irq();
		}
	}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20011f38 	.word	0x20011f38
 8001b1c:	00000000 	.word	0x00000000

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b08d      	sub	sp, #52	; 0x34
 8001b26:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// test for github
	// ===================== тики замеряем, время работы вычисляем
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <main+0x288>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a9e      	ldr	r2, [pc, #632]	; (8001da8 <main+0x288>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT = 0;// обнуляем значение
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <main+0x28c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
	DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик, здесь и один раз
 8001b3a:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <main+0x290>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a9c      	ldr	r2, [pc, #624]	; (8001db0 <main+0x290>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b46:	f003 f846 	bl	8004bd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4a:	f001 f9d7 	bl	8002efc <SystemClock_Config>
  // 4 -много ошибок,  256 - медлено,   16 - вроде как норм

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4e:	f7ff fd85 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b52:	f7ff fcfb 	bl	800154c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b56:	f7ff fac7 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b5a:	f7ff fb43 	bl	80011e4 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001b5e:	f7ff fe0f 	bl	8001780 <MX_HRTIM1_Init>
  MX_TIM1_Init();
 8001b62:	f002 f929 	bl	8003db8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b66:	f002 fa27 	bl	8003fb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b6a:	f002 fa9f 	bl	80040ac <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b6e:	f002 fb4b 	bl	8004208 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001b72:	f002 fb81 	bl	8004278 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001b76:	f002 fb11 	bl	800419c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001b7a:	f002 fd6b 	bl	8004654 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b7e:	f002 fdb9 	bl	80046f4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001b82:	f7ff fc95 	bl	80014b0 <MX_CRC_Init>
  MX_TIM17_Init();
 8001b86:	f002 fb9d 	bl	80042c4 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8001b8a:	f002 fdff 	bl	800478c <MX_USART3_UART_Init>
  // TIM6 - используем для модбуса, делает прерывания через 50uS, а там библиотека ModBUS  работает
  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // TIM16 - используем для увеличения уменьшения мощности, выдает тики 1uS, прерывания нет, в цикле смотрим CNT
  // TIM17 - используем для сканирования по частоте, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // �?нициализируйте стек протоколов в режиме RTU для SLAVE устройства с адресом 1 = 0x01
  adr_huart_MB = &huart1;
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <main+0x294>)
 8001b90:	4a89      	ldr	r2, [pc, #548]	; (8001db8 <main+0x298>)
 8001b92:	601a      	str	r2, [r3, #0]
   eMBInit( MB_RTU, MB_ADDRESS/*address*/, 1/*LPUART1*/, adr_huart_MB->Init.BaudRate/*115200*/ , adr_huart_MB->Init.Parity/*UART_PARITY_NONE*/ );
 8001b94:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <main+0x294>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <main+0x294>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2107      	movs	r1, #7
 8001baa:	2000      	movs	r0, #0
 8001bac:	f00c f866 	bl	800dc7c <eMBInit>

   // Включите стек протоколов Modbus.
   eMBEnable();
 8001bb0:	f00c f890 	bl	800dcd4 <eMBEnable>

	  HAL_Delay(300);
 8001bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bb8:	f003 f87e 	bl	8004cb8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f005 fcf3 	bl	80075ac <HAL_GPIO_TogglePin>

  printf("MX_xxx_Init(); \n");
 8001bc6:	487d      	ldr	r0, [pc, #500]	; (8001dbc <main+0x29c>)
 8001bc8:	f00e fc84 	bl	80104d4 <puts>
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	e086      	b.n	8001ce0 <main+0x1c0>
  {
	  data_I[i] = (uint16_t) 1000 * sinf(((float)i)/64);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001dc0 <main+0x2a0>
 8001be0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001be4:	eeb0 0a47 	vmov.f32	s0, s14
 8001be8:	f012 f9f0 	bl	8013fcc <sinf>
 8001bec:	eef0 7a40 	vmov.f32	s15, s0
 8001bf0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001dc4 <main+0x2a4>
 8001bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	b299      	uxth	r1, r3
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <main+0x2a8>)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_U[i] = (uint16_t) cosf(((float)i)/64);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001dc0 <main+0x2a0>
 8001c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c20:	f012 f994 	bl	8013f4c <cosf>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b299      	uxth	r1, r3
 8001c32:	4a66      	ldr	r2, [pc, #408]	; (8001dcc <main+0x2ac>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_P[i] = (uint16_t) 100 * sinf(((float)i)/64);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001dc0 <main+0x2a0>
 8001c48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c50:	f012 f9bc 	bl	8013fcc <sinf>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001dd0 <main+0x2b0>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <main+0x2b4>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_R[i] = (uint16_t) 100 * cosf(((float)i)/64);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001dc0 <main+0x2a0>
 8001c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c84:	eeb0 0a47 	vmov.f32	s0, s14
 8001c88:	f012 f960 	bl	8013f4c <cosf>
 8001c8c:	eef0 7a40 	vmov.f32	s15, s0
 8001c90:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001dd0 <main+0x2b0>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c9c:	ee17 3a90 	vmov	r3, s15
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <main+0x2b8>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_Z[i] = (uint16_t) tanf(((float)i)/64);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001dc0 <main+0x2a0>
 8001cb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc0:	f012 f9be 	bl	8014040 <tanf>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <main+0x2bc>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	f6ff af74 	blt.w	8001bd2 <main+0xb2>
	  //data_Q[i] = (uint16_t) i;
	  //data_X[i] = (uint16_t) i+1024;
	  //data_Y[i] = (uint16_t) i+4096;
  }
  //data_Q[1024] = 0;
  data_I[1024] = 1;
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <main+0x2a8>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_U[1024] = 2;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <main+0x2ac>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_P[1024] = 3;
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <main+0x2b4>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_R[1024] = 4;
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <main+0x2b8>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_Z[1024] = 5;
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <main+0x2bc>)
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

  // ============== LPUART =============== LPUART ============= LPUART ==================
  // вначале надо получить данные, пока будут нулевые, ещё нет никаких,
  // но потом прием данных будет активироваться окончанием передачи.
  // Дальше приемник не будет активирован. активация приемника происходит только 1 раз, после передачи
	  wTransferState_RX = TRANSFER_RX_START; // TRANSFER_WAIT - пока ждем приема настроечных данных
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <main+0x2c0>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
	  wTransferState_TX = TRANSFER_TX_Stop;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <main+0x2c4>)
 8001d1a:	2209      	movs	r2, #9
 8001d1c:	601a      	str	r2, [r3, #0]
  // if ((wTransferState != TRANSFER_ERROR ) & (status_SPI == HAL_OK))
  // { ; } // теперь надо извлечь все надобные настройки из полученого массива   cmd_array_SPI[] , только потом мохно будет запускать генерацию
  // else
  // { default; }

  HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_MASTER);
 8001d1e:	2106      	movs	r1, #6
 8001d20:	4831      	ldr	r0, [pc, #196]	; (8001de8 <main+0x2c8>)
 8001d22:	f005 fdf9 	bl	8007918 <HAL_HRTIM_SimpleBaseStart>

  // TIM1 - главный таймер выдает управление ключами моста
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-низ PC0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4830      	ldr	r0, [pc, #192]	; (8001dec <main+0x2cc>)
 8001d2a:	f008 fc17 	bl	800a55c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-верх PА7
 8001d2e:	2100      	movs	r1, #0
 8001d30:	482e      	ldr	r0, [pc, #184]	; (8001dec <main+0x2cc>)
 8001d32:	f009 fda1 	bl	800b878 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-низ PС2
 8001d36:	2108      	movs	r1, #8
 8001d38:	482c      	ldr	r0, [pc, #176]	; (8001dec <main+0x2cc>)
 8001d3a:	f008 fc0f 	bl	800a55c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-верх PB9
 8001d3e:	2108      	movs	r1, #8
 8001d40:	482a      	ldr	r0, [pc, #168]	; (8001dec <main+0x2cc>)
 8001d42:	f009 fd99 	bl	800b878 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		// запаздывание CH3 относительно CH1 - это ширина импульса накачки, мощность
 8001d46:	210c      	movs	r1, #12
 8001d48:	4828      	ldr	r0, [pc, #160]	; (8001dec <main+0x2cc>)
 8001d4a:	f008 fc07 	bl	800a55c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); 	// PA9 синхро�?мпульс - начало периода переключения ключей
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4826      	ldr	r0, [pc, #152]	; (8001dec <main+0x2cc>)
 8001d52:	f008 fc03 	bl	800a55c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim7); // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <main+0x2d0>)
 8001d58:	f008 fa88 	bl	800a26c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);// tim16 тактуется 1 MHz,  по условию if (htim16.Instance->CNT >10000)   будет плавно меняться мощность на одну ступеньку
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <main+0x2d4>)
 8001d5e:	f008 fa85 	bl	800a26c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17); // tim17 тактуется 10 MHz, по условию if (htim17.Instance->CNT > time_step*10)   будет работать скольжение по частоте
 8001d62:	4825      	ldr	r0, [pc, #148]	; (8001df8 <main+0x2d8>)
 8001d64:	f008 fa82 	bl	800a26c <HAL_TIM_Base_Start>

  // для запуска 256 замеров, от HRTIM_SCOUT / 2, будут перекрывать 4 периода
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4824      	ldr	r0, [pc, #144]	; (8001dfc <main+0x2dc>)
 8001d6c:	f008 fbf6 	bl	800a55c <HAL_TIM_PWM_Start>

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);      // синхроимпульс для осцила, 6 тактов от таймера TIM1 отсчитывает
 8001d70:	2100      	movs	r1, #0
 8001d72:	4823      	ldr	r0, [pc, #140]	; (8001e00 <main+0x2e0>)
 8001d74:	f008 fbf2 	bl	800a55c <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1,  ADC_SINGLE_ENDED );
 8001d78:	217f      	movs	r1, #127	; 0x7f
 8001d7a:	4822      	ldr	r0, [pc, #136]	; (8001e04 <main+0x2e4>)
 8001d7c:	f004 f9b6 	bl	80060ec <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2,  ADC_SINGLE_ENDED );
 8001d80:	217f      	movs	r1, #127	; 0x7f
 8001d82:	4821      	ldr	r0, [pc, #132]	; (8001e08 <main+0x2e8>)
 8001d84:	f004 f9b2 	bl	80060ec <HAL_ADCEx_Calibration_Start>
	uint32_t temp_length = LENGTH_SAMPLES; // 32 замера, по 16 в начале и в конце, будут отброшены
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	60fb      	str	r3, [r7, #12]
    HAL_ADCEx_MultiModeStart_DMA(&hadc1, zamer_adc1_2, temp_length);
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	491e      	ldr	r1, [pc, #120]	; (8001e0c <main+0x2ec>)
 8001d92:	481c      	ldr	r0, [pc, #112]	; (8001e04 <main+0x2e4>)
 8001d94:	f004 fa0c 	bl	80061b0 <HAL_ADCEx_MultiModeStart_DMA>
   // LL_ADC_REG_StopConversion(hadc1->Instance);  - это есть стоп АЦП произвольно по желанию, по тесту в любом месте
   // LL_ADC_REG_StartConversion(hadc1.Instance);  - это есть старт АЦП произвольно по желанию, если был остановлен

    size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <main+0x2f0>)
 8001d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001da0:	2300      	movs	r3, #0
 8001da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001da4:	e047      	b.n	8001e36 <main+0x316>
 8001da6:	bf00      	nop
 8001da8:	e000edfc 	.word	0xe000edfc
 8001dac:	e0001004 	.word	0xe0001004
 8001db0:	e0001000 	.word	0xe0001000
 8001db4:	20000610 	.word	0x20000610
 8001db8:	20012158 	.word	0x20012158
 8001dbc:	08015248 	.word	0x08015248
 8001dc0:	42800000 	.word	0x42800000
 8001dc4:	447a0000 	.word	0x447a0000
 8001dc8:	2000f6b0 	.word	0x2000f6b0
 8001dcc:	2000feb4 	.word	0x2000feb4
 8001dd0:	42c80000 	.word	0x42c80000
 8001dd4:	200106b8 	.word	0x200106b8
 8001dd8:	20010ebc 	.word	0x20010ebc
 8001ddc:	200116c0 	.word	0x200116c0
 8001de0:	20000028 	.word	0x20000028
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	200004ec 	.word	0x200004ec
 8001dec:	20011f44 	.word	0x20011f44
 8001df0:	20012074 	.word	0x20012074
 8001df4:	200120c0 	.word	0x200120c0
 8001df8:	2001210c 	.word	0x2001210c
 8001dfc:	20011f90 	.word	0x20011f90
 8001e00:	20011fdc 	.word	0x20011fdc
 8001e04:	200002cc 	.word	0x200002cc
 8001e08:	20000338 	.word	0x20000338
 8001e0c:	2000062c 	.word	0x2000062c
 8001e10:	2000662c 	.word	0x2000662c
		{
			data_adc1[ic] =0;
 8001e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e16:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <main+0x524>)
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
			data_adc2[ic] =0;
 8001e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e24:	4a88      	ldr	r2, [pc, #544]	; (8002048 <main+0x528>)
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001e30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e32:	3301      	adds	r3, #1
 8001e34:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <main+0x52c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbe9      	blt.n	8001e14 <main+0x2f4>
		}

	  // Select Callbacks functions called after Transfer complete and Transfer error
	  // Выберите функции Callbacks, вызываемые после завершения передачи и Ошибки передачи
	  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_CPLT_CB_ID, Mem_to_Mem_Complete);
 8001e40:	4a83      	ldr	r2, [pc, #524]	; (8002050 <main+0x530>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4883      	ldr	r0, [pc, #524]	; (8002054 <main+0x534>)
 8001e46:	f005 f917 	bl	8007078 <HAL_DMA_RegisterCallback>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8001e4a:	4983      	ldr	r1, [pc, #524]	; (8002058 <main+0x538>)
 8001e4c:	4a83      	ldr	r2, [pc, #524]	; (800205c <main+0x53c>)
 8001e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e52:	4880      	ldr	r0, [pc, #512]	; (8002054 <main+0x534>)
 8001e54:	f004 ff26 	bl	8006ca4 <HAL_DMA_Start_IT>

	  //R_filter = 0.5857864376269; // для 512 замеров
	 // L_filter = 0.01;

	  freq_new = 25000;
 8001e58:	4b81      	ldr	r3, [pc, #516]	; (8002060 <main+0x540>)
 8001e5a:	4a82      	ldr	r2, [pc, #520]	; (8002064 <main+0x544>)
 8001e5c:	601a      	str	r2, [r3, #0]
	  old_freq_new = freq_new;
 8001e5e:	4b80      	ldr	r3, [pc, #512]	; (8002060 <main+0x540>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a81      	ldr	r2, [pc, #516]	; (8002068 <main+0x548>)
 8001e64:	6013      	str	r3, [r2, #0]
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, adc1_int, 256, DAC_ALIGN_12B_R);

	  printf("INIT__xxx (); - executed  \n");
 8001e66:	4881      	ldr	r0, [pc, #516]	; (800206c <main+0x54c>)
 8001e68:	f00e fb34 	bl	80104d4 <puts>
  {
	  	  	  	  // если надо, по флагу  cmd_set.flag_ON_TxData_cicle , вот тут будет включаться циклическая долбежка
                  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
		  	  	  // 25 mS  минимальный интервал между передачами, при котором минимум ошибок CRC
              	  //if (htim7.Instance->CNT >250) // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
              	  if ((htim7.Instance->CNT >250) & (flag_data_complit_for_Tx ==0) & (cmd_set.flag_ON_TxData_cicle == true))
 8001e6c:	4b80      	ldr	r3, [pc, #512]	; (8002070 <main+0x550>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2bfa      	cmp	r3, #250	; 0xfa
 8001e74:	bf8c      	ite	hi
 8001e76:	2301      	movhi	r3, #1
 8001e78:	2300      	movls	r3, #0
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <main+0x554>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b79      	ldr	r3, [pc, #484]	; (8002078 <main+0x558>)
 8001e92:	791b      	ldrb	r3, [r3, #4]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d04e      	beq.n	8001f38 <main+0x418>
              	  {
              		  htim7.Instance->CNT =0;
 8001e9a:	4b75      	ldr	r3, [pc, #468]	; (8002070 <main+0x550>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
              		  	send_buff_cicle[0] = MB_ADDRESS;
 8001ea2:	4b76      	ldr	r3, [pc, #472]	; (800207c <main+0x55c>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	701a      	strb	r2, [r3, #0]
						send_buff_cicle[1] = 4;  // заглушка-обманка
 8001ea8:	4b74      	ldr	r3, [pc, #464]	; (800207c <main+0x55c>)
 8001eaa:	2204      	movs	r2, #4
 8001eac:	705a      	strb	r2, [r3, #1]
						send_buff_cicle[2] = 80; // заглушка-обманка, типа длина данных
 8001eae:	4b73      	ldr	r3, [pc, #460]	; (800207c <main+0x55c>)
 8001eb0:	2250      	movs	r2, #80	; 0x50
 8001eb2:	709a      	strb	r2, [r3, #2]

						if ( cmd_set.flag_ON_scan_time == true)
 8001eb4:	4b70      	ldr	r3, [pc, #448]	; (8002078 <main+0x558>)
 8001eb6:	799b      	ldrb	r3, [r3, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d014      	beq.n	8001ee6 <main+0x3c6>
						{
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
								{ index_data_real_zamer = index_data_real_zamer +2; }
 8001ebc:	4b70      	ldr	r3, [pc, #448]	; (8002080 <main+0x560>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b6e      	ldr	r3, [pc, #440]	; (8002080 <main+0x560>)
 8001ec6:	801a      	strh	r2, [r3, #0]
							if (index_data_real_zamer >1021)
 8001ec8:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <main+0x560>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d902      	bls.n	8001eda <main+0x3ba>
								{ index_data_real_zamer =0; }
 8001ed4:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <main+0x560>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
							fun_data_time_podgotovka( &(send_buff_cicle[3]), index_data_real_zamer/*номер элемента массива замеров*/ );
 8001eda:	4b69      	ldr	r3, [pc, #420]	; (8002080 <main+0x560>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4868      	ldr	r0, [pc, #416]	; (8002084 <main+0x564>)
 8001ee2:	f001 fa07 	bl	80032f4 <fun_data_time_podgotovka>
						}

						if ( cmd_set.flag_ON_scan_freq == true)
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <main+0x558>)
 8001ee8:	78db      	ldrb	r3, [r3, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <main+0x3de>
						{
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							fun_data_scan_freq_podgotovka( &(send_buff_cicle[3]), freq_tim1_float/*номер элемента массива замеров*/ );
 8001eee:	4b66      	ldr	r3, [pc, #408]	; (8002088 <main+0x568>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	4862      	ldr	r0, [pc, #392]	; (8002084 <main+0x564>)
 8001efa:	f001 fba1 	bl	8003640 <fun_data_scan_freq_podgotovka>
						}

						usCRC16_main = HAL_CRC_Calculate(&hcrc, ( uint32_t *)(&send_buff_cicle), 83);//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
 8001efe:	2253      	movs	r2, #83	; 0x53
 8001f00:	495e      	ldr	r1, [pc, #376]	; (800207c <main+0x55c>)
 8001f02:	4862      	ldr	r0, [pc, #392]	; (800208c <main+0x56c>)
 8001f04:	f004 fc8c 	bl	8006820 <HAL_CRC_Calculate>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	817b      	strh	r3, [r7, #10]
						send_buff_cicle[83] = ( UCHAR )( usCRC16_main & 0xFF );
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b5a      	ldr	r3, [pc, #360]	; (800207c <main+0x55c>)
 8001f12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
						send_buff_cicle[84] = ( UCHAR )( usCRC16_main >> 8 );
 8001f16:	897b      	ldrh	r3, [r7, #10]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <main+0x55c>)
 8001f20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

						HAL_UART_Transmit_DMA(&huart3, send_buff_cicle, 85);
 8001f24:	2255      	movs	r2, #85	; 0x55
 8001f26:	4955      	ldr	r1, [pc, #340]	; (800207c <main+0x55c>)
 8001f28:	4859      	ldr	r0, [pc, #356]	; (8002090 <main+0x570>)
 8001f2a:	f00a f88d 	bl	800c048 <HAL_UART_Transmit_DMA>
						//if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							{ HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10); }
 8001f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f32:	4858      	ldr	r0, [pc, #352]	; (8002094 <main+0x574>)
 8001f34:	f005 fb3a 	bl	80075ac <HAL_GPIO_TogglePin>
              	  }

	  eMBPoll(  );  // Вызовите основной цикл опроса стека протоколов Modbus.
 8001f38:	f00b fee6 	bl	800dd08 <eMBPoll>




	  // power_procent - меняется от 2 проц до 98 проц, и от этого сдвигаются фронты TIM1_OUT3,  TIM1_OUT1 - constanta
	  if (htim16.Instance->CNT >1000) // tim16 тактуется 1 MHz, нужен для плавного старта-стопа генерации
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <main+0x578>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f46:	f240 8114 	bls.w	8002172 <main+0x652>
	  {
		  htim16.Instance->CNT =0;
 8001f4a:	4b53      	ldr	r3, [pc, #332]	; (8002098 <main+0x578>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
		  // синяя кнопка для стопа, если был запущен с модбуса
	      if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // нажата кнопка
 8001f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f56:	484f      	ldr	r0, [pc, #316]	; (8002094 <main+0x574>)
 8001f58:	f005 faf8 	bl	800754c <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d11c      	bne.n	8001f9c <main+0x47c>
	      { 														// HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	    	  count_press_blue_btn ++;
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <main+0x57c>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <main+0x57c>)
 8001f6c:	701a      	strb	r2, [r3, #0]
	    	  if (count_press_blue_btn >5)
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	; (800209c <main+0x57c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d915      	bls.n	8001fa2 <main+0x482>
	    	  {
	    		  count_press_blue_btn=5;
 8001f76:	4b49      	ldr	r3, [pc, #292]	; (800209c <main+0x57c>)
 8001f78:	2205      	movs	r2, #5
 8001f7a:	701a      	strb	r2, [r3, #0]
	    		  //cmd_set.cmd_flags =0;  // тотальный стоп
	    		  cmd_set.flag_ON_generation = false;
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <main+0x558>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	709a      	strb	r2, [r3, #2]
	    		  cmd_set.flag_ON_TxData_cicle = false;
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <main+0x558>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	711a      	strb	r2, [r3, #4]
	    		  cmd_set.flag_ON_scan_freq = false;
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <main+0x558>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	70da      	strb	r2, [r3, #3]
	    		  cmd_set.flag_ON_scan_time = false;
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <main+0x558>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	719a      	strb	r2, [r3, #6]
	    		  cmd_set.flag_ON_autoTuning_freq = false;
 8001f94:	4b38      	ldr	r3, [pc, #224]	; (8002078 <main+0x558>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	715a      	strb	r2, [r3, #5]
 8001f9a:	e002      	b.n	8001fa2 <main+0x482>
	    	  }
	      }
	      else
	      { count_press_blue_btn =0; } // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <main+0x57c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]


		  if (cmd_set.flag_ON_generation == true)// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <main+0x558>)
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d042      	beq.n	8002030 <main+0x510>
	  		{
	  			if (step_power_procent > cmd_set.proc_pwr /*power_procent*/) {step_power_procent --;}
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <main+0x558>)
 8001fac:	895b      	ldrh	r3, [r3, #10]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <main+0x580>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d204      	bcs.n	8001fc2 <main+0x4a2>
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <main+0x580>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <main+0x580>)
 8001fc0:	6013      	str	r3, [r2, #0]
	  			if (step_power_procent < cmd_set.proc_pwr /*power_procent*/) {step_power_procent ++;}
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <main+0x558>)
 8001fc4:	895b      	ldrh	r3, [r3, #10]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <main+0x580>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d904      	bls.n	8001fda <main+0x4ba>
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <main+0x580>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <main+0x580>)
 8001fd8:	6013      	str	r3, [r2, #0]
	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <main+0x584>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <main+0x588>)
 8001fe2:	6013      	str	r3, [r2, #0]
					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <main+0x588>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	bf8c      	ite	hi
 8001fec:	2301      	movhi	r3, #1
 8001fee:	2300      	movls	r3, #0
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <main+0x588>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b36      	cmp	r3, #54	; 0x36
 8001ff8:	bf94      	ite	ls
 8001ffa:	2301      	movls	r3, #1
 8001ffc:	2300      	movhi	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4013      	ands	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80b4 	beq.w	8002172 <main+0x652>
					{
						if (flag_generate_ON ==0)
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <main+0x58c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <main+0x502>
							{ __HAL_TIM_MOE_ENABLE(&htim1); } // програмно восстанавливается флаг MOE для подключения выходов TIM1
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <main+0x584>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <main+0x584>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
						flag_generate_ON =255;
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <main+0x58c>)
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	701a      	strb	r2, [r3, #0]
						flag_generate_OFF =0;
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <main+0x590>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e0a0      	b.n	8002172 <main+0x652>
					}
	  		}
	  		else	// кнопка отпущена, СТОП
	  		{
				if (step_power_procent > 2)
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <main+0x580>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d93d      	bls.n	80020b4 <main+0x594>
					{step_power_procent --;}
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <main+0x580>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3b01      	subs	r3, #1
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <main+0x580>)
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e096      	b.n	8002172 <main+0x652>
 8002044:	2000262c 	.word	0x2000262c
 8002048:	2000462c 	.word	0x2000462c
 800204c:	2000662c 	.word	0x2000662c
 8002050:	0800328d 	.word	0x0800328d
 8002054:	2000048c 	.word	0x2000048c
 8002058:	2000062c 	.word	0x2000062c
 800205c:	2000162c 	.word	0x2000162c
 8002060:	2000f66c 	.word	0x2000f66c
 8002064:	46c35000 	.word	0x46c35000
 8002068:	2000f670 	.word	0x2000f670
 800206c:	08015258 	.word	0x08015258
 8002070:	20012074 	.word	0x20012074
 8002074:	20011ec6 	.word	0x20011ec6
 8002078:	20011ec8 	.word	0x20011ec8
 800207c:	20011edc 	.word	0x20011edc
 8002080:	20011ec4 	.word	0x20011ec4
 8002084:	20011edf 	.word	0x20011edf
 8002088:	2000f658 	.word	0x2000f658
 800208c:	20000468 	.word	0x20000468
 8002090:	20012278 	.word	0x20012278
 8002094:	48000800 	.word	0x48000800
 8002098:	200120c0 	.word	0x200120c0
 800209c:	20000618 	.word	0x20000618
 80020a0:	20000010 	.word	0x20000010
 80020a4:	20011f44 	.word	0x20011f44
 80020a8:	20000614 	.word	0x20000614
 80020ac:	20000629 	.word	0x20000629
 80020b0:	20000628 	.word	0x20000628
				else
				{
					step_power_procent =2;
 80020b4:	4b84      	ldr	r3, [pc, #528]	; (80022c8 <main+0x7a8>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
	  	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 80020ba:	4b84      	ldr	r3, [pc, #528]	; (80022cc <main+0x7ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	4a83      	ldr	r2, [pc, #524]	; (80022d0 <main+0x7b0>)
 80020c2:	6013      	str	r3, [r2, #0]
	  					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 80020c4:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <main+0x7b0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	bf8c      	ite	hi
 80020cc:	2301      	movhi	r3, #1
 80020ce:	2300      	movls	r3, #0
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <main+0x7b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b36      	cmp	r3, #54	; 0x36
 80020d8:	bf94      	ite	ls
 80020da:	2301      	movls	r3, #1
 80020dc:	2300      	movhi	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d044      	beq.n	8002172 <main+0x652>
	  					{
							if (flag_generate_OFF ==0)
 80020e8:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <main+0x7b4>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13a      	bne.n	8002166 <main+0x646>
							{
								for(int i=0; i<100; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e034      	b.n	8002160 <main+0x640>
								{
									if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	4874      	ldr	r0, [pc, #464]	; (80022cc <main+0x7ac>)
 80020fa:	f008 fdd5 	bl	800aca8 <HAL_TIM_GenerateEvent>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d12a      	bne.n	800215a <main+0x63a>
									{
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 8002104:	2300      	movs	r3, #0
 8002106:	837b      	strh	r3, [r7, #26]
 8002108:	e01a      	b.n	8002140 <main+0x620>
											{
												data_adc1_Tx[ic] =0;
 800210a:	8b7b      	ldrh	r3, [r7, #26]
 800210c:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <main+0x7b8>)
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
												data_adc2_Tx[ic] =0;
 8002118:	8b7b      	ldrh	r3, [r7, #26]
 800211a:	4a70      	ldr	r2, [pc, #448]	; (80022dc <main+0x7bc>)
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
												adc1_Tx[ic] =0;
 8002126:	8b7b      	ldrh	r3, [r7, #26]
 8002128:	4a6d      	ldr	r2, [pc, #436]	; (80022e0 <main+0x7c0>)
 800212a:	2100      	movs	r1, #0
 800212c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
												adc2_Tx[ic] =0;
 8002130:	8b7b      	ldrh	r3, [r7, #26]
 8002132:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <main+0x7c4>)
 8002134:	2100      	movs	r1, #0
 8002136:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 800213a:	8b7b      	ldrh	r3, [r7, #26]
 800213c:	3301      	adds	r3, #1
 800213e:	837b      	strh	r3, [r7, #26]
 8002140:	8b7a      	ldrh	r2, [r7, #26]
 8002142:	4b69      	ldr	r3, [pc, #420]	; (80022e8 <main+0x7c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0fd9      	lsrs	r1, r3, #31
 8002148:	440b      	add	r3, r1
 800214a:	105b      	asrs	r3, r3, #1
 800214c:	429a      	cmp	r2, r3
 800214e:	dbdc      	blt.n	800210a <main+0x5ea>
											}
										index_data_real_zamer =800; // подготовка для замера
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <main+0x7cc>)
 8002152:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002156:	801a      	strh	r2, [r3, #0]
										break;
 8002158:	e005      	b.n	8002166 <main+0x646>
								for(int i=0; i<100; i++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b63      	cmp	r3, #99	; 0x63
 8002164:	ddc7      	ble.n	80020f6 <main+0x5d6>
									}// if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
								} // for(int i=0; i<100; i++)
							} // if (flag_generate_OFF ==0)
							flag_generate_OFF =255;
 8002166:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <main+0x7b4>)
 8002168:	22ff      	movs	r2, #255	; 0xff
 800216a:	701a      	strb	r2, [r3, #0]
							flag_generate_ON =0;
 800216c:	4b60      	ldr	r3, [pc, #384]	; (80022f0 <main+0x7d0>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
	  					}
	  	*/
	  					// ======   А ЭТО СТОП  СТОП  ====== ======   А ЭТО START  START  ======


	  htim1.Instance->CCR1 = ccr1_tim1; // tim1->CCR1 == 63   всегда без вариантов
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <main+0x7ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <main+0x7d4>)
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
	  ccr3_tim1 = (64 * step_power_procent ) / 100;
 800217c:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <main+0x7a8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <main+0x7d8>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	4a5c      	ldr	r2, [pc, #368]	; (80022fc <main+0x7dc>)
 800218c:	6013      	str	r3, [r2, #0]
		  if(ccr3_tim1 >62) {ccr3_tim1 =62;}// 96.88%   =>   64*96.88/100=62	 deadtime фиксировано ==85 тиков от 170_МГц, Меньшая мощность будет наползать на deadtime
 800218e:	4b5b      	ldr	r3, [pc, #364]	; (80022fc <main+0x7dc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b3e      	cmp	r3, #62	; 0x3e
 8002194:	d902      	bls.n	800219c <main+0x67c>
 8002196:	4b59      	ldr	r3, [pc, #356]	; (80022fc <main+0x7dc>)
 8002198:	223e      	movs	r2, #62	; 0x3e
 800219a:	601a      	str	r2, [r3, #0]
		  if(ccr3_tim1 <2) {ccr3_tim1 =2;}  // 3.125%   =>    64* 3.125/100=2	 2 тика от TIM1  == 90(тиков от 170_МГц при 30кГц) == 106(тиков от 170_МГц при 25кГц) == 186(тиков от 170_МГц при 14,5кГц)
 800219c:	4b57      	ldr	r3, [pc, #348]	; (80022fc <main+0x7dc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d802      	bhi.n	80021aa <main+0x68a>
 80021a4:	4b55      	ldr	r3, [pc, #340]	; (80022fc <main+0x7dc>)
 80021a6:	2202      	movs	r2, #2
 80021a8:	601a      	str	r2, [r3, #0]
	  ccr4_tim1 = 64 + ccr3_tim1;
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <main+0x7dc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3340      	adds	r3, #64	; 0x40
 80021b0:	4a53      	ldr	r2, [pc, #332]	; (8002300 <main+0x7e0>)
 80021b2:	6013      	str	r3, [r2, #0]
		  if(ccr4_tim1 >125) {ccr4_tim1 =125;}
 80021b4:	4b52      	ldr	r3, [pc, #328]	; (8002300 <main+0x7e0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b7d      	cmp	r3, #125	; 0x7d
 80021ba:	d902      	bls.n	80021c2 <main+0x6a2>
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <main+0x7e0>)
 80021be:	227d      	movs	r2, #125	; 0x7d
 80021c0:	601a      	str	r2, [r3, #0]
		  if(ccr4_tim1 <66) {ccr4_tim1 =66;}
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <main+0x7e0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b41      	cmp	r3, #65	; 0x41
 80021c8:	d802      	bhi.n	80021d0 <main+0x6b0>
 80021ca:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <main+0x7e0>)
 80021cc:	2242      	movs	r2, #66	; 0x42
 80021ce:	601a      	str	r2, [r3, #0]
	  htim1.Instance->CCR3 = ccr3_tim1; //
 80021d0:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <main+0x7ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a49      	ldr	r2, [pc, #292]	; (80022fc <main+0x7dc>)
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance->CCR4 = ccr4_tim1; //  power_procent
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <main+0x7ac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a48      	ldr	r2, [pc, #288]	; (8002300 <main+0x7e0>)
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

	  // ========================== а вот ОНО, - новая частота  ============================
	  // hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
	  if(hrtim_period_new >1000) // == 43 kHz    hrtim_period_new=2930  == 14505 Hz
 80021e4:	4b47      	ldr	r3, [pc, #284]	; (8002304 <main+0x7e4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ec:	d904      	bls.n	80021f8 <main+0x6d8>
		  {  hhrtim1.Instance->sMasterRegs.MPER = hrtim_period_new; }
 80021ee:	4b46      	ldr	r3, [pc, #280]	; (8002308 <main+0x7e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a44      	ldr	r2, [pc, #272]	; (8002304 <main+0x7e4>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	615a      	str	r2, [r3, #20]
	  freq_tim1 = 5440000000 / (hhrtim1.Instance->sMasterRegs.MPER) / 128; // это есть выходная частота, tim1->ARR == 127  всегда ==> делитель=128
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <main+0x7e8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2200      	movs	r2, #0
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002208:	a12d      	add	r1, pc, #180	; (adr r1, 80022c0 <main+0x7a0>)
 800220a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800220e:	f7fe fd63 	bl	8000cd8 <__aeabi_ldivmod>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	2b00      	cmp	r3, #0
 8002218:	da05      	bge.n	8002226 <main+0x706>
 800221a:	f112 087f 	adds.w	r8, r2, #127	; 0x7f
 800221e:	f143 0900 	adc.w	r9, r3, #0
 8002222:	4642      	mov	r2, r8
 8002224:	464b      	mov	r3, r9
 8002226:	f04f 0000 	mov.w	r0, #0
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	09d0      	lsrs	r0, r2, #7
 8002230:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002234:	11d9      	asrs	r1, r3, #7
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <main+0x7ec>)
 800223c:	601a      	str	r2, [r3, #0]
	  freq_tim1_float = (float)freq_tim1;
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <main+0x7ec>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <main+0x7f0>)
 800224c:	edc3 7a00 	vstr	s15, [r3]

	  if ((cmd_set.flag_ON_scan_time == true) & (index_data_real_zamer >1000))
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <main+0x7f4>)
 8002252:	799a      	ldrb	r2, [r3, #6]
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <main+0x7cc>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800225c:	bf8c      	ite	hi
 800225e:	2301      	movhi	r3, #1
 8002260:	2300      	movls	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4013      	ands	r3, r2
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <main+0x752>
	  	  { flag_data_complit_for_Tx = 255; }
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <main+0x7f8>)
 800226e:	22ff      	movs	r2, #255	; 0xff
 8002270:	801a      	strh	r2, [r3, #0]

	  if (flag_end_FFT ==0) // flag_complit_ADC ==1 означает что все замеры сделаны
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <main+0x7fc>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 84b4 	bne.w	8002be4 <main+0x10c4>
	  {
		  flag_end_FFT =1;
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <main+0x7fc>)
 800227e:	2201      	movs	r2, #1
 8002280:	801a      	strh	r2, [r3, #0]
		//count_tic_adc_finish = DWT_CYCCNT;//смотрим сколько натикало, поскольку при старте  DWT_CYCCNT==0, то все просто
		//count_tic_adc_float_mks = (float)count_tic_adc_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 82-86 мкс
		// обнуляем счетчик тиков, для подсчета времени работы прг, и одновременно уже будет идти 256 замеров АЦП
			count_tic_ALL_finish = DWT_CYCCNT;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <main+0x800>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a27      	ldr	r2, [pc, #156]	; (8002324 <main+0x804>)
 8002288:	6013      	str	r3, [r2, #0]
			count_tic_ALL_float_mks = (float)count_tic_ALL_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 1320 мкс 512 zamerov;
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <main+0x804>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002328 <main+0x808>
 800229a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <main+0x80c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <main+0x810>)
 80022b0:	edc3 7a00 	vstr	s15, [r3]
		 DWT_CYCCNT =0;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <main+0x800>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]



//		for (uint16_t ic =32; ic < LENGTH_OTSOS; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 80022ba:	2300      	movs	r3, #0
 80022bc:	833b      	strh	r3, [r7, #24]
 80022be:	e11d      	b.n	80024fc <main+0x9dc>
 80022c0:	443fd000 	.word	0x443fd000
 80022c4:	00000001 	.word	0x00000001
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20011f44 	.word	0x20011f44
 80022d0:	20000614 	.word	0x20000614
 80022d4:	20000628 	.word	0x20000628
 80022d8:	20007630 	.word	0x20007630
 80022dc:	20008630 	.word	0x20008630
 80022e0:	20006630 	.word	0x20006630
 80022e4:	20006e30 	.word	0x20006e30
 80022e8:	2000662c 	.word	0x2000662c
 80022ec:	20011ec4 	.word	0x20011ec4
 80022f0:	20000629 	.word	0x20000629
 80022f4:	20000004 	.word	0x20000004
 80022f8:	51eb851f 	.word	0x51eb851f
 80022fc:	20000008 	.word	0x20000008
 8002300:	2000000c 	.word	0x2000000c
 8002304:	2000001c 	.word	0x2000001c
 8002308:	200004ec 	.word	0x200004ec
 800230c:	2000f654 	.word	0x2000f654
 8002310:	2000f658 	.word	0x2000f658
 8002314:	20011ec8 	.word	0x20011ec8
 8002318:	20011ec6 	.word	0x20011ec6
 800231c:	2000061a 	.word	0x2000061a
 8002320:	e0001004 	.word	0xe0001004
 8002324:	20000620 	.word	0x20000620
 8002328:	49742400 	.word	0x49742400
 800232c:	20000030 	.word	0x20000030
 8002330:	20000624 	.word	0x20000624
				//X_filter += V_filter - X_filter * L_filter;
				// ===============================================================
				// X_filter_1 += (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] & 0x0000FFFF);
				// if (zamer_tim20[ic] >50) { X_filter_1 += 1; }
				if(flag_data_complit_for_Tx>0) { adc1_Tx[ic] = zamer_adc_dma[ic] & 0x0000FFFF; }
 8002334:	4ba6      	ldr	r3, [pc, #664]	; (80025d0 <main+0xab0>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <main+0x82e>
 800233c:	8b3b      	ldrh	r3, [r7, #24]
 800233e:	4aa5      	ldr	r2, [pc, #660]	; (80025d4 <main+0xab4>)
 8002340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002344:	8b3b      	ldrh	r3, [r7, #24]
 8002346:	b291      	uxth	r1, r2
 8002348:	4aa3      	ldr	r2, [pc, #652]	; (80025d8 <main+0xab8>)
 800234a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_1 += (float) (zamer_adc_dma[ic] & 0x0000FFFF);
 800234e:	8b3b      	ldrh	r3, [r7, #24]
 8002350:	4aa0      	ldr	r2, [pc, #640]	; (80025d4 <main+0xab4>)
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	b29b      	uxth	r3, r3
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002360:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <main+0xabc>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236a:	4b9c      	ldr	r3, [pc, #624]	; (80025dc <main+0xabc>)
 800236c:	edc3 7a00 	vstr	s15, [r3]
				V_filter_1 -= X_filter_1 * (R_filter);
 8002370:	4b9b      	ldr	r3, [pc, #620]	; (80025e0 <main+0xac0>)
 8002372:	ed93 7a00 	vldr	s14, [r3]
 8002376:	4b99      	ldr	r3, [pc, #612]	; (80025dc <main+0xabc>)
 8002378:	edd3 6a00 	vldr	s13, [r3]
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <main+0xac4>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <main+0xac0>)
 800238c:	edc3 7a00 	vstr	s15, [r3]
				X_filter_1 += V_filter_1 - X_filter_1 * L_filter;
 8002390:	4b93      	ldr	r3, [pc, #588]	; (80025e0 <main+0xac0>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	4b91      	ldr	r3, [pc, #580]	; (80025dc <main+0xabc>)
 8002398:	edd3 6a00 	vldr	s13, [r3]
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <main+0xac8>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <main+0xabc>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	4b89      	ldr	r3, [pc, #548]	; (80025dc <main+0xabc>)
 80023b6:	edc3 7a00 	vstr	s15, [r3]
				filter_adc1[ic] = X_filter_1;
 80023ba:	8b3b      	ldrh	r3, [r7, #24]
 80023bc:	4a87      	ldr	r2, [pc, #540]	; (80025dc <main+0xabc>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	498a      	ldr	r1, [pc, #552]	; (80025ec <main+0xacc>)
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
				data_adc1[2*ic] = 0.001 * X_filter_1;
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <main+0xabc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_f2d>
 80023d2:	a37d      	add	r3, pc, #500	; (adr r3, 80025c8 <main+0xaa8>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f936 	bl	8000648 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	8b3b      	ldrh	r3, [r7, #24]
 80023e6:	005c      	lsls	r4, r3, #1
 80023e8:	f7fe fc26 	bl	8000c38 <__aeabi_d2f>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4980      	ldr	r1, [pc, #512]	; (80025f0 <main+0xad0>)
 80023f0:	00a3      	lsls	r3, r4, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc1_Tx[ic] = data_adc1[2*ic]; }
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <main+0xab0>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <main+0x8f4>
 80023fe:	8b3b      	ldrh	r3, [r7, #24]
 8002400:	005a      	lsls	r2, r3, #1
 8002402:	8b3b      	ldrh	r3, [r7, #24]
 8002404:	497a      	ldr	r1, [pc, #488]	; (80025f0 <main+0xad0>)
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	440a      	add	r2, r1
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	4979      	ldr	r1, [pc, #484]	; (80025f4 <main+0xad4>)
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	601a      	str	r2, [r3, #0]
				//data_adc1[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*(ic-32+1)] =0;
				// ==================================================================
				// X_filter_2 += (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] >>16);
				if(flag_data_complit_for_Tx>0) { adc2_Tx[ic] = (zamer_adc_dma[ic] >>16); }
 8002414:	4b6e      	ldr	r3, [pc, #440]	; (80025d0 <main+0xab0>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <main+0x910>
 800241c:	8b3b      	ldrh	r3, [r7, #24]
 800241e:	4a6d      	ldr	r2, [pc, #436]	; (80025d4 <main+0xab4>)
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	0c1a      	lsrs	r2, r3, #16
 8002426:	8b3b      	ldrh	r3, [r7, #24]
 8002428:	b291      	uxth	r1, r2
 800242a:	4a73      	ldr	r2, [pc, #460]	; (80025f8 <main+0xad8>)
 800242c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_2 += (float) ((zamer_adc_dma[ic] >>16));
 8002430:	8b3b      	ldrh	r3, [r7, #24]
 8002432:	4a68      	ldr	r2, [pc, #416]	; (80025d4 <main+0xab4>)
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002442:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <main+0xadc>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244c:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <main+0xadc>)
 800244e:	edc3 7a00 	vstr	s15, [r3]
				V_filter_2 -= X_filter_2 * (R_filter);
 8002452:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <main+0xae0>)
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <main+0xadc>)
 800245a:	edd3 6a00 	vldr	s13, [r3]
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <main+0xac4>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246c:	4b64      	ldr	r3, [pc, #400]	; (8002600 <main+0xae0>)
 800246e:	edc3 7a00 	vstr	s15, [r3]
				X_filter_2 += V_filter_2 - X_filter_2 * L_filter;
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <main+0xae0>)
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	4b60      	ldr	r3, [pc, #384]	; (80025fc <main+0xadc>)
 800247a:	edd3 6a00 	vldr	s13, [r3]
 800247e:	4b5a      	ldr	r3, [pc, #360]	; (80025e8 <main+0xac8>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800248c:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <main+0xadc>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	4b59      	ldr	r3, [pc, #356]	; (80025fc <main+0xadc>)
 8002498:	edc3 7a00 	vstr	s15, [r3]
				filter_adc2[ic] = X_filter_2;
 800249c:	8b3b      	ldrh	r3, [r7, #24]
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <main+0xadc>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4958      	ldr	r1, [pc, #352]	; (8002604 <main+0xae4>)
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	601a      	str	r2, [r3, #0]
				data_adc2[2*ic] = 0.001 * X_filter_2;
 80024aa:	4b54      	ldr	r3, [pc, #336]	; (80025fc <main+0xadc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f872 	bl	8000598 <__aeabi_f2d>
 80024b4:	a344      	add	r3, pc, #272	; (adr r3, 80025c8 <main+0xaa8>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f8c5 	bl	8000648 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	8b3b      	ldrh	r3, [r7, #24]
 80024c8:	005c      	lsls	r4, r3, #1
 80024ca:	f7fe fbb5 	bl	8000c38 <__aeabi_d2f>
 80024ce:	4602      	mov	r2, r0
 80024d0:	494d      	ldr	r1, [pc, #308]	; (8002608 <main+0xae8>)
 80024d2:	00a3      	lsls	r3, r4, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc2_Tx[ic] = data_adc2[2*ic]; }
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <main+0xab0>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <main+0x9d6>
 80024e0:	8b3b      	ldrh	r3, [r7, #24]
 80024e2:	005a      	lsls	r2, r3, #1
 80024e4:	8b3b      	ldrh	r3, [r7, #24]
 80024e6:	4948      	ldr	r1, [pc, #288]	; (8002608 <main+0xae8>)
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	440a      	add	r2, r1
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4947      	ldr	r1, [pc, #284]	; (800260c <main+0xaec>)
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	601a      	str	r2, [r3, #0]
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 80024f6:	8b3b      	ldrh	r3, [r7, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	833b      	strh	r3, [r7, #24]
 80024fc:	8b3b      	ldrh	r3, [r7, #24]
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	f4ff af17 	bcc.w	8002334 <main+0x814>
				//data_adc2[2*(ic-32)] = X_filter_2;
				//data_adc2[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*(ic-32+1)] =0;
			}

			if(flag_data_complit_for_Tx>0)
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <main+0xab0>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <main+0x9fa>
				{
					index_data_real_zamer =0;
 800250e:	4b40      	ldr	r3, [pc, #256]	; (8002610 <main+0xaf0>)
 8002510:	2200      	movs	r2, #0
 8002512:	801a      	strh	r2, [r3, #0]
					flag_data_complit_for_Tx =0;
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <main+0xab0>)
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]
//					for (uint16_t iv =0; iv < 16; iv++)
//					{ data_adc1[32*iv + ic] = 0; }
//				}
//			}

			flag_end_FFT =2; // такой флаг разрешает остановить АЦП и перекинуть массив данных, пока тут дорасчитываем до конца
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <main+0xaf4>)
 800251c:	2202      	movs	r2, #2
 800251e:	801a      	strh	r2, [r3, #0]
							// перекид данных занимает 41мкс, и произойдет только при полном окончании N(512) замеров
			count_tic_FFT_start= DWT_CYCCNT;
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <main+0xaf8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3d      	ldr	r2, [pc, #244]	; (800261c <main+0xafc>)
 8002526:	6013      	str	r3, [r2, #0]
		  // Process the data through the CFFT/CIFFT module
			if (fft_N ==256)
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <main+0xb00>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d114      	bne.n	800255c <main+0xa3c>
			{
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc1, ifftFlag, doBitReverse);//в реале == 361мкс(256 sampl)
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <main+0xb04>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <main+0xb08>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	492c      	ldr	r1, [pc, #176]	; (80025f0 <main+0xad0>)
 8002540:	483a      	ldr	r0, [pc, #232]	; (800262c <main+0xb0c>)
 8002542:	f00c fa4f 	bl	800e9e4 <arm_cfft_f32>
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc2, ifftFlag, doBitReverse);
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <main+0xb04>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <main+0xb08>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	492d      	ldr	r1, [pc, #180]	; (8002608 <main+0xae8>)
 8002554:	4835      	ldr	r0, [pc, #212]	; (800262c <main+0xb0c>)
 8002556:	f00c fa45 	bl	800e9e4 <arm_cfft_f32>
 800255a:	e0a0      	b.n	800269e <main+0xb7e>
			}
			else
			{
				if (fft_N ==512)
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <main+0xb00>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002564:	d114      	bne.n	8002590 <main+0xa70>
				{
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc1, ifftFlag, doBitReverse);//в реале == 618мкс(512 sampl)
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <main+0xb04>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <main+0xb08>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	491f      	ldr	r1, [pc, #124]	; (80025f0 <main+0xad0>)
 8002574:	482e      	ldr	r0, [pc, #184]	; (8002630 <main+0xb10>)
 8002576:	f00c fa35 	bl	800e9e4 <arm_cfft_f32>
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc2, ifftFlag, doBitReverse);
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <main+0xb04>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <main+0xb08>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4920      	ldr	r1, [pc, #128]	; (8002608 <main+0xae8>)
 8002588:	4829      	ldr	r0, [pc, #164]	; (8002630 <main+0xb10>)
 800258a:	f00c fa2b 	bl	800e9e4 <arm_cfft_f32>
 800258e:	e086      	b.n	800269e <main+0xb7e>
				}
				else
				{
					if (fft_N ==1024)
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <main+0xb00>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d14e      	bne.n	8002638 <main+0xb18>
					{
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(1024 sampl)
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <main+0xb04>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <main+0xb08>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4912      	ldr	r1, [pc, #72]	; (80025f0 <main+0xad0>)
 80025a8:	4822      	ldr	r0, [pc, #136]	; (8002634 <main+0xb14>)
 80025aa:	f00c fa1b 	bl	800e9e4 <arm_cfft_f32>
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc2, ifftFlag, doBitReverse);
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <main+0xb04>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <main+0xb08>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4913      	ldr	r1, [pc, #76]	; (8002608 <main+0xae8>)
 80025bc:	481d      	ldr	r0, [pc, #116]	; (8002634 <main+0xb14>)
 80025be:	f00c fa11 	bl	800e9e4 <arm_cfft_f32>
 80025c2:	e06c      	b.n	800269e <main+0xb7e>
 80025c4:	f3af 8000 	nop.w
 80025c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025cc:	3f50624d 	.word	0x3f50624d
 80025d0:	20011ec6 	.word	0x20011ec6
 80025d4:	2000162c 	.word	0x2000162c
 80025d8:	20006630 	.word	0x20006630
 80025dc:	2000f674 	.word	0x2000f674
 80025e0:	2000f678 	.word	0x2000f678
 80025e4:	20000020 	.word	0x20000020
 80025e8:	20000024 	.word	0x20000024
 80025ec:	20009630 	.word	0x20009630
 80025f0:	2000262c 	.word	0x2000262c
 80025f4:	20007630 	.word	0x20007630
 80025f8:	20006e30 	.word	0x20006e30
 80025fc:	2000f67c 	.word	0x2000f67c
 8002600:	2000f680 	.word	0x2000f680
 8002604:	2000a630 	.word	0x2000a630
 8002608:	2000462c 	.word	0x2000462c
 800260c:	20008630 	.word	0x20008630
 8002610:	20011ec4 	.word	0x20011ec4
 8002614:	2000061a 	.word	0x2000061a
 8002618:	e0001004 	.word	0xe0001004
 800261c:	2000061c 	.word	0x2000061c
 8002620:	20000018 	.word	0x20000018
 8002624:	2000f650 	.word	0x2000f650
 8002628:	20000014 	.word	0x20000014
 800262c:	08015670 	.word	0x08015670
 8002630:	08015690 	.word	0x08015690
 8002634:	08015650 	.word	0x08015650
					}
					else
					{
						if (fft_N ==2048)
 8002638:	4b95      	ldr	r3, [pc, #596]	; (8002890 <main+0xd70>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002640:	d114      	bne.n	800266c <main+0xb4c>
						{
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(2048 sampl)
 8002642:	4b94      	ldr	r3, [pc, #592]	; (8002894 <main+0xd74>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b93      	ldr	r3, [pc, #588]	; (8002898 <main+0xd78>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4993      	ldr	r1, [pc, #588]	; (800289c <main+0xd7c>)
 8002650:	4893      	ldr	r0, [pc, #588]	; (80028a0 <main+0xd80>)
 8002652:	f00c f9c7 	bl	800e9e4 <arm_cfft_f32>
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc2, ifftFlag, doBitReverse);
 8002656:	4b8f      	ldr	r3, [pc, #572]	; (8002894 <main+0xd74>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <main+0xd78>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	4990      	ldr	r1, [pc, #576]	; (80028a4 <main+0xd84>)
 8002664:	488e      	ldr	r0, [pc, #568]	; (80028a0 <main+0xd80>)
 8002666:	f00c f9bd 	bl	800e9e4 <arm_cfft_f32>
 800266a:	e018      	b.n	800269e <main+0xb7e>
						}
						else
						{
							if (fft_N ==4096)
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <main+0xd70>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	d113      	bne.n	800269e <main+0xb7e>
							{
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc1, ifftFlag, doBitReverse);//в реале == 5461мкс(4096 sampl)
 8002676:	4b87      	ldr	r3, [pc, #540]	; (8002894 <main+0xd74>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b86      	ldr	r3, [pc, #536]	; (8002898 <main+0xd78>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4986      	ldr	r1, [pc, #536]	; (800289c <main+0xd7c>)
 8002684:	4888      	ldr	r0, [pc, #544]	; (80028a8 <main+0xd88>)
 8002686:	f00c f9ad 	bl	800e9e4 <arm_cfft_f32>
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc2, ifftFlag, doBitReverse);
 800268a:	4b82      	ldr	r3, [pc, #520]	; (8002894 <main+0xd74>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <main+0xd78>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4983      	ldr	r1, [pc, #524]	; (80028a4 <main+0xd84>)
 8002698:	4883      	ldr	r0, [pc, #524]	; (80028a8 <main+0xd88>)
 800269a:	f00c f9a3 	bl	800e9e4 <arm_cfft_f32>
					} // if (fft_N ==1024)
				} // if (fft_N ==512)
			} // if (fft_N ==256)

		  // Process the data through the Complex Magnitude Module for  calculating the magnitude at each bin
		  fftSize = fft_N /64 +10; // 10 такое количество гармоник достаточно, для массива 512 без нулей
 800269e:	4b7c      	ldr	r3, [pc, #496]	; (8002890 <main+0xd70>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	330a      	adds	r3, #10
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b80      	ldr	r3, [pc, #512]	; (80028ac <main+0xd8c>)
 80026ac:	601a      	str	r2, [r3, #0]
		  //ввремя вычисления Две магнитуды, в реале == 97мкс(fftSize==256) == 37мкс(fftSize==96)
		  arm_cmplx_mag_f32(data_adc1, arr1_Output_f32, fftSize);
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <main+0xd8c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	497e      	ldr	r1, [pc, #504]	; (80028b0 <main+0xd90>)
 80026b6:	4879      	ldr	r0, [pc, #484]	; (800289c <main+0xd7c>)
 80026b8:	f00c fa2c 	bl	800eb14 <arm_cmplx_mag_f32>
		  arm_cmplx_mag_f32(data_adc2, arr2_Output_f32, fftSize);
 80026bc:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <main+0xd8c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	497c      	ldr	r1, [pc, #496]	; (80028b4 <main+0xd94>)
 80026c4:	4877      	ldr	r0, [pc, #476]	; (80028a4 <main+0xd84>)
 80026c6:	f00c fa25 	bl	800eb14 <arm_cmplx_mag_f32>
		  arr1_phase_Output_8_f32 = 2*M_PI + atan2f(data_adc1[17], data_adc1[16]);
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <main+0xd7c>)
 80026cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026d0:	4b72      	ldr	r3, [pc, #456]	; (800289c <main+0xd7c>)
 80026d2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80026d6:	eef0 0a47 	vmov.f32	s1, s14
 80026da:	eeb0 0a67 	vmov.f32	s0, s15
 80026de:	f011 fcd9 	bl	8014094 <atan2f>
 80026e2:	ee10 3a10 	vmov	r3, s0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd ff56 	bl	8000598 <__aeabi_f2d>
 80026ec:	a362      	add	r3, pc, #392	; (adr r3, 8002878 <main+0xd58>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fd fdf3 	bl	80002dc <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa9b 	bl	8000c38 <__aeabi_d2f>
 8002702:	4603      	mov	r3, r0
 8002704:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <main+0xd98>)
 8002706:	6013      	str	r3, [r2, #0]
		  	  while(arr1_phase_Output_8_f32 > 4*M_PI ) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 - 2*M_PI; }
 8002708:	e012      	b.n	8002730 <main+0xc10>
 800270a:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <main+0xd98>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff42 	bl	8000598 <__aeabi_f2d>
 8002714:	a358      	add	r3, pc, #352	; (adr r3, 8002878 <main+0xd58>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fd fddd 	bl	80002d8 <__aeabi_dsub>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe fa87 	bl	8000c38 <__aeabi_d2f>
 800272a:	4603      	mov	r3, r0
 800272c:	4a62      	ldr	r2, [pc, #392]	; (80028b8 <main+0xd98>)
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <main+0xd98>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd ff2f 	bl	8000598 <__aeabi_f2d>
 800273a:	a351      	add	r3, pc, #324	; (adr r3, 8002880 <main+0xd60>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fe fa12 	bl	8000b68 <__aeabi_dcmpgt>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1df      	bne.n	800270a <main+0xbea>
		      while(arr1_phase_Output_8_f32 < 0) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 + 2*M_PI; }
 800274a:	e012      	b.n	8002772 <main+0xc52>
 800274c:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <main+0xd98>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd ff21 	bl	8000598 <__aeabi_f2d>
 8002756:	a348      	add	r3, pc, #288	; (adr r3, 8002878 <main+0xd58>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd fdbe 	bl	80002dc <__adddf3>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa66 	bl	8000c38 <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <main+0xd98>)
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <main+0xd98>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d4e4      	bmi.n	800274c <main+0xc2c>
		  arr2_phase_Output_8_f32 = atan2f(data_adc2[17], data_adc2[16]);
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <main+0xd84>)
 8002784:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <main+0xd84>)
 800278a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800278e:	eef0 0a47 	vmov.f32	s1, s14
 8002792:	eeb0 0a67 	vmov.f32	s0, s15
 8002796:	f011 fc7d 	bl	8014094 <atan2f>
 800279a:	eef0 7a40 	vmov.f32	s15, s0
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <main+0xd9c>)
 80027a0:	edc3 7a00 	vstr	s15, [r3]
			  while(arr2_phase_Output_8_f32 > 2*M_PI ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 - 2*M_PI; }
 80027a4:	e012      	b.n	80027cc <main+0xcac>
 80027a6:	4b45      	ldr	r3, [pc, #276]	; (80028bc <main+0xd9c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fef4 	bl	8000598 <__aeabi_f2d>
 80027b0:	a331      	add	r3, pc, #196	; (adr r3, 8002878 <main+0xd58>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fd fd8f 	bl	80002d8 <__aeabi_dsub>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7fe fa39 	bl	8000c38 <__aeabi_d2f>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <main+0xd9c>)
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <main+0xd9c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fee1 	bl	8000598 <__aeabi_f2d>
 80027d6:	a328      	add	r3, pc, #160	; (adr r3, 8002878 <main+0xd58>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fe f9c4 	bl	8000b68 <__aeabi_dcmpgt>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1df      	bne.n	80027a6 <main+0xc86>
			  while(arr2_phase_Output_8_f32 < 0 ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 + 2*M_PI; }
 80027e6:	e012      	b.n	800280e <main+0xcee>
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <main+0xd9c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fed3 	bl	8000598 <__aeabi_f2d>
 80027f2:	a321      	add	r3, pc, #132	; (adr r3, 8002878 <main+0xd58>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fd fd70 	bl	80002dc <__adddf3>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe fa18 	bl	8000c38 <__aeabi_d2f>
 8002808:	4603      	mov	r3, r0
 800280a:	4a2c      	ldr	r2, [pc, #176]	; (80028bc <main+0xd9c>)
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <main+0xd9c>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	d4e4      	bmi.n	80027e8 <main+0xcc8>

			  shift_phase_I8_U8_f32 = arr1_phase_Output_8_f32 - arr2_phase_Output_8_f32;
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <main+0xd98>)
 8002820:	ed93 7a00 	vldr	s14, [r3]
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <main+0xd9c>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <main+0xda0>)
 8002830:	edc3 7a00 	vstr	s15, [r3]
			  float float_temp = shift_phase_I8_U8_f32;
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <main+0xda0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]
			  	  while(float_temp > M_PI/2 ) {float_temp = float_temp - M_PI/2; }
 800283a:	e00f      	b.n	800285c <main+0xd3c>
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f7fd feab 	bl	8000598 <__aeabi_f2d>
 8002842:	a311      	add	r3, pc, #68	; (adr r3, 8002888 <main+0xd68>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fd46 	bl	80002d8 <__aeabi_dsub>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9f0 	bl	8000c38 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7fd fe9b 	bl	8000598 <__aeabi_f2d>
 8002862:	a309      	add	r3, pc, #36	; (adr r3, 8002888 <main+0xd68>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fe f97e 	bl	8000b68 <__aeabi_dcmpgt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e4      	bne.n	800283c <main+0xd1c>
			  	  while(float_temp < -M_PI/2 ) {float_temp = float_temp + M_PI/2; }
 8002872:	e037      	b.n	80028e4 <main+0xdc4>
 8002874:	f3af 8000 	nop.w
 8002878:	54442d18 	.word	0x54442d18
 800287c:	401921fb 	.word	0x401921fb
 8002880:	54442d18 	.word	0x54442d18
 8002884:	402921fb 	.word	0x402921fb
 8002888:	54442d18 	.word	0x54442d18
 800288c:	3ff921fb 	.word	0x3ff921fb
 8002890:	20000018 	.word	0x20000018
 8002894:	2000f650 	.word	0x2000f650
 8002898:	20000014 	.word	0x20000014
 800289c:	2000262c 	.word	0x2000262c
 80028a0:	08015660 	.word	0x08015660
 80028a4:	2000462c 	.word	0x2000462c
 80028a8:	08015680 	.word	0x08015680
 80028ac:	2000f64c 	.word	0x2000f64c
 80028b0:	2000b630 	.word	0x2000b630
 80028b4:	2000d630 	.word	0x2000d630
 80028b8:	2000f630 	.word	0x2000f630
 80028bc:	2000f634 	.word	0x2000f634
 80028c0:	2000f63c 	.word	0x2000f63c
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7fd fe67 	bl	8000598 <__aeabi_f2d>
 80028ca:	a3b7      	add	r3, pc, #732	; (adr r3, 8002ba8 <main+0x1088>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd fd04 	bl	80002dc <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f9ac 	bl	8000c38 <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f7fd fe57 	bl	8000598 <__aeabi_f2d>
 80028ea:	a3b1      	add	r3, pc, #708	; (adr r3, 8002bb0 <main+0x1090>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fe f91c 	bl	8000b2c <__aeabi_dcmplt>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e4      	bne.n	80028c4 <main+0xda4>
		  cos_phase_8_f32 = arm_cos_f32(float_temp);
 80028fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80028fe:	f00c fa2d 	bl	800ed5c <arm_cos_f32>
 8002902:	eef0 7a40 	vmov.f32	s15, s0
 8002906:	4b96      	ldr	r3, [pc, #600]	; (8002b60 <main+0x1040>)
 8002908:	edc3 7a00 	vstr	s15, [r3]
		  atan_phase_8_f32 = atanf(tanf(shift_phase_I8_U8_f32));
 800290c:	4b95      	ldr	r3, [pc, #596]	; (8002b64 <main+0x1044>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	f011 fb93 	bl	8014040 <tanf>
 800291a:	eef0 7a40 	vmov.f32	s15, s0
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	f011 fa39 	bl	8013d98 <atanf>
 8002926:	eef0 7a40 	vmov.f32	s15, s0
 800292a:	4b8f      	ldr	r3, [pc, #572]	; (8002b68 <main+0x1048>)
 800292c:	edc3 7a00 	vstr	s15, [r3]
		  calc_power_Output_8_f32	= arr2_Output_f32[8] * arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 8002930:	4b8e      	ldr	r3, [pc, #568]	; (8002b6c <main+0x104c>)
 8002932:	ed93 7a08 	vldr	s14, [r3, #32]
 8002936:	4b8e      	ldr	r3, [pc, #568]	; (8002b70 <main+0x1050>)
 8002938:	edd3 7a08 	vldr	s15, [r3, #32]
 800293c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002940:	4b87      	ldr	r3, [pc, #540]	; (8002b60 <main+0x1040>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	4b8a      	ldr	r3, [pc, #552]	; (8002b74 <main+0x1054>)
 800294c:	edc3 7a00 	vstr	s15, [r3]
		  calc_R_Output_8_f32 		= arr2_Output_f32[8] / arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 8002950:	4b86      	ldr	r3, [pc, #536]	; (8002b6c <main+0x104c>)
 8002952:	edd3 6a08 	vldr	s13, [r3, #32]
 8002956:	4b86      	ldr	r3, [pc, #536]	; (8002b70 <main+0x1050>)
 8002958:	edd3 7a08 	vldr	s15, [r3, #32]
 800295c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002960:	4b7f      	ldr	r3, [pc, #508]	; (8002b60 <main+0x1040>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	4b83      	ldr	r3, [pc, #524]	; (8002b78 <main+0x1058>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
		// F_bin = F *64/256 = F / 4 ;
		// F_bin = F *64/512 = F / 8 ;
		// F_bin = F *64/1024 = F / 16 ;
		// Koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
		// freq_new = F_bin * N + Koeff * F_bin;   // для этого случая N==4
		  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 8002970:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <main+0x105c>)
 8002972:	789a      	ldrb	r2, [r3, #2]
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <main+0x105c>)
 8002976:	795b      	ldrb	r3, [r3, #5]
 8002978:	4013      	ands	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <main+0x105c>)
 8002980:	78db      	ldrb	r3, [r3, #3]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4013      	ands	r3, r2
 800298a:	4a7c      	ldr	r2, [pc, #496]	; (8002b7c <main+0x105c>)
 800298c:	7992      	ldrb	r2, [r2, #6]
 800298e:	f082 0201 	eor.w	r2, r2, #1
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80dc 	beq.w	8002b54 <main+0x1034>
		  {
			if (fft_N ==256)
 800299c:	4b78      	ldr	r3, [pc, #480]	; (8002b80 <main+0x1060>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a4:	d132      	bne.n	8002a0c <main+0xeec>
			{
				koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
 80029a6:	4b72      	ldr	r3, [pc, #456]	; (8002b70 <main+0x1050>)
 80029a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80029ac:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <main+0x1050>)
 80029ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029b6:	4b6e      	ldr	r3, [pc, #440]	; (8002b70 <main+0x1050>)
 80029b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80029bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029c0:	4b6b      	ldr	r3, [pc, #428]	; (8002b70 <main+0x1050>)
 80029c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80029c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ca:	4b69      	ldr	r3, [pc, #420]	; (8002b70 <main+0x1050>)
 80029cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80029d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029dc:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <main+0x1064>)
 80029de:	edc3 7a00 	vstr	s15, [r3]
				freq_new = freq_tim1_float + koeff * freq_tim1_float/4;   // для этого случая N==4
 80029e2:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <main+0x1064>)
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <main+0x1068>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80029f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <main+0x1068>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <main+0x106c>)
 8002a06:	edc3 7a00 	vstr	s15, [r3]
 8002a0a:	e0a3      	b.n	8002b54 <main+0x1034>
			}
			else
			{
				if (fft_N ==512)
 8002a0c:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <main+0x1060>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a14:	d167      	bne.n	8002ae6 <main+0xfc6>
				{
					ln_x3 = 100000.f * logf((float)arr1_Output_f32[7]);
 8002a16:	4b56      	ldr	r3, [pc, #344]	; (8002b70 <main+0x1050>)
 8002a18:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a20:	f011 fb3a 	bl	8014098 <logf>
 8002a24:	eef0 7a40 	vmov.f32	s15, s0
 8002a28:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002b90 <main+0x1070>
 8002a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a30:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <main+0x1074>)
 8002a32:	edc3 7a00 	vstr	s15, [r3]
					ln_x4 = 100000.f * logf((float)arr1_Output_f32[8]);
 8002a36:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <main+0x1050>)
 8002a38:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	f011 fb2a 	bl	8014098 <logf>
 8002a44:	eef0 7a40 	vmov.f32	s15, s0
 8002a48:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002b90 <main+0x1070>
 8002a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a50:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <main+0x1078>)
 8002a52:	edc3 7a00 	vstr	s15, [r3]
					ln_x5 = 100000.f * logf((float)arr1_Output_f32[9]);
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <main+0x1050>)
 8002a58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a60:	f011 fb1a 	bl	8014098 <logf>
 8002a64:	eef0 7a40 	vmov.f32	s15, s0
 8002a68:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002b90 <main+0x1070>
 8002a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a70:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <main+0x107c>)
 8002a72:	edc3 7a00 	vstr	s15, [r3]
					// koeff = (ln_x5 -ln_x3) / (2*(2*ln_x4 -ln_x5 -ln_x3));
					koeff = (8.f + (ln_x5 -ln_x3) / 2.f / (2.f * ln_x4 -ln_x5 -ln_x3)) * 10000.f;
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <main+0x107c>)
 8002a78:	ed93 7a00 	vldr	s14, [r3]
 8002a7c:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <main+0x1074>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a86:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a8e:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <main+0x1078>)
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <main+0x107c>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <main+0x1074>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ab8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002ba0 <main+0x1080>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <main+0x1064>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
					freq_new = koeff * ((float)freq_tim1_float)/80000.f; // для этого случая N==8
 8002ac6:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <main+0x1064>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <main+0x1068>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002ba4 <main+0x1084>
 8002ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <main+0x106c>)
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
 8002ae4:	e036      	b.n	8002b54 <main+0x1034>
				}
				else
				{
					if (fft_N ==1024)
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <main+0x1060>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d131      	bne.n	8002b54 <main+0x1034>
					{
						koeff = (arr1_Output_f32[17] -arr1_Output_f32[15]) / (2*(2*arr1_Output_f32[16] -arr1_Output_f32[17] -arr1_Output_f32[15]));
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <main+0x1050>)
 8002af2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <main+0x1050>)
 8002af8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002afc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <main+0x1050>)
 8002b02:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002b06:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <main+0x1050>)
 8002b0c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <main+0x1050>)
 8002b16:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <main+0x1064>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
						freq_new = freq_tim1_float + koeff * freq_tim1_float/16;   // для этого случая N==16
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <main+0x1064>)
 8002b2e:	ed93 7a00 	vldr	s14, [r3]
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <main+0x1068>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002b40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <main+0x1068>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <main+0x106c>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]
			//memset(data_adc2, 0, 32764); // sizeof(float32_t)*8196);



		  	// size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002b54:	2300      	movs	r3, #0
 8002b56:	827b      	strh	r3, [r7, #18]
 8002b58:	e03f      	b.n	8002bda <main+0x10ba>
 8002b5a:	bf00      	nop
 8002b5c:	f3af 8000 	nop.w
 8002b60:	2000f640 	.word	0x2000f640
 8002b64:	2000f63c 	.word	0x2000f63c
 8002b68:	2000f644 	.word	0x2000f644
 8002b6c:	2000d630 	.word	0x2000d630
 8002b70:	2000b630 	.word	0x2000b630
 8002b74:	2000f638 	.word	0x2000f638
 8002b78:	2000f648 	.word	0x2000f648
 8002b7c:	20011ec8 	.word	0x20011ec8
 8002b80:	20000018 	.word	0x20000018
 8002b84:	2000f65c 	.word	0x2000f65c
 8002b88:	2000f658 	.word	0x2000f658
 8002b8c:	2000f66c 	.word	0x2000f66c
 8002b90:	47c35000 	.word	0x47c35000
 8002b94:	2000f660 	.word	0x2000f660
 8002b98:	2000f664 	.word	0x2000f664
 8002b9c:	2000f668 	.word	0x2000f668
 8002ba0:	461c4000 	.word	0x461c4000
 8002ba4:	479c4000 	.word	0x479c4000
 8002ba8:	54442d18 	.word	0x54442d18
 8002bac:	3ff921fb 	.word	0x3ff921fb
 8002bb0:	54442d18 	.word	0x54442d18
 8002bb4:	bff921fb 	.word	0xbff921fb
				{
					data_adc1[ic] =0;
 8002bb8:	8a7b      	ldrh	r3, [r7, #18]
 8002bba:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <main+0x1264>)
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
					data_adc2[ic] =0;
 8002bc6:	8a7b      	ldrh	r3, [r7, #18]
 8002bc8:	4a6f      	ldr	r2, [pc, #444]	; (8002d88 <main+0x1268>)
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002bd4:	8a7b      	ldrh	r3, [r7, #18]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	827b      	strh	r3, [r7, #18]
 8002bda:	8a7a      	ldrh	r2, [r7, #18]
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	; (8002d8c <main+0x126c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbe9      	blt.n	8002bb8 <main+0x1098>

	  // здесь будет разборка условий перехода по частоте
	  // freq_new - вычислена выше для типа автоподдержания частоты
	  // если получаем бит сканирования по частоте,  cmd_set.cmd_flags.1
	  // ============================================  сканирование по частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==true)) // скольжение по частоте
 8002be4:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <main+0x1270>)
 8002be6:	789a      	ldrb	r2, [r3, #2]
 8002be8:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <main+0x1270>)
 8002bea:	78db      	ldrb	r3, [r3, #3]
 8002bec:	4013      	ands	r3, r2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d058      	beq.n	8002ca6 <main+0x1186>
	  {
		  if (htim17.Instance->CNT > (cmd_set.time_step *10) )
 8002bf4:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <main+0x1274>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <main+0x1270>)
 8002bfc:	89db      	ldrh	r3, [r3, #14]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d94c      	bls.n	8002ca6 <main+0x1186>
		  {
			  htim17.Instance->CNT =0;
 8002c0c:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <main+0x1274>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
			  old_freq_new = freq_new;
 8002c14:	4b60      	ldr	r3, [pc, #384]	; (8002d98 <main+0x1278>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a60      	ldr	r2, [pc, #384]	; (8002d9c <main+0x127c>)
 8002c1a:	6013      	str	r3, [r2, #0]
			  freq_new = freq_new + flag_napravlenia_scan * cmd_set.step;
 8002c1c:	4b60      	ldr	r3, [pc, #384]	; (8002da0 <main+0x1280>)
 8002c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b5a      	ldr	r3, [pc, #360]	; (8002d90 <main+0x1270>)
 8002c26:	899b      	ldrh	r3, [r3, #12]
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <main+0x1278>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3e:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <main+0x1278>)
 8002c40:	edc3 7a00 	vstr	s15, [r3]
			  if (freq_new > (cmd_set.freq_start + (cmd_set.step *(cmd_set.N_step-1))))
 8002c44:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <main+0x1270>)
 8002c46:	891b      	ldrh	r3, [r3, #8]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <main+0x1270>)
 8002c4c:	899b      	ldrh	r3, [r3, #12]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <main+0x1270>)
 8002c52:	8a1b      	ldrh	r3, [r3, #16]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <main+0x1278>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	d503      	bpl.n	8002c7c <main+0x115c>
			  {
				  flag_napravlenia_scan = -1; // следующий степ будет в отрицательную сторону
 8002c74:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <main+0x1280>)
 8002c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7a:	801a      	strh	r2, [r3, #0]
			  }
			  if (freq_new < (cmd_set.freq_start + cmd_set.step))
 8002c7c:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <main+0x1270>)
 8002c7e:	891b      	ldrh	r3, [r3, #8]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <main+0x1270>)
 8002c84:	899b      	ldrh	r3, [r3, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <main+0x1278>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	dd02      	ble.n	8002ca6 <main+0x1186>
			  {
				  flag_napravlenia_scan = 1; // следующий степ будет в положительную сторону
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <main+0x1280>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	  // ============================================  стоять на одной частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_autoTuning_freq ==false)) // стоять на одной частоте
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <main+0x1270>)
 8002ca8:	789b      	ldrb	r3, [r3, #2]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <main+0x1270>)
 8002cae:	78db      	ldrb	r3, [r3, #3]
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	4a35      	ldr	r2, [pc, #212]	; (8002d90 <main+0x1270>)
 8002cba:	7952      	ldrb	r2, [r2, #5]
 8002cbc:	f082 0201 	eor.w	r2, r2, #1
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <main+0x11c2>
	  {
		  old_freq_new = freq_new;		//  при  cmd_set.flag_ON_scan_freq      новая частота будет формироваться при сканировании
 8002cc8:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <main+0x1278>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <main+0x127c>)
 8002cce:	6013      	str	r3, [r2, #0]
		  freq_new = cmd_set.freq_start; // при  cmd_set.flag_ON_autoTuning_freq  новую частоту будем вычислять после FFT преобразования
 8002cd0:	4b2f      	ldr	r3, [pc, #188]	; (8002d90 <main+0x1270>)
 8002cd2:	891b      	ldrh	r3, [r3, #8]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <main+0x1278>)
 8002cde:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (cmd_set.flag_ON_generation ==false)
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <main+0x1270>)
 8002ce4:	789b      	ldrb	r3, [r3, #2]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <main+0x11d8>
		  { index_data_real_zamer = 1024; } // чтобы при сканировании по времени, передача начиналась сразу, не надо было ждать
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <main+0x1284>)
 8002cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf6:	801a      	strh	r2, [r3, #0]

	  // ============================================  автоподстройка частоты  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <main+0x1270>)
 8002cfa:	789a      	ldrb	r2, [r3, #2]
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <main+0x1270>)
 8002cfe:	795b      	ldrb	r3, [r3, #5]
 8002d00:	4013      	ands	r3, r2
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <main+0x1270>)
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <main+0x1270>)
 8002d14:	7992      	ldrb	r2, [r2, #6]
 8002d16:	f082 0201 	eor.w	r2, r2, #1
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80b5 	beq.w	8002e8e <main+0x136e>
	  {
			if (old_freq_new >0)// надо проверить, чтобы не выскакивало за пределы
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <main+0x127c>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d32:	dd42      	ble.n	8002dba <main+0x129a>
				{
					if (freq_new >14500)
 8002d34:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <main+0x1278>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002da8 <main+0x1288>
 8002d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	dd35      	ble.n	8002db4 <main+0x1294>
						{
							if (freq_new <43000)
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <main+0x1278>)
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002dac <main+0x128c>
 8002d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	d50f      	bpl.n	8002d7c <main+0x125c>
								{ freq_new = (freq_new + old_freq_new) /2;  }
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <main+0x1278>)
 8002d5e:	ed93 7a00 	vldr	s14, [r3]
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <main+0x127c>)
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <main+0x1278>)
 8002d76:	edc3 7a00 	vstr	s15, [r3]
 8002d7a:	e01e      	b.n	8002dba <main+0x129a>
							else
								{ freq_new = 25000; }
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <main+0x1278>)
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <main+0x1290>)
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e01a      	b.n	8002dba <main+0x129a>
 8002d84:	2000262c 	.word	0x2000262c
 8002d88:	2000462c 	.word	0x2000462c
 8002d8c:	2000662c 	.word	0x2000662c
 8002d90:	20011ec8 	.word	0x20011ec8
 8002d94:	2001210c 	.word	0x2001210c
 8002d98:	2000f66c 	.word	0x2000f66c
 8002d9c:	2000f670 	.word	0x2000f670
 8002da0:	2000001a 	.word	0x2000001a
 8002da4:	20011ec4 	.word	0x20011ec4
 8002da8:	46629000 	.word	0x46629000
 8002dac:	4727f800 	.word	0x4727f800
 8002db0:	46c35000 	.word	0x46c35000
						}
					else
					{ freq_new = 25000; }
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <main+0x13c0>)
 8002db6:	4a4b      	ldr	r2, [pc, #300]	; (8002ee4 <main+0x13c4>)
 8002db8:	601a      	str	r2, [r3, #0]
				}
			old_freq_new = freq_new;
 8002dba:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <main+0x13c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a4a      	ldr	r2, [pc, #296]	; (8002ee8 <main+0x13c8>)
 8002dc0:	6013      	str	r3, [r2, #0]
			err_f[9] = err_f[8];
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <main+0x13cc>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a49      	ldr	r2, [pc, #292]	; (8002eec <main+0x13cc>)
 8002dc8:	6253      	str	r3, [r2, #36]	; 0x24
			err_f[8] = err_f[7];
 8002dca:	4b48      	ldr	r3, [pc, #288]	; (8002eec <main+0x13cc>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <main+0x13cc>)
 8002dd0:	6213      	str	r3, [r2, #32]
			err_f[7] = err_f[6];
 8002dd2:	4b46      	ldr	r3, [pc, #280]	; (8002eec <main+0x13cc>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4a45      	ldr	r2, [pc, #276]	; (8002eec <main+0x13cc>)
 8002dd8:	61d3      	str	r3, [r2, #28]
			err_f[6] = err_f[5];
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <main+0x13cc>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4a43      	ldr	r2, [pc, #268]	; (8002eec <main+0x13cc>)
 8002de0:	6193      	str	r3, [r2, #24]
			err_f[5] = err_f[4];
 8002de2:	4b42      	ldr	r3, [pc, #264]	; (8002eec <main+0x13cc>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4a41      	ldr	r2, [pc, #260]	; (8002eec <main+0x13cc>)
 8002de8:	6153      	str	r3, [r2, #20]
			err_f[4] = err_f[3];
 8002dea:	4b40      	ldr	r3, [pc, #256]	; (8002eec <main+0x13cc>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <main+0x13cc>)
 8002df0:	6113      	str	r3, [r2, #16]
			err_f[3] = err_f[2];
 8002df2:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <main+0x13cc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4a3d      	ldr	r2, [pc, #244]	; (8002eec <main+0x13cc>)
 8002df8:	60d3      	str	r3, [r2, #12]
			err_f[2] = err_f[1];
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <main+0x13cc>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <main+0x13cc>)
 8002e00:	6093      	str	r3, [r2, #8]
			err_f[1] = err_f[0];
 8002e02:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <main+0x13cc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a39      	ldr	r2, [pc, #228]	; (8002eec <main+0x13cc>)
 8002e08:	6053      	str	r3, [r2, #4]
			err_f[0] = freq_new;
 8002e0a:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <main+0x13c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a37      	ldr	r2, [pc, #220]	; (8002eec <main+0x13cc>)
 8002e10:	6013      	str	r3, [r2, #0]
			delta_F = fabsf (freq_new - (err_f[0] +err_f[1] +err_f[2] +err_f[3] +err_f[4] +err_f[5] +err_f[6] +err_f[7] +err_f[8] +err_f[9])/10);
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <main+0x13c0>)
 8002e14:	ed93 7a00 	vldr	s14, [r3]
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <main+0x13cc>)
 8002e1a:	edd3 6a00 	vldr	s13, [r3]
 8002e1e:	4b33      	ldr	r3, [pc, #204]	; (8002eec <main+0x13cc>)
 8002e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <main+0x13cc>)
 8002e2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <main+0x13cc>)
 8002e34:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <main+0x13cc>)
 8002e3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <main+0x13cc>)
 8002e48:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e50:	4b26      	ldr	r3, [pc, #152]	; (8002eec <main+0x13cc>)
 8002e52:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e56:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <main+0x13cc>)
 8002e5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <main+0x13cc>)
 8002e66:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <main+0x13cc>)
 8002e70:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e78:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002e7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e84:	eef0 7ae7 	vabs.f32	s15, s15
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <main+0x13d0>)
 8002e8a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // ========================== а вот ОНО, - новая частота  ============================
	  hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <main+0x13c0>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e98:	2300      	movs	r3, #0
 8002e9a:	ee17 5a90 	vmov	r5, s15
 8002e9e:	461e      	mov	r6, r3
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	4633      	mov	r3, r6
 8002ea4:	a10c      	add	r1, pc, #48	; (adr r1, 8002ed8 <main+0x13b8>)
 8002ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eaa:	f7fd ff15 	bl	8000cd8 <__aeabi_ldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <main+0x13d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	469a      	mov	sl, r3
 8002ec2:	4693      	mov	fp, r2
 8002ec4:	4652      	mov	r2, sl
 8002ec6:	465b      	mov	r3, fp
 8002ec8:	f7fd ff06 	bl	8000cd8 <__aeabi_ldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <main+0x13d8>)
 8002ed2:	601a      	str	r2, [r3, #0]
              	  if ((htim7.Instance->CNT >250) & (flag_data_complit_for_Tx ==0) & (cmd_set.flag_ON_TxData_cicle == true))
 8002ed4:	f7fe bfca 	b.w	8001e6c <main+0x34c>
 8002ed8:	443fd000 	.word	0x443fd000
 8002edc:	00000001 	.word	0x00000001
 8002ee0:	2000f66c 	.word	0x2000f66c
 8002ee4:	46c35000 	.word	0x46c35000
 8002ee8:	2000f670 	.word	0x2000f670
 8002eec:	2000f684 	.word	0x2000f684
 8002ef0:	2000f6ac 	.word	0x2000f6ac
 8002ef4:	20011f44 	.word	0x20011f44
 8002ef8:	2000001c 	.word	0x2000001c

08002efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b094      	sub	sp, #80	; 0x50
 8002f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f02:	f107 0318 	add.w	r3, r7, #24
 8002f06:	2238      	movs	r2, #56	; 0x38
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00c fa98 	bl	800f440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f006 f916 	bl	8009150 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f24:	2302      	movs	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f2e:	2340      	movs	r3, #64	; 0x40
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f32:	2302      	movs	r3, #2
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f36:	2302      	movs	r3, #2
 8002f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f3e:	2355      	movs	r3, #85	; 0x55
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f42:	2307      	movs	r3, #7
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f46:	2302      	movs	r3, #2
 8002f48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4e:	f107 0318 	add.w	r3, r7, #24
 8002f52:	4618      	mov	r0, r3
 8002f54:	f006 f9b0 	bl	80092b8 <HAL_RCC_OscConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f5e:	f000 fce5 	bl	800392c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f62:	230f      	movs	r3, #15
 8002f64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f66:	2303      	movs	r3, #3
 8002f68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2104      	movs	r1, #4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f006 fcb4 	bl	80098e8 <HAL_RCC_ClockConfig>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002f86:	f000 fcd1 	bl	800392c <Error_Handler>
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3750      	adds	r7, #80	; 0x50
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <eMBRegInputCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   						В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	803b      	strh	r3, [r7, #0]
	// эта фун осталась как заглушка, значения в буфер  pucRegBuffer  закладываются в конце обработки замера
    eMBErrorCode    eStatus = MB_ENOERR;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
    USHORT number_data_array = usNRegs; // number_data_array - это будет номер элемента массива замеров, это будет собираться пакет из 10 массивов, из каждого этот элемент
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	81bb      	strh	r3, [r7, #12]
    if (number_data_array > 1024) { number_data_array =1023; } // размер всех этих массивов = 1024
 8002fac:	89bb      	ldrh	r3, [r7, #12]
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d902      	bls.n	8002fba <eMBRegInputCB+0x26>
 8002fb4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002fb8:	81bb      	strh	r3, [r7, #12]

	// DWT_CYCCNT =0;// обнуляем значение
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код
    		if (cmd_set.step ==0) {cmd_set.step =1;}
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <eMBRegInputCB+0xa0>)
 8002fbc:	899b      	ldrh	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <eMBRegInputCB+0x34>
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <eMBRegInputCB+0xa0>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	819a      	strh	r2, [r3, #12]
			 index_temp = (freq_tim1 - cmd_set.freq_start) / cmd_set.step;
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <eMBRegInputCB+0xa4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <eMBRegInputCB+0xa0>)
 8002fce:	8912      	ldrh	r2, [r2, #8]
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <eMBRegInputCB+0xa0>)
 8002fd4:	8992      	ldrh	r2, [r2, #12]
 8002fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <eMBRegInputCB+0xa8>)
 8002fde:	801a      	strh	r2, [r3, #0]
			 if (index_temp > 1000) { index_temp =1000; }
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <eMBRegInputCB+0xa8>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe8:	d903      	bls.n	8002ff2 <eMBRegInputCB+0x5e>
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <eMBRegInputCB+0xa8>)
 8002fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ff0:	801a      	strh	r2, [r3, #0]
			 if (index_temp < 1) { index_temp =0; }
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <eMBRegInputCB+0xa8>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <eMBRegInputCB+0x6c>
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <eMBRegInputCB+0xa8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	801a      	strh	r2, [r3, #0]

			 number_data_array=index_temp;
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <eMBRegInputCB+0xa8>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	81bb      	strh	r3, [r7, #12]


			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float = (float32_t) (freq_tim1 +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <eMBRegInputCB+0xa4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	332a      	adds	r3, #42	; 0x2a
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <eMBRegInputCB+0xac>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 800301a:	4909      	ldr	r1, [pc, #36]	; (8003040 <eMBRegInputCB+0xac>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	780a      	ldrb	r2, [r1, #0]
 8003024:	701a      	strb	r2, [r3, #0]

    return eStatus;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20011ec8 	.word	0x20011ec8
 8003038:	2000f654 	.word	0x2000f654
 800303c:	20011ec2 	.word	0x20011ec2
 8003040:	20011f34 	.word	0x20011f34

08003044 <eMBRegHoldingCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress,  USHORT usNRegs, eMBRegisterMode eMode )
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800305e:	2300      	movs	r3, #0
 8003060:	74fb      	strb	r3, [r7, #19]
    int             iRegIndex;

    // проверка пределов, и вгон в разрешенный диапазон,
    // будет отвечать ошибочными данными, но сам дебил кто дает ошибочный запрос
    if (usNRegs ==0) 	{ usNRegs =1; }
 8003062:	893b      	ldrh	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <eMBRegHoldingCB+0x28>
 8003068:	2301      	movs	r3, #1
 800306a:	813b      	strh	r3, [r7, #8]
    if (usNRegs > REG_HOLDING_NREGS)	{ usNRegs =REG_HOLDING_NREGS; }
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d901      	bls.n	8003076 <eMBRegHoldingCB+0x32>
 8003072:	2310      	movs	r3, #16
 8003074:	813b      	strh	r3, [r7, #8]
    if (usAddress < REG_HOLDING_START)	{ usAddress = usAddress; }
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	2b00      	cmp	r3, #0
    if ((usAddress + usNRegs) > (REG_HOLDING_START + REG_HOLDING_NREGS)) { usAddress = REG_HOLDING_START - REG_HOLDING_NREGS; }
 800307a:	897a      	ldrh	r2, [r7, #10]
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	2b11      	cmp	r3, #17
 8003082:	dd02      	ble.n	800308a <eMBRegHoldingCB+0x46>
 8003084:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8003088:	817b      	strh	r3, [r7, #10]

        iRegIndex = ( int )( usAddress - num_reg_CMD_Start );
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	4a53      	ldr	r2, [pc, #332]	; (80031dc <eMBRegHoldingCB+0x198>)
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	617b      	str	r3, [r7, #20]

            /* Pass current register values to the protocol stack.
             * Передайте текущие значения регистра в стек протоколов.*/
        if (eMode == MB_REG_READ)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11d      	bne.n	80030d6 <eMBRegHoldingCB+0x92>
        {
             while( usNRegs > 0 )
 800309a:	e019      	b.n	80030d0 <eMBRegHoldingCB+0x8c>
            {
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] >> 8 );
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	b299      	uxth	r1, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	60fa      	str	r2, [r7, #12]
 80030ae:	b2ca      	uxtb	r2, r1
 80030b0:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] & 0xFF );
 80030b2:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	60fa      	str	r2, [r7, #12]
 80030c0:	b2ca      	uxtb	r2, r1
 80030c2:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3301      	adds	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
                usNRegs--;
 80030ca:	893b      	ldrh	r3, [r7, #8]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	813b      	strh	r3, [r7, #8]
             while( usNRegs > 0 )
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e2      	bne.n	800309c <eMBRegHoldingCB+0x58>
            }
        } // if (eMode == MB_REG_READ)

            /* Update current register values with new values from the  protocol stack.
             * Обновите текущие значения регистра новыми значениями из стека протоколов. */
        if (eMode == MB_REG_WRITE)
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d178      	bne.n	80031ce <eMBRegHoldingCB+0x18a>
        {
            while( usNRegs > 0 )
 80030dc:	e01f      	b.n	800311e <eMBRegHoldingCB+0xda>
            {
                Reg_CMD_Buf[iRegIndex] = *pucRegBuffer++ << 8;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	60fa      	str	r2, [r7, #12]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b299      	uxth	r1, r3
 80030ec:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Reg_CMD_Buf[iRegIndex] |= *pucRegBuffer++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	60fa      	str	r2, [r7, #12]
 80030fa:	7819      	ldrb	r1, [r3, #0]
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003104:	b28b      	uxth	r3, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	b299      	uxth	r1, r3
 800310a:	4a35      	ldr	r2, [pc, #212]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
                usNRegs--;
 8003118:	893b      	ldrh	r3, [r7, #8]
 800311a:	3b01      	subs	r3, #1
 800311c:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 800311e:	893b      	ldrh	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1dc      	bne.n	80030de <eMBRegHoldingCB+0x9a>
            }
            cmd_set.cmd_flags	= Reg_CMD_Buf[0];	//	Reg_CMD_Buf[0] - регистр флагов-команд, приходящих для исполнения
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 800312a:	801a      	strh	r2, [r3, #0]
            cmd_set.flag_ON_generation = 	Reg_CMD_Buf[0] & 0b0000000000000001;	// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 8003140:	709a      	strb	r2, [r3, #2]
            cmd_set.flag_ON_scan_freq = 	Reg_CMD_Buf[0] & 0b0000000000000010;	// Reg_CMD_Buf[0].1 - флаг-команда Вкл. Скольжение по диапазону, в соответствии с задаными регистрами
 8003142:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 8003156:	70da      	strb	r2, [r3, #3]
            cmd_set.flag_ON_TxData_cicle = 	Reg_CMD_Buf[0] & 0b0000000000000100;	// Reg_CMD_Buf[0].2 - флаг-команда Вкл. долбежку передачи данных по кругу, прием при этом прекратиться, стоповать можно будет только синей кнопкой
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 800316c:	711a      	strb	r2, [r3, #4]
            cmd_set.flag_ON_autoTuning_freq=Reg_CMD_Buf[0] & 0b0000000000001000;	// Reg_CMD_Buf[0].3 - флаг-команда при включеной генерации автоподстройка частоты будет работать, если включен флаг скольжения, этот флаг игнорится
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 8003182:	715a      	strb	r2, [r3, #5]
            cmd_set.flag_ON_scan_time = 	Reg_CMD_Buf[0] & 0b0000000000010000;	// Reg_CMD_Buf[0].4 - флаг-команда на вкл генерации на одной частоте, и циклическую передачу сигналов КЛЮЧ�?, ТОК и НАПРЯЖЕН�?Е в реале, как есть из замера
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 8003198:	719a      	strb	r2, [r3, #6]

            cmd_set.proc_pwr	= Reg_CMD_Buf[1];	//	Reg_CMD_Buf[1] - регистр мощности,  2-98% заполнения
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 800319c:	885a      	ldrh	r2, [r3, #2]
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 80031a0:	815a      	strh	r2, [r3, #10]
   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
            cmd_set.freq_start	= Reg_CMD_Buf[2] -42;	// Reg_CMD_Buf[2] - регистр стартовой частоты, 14500-43000
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80031a4:	889b      	ldrh	r3, [r3, #4]
 80031a6:	3b2a      	subs	r3, #42	; 0x2a
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 80031ac:	811a      	strh	r2, [r3, #8]
            cmd_set.step 		= Reg_CMD_Buf[3];	//	Reg_CMD_Buf[3] - регистр step(1-25гц) перемещения частоты, при сканировании диапазона, при сканировании старт будет Reg_CMD_Buf[2], максимум = (Reg_CMD_Buf[2] + step*_N-количество_)
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80031b0:	88da      	ldrh	r2, [r3, #6]
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 80031b4:	819a      	strh	r2, [r3, #12]
            cmd_set.time_step	= Reg_CMD_Buf[4];	//	Reg_CMD_Buf[4] - регистр время милисекунд, между степами (10-1000мс)
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80031b8:	891a      	ldrh	r2, [r3, #8]
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 80031bc:	81da      	strh	r2, [r3, #14]
            cmd_set.N_step		= Reg_CMD_Buf[5];	//	Reg_CMD_Buf[5] - регистр N-количество степов при сканировании 4-1000
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80031c0:	895a      	ldrh	r2, [r3, #10]
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <eMBRegHoldingCB+0x1a0>)
 80031c4:	821a      	strh	r2, [r3, #16]
            Reg_CMD_Buf[6] = Reg_CMD_Buf[5];
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80031c8:	895a      	ldrh	r2, [r3, #10]
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <eMBRegHoldingCB+0x19c>)
 80031cc:	819a      	strh	r2, [r3, #12]
        } // if (eMode == MB_REG_WRITE)
    return eStatus;
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	20000000 	.word	0x20000000
 80031e0:	200005ec 	.word	0x200005ec
 80031e4:	20011ec8 	.word	0x20011ec8

080031e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
	// для контроля окончания передачи пакета на МВ485, используем прерывание от ножки PA11--PA12--DE--MB485
	// никаких разборок с EXTI нету,  там всего одно прерывание включено,
	xMBRTUTransmitFSM();
 80031f2:	f00b f867 	bl	800e2c4 <xMBRTUTransmitFSM>
	flag_exti_stop_TX_cicles++;
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_GPIO_EXTI_Callback+0x24>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_GPIO_EXTI_Callback+0x24>)
 8003200:	701a      	strb	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000619 	.word	0x20000619

08003210 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10d      	bne.n	800323e <HAL_TIM_PeriodElapsedCallback+0x2e>
    	{
    		counter_Tim6_MB++;
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800322c:	801a      	strh	r2, [r3, #0]
    		if(counter_Tim6_MB >=timeout_Tim6_50us)
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d301      	bcc.n	800323e <HAL_TIM_PeriodElapsedCallback+0x2e>
			  { xMBRTUTimerT35Expired();   }
 800323a:	f00b f869 	bl	800e310 <xMBRTUTimerT35Expired>
    	}
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40001000 	.word	0x40001000
 800324c:	2000060e 	.word	0x2000060e
 8003250:	2000060c 	.word	0x2000060c

08003254 <_write>:


int _write(int file, char *ptr, int len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e009      	b.n	800327a <_write+0x26>
		{ ITM_SendChar(*ptr++); }
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	60ba      	str	r2, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fbf4 	bl	8001a5c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3301      	adds	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	dbf1      	blt.n	8003266 <_write+0x12>
	return len;
 8003282:	687b      	ldr	r3, [r7, #4]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <Mem_to_Mem_Complete>:


static void Mem_to_Mem_Complete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	 // а сколько это мкс? в реале == 41 мкс 1024 WORD передача Mem_to_Mem;
	LL_ADC_REG_StartConversion(hadc1.Instance);  //  - это есть старт АЦП произвольно по желанию, если был остановлен
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <Mem_to_Mem_Complete+0x20>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fc06 	bl	8001aaa <LL_ADC_REG_StartConversion>
	flag_end_FFT =0;
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <Mem_to_Mem_Complete+0x24>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	801a      	strh	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200002cc 	.word	0x200002cc
 80032b0:	2000061a 	.word	0x2000061a

080032b4 <HAL_ADC_ConvCpltCallback>:
//			 какой то код
// count_tic_finish = DWT_CYCCNT - count_tic_start;//смотрим сколько натикало  - ццикл отсоса массивов данных длится 16мкс
// count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	// LL_ADC_REG_StopConversion (hadc1.Instance);
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 80032bc:	4905      	ldr	r1, [pc, #20]	; (80032d4 <HAL_ADC_ConvCpltCallback+0x20>)
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <HAL_ADC_ConvCpltCallback+0x24>)
 80032c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c4:	4805      	ldr	r0, [pc, #20]	; (80032dc <HAL_ADC_ConvCpltCallback+0x28>)
 80032c6:	f003 fced 	bl	8006ca4 <HAL_DMA_Start_IT>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000062c 	.word	0x2000062c
 80032d8:	2000162c 	.word	0x2000162c
 80032dc:	2000048c 	.word	0x2000048c

080032e0 <HAL_UART_TxCpltCallback>:
//	// status_USBcdc_TX = CDC_Transmit_FS((uint8_t *) HEAP_arr_ADC_zamer, 64);
	return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	// включаем прием LPUART, ждём настроечных данных+
//	status_RX_LPuart = HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *) cmd_array_SPI, len_cmd_array_SPI);
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
	return;
 80032e8:	bf00      	nop
}
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <fun_data_time_podgotovka>:

uint16_t fun_data_time_podgotovka( uint8_t * buffer_data_time, uint16_t index_data_time_zamer )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код

			 // index_data_real_zamer ++; // в ноль будет сбрасываться при окончании пересчета массивов данных, �? после передачи всего пакета
			 if (index_data_time_zamer > 1022)
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8003306:	4293      	cmp	r3, r2
 8003308:	d902      	bls.n	8003310 <fun_data_time_podgotovka+0x1c>
			 	 {index_data_time_zamer =1022; }
 800330a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800330e:	807b      	strh	r3, [r7, #2]

			 temp_float = (float) index_data_time_zamer;  // index-NUMBER index-NUMBER index-NUMBER index-NUMBER index-NUMBER   если будем долбить по кругу реальные замеры по времени
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	4ba1      	ldr	r3, [pc, #644]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800331c:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003320:	499f      	ldr	r1, [pc, #636]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	780a      	ldrb	r2, [r1, #0]
 800332a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	4a9b      	ldr	r2, [pc, #620]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003334:	7852      	ldrb	r2, [r2, #1]
 8003336:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	4a98      	ldr	r2, [pc, #608]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003340:	7892      	ldrb	r2, [r2, #2]
 8003342:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	4a95      	ldr	r2, [pc, #596]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800334c:	78d2      	ldrb	r2, [r2, #3]
 800334e:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  X0
			 temp_float = (float) adc1_Tx[index_data_time_zamer]; //
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	4a94      	ldr	r2, [pc, #592]	; (80035a4 <fun_data_time_podgotovka+0x2b0>)
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	4b8f      	ldr	r3, [pc, #572]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003362:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003366:	498e      	ldr	r1, [pc, #568]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	780a      	ldrb	r2, [r1, #0]
 8003370:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	4a89      	ldr	r2, [pc, #548]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800337a:	7852      	ldrb	r2, [r2, #1]
 800337c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	4a86      	ldr	r2, [pc, #536]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003386:	7892      	ldrb	r2, [r2, #2]
 8003388:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	4a83      	ldr	r2, [pc, #524]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003392:	78d2      	ldrb	r2, [r2, #3]
 8003394:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  X0+1
			 temp_float = (float) adc1_Tx[index_data_time_zamer +1];
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	3301      	adds	r3, #1
 800339a:	4a82      	ldr	r2, [pc, #520]	; (80035a4 <fun_data_time_podgotovka+0x2b0>)
 800339c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a8:	4b7d      	ldr	r3, [pc, #500]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033aa:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033ae:	497c      	ldr	r1, [pc, #496]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	780a      	ldrb	r2, [r1, #0]
 80033b8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033c2:	7852      	ldrb	r2, [r2, #1]
 80033c4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	4a74      	ldr	r2, [pc, #464]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033ce:	7892      	ldrb	r2, [r2, #2]
 80033d0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	4a71      	ldr	r2, [pc, #452]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033da:	78d2      	ldrb	r2, [r2, #3]
 80033dc:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   X0
			 temp_float = data_adc1_Tx[index_data_time_zamer];
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	4a71      	ldr	r2, [pc, #452]	; (80035a8 <fun_data_time_podgotovka+0x2b4>)
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a6d      	ldr	r2, [pc, #436]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033ea:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033ec:	496c      	ldr	r1, [pc, #432]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	780a      	ldrb	r2, [r1, #0]
 80033f6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	4a68      	ldr	r2, [pc, #416]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003400:	7852      	ldrb	r2, [r2, #1]
 8003402:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800340c:	7892      	ldrb	r2, [r2, #2]
 800340e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	4a62      	ldr	r2, [pc, #392]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003418:	78d2      	ldrb	r2, [r2, #3]
 800341a:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   X0+1
			 temp_float = data_adc1_Tx[index_data_time_zamer +1];
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	3301      	adds	r3, #1
 8003420:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <fun_data_time_podgotovka+0x2b4>)
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800342a:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800342c:	495c      	ldr	r1, [pc, #368]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	780a      	ldrb	r2, [r1, #0]
 8003436:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003440:	7852      	ldrb	r2, [r2, #1]
 8003442:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	4a55      	ldr	r2, [pc, #340]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800344c:	7892      	ldrb	r2, [r2, #2]
 800344e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003458:	78d2      	ldrb	r2, [r2, #3]
 800345a:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    X0
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	4a53      	ldr	r2, [pc, #332]	; (80035ac <fun_data_time_podgotovka+0x2b8>)
 8003460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346c:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800346e:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003472:	494b      	ldr	r1, [pc, #300]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	780a      	ldrb	r2, [r1, #0]
 800347c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	4a46      	ldr	r2, [pc, #280]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003486:	7852      	ldrb	r2, [r2, #1]
 8003488:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	4a43      	ldr	r2, [pc, #268]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003492:	7892      	ldrb	r2, [r2, #2]
 8003494:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	4a40      	ldr	r2, [pc, #256]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800349e:	78d2      	ldrb	r2, [r2, #3]
 80034a0:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    X0+1
			 temp_float = (float) (adc2_Tx[index_data_time_zamer +1]);
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	3301      	adds	r3, #1
 80034a6:	4a41      	ldr	r2, [pc, #260]	; (80035ac <fun_data_time_podgotovka+0x2b8>)
 80034a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b4:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034b6:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034ba:	4939      	ldr	r1, [pc, #228]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	780a      	ldrb	r2, [r1, #0]
 80034c4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	4a34      	ldr	r2, [pc, #208]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034ce:	7852      	ldrb	r2, [r2, #1]
 80034d0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034da:	7892      	ldrb	r2, [r2, #2]
 80034dc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 3);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034e6:	78d2      	ldrb	r2, [r2, #3]
 80034e8:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    X0
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <fun_data_time_podgotovka+0x2bc>)
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034f6:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034f8:	4929      	ldr	r1, [pc, #164]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	780a      	ldrb	r2, [r1, #0]
 8003502:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800350c:	7852      	ldrb	r2, [r2, #1]
 800350e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003518:	7892      	ldrb	r2, [r2, #2]
 800351a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003524:	78d2      	ldrb	r2, [r2, #3]
 8003526:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    X0+1
			 temp_float = data_adc2_Tx[index_data_time_zamer +1];
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	3301      	adds	r3, #1
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <fun_data_time_podgotovka+0x2bc>)
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003536:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003538:	4919      	ldr	r1, [pc, #100]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	780a      	ldrb	r2, [r1, #0]
 8003542:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800354c:	7852      	ldrb	r2, [r2, #1]
 800354e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003558:	7892      	ldrb	r2, [r2, #2]
 800355a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 8003564:	78d2      	ldrb	r2, [r2, #3]
 8003566:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <fun_data_time_podgotovka+0x2b8>)
 800356c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <fun_data_time_podgotovka+0x2ac>)
 800357a:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	69;//*(((uint8_t *) &temp_float) + 0); //
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	2245      	movs	r2, #69	; 0x45
 8003586:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	70;//*(((uint8_t *) &temp_float) + 1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	2246      	movs	r2, #70	; 0x46
 8003590:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  71;//*(((uint8_t *) &temp_float) + 2); //
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	2247      	movs	r2, #71	; 0x47
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e00a      	b.n	80035b4 <fun_data_time_podgotovka+0x2c0>
 800359e:	bf00      	nop
 80035a0:	20011f34 	.word	0x20011f34
 80035a4:	20006630 	.word	0x20006630
 80035a8:	20007630 	.word	0x20007630
 80035ac:	20006e30 	.word	0x20006e30
 80035b0:	20008630 	.word	0x20008630
			 *buffer_data_time++ =	72;//*(((uint8_t *) &temp_float) + 3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	2248      	movs	r2, #72	; 0x48
 80035bc:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <fun_data_time_podgotovka+0x340>)
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <fun_data_time_podgotovka+0x344>)
 80035ca:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ =  73;//*(((uint8_t *) &temp_float) + 0); //
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	2249      	movs	r2, #73	; 0x49
 80035d4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	74;//*(((uint8_t *) &temp_float) + 1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	224a      	movs	r2, #74	; 0x4a
 80035de:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  75;//*(((uint8_t *) &temp_float) + 2); //
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	224b      	movs	r2, #75	; 0x4b
 80035e8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	76;//*(((uint8_t *) &temp_float) + 3);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	224c      	movs	r2, #76	; 0x4c
 80035f2:	701a      	strb	r2, [r3, #0]

			 temp_float = calc_power_Output_8_f32; // (float32_t) data_Y[number_data_array];
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <fun_data_time_podgotovka+0x348>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <fun_data_time_podgotovka+0x344>)
 80035fa:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	77;//*(((uint8_t *) &temp_float) + 0); //
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	224d      	movs	r2, #77	; 0x4d
 8003604:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	78;//*(((uint8_t *) &temp_float) + 1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	224e      	movs	r2, #78	; 0x4e
 800360e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  79;//*(((uint8_t *) &temp_float) + 2); //
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	224f      	movs	r2, #79	; 0x4f
 8003618:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	80;//*(((uint8_t *) &temp_float) + 3);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	2250      	movs	r2, #80	; 0x50
 8003622:	701a      	strb	r2, [r3, #0]

			//	count_tic_finish = DWT_CYCCNT;//смотрим сколько натикало -цикл формирования массивов данных длится 4.894мкс (832 тика)
			//	count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

    return index_data_time_zamer;
 8003624:	887b      	ldrh	r3, [r7, #2]
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20008630 	.word	0x20008630
 8003638:	20011f34 	.word	0x20011f34
 800363c:	2000f638 	.word	0x2000f638

08003640 <fun_data_scan_freq_podgotovka>:

void fun_data_scan_freq_podgotovka( uint8_t * buffer_data_scan_freq,  float32_t freq_float )
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	ed87 0a00 	vstr	s0, [r7]
	//			 какой то код

			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float =  (freq_float +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 800364c:	edd7 7a00 	vldr	s15, [r7]
 8003650:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80038b0 <fun_data_scan_freq_podgotovka+0x270>
 8003654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003658:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800365a:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800365e:	4995      	ldr	r1, [pc, #596]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	780a      	ldrb	r2, [r1, #0]
 8003668:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	4a90      	ldr	r2, [pc, #576]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003672:	7852      	ldrb	r2, [r2, #1]
 8003674:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	4a8d      	ldr	r2, [pc, #564]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800367e:	7892      	ldrb	r2, [r2, #2]
 8003680:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	4a8a      	ldr	r2, [pc, #552]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800368a:	78d2      	ldrb	r2, [r2, #3]
 800368c:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз
			 temp_float = (float32_t) arr1_Output_f32[8]; //
 800368e:	4b8a      	ldr	r3, [pc, #552]	; (80038b8 <fun_data_scan_freq_podgotovka+0x278>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a88      	ldr	r2, [pc, #544]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003694:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003696:	4987      	ldr	r1, [pc, #540]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	780a      	ldrb	r2, [r1, #0]
 80036a0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	4a82      	ldr	r2, [pc, #520]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036aa:	7852      	ldrb	r2, [r2, #1]
 80036ac:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	4a7f      	ldr	r2, [pc, #508]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036b6:	7892      	ldrb	r2, [r2, #2]
 80036b8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	4a7c      	ldr	r2, [pc, #496]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036c2:	78d2      	ldrb	r2, [r2, #3]
 80036c4:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз
			 temp_float = (float32_t) arr2_Output_f32[8]; //
 80036c6:	4b7d      	ldr	r3, [pc, #500]	; (80038bc <fun_data_scan_freq_podgotovka+0x27c>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a7a      	ldr	r2, [pc, #488]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036cc:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036ce:	4979      	ldr	r1, [pc, #484]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	780a      	ldrb	r2, [r1, #0]
 80036d8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	4a74      	ldr	r2, [pc, #464]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036e2:	7852      	ldrb	r2, [r2, #1]
 80036e4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	4a71      	ldr	r2, [pc, #452]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036ee:	7892      	ldrb	r2, [r2, #2]
 80036f0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	4a6e      	ldr	r2, [pc, #440]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80036fa:	78d2      	ldrb	r2, [r2, #3]
 80036fc:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз
			 temp_float = arr1_phase_Output_8_f32; //
 80036fe:	4b70      	ldr	r3, [pc, #448]	; (80038c0 <fun_data_scan_freq_podgotovka+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6c      	ldr	r2, [pc, #432]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003704:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003706:	496b      	ldr	r1, [pc, #428]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	780a      	ldrb	r2, [r1, #0]
 8003710:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	4a66      	ldr	r2, [pc, #408]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800371a:	7852      	ldrb	r2, [r2, #1]
 800371c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003726:	7892      	ldrb	r2, [r2, #2]
 8003728:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	4a60      	ldr	r2, [pc, #384]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003732:	78d2      	ldrb	r2, [r2, #3]
 8003734:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз
			 temp_float = arr2_phase_Output_8_f32; //
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <fun_data_scan_freq_podgotovka+0x284>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800373c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800373e:	495d      	ldr	r1, [pc, #372]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	780a      	ldrb	r2, [r1, #0]
 8003748:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003752:	7852      	ldrb	r2, [r2, #1]
 8003754:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	4a55      	ldr	r2, [pc, #340]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800375e:	7892      	ldrb	r2, [r2, #2]
 8003760:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800376a:	78d2      	ldrb	r2, [r2, #3]
 800376c:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float =  shift_phase_I8_U8_f32; // (float32_t)
 800376e:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <fun_data_scan_freq_podgotovka+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a50      	ldr	r2, [pc, #320]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003774:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003776:	494f      	ldr	r1, [pc, #316]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	780a      	ldrb	r2, [r1, #0]
 8003780:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800378a:	7852      	ldrb	r2, [r2, #1]
 800378c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	4a47      	ldr	r2, [pc, #284]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003796:	7892      	ldrb	r2, [r2, #2]
 8003798:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	4a44      	ldr	r2, [pc, #272]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037a2:	78d2      	ldrb	r2, [r2, #3]
 80037a4:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз
			 temp_float =   calc_power_Output_8_f32; //
 80037a6:	4b49      	ldr	r3, [pc, #292]	; (80038cc <fun_data_scan_freq_podgotovka+0x28c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a42      	ldr	r2, [pc, #264]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037ac:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80037ae:	4941      	ldr	r1, [pc, #260]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	780a      	ldrb	r2, [r1, #0]
 80037b8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037c2:	7852      	ldrb	r2, [r2, #1]
 80037c4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	4a39      	ldr	r2, [pc, #228]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037ce:	7892      	ldrb	r2, [r2, #2]
 80037d0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 3);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	4a36      	ldr	r2, [pc, #216]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037da:	78d2      	ldrb	r2, [r2, #3]
 80037dc:	701a      	strb	r2, [r3, #0]

			 // 7 график, сверху вниз
			 temp_float = calc_R_Output_8_f32;
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <fun_data_scan_freq_podgotovka+0x290>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037e4:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80037e6:	4933      	ldr	r1, [pc, #204]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	780a      	ldrb	r2, [r1, #0]
 80037f0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	4a2e      	ldr	r2, [pc, #184]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80037fa:	7852      	ldrb	r2, [r2, #1]
 80037fc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003806:	7892      	ldrb	r2, [r2, #2]
 8003808:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003812:	78d2      	ldrb	r2, [r2, #3]
 8003814:	701a      	strb	r2, [r3, #0]

			 // 8 график, сверху вниз
			 temp_float = 8;
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003818:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800381c:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	65;//*(((uint8_t *) &temp_float) + 0); //
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	2241      	movs	r2, #65	; 0x41
 8003826:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	66;//*(((uint8_t *) &temp_float) + 1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	2242      	movs	r2, #66	; 0x42
 8003830:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  67;//*(((uint8_t *) &temp_float) + 2); //
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	2243      	movs	r2, #67	; 0x43
 800383a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	68;//*(((uint8_t *) &temp_float) + 3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	2244      	movs	r2, #68	; 0x44
 8003844:	701a      	strb	r2, [r3, #0]

			 // 9 график, сверху вниз
			 temp_float = 9;
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <fun_data_scan_freq_podgotovka+0x294>)
 800384a:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800384c:	4919      	ldr	r1, [pc, #100]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	780a      	ldrb	r2, [r1, #0]
 8003856:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003860:	7852      	ldrb	r2, [r2, #1]
 8003862:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800386c:	7892      	ldrb	r2, [r2, #2]
 800386e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003878:	78d2      	ldrb	r2, [r2, #3]
 800387a:	701a      	strb	r2, [r3, #0]

			 // 10 график, сверху вниз
			 temp_float = 10;
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <fun_data_scan_freq_podgotovka+0x298>)
 8003880:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 0); //
 8003882:	490c      	ldr	r1, [pc, #48]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	780a      	ldrb	r2, [r1, #0]
 800388c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 8003896:	7852      	ldrb	r2, [r2, #1]
 8003898:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <fun_data_scan_freq_podgotovka+0x274>)
 80038a2:	7892      	ldrb	r2, [r2, #2]
 80038a4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	e016      	b.n	80038dc <fun_data_scan_freq_podgotovka+0x29c>
 80038ae:	bf00      	nop
 80038b0:	42280000 	.word	0x42280000
 80038b4:	20011f34 	.word	0x20011f34
 80038b8:	2000b630 	.word	0x2000b630
 80038bc:	2000d630 	.word	0x2000d630
 80038c0:	2000f630 	.word	0x2000f630
 80038c4:	2000f634 	.word	0x2000f634
 80038c8:	2000f63c 	.word	0x2000f63c
 80038cc:	2000f638 	.word	0x2000f638
 80038d0:	2000f648 	.word	0x2000f648
 80038d4:	41100000 	.word	0x41100000
 80038d8:	41200000 	.word	0x41200000
 80038dc:	4a11      	ldr	r2, [pc, #68]	; (8003924 <fun_data_scan_freq_podgotovka+0x2e4>)
 80038de:	78d2      	ldrb	r2, [r2, #3]
 80038e0:	701a      	strb	r2, [r3, #0]

			 // 11 график, сверху вниз
			 temp_float = 11;
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <fun_data_scan_freq_podgotovka+0x2e4>)
 80038e4:	4a10      	ldr	r2, [pc, #64]	; (8003928 <fun_data_scan_freq_podgotovka+0x2e8>)
 80038e6:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <fun_data_scan_freq_podgotovka+0x2e4>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	780a      	ldrb	r2, [r1, #0]
 80038f2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <fun_data_scan_freq_podgotovka+0x2e4>)
 80038fc:	7852      	ldrb	r2, [r2, #1]
 80038fe:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <fun_data_scan_freq_podgotovka+0x2e4>)
 8003908:	7892      	ldrb	r2, [r2, #2]
 800390a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <fun_data_scan_freq_podgotovka+0x2e4>)
 8003914:	78d2      	ldrb	r2, [r2, #3]
 8003916:	701a      	strb	r2, [r3, #0]

	//return HAL_OK;
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	20011f34 	.word	0x20011f34
 8003928:	41300000 	.word	0x41300000

0800392c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003932:	b672      	cpsid	i
}
 8003934:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
	uint16_t count_printf;
  __disable_irq();
  while (1)
  {
	  count_printf++;
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	3301      	adds	r3, #1
 800393a:	80fb      	strh	r3, [r7, #6]
	  if (count_printf >1000)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003942:	d9f8      	bls.n	8003936 <Error_Handler+0xa>
	  	  {
		  	printf("MAIN Error_Handler() Error_Handler_Debug\n");
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <Error_Handler+0x24>)
 8003946:	f00c fdc5 	bl	80104d4 <puts>
		  	count_printf =0;
 800394a:	2300      	movs	r3, #0
 800394c:	80fb      	strh	r3, [r7, #6]
	  count_printf++;
 800394e:	e7f2      	b.n	8003936 <Error_Handler+0xa>
 8003950:	08015274 	.word	0x08015274

08003954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_MspInit+0x44>)
 800395c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395e:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <HAL_MspInit+0x44>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6613      	str	r3, [r2, #96]	; 0x60
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_MspInit+0x44>)
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_MspInit+0x44>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_MspInit+0x44>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_MspInit+0x44>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800398a:	f005 fc85 	bl	8009298 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  count_printf++;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <NMI_Handler+0x28>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <NMI_Handler+0x28>)
 80039aa:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <NMI_Handler+0x28>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b4:	d9f4      	bls.n	80039a0 <NMI_Handler+0x4>
	  	  {
		  	printf("NMI Non maskable interrupt\n");
 80039b6:	4804      	ldr	r0, [pc, #16]	; (80039c8 <NMI_Handler+0x2c>)
 80039b8:	f00c fd8c 	bl	80104d4 <puts>
		  	count_printf =0;
 80039bc:	4b01      	ldr	r3, [pc, #4]	; (80039c4 <NMI_Handler+0x28>)
 80039be:	2200      	movs	r2, #0
 80039c0:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80039c2:	e7ed      	b.n	80039a0 <NMI_Handler+0x4>
 80039c4:	20011f3c 	.word	0x20011f3c
 80039c8:	080152a0 	.word	0x080152a0

080039cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  count_printf++;
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HardFault_Handler+0x28>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HardFault_Handler+0x28>)
 80039da:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HardFault_Handler+0x28>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e4:	d9f4      	bls.n	80039d0 <HardFault_Handler+0x4>
	  	  {
		  	printf("Hard fault interrupt\n");
 80039e6:	4804      	ldr	r0, [pc, #16]	; (80039f8 <HardFault_Handler+0x2c>)
 80039e8:	f00c fd74 	bl	80104d4 <puts>
		  	count_printf =0;
 80039ec:	4b01      	ldr	r3, [pc, #4]	; (80039f4 <HardFault_Handler+0x28>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80039f2:	e7ed      	b.n	80039d0 <HardFault_Handler+0x4>
 80039f4:	20011f3c 	.word	0x20011f3c
 80039f8:	080152bc 	.word	0x080152bc

080039fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  count_printf++;
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <MemManage_Handler+0x28>)
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <MemManage_Handler+0x28>)
 8003a0a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <MemManage_Handler+0x28>)
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a14:	d9f4      	bls.n	8003a00 <MemManage_Handler+0x4>
	  	  {
		  	printf("Memory management fault\n");
 8003a16:	4804      	ldr	r0, [pc, #16]	; (8003a28 <MemManage_Handler+0x2c>)
 8003a18:	f00c fd5c 	bl	80104d4 <puts>
		  	count_printf =0;
 8003a1c:	4b01      	ldr	r3, [pc, #4]	; (8003a24 <MemManage_Handler+0x28>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003a22:	e7ed      	b.n	8003a00 <MemManage_Handler+0x4>
 8003a24:	20011f3c 	.word	0x20011f3c
 8003a28:	080152d4 	.word	0x080152d4

08003a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  count_printf++;
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <BusFault_Handler+0x28>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <BusFault_Handler+0x28>)
 8003a3a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <BusFault_Handler+0x28>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a44:	d9f4      	bls.n	8003a30 <BusFault_Handler+0x4>
	  	  {
		  	printf("BusFault_Handler\n");
 8003a46:	4804      	ldr	r0, [pc, #16]	; (8003a58 <BusFault_Handler+0x2c>)
 8003a48:	f00c fd44 	bl	80104d4 <puts>
		  	count_printf =0;
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <BusFault_Handler+0x28>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003a52:	e7ed      	b.n	8003a30 <BusFault_Handler+0x4>
 8003a54:	20011f3c 	.word	0x20011f3c
 8003a58:	080152ec 	.word	0x080152ec

08003a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  count_printf++;
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <UsageFault_Handler+0x28>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <UsageFault_Handler+0x28>)
 8003a6a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <UsageFault_Handler+0x28>)
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a74:	d9f4      	bls.n	8003a60 <UsageFault_Handler+0x4>
	  	  {
		  	printf("UsageFault_Handler\n");
 8003a76:	4804      	ldr	r0, [pc, #16]	; (8003a88 <UsageFault_Handler+0x2c>)
 8003a78:	f00c fd2c 	bl	80104d4 <puts>
		  	count_printf =0;
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <UsageFault_Handler+0x28>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003a82:	e7ed      	b.n	8003a60 <UsageFault_Handler+0x4>
 8003a84:	20011f3c 	.word	0x20011f3c
 8003a88:	08015300 	.word	0x08015300

08003a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	printf("SVC_Handler()\n");
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <SVC_Handler+0x10>)
 8003a92:	f00c fd1f 	bl	80104d4 <puts>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08015314 	.word	0x08015314

08003aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler()\n");
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <DebugMon_Handler+0x10>)
 8003aa6:	f00c fd15 	bl	80104d4 <puts>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	08015324 	.word	0x08015324

08003ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	printf("PendSV_Handler()\n");
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <PendSV_Handler+0x10>)
 8003aba:	f00c fd0b 	bl	80104d4 <puts>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	08015338 	.word	0x08015338

08003ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003acc:	f001 f8d6 	bl	8004c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <DMA1_Channel1_IRQHandler+0x10>)
 8003ada:	f003 fa1e 	bl	8006f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200003a4 	.word	0x200003a4

08003ae8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	xMBRTUTransmitFSM();
 8003aec:	f00a fbea 	bl	800e2c4 <xMBRTUTransmitFSM>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <DMA1_Channel2_IRQHandler+0x14>)
 8003af2:	f003 fa12 	bl	8006f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20012368 	.word	0x20012368

08003b00 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
//	if ((0U != (hdma_usart1_tx.Instance->CCR & DMA_IT_TC)) & (0U == (hdma_usart1_tx.Instance->CCR & DMA_IT_HT)))
//	{
//		xMBRTUTransmitFSM();
//	}
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <DMA1_Channel3_IRQHandler+0x10>)
 8003b06:	f003 fa08 	bl	8006f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20012308 	.word	0x20012308

08003b14 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel4);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <DMA1_Channel4_IRQHandler+0x10>)
 8003b1a:	f003 f9fe 	bl	8006f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000048c 	.word	0x2000048c

08003b28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <DMA1_Channel5_IRQHandler+0x10>)
 8003b2e:	f003 f9f4 	bl	8006f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200123c8 	.word	0x200123c8

08003b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	2300      	movs	r3, #0
 8003b48:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <USART1_IRQHandler+0x58>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <USART1_IRQHandler+0x58>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <USART1_IRQHandler+0x4a>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <USART1_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003b82:	f00a fb35 	bl	800e1f0 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b86:	4803      	ldr	r0, [pc, #12]	; (8003b94 <USART1_IRQHandler+0x58>)
 8003b88:	f008 faf0 	bl	800c16c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20012158 	.word	0x20012158

08003b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <USART2_IRQHandler+0x58>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <USART2_IRQHandler+0x58>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <USART2_IRQHandler+0x4a>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <USART2_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003bde:	f00a fb07 	bl	800e1f0 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003be2:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <USART2_IRQHandler+0x58>)
 8003be4:	f008 fac2 	bl	800c16c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200121e8 	.word	0x200121e8

08003bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <USART3_IRQHandler+0x10>)
 8003bfa:	f008 fab7 	bl	800c16c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20012278 	.word	0x20012278

08003c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c10:	f003 fce6 	bl	80075e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <TIM6_DAC_IRQHandler+0x10>)
 8003c1e:	f006 fdaf 	bl	800a780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20012028 	.word	0x20012028

08003c2c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <DMA2_Channel1_IRQHandler+0x10>)
 8003c32:	f003 f972 	bl	8006f1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000404 	.word	0x20000404

08003c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	return 1;
 8003c44:	2301      	movs	r3, #1
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <_kill>:

int _kill(int pid, int sig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c5a:	f00b fba7 	bl	800f3ac <__errno>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2216      	movs	r2, #22
 8003c62:	601a      	str	r2, [r3, #0]
	return -1;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_exit>:

void _exit (int status)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ffe7 	bl	8003c50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c82:	e7fe      	b.n	8003c82 <_exit+0x12>

08003c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e00a      	b.n	8003cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c96:	f3af 8000 	nop.w
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	60ba      	str	r2, [r7, #8]
 8003ca2:	b2ca      	uxtb	r2, r1
 8003ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	dbf0      	blt.n	8003c96 <_read+0x12>
	}

return len;
 8003cb4:	687b      	ldr	r3, [r7, #4]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <_isatty>:

int _isatty(int file)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8003cfe:	2301      	movs	r3, #1
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
	return 0;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <_sbrk+0x5c>)
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <_sbrk+0x60>)
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <_sbrk+0x64>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <_sbrk+0x64>)
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <_sbrk+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <_sbrk+0x64>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d207      	bcs.n	8003d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d58:	f00b fb28 	bl	800f3ac <__errno>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	220c      	movs	r2, #12
 8003d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	e009      	b.n	8003d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <_sbrk+0x64>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <_sbrk+0x64>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <_sbrk+0x64>)
 8003d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20020000 	.word	0x20020000
 8003d88:	00004000 	.word	0x00004000
 8003d8c:	20011f40 	.word	0x20011f40
 8003d90:	20013480 	.word	0x20013480

08003d94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <SystemInit+0x20>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <SystemInit+0x20>)
 8003da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b0a0      	sub	sp, #128	; 0x80
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003dbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003dda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	615a      	str	r2, [r3, #20]
 8003df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	2234      	movs	r2, #52	; 0x34
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f00b fb1d 	bl	800f440 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e06:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e08:	4a67      	ldr	r2, [pc, #412]	; (8003fa8 <MX_TIM1_Init+0x1f0>)
 8003e0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e0c:	4b65      	ldr	r3, [pc, #404]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	4b64      	ldr	r3, [pc, #400]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 127;
 8003e18:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e1a:	227f      	movs	r2, #127	; 0x7f
 8003e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e24:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2a:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e30:	485c      	ldr	r0, [pc, #368]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e32:	f006 f9c3 	bl	800a1bc <HAL_TIM_Base_Init>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003e3c:	f7ff fd76 	bl	800392c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e40:	4858      	ldr	r0, [pc, #352]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e42:	f006 fb2a 	bl	800a49a <HAL_TIM_PWM_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e4c:	f7ff fd6e 	bl	800392c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003e50:	2307      	movs	r3, #7
 8003e52:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8003e54:	4b55      	ldr	r3, [pc, #340]	; (8003fac <MX_TIM1_Init+0x1f4>)
 8003e56:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003e58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4851      	ldr	r0, [pc, #324]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e60:	f006 ff49 	bl	800acf6 <HAL_TIM_SlaveConfigSynchro>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8003e6a:	f7ff fd5f 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4848      	ldr	r0, [pc, #288]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003e82:	f007 fdbb 	bl	800b9fc <HAL_TIMEx_MasterConfigSynchronization>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003e8c:	f7ff fd4e 	bl	800392c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003e90:	2301      	movs	r3, #1
 8003e92:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003e9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	483f      	ldr	r0, [pc, #252]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003ea6:	f007 fef1 	bl	800bc8c <HAL_TIMEx_ConfigBreakInput>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003eb0:	f7ff fd3c 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003eb4:	2370      	movs	r3, #112	; 0x70
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8003eb8:	2340      	movs	r3, #64	; 0x40
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ed2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4832      	ldr	r0, [pc, #200]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003edc:	f006 fdd0 	bl	800aa80 <HAL_TIM_PWM_ConfigChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8003ee6:	f7ff fd21 	bl	800392c <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8003eea:	2302      	movs	r3, #2
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003eee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	482b      	ldr	r0, [pc, #172]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003ef8:	f006 fdc2 	bl	800aa80 <HAL_TIM_PWM_ConfigChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8003f02:	f7ff fd13 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM1;
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <MX_TIM1_Init+0x1f8>)
 8003f08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8003f0a:	2340      	movs	r3, #64	; 0x40
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f12:	2208      	movs	r2, #8
 8003f14:	4619      	mov	r1, r3
 8003f16:	4823      	ldr	r0, [pc, #140]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003f18:	f006 fdb2 	bl	800aa80 <HAL_TIM_PWM_ConfigChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8003f22:	f7ff fd03 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM2;
 8003f26:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <MX_TIM1_Init+0x1fc>)
 8003f28:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f2e:	220c      	movs	r2, #12
 8003f30:	4619      	mov	r1, r3
 8003f32:	481c      	ldr	r0, [pc, #112]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003f34:	f006 fda4 	bl	800aa80 <HAL_TIM_PWM_ConfigChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003f3e:	f7ff fcf5 	bl	800392c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 85;
 8003f52:	2355      	movs	r3, #85	; 0x55
 8003f54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003f86:	f007 fdcf 	bl	800bb28 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM1_Init+0x1dc>
  {
    Error_Handler();
 8003f90:	f7ff fccc 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f94:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <MX_TIM1_Init+0x1ec>)
 8003f96:	f000 fa7f 	bl	8004498 <HAL_TIM_MspPostInit>

}
 8003f9a:	bf00      	nop
 8003f9c:	3780      	adds	r7, #128	; 0x80
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20011f44 	.word	0x20011f44
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	00100060 	.word	0x00100060
 8003fb0:	00010040 	.word	0x00010040
 8003fb4:	00010050 	.word	0x00010050

08003fb8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b090      	sub	sp, #64	; 0x40
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fce:	f107 0320 	add.w	r3, r7, #32
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
 8003fe8:	615a      	str	r2, [r3, #20]
 8003fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <MX_TIM2_Init+0xec>)
 8003fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <MX_TIM2_Init+0xec>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003ffa:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <MX_TIM2_Init+0xec>)
 8003ffc:	2260      	movs	r2, #96	; 0x60
 8003ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8004000:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004002:	2201      	movs	r2, #1
 8004004:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <MX_TIM2_Init+0xec>)
 800400e:	2200      	movs	r2, #0
 8004010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004012:	4824      	ldr	r0, [pc, #144]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004014:	f006 f8d2 	bl	800a1bc <HAL_TIM_Base_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800401e:	f7ff fc85 	bl	800392c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004022:	4820      	ldr	r0, [pc, #128]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004024:	f006 fa39 	bl	800a49a <HAL_TIM_PWM_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800402e:	f7ff fc7d 	bl	800392c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004032:	2307      	movs	r3, #7
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <MX_TIM2_Init+0xf0>)
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800403a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403e:	4619      	mov	r1, r3
 8004040:	4818      	ldr	r0, [pc, #96]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004042:	f006 fe58 	bl	800acf6 <HAL_TIM_SlaveConfigSynchro>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800404c:	f7ff fc6e 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8004050:	2350      	movs	r3, #80	; 0x50
 8004052:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004058:	f107 0320 	add.w	r3, r7, #32
 800405c:	4619      	mov	r1, r3
 800405e:	4811      	ldr	r0, [pc, #68]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004060:	f007 fccc 	bl	800b9fc <HAL_TIMEx_MasterConfigSynchronization>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800406a:	f7ff fc5f 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800406e:	2360      	movs	r3, #96	; 0x60
 8004070:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8004072:	2301      	movs	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	2204      	movs	r2, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4807      	ldr	r0, [pc, #28]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004086:	f006 fcfb 	bl	800aa80 <HAL_TIM_PWM_ConfigChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004090:	f7ff fc4c 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004094:	4803      	ldr	r0, [pc, #12]	; (80040a4 <MX_TIM2_Init+0xec>)
 8004096:	f000 f9ff 	bl	8004498 <HAL_TIM_MspPostInit>

}
 800409a:	bf00      	nop
 800409c:	3740      	adds	r7, #64	; 0x40
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20011f90 	.word	0x20011f90
 80040a8:	00100060 	.word	0x00100060

080040ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b090      	sub	sp, #64	; 0x40
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80040b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c2:	f107 0320 	add.w	r3, r7, #32
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
 80040dc:	615a      	str	r2, [r3, #20]
 80040de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <MX_TIM3_Init+0xe8>)
 80040e2:	4a2d      	ldr	r2, [pc, #180]	; (8004198 <MX_TIM3_Init+0xec>)
 80040e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040e6:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <MX_TIM3_Init+0xe8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ec:	4b29      	ldr	r3, [pc, #164]	; (8004194 <MX_TIM3_Init+0xe8>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80040f2:	4b28      	ldr	r3, [pc, #160]	; (8004194 <MX_TIM3_Init+0xe8>)
 80040f4:	2205      	movs	r2, #5
 80040f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f8:	4b26      	ldr	r3, [pc, #152]	; (8004194 <MX_TIM3_Init+0xe8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004100:	2200      	movs	r2, #0
 8004102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004104:	4823      	ldr	r0, [pc, #140]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004106:	f006 f859 	bl	800a1bc <HAL_TIM_Base_Init>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004110:	f7ff fc0c 	bl	800392c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004114:	481f      	ldr	r0, [pc, #124]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004116:	f006 f9c0 	bl	800a49a <HAL_TIM_PWM_Init>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004120:	f7ff fc04 	bl	800392c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004124:	2307      	movs	r3, #7
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004128:	2300      	movs	r3, #0
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800412c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004130:	4619      	mov	r1, r3
 8004132:	4818      	ldr	r0, [pc, #96]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004134:	f006 fddf 	bl	800acf6 <HAL_TIM_SlaveConfigSynchro>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800413e:	f7ff fbf5 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004142:	2320      	movs	r3, #32
 8004144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800414a:	f107 0320 	add.w	r3, r7, #32
 800414e:	4619      	mov	r1, r3
 8004150:	4810      	ldr	r0, [pc, #64]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004152:	f007 fc53 	bl	800b9fc <HAL_TIMEx_MasterConfigSynchronization>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800415c:	f7ff fbe6 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004160:	2360      	movs	r3, #96	; 0x60
 8004162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 8004164:	2304      	movs	r3, #4
 8004166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	2200      	movs	r2, #0
 8004174:	4619      	mov	r1, r3
 8004176:	4807      	ldr	r0, [pc, #28]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004178:	f006 fc82 	bl	800aa80 <HAL_TIM_PWM_ConfigChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8004182:	f7ff fbd3 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004186:	4803      	ldr	r0, [pc, #12]	; (8004194 <MX_TIM3_Init+0xe8>)
 8004188:	f000 f986 	bl	8004498 <HAL_TIM_MspPostInit>

}
 800418c:	bf00      	nop
 800418e:	3740      	adds	r7, #64	; 0x40
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20011fdc 	.word	0x20011fdc
 8004198:	40000400 	.word	0x40000400

0800419c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <MX_TIM6_Init+0x64>)
 80041ae:	4a15      	ldr	r2, [pc, #84]	; (8004204 <MX_TIM6_Init+0x68>)
 80041b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <MX_TIM6_Init+0x64>)
 80041b4:	22a9      	movs	r2, #169	; 0xa9
 80041b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <MX_TIM6_Init+0x64>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <MX_TIM6_Init+0x64>)
 80041c0:	2231      	movs	r2, #49	; 0x31
 80041c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <MX_TIM6_Init+0x64>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041ca:	480d      	ldr	r0, [pc, #52]	; (8004200 <MX_TIM6_Init+0x64>)
 80041cc:	f005 fff6 	bl	800a1bc <HAL_TIM_Base_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80041d6:	f7ff fba9 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4806      	ldr	r0, [pc, #24]	; (8004200 <MX_TIM6_Init+0x64>)
 80041e8:	f007 fc08 	bl	800b9fc <HAL_TIMEx_MasterConfigSynchronization>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80041f2:	f7ff fb9b 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20012028 	.word	0x20012028
 8004204:	40001000 	.word	0x40001000

08004208 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <MX_TIM7_Init+0x68>)
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <MX_TIM7_Init+0x6c>)
 800421c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16999;
 800421e:	4b14      	ldr	r3, [pc, #80]	; (8004270 <MX_TIM7_Init+0x68>)
 8004220:	f244 2267 	movw	r2, #16999	; 0x4267
 8004224:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <MX_TIM7_Init+0x68>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <MX_TIM7_Init+0x68>)
 800422e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004232:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <MX_TIM7_Init+0x68>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800423a:	480d      	ldr	r0, [pc, #52]	; (8004270 <MX_TIM7_Init+0x68>)
 800423c:	f005 ffbe 	bl	800a1bc <HAL_TIM_Base_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004246:	f7ff fb71 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800424a:	2320      	movs	r3, #32
 800424c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <MX_TIM7_Init+0x68>)
 8004258:	f007 fbd0 	bl	800b9fc <HAL_TIMEx_MasterConfigSynchronization>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004262:	f7ff fb63 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20012074 	.word	0x20012074
 8004274:	40001400 	.word	0x40001400

08004278 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <MX_TIM16_Init+0x44>)
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <MX_TIM16_Init+0x48>)
 8004280:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <MX_TIM16_Init+0x44>)
 8004284:	22a9      	movs	r2, #169	; 0xa9
 8004286:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <MX_TIM16_Init+0x44>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <MX_TIM16_Init+0x44>)
 8004290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004294:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <MX_TIM16_Init+0x44>)
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <MX_TIM16_Init+0x44>)
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <MX_TIM16_Init+0x44>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80042a8:	4804      	ldr	r0, [pc, #16]	; (80042bc <MX_TIM16_Init+0x44>)
 80042aa:	f005 ff87 	bl	800a1bc <HAL_TIM_Base_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80042b4:	f7ff fb3a 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	200120c0 	.word	0x200120c0
 80042c0:	40014400 	.word	0x40014400

080042c4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <MX_TIM17_Init+0x48>)
 80042ca:	4a11      	ldr	r2, [pc, #68]	; (8004310 <MX_TIM17_Init+0x4c>)
 80042cc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16999;
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_TIM17_Init+0x48>)
 80042d0:	f244 2267 	movw	r2, #16999	; 0x4267
 80042d4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <MX_TIM17_Init+0x48>)
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <MX_TIM17_Init+0x48>)
 80042de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <MX_TIM17_Init+0x48>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <MX_TIM17_Init+0x48>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <MX_TIM17_Init+0x48>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80042f6:	4805      	ldr	r0, [pc, #20]	; (800430c <MX_TIM17_Init+0x48>)
 80042f8:	f005 ff60 	bl	800a1bc <HAL_TIM_Base_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8004302:	f7ff fb13 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	2001210c 	.word	0x2001210c
 8004310:	40014800 	.word	0x40014800

08004314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b090      	sub	sp, #64	; 0x40
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_TIM_Base_MspInit+0x168>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d12a      	bne.n	800438c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004336:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	4a51      	ldr	r2, [pc, #324]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 800433c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004340:	6613      	str	r3, [r2, #96]	; 0x60
 8004342:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434e:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	4a4b      	ldr	r2, [pc, #300]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800435a:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800436c:	2312      	movs	r3, #18
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	2300      	movs	r3, #0
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8004378:	2309      	movs	r3, #9
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004386:	f002 ff5f 	bl	8007248 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800438a:	e072      	b.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d10c      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004396:	4b3a      	ldr	r3, [pc, #232]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	4a39      	ldr	r2, [pc, #228]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6593      	str	r3, [r2, #88]	; 0x58
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
}
 80043ae:	e060      	b.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a33      	ldr	r2, [pc, #204]	; (8004484 <HAL_TIM_Base_MspInit+0x170>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a30      	ldr	r2, [pc, #192]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
 80043c6:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
}
 80043d2:	e04e      	b.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM6)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_TIM_Base_MspInit+0x174>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d114      	bne.n	8004408 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043de:	4b28      	ldr	r3, [pc, #160]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	4a27      	ldr	r2, [pc, #156]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043e4:	f043 0310 	orr.w	r3, r3, #16
 80043e8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	2036      	movs	r0, #54	; 0x36
 80043fc:	f002 f977 	bl	80066ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004400:	2036      	movs	r0, #54	; 0x36
 8004402:	f002 f98e 	bl	8006722 <HAL_NVIC_EnableIRQ>
}
 8004406:	e034      	b.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM7)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_TIM_Base_MspInit+0x178>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10c      	bne.n	800442c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004418:	f043 0320 	orr.w	r3, r3, #32
 800441c:	6593      	str	r3, [r2, #88]	; 0x58
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]
}
 800442a:	e022      	b.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM16)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_TIM_Base_MspInit+0x17c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10c      	bne.n	8004450 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	4a11      	ldr	r2, [pc, #68]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	6613      	str	r3, [r2, #96]	; 0x60
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	e010      	b.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM17)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <HAL_TIM_Base_MspInit+0x180>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10b      	bne.n	8004472 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6613      	str	r3, [r2, #96]	; 0x60
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_TIM_Base_MspInit+0x16c>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
}
 8004472:	bf00      	nop
 8004474:	3740      	adds	r7, #64	; 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40021000 	.word	0x40021000
 8004484:	40000400 	.word	0x40000400
 8004488:	40001000 	.word	0x40001000
 800448c:	40001400 	.word	0x40001400
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800

08004498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 031c 	add.w	r3, r7, #28
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a62      	ldr	r2, [pc, #392]	; (8004640 <HAL_TIM_MspPostInit+0x1a8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d17a      	bne.n	80045b0 <HAL_TIM_MspPostInit+0x118>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ba:	4b62      	ldr	r3, [pc, #392]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044c0:	f043 0304 	orr.w	r3, r3, #4
 80044c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	4a5b      	ldr	r2, [pc, #364]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044de:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	4b56      	ldr	r3, [pc, #344]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	4a55      	ldr	r2, [pc, #340]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044f6:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]
    PB13     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004512:	2302      	movs	r3, #2
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004516:	f107 031c 	add.w	r3, r7, #28
 800451a:	4619      	mov	r1, r3
 800451c:	484a      	ldr	r0, [pc, #296]	; (8004648 <HAL_TIM_MspPostInit+0x1b0>)
 800451e:	f002 fe93 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004528:	2302      	movs	r3, #2
 800452a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004530:	2301      	movs	r3, #1
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004534:	2306      	movs	r3, #6
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004538:	f107 031c 	add.w	r3, r7, #28
 800453c:	4619      	mov	r1, r3
 800453e:	4843      	ldr	r0, [pc, #268]	; (800464c <HAL_TIM_MspPostInit+0x1b4>)
 8004540:	f002 fe82 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454a:	2302      	movs	r3, #2
 800454c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454e:	2300      	movs	r3, #0
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004552:	2300      	movs	r3, #0
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004556:	2306      	movs	r3, #6
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455a:	f107 031c 	add.w	r3, r7, #28
 800455e:	4619      	mov	r1, r3
 8004560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004564:	f002 fe70 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004576:	2301      	movs	r3, #1
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800457a:	2306      	movs	r3, #6
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	4619      	mov	r1, r3
 8004584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004588:	f002 fe5e 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800458c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800459e:	230c      	movs	r3, #12
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a2:	f107 031c 	add.w	r3, r7, #28
 80045a6:	4619      	mov	r1, r3
 80045a8:	4828      	ldr	r0, [pc, #160]	; (800464c <HAL_TIM_MspPostInit+0x1b4>)
 80045aa:	f002 fe4d 	bl	8007248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80045ae:	e043      	b.n	8004638 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d11d      	bne.n	80045f6 <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	4a21      	ldr	r2, [pc, #132]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045d2:	2302      	movs	r3, #2
 80045d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	2302      	movs	r3, #2
 80045d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045e2:	2301      	movs	r3, #1
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	4619      	mov	r1, r3
 80045ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045f0:	f002 fe2a 	bl	8007248 <HAL_GPIO_Init>
}
 80045f4:	e020      	b.n	8004638 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a15      	ldr	r2, [pc, #84]	; (8004650 <HAL_TIM_MspPostInit+0x1b8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004604:	4a0f      	ldr	r2, [pc, #60]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 8004606:	f043 0302 	orr.w	r3, r3, #2
 800460a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_TIM_MspPostInit+0x1ac>)
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004618:	2310      	movs	r3, #16
 800461a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461c:	2302      	movs	r3, #2
 800461e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004624:	2300      	movs	r3, #0
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004628:	2302      	movs	r3, #2
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	f107 031c 	add.w	r3, r7, #28
 8004630:	4619      	mov	r1, r3
 8004632:	4806      	ldr	r0, [pc, #24]	; (800464c <HAL_TIM_MspPostInit+0x1b4>)
 8004634:	f002 fe08 	bl	8007248 <HAL_GPIO_Init>
}
 8004638:	bf00      	nop
 800463a:	3730      	adds	r7, #48	; 0x30
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40021000 	.word	0x40021000
 8004648:	48000800 	.word	0x48000800
 800464c:	48000400 	.word	0x48000400
 8004650:	40000400 	.word	0x40000400

08004654 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <MX_USART1_UART_Init+0x98>)
 800465a:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <MX_USART1_UART_Init+0x9c>)
 800465c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004660:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004666:	4b21      	ldr	r3, [pc, #132]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800466c:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <MX_USART1_UART_Init+0x98>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004672:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004674:	2200      	movs	r2, #0
 8004676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <MX_USART1_UART_Init+0x98>)
 800467a:	220c      	movs	r2, #12
 800467c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004680:	2200      	movs	r2, #0
 8004682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <MX_USART1_UART_Init+0x98>)
 800468c:	2200      	movs	r2, #0
 800468e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004690:	4b16      	ldr	r3, [pc, #88]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004692:	2200      	movs	r2, #0
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <MX_USART1_UART_Init+0x98>)
 8004698:	2200      	movs	r2, #0
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800469c:	2300      	movs	r3, #0
 800469e:	2200      	movs	r2, #0
 80046a0:	2100      	movs	r1, #0
 80046a2:	4812      	ldr	r0, [pc, #72]	; (80046ec <MX_USART1_UART_Init+0x98>)
 80046a4:	f008 fece 	bl	800d444 <HAL_RS485Ex_Init>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80046ae:	f7ff f93d 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046b2:	2100      	movs	r1, #0
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <MX_USART1_UART_Init+0x98>)
 80046b6:	f008 ffc0 	bl	800d63a <HAL_UARTEx_SetTxFifoThreshold>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80046c0:	f7ff f934 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046c4:	2100      	movs	r1, #0
 80046c6:	4809      	ldr	r0, [pc, #36]	; (80046ec <MX_USART1_UART_Init+0x98>)
 80046c8:	f008 fff5 	bl	800d6b6 <HAL_UARTEx_SetRxFifoThreshold>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80046d2:	f7ff f92b 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80046d6:	4805      	ldr	r0, [pc, #20]	; (80046ec <MX_USART1_UART_Init+0x98>)
 80046d8:	f008 ff76 	bl	800d5c8 <HAL_UARTEx_DisableFifoMode>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 80046e2:	f7ff f923 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20012158 	.word	0x20012158
 80046f0:	40013800 	.word	0x40013800

080046f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <MX_USART2_UART_Init+0x90>)
 80046fa:	4a23      	ldr	r2, [pc, #140]	; (8004788 <MX_USART2_UART_Init+0x94>)
 80046fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004706:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <MX_USART2_UART_Init+0x90>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <MX_USART2_UART_Init+0x90>)
 800471a:	220c      	movs	r2, #12
 800471c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004724:	4b17      	ldr	r3, [pc, #92]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800472a:	4b16      	ldr	r3, [pc, #88]	; (8004784 <MX_USART2_UART_Init+0x90>)
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004738:	2200      	movs	r2, #0
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800473c:	4811      	ldr	r0, [pc, #68]	; (8004784 <MX_USART2_UART_Init+0x90>)
 800473e:	f007 fc32 	bl	800bfa6 <HAL_UART_Init>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004748:	f7ff f8f0 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800474c:	2100      	movs	r1, #0
 800474e:	480d      	ldr	r0, [pc, #52]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004750:	f008 ff73 	bl	800d63a <HAL_UARTEx_SetTxFifoThreshold>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800475a:	f7ff f8e7 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800475e:	2100      	movs	r1, #0
 8004760:	4808      	ldr	r0, [pc, #32]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004762:	f008 ffa8 	bl	800d6b6 <HAL_UARTEx_SetRxFifoThreshold>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800476c:	f7ff f8de 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004770:	4804      	ldr	r0, [pc, #16]	; (8004784 <MX_USART2_UART_Init+0x90>)
 8004772:	f008 ff29 	bl	800d5c8 <HAL_UARTEx_DisableFifoMode>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800477c:	f7ff f8d6 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200121e8 	.word	0x200121e8
 8004788:	40004400 	.word	0x40004400

0800478c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 8004792:	4a26      	ldr	r2, [pc, #152]	; (800482c <MX_USART3_UART_Init+0xa0>)
 8004794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 8004798:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800479c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047a4:	4b20      	ldr	r3, [pc, #128]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047b2:	2208      	movs	r2, #8
 80047b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047d0:	2220      	movs	r2, #32
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80047dc:	4812      	ldr	r0, [pc, #72]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047de:	f007 fbe2 	bl	800bfa6 <HAL_UART_Init>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 80047e8:	f7ff f8a0 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_4) != HAL_OK)
 80047ec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80047f0:	480d      	ldr	r0, [pc, #52]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 80047f2:	f008 ff22 	bl	800d63a <HAL_UARTEx_SetTxFifoThreshold>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 80047fc:	f7ff f896 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_4) != HAL_OK)
 8004800:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004804:	4808      	ldr	r0, [pc, #32]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 8004806:	f008 ff56 	bl	800d6b6 <HAL_UARTEx_SetRxFifoThreshold>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_USART3_UART_Init+0x88>
  {
    Error_Handler();
 8004810:	f7ff f88c 	bl	800392c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8004814:	4804      	ldr	r0, [pc, #16]	; (8004828 <MX_USART3_UART_Init+0x9c>)
 8004816:	f008 fe9c 	bl	800d552 <HAL_UARTEx_EnableFifoMode>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_USART3_UART_Init+0x98>
  {
    Error_Handler();
 8004820:	f7ff f884 	bl	800392c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004824:	bf00      	nop
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20012278 	.word	0x20012278
 800482c:	40004800 	.word	0x40004800

08004830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b0a4      	sub	sp, #144	; 0x90
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800484c:	2254      	movs	r2, #84	; 0x54
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f00a fdf5 	bl	800f440 <memset>
  if(uartHandle->Instance==USART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a82      	ldr	r2, [pc, #520]	; (8004a64 <HAL_UART_MspInit+0x234>)
 800485c:	4293      	cmp	r3, r2
 800485e:	f040 808e 	bne.w	800497e <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004862:	2301      	movs	r3, #1
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004866:	2300      	movs	r3, #0
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800486a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800486e:	4618      	mov	r0, r3
 8004870:	f005 fa56 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800487a:	f7ff f857 	bl	800392c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800487e:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <HAL_UART_MspInit+0x238>)
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	4a79      	ldr	r2, [pc, #484]	; (8004a68 <HAL_UART_MspInit+0x238>)
 8004884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004888:	6613      	str	r3, [r2, #96]	; 0x60
 800488a:	4b77      	ldr	r3, [pc, #476]	; (8004a68 <HAL_UART_MspInit+0x238>)
 800488c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004896:	4b74      	ldr	r3, [pc, #464]	; (8004a68 <HAL_UART_MspInit+0x238>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	4a73      	ldr	r2, [pc, #460]	; (8004a68 <HAL_UART_MspInit+0x238>)
 800489c:	f043 0304 	orr.w	r3, r3, #4
 80048a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048a2:	4b71      	ldr	r3, [pc, #452]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	4b6e      	ldr	r3, [pc, #440]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	4a6d      	ldr	r2, [pc, #436]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ba:	4b6b      	ldr	r3, [pc, #428]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80048c6:	2330      	movs	r3, #48	; 0x30
 80048c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ca:	2302      	movs	r3, #2
 80048cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048dc:	2307      	movs	r3, #7
 80048de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048e6:	4619      	mov	r1, r3
 80048e8:	4860      	ldr	r0, [pc, #384]	; (8004a6c <HAL_UART_MspInit+0x23c>)
 80048ea:	f002 fcad 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80048ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f4:	2302      	movs	r3, #2
 80048f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004900:	2300      	movs	r3, #0
 8004902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004906:	2307      	movs	r3, #7
 8004908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004910:	4619      	mov	r1, r3
 8004912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004916:	f002 fc97 	bl	8007248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 800491a:	4b55      	ldr	r3, [pc, #340]	; (8004a70 <HAL_UART_MspInit+0x240>)
 800491c:	4a55      	ldr	r2, [pc, #340]	; (8004a74 <HAL_UART_MspInit+0x244>)
 800491e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004922:	2219      	movs	r2, #25
 8004924:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004926:	4b52      	ldr	r3, [pc, #328]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004928:	2210      	movs	r2, #16
 800492a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <HAL_UART_MspInit+0x240>)
 800492e:	2200      	movs	r2, #0
 8004930:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004932:	4b4f      	ldr	r3, [pc, #316]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004938:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <HAL_UART_MspInit+0x240>)
 800493a:	2200      	movs	r2, #0
 800493c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800493e:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004944:	4b4a      	ldr	r3, [pc, #296]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800494a:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <HAL_UART_MspInit+0x240>)
 800494c:	2200      	movs	r2, #0
 800494e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004950:	4847      	ldr	r0, [pc, #284]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004952:	f002 f8ff 	bl	8006b54 <HAL_DMA_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 800495c:	f7fe ffe6 	bl	800392c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a43      	ldr	r2, [pc, #268]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004964:	679a      	str	r2, [r3, #120]	; 0x78
 8004966:	4a42      	ldr	r2, [pc, #264]	; (8004a70 <HAL_UART_MspInit+0x240>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800496c:	2200      	movs	r2, #0
 800496e:	2100      	movs	r1, #0
 8004970:	2025      	movs	r0, #37	; 0x25
 8004972:	f001 febc 	bl	80066ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004976:	2025      	movs	r0, #37	; 0x25
 8004978:	f001 fed3 	bl	8006722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800497c:	e0f3      	b.n	8004b66 <HAL_UART_MspInit+0x336>
  else if(uartHandle->Instance==USART2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3d      	ldr	r2, [pc, #244]	; (8004a78 <HAL_UART_MspInit+0x248>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d17d      	bne.n	8004a84 <HAL_UART_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004988:	2302      	movs	r3, #2
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800498c:	2300      	movs	r3, #0
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004994:	4618      	mov	r0, r3
 8004996:	f005 f9c3 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_MspInit+0x174>
      Error_Handler();
 80049a0:	f7fe ffc4 	bl	800392c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80049a4:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ae:	6593      	str	r3, [r2, #88]	; 0x58
 80049b0:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	4a29      	ldr	r2, [pc, #164]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_UART_MspInit+0x238>)
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049d4:	230c      	movs	r3, #12
 80049d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d8:	2302      	movs	r3, #2
 80049da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049ea:	2307      	movs	r3, #7
 80049ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049f4:	4619      	mov	r1, r3
 80049f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049fa:	f002 fc25 	bl	8007248 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <HAL_UART_MspInit+0x250>)
 8004a02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a06:	221b      	movs	r2, #27
 8004a08:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a1c:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a34:	4811      	ldr	r0, [pc, #68]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a36:	f002 f88d 	bl	8006b54 <HAL_DMA_Init>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8004a40:	f7fe ff74 	bl	800392c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a48:	679a      	str	r2, [r3, #120]	; 0x78
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <HAL_UART_MspInit+0x24c>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	2026      	movs	r0, #38	; 0x26
 8004a56:	f001 fe4a 	bl	80066ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a5a:	2026      	movs	r0, #38	; 0x26
 8004a5c:	f001 fe61 	bl	8006722 <HAL_NVIC_EnableIRQ>
}
 8004a60:	e081      	b.n	8004b66 <HAL_UART_MspInit+0x336>
 8004a62:	bf00      	nop
 8004a64:	40013800 	.word	0x40013800
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	48000800 	.word	0x48000800
 8004a70:	20012308 	.word	0x20012308
 8004a74:	40020030 	.word	0x40020030
 8004a78:	40004400 	.word	0x40004400
 8004a7c:	20012368 	.word	0x20012368
 8004a80:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART3)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a39      	ldr	r2, [pc, #228]	; (8004b70 <HAL_UART_MspInit+0x340>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d16b      	bne.n	8004b66 <HAL_UART_MspInit+0x336>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f005 f940 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8004aa6:	f7fe ff41 	bl	800392c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004aaa:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_UART_MspInit+0x344>)
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_UART_MspInit+0x344>)
 8004ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <HAL_UART_MspInit+0x344>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_UART_MspInit+0x344>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	4a2b      	ldr	r2, [pc, #172]	; (8004b74 <HAL_UART_MspInit+0x344>)
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ace:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HAL_UART_MspInit+0x344>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ada:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ade:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004af2:	2307      	movs	r3, #7
 8004af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004afc:	4619      	mov	r1, r3
 8004afe:	481e      	ldr	r0, [pc, #120]	; (8004b78 <HAL_UART_MspInit+0x348>)
 8004b00:	f002 fba2 	bl	8007248 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004b04:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_UART_MspInit+0x350>)
 8004b08:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b0c:	221d      	movs	r2, #29
 8004b0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b12:	2210      	movs	r2, #16
 8004b14:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b1c:	4b17      	ldr	r3, [pc, #92]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b28:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b34:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004b3a:	4810      	ldr	r0, [pc, #64]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b3c:	f002 f80a 	bl	8006b54 <HAL_DMA_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8004b46:	f7fe fef1 	bl	800392c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b4e:	679a      	str	r2, [r3, #120]	; 0x78
 8004b50:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <HAL_UART_MspInit+0x34c>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2100      	movs	r1, #0
 8004b5a:	2027      	movs	r0, #39	; 0x27
 8004b5c:	f001 fdc7 	bl	80066ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b60:	2027      	movs	r0, #39	; 0x27
 8004b62:	f001 fdde 	bl	8006722 <HAL_NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3790      	adds	r7, #144	; 0x90
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40004800 	.word	0x40004800
 8004b74:	40021000 	.word	0x40021000
 8004b78:	48000400 	.word	0x48000400
 8004b7c:	200123c8 	.word	0x200123c8
 8004b80:	40020058 	.word	0x40020058

08004b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b88:	480d      	ldr	r0, [pc, #52]	; (8004bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b8a:	490e      	ldr	r1, [pc, #56]	; (8004bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <LoopForever+0xe>)
  movs r3, #0
 8004b8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b90:	e002      	b.n	8004b98 <LoopCopyDataInit>

08004b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b96:	3304      	adds	r3, #4

08004b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b9c:	d3f9      	bcc.n	8004b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9e:	4a0b      	ldr	r2, [pc, #44]	; (8004bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ba0:	4c0b      	ldr	r4, [pc, #44]	; (8004bd0 <LoopForever+0x16>)
  movs r3, #0
 8004ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba4:	e001      	b.n	8004baa <LoopFillZerobss>

08004ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba8:	3204      	adds	r2, #4

08004baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bac:	d3fb      	bcc.n	8004ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004bae:	f7ff f8f1 	bl	8003d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bb2:	f00a fc13 	bl	800f3dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bb6:	f7fc ffb3 	bl	8001b20 <main>

08004bba <LoopForever>:

LoopForever:
    b LoopForever
 8004bba:	e7fe      	b.n	8004bba <LoopForever>
  ldr   r0, =_estack
 8004bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc4:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8004bc8:	0802b208 	.word	0x0802b208
  ldr r2, =_sbss
 8004bcc:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8004bd0:	2001347c 	.word	0x2001347c

08004bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bd4:	e7fe      	b.n	8004bd4 <ADC1_2_IRQHandler>

08004bd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004be0:	2003      	movs	r0, #3
 8004be2:	f001 fd79 	bl	80066d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004be6:	2000      	movs	r0, #0
 8004be8:	f000 f80e 	bl	8004c08 <HAL_InitTick>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	71fb      	strb	r3, [r7, #7]
 8004bf6:	e001      	b.n	8004bfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bf8:	f7fe feac 	bl	8003954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bfc:	79fb      	ldrb	r3, [r7, #7]

}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004c14:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <HAL_InitTick+0x68>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d022      	beq.n	8004c62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c1c:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <HAL_InitTick+0x6c>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_InitTick+0x68>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 fd84 	bl	800673e <HAL_SYSTICK_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d809      	bhi.n	8004c56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c42:	2200      	movs	r2, #0
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4a:	f001 fd50 	bl	80066ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_InitTick+0x70>)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e007      	b.n	8004c66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
 8004c5a:	e004      	b.n	8004c66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	e001      	b.n	8004c66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000038 	.word	0x20000038
 8004c74:	20000030 	.word	0x20000030
 8004c78:	20000034 	.word	0x20000034

08004c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_IncTick+0x1c>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_IncTick+0x20>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <HAL_IncTick+0x1c>)
 8004c8c:	6013      	str	r3, [r2, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	20012428 	.word	0x20012428
 8004c9c:	20000038 	.word	0x20000038

08004ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <HAL_GetTick+0x14>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20012428 	.word	0x20012428

08004cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff ffee 	bl	8004ca0 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d004      	beq.n	8004cdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_Delay+0x40>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cdc:	bf00      	nop
 8004cde:	f7ff ffdf 	bl	8004ca0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d8f7      	bhi.n	8004cde <HAL_Delay+0x26>
  {
  }
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000038 	.word	0x20000038

08004cfc <LL_ADC_SetCommonClock>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	609a      	str	r2, [r3, #8]
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_ADC_SetCommonPathInternalCh>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <LL_ADC_GetCommonPathInternalCh>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_ADC_SetOffset>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3360      	adds	r3, #96	; 0x60
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <LL_ADC_SetOffset+0x44>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	03fff000 	.word	0x03fff000

08004dac <LL_ADC_GetOffsetChannel>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3360      	adds	r3, #96	; 0x60
 8004dba:	461a      	mov	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_ADC_SetOffsetState>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3360      	adds	r3, #96	; 0x60
 8004de8:	461a      	mov	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_ADC_SetOffsetSign>:
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b087      	sub	sp, #28
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3360      	adds	r3, #96	; 0x60
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	601a      	str	r2, [r3, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <LL_ADC_SetOffsetSaturation>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3360      	adds	r3, #96	; 0x60
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	601a      	str	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	615a      	str	r2, [r3, #20]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <LL_ADC_REG_SetSequencerRanks>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3330      	adds	r3, #48	; 0x30
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	4413      	add	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	211f      	movs	r1, #31
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	401a      	ands	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0e9b      	lsrs	r3, r3, #26
 8004efe:	f003 011f 	and.w	r1, r3, #31
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	601a      	str	r2, [r3, #0]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <LL_ADC_SetChannelSamplingTime>:
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b087      	sub	sp, #28
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	0e5b      	lsrs	r3, r3, #25
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	0d1b      	lsrs	r3, r3, #20
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2107      	movs	r1, #7
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0d1b      	lsrs	r3, r3, #20
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f62:	431a      	orrs	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	601a      	str	r2, [r3, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_ADC_SetChannelSingleDiff>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a0f      	ldr	r2, [pc, #60]	; (8004fc0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10a      	bne.n	8004f9e <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004f9c:	e00a      	b.n	8004fb4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004faa:	43db      	mvns	r3, r3
 8004fac:	401a      	ands	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	407f0000 	.word	0x407f0000

08004fc4 <LL_ADC_DisableDeepPowerDown>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6093      	str	r3, [r2, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ffc:	d101      	bne.n	8005002 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <LL_ADC_EnableInternalRegulator>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800504c:	d101      	bne.n	8005052 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_Enable>:
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005074:	f043 0201 	orr.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_ADC_Disable>:
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800509c:	f043 0202 	orr.w	r2, r3, #2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <LL_ADC_IsEnabled>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <LL_ADC_IsEnabled+0x18>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <LL_ADC_IsEnabled+0x1a>
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <LL_ADC_IsDisableOngoing>:
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d101      	bne.n	80050ee <LL_ADC_IsDisableOngoing+0x18>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <LL_ADC_IsDisableOngoing+0x1a>
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d101      	bne.n	8005114 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	d101      	bne.n	800513a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b089      	sub	sp, #36	; 0x24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1af      	b.n	80054c2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fc f897 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff2d 	bl	8004fe8 <LL_ADC_IsDeepPowerDownEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff13 	bl	8004fc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff ff48 	bl	8005038 <LL_ADC_IsInternalRegulatorEnabled>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d115      	bne.n	80051da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff2c 	bl	8005010 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051b8:	4b9f      	ldr	r3, [pc, #636]	; (8005438 <HAL_ADC_Init+0x2f0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	099b      	lsrs	r3, r3, #6
 80051be:	4a9f      	ldr	r2, [pc, #636]	; (800543c <HAL_ADC_Init+0x2f4>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	099b      	lsrs	r3, r3, #6
 80051c6:	3301      	adds	r3, #1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80051cc:	e002      	b.n	80051d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f9      	bne.n	80051ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ff2a 	bl	8005038 <LL_ADC_IsInternalRegulatorEnabled>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	f043 0210 	orr.w	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff76 	bl	80050fc <LL_ADC_REG_IsConversionOngoing>
 8005210:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	f040 8148 	bne.w	80054b0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 8144 	bne.w	80054b0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005230:	f043 0202 	orr.w	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff ff37 	bl	80050b0 <LL_ADC_IsEnabled>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d141      	bne.n	80052cc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005250:	d004      	beq.n	800525c <HAL_ADC_Init+0x114>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_ADC_Init+0x2f8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10f      	bne.n	800527c <HAL_ADC_Init+0x134>
 800525c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005260:	f7ff ff26 	bl	80050b0 <LL_ADC_IsEnabled>
 8005264:	4604      	mov	r4, r0
 8005266:	4876      	ldr	r0, [pc, #472]	; (8005440 <HAL_ADC_Init+0x2f8>)
 8005268:	f7ff ff22 	bl	80050b0 <LL_ADC_IsEnabled>
 800526c:	4603      	mov	r3, r0
 800526e:	4323      	orrs	r3, r4
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e012      	b.n	80052a2 <HAL_ADC_Init+0x15a>
 800527c:	4871      	ldr	r0, [pc, #452]	; (8005444 <HAL_ADC_Init+0x2fc>)
 800527e:	f7ff ff17 	bl	80050b0 <LL_ADC_IsEnabled>
 8005282:	4604      	mov	r4, r0
 8005284:	4870      	ldr	r0, [pc, #448]	; (8005448 <HAL_ADC_Init+0x300>)
 8005286:	f7ff ff13 	bl	80050b0 <LL_ADC_IsEnabled>
 800528a:	4603      	mov	r3, r0
 800528c:	431c      	orrs	r4, r3
 800528e:	486f      	ldr	r0, [pc, #444]	; (800544c <HAL_ADC_Init+0x304>)
 8005290:	f7ff ff0e 	bl	80050b0 <LL_ADC_IsEnabled>
 8005294:	4603      	mov	r3, r0
 8005296:	4323      	orrs	r3, r4
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d012      	beq.n	80052cc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ae:	d004      	beq.n	80052ba <HAL_ADC_Init+0x172>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a62      	ldr	r2, [pc, #392]	; (8005440 <HAL_ADC_Init+0x2f8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_ADC_Init+0x176>
 80052ba:	4a65      	ldr	r2, [pc, #404]	; (8005450 <HAL_ADC_Init+0x308>)
 80052bc:	e000      	b.n	80052c0 <HAL_ADC_Init+0x178>
 80052be:	4a65      	ldr	r2, [pc, #404]	; (8005454 <HAL_ADC_Init+0x30c>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f7ff fd18 	bl	8004cfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7f5b      	ldrb	r3, [r3, #29]
 80052d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80052dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80052e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d106      	bne.n	8005308 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	045b      	lsls	r3, r3, #17
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4313      	orrs	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <HAL_ADC_Init+0x310>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	69b9      	ldr	r1, [r7, #24]
 8005334:	430b      	orrs	r3, r1
 8005336:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fed2 	bl	80050fc <LL_ADC_REG_IsConversionOngoing>
 8005358:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fedf 	bl	8005122 <LL_ADC_INJ_IsConversionOngoing>
 8005364:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d17f      	bne.n	800546c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d17c      	bne.n	800546c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005376:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800537e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538e:	f023 0302 	bic.w	r3, r3, #2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	430b      	orrs	r3, r1
 800539a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d017      	beq.n	80053d4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6911      	ldr	r1, [r2, #16]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80053d2:	e013      	b.n	80053fc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005402:	2b01      	cmp	r3, #1
 8005404:	d12a      	bne.n	800545c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005410:	f023 0304 	bic.w	r3, r3, #4
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800541c:	4311      	orrs	r1, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005428:	430a      	orrs	r2, r1
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	611a      	str	r2, [r3, #16]
 8005436:	e019      	b.n	800546c <HAL_ADC_Init+0x324>
 8005438:	20000030 	.word	0x20000030
 800543c:	053e2d63 	.word	0x053e2d63
 8005440:	50000100 	.word	0x50000100
 8005444:	50000400 	.word	0x50000400
 8005448:	50000500 	.word	0x50000500
 800544c:	50000600 	.word	0x50000600
 8005450:	50000300 	.word	0x50000300
 8005454:	50000700 	.word	0x50000700
 8005458:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d10c      	bne.n	800548e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	f023 010f 	bic.w	r1, r3, #15
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
 800548c:	e007      	b.n	800549e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 020f 	bic.w	r2, r2, #15
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	f043 0201 	orr.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80054ae:	e007      	b.n	80054c0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b4:	f043 0210 	orr.w	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	; 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd90      	pop	{r4, r7, pc}
 80054ca:	bf00      	nop

080054cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0b6      	sub	sp, #216	; 0xd8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x24>
 8005512:	2302      	movs	r3, #2
 8005514:	f000 bc13 	b.w	8005d3e <HAL_ADC_ConfigChannel+0x84a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fde9 	bl	80050fc <LL_ADC_REG_IsConversionOngoing>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 83f3 	bne.w	8005d18 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7ff fcc1 	bl	8004ec6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fdd7 	bl	80050fc <LL_ADC_REG_IsConversionOngoing>
 800554e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fde3 	bl	8005122 <LL_ADC_INJ_IsConversionOngoing>
 800555c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005560:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 81d9 	bne.w	800591c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800556a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 81d4 	bne.w	800591c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800557c:	d10f      	bne.n	800559e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	4619      	mov	r1, r3
 800558a:	f7ff fcc8 	bl	8004f1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fc6f 	bl	8004e7a <LL_ADC_SetSamplingTimeCommonConfig>
 800559c:	e00e      	b.n	80055bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f7ff fcb7 	bl	8004f1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fc5f 	bl	8004e7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d022      	beq.n	8005624 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6919      	ldr	r1, [r3, #16]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ee:	f7ff fbb9 	bl	8004d64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6919      	ldr	r1, [r3, #16]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7ff fc05 	bl	8004e0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6919      	ldr	r1, [r3, #16]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	7f1b      	ldrb	r3, [r3, #28]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_ADC_ConfigChannel+0x126>
 8005614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005618:	e000      	b.n	800561c <HAL_ADC_ConfigChannel+0x128>
 800561a:	2300      	movs	r3, #0
 800561c:	461a      	mov	r2, r3
 800561e:	f7ff fc11 	bl	8004e44 <LL_ADC_SetOffsetSaturation>
 8005622:	e17b      	b.n	800591c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fbbe 	bl	8004dac <LL_ADC_GetOffsetChannel>
 8005630:	4603      	mov	r3, r0
 8005632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x15c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fbb3 	bl	8004dac <LL_ADC_GetOffsetChannel>
 8005646:	4603      	mov	r3, r0
 8005648:	0e9b      	lsrs	r3, r3, #26
 800564a:	f003 021f 	and.w	r2, r3, #31
 800564e:	e01e      	b.n	800568e <HAL_ADC_ConfigChannel+0x19a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fba8 	bl	8004dac <LL_ADC_GetOffsetChannel>
 800565c:	4603      	mov	r3, r0
 800565e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800566e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800567e:	2320      	movs	r3, #32
 8005680:	e004      	b.n	800568c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x1b2>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0e9b      	lsrs	r3, r3, #26
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	e018      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x1e4>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056b2:	fa93 f3a3 	rbit	r3, r3
 80056b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80056ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80056c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80056ca:	2320      	movs	r3, #32
 80056cc:	e004      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80056ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056d8:	429a      	cmp	r2, r3
 80056da:	d106      	bne.n	80056ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fb77 	bl	8004dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2101      	movs	r1, #1
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fb5b 	bl	8004dac <LL_ADC_GetOffsetChannel>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x222>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fb50 	bl	8004dac <LL_ADC_GetOffsetChannel>
 800570c:	4603      	mov	r3, r0
 800570e:	0e9b      	lsrs	r3, r3, #26
 8005710:	f003 021f 	and.w	r2, r3, #31
 8005714:	e01e      	b.n	8005754 <HAL_ADC_ConfigChannel+0x260>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fb45 	bl	8004dac <LL_ADC_GetOffsetChannel>
 8005722:	4603      	mov	r3, r0
 8005724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005734:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800573c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005744:	2320      	movs	r3, #32
 8005746:	e004      	b.n	8005752 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800574c:	fab3 f383 	clz	r3, r3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_ADC_ConfigChannel+0x278>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0e9b      	lsrs	r3, r3, #26
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	e018      	b.n	800579e <HAL_ADC_ConfigChannel+0x2aa>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005778:	fa93 f3a3 	rbit	r3, r3
 800577c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005790:	2320      	movs	r3, #32
 8005792:	e004      	b.n	800579e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800579e:	429a      	cmp	r2, r3
 80057a0:	d106      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fb14 	bl	8004dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2102      	movs	r1, #2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff faf8 	bl	8004dac <LL_ADC_GetOffsetChannel>
 80057bc:	4603      	mov	r3, r0
 80057be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <HAL_ADC_ConfigChannel+0x2e8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2102      	movs	r1, #2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff faed 	bl	8004dac <LL_ADC_GetOffsetChannel>
 80057d2:	4603      	mov	r3, r0
 80057d4:	0e9b      	lsrs	r3, r3, #26
 80057d6:	f003 021f 	and.w	r2, r3, #31
 80057da:	e01e      	b.n	800581a <HAL_ADC_ConfigChannel+0x326>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2102      	movs	r1, #2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fae2 	bl	8004dac <LL_ADC_GetOffsetChannel>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80057fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800580a:	2320      	movs	r3, #32
 800580c:	e004      	b.n	8005818 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800580e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x33e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	0e9b      	lsrs	r3, r3, #26
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	e016      	b.n	8005860 <HAL_ADC_ConfigChannel+0x36c>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800583e:	fa93 f3a3 	rbit	r3, r3
 8005842:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800584a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005852:	2320      	movs	r3, #32
 8005854:	e004      	b.n	8005860 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005860:	429a      	cmp	r2, r3
 8005862:	d106      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2200      	movs	r2, #0
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fab3 	bl	8004dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2103      	movs	r1, #3
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fa97 	bl	8004dac <LL_ADC_GetOffsetChannel>
 800587e:	4603      	mov	r3, r0
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <HAL_ADC_ConfigChannel+0x3aa>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2103      	movs	r1, #3
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fa8c 	bl	8004dac <LL_ADC_GetOffsetChannel>
 8005894:	4603      	mov	r3, r0
 8005896:	0e9b      	lsrs	r3, r3, #26
 8005898:	f003 021f 	and.w	r2, r3, #31
 800589c:	e017      	b.n	80058ce <HAL_ADC_ConfigChannel+0x3da>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2103      	movs	r1, #3
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fa81 	bl	8004dac <LL_ADC_GetOffsetChannel>
 80058aa:	4603      	mov	r3, r0
 80058ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b0:	fa93 f3a3 	rbit	r3, r3
 80058b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80058b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80058ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80058c0:	2320      	movs	r3, #32
 80058c2:	e003      	b.n	80058cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	fab3 f383 	clz	r3, r3
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_ADC_ConfigChannel+0x3f2>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	0e9b      	lsrs	r3, r3, #26
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	e011      	b.n	800590a <HAL_ADC_ConfigChannel+0x416>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ee:	fa93 f3a3 	rbit	r3, r3
 80058f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80058f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80058fe:	2320      	movs	r3, #32
 8005900:	e003      	b.n	800590a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005904:	fab3 f383 	clz	r3, r3
 8005908:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800590a:	429a      	cmp	r2, r3
 800590c:	d106      	bne.n	800591c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	2103      	movs	r1, #3
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fa5e 	bl	8004dd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fbc5 	bl	80050b0 <LL_ADC_IsEnabled>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	f040 813d 	bne.w	8005ba8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6819      	ldr	r1, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	461a      	mov	r2, r3
 800593c:	f7ff fb1a 	bl	8004f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4aa2      	ldr	r2, [pc, #648]	; (8005bd0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	f040 812e 	bne.w	8005ba8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <HAL_ADC_ConfigChannel+0x480>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	0e9b      	lsrs	r3, r3, #26
 8005962:	3301      	adds	r3, #1
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2b09      	cmp	r3, #9
 800596a:	bf94      	ite	ls
 800596c:	2301      	movls	r3, #1
 800596e:	2300      	movhi	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e019      	b.n	80059a8 <HAL_ADC_ConfigChannel+0x4b4>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800597c:	fa93 f3a3 	rbit	r3, r3
 8005980:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005984:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800598c:	2320      	movs	r3, #32
 800598e:	e003      	b.n	8005998 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005992:	fab3 f383 	clz	r3, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	3301      	adds	r3, #1
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	2b09      	cmp	r3, #9
 80059a0:	bf94      	ite	ls
 80059a2:	2301      	movls	r3, #1
 80059a4:	2300      	movhi	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d079      	beq.n	8005aa0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x4d4>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0e9b      	lsrs	r3, r3, #26
 80059be:	3301      	adds	r3, #1
 80059c0:	069b      	lsls	r3, r3, #26
 80059c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059c6:	e015      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x500>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d0:	fa93 f3a3 	rbit	r3, r3
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80059da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80059e0:	2320      	movs	r3, #32
 80059e2:	e003      	b.n	80059ec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80059e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e6:	fab3 f383 	clz	r3, r3
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	3301      	adds	r3, #1
 80059ee:	069b      	lsls	r3, r3, #26
 80059f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x520>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	0e9b      	lsrs	r3, r3, #26
 8005a06:	3301      	adds	r3, #1
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	e017      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x550>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	e003      	b.n	8005a38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	fab3 f383 	clz	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2101      	movs	r1, #1
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	ea42 0103 	orr.w	r1, r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x576>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	0e9b      	lsrs	r3, r3, #26
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	f003 021f 	and.w	r2, r3, #31
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	051b      	lsls	r3, r3, #20
 8005a68:	e018      	b.n	8005a9c <HAL_ADC_ConfigChannel+0x5a8>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	fa93 f3a3 	rbit	r3, r3
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a82:	2320      	movs	r3, #32
 8005a84:	e003      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	fab3 f383 	clz	r3, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f003 021f 	and.w	r2, r3, #31
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	e07e      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d107      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x5c8>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0e9b      	lsrs	r3, r3, #26
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	069b      	lsls	r3, r3, #26
 8005ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005aba:	e015      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x5f4>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	e003      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	fab3 f383 	clz	r3, r3
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	069b      	lsls	r3, r3, #26
 8005ae4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <HAL_ADC_ConfigChannel+0x614>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	0e9b      	lsrs	r3, r3, #26
 8005afa:	3301      	adds	r3, #1
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	2101      	movs	r1, #1
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	e017      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x644>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	fa93 f3a3 	rbit	r3, r3
 8005b14:	61fb      	str	r3, [r7, #28]
  return result;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005b20:	2320      	movs	r3, #32
 8005b22:	e003      	b.n	8005b2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	fab3 f383 	clz	r3, r3
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	2101      	movs	r1, #1
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	ea42 0103 	orr.w	r1, r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x670>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	0e9b      	lsrs	r3, r3, #26
 8005b4e:	3301      	adds	r3, #1
 8005b50:	f003 021f 	and.w	r2, r3, #31
 8005b54:	4613      	mov	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4413      	add	r3, r2
 8005b5a:	3b1e      	subs	r3, #30
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b62:	e01b      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x6a8>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fa93 f3a3 	rbit	r3, r3
 8005b70:	613b      	str	r3, [r7, #16]
  return result;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	e003      	b.n	8005b88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	fab3 f383 	clz	r3, r3
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	3301      	adds	r3, #1
 8005b8a:	f003 021f 	and.w	r2, r3, #31
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	3b1e      	subs	r3, #30
 8005b96:	051b      	lsls	r3, r3, #20
 8005b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f7ff f9bb 	bl	8004f1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80be 	beq.w	8005d32 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bbe:	d004      	beq.n	8005bca <HAL_ADC_ConfigChannel+0x6d6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d10a      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x6ec>
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <HAL_ADC_ConfigChannel+0x6e8>)
 8005bcc:	e009      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x6ee>
 8005bce:	bf00      	nop
 8005bd0:	407f0000 	.word	0x407f0000
 8005bd4:	80080000 	.word	0x80080000
 8005bd8:	50000100 	.word	0x50000100
 8005bdc:	50000300 	.word	0x50000300
 8005be0:	4b59      	ldr	r3, [pc, #356]	; (8005d48 <HAL_ADC_ConfigChannel+0x854>)
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f8b0 	bl	8004d48 <LL_ADC_GetCommonPathInternalCh>
 8005be8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a56      	ldr	r2, [pc, #344]	; (8005d4c <HAL_ADC_ConfigChannel+0x858>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_ADC_ConfigChannel+0x70c>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a55      	ldr	r2, [pc, #340]	; (8005d50 <HAL_ADC_ConfigChannel+0x85c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d13a      	bne.n	8005c76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d134      	bne.n	8005c76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c14:	d005      	beq.n	8005c22 <HAL_ADC_ConfigChannel+0x72e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a4e      	ldr	r2, [pc, #312]	; (8005d54 <HAL_ADC_ConfigChannel+0x860>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	f040 8085 	bne.w	8005d2c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c2a:	d004      	beq.n	8005c36 <HAL_ADC_ConfigChannel+0x742>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a49      	ldr	r2, [pc, #292]	; (8005d58 <HAL_ADC_ConfigChannel+0x864>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x746>
 8005c36:	4a49      	ldr	r2, [pc, #292]	; (8005d5c <HAL_ADC_ConfigChannel+0x868>)
 8005c38:	e000      	b.n	8005c3c <HAL_ADC_ConfigChannel+0x748>
 8005c3a:	4a43      	ldr	r2, [pc, #268]	; (8005d48 <HAL_ADC_ConfigChannel+0x854>)
 8005c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7ff f86b 	bl	8004d22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c4c:	4b44      	ldr	r3, [pc, #272]	; (8005d60 <HAL_ADC_ConfigChannel+0x86c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	4a44      	ldr	r2, [pc, #272]	; (8005d64 <HAL_ADC_ConfigChannel+0x870>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	099b      	lsrs	r3, r3, #6
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c66:	e002      	b.n	8005c6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f9      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c74:	e05a      	b.n	8005d2c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a3b      	ldr	r2, [pc, #236]	; (8005d68 <HAL_ADC_ConfigChannel+0x874>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d125      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x7d8>
 8005c80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11f      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a31      	ldr	r2, [pc, #196]	; (8005d58 <HAL_ADC_ConfigChannel+0x864>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d104      	bne.n	8005ca0 <HAL_ADC_ConfigChannel+0x7ac>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <HAL_ADC_ConfigChannel+0x878>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d047      	beq.n	8005d30 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ca8:	d004      	beq.n	8005cb4 <HAL_ADC_ConfigChannel+0x7c0>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2a      	ldr	r2, [pc, #168]	; (8005d58 <HAL_ADC_ConfigChannel+0x864>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0x7c4>
 8005cb4:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <HAL_ADC_ConfigChannel+0x868>)
 8005cb6:	e000      	b.n	8005cba <HAL_ADC_ConfigChannel+0x7c6>
 8005cb8:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <HAL_ADC_ConfigChannel+0x854>)
 8005cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7ff f82c 	bl	8004d22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cca:	e031      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a27      	ldr	r2, [pc, #156]	; (8005d70 <HAL_ADC_ConfigChannel+0x87c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d12d      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d127      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <HAL_ADC_ConfigChannel+0x864>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x80c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <HAL_ADC_ConfigChannel+0x864>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x810>
 8005d00:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_ADC_ConfigChannel+0x868>)
 8005d02:	e000      	b.n	8005d06 <HAL_ADC_ConfigChannel+0x812>
 8005d04:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <HAL_ADC_ConfigChannel+0x854>)
 8005d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7ff f806 	bl	8004d22 <LL_ADC_SetCommonPathInternalCh>
 8005d16:	e00c      	b.n	8005d32 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	f043 0220 	orr.w	r2, r3, #32
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005d2a:	e002      	b.n	8005d32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	37d8      	adds	r7, #216	; 0xd8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	50000700 	.word	0x50000700
 8005d4c:	c3210000 	.word	0xc3210000
 8005d50:	90c00010 	.word	0x90c00010
 8005d54:	50000600 	.word	0x50000600
 8005d58:	50000100 	.word	0x50000100
 8005d5c:	50000300 	.word	0x50000300
 8005d60:	20000030 	.word	0x20000030
 8005d64:	053e2d63 	.word	0x053e2d63
 8005d68:	c7520000 	.word	0xc7520000
 8005d6c:	50000500 	.word	0x50000500
 8005d70:	cb840000 	.word	0xcb840000

08005d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff f995 	bl	80050b0 <LL_ADC_IsEnabled>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d14d      	bne.n	8005e28 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <ADC_Enable+0xc0>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00d      	beq.n	8005db6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9e:	f043 0210 	orr.w	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005daa:	f043 0201 	orr.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e039      	b.n	8005e2a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff f950 	bl	8005060 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005dc0:	f7fe ff6e 	bl	8004ca0 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dc6:	e028      	b.n	8005e1a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff f96f 	bl	80050b0 <LL_ADC_IsEnabled>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff f93f 	bl	8005060 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005de2:	f7fe ff5d 	bl	8004ca0 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d914      	bls.n	8005e1a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d00d      	beq.n	8005e1a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e02:	f043 0210 	orr.w	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0e:	f043 0201 	orr.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e007      	b.n	8005e2a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d1cf      	bne.n	8005dc8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	8000003f 	.word	0x8000003f

08005e38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff f946 	bl	80050d6 <LL_ADC_IsDisableOngoing>
 8005e4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff f92d 	bl	80050b0 <LL_ADC_IsEnabled>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d047      	beq.n	8005eec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d144      	bne.n	8005eec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 030d 	and.w	r3, r3, #13
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10c      	bne.n	8005e8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f907 	bl	8005088 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e82:	f7fe ff0d 	bl	8004ca0 <HAL_GetTick>
 8005e86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e88:	e029      	b.n	8005ede <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	f043 0210 	orr.w	r2, r3, #16
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9a:	f043 0201 	orr.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e023      	b.n	8005eee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ea6:	f7fe fefb 	bl	8004ca0 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d914      	bls.n	8005ede <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	f043 0210 	orr.w	r2, r3, #16
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed2:	f043 0201 	orr.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e007      	b.n	8005eee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1dc      	bne.n	8005ea6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d14b      	bne.n	8005fa8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d021      	beq.n	8005f6e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe ffb6 	bl	8004ea0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d032      	beq.n	8005fa0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d12b      	bne.n	8005fa0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11f      	bne.n	8005fa0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f6c:	e018      	b.n	8005fa0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d111      	bne.n	8005fa0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f98:	f043 0201 	orr.w	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7fd f987 	bl	80032b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005fa6:	e00e      	b.n	8005fc6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff fa93 	bl	80054e0 <HAL_ADC_ErrorCallback>
}
 8005fba:	e004      	b.n	8005fc6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
}
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fa75 	bl	80054cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006008:	f043 0204 	orr.w	r2, r3, #4
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fa65 	bl	80054e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006016:	bf00      	nop
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <LL_ADC_IsEnabled>:
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <LL_ADC_IsEnabled+0x18>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <LL_ADC_IsEnabled+0x1a>
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_ADC_StartCalibration>:
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006056:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006060:	4313      	orrs	r3, r2
 8006062:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	609a      	str	r2, [r3, #8]
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <LL_ADC_IsCalibrationOnGoing>:
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800608a:	d101      	bne.n	8006090 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_ADC_REG_StartConversion>:
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060b2:	f043 0204 	orr.w	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	609a      	str	r2, [r3, #8]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d101      	bne.n	80060de <LL_ADC_REG_IsConversionOngoing+0x18>
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_ADCEx_Calibration_Start+0x1c>
 8006104:	2302      	movs	r3, #2
 8006106:	e04d      	b.n	80061a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fe91 	bl	8005e38 <ADC_Disable>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d136      	bne.n	800618e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	f043 0202 	orr.w	r2, r3, #2
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff ff82 	bl	8006044 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006140:	e014      	b.n	800616c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3301      	adds	r3, #1
 8006146:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4a18      	ldr	r2, [pc, #96]	; (80061ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d90d      	bls.n	800616c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f023 0312 	bic.w	r3, r3, #18
 8006158:	f043 0210 	orr.w	r2, r3, #16
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e01b      	b.n	80061a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ff80 	bl	8006076 <LL_ADC_IsCalibrationOnGoing>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e2      	bne.n	8006142 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	f023 0303 	bic.w	r3, r3, #3
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	65da      	str	r2, [r3, #92]	; 0x5c
 800618c:	e005      	b.n	800619a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006192:	f043 0210 	orr.w	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	0004de01 	.word	0x0004de01

080061b0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b0a2      	sub	sp, #136	; 0x88
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff ff80 	bl	80060c6 <LL_ADC_REG_IsConversionOngoing>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
 80061ce:	e096      	b.n	80062fe <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80061da:	2302      	movs	r3, #2
 80061dc:	e08f      	b.n	80062fe <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80061e6:	2300      	movs	r3, #0
 80061e8:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80061ea:	2300      	movs	r3, #0
 80061ec:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061f6:	d102      	bne.n	80061fe <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80061f8:	4b43      	ldr	r3, [pc, #268]	; (8006308 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e009      	b.n	8006212 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a42      	ldr	r2, [pc, #264]	; (800630c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d102      	bne.n	800620e <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 8006208:	4b41      	ldr	r3, [pc, #260]	; (8006310 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e001      	b.n	8006212 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	f043 0220 	orr.w	r2, r3, #32
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e066      	b.n	80062fe <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fd9f 	bl	8005d74 <ADC_Enable>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 800623c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006240:	2b00      	cmp	r3, #0
 8006242:	d107      	bne.n	8006254 <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fd93 	bl	8005d74 <ADC_Enable>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006254:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006258:	2b00      	cmp	r3, #0
 800625a:	d14a      	bne.n	80062f2 <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	4a26      	ldr	r2, [pc, #152]	; (8006314 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	4a25      	ldr	r2, [pc, #148]	; (8006318 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8006284:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	4a24      	ldr	r2, [pc, #144]	; (800631c <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 800628c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006296:	d004      	beq.n	80062a2 <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 80062a4:	e000      	b.n	80062a8 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 80062a6:	4b1f      	ldr	r3, [pc, #124]	; (8006324 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 80062a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	221c      	movs	r2, #28
 80062b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0210 	orr.w	r2, r2, #16
 80062ca:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062d4:	330c      	adds	r3, #12
 80062d6:	4619      	mov	r1, r3
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f000 fce2 	bl	8006ca4 <HAL_DMA_Start_IT>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fed7 	bl	800609e <LL_ADC_REG_StartConversion>
 80062f0:	e003      	b.n	80062fa <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80062fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3788      	adds	r7, #136	; 0x88
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	50000100 	.word	0x50000100
 800630c:	50000400 	.word	0x50000400
 8006310:	50000500 	.word	0x50000500
 8006314:	08005ef7 	.word	0x08005ef7
 8006318:	08005fcf 	.word	0x08005fcf
 800631c:	08005feb 	.word	0x08005feb
 8006320:	50000300 	.word	0x50000300
 8006324:	50000700 	.word	0x50000700

08006328 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b0a1      	sub	sp, #132	; 0x84
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006342:	2302      	movs	r3, #2
 8006344:	e0e7      	b.n	8006516 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800634e:	2300      	movs	r3, #0
 8006350:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006352:	2300      	movs	r3, #0
 8006354:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635e:	d102      	bne.n	8006366 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006360:	4b6f      	ldr	r3, [pc, #444]	; (8006520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	e009      	b.n	800637a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6e      	ldr	r2, [pc, #440]	; (8006524 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d102      	bne.n	8006376 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006370:	4b6d      	ldr	r3, [pc, #436]	; (8006528 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	e001      	b.n	800637a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	f043 0220 	orr.w	r2, r3, #32
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0be      	b.n	8006516 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fe93 	bl	80060c6 <LL_ADC_REG_IsConversionOngoing>
 80063a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fe8d 	bl	80060c6 <LL_ADC_REG_IsConversionOngoing>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 80a0 	bne.w	80064f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80063b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 809c 	bne.w	80064f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063c4:	d004      	beq.n	80063d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a55      	ldr	r2, [pc, #340]	; (8006520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d101      	bne.n	80063d4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80063d0:	4b56      	ldr	r3, [pc, #344]	; (800652c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80063d2:	e000      	b.n	80063d6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80063d4:	4b56      	ldr	r3, [pc, #344]	; (8006530 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80063d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04b      	beq.n	8006478 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80063e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6859      	ldr	r1, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063f2:	035b      	lsls	r3, r3, #13
 80063f4:	430b      	orrs	r3, r1
 80063f6:	431a      	orrs	r2, r3
 80063f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006404:	d004      	beq.n	8006410 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a45      	ldr	r2, [pc, #276]	; (8006520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10f      	bne.n	8006430 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006410:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006414:	f7ff fe03 	bl	800601e <LL_ADC_IsEnabled>
 8006418:	4604      	mov	r4, r0
 800641a:	4841      	ldr	r0, [pc, #260]	; (8006520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800641c:	f7ff fdff 	bl	800601e <LL_ADC_IsEnabled>
 8006420:	4603      	mov	r3, r0
 8006422:	4323      	orrs	r3, r4
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e012      	b.n	8006456 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006430:	483c      	ldr	r0, [pc, #240]	; (8006524 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006432:	f7ff fdf4 	bl	800601e <LL_ADC_IsEnabled>
 8006436:	4604      	mov	r4, r0
 8006438:	483b      	ldr	r0, [pc, #236]	; (8006528 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800643a:	f7ff fdf0 	bl	800601e <LL_ADC_IsEnabled>
 800643e:	4603      	mov	r3, r0
 8006440:	431c      	orrs	r4, r3
 8006442:	483c      	ldr	r0, [pc, #240]	; (8006534 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006444:	f7ff fdeb 	bl	800601e <LL_ADC_IsEnabled>
 8006448:	4603      	mov	r3, r0
 800644a:	4323      	orrs	r3, r4
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d056      	beq.n	8006508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800645a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006462:	f023 030f 	bic.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	6892      	ldr	r2, [r2, #8]
 800646e:	430a      	orrs	r2, r1
 8006470:	431a      	orrs	r2, r3
 8006472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006474:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006476:	e047      	b.n	8006508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006482:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800648c:	d004      	beq.n	8006498 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a23      	ldr	r2, [pc, #140]	; (8006520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10f      	bne.n	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006498:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800649c:	f7ff fdbf 	bl	800601e <LL_ADC_IsEnabled>
 80064a0:	4604      	mov	r4, r0
 80064a2:	481f      	ldr	r0, [pc, #124]	; (8006520 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064a4:	f7ff fdbb 	bl	800601e <LL_ADC_IsEnabled>
 80064a8:	4603      	mov	r3, r0
 80064aa:	4323      	orrs	r3, r4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e012      	b.n	80064de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80064b8:	481a      	ldr	r0, [pc, #104]	; (8006524 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80064ba:	f7ff fdb0 	bl	800601e <LL_ADC_IsEnabled>
 80064be:	4604      	mov	r4, r0
 80064c0:	4819      	ldr	r0, [pc, #100]	; (8006528 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80064c2:	f7ff fdac 	bl	800601e <LL_ADC_IsEnabled>
 80064c6:	4603      	mov	r3, r0
 80064c8:	431c      	orrs	r4, r3
 80064ca:	481a      	ldr	r0, [pc, #104]	; (8006534 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80064cc:	f7ff fda7 	bl	800601e <LL_ADC_IsEnabled>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4323      	orrs	r3, r4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d012      	beq.n	8006508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80064e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80064ea:	f023 030f 	bic.w	r3, r3, #15
 80064ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80064f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064f2:	e009      	b.n	8006508 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006506:	e000      	b.n	800650a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006508:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006512:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006516:	4618      	mov	r0, r3
 8006518:	3784      	adds	r7, #132	; 0x84
 800651a:	46bd      	mov	sp, r7
 800651c:	bd90      	pop	{r4, r7, pc}
 800651e:	bf00      	nop
 8006520:	50000100 	.word	0x50000100
 8006524:	50000400 	.word	0x50000400
 8006528:	50000500 	.word	0x50000500
 800652c:	50000300 	.word	0x50000300
 8006530:	50000700 	.word	0x50000700
 8006534:	50000600 	.word	0x50000600

08006538 <__NVIC_SetPriorityGrouping>:
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <__NVIC_SetPriorityGrouping+0x44>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006554:	4013      	ands	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800656a:	4a04      	ldr	r2, [pc, #16]	; (800657c <__NVIC_SetPriorityGrouping+0x44>)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	60d3      	str	r3, [r2, #12]
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	e000ed00 	.word	0xe000ed00

08006580 <__NVIC_GetPriorityGrouping>:
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <__NVIC_GetPriorityGrouping+0x18>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	f003 0307 	and.w	r3, r3, #7
}
 800658e:	4618      	mov	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	e000ed00 	.word	0xe000ed00

0800659c <__NVIC_EnableIRQ>:
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db0b      	blt.n	80065c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	f003 021f 	and.w	r2, r3, #31
 80065b4:	4907      	ldr	r1, [pc, #28]	; (80065d4 <__NVIC_EnableIRQ+0x38>)
 80065b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	2001      	movs	r0, #1
 80065be:	fa00 f202 	lsl.w	r2, r0, r2
 80065c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	e000e100 	.word	0xe000e100

080065d8 <__NVIC_SetPriority>:
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db0a      	blt.n	8006602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	490c      	ldr	r1, [pc, #48]	; (8006624 <__NVIC_SetPriority+0x4c>)
 80065f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f6:	0112      	lsls	r2, r2, #4
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	440b      	add	r3, r1
 80065fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006600:	e00a      	b.n	8006618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	4908      	ldr	r1, [pc, #32]	; (8006628 <__NVIC_SetPriority+0x50>)
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	3b04      	subs	r3, #4
 8006610:	0112      	lsls	r2, r2, #4
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	440b      	add	r3, r1
 8006616:	761a      	strb	r2, [r3, #24]
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	e000e100 	.word	0xe000e100
 8006628:	e000ed00 	.word	0xe000ed00

0800662c <NVIC_EncodePriority>:
{
 800662c:	b480      	push	{r7}
 800662e:	b089      	sub	sp, #36	; 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f1c3 0307 	rsb	r3, r3, #7
 8006646:	2b04      	cmp	r3, #4
 8006648:	bf28      	it	cs
 800664a:	2304      	movcs	r3, #4
 800664c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3304      	adds	r3, #4
 8006652:	2b06      	cmp	r3, #6
 8006654:	d902      	bls.n	800665c <NVIC_EncodePriority+0x30>
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3b03      	subs	r3, #3
 800665a:	e000      	b.n	800665e <NVIC_EncodePriority+0x32>
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43da      	mvns	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	401a      	ands	r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006674:	f04f 31ff 	mov.w	r1, #4294967295
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	43d9      	mvns	r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006684:	4313      	orrs	r3, r2
}
 8006686:	4618      	mov	r0, r3
 8006688:	3724      	adds	r7, #36	; 0x24
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <SysTick_Config>:
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3b01      	subs	r3, #1
 80066a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a4:	d301      	bcc.n	80066aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80066a6:	2301      	movs	r3, #1
 80066a8:	e00f      	b.n	80066ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066aa:	4a0a      	ldr	r2, [pc, #40]	; (80066d4 <SysTick_Config+0x40>)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066b2:	210f      	movs	r1, #15
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	f7ff ff8e 	bl	80065d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <SysTick_Config+0x40>)
 80066be:	2200      	movs	r2, #0
 80066c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066c2:	4b04      	ldr	r3, [pc, #16]	; (80066d4 <SysTick_Config+0x40>)
 80066c4:	2207      	movs	r2, #7
 80066c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	e000e010 	.word	0xe000e010

080066d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff ff29 	bl	8006538 <__NVIC_SetPriorityGrouping>
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	4603      	mov	r3, r0
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
 80066fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066fc:	f7ff ff40 	bl	8006580 <__NVIC_GetPriorityGrouping>
 8006700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	6978      	ldr	r0, [r7, #20]
 8006708:	f7ff ff90 	bl	800662c <NVIC_EncodePriority>
 800670c:	4602      	mov	r2, r0
 800670e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff ff5f 	bl	80065d8 <__NVIC_SetPriority>
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	4603      	mov	r3, r0
 800672a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800672c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ff33 	bl	800659c <__NVIC_EnableIRQ>
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ffa4 	bl	8006694 <SysTick_Config>
 800674c:	4603      	mov	r3, r0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e054      	b.n	8006814 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7f5b      	ldrb	r3, [r3, #29]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fa fec6 	bl	800150c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10c      	bne.n	80067a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a22      	ldr	r2, [pc, #136]	; (800681c <HAL_CRC_Init+0xc4>)
 8006794:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0218 	bic.w	r2, r2, #24
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	e00c      	b.n	80067c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6899      	ldr	r1, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f948 	bl	8006a48 <HAL_CRCEx_Polynomial_Set>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e028      	b.n	8006814 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	795b      	ldrb	r3, [r3, #5]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f04f 32ff 	mov.w	r2, #4294967295
 80067d2:	611a      	str	r2, [r3, #16]
 80067d4:	e004      	b.n	80067e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6912      	ldr	r2, [r2, #16]
 80067de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695a      	ldr	r2, [r3, #20]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	04c11db7 	.word	0x04c11db7

08006820 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2202      	movs	r2, #2
 8006834:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0201 	orr.w	r2, r2, #1
 8006844:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d006      	beq.n	800685c <HAL_CRC_Calculate+0x3c>
 800684e:	2b03      	cmp	r3, #3
 8006850:	d829      	bhi.n	80068a6 <HAL_CRC_Calculate+0x86>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d019      	beq.n	800688a <HAL_CRC_Calculate+0x6a>
 8006856:	2b02      	cmp	r3, #2
 8006858:	d01e      	beq.n	8006898 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800685a:	e024      	b.n	80068a6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e00a      	b.n	8006878 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	3301      	adds	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d3f0      	bcc.n	8006862 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	613b      	str	r3, [r7, #16]
      break;
 8006888:	e00e      	b.n	80068a8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f812 	bl	80068b8 <CRC_Handle_8>
 8006894:	6138      	str	r0, [r7, #16]
      break;
 8006896:	e007      	b.n	80068a8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f899 	bl	80069d4 <CRC_Handle_16>
 80068a2:	6138      	str	r0, [r7, #16]
      break;
 80068a4:	e000      	b.n	80068a8 <HAL_CRC_Calculate+0x88>
      break;
 80068a6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80068ae:	693b      	ldr	r3, [r7, #16]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b089      	sub	sp, #36	; 0x24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e023      	b.n	8006912 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	4413      	add	r3, r2
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	3301      	adds	r3, #1
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	440b      	add	r3, r1
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80068e4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	3302      	adds	r3, #2
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	440b      	add	r3, r1
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80068f4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	3303      	adds	r3, #3
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	440b      	add	r3, r1
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006908:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800690a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	089b      	lsrs	r3, r3, #2
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	429a      	cmp	r2, r3
 800691a:	d3d6      	bcc.n	80068ca <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d04d      	beq.n	80069c2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4413      	add	r3, r2
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d116      	bne.n	8006978 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	b21a      	sxth	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	3301      	adds	r3, #1
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	440b      	add	r3, r1
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b21b      	sxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b21b      	sxth	r3, r3
 800696a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	8b7a      	ldrh	r2, [r7, #26]
 8006976:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b03      	cmp	r3, #3
 8006980:	d11f      	bne.n	80069c2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4413      	add	r3, r2
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	b21a      	sxth	r2, r3
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	3301      	adds	r3, #1
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	440b      	add	r3, r1
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b21b      	sxth	r3, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	b21b      	sxth	r3, r3
 80069a2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	8b7a      	ldrh	r2, [r7, #26]
 80069ae:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	3302      	adds	r3, #2
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4413      	add	r3, r2
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3724      	adds	r7, #36	; 0x24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e013      	b.n	8006a0e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	041a      	lsls	r2, r3, #16
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	3302      	adds	r3, #2
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	440b      	add	r3, r1
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d3e6      	bcc.n	80069e6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	4413      	add	r3, r2
 8006a30:	881a      	ldrh	r2, [r3, #0]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006a58:	231f      	movs	r3, #31
 8006a5a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006a5c:	bf00      	nop
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1e5a      	subs	r2, r3, #1
 8006a62:	613a      	str	r2, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d009      	beq.n	8006a7c <HAL_CRCEx_Polynomial_Set+0x34>
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b18      	cmp	r3, #24
 8006a80:	d846      	bhi.n	8006b10 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006b17 	.word	0x08006b17
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b11 	.word	0x08006b11
 8006a94:	08006b11 	.word	0x08006b11
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006b11 	.word	0x08006b11
 8006aa0:	08006b11 	.word	0x08006b11
 8006aa4:	08006b11 	.word	0x08006b11
 8006aa8:	08006b05 	.word	0x08006b05
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006b11 	.word	0x08006b11
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006af9 	.word	0x08006af9
 8006acc:	08006b11 	.word	0x08006b11
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b11 	.word	0x08006b11
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	08006aed 	.word	0x08006aed
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b06      	cmp	r3, #6
 8006af0:	d913      	bls.n	8006b1a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006af6:	e010      	b.n	8006b1a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b07      	cmp	r3, #7
 8006afc:	d90f      	bls.n	8006b1e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006b02:	e00c      	b.n	8006b1e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b0f      	cmp	r3, #15
 8006b08:	d90b      	bls.n	8006b22 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006b0e:	e008      	b.n	8006b22 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	e006      	b.n	8006b24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006b22:	bf00      	nop
  }
  if (status == HAL_OK)
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10d      	bne.n	8006b46 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f023 0118 	bic.w	r1, r3, #24
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e08d      	b.n	8006c82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4b47      	ldr	r3, [pc, #284]	; (8006c8c <HAL_DMA_Init+0x138>)
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d80f      	bhi.n	8006b92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <HAL_DMA_Init+0x13c>)
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4a45      	ldr	r2, [pc, #276]	; (8006c94 <HAL_DMA_Init+0x140>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	091b      	lsrs	r3, r3, #4
 8006b84:	009a      	lsls	r2, r3, #2
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a42      	ldr	r2, [pc, #264]	; (8006c98 <HAL_DMA_Init+0x144>)
 8006b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8006b90:	e00e      	b.n	8006bb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <HAL_DMA_Init+0x148>)
 8006b9a:	4413      	add	r3, r2
 8006b9c:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <HAL_DMA_Init+0x140>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	009a      	lsls	r2, r3, #2
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a3c      	ldr	r2, [pc, #240]	; (8006ca0 <HAL_DMA_Init+0x14c>)
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fabe 	bl	8007184 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c10:	d102      	bne.n	8006c18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d010      	beq.n	8006c58 <HAL_DMA_Init+0x104>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d80c      	bhi.n	8006c58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fade 	bl	8007200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c54:	605a      	str	r2, [r3, #4]
 8006c56:	e008      	b.n	8006c6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40020407 	.word	0x40020407
 8006c90:	bffdfff8 	.word	0xbffdfff8
 8006c94:	cccccccd 	.word	0xcccccccd
 8006c98:	40020000 	.word	0x40020000
 8006c9c:	bffdfbf8 	.word	0xbffdfbf8
 8006ca0:	40020400 	.word	0x40020400

08006ca4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_DMA_Start_IT+0x20>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e066      	b.n	8006d92 <HAL_DMA_Start_IT+0xee>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d155      	bne.n	8006d84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0201 	bic.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fa03 	bl	8007108 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 020e 	orr.w	r2, r2, #14
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e00f      	b.n	8006d3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0204 	bic.w	r2, r2, #4
 8006d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 020a 	orr.w	r2, r2, #10
 8006d3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0201 	orr.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e005      	b.n	8006d90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d005      	beq.n	8006dbe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2204      	movs	r2, #4
 8006db6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e037      	b.n	8006e2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 020e 	bic.w	r2, r2, #14
 8006dcc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ddc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f003 021f 	and.w	r2, r3, #31
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8006e00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00c      	beq.n	8006e2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d00d      	beq.n	8006e80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2204      	movs	r2, #4
 8006e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e047      	b.n	8006f10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 020e 	bic.w	r2, r2, #14
 8006e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb4:	f003 021f 	and.w	r2, r3, #31
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8006ec2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ecc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006eee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
    }
  }
  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d026      	beq.n	8006f94 <HAL_DMA_IRQHandler+0x7a>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d021      	beq.n	8006f94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0204 	bic.w	r2, r2, #4
 8006f6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f003 021f 	and.w	r2, r3, #31
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d071      	beq.n	800706e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006f92:	e06c      	b.n	800706e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d02e      	beq.n	8007006 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d029      	beq.n	8007006 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 020a 	bic.w	r2, r2, #10
 8006fce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	f003 021f 	and.w	r2, r3, #31
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8006fea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d038      	beq.n	800706e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007004:	e033      	b.n	800706e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2208      	movs	r2, #8
 8007010:	409a      	lsls	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d02a      	beq.n	8007070 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d025      	beq.n	8007070 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 020e 	bic.w	r2, r2, #14
 8007032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	f003 021f 	and.w	r2, r3, #31
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	2101      	movs	r1, #1
 8007042:	fa01 f202 	lsl.w	r2, r1, r2
 8007046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800706e:	bf00      	nop
 8007070:	bf00      	nop
}
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	460b      	mov	r3, r1
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_DMA_RegisterCallback+0x20>
 8007094:	2302      	movs	r3, #2
 8007096:	e031      	b.n	80070fc <HAL_DMA_RegisterCallback+0x84>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d120      	bne.n	80070ee <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d81a      	bhi.n	80070e8 <HAL_DMA_RegisterCallback+0x70>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <HAL_DMA_RegisterCallback+0x40>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070d1 	.word	0x080070d1
 80070c0:	080070d9 	.word	0x080070d9
 80070c4:	080070e1 	.word	0x080070e1
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80070ce:	e010      	b.n	80070f2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80070d6:	e00c      	b.n	80070f2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80070de:	e008      	b.n	80070f2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80070e6:	e004      	b.n	80070f2 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
        break;
 80070ec:	e001      	b.n	80070f2 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800711e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007124:	2b00      	cmp	r3, #0
 8007126:	d004      	beq.n	8007132 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007130:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f003 021f 	and.w	r2, r3, #31
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	2101      	movs	r1, #1
 8007140:	fa01 f202 	lsl.w	r2, r1, r2
 8007144:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b10      	cmp	r3, #16
 8007154:	d108      	bne.n	8007168 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007166:	e007      	b.n	8007178 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	4b16      	ldr	r3, [pc, #88]	; (80071ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d802      	bhi.n	800719e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007198:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e001      	b.n	80071a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800719e:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80071a0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	3b08      	subs	r3, #8
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80071b0:	fba2 2303 	umull	r2, r3, r2, r3
 80071b4:	091b      	lsrs	r3, r3, #4
 80071b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071bc:	089b      	lsrs	r3, r3, #2
 80071be:	009a      	lsls	r2, r3, #2
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4413      	add	r3, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80071ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2201      	movs	r2, #1
 80071d8:	409a      	lsls	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40020407 	.word	0x40020407
 80071f0:	40020800 	.word	0x40020800
 80071f4:	40020820 	.word	0x40020820
 80071f8:	cccccccd 	.word	0xcccccccd
 80071fc:	40020880 	.word	0x40020880

08007200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	461a      	mov	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a08      	ldr	r2, [pc, #32]	; (8007244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007222:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3b01      	subs	r3, #1
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	2201      	movs	r2, #1
 800722e:	409a      	lsls	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	1000823f 	.word	0x1000823f
 8007244:	40020940 	.word	0x40020940

08007248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007256:	e15a      	b.n	800750e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	2101      	movs	r1, #1
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	fa01 f303 	lsl.w	r3, r1, r3
 8007264:	4013      	ands	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 814c 	beq.w	8007508 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d005      	beq.n	8007288 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007284:	2b02      	cmp	r3, #2
 8007286:	d130      	bne.n	80072ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	2203      	movs	r2, #3
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
 8007298:	43db      	mvns	r3, r3
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4013      	ands	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072be:	2201      	movs	r2, #1
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	fa02 f303 	lsl.w	r3, r2, r3
 80072c6:	43db      	mvns	r3, r3
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4013      	ands	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	091b      	lsrs	r3, r3, #4
 80072d4:	f003 0201 	and.w	r2, r3, #1
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d017      	beq.n	8007326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	2203      	movs	r2, #3
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43db      	mvns	r3, r3
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4013      	ands	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d123      	bne.n	800737a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	08da      	lsrs	r2, r3, #3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3208      	adds	r2, #8
 800733a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	220f      	movs	r2, #15
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4013      	ands	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	08da      	lsrs	r2, r3, #3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3208      	adds	r2, #8
 8007374:	6939      	ldr	r1, [r7, #16]
 8007376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	2203      	movs	r2, #3
 8007386:	fa02 f303 	lsl.w	r3, r2, r3
 800738a:	43db      	mvns	r3, r3
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4013      	ands	r3, r2
 8007390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f003 0203 	and.w	r2, r3, #3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80a6 	beq.w	8007508 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073bc:	4b5b      	ldr	r3, [pc, #364]	; (800752c <HAL_GPIO_Init+0x2e4>)
 80073be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c0:	4a5a      	ldr	r2, [pc, #360]	; (800752c <HAL_GPIO_Init+0x2e4>)
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6613      	str	r3, [r2, #96]	; 0x60
 80073c8:	4b58      	ldr	r3, [pc, #352]	; (800752c <HAL_GPIO_Init+0x2e4>)
 80073ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073d4:	4a56      	ldr	r2, [pc, #344]	; (8007530 <HAL_GPIO_Init+0x2e8>)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	3302      	adds	r3, #2
 80073dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	220f      	movs	r2, #15
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4013      	ands	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073fe:	d01f      	beq.n	8007440 <HAL_GPIO_Init+0x1f8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a4c      	ldr	r2, [pc, #304]	; (8007534 <HAL_GPIO_Init+0x2ec>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d019      	beq.n	800743c <HAL_GPIO_Init+0x1f4>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a4b      	ldr	r2, [pc, #300]	; (8007538 <HAL_GPIO_Init+0x2f0>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <HAL_GPIO_Init+0x1f0>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a4a      	ldr	r2, [pc, #296]	; (800753c <HAL_GPIO_Init+0x2f4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00d      	beq.n	8007434 <HAL_GPIO_Init+0x1ec>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a49      	ldr	r2, [pc, #292]	; (8007540 <HAL_GPIO_Init+0x2f8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <HAL_GPIO_Init+0x1e8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a48      	ldr	r2, [pc, #288]	; (8007544 <HAL_GPIO_Init+0x2fc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d101      	bne.n	800742c <HAL_GPIO_Init+0x1e4>
 8007428:	2305      	movs	r3, #5
 800742a:	e00a      	b.n	8007442 <HAL_GPIO_Init+0x1fa>
 800742c:	2306      	movs	r3, #6
 800742e:	e008      	b.n	8007442 <HAL_GPIO_Init+0x1fa>
 8007430:	2304      	movs	r3, #4
 8007432:	e006      	b.n	8007442 <HAL_GPIO_Init+0x1fa>
 8007434:	2303      	movs	r3, #3
 8007436:	e004      	b.n	8007442 <HAL_GPIO_Init+0x1fa>
 8007438:	2302      	movs	r3, #2
 800743a:	e002      	b.n	8007442 <HAL_GPIO_Init+0x1fa>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <HAL_GPIO_Init+0x1fa>
 8007440:	2300      	movs	r3, #0
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	f002 0203 	and.w	r2, r2, #3
 8007448:	0092      	lsls	r2, r2, #2
 800744a:	4093      	lsls	r3, r2
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007452:	4937      	ldr	r1, [pc, #220]	; (8007530 <HAL_GPIO_Init+0x2e8>)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	089b      	lsrs	r3, r3, #2
 8007458:	3302      	adds	r3, #2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007460:	4b39      	ldr	r3, [pc, #228]	; (8007548 <HAL_GPIO_Init+0x300>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	43db      	mvns	r3, r3
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4013      	ands	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007484:	4a30      	ldr	r2, [pc, #192]	; (8007548 <HAL_GPIO_Init+0x300>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <HAL_GPIO_Init+0x300>)
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	43db      	mvns	r3, r3
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4013      	ands	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80074ae:	4a26      	ldr	r2, [pc, #152]	; (8007548 <HAL_GPIO_Init+0x300>)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80074b4:	4b24      	ldr	r3, [pc, #144]	; (8007548 <HAL_GPIO_Init+0x300>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	43db      	mvns	r3, r3
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4013      	ands	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_GPIO_Init+0x300>)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80074de:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <HAL_GPIO_Init+0x300>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	43db      	mvns	r3, r3
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4013      	ands	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007502:	4a11      	ldr	r2, [pc, #68]	; (8007548 <HAL_GPIO_Init+0x300>)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3301      	adds	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f ae9d 	bne.w	8007258 <HAL_GPIO_Init+0x10>
  }
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40021000 	.word	0x40021000
 8007530:	40010000 	.word	0x40010000
 8007534:	48000400 	.word	0x48000400
 8007538:	48000800 	.word	0x48000800
 800753c:	48000c00 	.word	0x48000c00
 8007540:	48001000 	.word	0x48001000
 8007544:	48001400 	.word	0x48001400
 8007548:	40010400 	.word	0x40010400

0800754c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e001      	b.n	800756e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	807b      	strh	r3, [r7, #2]
 8007588:	4613      	mov	r3, r2
 800758a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800758c:	787b      	ldrb	r3, [r7, #1]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007592:	887a      	ldrh	r2, [r7, #2]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007598:	e002      	b.n	80075a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800759a:	887a      	ldrh	r2, [r7, #2]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075be:	887a      	ldrh	r2, [r7, #2]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4013      	ands	r3, r2
 80075c4:	041a      	lsls	r2, r3, #16
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	43d9      	mvns	r1, r3
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	400b      	ands	r3, r1
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	619a      	str	r2, [r3, #24]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	4013      	ands	r3, r2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d006      	beq.n	8007604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075f6:	4a05      	ldr	r2, [pc, #20]	; (800760c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fb fdf2 	bl	80031e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40010400 	.word	0x40010400

08007610 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0be      	b.n	80077a0 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02e      	beq.n	80076cc <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a4d      	ldr	r2, [pc, #308]	; (80077a8 <HAL_HRTIM_Init+0x198>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10b      	bne.n	8007690 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007678:	4b4c      	ldr	r3, [pc, #304]	; (80077ac <HAL_HRTIM_Init+0x19c>)
 800767a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767c:	4a4b      	ldr	r2, [pc, #300]	; (80077ac <HAL_HRTIM_Init+0x19c>)
 800767e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007682:	6613      	str	r3, [r2, #96]	; 0x60
 8007684:	4b49      	ldr	r3, [pc, #292]	; (80077ac <HAL_HRTIM_Init+0x19c>)
 8007686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800769e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076b4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fa f96d 	bl	80019ac <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d012      	beq.n	8007704 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ec:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]
 8007718:	e03e      	b.n	8007798 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800771a:	7dfa      	ldrb	r2, [r7, #23]
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3318      	adds	r3, #24
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800772e:	7dfa      	ldrb	r2, [r7, #23]
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	331c      	adds	r3, #28
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007742:	7dfa      	ldrb	r2, [r7, #23]
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	3320      	adds	r3, #32
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007756:	7dfa      	ldrb	r2, [r7, #23]
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3324      	adds	r3, #36	; 0x24
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800776a:	7dfa      	ldrb	r2, [r7, #23]
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	3328      	adds	r3, #40	; 0x28
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800777e:	7dfa      	ldrb	r2, [r7, #23]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	3330      	adds	r3, #48	; 0x30
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	3301      	adds	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b06      	cmp	r3, #6
 800779c:	d9bd      	bls.n	800771a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40016800 	.word	0x40016800
 80077ac:	40021000 	.word	0x40021000

080077b0 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e045      	b.n	8007854 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d114      	bne.n	800780a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0202 	bic.w	r2, r2, #2
 80077f0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0201 	orr.w	r2, r2, #1
 8007804:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8007808:	e01f      	b.n	800784a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0202 	orr.w	r2, r2, #2
 800781a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8007826:	f023 010c 	bic.w	r1, r3, #12
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800786a:	f7fd fa19 	bl	8004ca0 <HAL_GetTick>
 800786e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007870:	e014      	b.n	800789c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d010      	beq.n	800789c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800787a:	f7fd fa11 	bl	8004ca0 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2207      	movs	r2, #7
 8007894:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e011      	b.n	80078c0 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80078a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ac:	d1e1      	bne.n	8007872 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d101      	bne.n	80078e4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80078e0:	2302      	movs	r3, #2
 80078e2:	e015      	b.n	8007910 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b06      	cmp	r3, #6
 80078f0:	d104      	bne.n	80078fc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 ff03 	bl	8008700 <HRTIM_MasterBase_Config>
 80078fa:	e004      	b.n	8007906 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 ff2c 	bl	800875e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_HRTIM_SimpleBaseStart+0x18>
 800792c:	2302      	movs	r3, #2
 800792e:	e01b      	b.n	8007968 <HAL_HRTIM_SimpleBaseStart+0x50>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6819      	ldr	r1, [r3, #0]
 8007946:	4a0b      	ldr	r2, [pc, #44]	; (8007974 <HAL_HRTIM_SimpleBaseStart+0x5c>)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	2000003c 	.word	0x2000003c

08007978 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d101      	bne.n	8007994 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
 8007992:	e01c      	b.n	80079ce <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_HRTIM_EventConfig+0x2a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e015      	b.n	80079ce <HAL_HRTIM_EventConfig+0x56>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 f934 	bl	8008c24 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d101      	bne.n	80079f0 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
 80079ee:	e025      	b.n	8007a3c <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_HRTIM_EventPrescalerConfig+0x28>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e01e      	b.n	8007a3c <HAL_HRTIM_EventPrescalerConfig+0x66>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8007a16:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	; 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d101      	bne.n	8007a64 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
 8007a62:	e1aa      	b.n	8007dba <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_HRTIM_FaultConfig+0x2a>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e1a3      	b.n	8007dba <HAL_HRTIM_FaultConfig+0x372>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a8a:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a94:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	2b1f      	cmp	r3, #31
 8007ab2:	f200 813f 	bhi.w	8007d34 <HAL_HRTIM_FaultConfig+0x2ec>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <HAL_HRTIM_FaultConfig+0x74>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007b3d 	.word	0x08007b3d
 8007ac0:	08007b8d 	.word	0x08007b8d
 8007ac4:	08007d35 	.word	0x08007d35
 8007ac8:	08007be3 	.word	0x08007be3
 8007acc:	08007d35 	.word	0x08007d35
 8007ad0:	08007d35 	.word	0x08007d35
 8007ad4:	08007d35 	.word	0x08007d35
 8007ad8:	08007c39 	.word	0x08007c39
 8007adc:	08007d35 	.word	0x08007d35
 8007ae0:	08007d35 	.word	0x08007d35
 8007ae4:	08007d35 	.word	0x08007d35
 8007ae8:	08007d35 	.word	0x08007d35
 8007aec:	08007d35 	.word	0x08007d35
 8007af0:	08007d35 	.word	0x08007d35
 8007af4:	08007d35 	.word	0x08007d35
 8007af8:	08007c8f 	.word	0x08007c8f
 8007afc:	08007d35 	.word	0x08007d35
 8007b00:	08007d35 	.word	0x08007d35
 8007b04:	08007d35 	.word	0x08007d35
 8007b08:	08007d35 	.word	0x08007d35
 8007b0c:	08007d35 	.word	0x08007d35
 8007b10:	08007d35 	.word	0x08007d35
 8007b14:	08007d35 	.word	0x08007d35
 8007b18:	08007d35 	.word	0x08007d35
 8007b1c:	08007d35 	.word	0x08007d35
 8007b20:	08007d35 	.word	0x08007d35
 8007b24:	08007d35 	.word	0x08007d35
 8007b28:	08007d35 	.word	0x08007d35
 8007b2c:	08007d35 	.word	0x08007d35
 8007b30:	08007d35 	.word	0x08007d35
 8007b34:	08007d35 	.word	0x08007d35
 8007b38:	08007cdf 	.word	0x08007cdf
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007b42:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	69fa      	ldr	r2, [r7, #28]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b62:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61fb      	str	r3, [r7, #28]
      break;
 8007b8a:	e0dc      	b.n	8007d46 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007b92:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bb4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	045b      	lsls	r3, r3, #17
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	61fb      	str	r3, [r7, #28]
      break;
 8007be0:	e0b1      	b.n	8007d46 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8007be8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	041b      	lsls	r3, r3, #16
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	049b      	lsls	r3, r3, #18
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c0a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	049b      	lsls	r3, r3, #18
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	61fb      	str	r3, [r7, #28]
      break;
 8007c36:	e086      	b.n	8007d46 <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007c3e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	069b      	lsls	r3, r3, #26
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c60:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	04db      	lsls	r3, r3, #19
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	061b      	lsls	r3, r3, #24
 8007c72:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	061b      	lsls	r3, r3, #24
 8007c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	61fb      	str	r3, [r7, #28]
      break;
 8007c8c:	e05b      	b.n	8007d46 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007c94:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cb4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
      break;
 8007cdc:	e033      	b.n	8007d46 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007ce4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	029b      	lsls	r3, r3, #10
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d06:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	055b      	lsls	r3, r3, #21
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
      break;
 8007d32:	e008      	b.n	8007d46 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2207      	movs	r2, #7
 8007d38:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007d44:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b07      	cmp	r3, #7
 8007d50:	d101      	bne.n	8007d56 <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e031      	b.n	8007dba <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007d60:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d72:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	f248 0380 	movw	r3, #32896	; 0x8080
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	430b      	orrs	r3, r1
 8007da4:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3724      	adds	r7, #36	; 0x24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop

08007dc8 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d101      	bne.n	8007de2 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007dde:	2302      	movs	r3, #2
 8007de0:	e025      	b.n	8007e2e <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e01e      	b.n	8007e2e <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e08:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d101      	bne.n	8007e58 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8007e54:	2302      	movs	r3, #2
 8007e56:	e0d7      	b.n	8008008 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e0d0      	b.n	8008008 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	2b1f      	cmp	r3, #31
 8007e7c:	f200 80aa 	bhi.w	8007fd4 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007f09 	.word	0x08007f09
 8007e8c:	08007f2b 	.word	0x08007f2b
 8007e90:	08007fd5 	.word	0x08007fd5
 8007e94:	08007f4d 	.word	0x08007f4d
 8007e98:	08007fd5 	.word	0x08007fd5
 8007e9c:	08007fd5 	.word	0x08007fd5
 8007ea0:	08007fd5 	.word	0x08007fd5
 8007ea4:	08007f6f 	.word	0x08007f6f
 8007ea8:	08007fd5 	.word	0x08007fd5
 8007eac:	08007fd5 	.word	0x08007fd5
 8007eb0:	08007fd5 	.word	0x08007fd5
 8007eb4:	08007fd5 	.word	0x08007fd5
 8007eb8:	08007fd5 	.word	0x08007fd5
 8007ebc:	08007fd5 	.word	0x08007fd5
 8007ec0:	08007fd5 	.word	0x08007fd5
 8007ec4:	08007f91 	.word	0x08007f91
 8007ec8:	08007fd5 	.word	0x08007fd5
 8007ecc:	08007fd5 	.word	0x08007fd5
 8007ed0:	08007fd5 	.word	0x08007fd5
 8007ed4:	08007fd5 	.word	0x08007fd5
 8007ed8:	08007fd5 	.word	0x08007fd5
 8007edc:	08007fd5 	.word	0x08007fd5
 8007ee0:	08007fd5 	.word	0x08007fd5
 8007ee4:	08007fd5 	.word	0x08007fd5
 8007ee8:	08007fd5 	.word	0x08007fd5
 8007eec:	08007fd5 	.word	0x08007fd5
 8007ef0:	08007fd5 	.word	0x08007fd5
 8007ef4:	08007fd5 	.word	0x08007fd5
 8007ef8:	08007fd5 	.word	0x08007fd5
 8007efc:	08007fd5 	.word	0x08007fd5
 8007f00:	08007fd5 	.word	0x08007fd5
 8007f04:	08007fb3 	.word	0x08007fb3
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f10:	f023 0203 	bic.w	r2, r3, #3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8007f28:	e05d      	b.n	8007fe6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	025b      	lsls	r3, r3, #9
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f46:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8007f4a:	e04c      	b.n	8007fe6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	045b      	lsls	r3, r3, #17
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f68:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8007f6c:	e03b      	b.n	8007fe6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	065b      	lsls	r3, r3, #25
 8007f80:	431a      	orrs	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8007f8e:	e02a      	b.n	8007fe6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007f98:	f023 0203 	bic.w	r2, r3, #3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8007fb0:	e019      	b.n	8007fe6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	025b      	lsls	r3, r3, #9
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fce:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8007fd2:	e008      	b.n	8007fe6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2207      	movs	r2, #7
 8007fd8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007fe4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b07      	cmp	r3, #7
 8007ff0:	d101      	bne.n	8007ff6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e008      	b.n	8008008 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d101      	bne.n	8008030 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
 800802e:	e0e3      	b.n	80081f8 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_HRTIM_FaultCounterConfig+0x2a>
 800803a:	2302      	movs	r3, #2
 800803c:	e0dc      	b.n	80081f8 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	3b01      	subs	r3, #1
 8008052:	2b1f      	cmp	r3, #31
 8008054:	f200 80b6 	bhi.w	80081c4 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	080080e1 	.word	0x080080e1
 8008064:	08008107 	.word	0x08008107
 8008068:	080081c5 	.word	0x080081c5
 800806c:	0800812d 	.word	0x0800812d
 8008070:	080081c5 	.word	0x080081c5
 8008074:	080081c5 	.word	0x080081c5
 8008078:	080081c5 	.word	0x080081c5
 800807c:	08008153 	.word	0x08008153
 8008080:	080081c5 	.word	0x080081c5
 8008084:	080081c5 	.word	0x080081c5
 8008088:	080081c5 	.word	0x080081c5
 800808c:	080081c5 	.word	0x080081c5
 8008090:	080081c5 	.word	0x080081c5
 8008094:	080081c5 	.word	0x080081c5
 8008098:	080081c5 	.word	0x080081c5
 800809c:	08008179 	.word	0x08008179
 80080a0:	080081c5 	.word	0x080081c5
 80080a4:	080081c5 	.word	0x080081c5
 80080a8:	080081c5 	.word	0x080081c5
 80080ac:	080081c5 	.word	0x080081c5
 80080b0:	080081c5 	.word	0x080081c5
 80080b4:	080081c5 	.word	0x080081c5
 80080b8:	080081c5 	.word	0x080081c5
 80080bc:	080081c5 	.word	0x080081c5
 80080c0:	080081c5 	.word	0x080081c5
 80080c4:	080081c5 	.word	0x080081c5
 80080c8:	080081c5 	.word	0x080081c5
 80080cc:	080081c5 	.word	0x080081c5
 80080d0:	080081c5 	.word	0x080081c5
 80080d4:	080081c5 	.word	0x080081c5
 80080d8:	080081c5 	.word	0x080081c5
 80080dc:	0800819f 	.word	0x0800819f
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80080e8:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	009a      	lsls	r2, r3, #2
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	01db      	lsls	r3, r3, #7
 80080f8:	431a      	orrs	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 8008104:	e067      	b.n	80081d6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800810e:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	029a      	lsls	r2, r3, #10
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	03db      	lsls	r3, r3, #15
 800811e:	431a      	orrs	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 800812a:	e054      	b.n	80081d6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008134:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	049a      	lsls	r2, r3, #18
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	05db      	lsls	r3, r3, #23
 8008144:	431a      	orrs	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8008150:	e041      	b.n	80081d6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800815a:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	069a      	lsls	r2, r3, #26
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	07db      	lsls	r3, r3, #31
 800816a:	431a      	orrs	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 8008176:	e02e      	b.n	80081d6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008180:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	009a      	lsls	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	01db      	lsls	r3, r3, #7
 8008190:	431a      	orrs	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 800819c:	e01b      	b.n	80081d6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80081a6:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	029a      	lsls	r2, r3, #10
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	03db      	lsls	r3, r3, #15
 80081b6:	431a      	orrs	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 80081c2:	e008      	b.n	80081d6 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2207      	movs	r2, #7
 80081c8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80081d4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b07      	cmp	r3, #7
 80081e0:	d101      	bne.n	80081e6 <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e008      	b.n	80081f8 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008222:	f023 0101 	bic.w	r1, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f003 0201 	and.w	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00e      	beq.n	800825e <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008248:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00e      	beq.n	8008286 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	041b      	lsls	r3, r3, #16
 8008278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008298:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	061b      	lsls	r3, r3, #24
 80082a0:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00d      	beq.n	80082d4 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082c0:	f023 0101 	bic.w	r1, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f003 0201 	and.w	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082e6:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d101      	bne.n	8008324 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
 8008322:	e07a      	b.n	800841a <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800832e:	2302      	movs	r3, #2
 8008330:	e073      	b.n	800841a <HAL_HRTIM_WaveformTimerConfig+0x112>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2202      	movs	r2, #2
 800833e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b06      	cmp	r3, #6
 8008346:	d104      	bne.n	8008352 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fa47 	bl	80087de <HRTIM_MasterWaveform_Config>
 8008350:	e004      	b.n	800835c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fade 	bl	8008918 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6819      	ldr	r1, [r3, #0]
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4403      	add	r3, r0
 800836e:	3320      	adds	r3, #32
 8008370:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6859      	ldr	r1, [r3, #4]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4403      	add	r3, r0
 8008384:	3324      	adds	r3, #36	; 0x24
 8008386:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6899      	ldr	r1, [r3, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4613      	mov	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4403      	add	r3, r0
 800839a:	3328      	adds	r3, #40	; 0x28
 800839c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68d9      	ldr	r1, [r3, #12]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	4613      	mov	r3, r2
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4403      	add	r3, r0
 80083b0:	332c      	adds	r3, #44	; 0x2c
 80083b2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6919      	ldr	r1, [r3, #16]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	4613      	mov	r3, r2
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4403      	add	r3, r0
 80083c6:	3330      	adds	r3, #48	; 0x30
 80083c8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fe51 	bl	8009074 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b06      	cmp	r3, #6
 80083d6:	d017      	beq.n	8008408 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d113      	bne.n	8008408 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	3301      	adds	r3, #1
 80083e8:	01db      	lsls	r3, r3, #7
 80083ea:	4413      	add	r3, r2
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f6:	025b      	lsls	r3, r3, #9
 80083f8:	68f9      	ldr	r1, [r7, #12]
 80083fa:	6809      	ldr	r1, [r1, #0]
 80083fc:	431a      	orrs	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3301      	adds	r3, #1
 8008402:	01db      	lsls	r3, r3, #7
 8008404:	440b      	add	r3, r1
 8008406:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d101      	bne.n	8008442 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800843e:	2302      	movs	r3, #2
 8008440:	e157      	b.n	80086f2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800844c:	2302      	movs	r3, #2
 800844e:	e150      	b.n	80086f2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b06      	cmp	r3, #6
 8008464:	d140      	bne.n	80084e8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3b01      	subs	r3, #1
 800846a:	2b07      	cmp	r3, #7
 800846c:	d82a      	bhi.n	80084c4 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	08008495 	.word	0x08008495
 8008478:	080084a1 	.word	0x080084a1
 800847c:	080084c5 	.word	0x080084c5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084c5 	.word	0x080084c5
 8008488:	080084c5 	.word	0x080084c5
 800848c:	080084c5 	.word	0x080084c5
 8008490:	080084b9 	.word	0x080084b9
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	61da      	str	r2, [r3, #28]
        break;
 800849e:	e01a      	b.n	80084d6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80084aa:	e014      	b.n	80084d6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80084b6:	e00e      	b.n	80084d6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80084c2:	e008      	b.n	80084d6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2207      	movs	r2, #7
 80084c8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 80084d4:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b07      	cmp	r3, #7
 80084e0:	f040 80fe 	bne.w	80086e0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e104      	b.n	80086f2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	2b07      	cmp	r3, #7
 80084ee:	f200 80e3 	bhi.w	80086b8 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008519 	.word	0x08008519
 80084fc:	0800852d 	.word	0x0800852d
 8008500:	080086b9 	.word	0x080086b9
 8008504:	080085e9 	.word	0x080085e9
 8008508:	080086b9 	.word	0x080086b9
 800850c:	080086b9 	.word	0x080086b9
 8008510:	080086b9 	.word	0x080086b9
 8008514:	080085fd 	.word	0x080085fd
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6819      	ldr	r1, [r3, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	01db      	lsls	r3, r3, #7
 8008524:	440b      	add	r3, r1
 8008526:	339c      	adds	r3, #156	; 0x9c
 8008528:	601a      	str	r2, [r3, #0]
        break;
 800852a:	e0d1      	b.n	80086d0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6819      	ldr	r1, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	01db      	lsls	r3, r3, #7
 8008538:	440b      	add	r3, r1
 800853a:	33a4      	adds	r3, #164	; 0xa4
 800853c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d03f      	beq.n	80085c6 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3301      	adds	r3, #1
 800854e:	01db      	lsls	r3, r3, #7
 8008550:	4413      	add	r3, r2
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	6811      	ldr	r1, [r2, #0]
 8008558:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3301      	adds	r3, #1
 8008560:	01db      	lsls	r3, r3, #7
 8008562:	440b      	add	r3, r1
 8008564:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3301      	adds	r3, #1
 800856e:	01db      	lsls	r3, r3, #7
 8008570:	4413      	add	r3, r2
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	6809      	ldr	r1, [r1, #0]
 800857c:	431a      	orrs	r2, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	3301      	adds	r3, #1
 8008582:	01db      	lsls	r3, r3, #7
 8008584:	440b      	add	r3, r1
 8008586:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008590:	d109      	bne.n	80085a6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	01db      	lsls	r3, r3, #7
 800859e:	440b      	add	r3, r1
 80085a0:	339c      	adds	r3, #156	; 0x9c
 80085a2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80085a4:	e091      	b.n	80086ca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085ae:	f040 808c 	bne.w	80086ca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6819      	ldr	r1, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	01db      	lsls	r3, r3, #7
 80085be:	440b      	add	r3, r1
 80085c0:	33a8      	adds	r3, #168	; 0xa8
 80085c2:	601a      	str	r2, [r3, #0]
         break;
 80085c4:	e081      	b.n	80086ca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3301      	adds	r3, #1
 80085ce:	01db      	lsls	r3, r3, #7
 80085d0:	4413      	add	r3, r2
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	6811      	ldr	r1, [r2, #0]
 80085d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3301      	adds	r3, #1
 80085e0:	01db      	lsls	r3, r3, #7
 80085e2:	440b      	add	r3, r1
 80085e4:	601a      	str	r2, [r3, #0]
         break;
 80085e6:	e070      	b.n	80086ca <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	440b      	add	r3, r1
 80085f6:	33a8      	adds	r3, #168	; 0xa8
 80085f8:	601a      	str	r2, [r3, #0]
        break;
 80085fa:	e069      	b.n	80086d0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6819      	ldr	r1, [r3, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	01db      	lsls	r3, r3, #7
 8008608:	440b      	add	r3, r1
 800860a:	33ac      	adds	r3, #172	; 0xac
 800860c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d03f      	beq.n	8008696 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	3301      	adds	r3, #1
 800861e:	01db      	lsls	r3, r3, #7
 8008620:	4413      	add	r3, r2
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	6811      	ldr	r1, [r2, #0]
 8008628:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	3301      	adds	r3, #1
 8008630:	01db      	lsls	r3, r3, #7
 8008632:	440b      	add	r3, r1
 8008634:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	3301      	adds	r3, #1
 800863e:	01db      	lsls	r3, r3, #7
 8008640:	4413      	add	r3, r2
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	6809      	ldr	r1, [r1, #0]
 800864e:	431a      	orrs	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3301      	adds	r3, #1
 8008654:	01db      	lsls	r3, r3, #7
 8008656:	440b      	add	r3, r1
 8008658:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008662:	d109      	bne.n	8008678 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6819      	ldr	r1, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	01db      	lsls	r3, r3, #7
 8008670:	440b      	add	r3, r1
 8008672:	339c      	adds	r3, #156	; 0x9c
 8008674:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008676:	e02a      	b.n	80086ce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008680:	d125      	bne.n	80086ce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6819      	ldr	r1, [r3, #0]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	01db      	lsls	r3, r3, #7
 800868e:	440b      	add	r3, r1
 8008690:	33a8      	adds	r3, #168	; 0xa8
 8008692:	601a      	str	r2, [r3, #0]
         break;
 8008694:	e01b      	b.n	80086ce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3301      	adds	r3, #1
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	4413      	add	r3, r2
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	6811      	ldr	r1, [r2, #0]
 80086a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3301      	adds	r3, #1
 80086b0:	01db      	lsls	r3, r3, #7
 80086b2:	440b      	add	r3, r1
 80086b4:	601a      	str	r2, [r3, #0]
         break;
 80086b6:	e00a      	b.n	80086ce <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2207      	movs	r2, #7
 80086bc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80086c8:	e002      	b.n	80086d0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80086ca:	bf00      	nop
 80086cc:	e000      	b.n	80086d0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80086ce:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b07      	cmp	r3, #7
 80086da:	d101      	bne.n	80086e0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e008      	b.n	80086f2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop

08008700 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f023 0307 	bic.w	r3, r3, #7
 8008718:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0318 	bic.w	r3, r3, #24
 800872a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	6852      	ldr	r2, [r2, #4]
 8008750:	619a      	str	r2, [r3, #24]
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	3301      	adds	r3, #1
 8008772:	01db      	lsls	r3, r3, #7
 8008774:	4413      	add	r3, r2
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f023 0307 	bic.w	r3, r3, #7
 8008780:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f023 0318 	bic.w	r3, r3, #24
 8008792:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3301      	adds	r3, #1
 80087a6:	01db      	lsls	r3, r3, #7
 80087a8:	4413      	add	r3, r2
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	01db      	lsls	r3, r3, #7
 80087ba:	440b      	add	r3, r1
 80087bc:	3394      	adds	r3, #148	; 0x94
 80087be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	01db      	lsls	r3, r3, #7
 80087cc:	440b      	add	r3, r1
 80087ce:	3398      	adds	r3, #152	; 0x98
 80087d0:	601a      	str	r2, [r3, #0]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80087f8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f023 0320 	bic.w	r3, r3, #32
 8008800:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008812:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b20      	cmp	r3, #32
 800881a:	d003      	beq.n	8008824 <HRTIM_MasterWaveform_Config+0x46>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d108      	bne.n	8008836 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800882a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f043 0320 	orr.w	r3, r3, #32
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e021      	b.n	800887a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	2b03      	cmp	r3, #3
 800883c:	d108      	bne.n	8008850 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008844:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e014      	b.n	800887a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b04      	cmp	r3, #4
 8008856:	d108      	bne.n	800886a <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	e007      	b.n	800887a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f023 0320 	bic.w	r3, r3, #32
 8008870:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008878:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008880:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	4313      	orrs	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008892:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80088a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80088b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80088c8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088dc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ee:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008918:	b480      	push	{r7}
 800891a:	b08b      	sub	sp, #44	; 0x2c
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3301      	adds	r3, #1
 800892c:	01db      	lsls	r3, r3, #7
 800892e:	4413      	add	r3, r2
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	6811      	ldr	r1, [r2, #0]
 8008936:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3301      	adds	r3, #1
 800893e:	01db      	lsls	r3, r3, #7
 8008940:	440b      	add	r3, r1
 8008942:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	3301      	adds	r3, #1
 800894c:	01db      	lsls	r3, r3, #7
 800894e:	4413      	add	r3, r2
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	01db      	lsls	r3, r3, #7
 800895c:	4413      	add	r3, r2
 800895e:	33e8      	adds	r3, #232	; 0xe8
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	01db      	lsls	r3, r3, #7
 800896c:	4413      	add	r3, r2
 800896e:	33e4      	adds	r3, #228	; 0xe4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800897c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	f023 0320 	bic.w	r3, r3, #32
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	4313      	orrs	r3, r2
 800898e:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	2b20      	cmp	r3, #32
 8008996:	d003      	beq.n	80089a0 <HRTIM_TimingUnitWaveform_Config+0x88>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d108      	bne.n	80089b2 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	f043 0320 	orr.w	r3, r3, #32
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
 80089b0:	e021      	b.n	80089f6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d108      	bne.n	80089cc <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ca:	e014      	b.n	80089f6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d108      	bne.n	80089e6 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
 80089e4:	e007      	b.n	80089f6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	f023 0320 	bic.w	r3, r3, #32
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a04:	4313      	orrs	r3, r2
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a16:	4313      	orrs	r3, r2
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a60:	d103      	bne.n	8008a6a <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008aaa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ac0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad8:	6a3a      	ldr	r2, [r7, #32]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ae2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008ae6:	d004      	beq.n	8008af2 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aec:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008af0:	d103      	bne.n	8008afa <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d108      	bne.n	8008b0c <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008b00:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b06:	6a3a      	ldr	r2, [r7, #32]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b12:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b18:	6a3a      	ldr	r2, [r7, #32]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d850      	bhi.n	8008bcc <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b49 	.word	0x08008b49
 8008b34:	08008b5f 	.word	0x08008b5f
 8008b38:	08008b75 	.word	0x08008b75
 8008b3c:	08008b8b 	.word	0x08008b8b
 8008b40:	08008ba1 	.word	0x08008ba1
 8008b44:	08008bb7 	.word	0x08008bb7
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b4e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	61fb      	str	r3, [r7, #28]
      break;
 8008b5c:	e037      	b.n	8008bce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b64:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	61fb      	str	r3, [r7, #28]
      break;
 8008b72:	e02c      	b.n	8008bce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008b7a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61fb      	str	r3, [r7, #28]
      break;
 8008b88:	e021      	b.n	8008bce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b90:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61fb      	str	r3, [r7, #28]
      break;
 8008b9e:	e016      	b.n	8008bce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ba6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	015b      	lsls	r3, r3, #5
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61fb      	str	r3, [r7, #28]
      break;
 8008bb4:	e00b      	b.n	8008bce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008bbc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	019b      	lsls	r3, r3, #6
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	61fb      	str	r3, [r7, #28]
      break;
 8008bca:	e000      	b.n	8008bce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8008bcc:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	01db      	lsls	r3, r3, #7
 8008bd8:	4413      	add	r3, r2
 8008bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bdc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	01db      	lsls	r3, r3, #7
 8008be6:	4413      	add	r3, r2
 8008be8:	33e8      	adds	r3, #232	; 0xe8
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	01db      	lsls	r3, r3, #7
 8008bf6:	4413      	add	r3, r2
 8008bf8:	33e4      	adds	r3, #228	; 0xe4
 8008bfa:	6a3a      	ldr	r2, [r7, #32]
 8008bfc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	01db      	lsls	r3, r3, #7
 8008c06:	4413      	add	r3, r2
 8008c08:	33d4      	adds	r3, #212	; 0xd4
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008c18:	bf00      	nop
 8008c1a:	372c      	adds	r7, #44	; 0x2c
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b089      	sub	sp, #36	; 0x24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8008c38:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008c42:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008c4c:	617b      	str	r3, [r7, #20]

  switch (Event)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b0a      	cmp	r3, #10
 8008c52:	f200 8208 	bhi.w	8009066 <HRTIM_EventConfig+0x442>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <HRTIM_EventConfig+0x38>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	08008ca9 	.word	0x08008ca9
 8008c64:	08008cff 	.word	0x08008cff
 8008c68:	08008d5b 	.word	0x08008d5b
 8008c6c:	08008db9 	.word	0x08008db9
 8008c70:	08008e17 	.word	0x08008e17
 8008c74:	08008e75 	.word	0x08008e75
 8008c78:	08008ed3 	.word	0x08008ed3
 8008c7c:	08008f37 	.word	0x08008f37
 8008c80:	08008f9b 	.word	0x08008f9b
 8008c84:	08009001 	.word	0x08009001
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008ca6:	e1df      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cae:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 0318 	and.w	r3, r3, #24
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008cfc:	e1b4      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8008d04:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	019b      	lsls	r3, r3, #6
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	019b      	lsls	r3, r3, #6
 8008d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	019b      	lsls	r3, r3, #6
 8008d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	019b      	lsls	r3, r3, #6
 8008d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008d58:	e186      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d60:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	031b      	lsls	r3, r3, #12
 8008d68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	031b      	lsls	r3, r3, #12
 8008d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7c:	69fa      	ldr	r2, [r7, #28]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	031b      	lsls	r3, r3, #12
 8008d88:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	031b      	lsls	r3, r3, #12
 8008da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008db6:	e157      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 8008dbe:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	049b      	lsls	r3, r3, #18
 8008dc6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	049b      	lsls	r3, r3, #18
 8008dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	049b      	lsls	r3, r3, #18
 8008de6:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	049b      	lsls	r3, r3, #18
 8008e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008e14:	e128      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008e1c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	061b      	lsls	r3, r3, #24
 8008e24:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	061b      	lsls	r3, r3, #24
 8008e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	061b      	lsls	r3, r3, #24
 8008e44:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	061b      	lsls	r3, r3, #24
 8008e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008e72:	e0f9      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f023 031f 	bic.w	r3, r3, #31
 8008e7a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0318 	and.w	r3, r3, #24
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f023 030f 	bic.w	r3, r3, #15
 8008eac:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008ed0:	e0ca      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8008ed8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	019b      	lsls	r3, r3, #6
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	019b      	lsls	r3, r3, #6
 8008eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	019b      	lsls	r3, r3, #6
 8008efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8008f0e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008f34:	e098      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8008f3c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	031b      	lsls	r3, r3, #12
 8008f44:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	031b      	lsls	r3, r3, #12
 8008f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	031b      	lsls	r3, r3, #12
 8008f64:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f74:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	031b      	lsls	r3, r3, #12
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008f98:	e066      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8008fa0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	049b      	lsls	r3, r3, #18
 8008fa8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	049b      	lsls	r3, r3, #18
 8008fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	049b      	lsls	r3, r3, #18
 8008fc8:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8008fd8:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	049b      	lsls	r3, r3, #18
 8008fe0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008ffe:	e033      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8009006:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	061b      	lsls	r3, r3, #24
 800900e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4313      	orrs	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	4313      	orrs	r3, r2
 8009026:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	061b      	lsls	r3, r3, #24
 800902e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	4313      	orrs	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800903e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8009064:	e000      	b.n	8009068 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8009066:	bf00      	nop
  }
}
 8009068:	bf00      	nop
 800906a:	3724      	adds	r7, #36	; 0x24
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b06      	cmp	r3, #6
 8009082:	d85e      	bhi.n	8009142 <HRTIM_ForceRegistersUpdate+0xce>
 8009084:	a201      	add	r2, pc, #4	; (adr r2, 800908c <HRTIM_ForceRegistersUpdate+0x18>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	080090bf 	.word	0x080090bf
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090eb 	.word	0x080090eb
 8009098:	08009101 	.word	0x08009101
 800909c:	08009117 	.word	0x08009117
 80090a0:	0800912d 	.word	0x0800912d
 80090a4:	080090a9 	.word	0x080090a9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090bc:	e042      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0202 	orr.w	r2, r2, #2
 80090ce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090d2:	e037      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0204 	orr.w	r2, r2, #4
 80090e4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090e8:	e02c      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0208 	orr.w	r2, r2, #8
 80090fa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090fe:	e021      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0210 	orr.w	r2, r2, #16
 8009110:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009114:	e016      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0220 	orr.w	r2, r2, #32
 8009126:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800912a:	e00b      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800913c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009140:	e000      	b.n	8009144 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8009142:	bf00      	nop
  }
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d141      	bne.n	80091e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800915e:	4b4b      	ldr	r3, [pc, #300]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916a:	d131      	bne.n	80091d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800916c:	4b47      	ldr	r3, [pc, #284]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800916e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009172:	4a46      	ldr	r2, [pc, #280]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800917c:	4b43      	ldr	r3, [pc, #268]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009184:	4a41      	ldr	r2, [pc, #260]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800918a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800918c:	4b40      	ldr	r3, [pc, #256]	; (8009290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2232      	movs	r2, #50	; 0x32
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	4a3f      	ldr	r2, [pc, #252]	; (8009294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009198:	fba2 2303 	umull	r2, r3, r2, r3
 800919c:	0c9b      	lsrs	r3, r3, #18
 800919e:	3301      	adds	r3, #1
 80091a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091a2:	e002      	b.n	80091aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091aa:	4b38      	ldr	r3, [pc, #224]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b6:	d102      	bne.n	80091be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f2      	bne.n	80091a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80091be:	4b33      	ldr	r3, [pc, #204]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ca:	d158      	bne.n	800927e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e057      	b.n	8009280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091d0:	4b2e      	ldr	r3, [pc, #184]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d6:	4a2d      	ldr	r2, [pc, #180]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80091e0:	e04d      	b.n	800927e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091e8:	d141      	bne.n	800926e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80091ea:	4b28      	ldr	r3, [pc, #160]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f6:	d131      	bne.n	800925c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091f8:	4b24      	ldr	r3, [pc, #144]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fe:	4a23      	ldr	r2, [pc, #140]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009208:	4b20      	ldr	r3, [pc, #128]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009210:	4a1e      	ldr	r2, [pc, #120]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009218:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2232      	movs	r2, #50	; 0x32
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009224:	fba2 2303 	umull	r2, r3, r2, r3
 8009228:	0c9b      	lsrs	r3, r3, #18
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800922e:	e002      	b.n	8009236 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3b01      	subs	r3, #1
 8009234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009236:	4b15      	ldr	r3, [pc, #84]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800923e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009242:	d102      	bne.n	800924a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1f2      	bne.n	8009230 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009256:	d112      	bne.n	800927e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e011      	b.n	8009280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800925c:	4b0b      	ldr	r3, [pc, #44]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800925e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009262:	4a0a      	ldr	r2, [pc, #40]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800926c:	e007      	b.n	800927e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009276:	4a05      	ldr	r2, [pc, #20]	; (800928c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800927c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	40007000 	.word	0x40007000
 8009290:	20000030 	.word	0x20000030
 8009294:	431bde83 	.word	0x431bde83

08009298 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800929c:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80092a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092a6:	6093      	str	r3, [r2, #8]
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40007000 	.word	0x40007000

080092b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e306      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d075      	beq.n	80093c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092d6:	4b97      	ldr	r3, [pc, #604]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 030c 	and.w	r3, r3, #12
 80092de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80092e0:	4b94      	ldr	r3, [pc, #592]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	2b0c      	cmp	r3, #12
 80092ee:	d102      	bne.n	80092f6 <HAL_RCC_OscConfig+0x3e>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d002      	beq.n	80092fc <HAL_RCC_OscConfig+0x44>
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d10b      	bne.n	8009314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092fc:	4b8d      	ldr	r3, [pc, #564]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d05b      	beq.n	80093c0 <HAL_RCC_OscConfig+0x108>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d157      	bne.n	80093c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e2e1      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800931c:	d106      	bne.n	800932c <HAL_RCC_OscConfig+0x74>
 800931e:	4b85      	ldr	r3, [pc, #532]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a84      	ldr	r2, [pc, #528]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	e01d      	b.n	8009368 <HAL_RCC_OscConfig+0xb0>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009334:	d10c      	bne.n	8009350 <HAL_RCC_OscConfig+0x98>
 8009336:	4b7f      	ldr	r3, [pc, #508]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a7e      	ldr	r2, [pc, #504]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800933c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	4b7c      	ldr	r3, [pc, #496]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a7b      	ldr	r2, [pc, #492]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	e00b      	b.n	8009368 <HAL_RCC_OscConfig+0xb0>
 8009350:	4b78      	ldr	r3, [pc, #480]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a77      	ldr	r2, [pc, #476]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	4b75      	ldr	r3, [pc, #468]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a74      	ldr	r2, [pc, #464]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d013      	beq.n	8009398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009370:	f7fb fc96 	bl	8004ca0 <HAL_GetTick>
 8009374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009378:	f7fb fc92 	bl	8004ca0 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b64      	cmp	r3, #100	; 0x64
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e2a6      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800938a:	4b6a      	ldr	r3, [pc, #424]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0f0      	beq.n	8009378 <HAL_RCC_OscConfig+0xc0>
 8009396:	e014      	b.n	80093c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009398:	f7fb fc82 	bl	8004ca0 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093a0:	f7fb fc7e 	bl	8004ca0 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b64      	cmp	r3, #100	; 0x64
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e292      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093b2:	4b60      	ldr	r3, [pc, #384]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f0      	bne.n	80093a0 <HAL_RCC_OscConfig+0xe8>
 80093be:	e000      	b.n	80093c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d075      	beq.n	80094ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093ce:	4b59      	ldr	r3, [pc, #356]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 030c 	and.w	r3, r3, #12
 80093d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093d8:	4b56      	ldr	r3, [pc, #344]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f003 0303 	and.w	r3, r3, #3
 80093e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b0c      	cmp	r3, #12
 80093e6:	d102      	bne.n	80093ee <HAL_RCC_OscConfig+0x136>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d002      	beq.n	80093f4 <HAL_RCC_OscConfig+0x13c>
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d11f      	bne.n	8009434 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093f4:	4b4f      	ldr	r3, [pc, #316]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <HAL_RCC_OscConfig+0x154>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e265      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800940c:	4b49      	ldr	r3, [pc, #292]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	061b      	lsls	r3, r3, #24
 800941a:	4946      	ldr	r1, [pc, #280]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800941c:	4313      	orrs	r3, r2
 800941e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009420:	4b45      	ldr	r3, [pc, #276]	; (8009538 <HAL_RCC_OscConfig+0x280>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f7fb fbef 	bl	8004c08 <HAL_InitTick>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d043      	beq.n	80094b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e251      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d023      	beq.n	8009484 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800943c:	4b3d      	ldr	r3, [pc, #244]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a3c      	ldr	r2, [pc, #240]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009448:	f7fb fc2a 	bl	8004ca0 <HAL_GetTick>
 800944c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800944e:	e008      	b.n	8009462 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009450:	f7fb fc26 	bl	8004ca0 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	2b02      	cmp	r3, #2
 800945c:	d901      	bls.n	8009462 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e23a      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009462:	4b34      	ldr	r3, [pc, #208]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0f0      	beq.n	8009450 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800946e:	4b31      	ldr	r3, [pc, #196]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	061b      	lsls	r3, r3, #24
 800947c:	492d      	ldr	r1, [pc, #180]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	604b      	str	r3, [r1, #4]
 8009482:	e01a      	b.n	80094ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009484:	4b2b      	ldr	r3, [pc, #172]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a2a      	ldr	r2, [pc, #168]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800948a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800948e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009490:	f7fb fc06 	bl	8004ca0 <HAL_GetTick>
 8009494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009496:	e008      	b.n	80094aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009498:	f7fb fc02 	bl	8004ca0 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d901      	bls.n	80094aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e216      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094aa:	4b22      	ldr	r3, [pc, #136]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1f0      	bne.n	8009498 <HAL_RCC_OscConfig+0x1e0>
 80094b6:	e000      	b.n	80094ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0308 	and.w	r3, r3, #8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d041      	beq.n	800954a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d01c      	beq.n	8009508 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094ce:	4b19      	ldr	r3, [pc, #100]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80094d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d4:	4a17      	ldr	r2, [pc, #92]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80094d6:	f043 0301 	orr.w	r3, r3, #1
 80094da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094de:	f7fb fbdf 	bl	8004ca0 <HAL_GetTick>
 80094e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80094e4:	e008      	b.n	80094f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094e6:	f7fb fbdb 	bl	8004ca0 <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d901      	bls.n	80094f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e1ef      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80094f8:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 80094fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0ef      	beq.n	80094e6 <HAL_RCC_OscConfig+0x22e>
 8009506:	e020      	b.n	800954a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 800950a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800950e:	4a09      	ldr	r2, [pc, #36]	; (8009534 <HAL_RCC_OscConfig+0x27c>)
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009518:	f7fb fbc2 	bl	8004ca0 <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800951e:	e00d      	b.n	800953c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009520:	f7fb fbbe 	bl	8004ca0 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d906      	bls.n	800953c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e1d2      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
 8009532:	bf00      	nop
 8009534:	40021000 	.word	0x40021000
 8009538:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800953c:	4b8c      	ldr	r3, [pc, #560]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 800953e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1ea      	bne.n	8009520 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0304 	and.w	r3, r3, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 80a6 	beq.w	80096a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009558:	2300      	movs	r3, #0
 800955a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800955c:	4b84      	ldr	r3, [pc, #528]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 800955e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_RCC_OscConfig+0x2b4>
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <HAL_RCC_OscConfig+0x2b6>
 800956c:	2300      	movs	r3, #0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00d      	beq.n	800958e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009572:	4b7f      	ldr	r3, [pc, #508]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	4a7e      	ldr	r2, [pc, #504]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800957c:	6593      	str	r3, [r2, #88]	; 0x58
 800957e:	4b7c      	ldr	r3, [pc, #496]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800958a:	2301      	movs	r3, #1
 800958c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800958e:	4b79      	ldr	r3, [pc, #484]	; (8009774 <HAL_RCC_OscConfig+0x4bc>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d118      	bne.n	80095cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800959a:	4b76      	ldr	r3, [pc, #472]	; (8009774 <HAL_RCC_OscConfig+0x4bc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a75      	ldr	r2, [pc, #468]	; (8009774 <HAL_RCC_OscConfig+0x4bc>)
 80095a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095a6:	f7fb fb7b 	bl	8004ca0 <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095ac:	e008      	b.n	80095c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095ae:	f7fb fb77 	bl	8004ca0 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e18b      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095c0:	4b6c      	ldr	r3, [pc, #432]	; (8009774 <HAL_RCC_OscConfig+0x4bc>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0f0      	beq.n	80095ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d108      	bne.n	80095e6 <HAL_RCC_OscConfig+0x32e>
 80095d4:	4b66      	ldr	r3, [pc, #408]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80095d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095da:	4a65      	ldr	r2, [pc, #404]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80095dc:	f043 0301 	orr.w	r3, r3, #1
 80095e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095e4:	e024      	b.n	8009630 <HAL_RCC_OscConfig+0x378>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	d110      	bne.n	8009610 <HAL_RCC_OscConfig+0x358>
 80095ee:	4b60      	ldr	r3, [pc, #384]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f4:	4a5e      	ldr	r2, [pc, #376]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80095f6:	f043 0304 	orr.w	r3, r3, #4
 80095fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095fe:	4b5c      	ldr	r3, [pc, #368]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009604:	4a5a      	ldr	r2, [pc, #360]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009606:	f043 0301 	orr.w	r3, r3, #1
 800960a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800960e:	e00f      	b.n	8009630 <HAL_RCC_OscConfig+0x378>
 8009610:	4b57      	ldr	r3, [pc, #348]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009616:	4a56      	ldr	r2, [pc, #344]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009620:	4b53      	ldr	r3, [pc, #332]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009626:	4a52      	ldr	r2, [pc, #328]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009628:	f023 0304 	bic.w	r3, r3, #4
 800962c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d016      	beq.n	8009666 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009638:	f7fb fb32 	bl	8004ca0 <HAL_GetTick>
 800963c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800963e:	e00a      	b.n	8009656 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009640:	f7fb fb2e 	bl	8004ca0 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	f241 3288 	movw	r2, #5000	; 0x1388
 800964e:	4293      	cmp	r3, r2
 8009650:	d901      	bls.n	8009656 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e140      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009656:	4b46      	ldr	r3, [pc, #280]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0ed      	beq.n	8009640 <HAL_RCC_OscConfig+0x388>
 8009664:	e015      	b.n	8009692 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009666:	f7fb fb1b 	bl	8004ca0 <HAL_GetTick>
 800966a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800966c:	e00a      	b.n	8009684 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800966e:	f7fb fb17 	bl	8004ca0 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	f241 3288 	movw	r2, #5000	; 0x1388
 800967c:	4293      	cmp	r3, r2
 800967e:	d901      	bls.n	8009684 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e129      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009684:	4b3a      	ldr	r3, [pc, #232]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1ed      	bne.n	800966e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009692:	7ffb      	ldrb	r3, [r7, #31]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d105      	bne.n	80096a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009698:	4b35      	ldr	r3, [pc, #212]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 800969a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969c:	4a34      	ldr	r2, [pc, #208]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 800969e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d03c      	beq.n	800972a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01c      	beq.n	80096f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80096b8:	4b2d      	ldr	r3, [pc, #180]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80096ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096be:	4a2c      	ldr	r2, [pc, #176]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80096c0:	f043 0301 	orr.w	r3, r3, #1
 80096c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c8:	f7fb faea 	bl	8004ca0 <HAL_GetTick>
 80096cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80096ce:	e008      	b.n	80096e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096d0:	f7fb fae6 	bl	8004ca0 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e0fa      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80096e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0ef      	beq.n	80096d0 <HAL_RCC_OscConfig+0x418>
 80096f0:	e01b      	b.n	800972a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096f2:	4b1f      	ldr	r3, [pc, #124]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80096f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096f8:	4a1d      	ldr	r2, [pc, #116]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 80096fa:	f023 0301 	bic.w	r3, r3, #1
 80096fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009702:	f7fb facd 	bl	8004ca0 <HAL_GetTick>
 8009706:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009708:	e008      	b.n	800971c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800970a:	f7fb fac9 	bl	8004ca0 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b02      	cmp	r3, #2
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e0dd      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800971c:	4b14      	ldr	r3, [pc, #80]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 800971e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1ef      	bne.n	800970a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 80d1 	beq.w	80098d6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009734:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f003 030c 	and.w	r3, r3, #12
 800973c:	2b0c      	cmp	r3, #12
 800973e:	f000 808b 	beq.w	8009858 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d15e      	bne.n	8009808 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a08      	ldr	r2, [pc, #32]	; (8009770 <HAL_RCC_OscConfig+0x4b8>)
 8009750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009756:	f7fb faa3 	bl	8004ca0 <HAL_GetTick>
 800975a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800975c:	e00c      	b.n	8009778 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800975e:	f7fb fa9f 	bl	8004ca0 <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	2b02      	cmp	r3, #2
 800976a:	d905      	bls.n	8009778 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e0b3      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
 8009770:	40021000 	.word	0x40021000
 8009774:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009778:	4b59      	ldr	r3, [pc, #356]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1ec      	bne.n	800975e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009784:	4b56      	ldr	r3, [pc, #344]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	4b56      	ldr	r3, [pc, #344]	; (80098e4 <HAL_RCC_OscConfig+0x62c>)
 800978a:	4013      	ands	r3, r2
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6a11      	ldr	r1, [r2, #32]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009794:	3a01      	subs	r2, #1
 8009796:	0112      	lsls	r2, r2, #4
 8009798:	4311      	orrs	r1, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800979e:	0212      	lsls	r2, r2, #8
 80097a0:	4311      	orrs	r1, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097a6:	0852      	lsrs	r2, r2, #1
 80097a8:	3a01      	subs	r2, #1
 80097aa:	0552      	lsls	r2, r2, #21
 80097ac:	4311      	orrs	r1, r2
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097b2:	0852      	lsrs	r2, r2, #1
 80097b4:	3a01      	subs	r2, #1
 80097b6:	0652      	lsls	r2, r2, #25
 80097b8:	4311      	orrs	r1, r2
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097be:	06d2      	lsls	r2, r2, #27
 80097c0:	430a      	orrs	r2, r1
 80097c2:	4947      	ldr	r1, [pc, #284]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097c8:	4b45      	ldr	r3, [pc, #276]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a44      	ldr	r2, [pc, #272]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 80097ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80097d4:	4b42      	ldr	r3, [pc, #264]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4a41      	ldr	r2, [pc, #260]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 80097da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e0:	f7fb fa5e 	bl	8004ca0 <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097e6:	e008      	b.n	80097fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e8:	f7fb fa5a 	bl	8004ca0 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e06e      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097fa:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f0      	beq.n	80097e8 <HAL_RCC_OscConfig+0x530>
 8009806:	e066      	b.n	80098d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009808:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a34      	ldr	r2, [pc, #208]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 800980e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009812:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009814:	4b32      	ldr	r3, [pc, #200]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	4a31      	ldr	r2, [pc, #196]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009820:	4b2f      	ldr	r3, [pc, #188]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	4a2e      	ldr	r2, [pc, #184]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 8009826:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800982a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800982e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009830:	f7fb fa36 	bl	8004ca0 <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009838:	f7fb fa32 	bl	8004ca0 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e046      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800984a:	4b25      	ldr	r3, [pc, #148]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f0      	bne.n	8009838 <HAL_RCC_OscConfig+0x580>
 8009856:	e03e      	b.n	80098d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e039      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009864:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <HAL_RCC_OscConfig+0x628>)
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f003 0203 	and.w	r2, r3, #3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	429a      	cmp	r2, r3
 8009876:	d12c      	bne.n	80098d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	3b01      	subs	r3, #1
 8009884:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009886:	429a      	cmp	r2, r3
 8009888:	d123      	bne.n	80098d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009896:	429a      	cmp	r2, r3
 8009898:	d11b      	bne.n	80098d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d113      	bne.n	80098d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b4:	085b      	lsrs	r3, r3, #1
 80098b6:	3b01      	subs	r3, #1
 80098b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d109      	bne.n	80098d2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	3b01      	subs	r3, #1
 80098cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d001      	beq.n	80098d6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	019f800c 	.word	0x019f800c

080098e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e11e      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009900:	4b91      	ldr	r3, [pc, #580]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 030f 	and.w	r3, r3, #15
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d910      	bls.n	8009930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800990e:	4b8e      	ldr	r3, [pc, #568]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f023 020f 	bic.w	r2, r3, #15
 8009916:	498c      	ldr	r1, [pc, #560]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	4313      	orrs	r3, r2
 800991c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800991e:	4b8a      	ldr	r3, [pc, #552]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 030f 	and.w	r3, r3, #15
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d001      	beq.n	8009930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e106      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d073      	beq.n	8009a24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2b03      	cmp	r3, #3
 8009942:	d129      	bne.n	8009998 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009944:	4b81      	ldr	r3, [pc, #516]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e0f4      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009954:	f000 f99e 	bl	8009c94 <RCC_GetSysClockFreqFromPLLSource>
 8009958:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4a7c      	ldr	r2, [pc, #496]	; (8009b50 <HAL_RCC_ClockConfig+0x268>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d93f      	bls.n	80099e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009962:	4b7a      	ldr	r3, [pc, #488]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009976:	2b00      	cmp	r3, #0
 8009978:	d033      	beq.n	80099e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800997e:	2b00      	cmp	r3, #0
 8009980:	d12f      	bne.n	80099e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009982:	4b72      	ldr	r3, [pc, #456]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800998a:	4a70      	ldr	r2, [pc, #448]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 800998c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009990:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009992:	2380      	movs	r3, #128	; 0x80
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	e024      	b.n	80099e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b02      	cmp	r3, #2
 800999e:	d107      	bne.n	80099b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099a0:	4b6a      	ldr	r3, [pc, #424]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d109      	bne.n	80099c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e0c6      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099b0:	4b66      	ldr	r3, [pc, #408]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e0be      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80099c0:	f000 f8ce 	bl	8009b60 <HAL_RCC_GetSysClockFreq>
 80099c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	4a61      	ldr	r2, [pc, #388]	; (8009b50 <HAL_RCC_ClockConfig+0x268>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d909      	bls.n	80099e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80099ce:	4b5f      	ldr	r3, [pc, #380]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099d6:	4a5d      	ldr	r2, [pc, #372]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 80099d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80099de:	2380      	movs	r3, #128	; 0x80
 80099e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099e2:	4b5a      	ldr	r3, [pc, #360]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f023 0203 	bic.w	r2, r3, #3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	4957      	ldr	r1, [pc, #348]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099f4:	f7fb f954 	bl	8004ca0 <HAL_GetTick>
 80099f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099fa:	e00a      	b.n	8009a12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099fc:	f7fb f950 	bl	8004ca0 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d901      	bls.n	8009a12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e095      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a12:	4b4e      	ldr	r3, [pc, #312]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f003 020c 	and.w	r2, r3, #12
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d1eb      	bne.n	80099fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d023      	beq.n	8009a78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a3c:	4b43      	ldr	r3, [pc, #268]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	4a42      	ldr	r2, [pc, #264]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009a46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0308 	and.w	r3, r3, #8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009a54:	4b3d      	ldr	r3, [pc, #244]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a5c:	4a3b      	ldr	r2, [pc, #236]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a64:	4b39      	ldr	r3, [pc, #228]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	4936      	ldr	r1, [pc, #216]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	608b      	str	r3, [r1, #8]
 8009a76:	e008      	b.n	8009a8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2b80      	cmp	r3, #128	; 0x80
 8009a7c:	d105      	bne.n	8009a8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009a7e:	4b33      	ldr	r3, [pc, #204]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	4a32      	ldr	r2, [pc, #200]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a8a:	4b2f      	ldr	r3, [pc, #188]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 030f 	and.w	r3, r3, #15
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d21d      	bcs.n	8009ad4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a98:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f023 020f 	bic.w	r2, r3, #15
 8009aa0:	4929      	ldr	r1, [pc, #164]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009aa8:	f7fb f8fa 	bl	8004ca0 <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aae:	e00a      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab0:	f7fb f8f6 	bl	8004ca0 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e03b      	b.n	8009b3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac6:	4b20      	ldr	r3, [pc, #128]	; (8009b48 <HAL_RCC_ClockConfig+0x260>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 030f 	and.w	r3, r3, #15
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d1ed      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d008      	beq.n	8009af2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ae0:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	4917      	ldr	r1, [pc, #92]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0308 	and.w	r3, r3, #8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009afe:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	490f      	ldr	r1, [pc, #60]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b12:	f000 f825 	bl	8009b60 <HAL_RCC_GetSysClockFreq>
 8009b16:	4602      	mov	r2, r0
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <HAL_RCC_ClockConfig+0x264>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	091b      	lsrs	r3, r3, #4
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	490c      	ldr	r1, [pc, #48]	; (8009b54 <HAL_RCC_ClockConfig+0x26c>)
 8009b24:	5ccb      	ldrb	r3, [r1, r3]
 8009b26:	f003 031f 	and.w	r3, r3, #31
 8009b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2e:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <HAL_RCC_ClockConfig+0x270>)
 8009b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009b32:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <HAL_RCC_ClockConfig+0x274>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fb f866 	bl	8004c08 <HAL_InitTick>
 8009b3c:	4603      	mov	r3, r0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40022000 	.word	0x40022000
 8009b4c:	40021000 	.word	0x40021000
 8009b50:	04c4b400 	.word	0x04c4b400
 8009b54:	080153ec 	.word	0x080153ec
 8009b58:	20000030 	.word	0x20000030
 8009b5c:	20000034 	.word	0x20000034

08009b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009b66:	4b2c      	ldr	r3, [pc, #176]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f003 030c 	and.w	r3, r3, #12
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d102      	bne.n	8009b78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b72:	4b2a      	ldr	r3, [pc, #168]	; (8009c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b74:	613b      	str	r3, [r7, #16]
 8009b76:	e047      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009b78:	4b27      	ldr	r3, [pc, #156]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f003 030c 	and.w	r3, r3, #12
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d102      	bne.n	8009b8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b84:	4b26      	ldr	r3, [pc, #152]	; (8009c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	e03e      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009b8a:	4b23      	ldr	r3, [pc, #140]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	f003 030c 	and.w	r3, r3, #12
 8009b92:	2b0c      	cmp	r3, #12
 8009b94:	d136      	bne.n	8009c04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b96:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	091b      	lsrs	r3, r3, #4
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	3301      	adds	r3, #1
 8009bac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d10c      	bne.n	8009bce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bb4:	4a1a      	ldr	r2, [pc, #104]	; (8009c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbc:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bbe:	68d2      	ldr	r2, [r2, #12]
 8009bc0:	0a12      	lsrs	r2, r2, #8
 8009bc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009bc6:	fb02 f303 	mul.w	r3, r2, r3
 8009bca:	617b      	str	r3, [r7, #20]
      break;
 8009bcc:	e00c      	b.n	8009be8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bce:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd6:	4a10      	ldr	r2, [pc, #64]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bd8:	68d2      	ldr	r2, [r2, #12]
 8009bda:	0a12      	lsrs	r2, r2, #8
 8009bdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009be0:	fb02 f303 	mul.w	r3, r2, r3
 8009be4:	617b      	str	r3, [r7, #20]
      break;
 8009be6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009be8:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	0e5b      	lsrs	r3, r3, #25
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	e001      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009c08:	693b      	ldr	r3, [r7, #16]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	00f42400 	.word	0x00f42400
 8009c20:	016e3600 	.word	0x016e3600

08009c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c28:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20000030 	.word	0x20000030

08009c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009c40:	f7ff fff0 	bl	8009c24 <HAL_RCC_GetHCLKFreq>
 8009c44:	4602      	mov	r2, r0
 8009c46:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	f003 0307 	and.w	r3, r3, #7
 8009c50:	4904      	ldr	r1, [pc, #16]	; (8009c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c52:	5ccb      	ldrb	r3, [r1, r3]
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40021000 	.word	0x40021000
 8009c64:	080153fc 	.word	0x080153fc

08009c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c6c:	f7ff ffda 	bl	8009c24 <HAL_RCC_GetHCLKFreq>
 8009c70:	4602      	mov	r2, r0
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	0adb      	lsrs	r3, r3, #11
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	4904      	ldr	r1, [pc, #16]	; (8009c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c7e:	5ccb      	ldrb	r3, [r1, r3]
 8009c80:	f003 031f 	and.w	r3, r3, #31
 8009c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40021000 	.word	0x40021000
 8009c90:	080153fc 	.word	0x080153fc

08009c94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c9a:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	091b      	lsrs	r3, r3, #4
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d10c      	bne.n	8009cd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cb8:	4a17      	ldr	r2, [pc, #92]	; (8009d18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	4a14      	ldr	r2, [pc, #80]	; (8009d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cc2:	68d2      	ldr	r2, [r2, #12]
 8009cc4:	0a12      	lsrs	r2, r2, #8
 8009cc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cca:	fb02 f303 	mul.w	r3, r2, r3
 8009cce:	617b      	str	r3, [r7, #20]
    break;
 8009cd0:	e00c      	b.n	8009cec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cd2:	4a12      	ldr	r2, [pc, #72]	; (8009d1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cda:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cdc:	68d2      	ldr	r2, [r2, #12]
 8009cde:	0a12      	lsrs	r2, r2, #8
 8009ce0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ce4:	fb02 f303 	mul.w	r3, r2, r3
 8009ce8:	617b      	str	r3, [r7, #20]
    break;
 8009cea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cec:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	0e5b      	lsrs	r3, r3, #25
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009d06:	687b      	ldr	r3, [r7, #4]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	40021000 	.word	0x40021000
 8009d18:	016e3600 	.word	0x016e3600
 8009d1c:	00f42400 	.word	0x00f42400

08009d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d28:	2300      	movs	r3, #0
 8009d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 8098 	beq.w	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d42:	4b43      	ldr	r3, [pc, #268]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10d      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d4e:	4b40      	ldr	r3, [pc, #256]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d52:	4a3f      	ldr	r2, [pc, #252]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d58:	6593      	str	r3, [r2, #88]	; 0x58
 8009d5a:	4b3d      	ldr	r3, [pc, #244]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d62:	60bb      	str	r3, [r7, #8]
 8009d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d66:	2301      	movs	r3, #1
 8009d68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d6a:	4b3a      	ldr	r3, [pc, #232]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a39      	ldr	r2, [pc, #228]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d76:	f7fa ff93 	bl	8004ca0 <HAL_GetTick>
 8009d7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d7c:	e009      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d7e:	f7fa ff8f 	bl	8004ca0 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d902      	bls.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	74fb      	strb	r3, [r7, #19]
        break;
 8009d90:	e005      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d92:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0ef      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009d9e:	7cfb      	ldrb	r3, [r7, #19]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d159      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009da4:	4b2a      	ldr	r3, [pc, #168]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01e      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d019      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009dc0:	4b23      	ldr	r3, [pc, #140]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dcc:	4b20      	ldr	r3, [pc, #128]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd2:	4a1f      	ldr	r2, [pc, #124]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ddc:	4b1c      	ldr	r3, [pc, #112]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de2:	4a1b      	ldr	r2, [pc, #108]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009dec:	4a18      	ldr	r2, [pc, #96]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d016      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dfe:	f7fa ff4f 	bl	8004ca0 <HAL_GetTick>
 8009e02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e04:	e00b      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e06:	f7fa ff4b 	bl	8004ca0 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d902      	bls.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	74fb      	strb	r3, [r7, #19]
            break;
 8009e1c:	e006      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0ec      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009e2c:	7cfb      	ldrb	r3, [r7, #19]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10b      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e32:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e40:	4903      	ldr	r1, [pc, #12]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009e48:	e008      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e4a:	7cfb      	ldrb	r3, [r7, #19]
 8009e4c:	74bb      	strb	r3, [r7, #18]
 8009e4e:	e005      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009e50:	40021000 	.word	0x40021000
 8009e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e58:	7cfb      	ldrb	r3, [r7, #19]
 8009e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e5c:	7c7b      	ldrb	r3, [r7, #17]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d105      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e62:	4ba7      	ldr	r3, [pc, #668]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e66:	4aa6      	ldr	r2, [pc, #664]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e7a:	4ba1      	ldr	r3, [pc, #644]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e80:	f023 0203 	bic.w	r2, r3, #3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	499d      	ldr	r1, [pc, #628]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e9c:	4b98      	ldr	r3, [pc, #608]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	f023 020c 	bic.w	r2, r3, #12
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	4995      	ldr	r1, [pc, #596]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ebe:	4b90      	ldr	r3, [pc, #576]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	498c      	ldr	r1, [pc, #560]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ee0:	4b87      	ldr	r3, [pc, #540]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	4984      	ldr	r1, [pc, #528]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009f02:	4b7f      	ldr	r3, [pc, #508]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	497b      	ldr	r1, [pc, #492]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0320 	and.w	r3, r3, #32
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f24:	4b76      	ldr	r3, [pc, #472]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	4973      	ldr	r1, [pc, #460]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f46:	4b6e      	ldr	r3, [pc, #440]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	496a      	ldr	r1, [pc, #424]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f68:	4b65      	ldr	r3, [pc, #404]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	4962      	ldr	r1, [pc, #392]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f8a:	4b5d      	ldr	r3, [pc, #372]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	4959      	ldr	r1, [pc, #356]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009fac:	4b54      	ldr	r3, [pc, #336]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fb2:	f023 0203 	bic.w	r2, r3, #3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fba:	4951      	ldr	r1, [pc, #324]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fce:	4b4c      	ldr	r3, [pc, #304]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4948      	ldr	r1, [pc, #288]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d015      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ff0:	4b43      	ldr	r3, [pc, #268]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffe:	4940      	ldr	r1, [pc, #256]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a000:	4313      	orrs	r3, r2
 800a002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a00e:	d105      	bne.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a010:	4b3b      	ldr	r3, [pc, #236]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	4a3a      	ldr	r2, [pc, #232]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a01a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a024:	2b00      	cmp	r3, #0
 800a026:	d015      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a028:	4b35      	ldr	r3, [pc, #212]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a036:	4932      	ldr	r1, [pc, #200]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a038:	4313      	orrs	r3, r2
 800a03a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a046:	d105      	bne.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a048:	4b2d      	ldr	r3, [pc, #180]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	4a2c      	ldr	r2, [pc, #176]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a04e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a052:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d015      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a060:	4b27      	ldr	r3, [pc, #156]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a066:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	4924      	ldr	r1, [pc, #144]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a070:	4313      	orrs	r3, r2
 800a072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a07e:	d105      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a080:	4b1f      	ldr	r3, [pc, #124]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a08a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d015      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a098:	4b19      	ldr	r3, [pc, #100]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	4916      	ldr	r1, [pc, #88]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0b6:	d105      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0b8:	4b11      	ldr	r3, [pc, #68]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	4a10      	ldr	r2, [pc, #64]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d019      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	4908      	ldr	r1, [pc, #32]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0ee:	d109      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0f0:	4b03      	ldr	r3, [pc, #12]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	4a02      	ldr	r2, [pc, #8]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0fa:	60d3      	str	r3, [r2, #12]
 800a0fc:	e002      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a0fe:	bf00      	nop
 800a100:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d015      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a110:	4b29      	ldr	r3, [pc, #164]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11e:	4926      	ldr	r1, [pc, #152]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a120:	4313      	orrs	r3, r2
 800a122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a12e:	d105      	bne.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a130:	4b21      	ldr	r3, [pc, #132]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	4a20      	ldr	r2, [pc, #128]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a13a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d015      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a148:	4b1b      	ldr	r3, [pc, #108]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a156:	4918      	ldr	r1, [pc, #96]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a166:	d105      	bne.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a168:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	4a12      	ldr	r2, [pc, #72]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a16e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a172:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d015      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a180:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18e:	490a      	ldr	r1, [pc, #40]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a190:	4313      	orrs	r3, r2
 800a192:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a19e:	d105      	bne.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a1a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a1ac:	7cbb      	ldrb	r3, [r7, #18]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	40021000 	.word	0x40021000

0800a1bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e049      	b.n	800a262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7fa f896 	bl	8004314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f000 fde6 	bl	800adcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d001      	beq.n	800a284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e04c      	b.n	800a31e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2202      	movs	r2, #2
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a26      	ldr	r2, [pc, #152]	; (800a32c <HAL_TIM_Base_Start+0xc0>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d022      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29e:	d01d      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a22      	ldr	r2, [pc, #136]	; (800a330 <HAL_TIM_Base_Start+0xc4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d018      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a21      	ldr	r2, [pc, #132]	; (800a334 <HAL_TIM_Base_Start+0xc8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d013      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1f      	ldr	r2, [pc, #124]	; (800a338 <HAL_TIM_Base_Start+0xcc>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00e      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a1e      	ldr	r2, [pc, #120]	; (800a33c <HAL_TIM_Base_Start+0xd0>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d009      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a1c      	ldr	r2, [pc, #112]	; (800a340 <HAL_TIM_Base_Start+0xd4>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <HAL_TIM_Base_Start+0x70>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a1b      	ldr	r2, [pc, #108]	; (800a344 <HAL_TIM_Base_Start+0xd8>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d115      	bne.n	800a308 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	4b19      	ldr	r3, [pc, #100]	; (800a348 <HAL_TIM_Base_Start+0xdc>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b06      	cmp	r3, #6
 800a2ec:	d015      	beq.n	800a31a <HAL_TIM_Base_Start+0xae>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f4:	d011      	beq.n	800a31a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0201 	orr.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a306:	e008      	b.n	800a31a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f042 0201 	orr.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	e000      	b.n	800a31c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40012c00 	.word	0x40012c00
 800a330:	40000400 	.word	0x40000400
 800a334:	40000800 	.word	0x40000800
 800a338:	40000c00 	.word	0x40000c00
 800a33c:	40013400 	.word	0x40013400
 800a340:	40014000 	.word	0x40014000
 800a344:	40015000 	.word	0x40015000
 800a348:	00010007 	.word	0x00010007

0800a34c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d001      	beq.n	800a364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e054      	b.n	800a40e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2202      	movs	r2, #2
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f042 0201 	orr.w	r2, r2, #1
 800a37a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a26      	ldr	r2, [pc, #152]	; (800a41c <HAL_TIM_Base_Start_IT+0xd0>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d022      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38e:	d01d      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a22      	ldr	r2, [pc, #136]	; (800a420 <HAL_TIM_Base_Start_IT+0xd4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d018      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a21      	ldr	r2, [pc, #132]	; (800a424 <HAL_TIM_Base_Start_IT+0xd8>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d013      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1f      	ldr	r2, [pc, #124]	; (800a428 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00e      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1e      	ldr	r2, [pc, #120]	; (800a42c <HAL_TIM_Base_Start_IT+0xe0>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d009      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1c      	ldr	r2, [pc, #112]	; (800a430 <HAL_TIM_Base_Start_IT+0xe4>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x80>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <HAL_TIM_Base_Start_IT+0xe8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d115      	bne.n	800a3f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	4b19      	ldr	r3, [pc, #100]	; (800a438 <HAL_TIM_Base_Start_IT+0xec>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b06      	cmp	r3, #6
 800a3dc:	d015      	beq.n	800a40a <HAL_TIM_Base_Start_IT+0xbe>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e4:	d011      	beq.n	800a40a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f042 0201 	orr.w	r2, r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f6:	e008      	b.n	800a40a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f042 0201 	orr.w	r2, r2, #1
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e000      	b.n	800a40c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a40a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40012c00 	.word	0x40012c00
 800a420:	40000400 	.word	0x40000400
 800a424:	40000800 	.word	0x40000800
 800a428:	40000c00 	.word	0x40000c00
 800a42c:	40013400 	.word	0x40013400
 800a430:	40014000 	.word	0x40014000
 800a434:	40015000 	.word	0x40015000
 800a438:	00010007 	.word	0x00010007

0800a43c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 0201 	bic.w	r2, r2, #1
 800a452:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6a1a      	ldr	r2, [r3, #32]
 800a45a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a45e:	4013      	ands	r3, r2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10f      	bne.n	800a484 <HAL_TIM_Base_Stop_IT+0x48>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6a1a      	ldr	r2, [r3, #32]
 800a46a:	f244 4344 	movw	r3, #17476	; 0x4444
 800a46e:	4013      	ands	r3, r2
 800a470:	2b00      	cmp	r3, #0
 800a472:	d107      	bne.n	800a484 <HAL_TIM_Base_Stop_IT+0x48>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0201 	bic.w	r2, r2, #1
 800a482:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e049      	b.n	800a540 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d106      	bne.n	800a4c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f841 	bl	800a548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f000 fc77 	bl	800adcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d109      	bne.n	800a580 <HAL_TIM_PWM_Start+0x24>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	e03c      	b.n	800a5fa <HAL_TIM_PWM_Start+0x9e>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b04      	cmp	r3, #4
 800a584:	d109      	bne.n	800a59a <HAL_TIM_PWM_Start+0x3e>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b01      	cmp	r3, #1
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	e02f      	b.n	800a5fa <HAL_TIM_PWM_Start+0x9e>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d109      	bne.n	800a5b4 <HAL_TIM_PWM_Start+0x58>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	bf14      	ite	ne
 800a5ac:	2301      	movne	r3, #1
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	e022      	b.n	800a5fa <HAL_TIM_PWM_Start+0x9e>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b0c      	cmp	r3, #12
 800a5b8:	d109      	bne.n	800a5ce <HAL_TIM_PWM_Start+0x72>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	bf14      	ite	ne
 800a5c6:	2301      	movne	r3, #1
 800a5c8:	2300      	moveq	r3, #0
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	e015      	b.n	800a5fa <HAL_TIM_PWM_Start+0x9e>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b10      	cmp	r3, #16
 800a5d2:	d109      	bne.n	800a5e8 <HAL_TIM_PWM_Start+0x8c>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	bf14      	ite	ne
 800a5e0:	2301      	movne	r3, #1
 800a5e2:	2300      	moveq	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	e008      	b.n	800a5fa <HAL_TIM_PWM_Start+0x9e>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e0a6      	b.n	800a750 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <HAL_TIM_PWM_Start+0xb6>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a610:	e023      	b.n	800a65a <HAL_TIM_PWM_Start+0xfe>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b04      	cmp	r3, #4
 800a616:	d104      	bne.n	800a622 <HAL_TIM_PWM_Start+0xc6>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a620:	e01b      	b.n	800a65a <HAL_TIM_PWM_Start+0xfe>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b08      	cmp	r3, #8
 800a626:	d104      	bne.n	800a632 <HAL_TIM_PWM_Start+0xd6>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a630:	e013      	b.n	800a65a <HAL_TIM_PWM_Start+0xfe>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b0c      	cmp	r3, #12
 800a636:	d104      	bne.n	800a642 <HAL_TIM_PWM_Start+0xe6>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2202      	movs	r2, #2
 800a63c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a640:	e00b      	b.n	800a65a <HAL_TIM_PWM_Start+0xfe>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b10      	cmp	r3, #16
 800a646:	d104      	bne.n	800a652 <HAL_TIM_PWM_Start+0xf6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a650:	e003      	b.n	800a65a <HAL_TIM_PWM_Start+0xfe>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2202      	movs	r2, #2
 800a656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2201      	movs	r2, #1
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f001 f8e3 	bl	800b82e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a3a      	ldr	r2, [pc, #232]	; (800a758 <HAL_TIM_PWM_Start+0x1fc>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d018      	beq.n	800a6a4 <HAL_TIM_PWM_Start+0x148>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a39      	ldr	r2, [pc, #228]	; (800a75c <HAL_TIM_PWM_Start+0x200>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d013      	beq.n	800a6a4 <HAL_TIM_PWM_Start+0x148>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a37      	ldr	r2, [pc, #220]	; (800a760 <HAL_TIM_PWM_Start+0x204>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00e      	beq.n	800a6a4 <HAL_TIM_PWM_Start+0x148>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a36      	ldr	r2, [pc, #216]	; (800a764 <HAL_TIM_PWM_Start+0x208>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d009      	beq.n	800a6a4 <HAL_TIM_PWM_Start+0x148>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a34      	ldr	r2, [pc, #208]	; (800a768 <HAL_TIM_PWM_Start+0x20c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d004      	beq.n	800a6a4 <HAL_TIM_PWM_Start+0x148>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a33      	ldr	r2, [pc, #204]	; (800a76c <HAL_TIM_PWM_Start+0x210>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d101      	bne.n	800a6a8 <HAL_TIM_PWM_Start+0x14c>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e000      	b.n	800a6aa <HAL_TIM_PWM_Start+0x14e>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d007      	beq.n	800a6be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a25      	ldr	r2, [pc, #148]	; (800a758 <HAL_TIM_PWM_Start+0x1fc>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d022      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d0:	d01d      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a26      	ldr	r2, [pc, #152]	; (800a770 <HAL_TIM_PWM_Start+0x214>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d018      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a24      	ldr	r2, [pc, #144]	; (800a774 <HAL_TIM_PWM_Start+0x218>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d013      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a23      	ldr	r2, [pc, #140]	; (800a778 <HAL_TIM_PWM_Start+0x21c>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d00e      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a19      	ldr	r2, [pc, #100]	; (800a75c <HAL_TIM_PWM_Start+0x200>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d009      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a18      	ldr	r2, [pc, #96]	; (800a760 <HAL_TIM_PWM_Start+0x204>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d004      	beq.n	800a70e <HAL_TIM_PWM_Start+0x1b2>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a18      	ldr	r2, [pc, #96]	; (800a76c <HAL_TIM_PWM_Start+0x210>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d115      	bne.n	800a73a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	4b19      	ldr	r3, [pc, #100]	; (800a77c <HAL_TIM_PWM_Start+0x220>)
 800a716:	4013      	ands	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2b06      	cmp	r3, #6
 800a71e:	d015      	beq.n	800a74c <HAL_TIM_PWM_Start+0x1f0>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d011      	beq.n	800a74c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a738:	e008      	b.n	800a74c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	e000      	b.n	800a74e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	40012c00 	.word	0x40012c00
 800a75c:	40013400 	.word	0x40013400
 800a760:	40014000 	.word	0x40014000
 800a764:	40014400 	.word	0x40014400
 800a768:	40014800 	.word	0x40014800
 800a76c:	40015000 	.word	0x40015000
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	40000c00 	.word	0x40000c00
 800a77c:	00010007 	.word	0x00010007

0800a780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b02      	cmp	r3, #2
 800a794:	d122      	bne.n	800a7dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d11b      	bne.n	800a7dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0202 	mvn.w	r2, #2
 800a7ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fae3 	bl	800ad8e <HAL_TIM_IC_CaptureCallback>
 800a7c8:	e005      	b.n	800a7d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fad5 	bl	800ad7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fae6 	bl	800ada2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d122      	bne.n	800a830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d11b      	bne.n	800a830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0204 	mvn.w	r2, #4
 800a800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fab9 	bl	800ad8e <HAL_TIM_IC_CaptureCallback>
 800a81c:	e005      	b.n	800a82a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 faab 	bl	800ad7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fabc 	bl	800ada2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0308 	and.w	r3, r3, #8
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d122      	bne.n	800a884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b08      	cmp	r3, #8
 800a84a:	d11b      	bne.n	800a884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0208 	mvn.w	r2, #8
 800a854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2204      	movs	r2, #4
 800a85a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa8f 	bl	800ad8e <HAL_TIM_IC_CaptureCallback>
 800a870:	e005      	b.n	800a87e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa81 	bl	800ad7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fa92 	bl	800ada2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0310 	and.w	r3, r3, #16
 800a88e:	2b10      	cmp	r3, #16
 800a890:	d122      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f003 0310 	and.w	r3, r3, #16
 800a89c:	2b10      	cmp	r3, #16
 800a89e:	d11b      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f06f 0210 	mvn.w	r2, #16
 800a8a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2208      	movs	r2, #8
 800a8ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fa65 	bl	800ad8e <HAL_TIM_IC_CaptureCallback>
 800a8c4:	e005      	b.n	800a8d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa57 	bl	800ad7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fa68 	bl	800ada2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d10e      	bne.n	800a904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d107      	bne.n	800a904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f06f 0201 	mvn.w	r2, #1
 800a8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7f8 fc86 	bl	8003210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90e:	2b80      	cmp	r3, #128	; 0x80
 800a910:	d10e      	bne.n	800a930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91c:	2b80      	cmp	r3, #128	; 0x80
 800a91e:	d107      	bne.n	800a930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 fada 	bl	800bee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d10e      	bne.n	800a95e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94a:	2b80      	cmp	r3, #128	; 0x80
 800a94c:	d107      	bne.n	800a95e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 facd 	bl	800bef8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d10e      	bne.n	800a98a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a976:	2b40      	cmp	r3, #64	; 0x40
 800a978:	d107      	bne.n	800a98a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fa16 	bl	800adb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f003 0320 	and.w	r3, r3, #32
 800a994:	2b20      	cmp	r3, #32
 800a996:	d10e      	bne.n	800a9b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f003 0320 	and.w	r3, r3, #32
 800a9a2:	2b20      	cmp	r3, #32
 800a9a4:	d107      	bne.n	800a9b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f06f 0220 	mvn.w	r2, #32
 800a9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 fa8d 	bl	800bed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c4:	d10f      	bne.n	800a9e6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9d4:	d107      	bne.n	800a9e6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a9de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fa93 	bl	800bf0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9f4:	d10f      	bne.n	800aa16 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa04:	d107      	bne.n	800aa16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aa0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 fa85 	bl	800bf20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa24:	d10f      	bne.n	800aa46 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa34:	d107      	bne.n	800aa46 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800aa3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 fa77 	bl	800bf34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa54:	d10f      	bne.n	800aa76 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa64:	d107      	bne.n	800aa76 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800aa6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 fa69 	bl	800bf48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d101      	bne.n	800aa9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	e0ff      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b14      	cmp	r3, #20
 800aaaa:	f200 80f0 	bhi.w	800ac8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aaae:	a201      	add	r2, pc, #4	; (adr r2, 800aab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800ab09 	.word	0x0800ab09
 800aab8:	0800ac8f 	.word	0x0800ac8f
 800aabc:	0800ac8f 	.word	0x0800ac8f
 800aac0:	0800ac8f 	.word	0x0800ac8f
 800aac4:	0800ab49 	.word	0x0800ab49
 800aac8:	0800ac8f 	.word	0x0800ac8f
 800aacc:	0800ac8f 	.word	0x0800ac8f
 800aad0:	0800ac8f 	.word	0x0800ac8f
 800aad4:	0800ab8b 	.word	0x0800ab8b
 800aad8:	0800ac8f 	.word	0x0800ac8f
 800aadc:	0800ac8f 	.word	0x0800ac8f
 800aae0:	0800ac8f 	.word	0x0800ac8f
 800aae4:	0800abcb 	.word	0x0800abcb
 800aae8:	0800ac8f 	.word	0x0800ac8f
 800aaec:	0800ac8f 	.word	0x0800ac8f
 800aaf0:	0800ac8f 	.word	0x0800ac8f
 800aaf4:	0800ac0d 	.word	0x0800ac0d
 800aaf8:	0800ac8f 	.word	0x0800ac8f
 800aafc:	0800ac8f 	.word	0x0800ac8f
 800ab00:	0800ac8f 	.word	0x0800ac8f
 800ab04:	0800ac4d 	.word	0x0800ac4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fa04 	bl	800af1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	699a      	ldr	r2, [r3, #24]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0208 	orr.w	r2, r2, #8
 800ab22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	699a      	ldr	r2, [r3, #24]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 0204 	bic.w	r2, r2, #4
 800ab32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6999      	ldr	r1, [r3, #24]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	691a      	ldr	r2, [r3, #16]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	619a      	str	r2, [r3, #24]
      break;
 800ab46:	e0a5      	b.n	800ac94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fa7e 	bl	800b050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	699a      	ldr	r2, [r3, #24]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6999      	ldr	r1, [r3, #24]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	021a      	lsls	r2, r3, #8
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	430a      	orrs	r2, r1
 800ab86:	619a      	str	r2, [r3, #24]
      break;
 800ab88:	e084      	b.n	800ac94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 faf1 	bl	800b178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69da      	ldr	r2, [r3, #28]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f042 0208 	orr.w	r2, r2, #8
 800aba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	69da      	ldr	r2, [r3, #28]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0204 	bic.w	r2, r2, #4
 800abb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	69d9      	ldr	r1, [r3, #28]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	61da      	str	r2, [r3, #28]
      break;
 800abc8:	e064      	b.n	800ac94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fb63 	bl	800b29c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	69da      	ldr	r2, [r3, #28]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	69da      	ldr	r2, [r3, #28]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	69d9      	ldr	r1, [r3, #28]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	021a      	lsls	r2, r3, #8
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	430a      	orrs	r2, r1
 800ac08:	61da      	str	r2, [r3, #28]
      break;
 800ac0a:	e043      	b.n	800ac94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fbd6 	bl	800b3c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0208 	orr.w	r2, r2, #8
 800ac26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f022 0204 	bic.w	r2, r2, #4
 800ac36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ac4a:	e023      	b.n	800ac94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fc20 	bl	800b498 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	021a      	lsls	r2, r3, #8
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ac8c:	e002      	b.n	800ac94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	75fb      	strb	r3, [r7, #23]
      break;
 800ac92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop

0800aca8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d101      	bne.n	800acc0 <HAL_TIM_GenerateEvent+0x18>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e014      	b.n	800acea <HAL_TIM_GenerateEvent+0x42>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b082      	sub	sp, #8
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d101      	bne.n	800ad0e <HAL_TIM_SlaveConfigSynchro+0x18>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e031      	b.n	800ad72 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fc25 	bl	800b570 <TIM_SlaveTimer_SetConfig>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d009      	beq.n	800ad40 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e018      	b.n	800ad72 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad4e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad5e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
	...

0800adcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a46      	ldr	r2, [pc, #280]	; (800aef8 <TIM_Base_SetConfig+0x12c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d017      	beq.n	800ae14 <TIM_Base_SetConfig+0x48>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adea:	d013      	beq.n	800ae14 <TIM_Base_SetConfig+0x48>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a43      	ldr	r2, [pc, #268]	; (800aefc <TIM_Base_SetConfig+0x130>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00f      	beq.n	800ae14 <TIM_Base_SetConfig+0x48>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a42      	ldr	r2, [pc, #264]	; (800af00 <TIM_Base_SetConfig+0x134>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00b      	beq.n	800ae14 <TIM_Base_SetConfig+0x48>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a41      	ldr	r2, [pc, #260]	; (800af04 <TIM_Base_SetConfig+0x138>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d007      	beq.n	800ae14 <TIM_Base_SetConfig+0x48>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a40      	ldr	r2, [pc, #256]	; (800af08 <TIM_Base_SetConfig+0x13c>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d003      	beq.n	800ae14 <TIM_Base_SetConfig+0x48>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a3f      	ldr	r2, [pc, #252]	; (800af0c <TIM_Base_SetConfig+0x140>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d108      	bne.n	800ae26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a33      	ldr	r2, [pc, #204]	; (800aef8 <TIM_Base_SetConfig+0x12c>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d023      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae34:	d01f      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a30      	ldr	r2, [pc, #192]	; (800aefc <TIM_Base_SetConfig+0x130>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d01b      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a2f      	ldr	r2, [pc, #188]	; (800af00 <TIM_Base_SetConfig+0x134>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d017      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a2e      	ldr	r2, [pc, #184]	; (800af04 <TIM_Base_SetConfig+0x138>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d013      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a2d      	ldr	r2, [pc, #180]	; (800af08 <TIM_Base_SetConfig+0x13c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00f      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a2d      	ldr	r2, [pc, #180]	; (800af10 <TIM_Base_SetConfig+0x144>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00b      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a2c      	ldr	r2, [pc, #176]	; (800af14 <TIM_Base_SetConfig+0x148>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d007      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <TIM_Base_SetConfig+0x14c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d003      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a26      	ldr	r2, [pc, #152]	; (800af0c <TIM_Base_SetConfig+0x140>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d108      	bne.n	800ae88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a12      	ldr	r2, [pc, #72]	; (800aef8 <TIM_Base_SetConfig+0x12c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d013      	beq.n	800aedc <TIM_Base_SetConfig+0x110>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a14      	ldr	r2, [pc, #80]	; (800af08 <TIM_Base_SetConfig+0x13c>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00f      	beq.n	800aedc <TIM_Base_SetConfig+0x110>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a14      	ldr	r2, [pc, #80]	; (800af10 <TIM_Base_SetConfig+0x144>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00b      	beq.n	800aedc <TIM_Base_SetConfig+0x110>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a13      	ldr	r2, [pc, #76]	; (800af14 <TIM_Base_SetConfig+0x148>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_Base_SetConfig+0x110>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a12      	ldr	r2, [pc, #72]	; (800af18 <TIM_Base_SetConfig+0x14c>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_Base_SetConfig+0x110>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a0d      	ldr	r2, [pc, #52]	; (800af0c <TIM_Base_SetConfig+0x140>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d103      	bne.n	800aee4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	691a      	ldr	r2, [r3, #16]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	615a      	str	r2, [r3, #20]
}
 800aeea:	bf00      	nop
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40012c00 	.word	0x40012c00
 800aefc:	40000400 	.word	0x40000400
 800af00:	40000800 	.word	0x40000800
 800af04:	40000c00 	.word	0x40000c00
 800af08:	40013400 	.word	0x40013400
 800af0c:	40015000 	.word	0x40015000
 800af10:	40014000 	.word	0x40014000
 800af14:	40014400 	.word	0x40014400
 800af18:	40014800 	.word	0x40014800

0800af1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	f023 0201 	bic.w	r2, r3, #1
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f023 0303 	bic.w	r3, r3, #3
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f023 0302 	bic.w	r3, r3, #2
 800af68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a30      	ldr	r2, [pc, #192]	; (800b038 <TIM_OC1_SetConfig+0x11c>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d013      	beq.n	800afa4 <TIM_OC1_SetConfig+0x88>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a2f      	ldr	r2, [pc, #188]	; (800b03c <TIM_OC1_SetConfig+0x120>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00f      	beq.n	800afa4 <TIM_OC1_SetConfig+0x88>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a2e      	ldr	r2, [pc, #184]	; (800b040 <TIM_OC1_SetConfig+0x124>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00b      	beq.n	800afa4 <TIM_OC1_SetConfig+0x88>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a2d      	ldr	r2, [pc, #180]	; (800b044 <TIM_OC1_SetConfig+0x128>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d007      	beq.n	800afa4 <TIM_OC1_SetConfig+0x88>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a2c      	ldr	r2, [pc, #176]	; (800b048 <TIM_OC1_SetConfig+0x12c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_OC1_SetConfig+0x88>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a2b      	ldr	r2, [pc, #172]	; (800b04c <TIM_OC1_SetConfig+0x130>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d10c      	bne.n	800afbe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f023 0308 	bic.w	r3, r3, #8
 800afaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f023 0304 	bic.w	r3, r3, #4
 800afbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a1d      	ldr	r2, [pc, #116]	; (800b038 <TIM_OC1_SetConfig+0x11c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d013      	beq.n	800afee <TIM_OC1_SetConfig+0xd2>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <TIM_OC1_SetConfig+0x120>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d00f      	beq.n	800afee <TIM_OC1_SetConfig+0xd2>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a1b      	ldr	r2, [pc, #108]	; (800b040 <TIM_OC1_SetConfig+0x124>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00b      	beq.n	800afee <TIM_OC1_SetConfig+0xd2>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a1a      	ldr	r2, [pc, #104]	; (800b044 <TIM_OC1_SetConfig+0x128>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d007      	beq.n	800afee <TIM_OC1_SetConfig+0xd2>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a19      	ldr	r2, [pc, #100]	; (800b048 <TIM_OC1_SetConfig+0x12c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d003      	beq.n	800afee <TIM_OC1_SetConfig+0xd2>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a18      	ldr	r2, [pc, #96]	; (800b04c <TIM_OC1_SetConfig+0x130>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d111      	bne.n	800b012 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800affc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	4313      	orrs	r3, r2
 800b006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	4313      	orrs	r3, r2
 800b010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	621a      	str	r2, [r3, #32]
}
 800b02c:	bf00      	nop
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	40012c00 	.word	0x40012c00
 800b03c:	40013400 	.word	0x40013400
 800b040:	40014000 	.word	0x40014000
 800b044:	40014400 	.word	0x40014400
 800b048:	40014800 	.word	0x40014800
 800b04c:	40015000 	.word	0x40015000

0800b050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	f023 0210 	bic.w	r2, r3, #16
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f023 0320 	bic.w	r3, r3, #32
 800b09e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a2c      	ldr	r2, [pc, #176]	; (800b160 <TIM_OC2_SetConfig+0x110>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d007      	beq.n	800b0c4 <TIM_OC2_SetConfig+0x74>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a2b      	ldr	r2, [pc, #172]	; (800b164 <TIM_OC2_SetConfig+0x114>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d003      	beq.n	800b0c4 <TIM_OC2_SetConfig+0x74>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a2a      	ldr	r2, [pc, #168]	; (800b168 <TIM_OC2_SetConfig+0x118>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d10d      	bne.n	800b0e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a1f      	ldr	r2, [pc, #124]	; (800b160 <TIM_OC2_SetConfig+0x110>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d013      	beq.n	800b110 <TIM_OC2_SetConfig+0xc0>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a1e      	ldr	r2, [pc, #120]	; (800b164 <TIM_OC2_SetConfig+0x114>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00f      	beq.n	800b110 <TIM_OC2_SetConfig+0xc0>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a1e      	ldr	r2, [pc, #120]	; (800b16c <TIM_OC2_SetConfig+0x11c>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d00b      	beq.n	800b110 <TIM_OC2_SetConfig+0xc0>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a1d      	ldr	r2, [pc, #116]	; (800b170 <TIM_OC2_SetConfig+0x120>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d007      	beq.n	800b110 <TIM_OC2_SetConfig+0xc0>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a1c      	ldr	r2, [pc, #112]	; (800b174 <TIM_OC2_SetConfig+0x124>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d003      	beq.n	800b110 <TIM_OC2_SetConfig+0xc0>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a17      	ldr	r2, [pc, #92]	; (800b168 <TIM_OC2_SetConfig+0x118>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d113      	bne.n	800b138 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b11e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	621a      	str	r2, [r3, #32]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	40012c00 	.word	0x40012c00
 800b164:	40013400 	.word	0x40013400
 800b168:	40015000 	.word	0x40015000
 800b16c:	40014000 	.word	0x40014000
 800b170:	40014400 	.word	0x40014400
 800b174:	40014800 	.word	0x40014800

0800b178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	021b      	lsls	r3, r3, #8
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a2b      	ldr	r2, [pc, #172]	; (800b284 <TIM_OC3_SetConfig+0x10c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d007      	beq.n	800b1ea <TIM_OC3_SetConfig+0x72>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a2a      	ldr	r2, [pc, #168]	; (800b288 <TIM_OC3_SetConfig+0x110>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d003      	beq.n	800b1ea <TIM_OC3_SetConfig+0x72>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a29      	ldr	r2, [pc, #164]	; (800b28c <TIM_OC3_SetConfig+0x114>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d10d      	bne.n	800b206 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a1e      	ldr	r2, [pc, #120]	; (800b284 <TIM_OC3_SetConfig+0x10c>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d013      	beq.n	800b236 <TIM_OC3_SetConfig+0xbe>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a1d      	ldr	r2, [pc, #116]	; (800b288 <TIM_OC3_SetConfig+0x110>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d00f      	beq.n	800b236 <TIM_OC3_SetConfig+0xbe>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a1d      	ldr	r2, [pc, #116]	; (800b290 <TIM_OC3_SetConfig+0x118>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00b      	beq.n	800b236 <TIM_OC3_SetConfig+0xbe>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a1c      	ldr	r2, [pc, #112]	; (800b294 <TIM_OC3_SetConfig+0x11c>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d007      	beq.n	800b236 <TIM_OC3_SetConfig+0xbe>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a1b      	ldr	r2, [pc, #108]	; (800b298 <TIM_OC3_SetConfig+0x120>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d003      	beq.n	800b236 <TIM_OC3_SetConfig+0xbe>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a16      	ldr	r2, [pc, #88]	; (800b28c <TIM_OC3_SetConfig+0x114>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d113      	bne.n	800b25e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b23c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	4313      	orrs	r3, r2
 800b250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	621a      	str	r2, [r3, #32]
}
 800b278:	bf00      	nop
 800b27a:	371c      	adds	r7, #28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	40012c00 	.word	0x40012c00
 800b288:	40013400 	.word	0x40013400
 800b28c:	40015000 	.word	0x40015000
 800b290:	40014000 	.word	0x40014000
 800b294:	40014400 	.word	0x40014400
 800b298:	40014800 	.word	0x40014800

0800b29c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	031b      	lsls	r3, r3, #12
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a2c      	ldr	r2, [pc, #176]	; (800b3ac <TIM_OC4_SetConfig+0x110>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d007      	beq.n	800b310 <TIM_OC4_SetConfig+0x74>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a2b      	ldr	r2, [pc, #172]	; (800b3b0 <TIM_OC4_SetConfig+0x114>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d003      	beq.n	800b310 <TIM_OC4_SetConfig+0x74>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a2a      	ldr	r2, [pc, #168]	; (800b3b4 <TIM_OC4_SetConfig+0x118>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d10d      	bne.n	800b32c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	031b      	lsls	r3, r3, #12
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	4313      	orrs	r3, r2
 800b322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b32a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a1f      	ldr	r2, [pc, #124]	; (800b3ac <TIM_OC4_SetConfig+0x110>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d013      	beq.n	800b35c <TIM_OC4_SetConfig+0xc0>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a1e      	ldr	r2, [pc, #120]	; (800b3b0 <TIM_OC4_SetConfig+0x114>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00f      	beq.n	800b35c <TIM_OC4_SetConfig+0xc0>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a1e      	ldr	r2, [pc, #120]	; (800b3b8 <TIM_OC4_SetConfig+0x11c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00b      	beq.n	800b35c <TIM_OC4_SetConfig+0xc0>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a1d      	ldr	r2, [pc, #116]	; (800b3bc <TIM_OC4_SetConfig+0x120>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d007      	beq.n	800b35c <TIM_OC4_SetConfig+0xc0>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a1c      	ldr	r2, [pc, #112]	; (800b3c0 <TIM_OC4_SetConfig+0x124>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d003      	beq.n	800b35c <TIM_OC4_SetConfig+0xc0>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a17      	ldr	r2, [pc, #92]	; (800b3b4 <TIM_OC4_SetConfig+0x118>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d113      	bne.n	800b384 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b362:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b36a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	019b      	lsls	r3, r3, #6
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	4313      	orrs	r3, r2
 800b376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	019b      	lsls	r3, r3, #6
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	4313      	orrs	r3, r2
 800b382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	621a      	str	r2, [r3, #32]
}
 800b39e:	bf00      	nop
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	40012c00 	.word	0x40012c00
 800b3b0:	40013400 	.word	0x40013400
 800b3b4:	40015000 	.word	0x40015000
 800b3b8:	40014000 	.word	0x40014000
 800b3bc:	40014400 	.word	0x40014400
 800b3c0:	40014800 	.word	0x40014800

0800b3c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	041b      	lsls	r3, r3, #16
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	4313      	orrs	r3, r2
 800b414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a19      	ldr	r2, [pc, #100]	; (800b480 <TIM_OC5_SetConfig+0xbc>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d013      	beq.n	800b446 <TIM_OC5_SetConfig+0x82>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a18      	ldr	r2, [pc, #96]	; (800b484 <TIM_OC5_SetConfig+0xc0>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00f      	beq.n	800b446 <TIM_OC5_SetConfig+0x82>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a17      	ldr	r2, [pc, #92]	; (800b488 <TIM_OC5_SetConfig+0xc4>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d00b      	beq.n	800b446 <TIM_OC5_SetConfig+0x82>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a16      	ldr	r2, [pc, #88]	; (800b48c <TIM_OC5_SetConfig+0xc8>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d007      	beq.n	800b446 <TIM_OC5_SetConfig+0x82>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a15      	ldr	r2, [pc, #84]	; (800b490 <TIM_OC5_SetConfig+0xcc>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d003      	beq.n	800b446 <TIM_OC5_SetConfig+0x82>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a14      	ldr	r2, [pc, #80]	; (800b494 <TIM_OC5_SetConfig+0xd0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d109      	bne.n	800b45a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b44c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4313      	orrs	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	621a      	str	r2, [r3, #32]
}
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	40012c00 	.word	0x40012c00
 800b484:	40013400 	.word	0x40013400
 800b488:	40014000 	.word	0x40014000
 800b48c:	40014400 	.word	0x40014400
 800b490:	40014800 	.word	0x40014800
 800b494:	40015000 	.word	0x40015000

0800b498 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	021b      	lsls	r3, r3, #8
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	051b      	lsls	r3, r3, #20
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a1a      	ldr	r2, [pc, #104]	; (800b558 <TIM_OC6_SetConfig+0xc0>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d013      	beq.n	800b51c <TIM_OC6_SetConfig+0x84>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a19      	ldr	r2, [pc, #100]	; (800b55c <TIM_OC6_SetConfig+0xc4>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d00f      	beq.n	800b51c <TIM_OC6_SetConfig+0x84>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a18      	ldr	r2, [pc, #96]	; (800b560 <TIM_OC6_SetConfig+0xc8>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00b      	beq.n	800b51c <TIM_OC6_SetConfig+0x84>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a17      	ldr	r2, [pc, #92]	; (800b564 <TIM_OC6_SetConfig+0xcc>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d007      	beq.n	800b51c <TIM_OC6_SetConfig+0x84>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a16      	ldr	r2, [pc, #88]	; (800b568 <TIM_OC6_SetConfig+0xd0>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d003      	beq.n	800b51c <TIM_OC6_SetConfig+0x84>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a15      	ldr	r2, [pc, #84]	; (800b56c <TIM_OC6_SetConfig+0xd4>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d109      	bne.n	800b530 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b522:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	029b      	lsls	r3, r3, #10
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	621a      	str	r2, [r3, #32]
}
 800b54a:	bf00      	nop
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	40012c00 	.word	0x40012c00
 800b55c:	40013400 	.word	0x40013400
 800b560:	40014000 	.word	0x40014000
 800b564:	40014400 	.word	0x40014400
 800b568:	40014800 	.word	0x40014800
 800b56c:	40015000 	.word	0x40015000

0800b570 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b590:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	4313      	orrs	r3, r2
 800b59a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a2:	f023 0307 	bic.w	r3, r3, #7
 800b5a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	4a56      	ldr	r2, [pc, #344]	; (800b718 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	f000 80a2 	beq.w	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b5c6:	4a54      	ldr	r2, [pc, #336]	; (800b718 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	f200 809b 	bhi.w	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b5ce:	4a53      	ldr	r2, [pc, #332]	; (800b71c <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	f000 809a 	beq.w	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b5d6:	4a51      	ldr	r2, [pc, #324]	; (800b71c <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	f200 8093 	bhi.w	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b5de:	4a50      	ldr	r2, [pc, #320]	; (800b720 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	f000 8092 	beq.w	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b5e6:	4a4e      	ldr	r2, [pc, #312]	; (800b720 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	f200 808b 	bhi.w	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b5ee:	4a4d      	ldr	r2, [pc, #308]	; (800b724 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	f000 808a 	beq.w	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b5f6:	4a4b      	ldr	r2, [pc, #300]	; (800b724 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	f200 8083 	bhi.w	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b5fe:	4a4a      	ldr	r2, [pc, #296]	; (800b728 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b600:	4293      	cmp	r3, r2
 800b602:	f000 8082 	beq.w	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b606:	4a48      	ldr	r2, [pc, #288]	; (800b728 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d87b      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b60c:	4a47      	ldr	r2, [pc, #284]	; (800b72c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d07b      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b612:	4a46      	ldr	r2, [pc, #280]	; (800b72c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d875      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b618:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b61c:	d075      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b61e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b622:	d86f      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b628:	d06f      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b62a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b62e:	d869      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b630:	2b70      	cmp	r3, #112	; 0x70
 800b632:	d01a      	beq.n	800b66a <TIM_SlaveTimer_SetConfig+0xfa>
 800b634:	2b70      	cmp	r3, #112	; 0x70
 800b636:	d865      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b638:	2b60      	cmp	r3, #96	; 0x60
 800b63a:	d059      	beq.n	800b6f0 <TIM_SlaveTimer_SetConfig+0x180>
 800b63c:	2b60      	cmp	r3, #96	; 0x60
 800b63e:	d861      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b640:	2b50      	cmp	r3, #80	; 0x50
 800b642:	d04b      	beq.n	800b6dc <TIM_SlaveTimer_SetConfig+0x16c>
 800b644:	2b50      	cmp	r3, #80	; 0x50
 800b646:	d85d      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b648:	2b40      	cmp	r3, #64	; 0x40
 800b64a:	d019      	beq.n	800b680 <TIM_SlaveTimer_SetConfig+0x110>
 800b64c:	2b40      	cmp	r3, #64	; 0x40
 800b64e:	d859      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b650:	2b30      	cmp	r3, #48	; 0x30
 800b652:	d05a      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b654:	2b30      	cmp	r3, #48	; 0x30
 800b656:	d855      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d056      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b65c:	2b20      	cmp	r3, #32
 800b65e:	d851      	bhi.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d052      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b664:	2b10      	cmp	r3, #16
 800b666:	d050      	beq.n	800b70a <TIM_SlaveTimer_SetConfig+0x19a>
 800b668:	e04c      	b.n	800b704 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68d9      	ldr	r1, [r3, #12]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	f000 f8b8 	bl	800b7ee <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b67e:	e045      	b.n	800b70c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b05      	cmp	r3, #5
 800b686:	d004      	beq.n	800b692 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b68c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b690:	d101      	bne.n	800b696 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e03b      	b.n	800b70e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6a1a      	ldr	r2, [r3, #32]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0201 	bic.w	r2, r2, #1
 800b6ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	621a      	str	r2, [r3, #32]
      break;
 800b6da:	e017      	b.n	800b70c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	6899      	ldr	r1, [r3, #8]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f000 f821 	bl	800b730 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b6ee:	e00d      	b.n	800b70c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	6899      	ldr	r1, [r3, #8]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	f000 f846 	bl	800b78e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b702:	e003      	b.n	800b70c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	75fb      	strb	r3, [r7, #23]
      break;
 800b708:	e000      	b.n	800b70c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800b70a:	bf00      	nop
  }

  return status;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	00100070 	.word	0x00100070
 800b71c:	00100060 	.word	0x00100060
 800b720:	00100050 	.word	0x00100050
 800b724:	00100040 	.word	0x00100040
 800b728:	00100030 	.word	0x00100030
 800b72c:	00100020 	.word	0x00100020

0800b730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6a1b      	ldr	r3, [r3, #32]
 800b740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b75a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	011b      	lsls	r3, r3, #4
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4313      	orrs	r3, r2
 800b764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f023 030a 	bic.w	r3, r3, #10
 800b76c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4313      	orrs	r3, r2
 800b774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	621a      	str	r2, [r3, #32]
}
 800b782:	bf00      	nop
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b78e:	b480      	push	{r7}
 800b790:	b087      	sub	sp, #28
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	f023 0210 	bic.w	r2, r3, #16
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	031b      	lsls	r3, r3, #12
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	011b      	lsls	r3, r3, #4
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	621a      	str	r2, [r3, #32]
}
 800b7e2:	bf00      	nop
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b087      	sub	sp, #28
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	021a      	lsls	r2, r3, #8
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	431a      	orrs	r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	4313      	orrs	r3, r2
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4313      	orrs	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	609a      	str	r2, [r3, #8]
}
 800b822:	bf00      	nop
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b82e:	b480      	push	{r7}
 800b830:	b087      	sub	sp, #28
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f003 031f 	and.w	r3, r3, #31
 800b840:	2201      	movs	r2, #1
 800b842:	fa02 f303 	lsl.w	r3, r2, r3
 800b846:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a1a      	ldr	r2, [r3, #32]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	43db      	mvns	r3, r3
 800b850:	401a      	ands	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a1a      	ldr	r2, [r3, #32]
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	f003 031f 	and.w	r3, r3, #31
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	fa01 f303 	lsl.w	r3, r1, r3
 800b866:	431a      	orrs	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	621a      	str	r2, [r3, #32]
}
 800b86c:	bf00      	nop
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d109      	bne.n	800b89c <HAL_TIMEx_PWMN_Start+0x24>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b01      	cmp	r3, #1
 800b892:	bf14      	ite	ne
 800b894:	2301      	movne	r3, #1
 800b896:	2300      	moveq	r3, #0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	e022      	b.n	800b8e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d109      	bne.n	800b8b6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	bf14      	ite	ne
 800b8ae:	2301      	movne	r3, #1
 800b8b0:	2300      	moveq	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	e015      	b.n	800b8e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d109      	bne.n	800b8d0 <HAL_TIMEx_PWMN_Start+0x58>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	bf14      	ite	ne
 800b8c8:	2301      	movne	r3, #1
 800b8ca:	2300      	moveq	r3, #0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	e008      	b.n	800b8e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	bf14      	ite	ne
 800b8dc:	2301      	movne	r3, #1
 800b8de:	2300      	moveq	r3, #0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e073      	b.n	800b9d2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d104      	bne.n	800b8fa <HAL_TIMEx_PWMN_Start+0x82>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8f8:	e013      	b.n	800b922 <HAL_TIMEx_PWMN_Start+0xaa>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d104      	bne.n	800b90a <HAL_TIMEx_PWMN_Start+0x92>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2202      	movs	r2, #2
 800b904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b908:	e00b      	b.n	800b922 <HAL_TIMEx_PWMN_Start+0xaa>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	d104      	bne.n	800b91a <HAL_TIMEx_PWMN_Start+0xa2>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b918:	e003      	b.n	800b922 <HAL_TIMEx_PWMN_Start+0xaa>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2202      	movs	r2, #2
 800b91e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2204      	movs	r2, #4
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 fb16 	bl	800bf5c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b93e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a25      	ldr	r2, [pc, #148]	; (800b9dc <HAL_TIMEx_PWMN_Start+0x164>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d022      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b952:	d01d      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a21      	ldr	r2, [pc, #132]	; (800b9e0 <HAL_TIMEx_PWMN_Start+0x168>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d018      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a20      	ldr	r2, [pc, #128]	; (800b9e4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d013      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a1e      	ldr	r2, [pc, #120]	; (800b9e8 <HAL_TIMEx_PWMN_Start+0x170>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00e      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a1d      	ldr	r2, [pc, #116]	; (800b9ec <HAL_TIMEx_PWMN_Start+0x174>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d009      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a1b      	ldr	r2, [pc, #108]	; (800b9f0 <HAL_TIMEx_PWMN_Start+0x178>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <HAL_TIMEx_PWMN_Start+0x118>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a1a      	ldr	r2, [pc, #104]	; (800b9f4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d115      	bne.n	800b9bc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <HAL_TIMEx_PWMN_Start+0x180>)
 800b998:	4013      	ands	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2b06      	cmp	r3, #6
 800b9a0:	d015      	beq.n	800b9ce <HAL_TIMEx_PWMN_Start+0x156>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a8:	d011      	beq.n	800b9ce <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f042 0201 	orr.w	r2, r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ba:	e008      	b.n	800b9ce <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f042 0201 	orr.w	r2, r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	e000      	b.n	800b9d0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	40012c00 	.word	0x40012c00
 800b9e0:	40000400 	.word	0x40000400
 800b9e4:	40000800 	.word	0x40000800
 800b9e8:	40000c00 	.word	0x40000c00
 800b9ec:	40013400 	.word	0x40013400
 800b9f0:	40014000 	.word	0x40014000
 800b9f4:	40015000 	.word	0x40015000
 800b9f8:	00010007 	.word	0x00010007

0800b9fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d101      	bne.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba10:	2302      	movs	r3, #2
 800ba12:	e074      	b.n	800bafe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a34      	ldr	r2, [pc, #208]	; (800bb0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d009      	beq.n	800ba52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a33      	ldr	r2, [pc, #204]	; (800bb10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d004      	beq.n	800ba52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a31      	ldr	r2, [pc, #196]	; (800bb14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d108      	bne.n	800ba64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a21      	ldr	r2, [pc, #132]	; (800bb0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d022      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba94:	d01d      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a1f      	ldr	r2, [pc, #124]	; (800bb18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d018      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1d      	ldr	r2, [pc, #116]	; (800bb1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d013      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a1c      	ldr	r2, [pc, #112]	; (800bb20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d00e      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a15      	ldr	r2, [pc, #84]	; (800bb10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d009      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a18      	ldr	r2, [pc, #96]	; (800bb24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d004      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a11      	ldr	r2, [pc, #68]	; (800bb14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d10c      	bne.n	800baec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40012c00 	.word	0x40012c00
 800bb10:	40013400 	.word	0x40013400
 800bb14:	40015000 	.word	0x40015000
 800bb18:	40000400 	.word	0x40000400
 800bb1c:	40000800 	.word	0x40000800
 800bb20:	40000c00 	.word	0x40000c00
 800bb24:	40014000 	.word	0x40014000

0800bb28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d101      	bne.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb40:	2302      	movs	r3, #2
 800bb42:	e096      	b.n	800bc72 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	041b      	lsls	r3, r3, #16
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a2f      	ldr	r2, [pc, #188]	; (800bc80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d009      	beq.n	800bbdc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a2d      	ldr	r2, [pc, #180]	; (800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d004      	beq.n	800bbdc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a2c      	ldr	r2, [pc, #176]	; (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d106      	bne.n	800bbea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a24      	ldr	r2, [pc, #144]	; (800bc80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d009      	beq.n	800bc08 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a22      	ldr	r2, [pc, #136]	; (800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d004      	beq.n	800bc08 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a21      	ldr	r2, [pc, #132]	; (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d12b      	bne.n	800bc60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc12:	051b      	lsls	r3, r3, #20
 800bc14:	4313      	orrs	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	4313      	orrs	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a11      	ldr	r2, [pc, #68]	; (800bc80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d009      	beq.n	800bc52 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a10      	ldr	r2, [pc, #64]	; (800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d004      	beq.n	800bc52 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a0e      	ldr	r2, [pc, #56]	; (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d106      	bne.n	800bc60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	40012c00 	.word	0x40012c00
 800bc84:	40013400 	.word	0x40013400
 800bc88:	40015000 	.word	0x40015000

0800bc8c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b08b      	sub	sp, #44	; 0x2c
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d101      	bne.n	800bcac <HAL_TIMEx_ConfigBreakInput+0x20>
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e10b      	b.n	800bec4 <HAL_TIMEx_ConfigBreakInput+0x238>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b80      	cmp	r3, #128	; 0x80
 800bcba:	f000 8096 	beq.w	800bdea <HAL_TIMEx_ConfigBreakInput+0x15e>
 800bcbe:	2b80      	cmp	r3, #128	; 0x80
 800bcc0:	f200 809c 	bhi.w	800bdfc <HAL_TIMEx_ConfigBreakInput+0x170>
 800bcc4:	2b20      	cmp	r3, #32
 800bcc6:	d849      	bhi.n	800bd5c <HAL_TIMEx_ConfigBreakInput+0xd0>
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 8097 	beq.w	800bdfc <HAL_TIMEx_ConfigBreakInput+0x170>
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	2b1f      	cmp	r3, #31
 800bcd2:	f200 8093 	bhi.w	800bdfc <HAL_TIMEx_ConfigBreakInput+0x170>
 800bcd6:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <HAL_TIMEx_ConfigBreakInput+0x50>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bd63 	.word	0x0800bd63
 800bce0:	0800bd77 	.word	0x0800bd77
 800bce4:	0800bdfd 	.word	0x0800bdfd
 800bce8:	0800bd8b 	.word	0x0800bd8b
 800bcec:	0800bdfd 	.word	0x0800bdfd
 800bcf0:	0800bdfd 	.word	0x0800bdfd
 800bcf4:	0800bdfd 	.word	0x0800bdfd
 800bcf8:	0800bd9f 	.word	0x0800bd9f
 800bcfc:	0800bdfd 	.word	0x0800bdfd
 800bd00:	0800bdfd 	.word	0x0800bdfd
 800bd04:	0800bdfd 	.word	0x0800bdfd
 800bd08:	0800bdfd 	.word	0x0800bdfd
 800bd0c:	0800bdfd 	.word	0x0800bdfd
 800bd10:	0800bdfd 	.word	0x0800bdfd
 800bd14:	0800bdfd 	.word	0x0800bdfd
 800bd18:	0800bdb3 	.word	0x0800bdb3
 800bd1c:	0800bdfd 	.word	0x0800bdfd
 800bd20:	0800bdfd 	.word	0x0800bdfd
 800bd24:	0800bdfd 	.word	0x0800bdfd
 800bd28:	0800bdfd 	.word	0x0800bdfd
 800bd2c:	0800bdfd 	.word	0x0800bdfd
 800bd30:	0800bdfd 	.word	0x0800bdfd
 800bd34:	0800bdfd 	.word	0x0800bdfd
 800bd38:	0800bdfd 	.word	0x0800bdfd
 800bd3c:	0800bdfd 	.word	0x0800bdfd
 800bd40:	0800bdfd 	.word	0x0800bdfd
 800bd44:	0800bdfd 	.word	0x0800bdfd
 800bd48:	0800bdfd 	.word	0x0800bdfd
 800bd4c:	0800bdfd 	.word	0x0800bdfd
 800bd50:	0800bdfd 	.word	0x0800bdfd
 800bd54:	0800bdfd 	.word	0x0800bdfd
 800bd58:	0800bdc7 	.word	0x0800bdc7
 800bd5c:	2b40      	cmp	r3, #64	; 0x40
 800bd5e:	d03b      	beq.n	800bdd8 <HAL_TIMEx_ConfigBreakInput+0x14c>
 800bd60:	e04c      	b.n	800bdfc <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800bd62:	2301      	movs	r3, #1
 800bd64:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800bd66:	2300      	movs	r3, #0
 800bd68:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800bd6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd6e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800bd70:	2309      	movs	r3, #9
 800bd72:	617b      	str	r3, [r7, #20]
      break;
 800bd74:	e04b      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800bd76:	2302      	movs	r3, #2
 800bd78:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800bd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd82:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800bd84:	230a      	movs	r3, #10
 800bd86:	617b      	str	r3, [r7, #20]
      break;
 800bd88:	e041      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800bd8a:	2304      	movs	r3, #4
 800bd8c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800bd8e:	2302      	movs	r3, #2
 800bd90:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800bd92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd96:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800bd98:	230b      	movs	r3, #11
 800bd9a:	617b      	str	r3, [r7, #20]
      break;
 800bd9c:	e037      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800bd9e:	2308      	movs	r3, #8
 800bda0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800bda2:	2303      	movs	r3, #3
 800bda4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800bda6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdaa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800bdac:	230c      	movs	r3, #12
 800bdae:	617b      	str	r3, [r7, #20]
      break;
 800bdb0:	e02d      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800bdb2:	2310      	movs	r3, #16
 800bdb4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800bdb6:	2304      	movs	r3, #4
 800bdb8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800bdba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdbe:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800bdc0:	230d      	movs	r3, #13
 800bdc2:	617b      	str	r3, [r7, #20]
      break;
 800bdc4:	e023      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800bdc6:	2320      	movs	r3, #32
 800bdc8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800bdca:	2305      	movs	r3, #5
 800bdcc:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
      break;
 800bdd6:	e01a      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 800bdd8:	2340      	movs	r3, #64	; 0x40
 800bdda:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800bddc:	2306      	movs	r3, #6
 800bdde:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	617b      	str	r3, [r7, #20]
      break;
 800bde8:	e011      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800bdea:	2380      	movs	r3, #128	; 0x80
 800bdec:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800bdee:	2307      	movs	r3, #7
 800bdf0:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]
      break;
 800bdfa:	e008      	b.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800be04:	2300      	movs	r3, #0
 800be06:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	617b      	str	r3, [r7, #20]
      break;
 800be0c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d003      	beq.n	800be1c <HAL_TIMEx_ConfigBreakInput+0x190>
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	2b02      	cmp	r3, #2
 800be18:	d025      	beq.n	800be66 <HAL_TIMEx_ConfigBreakInput+0x1da>
 800be1a:	e049      	b.n	800beb0 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be22:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	43db      	mvns	r3, r3
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	4013      	ands	r3, r2
 800be2c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685a      	ldr	r2, [r3, #4]
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	409a      	lsls	r2, r3
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	4013      	ands	r3, r2
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	43db      	mvns	r3, r3
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	4013      	ands	r3, r2
 800be48:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	689a      	ldr	r2, [r3, #8]
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	409a      	lsls	r2, r3
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	4013      	ands	r3, r2
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	4313      	orrs	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800be64:	e028      	b.n	800beb8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be6c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	43db      	mvns	r3, r3
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4013      	ands	r3, r2
 800be76:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685a      	ldr	r2, [r3, #4]
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	409a      	lsls	r2, r3
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	4013      	ands	r3, r2
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	4313      	orrs	r3, r2
 800be88:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	43db      	mvns	r3, r3
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	4013      	ands	r3, r2
 800be92:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	409a      	lsls	r2, r3
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	4013      	ands	r3, r2
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800beae:	e003      	b.n	800beb8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800beb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	372c      	adds	r7, #44	; 0x2c
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	2204      	movs	r2, #4
 800bf70:	fa02 f303 	lsl.w	r3, r2, r3
 800bf74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	43db      	mvns	r3, r3
 800bf7e:	401a      	ands	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1a      	ldr	r2, [r3, #32]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 031f 	and.w	r3, r3, #31
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	fa01 f303 	lsl.w	r3, r1, r3
 800bf94:	431a      	orrs	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e042      	b.n	800c03e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7f8 fc30 	bl	8004830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2224      	movs	r2, #36	; 0x24
 800bfd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f022 0201 	bic.w	r2, r2, #1
 800bfe6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fbf7 	bl	800c7dc <UART_SetConfig>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d101      	bne.n	800bff8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e022      	b.n	800c03e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fee7 	bl	800cdd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c014:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c024:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f042 0201 	orr.w	r2, r2, #1
 800c034:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 ff6e 	bl	800cf18 <UART_CheckIdleState>
 800c03c:	4603      	mov	r3, r0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08a      	sub	sp, #40	; 0x28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	4613      	mov	r3, r2
 800c054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing == Убедитесь, что процесс передачи данных еще не продолжается */
  if (huart->gState == HAL_UART_STATE_READY)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c05c:	2b20      	cmp	r3, #32
 800c05e:	d17a      	bne.n	800c156 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d002      	beq.n	800c06c <HAL_UART_Transmit_DMA+0x24>
 800c066:	88fb      	ldrh	r3, [r7, #6]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c06c:	2301      	movs	r3, #1
 800c06e:	e073      	b.n	800c158 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c076:	2b01      	cmp	r3, #1
 800c078:	d101      	bne.n	800c07e <HAL_UART_Transmit_DMA+0x36>
 800c07a:	2302      	movs	r3, #2
 800c07c:	e06c      	b.n	800c158 <HAL_UART_Transmit_DMA+0x110>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	88fa      	ldrh	r2, [r7, #6]
 800c090:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	88fa      	ldrh	r2, [r7, #6]
 800c098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2221      	movs	r2, #33	; 0x21
 800c0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d02c      	beq.n	800c10e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b8:	4a29      	ldr	r2, [pc, #164]	; (800c160 <HAL_UART_Transmit_DMA+0x118>)
 800c0ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0c0:	4a28      	ldr	r2, [pc, #160]	; (800c164 <HAL_UART_Transmit_DMA+0x11c>)
 800c0c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0c8:	4a27      	ldr	r2, [pc, #156]	; (800c168 <HAL_UART_Transmit_DMA+0x120>)
 800c0ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0dc:	4619      	mov	r1, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3328      	adds	r3, #40	; 0x28
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	88fb      	ldrh	r3, [r7, #6]
 800c0e8:	f7fa fddc 	bl	8006ca4 <HAL_DMA_Start_IT>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00d      	beq.n	800c10e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e024      	b.n	800c158 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2240      	movs	r2, #64	; 0x40
 800c114:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3308      	adds	r3, #8
 800c124:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	613b      	str	r3, [r7, #16]
   return(result);
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3308      	adds	r3, #8
 800c13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13e:	623a      	str	r2, [r7, #32]
 800c140:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	69f9      	ldr	r1, [r7, #28]
 800c144:	6a3a      	ldr	r2, [r7, #32]
 800c146:	e841 2300 	strex	r3, r2, [r1]
 800c14a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1e5      	bne.n	800c11e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	e000      	b.n	800c158 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c156:	2302      	movs	r3, #2
  }
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3728      	adds	r7, #40	; 0x28
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	0800d28d 	.word	0x0800d28d
 800c164:	0800d327 	.word	0x0800d327
 800c168:	0800d343 	.word	0x0800d343

0800c16c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b0ba      	sub	sp, #232	; 0xe8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c192:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c196:	f640 030f 	movw	r3, #2063	; 0x80f
 800c19a:	4013      	ands	r3, r2
 800c19c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c1a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d11b      	bne.n	800c1e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ac:	f003 0320 	and.w	r3, r3, #32
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d015      	beq.n	800c1e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b8:	f003 0320 	and.w	r3, r3, #32
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d105      	bne.n	800c1cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d009      	beq.n	800c1e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 82d6 	beq.w	800c782 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	4798      	blx	r3
      }
      return;
 800c1de:	e2d0      	b.n	800c782 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 811f 	beq.w	800c428 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1ee:	4b8b      	ldr	r3, [pc, #556]	; (800c41c <HAL_UART_IRQHandler+0x2b0>)
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1fa:	4b89      	ldr	r3, [pc, #548]	; (800c420 <HAL_UART_IRQHandler+0x2b4>)
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 8112 	beq.w	800c428 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c208:	f003 0301 	and.w	r3, r3, #1
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d011      	beq.n	800c234 <HAL_UART_IRQHandler+0xc8>
 800c210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00b      	beq.n	800c234 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2201      	movs	r2, #1
 800c222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c22a:	f043 0201 	orr.w	r2, r3, #1
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c238:	f003 0302 	and.w	r3, r3, #2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d011      	beq.n	800c264 <HAL_UART_IRQHandler+0xf8>
 800c240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2202      	movs	r2, #2
 800c252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c25a:	f043 0204 	orr.w	r2, r3, #4
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c268:	f003 0304 	and.w	r3, r3, #4
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d011      	beq.n	800c294 <HAL_UART_IRQHandler+0x128>
 800c270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00b      	beq.n	800c294 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2204      	movs	r2, #4
 800c282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c28a:	f043 0202 	orr.w	r2, r3, #2
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c298:	f003 0308 	and.w	r3, r3, #8
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d017      	beq.n	800c2d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a4:	f003 0320 	and.w	r3, r3, #32
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d105      	bne.n	800c2b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c2ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c2b0:	4b5a      	ldr	r3, [pc, #360]	; (800c41c <HAL_UART_IRQHandler+0x2b0>)
 800c2b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2208      	movs	r2, #8
 800c2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2c6:	f043 0208 	orr.w	r2, r3, #8
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d012      	beq.n	800c302 <HAL_UART_IRQHandler+0x196>
 800c2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00c      	beq.n	800c302 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f8:	f043 0220 	orr.w	r2, r3, #32
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 823c 	beq.w	800c786 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c312:	f003 0320 	and.w	r3, r3, #32
 800c316:	2b00      	cmp	r3, #0
 800c318:	d013      	beq.n	800c342 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b00      	cmp	r3, #0
 800c324:	d105      	bne.n	800c332 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d007      	beq.n	800c342 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c336:	2b00      	cmp	r3, #0
 800c338:	d003      	beq.n	800c342 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c356:	2b40      	cmp	r3, #64	; 0x40
 800c358:	d005      	beq.n	800c366 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c35a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c35e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c362:	2b00      	cmp	r3, #0
 800c364:	d04f      	beq.n	800c406 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 ff2a 	bl	800d1c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c376:	2b40      	cmp	r3, #64	; 0x40
 800c378:	d141      	bne.n	800c3fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3308      	adds	r3, #8
 800c380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c3a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c3b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c3be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1d9      	bne.n	800c37a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d013      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d2:	4a14      	ldr	r2, [pc, #80]	; (800c424 <HAL_UART_IRQHandler+0x2b8>)
 800c3d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fa fd36 	bl	8006e4c <HAL_DMA_Abort_IT>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d017      	beq.n	800c416 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f4:	e00f      	b.n	800c416 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f9da 	bl	800c7b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3fc:	e00b      	b.n	800c416 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f9d6 	bl	800c7b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c404:	e007      	b.n	800c416 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f9d2 	bl	800c7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c414:	e1b7      	b.n	800c786 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c416:	bf00      	nop
    return;
 800c418:	e1b5      	b.n	800c786 <HAL_UART_IRQHandler+0x61a>
 800c41a:	bf00      	nop
 800c41c:	10000001 	.word	0x10000001
 800c420:	04000120 	.word	0x04000120
 800c424:	0800d3c3 	.word	0x0800d3c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	f040 814a 	bne.w	800c6c6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c436:	f003 0310 	and.w	r3, r3, #16
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 8143 	beq.w	800c6c6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c444:	f003 0310 	and.w	r3, r3, #16
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 813c 	beq.w	800c6c6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2210      	movs	r2, #16
 800c454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c460:	2b40      	cmp	r3, #64	; 0x40
 800c462:	f040 80b5 	bne.w	800c5d0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c472:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 8187 	beq.w	800c78a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c486:	429a      	cmp	r2, r3
 800c488:	f080 817f 	bcs.w	800c78a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 0320 	and.w	r3, r3, #32
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f040 8086 	bne.w	800c5b4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c4de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4e2:	e841 2300 	strex	r3, r2, [r1]
 800c4e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1da      	bne.n	800c4a8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c504:	f023 0301 	bic.w	r3, r3, #1
 800c508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3308      	adds	r3, #8
 800c512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c51a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c51e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e1      	bne.n	800c4f2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3308      	adds	r3, #8
 800c534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c552:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e3      	bne.n	800c52e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57c:	e853 3f00 	ldrex	r3, [r3]
 800c580:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c584:	f023 0310 	bic.w	r3, r3, #16
 800c588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c596:	65bb      	str	r3, [r7, #88]	; 0x58
 800c598:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c59c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e4      	bne.n	800c574 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fa fbf3 	bl	8006d9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f8fb 	bl	800c7c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5ce:	e0dc      	b.n	800c78a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 80ce 	beq.w	800c78e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c5f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 80c9 	beq.w	800c78e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c61e:	647b      	str	r3, [r7, #68]	; 0x44
 800c620:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c626:	e841 2300 	strex	r3, r2, [r1]
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1e4      	bne.n	800c5fc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3308      	adds	r3, #8
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	e853 3f00 	ldrex	r3, [r3]
 800c640:	623b      	str	r3, [r7, #32]
   return(result);
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c648:	f023 0301 	bic.w	r3, r3, #1
 800c64c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3308      	adds	r3, #8
 800c656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c65a:	633a      	str	r2, [r7, #48]	; 0x30
 800c65c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c662:	e841 2300 	strex	r3, r2, [r1]
 800c666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e1      	bne.n	800c632 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	e853 3f00 	ldrex	r3, [r3]
 800c68e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f023 0310 	bic.w	r3, r3, #16
 800c696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6a4:	61fb      	str	r3, [r7, #28]
 800c6a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a8:	69b9      	ldr	r1, [r7, #24]
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	e841 2300 	strex	r3, r2, [r1]
 800c6b0:	617b      	str	r3, [r7, #20]
   return(result);
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e4      	bne.n	800c682 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f880 	bl	800c7c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6c4:	e063      	b.n	800c78e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00e      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x584>
 800c6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d008      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c6e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 ff14 	bl	800d516 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6ee:	e051      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d014      	beq.n	800c726 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c704:	2b00      	cmp	r3, #0
 800c706:	d105      	bne.n	800c714 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c70c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d008      	beq.n	800c726 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d03a      	beq.n	800c792 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
    }
    return;
 800c724:	e035      	b.n	800c792 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d009      	beq.n	800c746 <HAL_UART_IRQHandler+0x5da>
 800c732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fe55 	bl	800d3ee <UART_EndTransmit_IT>
    return;
 800c744:	e026      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c74a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d009      	beq.n	800c766 <HAL_UART_IRQHandler+0x5fa>
 800c752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c756:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 feed 	bl	800d53e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c764:	e016      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c76a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d010      	beq.n	800c794 <HAL_UART_IRQHandler+0x628>
 800c772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c776:	2b00      	cmp	r3, #0
 800c778:	da0c      	bge.n	800c794 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fed5 	bl	800d52a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c780:	e008      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
      return;
 800c782:	bf00      	nop
 800c784:	e006      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
    return;
 800c786:	bf00      	nop
 800c788:	e004      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
      return;
 800c78a:	bf00      	nop
 800c78c:	e002      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
      return;
 800c78e:	bf00      	nop
 800c790:	e000      	b.n	800c794 <HAL_UART_IRQHandler+0x628>
    return;
 800c792:	bf00      	nop
  }
}
 800c794:	37e8      	adds	r7, #232	; 0xe8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop

0800c79c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7e0:	b08c      	sub	sp, #48	; 0x30
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	69db      	ldr	r3, [r3, #28]
 800c800:	4313      	orrs	r3, r2
 800c802:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	4baa      	ldr	r3, [pc, #680]	; (800cab4 <UART_SetConfig+0x2d8>)
 800c80c:	4013      	ands	r3, r2
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	6812      	ldr	r2, [r2, #0]
 800c812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c814:	430b      	orrs	r3, r1
 800c816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	68da      	ldr	r2, [r3, #12]
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	699b      	ldr	r3, [r3, #24]
 800c832:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a9f      	ldr	r2, [pc, #636]	; (800cab8 <UART_SetConfig+0x2dc>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d004      	beq.n	800c848 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c844:	4313      	orrs	r3, r2
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c852:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	6812      	ldr	r2, [r2, #0]
 800c85a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c85c:	430b      	orrs	r3, r1
 800c85e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c866:	f023 010f 	bic.w	r1, r3, #15
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	430a      	orrs	r2, r1
 800c874:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a90      	ldr	r2, [pc, #576]	; (800cabc <UART_SetConfig+0x2e0>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d125      	bne.n	800c8cc <UART_SetConfig+0xf0>
 800c880:	4b8f      	ldr	r3, [pc, #572]	; (800cac0 <UART_SetConfig+0x2e4>)
 800c882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d81a      	bhi.n	800c8c4 <UART_SetConfig+0xe8>
 800c88e:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <UART_SetConfig+0xb8>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8a5 	.word	0x0800c8a5
 800c898:	0800c8b5 	.word	0x0800c8b5
 800c89c:	0800c8ad 	.word	0x0800c8ad
 800c8a0:	0800c8bd 	.word	0x0800c8bd
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8aa:	e116      	b.n	800cada <UART_SetConfig+0x2fe>
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8b2:	e112      	b.n	800cada <UART_SetConfig+0x2fe>
 800c8b4:	2304      	movs	r3, #4
 800c8b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ba:	e10e      	b.n	800cada <UART_SetConfig+0x2fe>
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8c2:	e10a      	b.n	800cada <UART_SetConfig+0x2fe>
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ca:	e106      	b.n	800cada <UART_SetConfig+0x2fe>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a7c      	ldr	r2, [pc, #496]	; (800cac4 <UART_SetConfig+0x2e8>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d138      	bne.n	800c948 <UART_SetConfig+0x16c>
 800c8d6:	4b7a      	ldr	r3, [pc, #488]	; (800cac0 <UART_SetConfig+0x2e4>)
 800c8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8dc:	f003 030c 	and.w	r3, r3, #12
 800c8e0:	2b0c      	cmp	r3, #12
 800c8e2:	d82d      	bhi.n	800c940 <UART_SetConfig+0x164>
 800c8e4:	a201      	add	r2, pc, #4	; (adr r2, 800c8ec <UART_SetConfig+0x110>)
 800c8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ea:	bf00      	nop
 800c8ec:	0800c921 	.word	0x0800c921
 800c8f0:	0800c941 	.word	0x0800c941
 800c8f4:	0800c941 	.word	0x0800c941
 800c8f8:	0800c941 	.word	0x0800c941
 800c8fc:	0800c931 	.word	0x0800c931
 800c900:	0800c941 	.word	0x0800c941
 800c904:	0800c941 	.word	0x0800c941
 800c908:	0800c941 	.word	0x0800c941
 800c90c:	0800c929 	.word	0x0800c929
 800c910:	0800c941 	.word	0x0800c941
 800c914:	0800c941 	.word	0x0800c941
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c939 	.word	0x0800c939
 800c920:	2300      	movs	r3, #0
 800c922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c926:	e0d8      	b.n	800cada <UART_SetConfig+0x2fe>
 800c928:	2302      	movs	r3, #2
 800c92a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c92e:	e0d4      	b.n	800cada <UART_SetConfig+0x2fe>
 800c930:	2304      	movs	r3, #4
 800c932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c936:	e0d0      	b.n	800cada <UART_SetConfig+0x2fe>
 800c938:	2308      	movs	r3, #8
 800c93a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c93e:	e0cc      	b.n	800cada <UART_SetConfig+0x2fe>
 800c940:	2310      	movs	r3, #16
 800c942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c946:	e0c8      	b.n	800cada <UART_SetConfig+0x2fe>
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a5e      	ldr	r2, [pc, #376]	; (800cac8 <UART_SetConfig+0x2ec>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d125      	bne.n	800c99e <UART_SetConfig+0x1c2>
 800c952:	4b5b      	ldr	r3, [pc, #364]	; (800cac0 <UART_SetConfig+0x2e4>)
 800c954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c958:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c95c:	2b30      	cmp	r3, #48	; 0x30
 800c95e:	d016      	beq.n	800c98e <UART_SetConfig+0x1b2>
 800c960:	2b30      	cmp	r3, #48	; 0x30
 800c962:	d818      	bhi.n	800c996 <UART_SetConfig+0x1ba>
 800c964:	2b20      	cmp	r3, #32
 800c966:	d00a      	beq.n	800c97e <UART_SetConfig+0x1a2>
 800c968:	2b20      	cmp	r3, #32
 800c96a:	d814      	bhi.n	800c996 <UART_SetConfig+0x1ba>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <UART_SetConfig+0x19a>
 800c970:	2b10      	cmp	r3, #16
 800c972:	d008      	beq.n	800c986 <UART_SetConfig+0x1aa>
 800c974:	e00f      	b.n	800c996 <UART_SetConfig+0x1ba>
 800c976:	2300      	movs	r3, #0
 800c978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c97c:	e0ad      	b.n	800cada <UART_SetConfig+0x2fe>
 800c97e:	2302      	movs	r3, #2
 800c980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c984:	e0a9      	b.n	800cada <UART_SetConfig+0x2fe>
 800c986:	2304      	movs	r3, #4
 800c988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c98c:	e0a5      	b.n	800cada <UART_SetConfig+0x2fe>
 800c98e:	2308      	movs	r3, #8
 800c990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c994:	e0a1      	b.n	800cada <UART_SetConfig+0x2fe>
 800c996:	2310      	movs	r3, #16
 800c998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c99c:	e09d      	b.n	800cada <UART_SetConfig+0x2fe>
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a4a      	ldr	r2, [pc, #296]	; (800cacc <UART_SetConfig+0x2f0>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d125      	bne.n	800c9f4 <UART_SetConfig+0x218>
 800c9a8:	4b45      	ldr	r3, [pc, #276]	; (800cac0 <UART_SetConfig+0x2e4>)
 800c9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c9b2:	2bc0      	cmp	r3, #192	; 0xc0
 800c9b4:	d016      	beq.n	800c9e4 <UART_SetConfig+0x208>
 800c9b6:	2bc0      	cmp	r3, #192	; 0xc0
 800c9b8:	d818      	bhi.n	800c9ec <UART_SetConfig+0x210>
 800c9ba:	2b80      	cmp	r3, #128	; 0x80
 800c9bc:	d00a      	beq.n	800c9d4 <UART_SetConfig+0x1f8>
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d814      	bhi.n	800c9ec <UART_SetConfig+0x210>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <UART_SetConfig+0x1f0>
 800c9c6:	2b40      	cmp	r3, #64	; 0x40
 800c9c8:	d008      	beq.n	800c9dc <UART_SetConfig+0x200>
 800c9ca:	e00f      	b.n	800c9ec <UART_SetConfig+0x210>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9d2:	e082      	b.n	800cada <UART_SetConfig+0x2fe>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9da:	e07e      	b.n	800cada <UART_SetConfig+0x2fe>
 800c9dc:	2304      	movs	r3, #4
 800c9de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9e2:	e07a      	b.n	800cada <UART_SetConfig+0x2fe>
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9ea:	e076      	b.n	800cada <UART_SetConfig+0x2fe>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9f2:	e072      	b.n	800cada <UART_SetConfig+0x2fe>
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a35      	ldr	r2, [pc, #212]	; (800cad0 <UART_SetConfig+0x2f4>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d12a      	bne.n	800ca54 <UART_SetConfig+0x278>
 800c9fe:	4b30      	ldr	r3, [pc, #192]	; (800cac0 <UART_SetConfig+0x2e4>)
 800ca00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca0c:	d01a      	beq.n	800ca44 <UART_SetConfig+0x268>
 800ca0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca12:	d81b      	bhi.n	800ca4c <UART_SetConfig+0x270>
 800ca14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca18:	d00c      	beq.n	800ca34 <UART_SetConfig+0x258>
 800ca1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca1e:	d815      	bhi.n	800ca4c <UART_SetConfig+0x270>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d003      	beq.n	800ca2c <UART_SetConfig+0x250>
 800ca24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca28:	d008      	beq.n	800ca3c <UART_SetConfig+0x260>
 800ca2a:	e00f      	b.n	800ca4c <UART_SetConfig+0x270>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca32:	e052      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca34:	2302      	movs	r3, #2
 800ca36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca3a:	e04e      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca3c:	2304      	movs	r3, #4
 800ca3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca42:	e04a      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca44:	2308      	movs	r3, #8
 800ca46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca4a:	e046      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca4c:	2310      	movs	r3, #16
 800ca4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca52:	e042      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a17      	ldr	r2, [pc, #92]	; (800cab8 <UART_SetConfig+0x2dc>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d13a      	bne.n	800cad4 <UART_SetConfig+0x2f8>
 800ca5e:	4b18      	ldr	r3, [pc, #96]	; (800cac0 <UART_SetConfig+0x2e4>)
 800ca60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca6c:	d01a      	beq.n	800caa4 <UART_SetConfig+0x2c8>
 800ca6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca72:	d81b      	bhi.n	800caac <UART_SetConfig+0x2d0>
 800ca74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca78:	d00c      	beq.n	800ca94 <UART_SetConfig+0x2b8>
 800ca7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca7e:	d815      	bhi.n	800caac <UART_SetConfig+0x2d0>
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <UART_SetConfig+0x2b0>
 800ca84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca88:	d008      	beq.n	800ca9c <UART_SetConfig+0x2c0>
 800ca8a:	e00f      	b.n	800caac <UART_SetConfig+0x2d0>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca92:	e022      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca94:	2302      	movs	r3, #2
 800ca96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca9a:	e01e      	b.n	800cada <UART_SetConfig+0x2fe>
 800ca9c:	2304      	movs	r3, #4
 800ca9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caa2:	e01a      	b.n	800cada <UART_SetConfig+0x2fe>
 800caa4:	2308      	movs	r3, #8
 800caa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caaa:	e016      	b.n	800cada <UART_SetConfig+0x2fe>
 800caac:	2310      	movs	r3, #16
 800caae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cab2:	e012      	b.n	800cada <UART_SetConfig+0x2fe>
 800cab4:	cfff69f3 	.word	0xcfff69f3
 800cab8:	40008000 	.word	0x40008000
 800cabc:	40013800 	.word	0x40013800
 800cac0:	40021000 	.word	0x40021000
 800cac4:	40004400 	.word	0x40004400
 800cac8:	40004800 	.word	0x40004800
 800cacc:	40004c00 	.word	0x40004c00
 800cad0:	40005000 	.word	0x40005000
 800cad4:	2310      	movs	r3, #16
 800cad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4aae      	ldr	r2, [pc, #696]	; (800cd98 <UART_SetConfig+0x5bc>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	f040 8097 	bne.w	800cc14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800caea:	2b08      	cmp	r3, #8
 800caec:	d823      	bhi.n	800cb36 <UART_SetConfig+0x35a>
 800caee:	a201      	add	r2, pc, #4	; (adr r2, 800caf4 <UART_SetConfig+0x318>)
 800caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf4:	0800cb19 	.word	0x0800cb19
 800caf8:	0800cb37 	.word	0x0800cb37
 800cafc:	0800cb21 	.word	0x0800cb21
 800cb00:	0800cb37 	.word	0x0800cb37
 800cb04:	0800cb27 	.word	0x0800cb27
 800cb08:	0800cb37 	.word	0x0800cb37
 800cb0c:	0800cb37 	.word	0x0800cb37
 800cb10:	0800cb37 	.word	0x0800cb37
 800cb14:	0800cb2f 	.word	0x0800cb2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb18:	f7fd f890 	bl	8009c3c <HAL_RCC_GetPCLK1Freq>
 800cb1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb1e:	e010      	b.n	800cb42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb20:	4b9e      	ldr	r3, [pc, #632]	; (800cd9c <UART_SetConfig+0x5c0>)
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb24:	e00d      	b.n	800cb42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb26:	f7fd f81b 	bl	8009b60 <HAL_RCC_GetSysClockFreq>
 800cb2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb2c:	e009      	b.n	800cb42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb34:	e005      	b.n	800cb42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cb36:	2300      	movs	r3, #0
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cb40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 8130 	beq.w	800cdaa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4e:	4a94      	ldr	r2, [pc, #592]	; (800cda0 <UART_SetConfig+0x5c4>)
 800cb50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb54:	461a      	mov	r2, r3
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	4613      	mov	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4413      	add	r3, r2
 800cb68:	69ba      	ldr	r2, [r7, #24]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d305      	bcc.n	800cb7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d903      	bls.n	800cb82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cb80:	e113      	b.n	800cdaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	2200      	movs	r2, #0
 800cb86:	60bb      	str	r3, [r7, #8]
 800cb88:	60fa      	str	r2, [r7, #12]
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	4a84      	ldr	r2, [pc, #528]	; (800cda0 <UART_SetConfig+0x5c4>)
 800cb90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	2200      	movs	r2, #0
 800cb98:	603b      	str	r3, [r7, #0]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cba4:	f7f4 f8e8 	bl	8000d78 <__aeabi_uldivmod>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4610      	mov	r0, r2
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	f04f 0300 	mov.w	r3, #0
 800cbb8:	020b      	lsls	r3, r1, #8
 800cbba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbbe:	0202      	lsls	r2, r0, #8
 800cbc0:	6979      	ldr	r1, [r7, #20]
 800cbc2:	6849      	ldr	r1, [r1, #4]
 800cbc4:	0849      	lsrs	r1, r1, #1
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	460c      	mov	r4, r1
 800cbca:	4605      	mov	r5, r0
 800cbcc:	eb12 0804 	adds.w	r8, r2, r4
 800cbd0:	eb43 0905 	adc.w	r9, r3, r5
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	469a      	mov	sl, r3
 800cbdc:	4693      	mov	fp, r2
 800cbde:	4652      	mov	r2, sl
 800cbe0:	465b      	mov	r3, fp
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	f7f4 f8c7 	bl	8000d78 <__aeabi_uldivmod>
 800cbea:	4602      	mov	r2, r0
 800cbec:	460b      	mov	r3, r1
 800cbee:	4613      	mov	r3, r2
 800cbf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbf8:	d308      	bcc.n	800cc0c <UART_SetConfig+0x430>
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc00:	d204      	bcs.n	800cc0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	6a3a      	ldr	r2, [r7, #32]
 800cc08:	60da      	str	r2, [r3, #12]
 800cc0a:	e0ce      	b.n	800cdaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc12:	e0ca      	b.n	800cdaa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc1c:	d166      	bne.n	800ccec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cc1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc22:	2b08      	cmp	r3, #8
 800cc24:	d827      	bhi.n	800cc76 <UART_SetConfig+0x49a>
 800cc26:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <UART_SetConfig+0x450>)
 800cc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2c:	0800cc51 	.word	0x0800cc51
 800cc30:	0800cc59 	.word	0x0800cc59
 800cc34:	0800cc61 	.word	0x0800cc61
 800cc38:	0800cc77 	.word	0x0800cc77
 800cc3c:	0800cc67 	.word	0x0800cc67
 800cc40:	0800cc77 	.word	0x0800cc77
 800cc44:	0800cc77 	.word	0x0800cc77
 800cc48:	0800cc77 	.word	0x0800cc77
 800cc4c:	0800cc6f 	.word	0x0800cc6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc50:	f7fc fff4 	bl	8009c3c <HAL_RCC_GetPCLK1Freq>
 800cc54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc56:	e014      	b.n	800cc82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc58:	f7fd f806 	bl	8009c68 <HAL_RCC_GetPCLK2Freq>
 800cc5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc5e:	e010      	b.n	800cc82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc60:	4b4e      	ldr	r3, [pc, #312]	; (800cd9c <UART_SetConfig+0x5c0>)
 800cc62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc64:	e00d      	b.n	800cc82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc66:	f7fc ff7b 	bl	8009b60 <HAL_RCC_GetSysClockFreq>
 800cc6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc6c:	e009      	b.n	800cc82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc74:	e005      	b.n	800cc82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cc76:	2300      	movs	r3, #0
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cc80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 8090 	beq.w	800cdaa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8e:	4a44      	ldr	r2, [pc, #272]	; (800cda0 <UART_SetConfig+0x5c4>)
 800cc90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc94:	461a      	mov	r2, r3
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc9c:	005a      	lsls	r2, r3, #1
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	085b      	lsrs	r3, r3, #1
 800cca4:	441a      	add	r2, r3
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	2b0f      	cmp	r3, #15
 800ccb4:	d916      	bls.n	800cce4 <UART_SetConfig+0x508>
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccbc:	d212      	bcs.n	800cce4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f023 030f 	bic.w	r3, r3, #15
 800ccc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	085b      	lsrs	r3, r3, #1
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	8bfb      	ldrh	r3, [r7, #30]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	8bfa      	ldrh	r2, [r7, #30]
 800cce0:	60da      	str	r2, [r3, #12]
 800cce2:	e062      	b.n	800cdaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ccea:	e05e      	b.n	800cdaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ccec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccf0:	2b08      	cmp	r3, #8
 800ccf2:	d828      	bhi.n	800cd46 <UART_SetConfig+0x56a>
 800ccf4:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <UART_SetConfig+0x520>)
 800ccf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfa:	bf00      	nop
 800ccfc:	0800cd21 	.word	0x0800cd21
 800cd00:	0800cd29 	.word	0x0800cd29
 800cd04:	0800cd31 	.word	0x0800cd31
 800cd08:	0800cd47 	.word	0x0800cd47
 800cd0c:	0800cd37 	.word	0x0800cd37
 800cd10:	0800cd47 	.word	0x0800cd47
 800cd14:	0800cd47 	.word	0x0800cd47
 800cd18:	0800cd47 	.word	0x0800cd47
 800cd1c:	0800cd3f 	.word	0x0800cd3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd20:	f7fc ff8c 	bl	8009c3c <HAL_RCC_GetPCLK1Freq>
 800cd24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd26:	e014      	b.n	800cd52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd28:	f7fc ff9e 	bl	8009c68 <HAL_RCC_GetPCLK2Freq>
 800cd2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd2e:	e010      	b.n	800cd52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd30:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <UART_SetConfig+0x5c0>)
 800cd32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd34:	e00d      	b.n	800cd52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd36:	f7fc ff13 	bl	8009b60 <HAL_RCC_GetSysClockFreq>
 800cd3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd3c:	e009      	b.n	800cd52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd44:	e005      	b.n	800cd52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cd50:	bf00      	nop
    }

    if (pclk != 0U)
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d028      	beq.n	800cdaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	4a10      	ldr	r2, [pc, #64]	; (800cda0 <UART_SetConfig+0x5c4>)
 800cd5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd62:	461a      	mov	r2, r3
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	085b      	lsrs	r3, r3, #1
 800cd70:	441a      	add	r2, r3
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	2b0f      	cmp	r3, #15
 800cd80:	d910      	bls.n	800cda4 <UART_SetConfig+0x5c8>
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd88:	d20c      	bcs.n	800cda4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	60da      	str	r2, [r3, #12]
 800cd94:	e009      	b.n	800cdaa <UART_SetConfig+0x5ce>
 800cd96:	bf00      	nop
 800cd98:	40008000 	.word	0x40008000
 800cd9c:	00f42400 	.word	0x00f42400
 800cda0:	08015404 	.word	0x08015404
      }
      else
      {
        ret = HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cdc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3730      	adds	r7, #48	; 0x30
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cdd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00a      	beq.n	800cdfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	430a      	orrs	r2, r1
 800cdfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce02:	f003 0302 	and.w	r3, r3, #2
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00a      	beq.n	800ce20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	430a      	orrs	r2, r1
 800ce1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00a      	beq.n	800ce42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	430a      	orrs	r2, r1
 800ce40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce46:	f003 0308 	and.w	r3, r3, #8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00a      	beq.n	800ce64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	430a      	orrs	r2, r1
 800ce62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce68:	f003 0310 	and.w	r3, r3, #16
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8a:	f003 0320 	and.w	r3, r3, #32
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00a      	beq.n	800cea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	430a      	orrs	r2, r1
 800cea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01a      	beq.n	800ceea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	430a      	orrs	r2, r1
 800cec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ced2:	d10a      	bne.n	800ceea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	430a      	orrs	r2, r1
 800cee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	430a      	orrs	r2, r1
 800cf0a:	605a      	str	r2, [r3, #4]
  }
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af02      	add	r7, sp, #8
 800cf1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf28:	f7f7 feba 	bl	8004ca0 <HAL_GetTick>
 800cf2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 0308 	and.w	r3, r3, #8
 800cf38:	2b08      	cmp	r3, #8
 800cf3a:	d10e      	bne.n	800cf5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f82f 	bl	800cfae <UART_WaitOnFlagUntilTimeout>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e025      	b.n	800cfa6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0304 	and.w	r3, r3, #4
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d10e      	bne.n	800cf86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 f819 	bl	800cfae <UART_WaitOnFlagUntilTimeout>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e00f      	b.n	800cfa6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2220      	movs	r2, #32
 800cf8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2220      	movs	r2, #32
 800cf92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b09c      	sub	sp, #112	; 0x70
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	603b      	str	r3, [r7, #0]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfbe:	e0a9      	b.n	800d114 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc6:	f000 80a5 	beq.w	800d114 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfca:	f7f7 fe69 	bl	8004ca0 <HAL_GetTick>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d302      	bcc.n	800cfe0 <UART_WaitOnFlagUntilTimeout+0x32>
 800cfda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d140      	bne.n	800d062 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe8:	e853 3f00 	ldrex	r3, [r3]
 800cfec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cff4:	667b      	str	r3, [r7, #100]	; 0x64
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d000:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d002:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d006:	e841 2300 	strex	r3, r2, [r1]
 800d00a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1e6      	bne.n	800cfe0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3308      	adds	r3, #8
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01c:	e853 3f00 	ldrex	r3, [r3]
 800d020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	f023 0301 	bic.w	r3, r3, #1
 800d028:	663b      	str	r3, [r7, #96]	; 0x60
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3308      	adds	r3, #8
 800d030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d032:	64ba      	str	r2, [r7, #72]	; 0x48
 800d034:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d03a:	e841 2300 	strex	r3, r2, [r1]
 800d03e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1e5      	bne.n	800d012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2220      	movs	r2, #32
 800d04a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2220      	movs	r2, #32
 800d052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d05e:	2303      	movs	r3, #3
 800d060:	e069      	b.n	800d136 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d051      	beq.n	800d114 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	69db      	ldr	r3, [r3, #28]
 800d076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d07a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d07e:	d149      	bne.n	800d114 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d088:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	e853 3f00 	ldrex	r3, [r3]
 800d096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d09e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d0aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b0:	e841 2300 	strex	r3, r2, [r1]
 800d0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1e6      	bne.n	800d08a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	e853 3f00 	ldrex	r3, [r3]
 800d0ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f023 0301 	bic.w	r3, r3, #1
 800d0d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3308      	adds	r3, #8
 800d0da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0dc:	623a      	str	r2, [r7, #32]
 800d0de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e0:	69f9      	ldr	r1, [r7, #28]
 800d0e2:	6a3a      	ldr	r2, [r7, #32]
 800d0e4:	e841 2300 	strex	r3, r2, [r1]
 800d0e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e5      	bne.n	800d0bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2220      	movs	r2, #32
 800d104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e010      	b.n	800d136 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	69da      	ldr	r2, [r3, #28]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	4013      	ands	r3, r2
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	429a      	cmp	r2, r3
 800d122:	bf0c      	ite	eq
 800d124:	2301      	moveq	r3, #1
 800d126:	2300      	movne	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	461a      	mov	r2, r3
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	429a      	cmp	r2, r3
 800d130:	f43f af46 	beq.w	800cfc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3770      	adds	r7, #112	; 0x70
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d13e:	b480      	push	{r7}
 800d140:	b08f      	sub	sp, #60	; 0x3c
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	e853 3f00 	ldrex	r3, [r3]
 800d152:	61fb      	str	r3, [r7, #28]
   return(result);
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d15a:	637b      	str	r3, [r7, #52]	; 0x34
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	461a      	mov	r2, r3
 800d162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d164:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d166:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d16c:	e841 2300 	strex	r3, r2, [r1]
 800d170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1e6      	bne.n	800d146 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	3308      	adds	r3, #8
 800d17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	e853 3f00 	ldrex	r3, [r3]
 800d186:	60bb      	str	r3, [r7, #8]
   return(result);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d18e:	633b      	str	r3, [r7, #48]	; 0x30
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3308      	adds	r3, #8
 800d196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d198:	61ba      	str	r2, [r7, #24]
 800d19a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19c:	6979      	ldr	r1, [r7, #20]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	e841 2300 	strex	r3, r2, [r1]
 800d1a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e5      	bne.n	800d178 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d1b4:	bf00      	nop
 800d1b6:	373c      	adds	r7, #60	; 0x3c
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b095      	sub	sp, #84	; 0x54
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d0:	e853 3f00 	ldrex	r3, [r3]
 800d1d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e6:	643b      	str	r3, [r7, #64]	; 0x40
 800d1e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1ee:	e841 2300 	strex	r3, r2, [r1]
 800d1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e6      	bne.n	800d1c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	61fb      	str	r3, [r7, #28]
   return(result);
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d210:	f023 0301 	bic.w	r3, r3, #1
 800d214:	64bb      	str	r3, [r7, #72]	; 0x48
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3308      	adds	r3, #8
 800d21c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d21e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e3      	bne.n	800d1fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d236:	2b01      	cmp	r3, #1
 800d238:	d118      	bne.n	800d26c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	e853 3f00 	ldrex	r3, [r3]
 800d246:	60bb      	str	r3, [r7, #8]
   return(result);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	f023 0310 	bic.w	r3, r3, #16
 800d24e:	647b      	str	r3, [r7, #68]	; 0x44
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	461a      	mov	r2, r3
 800d256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d258:	61bb      	str	r3, [r7, #24]
 800d25a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25c:	6979      	ldr	r1, [r7, #20]
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	e841 2300 	strex	r3, r2, [r1]
 800d264:	613b      	str	r3, [r7, #16]
   return(result);
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1e6      	bne.n	800d23a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2220      	movs	r2, #32
 800d270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d280:	bf00      	nop
 800d282:	3754      	adds	r7, #84	; 0x54
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b090      	sub	sp, #64	; 0x40
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d298:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 0320 	and.w	r3, r3, #32
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d137      	bne.n	800d318 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	e853 3f00 	ldrex	r3, [r3]
 800d2be:	623b      	str	r3, [r7, #32]
   return(result);
 800d2c0:	6a3b      	ldr	r3, [r7, #32]
 800d2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2d0:	633a      	str	r2, [r7, #48]	; 0x30
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2d8:	e841 2300 	strex	r3, r2, [r1]
 800d2dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1e5      	bne.n	800d2b0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	e853 3f00 	ldrex	r3, [r3]
 800d2f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d302:	61fb      	str	r3, [r7, #28]
 800d304:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d306:	69b9      	ldr	r1, [r7, #24]
 800d308:	69fa      	ldr	r2, [r7, #28]
 800d30a:	e841 2300 	strex	r3, r2, [r1]
 800d30e:	617b      	str	r3, [r7, #20]
   return(result);
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1e6      	bne.n	800d2e4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d316:	e002      	b.n	800d31e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d318:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d31a:	f7f5 ffe1 	bl	80032e0 <HAL_UART_TxCpltCallback>
}
 800d31e:	bf00      	nop
 800d320:	3740      	adds	r7, #64	; 0x40
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d332:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f7ff fa31 	bl	800c79c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d33a:	bf00      	nop
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b086      	sub	sp, #24
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d356:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d36a:	2b80      	cmp	r3, #128	; 0x80
 800d36c:	d109      	bne.n	800d382 <UART_DMAError+0x40>
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2b21      	cmp	r3, #33	; 0x21
 800d372:	d106      	bne.n	800d382 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2200      	movs	r2, #0
 800d378:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d37c:	6978      	ldr	r0, [r7, #20]
 800d37e:	f7ff fede 	bl	800d13e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38c:	2b40      	cmp	r3, #64	; 0x40
 800d38e:	d109      	bne.n	800d3a4 <UART_DMAError+0x62>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b22      	cmp	r3, #34	; 0x22
 800d394:	d106      	bne.n	800d3a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2200      	movs	r2, #0
 800d39a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d39e:	6978      	ldr	r0, [r7, #20]
 800d3a0:	f7ff ff0e 	bl	800d1c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3aa:	f043 0210 	orr.w	r2, r3, #16
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3b4:	6978      	ldr	r0, [r7, #20]
 800d3b6:	f7ff f9fb 	bl	800c7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3ba:	bf00      	nop
 800d3bc:	3718      	adds	r7, #24
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff f9e5 	bl	800c7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3e6:	bf00      	nop
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b088      	sub	sp, #32
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	e853 3f00 	ldrex	r3, [r3]
 800d402:	60bb      	str	r3, [r7, #8]
   return(result);
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d40a:	61fb      	str	r3, [r7, #28]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	61bb      	str	r3, [r7, #24]
 800d416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d418:	6979      	ldr	r1, [r7, #20]
 800d41a:	69ba      	ldr	r2, [r7, #24]
 800d41c:	e841 2300 	strex	r3, r2, [r1]
 800d420:	613b      	str	r3, [r7, #16]
   return(result);
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1e6      	bne.n	800d3f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2220      	movs	r2, #32
 800d42c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7f5 ff52 	bl	80032e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d43c:	bf00      	nop
 800d43e:	3720      	adds	r7, #32
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e058      	b.n	800d50e <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f7f7 f9de 	bl	8004830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2224      	movs	r2, #36	; 0x24
 800d478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f022 0201 	bic.w	r2, r2, #1
 800d48a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7ff f9a5 	bl	800c7dc <UART_SetConfig>
 800d492:	4603      	mov	r3, r0
 800d494:	2b01      	cmp	r3, #1
 800d496:	d101      	bne.n	800d49c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	e038      	b.n	800d50e <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7ff fc95 	bl	800cdd4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	689a      	ldr	r2, [r3, #8]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4b8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	055b      	lsls	r3, r3, #21
 800d4d2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	041b      	lsls	r3, r3, #16
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800d4e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	6812      	ldr	r2, [r2, #0]
 800d4f0:	6979      	ldr	r1, [r7, #20]
 800d4f2:	430b      	orrs	r3, r1
 800d4f4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f042 0201 	orr.w	r2, r2, #1
 800d504:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f7ff fd06 	bl	800cf18 <UART_CheckIdleState>
 800d50c:	4603      	mov	r3, r0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d52a:	b480      	push	{r7}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d532:	bf00      	nop
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d53e:	b480      	push	{r7}
 800d540:	b083      	sub	sp, #12
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b084      	sub	sp, #16
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d560:	2b01      	cmp	r3, #1
 800d562:	d101      	bne.n	800d568 <HAL_UARTEx_EnableFifoMode+0x16>
 800d564:	2302      	movs	r3, #2
 800d566:	e02b      	b.n	800d5c0 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2224      	movs	r2, #36	; 0x24
 800d574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f022 0201 	bic.w	r2, r2, #1
 800d58e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d596:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d59e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f8c3 	bl	800d734 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2220      	movs	r2, #32
 800d5b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d101      	bne.n	800d5de <HAL_UARTEx_DisableFifoMode+0x16>
 800d5da:	2302      	movs	r3, #2
 800d5dc:	e027      	b.n	800d62e <HAL_UARTEx_DisableFifoMode+0x66>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2224      	movs	r2, #36	; 0x24
 800d5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f022 0201 	bic.w	r2, r2, #1
 800d604:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d60c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2220      	movs	r2, #32
 800d620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d101      	bne.n	800d652 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d64e:	2302      	movs	r3, #2
 800d650:	e02d      	b.n	800d6ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2224      	movs	r2, #36	; 0x24
 800d65e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f022 0201 	bic.w	r2, r2, #1
 800d678:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f850 	bl	800d734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2220      	movs	r2, #32
 800d6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b084      	sub	sp, #16
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d101      	bne.n	800d6ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6ca:	2302      	movs	r3, #2
 800d6cc:	e02d      	b.n	800d72a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2224      	movs	r2, #36	; 0x24
 800d6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 0201 	bic.w	r2, r2, #1
 800d6f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	683a      	ldr	r2, [r7, #0]
 800d706:	430a      	orrs	r2, r1
 800d708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f812 	bl	800d734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2220      	movs	r2, #32
 800d71c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
	...

0800d734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d740:	2b00      	cmp	r3, #0
 800d742:	d108      	bne.n	800d756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d754:	e031      	b.n	800d7ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d756:	2308      	movs	r3, #8
 800d758:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d75a:	2308      	movs	r3, #8
 800d75c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	0e5b      	lsrs	r3, r3, #25
 800d766:	b2db      	uxtb	r3, r3
 800d768:	f003 0307 	and.w	r3, r3, #7
 800d76c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	0f5b      	lsrs	r3, r3, #29
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f003 0307 	and.w	r3, r3, #7
 800d77c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d77e:	7bbb      	ldrb	r3, [r7, #14]
 800d780:	7b3a      	ldrb	r2, [r7, #12]
 800d782:	4911      	ldr	r1, [pc, #68]	; (800d7c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d784:	5c8a      	ldrb	r2, [r1, r2]
 800d786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d78a:	7b3a      	ldrb	r2, [r7, #12]
 800d78c:	490f      	ldr	r1, [pc, #60]	; (800d7cc <UARTEx_SetNbDataToProcess+0x98>)
 800d78e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d790:	fb93 f3f2 	sdiv	r3, r3, r2
 800d794:	b29a      	uxth	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	7b7a      	ldrb	r2, [r7, #13]
 800d7a0:	4909      	ldr	r1, [pc, #36]	; (800d7c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d7a2:	5c8a      	ldrb	r2, [r1, r2]
 800d7a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7a8:	7b7a      	ldrb	r2, [r7, #13]
 800d7aa:	4908      	ldr	r1, [pc, #32]	; (800d7cc <UARTEx_SetNbDataToProcess+0x98>)
 800d7ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d7ba:	bf00      	nop
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	0801541c 	.word	0x0801541c
 800d7cc:	08015424 	.word	0x08015424

0800d7d0 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	881b      	ldrh	r3, [r3, #0]
 800d7e2:	2b05      	cmp	r3, #5
 800d7e4:	d122      	bne.n	800d82c <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	021b      	lsls	r3, r3, #8
 800d7f0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	3302      	adds	r3, #2
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	89bb      	ldrh	r3, [r7, #12]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d800:	89bb      	ldrh	r3, [r7, #12]
 800d802:	3301      	adds	r3, #1
 800d804:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF], usRegAddress, 1, MB_REG_WRITE );
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	1cd8      	adds	r0, r3, #3
 800d80a:	89b9      	ldrh	r1, [r7, #12]
 800d80c:	2301      	movs	r3, #1
 800d80e:	2201      	movs	r2, #1
 800d810:	f7f5 fc18 	bl	8003044 <eMBRegHoldingCB>
 800d814:	4603      	mov	r3, r0
 800d816:	72fb      	strb	r3, [r7, #11]

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800d818:	7afb      	ldrb	r3, [r7, #11]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d008      	beq.n	800d830 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800d81e:	7afb      	ldrb	r3, [r7, #11]
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fa09 	bl	800dc38 <prveMBError2Exception>
 800d826:	4603      	mov	r3, r0
 800d828:	73fb      	strb	r3, [r7, #15]
 800d82a:	e001      	b.n	800d830 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d82c:	2303      	movs	r3, #3
 800d82e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d830:	7bfb      	ldrb	r3, [r7, #15]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800d844:	2300      	movs	r3, #0
 800d846:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	2b05      	cmp	r3, #5
 800d84e:	d946      	bls.n	800d8de <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3301      	adds	r3, #1
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	b29b      	uxth	r3, r3
 800d858:	021b      	lsls	r3, r3, #8
 800d85a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3302      	adds	r3, #2
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	b29a      	uxth	r2, r3
 800d864:	89bb      	ldrh	r3, [r7, #12]
 800d866:	4313      	orrs	r3, r2
 800d868:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d86a:	89bb      	ldrh	r3, [r7, #12]
 800d86c:	3301      	adds	r3, #1
 800d86e:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3303      	adds	r3, #3
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	b29b      	uxth	r3, r3
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	3304      	adds	r3, #4
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	b29a      	uxth	r2, r3
 800d884:	897b      	ldrh	r3, [r7, #10]
 800d886:	4313      	orrs	r3, r2
 800d888:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	795b      	ldrb	r3, [r3, #5]
 800d88e:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800d890:	897b      	ldrh	r3, [r7, #10]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d020      	beq.n	800d8d8 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 800d896:	897b      	ldrh	r3, [r7, #10]
 800d898:	2b78      	cmp	r3, #120	; 0x78
 800d89a:	d81d      	bhi.n	800d8d8 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800d89c:	897b      	ldrh	r3, [r7, #10]
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800d8a4:	7a7a      	ldrb	r2, [r7, #9]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d116      	bne.n	800d8d8 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],  usRegAddress, usRegCount, MB_REG_WRITE );
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	1d98      	adds	r0, r3, #6
 800d8ae:	897a      	ldrh	r2, [r7, #10]
 800d8b0:	89b9      	ldrh	r1, [r7, #12]
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	f7f5 fbc6 	bl	8003044 <eMBRegHoldingCB>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	723b      	strb	r3, [r7, #8]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d8bc:	7a3b      	ldrb	r3, [r7, #8]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d006      	beq.n	800d8d0 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d8c2:	7a3b      	ldrb	r3, [r7, #8]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 f9b7 	bl	800dc38 <prveMBError2Exception>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800d8ce:	e008      	b.n	800d8e2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2205      	movs	r2, #5
 800d8d4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d8d6:	e004      	b.n	800d8e2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	73fb      	strb	r3, [r7, #15]
 800d8dc:	e001      	b.n	800d8e2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	2b05      	cmp	r3, #5
 800d900:	d15c      	bne.n	800d9bc <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3301      	adds	r3, #1
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	021b      	lsls	r3, r3, #8
 800d90c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3302      	adds	r3, #2
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b29a      	uxth	r2, r3
 800d916:	8abb      	ldrh	r3, [r7, #20]
 800d918:	4313      	orrs	r3, r2
 800d91a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800d91c:	8abb      	ldrh	r3, [r7, #20]
 800d91e:	3301      	adds	r3, #1
 800d920:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	3303      	adds	r3, #3
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	b29b      	uxth	r3, r3
 800d92a:	021b      	lsls	r3, r3, #8
 800d92c:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3304      	adds	r3, #4
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800d936:	8a7b      	ldrh	r3, [r7, #18]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d03c      	beq.n	800d9b6 <eMBFuncReadHoldingRegister+0xca>
 800d93c:	8a7b      	ldrh	r3, [r7, #18]
 800d93e:	2b7d      	cmp	r3, #125	; 0x7d
 800d940:	d839      	bhi.n	800d9b6 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2200      	movs	r2, #0
 800d94a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	60fa      	str	r2, [r7, #12]
 800d952:	2203      	movs	r2, #3
 800d954:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800d962:	8a7b      	ldrh	r3, [r7, #18]
 800d964:	b2da      	uxtb	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	1c59      	adds	r1, r3, #1
 800d96a:	60f9      	str	r1, [r7, #12]
 800d96c:	0052      	lsls	r2, r2, #1
 800d96e:	b2d2      	uxtb	r2, r2
 800d970:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	b29a      	uxth	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800d97e:	8a7a      	ldrh	r2, [r7, #18]
 800d980:	8ab9      	ldrh	r1, [r7, #20]
 800d982:	2300      	movs	r3, #0
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7f5 fb5d 	bl	8003044 <eMBRegHoldingCB>
 800d98a:	4603      	mov	r3, r0
 800d98c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d98e:	7afb      	ldrb	r3, [r7, #11]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d006      	beq.n	800d9a2 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d994:	7afb      	ldrb	r3, [r7, #11]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 f94e 	bl	800dc38 <prveMBError2Exception>
 800d99c:	4603      	mov	r3, r0
 800d99e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d9a0:	e00e      	b.n	800d9c0 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	881a      	ldrh	r2, [r3, #0]
 800d9a6:	8a7b      	ldrh	r3, [r7, #18]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4413      	add	r3, r2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d9b4:	e004      	b.n	800d9c0 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	75fb      	strb	r3, [r7, #23]
 800d9ba:	e001      	b.n	800d9c0 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d9bc:	2303      	movs	r3, #3
 800d9be:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800d9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3718      	adds	r7, #24
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b086      	sub	sp, #24
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	2b09      	cmp	r3, #9
 800d9de:	f240 8099 	bls.w	800db14 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	021b      	lsls	r3, r3, #8
 800d9ec:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	8abb      	ldrh	r3, [r7, #20]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800d9fc:	8abb      	ldrh	r3, [r7, #20]
 800d9fe:	3301      	adds	r3, #1
 800da00:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3303      	adds	r3, #3
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	021b      	lsls	r3, r3, #8
 800da0c:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3304      	adds	r3, #4
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	b29a      	uxth	r2, r3
 800da16:	8a7b      	ldrh	r3, [r7, #18]
 800da18:	4313      	orrs	r3, r2
 800da1a:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	3305      	adds	r3, #5
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	b29b      	uxth	r3, r3
 800da24:	021b      	lsls	r3, r3, #8
 800da26:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3306      	adds	r3, #6
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	8a3b      	ldrh	r3, [r7, #16]
 800da32:	4313      	orrs	r3, r2
 800da34:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800da36:	8a3b      	ldrh	r3, [r7, #16]
 800da38:	3301      	adds	r3, #1
 800da3a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3307      	adds	r3, #7
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	b29b      	uxth	r3, r3
 800da44:	021b      	lsls	r3, r3, #8
 800da46:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	3308      	adds	r3, #8
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	b29a      	uxth	r2, r3
 800da50:	89fb      	ldrh	r3, [r7, #14]
 800da52:	4313      	orrs	r3, r2
 800da54:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	7a5b      	ldrb	r3, [r3, #9]
 800da5a:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800da5c:	8a7b      	ldrh	r3, [r7, #18]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d056      	beq.n	800db10 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800da62:	8a7b      	ldrh	r3, [r7, #18]
 800da64:	2b7d      	cmp	r3, #125	; 0x7d
 800da66:	d853      	bhi.n	800db10 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800da68:	89fb      	ldrh	r3, [r7, #14]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d050      	beq.n	800db10 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800da6e:	89fb      	ldrh	r3, [r7, #14]
 800da70:	2b79      	cmp	r3, #121	; 0x79
 800da72:	d84d      	bhi.n	800db10 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800da74:	89fb      	ldrh	r3, [r7, #14]
 800da76:	005a      	lsls	r2, r3, #1
 800da78:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d148      	bne.n	800db10 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF], usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f103 000a 	add.w	r0, r3, #10
 800da84:	89fa      	ldrh	r2, [r7, #14]
 800da86:	8a39      	ldrh	r1, [r7, #16]
 800da88:	2301      	movs	r3, #1
 800da8a:	f7f5 fadb 	bl	8003044 <eMBRegHoldingCB>
 800da8e:	4603      	mov	r3, r0
 800da90:	75bb      	strb	r3, [r7, #22]

            if( eRegStatus == MB_ENOERR )
 800da92:	7dbb      	ldrb	r3, [r7, #22]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d131      	bne.n	800dafc <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	2200      	movs	r2, #0
 800daa0:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	1c5a      	adds	r2, r3, #1
 800daa6:	60ba      	str	r2, [r7, #8]
 800daa8:	2217      	movs	r2, #23
 800daaa:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	3301      	adds	r3, #1
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800dab8:	8a7b      	ldrh	r3, [r7, #18]
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	1c59      	adds	r1, r3, #1
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	0052      	lsls	r2, r2, #1
 800dac4:	b2d2      	uxtb	r2, r2
 800dac6:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	3301      	adds	r3, #1
 800dace:	b29a      	uxth	r2, r3
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800dad4:	8a7a      	ldrh	r2, [r7, #18]
 800dad6:	8ab9      	ldrh	r1, [r7, #20]
 800dad8:	2300      	movs	r3, #0
 800dada:	68b8      	ldr	r0, [r7, #8]
 800dadc:	f7f5 fab2 	bl	8003044 <eMBRegHoldingCB>
 800dae0:	4603      	mov	r3, r0
 800dae2:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 800dae4:	7dbb      	ldrb	r3, [r7, #22]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d108      	bne.n	800dafc <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	881a      	ldrh	r2, [r3, #0]
 800daee:	8a7b      	ldrh	r3, [r7, #18]
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	4413      	add	r3, r2
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800dafc:	7dbb      	ldrb	r3, [r7, #22]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d008      	beq.n	800db14 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800db02:	7dbb      	ldrb	r3, [r7, #22]
 800db04:	4618      	mov	r0, r3
 800db06:	f000 f897 	bl	800dc38 <prveMBError2Exception>
 800db0a:	4603      	mov	r3, r0
 800db0c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800db0e:	e001      	b.n	800db14 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800db10:	2303      	movs	r3, #3
 800db12:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800db28:	2300      	movs	r3, #0
 800db2a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	2b05      	cmp	r3, #5
 800db32:	d15d      	bne.n	800dbf0 <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	3301      	adds	r3, #1
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	021b      	lsls	r3, r3, #8
 800db3e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	3302      	adds	r3, #2
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	b29a      	uxth	r2, r3
 800db48:	8abb      	ldrh	r3, [r7, #20]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800db4e:	8abb      	ldrh	r3, [r7, #20]
 800db50:	3301      	adds	r3, #1
 800db52:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3303      	adds	r3, #3
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	3304      	adds	r3, #4
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	b29a      	uxth	r2, r3
 800db68:	8a7b      	ldrh	r3, [r7, #18]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	827b      	strh	r3, [r7, #18]

        /* Проверьте, является ли допустимым количество регистров для чтения.
         * Если нет, верните исключение недопустимого значения данных Modbus.
         */
        if( ( usRegCount >= 1 ) && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800db6e:	8a7b      	ldrh	r3, [r7, #18]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d03a      	beq.n	800dbea <eMBFuncReadInputRegister+0xcc>
 800db74:	8a7b      	ldrh	r3, [r7, #18]
 800db76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db7a:	d236      	bcs.n	800dbea <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2200      	movs	r2, #0
 800db84:	801a      	strh	r2, [r3, #0]

            /* Первый байт содержит код функции. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	60fa      	str	r2, [r7, #12]
 800db8c:	2204      	movs	r2, #4
 800db8e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	3301      	adds	r3, #1
 800db96:	b29a      	uxth	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	801a      	strh	r2, [r3, #0]

            /* Второй байт в ответе содержит количество байтов. */
            /////////////////////////////////////////////////////// МОЁ изменение ///////////////
            // *pucFrameCur++ =  ( UCHAR )( usRegCount * 2 );
            // usRegCount =1; // МОЁ изменение, всегда будет 1 пакет данных, пакет состоит из 40_WORD это значит 80 байт
            *pucFrameCur++ = 80; // МОЁ изменение, все коментарии почему , в   main.c => eMBRegInputCB()
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	60fa      	str	r2, [r7, #12]
 800dba2:	2250      	movs	r2, #80	; 0x50
 800dba4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	801a      	strh	r2, [r3, #0]

            eRegStatus = eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800dbb2:	8a7a      	ldrh	r2, [r7, #18]
 800dbb4:	8abb      	ldrh	r3, [r7, #20]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7f5 f9eb 	bl	8002f94 <eMBRegInputCB>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	72fb      	strb	r3, [r7, #11]

            /* Если произошла ошибка, преобразуйте ее в исключение Modbus. */
            if( eRegStatus != MB_ENOERR )
 800dbc2:	7afb      	ldrb	r3, [r7, #11]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d006      	beq.n	800dbd6 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800dbc8:	7afb      	ldrb	r3, [r7, #11]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f000 f834 	bl	800dc38 <prveMBError2Exception>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800dbd4:	e00e      	b.n	800dbf4 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	881a      	ldrh	r2, [r3, #0]
 800dbda:	8a7b      	ldrh	r3, [r7, #18]
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	4413      	add	r3, r2
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800dbe8:	e004      	b.n	800dbf4 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800dbea:	2303      	movs	r3, #3
 800dbec:	75fb      	strb	r3, [r7, #23]
 800dbee:	e001      	b.n	800dbf4 <eMBFuncReadInputRegister+0xd6>
        }
    }
    else
    {
        /* Не может быть допустимым запросом на чтение входного регистра, поскольку длина указана неверно. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800dbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
	...

0800dc00 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	4a08      	ldr	r2, [pc, #32]	; (800dc30 <eMBFuncReportSlaveID+0x30>)
 800dc10:	8812      	ldrh	r2, [r2, #0]
 800dc12:	4908      	ldr	r1, [pc, #32]	; (800dc34 <eMBFuncReportSlaveID+0x34>)
 800dc14:	4618      	mov	r0, r3
 800dc16:	f001 fc05 	bl	800f424 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800dc1a:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <eMBFuncReportSlaveID+0x30>)
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	2001244c 	.word	0x2001244c
 800dc34:	2001242c 	.word	0x2001242c

0800dc38 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	4603      	mov	r3, r0
 800dc40:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	2b07      	cmp	r3, #7
 800dc46:	d00c      	beq.n	800dc62 <prveMBError2Exception+0x2a>
 800dc48:	2b07      	cmp	r3, #7
 800dc4a:	dc0d      	bgt.n	800dc68 <prveMBError2Exception+0x30>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <prveMBError2Exception+0x1e>
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d003      	beq.n	800dc5c <prveMBError2Exception+0x24>
 800dc54:	e008      	b.n	800dc68 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800dc56:	2300      	movs	r3, #0
 800dc58:	73fb      	strb	r3, [r7, #15]
            break;
 800dc5a:	e008      	b.n	800dc6e <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	73fb      	strb	r3, [r7, #15]
            break;
 800dc60:	e005      	b.n	800dc6e <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800dc62:	2306      	movs	r3, #6
 800dc64:	73fb      	strb	r3, [r7, #15]
            break;
 800dc66:	e002      	b.n	800dc6e <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800dc68:	2304      	movs	r3, #4
 800dc6a:	73fb      	strb	r3, [r7, #15]
            break;
 800dc6c:	bf00      	nop
    }

    return eStatus;
 800dc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	603b      	str	r3, [r7, #0]
 800dc84:	4603      	mov	r3, r0
 800dc86:	71fb      	strb	r3, [r7, #7]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	71bb      	strb	r3, [r7, #6]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	717b      	strb	r3, [r7, #5]
    /* проверка предварительных условий */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||  ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800dc90:	79bb      	ldrb	r3, [r7, #6]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d005      	beq.n	800dca2 <eMBInit+0x26>
 800dc96:	79bb      	ldrb	r3, [r7, #6]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <eMBInit+0x26>
 800dc9c:	79bb      	ldrb	r3, [r7, #6]
 800dc9e:	2bf7      	cmp	r3, #247	; 0xf7
 800dca0:	d901      	bls.n	800dca6 <eMBInit+0x2a>
    	{ ucSlaveAddress = 7;  } // по умолчанию такой адрес будет, а потому что
 800dca2:	2307      	movs	r3, #7
 800dca4:	71bb      	strb	r3, [r7, #6]

    ucMBAddress = ucSlaveAddress; // раскинули адрес по этому файлу
 800dca6:	4a08      	ldr	r2, [pc, #32]	; (800dcc8 <eMBInit+0x4c>)
 800dca8:	79bb      	ldrb	r3, [r7, #6]
 800dcaa:	7013      	strb	r3, [r2, #0]
    timeout_Tim6_50us = 35; // на нашей скорости здесь будет только такой таймаут //////////eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity ); // здесь остался только инит времени тайаута TIM6
 800dcac:	4b07      	ldr	r3, [pc, #28]	; (800dccc <eMBInit+0x50>)
 800dcae:	2223      	movs	r2, #35	; 0x23
 800dcb0:	801a      	strh	r2, [r3, #0]

    xMBPortEventInit(  ); // сброс очереди событий  ==> в файле portevent.c
 800dcb2:	f000 f8e9 	bl	800de88 <xMBPortEventInit>
    eMBState = STATE_DISABLED;
 800dcb6:	4b06      	ldr	r3, [pc, #24]	; (800dcd0 <eMBInit+0x54>)
 800dcb8:	2201      	movs	r2, #1
 800dcba:	701a      	strb	r2, [r3, #0]

    return MB_ENOERR;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	2001244e 	.word	0x2001244e
 800dccc:	2000060c 	.word	0x2000060c
 800dcd0:	20000058 	.word	0x20000058

0800dcd4 <eMBEnable>:



eMBErrorCode
eMBEnable( void )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
        /* Activate the protocol stack. */
    ENTER_CRITICAL_SECTION(  );
 800dcd8:	f7f3 fefc 	bl	8001ad4 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800dcdc:	4b08      	ldr	r3, [pc, #32]	; (800dd00 <eMBEnable+0x2c>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE ); // перевод порта в режим приема
 800dce2:	2100      	movs	r1, #0
 800dce4:	2001      	movs	r0, #1
 800dce6:	f000 f911 	bl	800df0c <vMBPortSerialEnable>
    vMBPortTimersEnable(  ); // старт таймера TIM6 и сброс счетчика в ноль
 800dcea:	f000 f96b 	bl	800dfc4 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800dcee:	f7f3 ff01 	bl	8001af4 <__critical_exit>

    eMBState = STATE_ENABLED;
 800dcf2:	4b04      	ldr	r3, [pc, #16]	; (800dd04 <eMBEnable+0x30>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	200005e8 	.word	0x200005e8
 800dd04:	20000058 	.word	0x20000058

0800dd08 <eMBPoll>:


eMBErrorCode
eMBPoll( void )
{
 800dd08:	b590      	push	{r4, r7, lr}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    BOOL  flag_event = xMBPortEventGet( &eEvent );
 800dd12:	1c7b      	adds	r3, r7, #1
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 f8db 	bl	800ded0 <xMBPortEventGet>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	70bb      	strb	r3, [r7, #2]

    /* Проверьте, есть ли доступное событие.
     * Если нет, верните управление вызывающему абоненту.
     * В противном случае мы будем обрабатывать это событие. */

    if( flag_event == TRUE ) // если там в файле portevent.c  кемто чемто сформировано событие, тО сейчас мы его обработаем
 800dd1e:	78bb      	ldrb	r3, [r7, #2]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	f040 8096 	bne.w	800de52 <eMBPoll+0x14a>
    {
    	count_eMBPool=0;
 800dd26:	4b50      	ldr	r3, [pc, #320]	; (800de68 <eMBPoll+0x160>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	701a      	strb	r2, [r3, #0]
    	//printf("eMBPoll-STARTevent _eMBState=%d, _eEvent=%d \n", eMBState, eEvent);
        switch ( eEvent )
 800dd2c:	787b      	ldrb	r3, [r7, #1]
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	f200 8094 	bhi.w	800de5c <eMBPoll+0x154>
 800dd34:	a201      	add	r2, pc, #4	; (adr r2, 800dd3c <eMBPoll+0x34>)
 800dd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3a:	bf00      	nop
 800dd3c:	0800de5d 	.word	0x0800de5d
 800dd40:	0800dd4d 	.word	0x0800dd4d
 800dd44:	0800dd7d 	.word	0x0800dd7d
 800dd48:	0800de5d 	.word	0x0800de5d
        case EV_READY:
        	//printf( "eMBPoll eEvent <= EV_READY \n");
            break;

        case EV_FRAME_RECEIVED:
            eStatus = eMBRTUReceive( &ucRcvAddress, &ucMBFrame, &usLength );
 800dd4c:	4a47      	ldr	r2, [pc, #284]	; (800de6c <eMBPoll+0x164>)
 800dd4e:	4948      	ldr	r1, [pc, #288]	; (800de70 <eMBPoll+0x168>)
 800dd50:	4848      	ldr	r0, [pc, #288]	; (800de74 <eMBPoll+0x16c>)
 800dd52:	f000 f989 	bl	800e068 <eMBRTUReceive>
 800dd56:	4603      	mov	r3, r0
 800dd58:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d17a      	bne.n	800de56 <eMBPoll+0x14e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800dd60:	4b44      	ldr	r3, [pc, #272]	; (800de74 <eMBPoll+0x16c>)
 800dd62:	781a      	ldrb	r2, [r3, #0]
 800dd64:	4b44      	ldr	r3, [pc, #272]	; (800de78 <eMBPoll+0x170>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d003      	beq.n	800dd74 <eMBPoll+0x6c>
 800dd6c:	4b41      	ldr	r3, [pc, #260]	; (800de74 <eMBPoll+0x16c>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d170      	bne.n	800de56 <eMBPoll+0x14e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );  // значит фрейм принят, адрес норм, формируем событие - начало обработки
 800dd74:	2002      	movs	r0, #2
 800dd76:	f000 f895 	bl	800dea4 <xMBPortEventPost>
                }
            }
            break;
 800dd7a:	e06c      	b.n	800de56 <eMBPoll+0x14e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800dd7c:	4b3c      	ldr	r3, [pc, #240]	; (800de70 <eMBPoll+0x168>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	781a      	ldrb	r2, [r3, #0]
 800dd82:	4b3e      	ldr	r3, [pc, #248]	; (800de7c <eMBPoll+0x174>)
 800dd84:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800dd86:	4b3e      	ldr	r3, [pc, #248]	; (800de80 <eMBPoll+0x178>)
 800dd88:	2201      	movs	r2, #1
 800dd8a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	607b      	str	r3, [r7, #4]
 800dd90:	e01f      	b.n	800ddd2 <eMBPoll+0xca>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800dd92:	4a3c      	ldr	r2, [pc, #240]	; (800de84 <eMBPoll+0x17c>)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d01d      	beq.n	800ddda <eMBPoll+0xd2>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800dd9e:	4a39      	ldr	r2, [pc, #228]	; (800de84 <eMBPoll+0x17c>)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dda6:	4b35      	ldr	r3, [pc, #212]	; (800de7c <eMBPoll+0x174>)
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d10e      	bne.n	800ddcc <eMBPoll+0xc4>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800ddae:	4a35      	ldr	r2, [pc, #212]	; (800de84 <eMBPoll+0x17c>)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	00db      	lsls	r3, r3, #3
 800ddb4:	4413      	add	r3, r2
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	4a2d      	ldr	r2, [pc, #180]	; (800de70 <eMBPoll+0x168>)
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	492b      	ldr	r1, [pc, #172]	; (800de6c <eMBPoll+0x164>)
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	4798      	blx	r3
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4b2e      	ldr	r3, [pc, #184]	; (800de80 <eMBPoll+0x178>)
 800ddc8:	701a      	strb	r2, [r3, #0]
                    break;
 800ddca:	e007      	b.n	800dddc <eMBPoll+0xd4>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	607b      	str	r3, [r7, #4]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b0f      	cmp	r3, #15
 800ddd6:	dddc      	ble.n	800dd92 <eMBPoll+0x8a>
 800ddd8:	e000      	b.n	800dddc <eMBPoll+0xd4>
                    break;
 800ddda:	bf00      	nop
                }
            }
            //printf("eMBPoll eEvent==EV_EXECUTE  ucFunctionCode=%d \n", ucFunctionCode);

            /* Если запрос не был отправлен на широковещательный адрес, мы возвращаем ответ. !!!!!!!! ВОТ ЗДЕСЬ передача !!!!!!!!!!  */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800dddc:	4b25      	ldr	r3, [pc, #148]	; (800de74 <eMBPoll+0x16c>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d03a      	beq.n	800de5a <eMBPoll+0x152>
            {
                if( eException != MB_EX_NONE )
 800dde4:	4b26      	ldr	r3, [pc, #152]	; (800de80 <eMBPoll+0x178>)
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d01d      	beq.n	800de28 <eMBPoll+0x120>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800ddec:	4b1f      	ldr	r3, [pc, #124]	; (800de6c <eMBPoll+0x164>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800ddf2:	4b22      	ldr	r3, [pc, #136]	; (800de7c <eMBPoll+0x174>)
 800ddf4:	781a      	ldrb	r2, [r3, #0]
 800ddf6:	4b1e      	ldr	r3, [pc, #120]	; (800de70 <eMBPoll+0x168>)
 800ddf8:	6819      	ldr	r1, [r3, #0]
 800ddfa:	4b1c      	ldr	r3, [pc, #112]	; (800de6c <eMBPoll+0x164>)
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	1c58      	adds	r0, r3, #1
 800de00:	b284      	uxth	r4, r0
 800de02:	481a      	ldr	r0, [pc, #104]	; (800de6c <eMBPoll+0x164>)
 800de04:	8004      	strh	r4, [r0, #0]
 800de06:	440b      	add	r3, r1
 800de08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800de0c:	b2d2      	uxtb	r2, r2
 800de0e:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800de10:	4b17      	ldr	r3, [pc, #92]	; (800de70 <eMBPoll+0x168>)
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	4b15      	ldr	r3, [pc, #84]	; (800de6c <eMBPoll+0x164>)
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	1c59      	adds	r1, r3, #1
 800de1a:	b288      	uxth	r0, r1
 800de1c:	4913      	ldr	r1, [pc, #76]	; (800de6c <eMBPoll+0x164>)
 800de1e:	8008      	strh	r0, [r1, #0]
 800de20:	4413      	add	r3, r2
 800de22:	4a17      	ldr	r2, [pc, #92]	; (800de80 <eMBPoll+0x178>)
 800de24:	7812      	ldrb	r2, [r2, #0]
 800de26:	701a      	strb	r2, [r3, #0]
                }

                // МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////
                if (ucMBFrame[MB_PDU_FUNC_OFF] == 4) { usLength =82; }// МОЁ изменение ///////////////// МОЁ изменение ///////////////
 800de28:	4b11      	ldr	r3, [pc, #68]	; (800de70 <eMBPoll+0x168>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d102      	bne.n	800de38 <eMBPoll+0x130>
 800de32:	4b0e      	ldr	r3, [pc, #56]	; (800de6c <eMBPoll+0x164>)
 800de34:	2252      	movs	r2, #82	; 0x52
 800de36:	801a      	strh	r2, [r3, #0]
                eStatus = eMBRTUSend( ucMBAddress, ucMBFrame, usLength );
 800de38:	4b0f      	ldr	r3, [pc, #60]	; (800de78 <eMBPoll+0x170>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <eMBPoll+0x168>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a0a      	ldr	r2, [pc, #40]	; (800de6c <eMBPoll+0x164>)
 800de44:	8812      	ldrh	r2, [r2, #0]
 800de46:	4619      	mov	r1, r3
 800de48:	f000 f958 	bl	800e0fc <eMBRTUSend>
 800de4c:	4603      	mov	r3, r0
 800de4e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800de50:	e003      	b.n	800de5a <eMBPoll+0x152>

        case EV_FRAME_SENT:
            break;
        }
    }
 800de52:	bf00      	nop
 800de54:	e002      	b.n	800de5c <eMBPoll+0x154>
            break;
 800de56:	bf00      	nop
 800de58:	e000      	b.n	800de5c <eMBPoll+0x154>
            break;
 800de5a:	bf00      	nop
    return MB_ENOERR;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	370c      	adds	r7, #12
 800de62:	46bd      	mov	sp, r7
 800de64:	bd90      	pop	{r4, r7, pc}
 800de66:	bf00      	nop
 800de68:	2001244f 	.word	0x2001244f
 800de6c:	20012458 	.word	0x20012458
 800de70:	20012454 	.word	0x20012454
 800de74:	20012450 	.word	0x20012450
 800de78:	2001244e 	.word	0x2001244e
 800de7c:	2001245a 	.word	0x2001245a
 800de80:	2001245b 	.word	0x2001245b
 800de84:	2000005c 	.word	0x2000005c

0800de88 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800de88:	b480      	push	{r7}
 800de8a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800de8c:	4b04      	ldr	r3, [pc, #16]	; (800dea0 <xMBPortEventInit+0x18>)
 800de8e:	2200      	movs	r2, #0
 800de90:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800de92:	2301      	movs	r3, #1
}
 800de94:	4618      	mov	r0, r3
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	2001245d 	.word	0x2001245d

0800dea4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800deae:	4b06      	ldr	r3, [pc, #24]	; (800dec8 <xMBPortEventPost+0x24>)
 800deb0:	2201      	movs	r2, #1
 800deb2:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800deb4:	4a05      	ldr	r2, [pc, #20]	; (800decc <xMBPortEventPost+0x28>)
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800deba:	2301      	movs	r3, #1
}
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	2001245d 	.word	0x2001245d
 800decc:	2001245c 	.word	0x2001245c

0800ded0 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800ded8:	2300      	movs	r3, #0
 800deda:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 800dedc:	4b09      	ldr	r3, [pc, #36]	; (800df04 <xMBPortEventGet+0x34>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d008      	beq.n	800def6 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800dee4:	4b08      	ldr	r3, [pc, #32]	; (800df08 <xMBPortEventGet+0x38>)
 800dee6:	781a      	ldrb	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 800deec:	4b05      	ldr	r3, [pc, #20]	; (800df04 <xMBPortEventGet+0x34>)
 800deee:	2200      	movs	r2, #0
 800def0:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800def6:	7bfb      	ldrb	r3, [r7, #15]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	2001245d 	.word	0x2001245d
 800df08:	2001245c 	.word	0x2001245c

0800df0c <vMBPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/
extern	UART_HandleTypeDef * adr_huart_MB;
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	460a      	mov	r2, r1
 800df16:	71fb      	strb	r3, [r7, #7]
 800df18:	4613      	mov	r3, r2
 800df1a:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
    if(xRxEnable)
 800df1c:	79fb      	ldrb	r3, [r7, #7]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <vMBPortSerialEnable+0x2c>
  {
    __HAL_UART_ENABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800df22:	4b15      	ldr	r3, [pc, #84]	; (800df78 <vMBPortSerialEnable+0x6c>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	4b13      	ldr	r3, [pc, #76]	; (800df78 <vMBPortSerialEnable+0x6c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f042 0220 	orr.w	r2, r2, #32
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	e009      	b.n	800df4c <vMBPortSerialEnable+0x40>
  }
  else
  {
    __HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800df38:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <vMBPortSerialEnable+0x6c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	4b0d      	ldr	r3, [pc, #52]	; (800df78 <vMBPortSerialEnable+0x6c>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f022 0220 	bic.w	r2, r2, #32
 800df4a:	601a      	str	r2, [r3, #0]
  }

  if(xTxEnable)
 800df4c:	79bb      	ldrb	r3, [r7, #6]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d007      	beq.n	800df62 <vMBPortSerialEnable+0x56>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800df52:	2201      	movs	r2, #1
 800df54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df5c:	f7f9 fb0e 	bl	800757c <HAL_GPIO_WritePin>
  else
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    //__HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_TXE);
  }
}
 800df60:	e006      	b.n	800df70 <vMBPortSerialEnable+0x64>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800df62:	2200      	movs	r2, #0
 800df64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df6c:	f7f9 fb06 	bl	800757c <HAL_GPIO_WritePin>
}
 800df70:	bf00      	nop
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	20000610 	.word	0x20000610

0800df7c <xMBPortSerialGetByte>:
      return TRUE;
}

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(adr_huart_MB->Init.Parity == UART_PARITY_NONE)
 800df84:	4b0e      	ldr	r3, [pc, #56]	; (800dfc0 <xMBPortSerialGetByte+0x44>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d107      	bne.n	800df9e <xMBPortSerialGetByte+0x22>
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x00FF);
 800df8e:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <xMBPortSerialGetByte+0x44>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df96:	b2da      	uxtb	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	701a      	strb	r2, [r3, #0]
 800df9c:	e009      	b.n	800dfb2 <xMBPortSerialGetByte+0x36>
    }
    else
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x007F);
 800df9e:	4b08      	ldr	r3, [pc, #32]	; (800dfc0 <xMBPortSerialGetByte+0x44>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	701a      	strb	r2, [r3, #0]
    }
    return TRUE;
 800dfb2:	2301      	movs	r3, #1
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20000610 	.word	0x20000610

0800dfc4 <vMBPortTimersEnable>:
extern uint16_t counter_Tim6_MB ;
/* ----------------------- Start implementation -----------------------------*/

inline void
vMBPortTimersEnable(  )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	af00      	add	r7, sp, #0
	/*  Включите таймер с таймаутом, переданным xMBPortTimersInit( )  */
	/*  Если baudrate > 19200, то мы должны использовать фиксированные значения таймера usTim1Timerout50us = 1750 us.
	 *  В противном случае usTim1Timerout50us должно быть в 3,5 раза больше времени символа. */
	counter_Tim6_MB=0;
 800dfc8:	4b03      	ldr	r3, [pc, #12]	; (800dfd8 <vMBPortTimersEnable+0x14>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800dfce:	4803      	ldr	r0, [pc, #12]	; (800dfdc <vMBPortTimersEnable+0x18>)
 800dfd0:	f7fc f9bc 	bl	800a34c <HAL_TIM_Base_Start_IT>
}
 800dfd4:	bf00      	nop
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	2000060e 	.word	0x2000060e
 800dfdc:	20012028 	.word	0x20012028

0800dfe0 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim6);
 800dfe4:	4803      	ldr	r0, [pc, #12]	; (800dff4 <vMBPortTimersDisable+0x14>)
 800dfe6:	f7fc fa29 	bl	800a43c <HAL_TIM_Base_Stop_IT>
	counter_Tim6_MB =0;
 800dfea:	4b03      	ldr	r3, [pc, #12]	; (800dff8 <vMBPortTimersDisable+0x18>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	801a      	strh	r2, [r3, #0]
}
 800dff0:	bf00      	nop
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	20012028 	.word	0x20012028
 800dff8:	2000060e 	.word	0x2000060e

0800dffc <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	460b      	mov	r3, r1
 800e006:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800e008:	23ff      	movs	r3, #255	; 0xff
 800e00a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800e00c:	23ff      	movs	r3, #255	; 0xff
 800e00e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800e010:	e013      	b.n	800e03a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	1c5a      	adds	r2, r3, #1
 800e016:	607a      	str	r2, [r7, #4]
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	7bbb      	ldrb	r3, [r7, #14]
 800e01c:	4053      	eors	r3, r2
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800e022:	4a0f      	ldr	r2, [pc, #60]	; (800e060 <usMBCRC16+0x64>)
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	4413      	add	r3, r2
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	7bfb      	ldrb	r3, [r7, #15]
 800e02c:	4053      	eors	r3, r2
 800e02e:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800e030:	4a0c      	ldr	r2, [pc, #48]	; (800e064 <usMBCRC16+0x68>)
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	4413      	add	r3, r2
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800e03a:	887b      	ldrh	r3, [r7, #2]
 800e03c:	1e5a      	subs	r2, r3, #1
 800e03e:	807a      	strh	r2, [r7, #2]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e6      	bne.n	800e012 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800e044:	7bfb      	ldrb	r3, [r7, #15]
 800e046:	021b      	lsls	r3, r3, #8
 800e048:	b21a      	sxth	r2, r3
 800e04a:	7bbb      	ldrb	r3, [r7, #14]
 800e04c:	b21b      	sxth	r3, r3
 800e04e:	4313      	orrs	r3, r2
 800e050:	b21b      	sxth	r3, r3
 800e052:	b29b      	uxth	r3, r3
}
 800e054:	4618      	mov	r0, r3
 800e056:	3714      	adds	r7, #20
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	0801542c 	.word	0x0801542c
 800e064:	0801552c 	.word	0x0801552c

0800e068 <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]

    eMBErrorCode    eStatus = MB_ENOERR;
 800e074:	2300      	movs	r3, #0
 800e076:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800e078:	f7f3 fd2c 	bl	8001ad4 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800e07c:	4b19      	ldr	r3, [pc, #100]	; (800e0e4 <eMBRTUReceive+0x7c>)
 800e07e:	881b      	ldrh	r3, [r3, #0]
 800e080:	b29b      	uxth	r3, r3
 800e082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e086:	d305      	bcc.n	800e094 <eMBRTUReceive+0x2c>
 800e088:	4b17      	ldr	r3, [pc, #92]	; (800e0e8 <eMBRTUReceive+0x80>)
 800e08a:	4a18      	ldr	r2, [pc, #96]	; (800e0ec <eMBRTUReceive+0x84>)
 800e08c:	2163      	movs	r1, #99	; 0x63
 800e08e:	4818      	ldr	r0, [pc, #96]	; (800e0f0 <eMBRTUReceive+0x88>)
 800e090:	f001 f96e 	bl	800f370 <__assert_func>

    /* Length and CRC check */
    //printf("eMBRTUReceive ucRTUBuf %d %d %d %d %d %d \n", ucRTUBuf[0], ucRTUBuf[1], ucRTUBuf[2], ucRTUBuf[3], ucRTUBuf[4], ucRTUBuf[5]);
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN ) && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800e094:	4b13      	ldr	r3, [pc, #76]	; (800e0e4 <eMBRTUReceive+0x7c>)
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	2b03      	cmp	r3, #3
 800e09c:	d919      	bls.n	800e0d2 <eMBRTUReceive+0x6a>
 800e09e:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <eMBRTUReceive+0x7c>)
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4813      	ldr	r0, [pc, #76]	; (800e0f4 <eMBRTUReceive+0x8c>)
 800e0a8:	f7ff ffa8 	bl	800dffc <usMBCRC16>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10f      	bne.n	800e0d2 <eMBRTUReceive+0x6a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800e0b2:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <eMBRTUReceive+0x8c>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800e0bc:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <eMBRTUReceive+0x7c>)
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	3b03      	subs	r3, #3
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	4a0a      	ldr	r2, [pc, #40]	; (800e0f8 <eMBRTUReceive+0x90>)
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	e001      	b.n	800e0d6 <eMBRTUReceive+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 800e0d2:	2305      	movs	r3, #5
 800e0d4:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800e0d6:	f7f3 fd0d 	bl	8001af4 <__critical_exit>
    return eStatus;
 800e0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20013466 	.word	0x20013466
 800e0e8:	0801534c 	.word	0x0801534c
 800e0ec:	0801562c 	.word	0x0801562c
 800e0f0:	08015374 	.word	0x08015374
 800e0f4:	20012460 	.word	0x20012460
 800e0f8:	20012461 	.word	0x20012461

0800e0fc <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	4603      	mov	r3, r0
 800e104:	6039      	str	r1, [r7, #0]
 800e106:	71fb      	strb	r3, [r7, #7]
 800e108:	4613      	mov	r3, r2
 800e10a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
     * Проверьте, находится ли приемник все еще в режиме ожидания. В противном случае мы должны были
		замедлить обработку полученного кадра, и мастер отправил другой кадр по сети.
		Мы должны прервать отправку фрейма.
     */
    //printf("eMBRTUSend_eRcvState = %d \n", eRcvState);
    if( eRcvState == STATE_RX_IDLE )
 800e110:	4b2f      	ldr	r3, [pc, #188]	; (800e1d0 <eMBRTUSend+0xd4>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b01      	cmp	r3, #1
 800e118:	d152      	bne.n	800e1c0 <eMBRTUSend+0xc4>
    {
        /* Первый байт перед Modbus-PDU - это адрес SLAVE. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	4a2d      	ldr	r2, [pc, #180]	; (800e1d4 <eMBRTUSend+0xd8>)
 800e120:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800e122:	4b2d      	ldr	r3, [pc, #180]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e124:	2201      	movs	r2, #1
 800e126:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800e128:	4b2a      	ldr	r3, [pc, #168]	; (800e1d4 <eMBRTUSend+0xd8>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	79fa      	ldrb	r2, [r7, #7]
 800e12e:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800e130:	4b29      	ldr	r3, [pc, #164]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	b29a      	uxth	r2, r3
 800e136:	88bb      	ldrh	r3, [r7, #4]
 800e138:	4413      	add	r3, r2
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	4b26      	ldr	r3, [pc, #152]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e13e:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
		usCRC16 = HAL_CRC_Calculate(&hcrc, ( UCHAR * ) pucSndBufferCur, usSndBufferCount);
 800e140:	4b24      	ldr	r3, [pc, #144]	; (800e1d4 <eMBRTUSend+0xd8>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a24      	ldr	r2, [pc, #144]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e146:	8812      	ldrh	r2, [r2, #0]
 800e148:	b292      	uxth	r2, r2
 800e14a:	4619      	mov	r1, r3
 800e14c:	4823      	ldr	r0, [pc, #140]	; (800e1dc <eMBRTUSend+0xe0>)
 800e14e:	f7f8 fb67 	bl	8006820 <HAL_CRC_Calculate>
 800e152:	4603      	mov	r3, r0
 800e154:	b29a      	uxth	r2, r3
 800e156:	4b22      	ldr	r3, [pc, #136]	; (800e1e0 <eMBRTUSend+0xe4>)
 800e158:	801a      	strh	r2, [r3, #0]
				//смотрим сколько натикало -цикл usMBCRC16(85char) длится 28.629мкс (4867 тика)
				//usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );

        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800e15a:	4b21      	ldr	r3, [pc, #132]	; (800e1e0 <eMBRTUSend+0xe4>)
 800e15c:	8819      	ldrh	r1, [r3, #0]
 800e15e:	4b1e      	ldr	r3, [pc, #120]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	b29b      	uxth	r3, r3
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	b290      	uxth	r0, r2
 800e168:	4a1b      	ldr	r2, [pc, #108]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e16a:	8010      	strh	r0, [r2, #0]
 800e16c:	461a      	mov	r2, r3
 800e16e:	b2c9      	uxtb	r1, r1
 800e170:	4b1c      	ldr	r3, [pc, #112]	; (800e1e4 <eMBRTUSend+0xe8>)
 800e172:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800e174:	4b1a      	ldr	r3, [pc, #104]	; (800e1e0 <eMBRTUSend+0xe4>)
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	0a1b      	lsrs	r3, r3, #8
 800e17a:	b299      	uxth	r1, r3
 800e17c:	4b16      	ldr	r3, [pc, #88]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e17e:	881b      	ldrh	r3, [r3, #0]
 800e180:	b29b      	uxth	r3, r3
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	b290      	uxth	r0, r2
 800e186:	4a14      	ldr	r2, [pc, #80]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e188:	8010      	strh	r0, [r2, #0]
 800e18a:	461a      	mov	r2, r3
 800e18c:	b2c9      	uxtb	r1, r1
 800e18e:	4b15      	ldr	r3, [pc, #84]	; (800e1e4 <eMBRTUSend+0xe8>)
 800e190:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        if( usSndBufferCount != 0 )
 800e192:	4b11      	ldr	r3, [pc, #68]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	b29b      	uxth	r3, r3
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d013      	beq.n	800e1c4 <eMBRTUSend+0xc8>
        {
        	eSndState = STATE_TX_XMIT;
 800e19c:	4b12      	ldr	r3, [pc, #72]	; (800e1e8 <eMBRTUSend+0xec>)
 800e19e:	2201      	movs	r2, #1
 800e1a0:	701a      	strb	r2, [r3, #0]
        	vMBPortSerialEnable( FALSE, TRUE );
 800e1a2:	2101      	movs	r1, #1
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f7ff feb1 	bl	800df0c <vMBPortSerialEnable>
        	HAL_UART_Transmit_DMA(adr_huart_MB, pucSndBufferCur, usSndBufferCount);
 800e1aa:	4b10      	ldr	r3, [pc, #64]	; (800e1ec <eMBRTUSend+0xf0>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a09      	ldr	r2, [pc, #36]	; (800e1d4 <eMBRTUSend+0xd8>)
 800e1b0:	6811      	ldr	r1, [r2, #0]
 800e1b2:	4a09      	ldr	r2, [pc, #36]	; (800e1d8 <eMBRTUSend+0xdc>)
 800e1b4:	8812      	ldrh	r2, [r2, #0]
 800e1b6:	b292      	uxth	r2, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fd ff45 	bl	800c048 <HAL_UART_Transmit_DMA>
 800e1be:	e001      	b.n	800e1c4 <eMBRTUSend+0xc8>
        	//printf("_transmit_DMA %d_ \n", usSndBufferCount);
        }
    }
    else
    {
        eStatus = MB_EIO;
 800e1c0:	2305      	movs	r3, #5
 800e1c2:	73fb      	strb	r3, [r7, #15]
    }
//    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	200005e8 	.word	0x200005e8
 800e1d4:	20013460 	.word	0x20013460
 800e1d8:	20013464 	.word	0x20013464
 800e1dc:	20000468 	.word	0x20000468
 800e1e0:	20013468 	.word	0x20013468
 800e1e4:	20012460 	.word	0x20012460
 800e1e8:	200005e9 	.word	0x200005e9
 800e1ec:	20000610 	.word	0x20000610

0800e1f0 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800e1fa:	4b2b      	ldr	r3, [pc, #172]	; (800e2a8 <xMBRTUReceiveFSM+0xb8>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	2b00      	cmp	r3, #0
 800e202:	d005      	beq.n	800e210 <xMBRTUReceiveFSM+0x20>
 800e204:	4b29      	ldr	r3, [pc, #164]	; (800e2ac <xMBRTUReceiveFSM+0xbc>)
 800e206:	4a2a      	ldr	r2, [pc, #168]	; (800e2b0 <xMBRTUReceiveFSM+0xc0>)
 800e208:	21b9      	movs	r1, #185	; 0xb9
 800e20a:	482a      	ldr	r0, [pc, #168]	; (800e2b4 <xMBRTUReceiveFSM+0xc4>)
 800e20c:	f001 f8b0 	bl	800f370 <__assert_func>

    /* Всегда читайте  character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800e210:	1dbb      	adds	r3, r7, #6
 800e212:	4618      	mov	r0, r3
 800e214:	f7ff feb2 	bl	800df7c <xMBPortSerialGetByte>

    switch ( eRcvState )
 800e218:	4b27      	ldr	r3, [pc, #156]	; (800e2b8 <xMBRTUReceiveFSM+0xc8>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d83c      	bhi.n	800e29c <xMBRTUReceiveFSM+0xac>
 800e222:	a201      	add	r2, pc, #4	; (adr r2, 800e228 <xMBRTUReceiveFSM+0x38>)
 800e224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e228:	0800e239 	.word	0x0800e239
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e26d 	.word	0x0800e26d
 800e234:	0800e23f 	.word	0x0800e23f
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800e238:	f7ff fec4 	bl	800dfc4 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_INIT\n");
        break;
 800e23c:	e02e      	b.n	800e29c <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800e23e:	f7ff fec1 	bl	800dfc4 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        break;
 800e242:	e02b      	b.n	800e29c <xMBRTUReceiveFSM+0xac>
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
    	//printf("xMBRTUReceiveFSM eRcvState =STATE_RX_IDLE\n");
        usRcvBufferPos = 0;
 800e244:	4b1d      	ldr	r3, [pc, #116]	; (800e2bc <xMBRTUReceiveFSM+0xcc>)
 800e246:	2200      	movs	r2, #0
 800e248:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800e24a:	4b1c      	ldr	r3, [pc, #112]	; (800e2bc <xMBRTUReceiveFSM+0xcc>)
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	b291      	uxth	r1, r2
 800e254:	4a19      	ldr	r2, [pc, #100]	; (800e2bc <xMBRTUReceiveFSM+0xcc>)
 800e256:	8011      	strh	r1, [r2, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	79b9      	ldrb	r1, [r7, #6]
 800e25c:	4b18      	ldr	r3, [pc, #96]	; (800e2c0 <xMBRTUReceiveFSM+0xd0>)
 800e25e:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800e260:	4b15      	ldr	r3, [pc, #84]	; (800e2b8 <xMBRTUReceiveFSM+0xc8>)
 800e262:	2202      	movs	r2, #2
 800e264:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800e266:	f7ff fead 	bl	800dfc4 <vMBPortTimersEnable>
        break;
 800e26a:	e017      	b.n	800e29c <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800e26c:	4b13      	ldr	r3, [pc, #76]	; (800e2bc <xMBRTUReceiveFSM+0xcc>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	b29b      	uxth	r3, r3
 800e272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e276:	d20b      	bcs.n	800e290 <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800e278:	4b10      	ldr	r3, [pc, #64]	; (800e2bc <xMBRTUReceiveFSM+0xcc>)
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	1c5a      	adds	r2, r3, #1
 800e280:	b291      	uxth	r1, r2
 800e282:	4a0e      	ldr	r2, [pc, #56]	; (800e2bc <xMBRTUReceiveFSM+0xcc>)
 800e284:	8011      	strh	r1, [r2, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	79b9      	ldrb	r1, [r7, #6]
 800e28a:	4b0d      	ldr	r3, [pc, #52]	; (800e2c0 <xMBRTUReceiveFSM+0xd0>)
 800e28c:	5499      	strb	r1, [r3, r2]
 800e28e:	e002      	b.n	800e296 <xMBRTUReceiveFSM+0xa6>
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_RCV\n");
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <xMBRTUReceiveFSM+0xc8>)
 800e292:	2203      	movs	r2, #3
 800e294:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        }
        vMBPortTimersEnable(  );
 800e296:	f7ff fe95 	bl	800dfc4 <vMBPortTimersEnable>
        break;
 800e29a:	bf00      	nop
    }
    // printf("xMBRTUReceiveFSM eRcvState_OUT %d \n", eRcvState);
    return xTaskNeedSwitch;
 800e29c:	79fb      	ldrb	r3, [r7, #7]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	200005e9 	.word	0x200005e9
 800e2ac:	08015394 	.word	0x08015394
 800e2b0:	0801563c 	.word	0x0801563c
 800e2b4:	08015374 	.word	0x08015374
 800e2b8:	200005e8 	.word	0x200005e8
 800e2bc:	20013466 	.word	0x20013466
 800e2c0:	20012460 	.word	0x20012460

0800e2c4 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	71fb      	strb	r3, [r7, #7]

    // assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 800e2ce:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <xMBRTUTransmitFSM+0x48>)
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d002      	beq.n	800e2de <xMBRTUTransmitFSM+0x1a>
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d005      	beq.n	800e2e8 <xMBRTUTransmitFSM+0x24>
 800e2dc:	e011      	b.n	800e302 <xMBRTUTransmitFSM+0x3e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800e2de:	2100      	movs	r1, #0
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	f7ff fe13 	bl	800df0c <vMBPortSerialEnable>
        //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e2e6:	e00c      	b.n	800e302 <xMBRTUTransmitFSM+0x3e>

    case STATE_TX_XMIT:
        /* проверьте, закончили ли мы. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800e2e8:	2003      	movs	r0, #3
 800e2ea:	f7ff fddb 	bl	800dea4 <xMBPortEventPost>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	71fb      	strb	r3, [r7, #7]
            /* Отключите передатчик.
             * Это предотвращает еще одно прерывание пустого буфера передачи.*/
            vMBPortSerialEnable( TRUE, FALSE );
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	f7ff fe09 	bl	800df0c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800e2fa:	4b04      	ldr	r3, [pc, #16]	; (800e30c <xMBRTUTransmitFSM+0x48>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e300:	bf00      	nop
    }

    return xNeedPoll;
 800e302:	79fb      	ldrb	r3, [r7, #7]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	200005e9 	.word	0x200005e9

0800e310 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )  // вызывается только по 35 событию преполнения TIM6
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e316:	2300      	movs	r3, #0
 800e318:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800e31a:	4b1d      	ldr	r3, [pc, #116]	; (800e390 <xMBRTUTimerT35Expired+0x80>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	2b03      	cmp	r3, #3
 800e322:	d817      	bhi.n	800e354 <xMBRTUTimerT35Expired+0x44>
 800e324:	a201      	add	r2, pc, #4	; (adr r2, 800e32c <xMBRTUTimerT35Expired+0x1c>)
 800e326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32a:	bf00      	nop
 800e32c:	0800e33d 	.word	0x0800e33d
 800e330:	0800e37b 	.word	0x0800e37b
 800e334:	0800e349 	.word	0x0800e349
 800e338:	0800e37b 	.word	0x0800e37b
    {
        /* Timer t35 expired. Startup phase is finished. Таймер t35 истек. Этап запуска завершен.*/
    case STATE_RX_INIT:   // приемник в режиме инициализации
        xNeedPoll = xMBPortEventPost( EV_READY );
 800e33c:	2000      	movs	r0, #0
 800e33e:	f7ff fdb1 	bl	800dea4 <xMBPortEventPost>
 800e342:	4603      	mov	r3, r0
 800e344:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_INIT \n");
        break;
 800e346:	e019      	b.n	800e37c <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that a new frame was received.
         *  Был получен кадр, и срок действия t35 истек. Уведомите слушателя о том, что был получен новый кадр.*/
    case STATE_RX_RCV:    // приемник в режиме приема
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800e348:	2001      	movs	r0, #1
 800e34a:	f7ff fdab 	bl	800dea4 <xMBPortEventPost>
 800e34e:	4603      	mov	r3, r0
 800e350:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_RCV, _xNeedPoll=%d \n", xNeedPoll);
        break;
 800e352:	e013      	b.n	800e37c <xMBRTUTimerT35Expired+0x6c>
    	//printf("xMBRTUTimerT35Expired eRcvState=_RX_IDLE \n");
        break;

        /* Function called in an illegal state. Функция вызывается в illegal состоянии. */
    default:
    	if ( ( eRcvState == STATE_RX_INIT ) ||  ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) )
 800e354:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <xMBRTUTimerT35Expired+0x80>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d009      	beq.n	800e372 <xMBRTUTimerT35Expired+0x62>
 800e35e:	4b0c      	ldr	r3, [pc, #48]	; (800e390 <xMBRTUTimerT35Expired+0x80>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b02      	cmp	r3, #2
 800e366:	d004      	beq.n	800e372 <xMBRTUTimerT35Expired+0x62>
 800e368:	4b09      	ldr	r3, [pc, #36]	; (800e390 <xMBRTUTimerT35Expired+0x80>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b03      	cmp	r3, #3
 800e370:	d104      	bne.n	800e37c <xMBRTUTimerT35Expired+0x6c>
    	{
    		printf("xMBRTUTimerT35Expired  Function called in an illegal state \n");
 800e372:	4808      	ldr	r0, [pc, #32]	; (800e394 <xMBRTUTimerT35Expired+0x84>)
 800e374:	f002 f8ae 	bl	80104d4 <puts>
 800e378:	e000      	b.n	800e37c <xMBRTUTimerT35Expired+0x6c>
        break;
 800e37a:	bf00      	nop
    	}
    }

    vMBPortTimersDisable(  );
 800e37c:	f7ff fe30 	bl	800dfe0 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE; // всегда, при каждом срабатывании TIM6 статус приемника переводится в это состояние
 800e380:	4b03      	ldr	r3, [pc, #12]	; (800e390 <xMBRTUTimerT35Expired+0x80>)
 800e382:	2201      	movs	r2, #1
 800e384:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800e386:	79fb      	ldrb	r3, [r7, #7]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	200005e8 	.word	0x200005e8
 800e394:	080153b0 	.word	0x080153b0

0800e398 <arm_cfft_radix8by2_f32>:
 800e398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39c:	ed2d 8b08 	vpush	{d8-d11}
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	4608      	mov	r0, r1
 800e3a4:	f8b7 c000 	ldrh.w	ip, [r7]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e3ae:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e3b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e3b6:	f000 80b0 	beq.w	800e51a <arm_cfft_radix8by2_f32+0x182>
 800e3ba:	008c      	lsls	r4, r1, #2
 800e3bc:	3410      	adds	r4, #16
 800e3be:	f100 0310 	add.w	r3, r0, #16
 800e3c2:	1906      	adds	r6, r0, r4
 800e3c4:	3210      	adds	r2, #16
 800e3c6:	4444      	add	r4, r8
 800e3c8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800e3cc:	f108 0510 	add.w	r5, r8, #16
 800e3d0:	ed15 2a04 	vldr	s4, [r5, #-16]
 800e3d4:	ed55 2a03 	vldr	s5, [r5, #-12]
 800e3d8:	ed54 4a04 	vldr	s9, [r4, #-16]
 800e3dc:	ed14 4a03 	vldr	s8, [r4, #-12]
 800e3e0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800e3e4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e3e8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800e3ec:	ed15 0a02 	vldr	s0, [r5, #-8]
 800e3f0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800e3f4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800e3f8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800e3fc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800e400:	ed13 5a02 	vldr	s10, [r3, #-8]
 800e404:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e408:	ed16 1a02 	vldr	s2, [r6, #-8]
 800e40c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800e410:	ee73 ba82 	vadd.f32	s23, s7, s4
 800e414:	ee37 ba22 	vadd.f32	s22, s14, s5
 800e418:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800e41c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800e420:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800e424:	ee75 aa00 	vadd.f32	s21, s10, s0
 800e428:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800e42c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800e430:	ed43 ba04 	vstr	s23, [r3, #-16]
 800e434:	ed03 ba03 	vstr	s22, [r3, #-12]
 800e438:	ed43 aa02 	vstr	s21, [r3, #-8]
 800e43c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800e440:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e444:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e448:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e44c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e450:	ee37 7a62 	vsub.f32	s14, s14, s5
 800e454:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800e458:	ee34 4a43 	vsub.f32	s8, s8, s6
 800e45c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800e460:	ed12 3a04 	vldr	s6, [r2, #-16]
 800e464:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e468:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e46c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800e470:	ee23 2a83 	vmul.f32	s4, s7, s6
 800e474:	ee64 4a83 	vmul.f32	s9, s9, s6
 800e478:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e47c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e480:	ee64 6a26 	vmul.f32	s13, s8, s13
 800e484:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e488:	ee37 7a63 	vsub.f32	s14, s14, s7
 800e48c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e490:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800e494:	ee32 3a08 	vadd.f32	s6, s4, s16
 800e498:	ed05 7a03 	vstr	s14, [r5, #-12]
 800e49c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800e4a0:	ed04 4a04 	vstr	s8, [r4, #-16]
 800e4a4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e4a8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e4ac:	ee76 6a41 	vsub.f32	s13, s12, s2
 800e4b0:	ee35 5a40 	vsub.f32	s10, s10, s0
 800e4b4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800e4b8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e4bc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e4c0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e4c4:	ee66 4a87 	vmul.f32	s9, s13, s14
 800e4c8:	ee25 4a25 	vmul.f32	s8, s10, s11
 800e4cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e4d0:	ee25 5a07 	vmul.f32	s10, s10, s14
 800e4d4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e4d8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e4dc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e4e0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e4e4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e4e8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800e4ec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e4f0:	3310      	adds	r3, #16
 800e4f2:	4563      	cmp	r3, ip
 800e4f4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800e4f8:	f106 0610 	add.w	r6, r6, #16
 800e4fc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800e500:	f102 0210 	add.w	r2, r2, #16
 800e504:	ed04 6a02 	vstr	s12, [r4, #-8]
 800e508:	ed04 7a01 	vstr	s14, [r4, #-4]
 800e50c:	f105 0510 	add.w	r5, r5, #16
 800e510:	f104 0410 	add.w	r4, r4, #16
 800e514:	f47f af5c 	bne.w	800e3d0 <arm_cfft_radix8by2_f32+0x38>
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	b28c      	uxth	r4, r1
 800e51c:	4621      	mov	r1, r4
 800e51e:	2302      	movs	r3, #2
 800e520:	f000 fc66 	bl	800edf0 <arm_radix8_butterfly_f32>
 800e524:	ecbd 8b08 	vpop	{d8-d11}
 800e528:	4621      	mov	r1, r4
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	4640      	mov	r0, r8
 800e52e:	2302      	movs	r3, #2
 800e530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e534:	f000 bc5c 	b.w	800edf0 <arm_radix8_butterfly_f32>

0800e538 <arm_cfft_radix8by4_f32>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	ed2d 8b0a 	vpush	{d8-d12}
 800e540:	b08d      	sub	sp, #52	; 0x34
 800e542:	460d      	mov	r5, r1
 800e544:	910b      	str	r1, [sp, #44]	; 0x2c
 800e546:	8801      	ldrh	r1, [r0, #0]
 800e548:	6842      	ldr	r2, [r0, #4]
 800e54a:	900a      	str	r0, [sp, #40]	; 0x28
 800e54c:	0849      	lsrs	r1, r1, #1
 800e54e:	008b      	lsls	r3, r1, #2
 800e550:	18ee      	adds	r6, r5, r3
 800e552:	18f0      	adds	r0, r6, r3
 800e554:	edd0 5a00 	vldr	s11, [r0]
 800e558:	edd5 7a00 	vldr	s15, [r5]
 800e55c:	ed96 7a00 	vldr	s14, [r6]
 800e560:	edd0 3a01 	vldr	s7, [r0, #4]
 800e564:	ed96 4a01 	vldr	s8, [r6, #4]
 800e568:	ed95 5a01 	vldr	s10, [r5, #4]
 800e56c:	9008      	str	r0, [sp, #32]
 800e56e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800e572:	18c7      	adds	r7, r0, r3
 800e574:	edd7 4a00 	vldr	s9, [r7]
 800e578:	ed97 3a01 	vldr	s6, [r7, #4]
 800e57c:	9701      	str	r7, [sp, #4]
 800e57e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800e582:	462c      	mov	r4, r5
 800e584:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e588:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e58c:	ee16 ca90 	vmov	ip, s13
 800e590:	f844 cb08 	str.w	ip, [r4], #8
 800e594:	ee75 6a23 	vadd.f32	s13, s10, s7
 800e598:	edd6 5a01 	vldr	s11, [r6, #4]
 800e59c:	edd7 2a01 	vldr	s5, [r7, #4]
 800e5a0:	9404      	str	r4, [sp, #16]
 800e5a2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800e5a6:	ee74 3a27 	vadd.f32	s7, s8, s15
 800e5aa:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e5ae:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800e5b2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e5b6:	0849      	lsrs	r1, r1, #1
 800e5b8:	f102 0e08 	add.w	lr, r2, #8
 800e5bc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800e5c0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e5c4:	9109      	str	r1, [sp, #36]	; 0x24
 800e5c6:	ee35 4a47 	vsub.f32	s8, s10, s14
 800e5ca:	f1a1 0902 	sub.w	r9, r1, #2
 800e5ce:	f8cd e00c 	str.w	lr, [sp, #12]
 800e5d2:	4631      	mov	r1, r6
 800e5d4:	ee13 ea90 	vmov	lr, s7
 800e5d8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800e5dc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	edc5 5a01 	vstr	s11, [r5, #4]
 800e5e6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e5ea:	f841 eb08 	str.w	lr, [r1], #8
 800e5ee:	ee34 5a24 	vadd.f32	s10, s8, s9
 800e5f2:	ee16 ea10 	vmov	lr, s12
 800e5f6:	ed86 5a01 	vstr	s10, [r6, #4]
 800e5fa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e5fe:	f844 eb08 	str.w	lr, [r4], #8
 800e602:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e606:	edc0 6a01 	vstr	s13, [r0, #4]
 800e60a:	9405      	str	r4, [sp, #20]
 800e60c:	4604      	mov	r4, r0
 800e60e:	ee17 0a90 	vmov	r0, s15
 800e612:	9106      	str	r1, [sp, #24]
 800e614:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e618:	f102 0110 	add.w	r1, r2, #16
 800e61c:	46bc      	mov	ip, r7
 800e61e:	9100      	str	r1, [sp, #0]
 800e620:	f847 0b08 	str.w	r0, [r7], #8
 800e624:	f102 0118 	add.w	r1, r2, #24
 800e628:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800e62c:	9102      	str	r1, [sp, #8]
 800e62e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e632:	9007      	str	r0, [sp, #28]
 800e634:	f000 8134 	beq.w	800e8a0 <arm_cfft_radix8by4_f32+0x368>
 800e638:	f102 0920 	add.w	r9, r2, #32
 800e63c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800e640:	9a01      	ldr	r2, [sp, #4]
 800e642:	f8dd a000 	ldr.w	sl, [sp]
 800e646:	3b0c      	subs	r3, #12
 800e648:	4683      	mov	fp, r0
 800e64a:	4463      	add	r3, ip
 800e64c:	f105 0e10 	add.w	lr, r5, #16
 800e650:	f1a4 010c 	sub.w	r1, r4, #12
 800e654:	f104 0510 	add.w	r5, r4, #16
 800e658:	f1a6 0c0c 	sub.w	ip, r6, #12
 800e65c:	f1a2 040c 	sub.w	r4, r2, #12
 800e660:	f106 0010 	add.w	r0, r6, #16
 800e664:	3210      	adds	r2, #16
 800e666:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800e66a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800e66e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e672:	ed52 1a02 	vldr	s3, [r2, #-8]
 800e676:	ed55 6a01 	vldr	s13, [r5, #-4]
 800e67a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800e67e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800e682:	ed10 8a01 	vldr	s16, [r0, #-4]
 800e686:	ee35 4a25 	vadd.f32	s8, s10, s11
 800e68a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800e68e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800e692:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e696:	ee37 7a21 	vadd.f32	s14, s14, s3
 800e69a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800e69e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800e6a2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800e6a6:	ed52 6a01 	vldr	s13, [r2, #-4]
 800e6aa:	ee36 7a07 	vadd.f32	s14, s12, s14
 800e6ae:	ee78 aa25 	vadd.f32	s21, s16, s11
 800e6b2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e6b6:	ee70 3a67 	vsub.f32	s7, s0, s15
 800e6ba:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800e6be:	ed94 7a02 	vldr	s14, [r4, #8]
 800e6c2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800e6c6:	ed91 ba02 	vldr	s22, [r1, #8]
 800e6ca:	edd3 9a02 	vldr	s19, [r3, #8]
 800e6ce:	edd4 2a01 	vldr	s5, [r4, #4]
 800e6d2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800e6d6:	ed93 5a01 	vldr	s10, [r3, #4]
 800e6da:	edd1 0a01 	vldr	s1, [r1, #4]
 800e6de:	ee72 6a07 	vadd.f32	s13, s4, s14
 800e6e2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800e6e6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800e6ea:	ee79 4a22 	vadd.f32	s9, s18, s5
 800e6ee:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800e6f2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800e6f6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800e6fa:	ed91 7a01 	vldr	s14, [r1, #4]
 800e6fe:	edd3 8a01 	vldr	s17, [r3, #4]
 800e702:	ee34 7a87 	vadd.f32	s14, s9, s14
 800e706:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800e70a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800e70e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800e712:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e716:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800e71a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800e71e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800e722:	ee39 9a05 	vadd.f32	s18, s18, s10
 800e726:	ee7a aac1 	vsub.f32	s21, s21, s2
 800e72a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e72e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800e732:	ee69 ba07 	vmul.f32	s23, s18, s14
 800e736:	ee6a aa87 	vmul.f32	s21, s21, s14
 800e73a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800e73e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800e742:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800e746:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800e74a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800e74e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800e752:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e756:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800e75a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800e75e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800e762:	ee76 6acb 	vsub.f32	s13, s13, s22
 800e766:	ee36 6a48 	vsub.f32	s12, s12, s16
 800e76a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800e76e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800e772:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e776:	edc1 8a01 	vstr	s17, [r1, #4]
 800e77a:	ed81 aa02 	vstr	s20, [r1, #8]
 800e77e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800e782:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800e786:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800e78a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800e78e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800e792:	ee36 6a41 	vsub.f32	s12, s12, s2
 800e796:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800e79a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800e79e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800e7a2:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e7a6:	ee24 4a26 	vmul.f32	s8, s8, s13
 800e7aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e7ae:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800e7b2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800e7b6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e7ba:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e7be:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800e7c2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800e7c6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800e7ca:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800e7ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e7d2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800e7d6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800e7da:	ed84 7a01 	vstr	s14, [r4, #4]
 800e7de:	ed84 4a02 	vstr	s8, [r4, #8]
 800e7e2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800e7e6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800e7ea:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800e7ee:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800e7f2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e7f6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800e7fa:	ee67 2a26 	vmul.f32	s5, s14, s13
 800e7fe:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e802:	ee26 5a25 	vmul.f32	s10, s12, s11
 800e806:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e80a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e80e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e812:	ee63 6a26 	vmul.f32	s13, s6, s13
 800e816:	ee23 3a25 	vmul.f32	s6, s6, s11
 800e81a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e81e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800e822:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800e826:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e82a:	f1bb 0b01 	subs.w	fp, fp, #1
 800e82e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800e832:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e836:	f10e 0e08 	add.w	lr, lr, #8
 800e83a:	ed83 3a02 	vstr	s6, [r3, #8]
 800e83e:	ed83 7a01 	vstr	s14, [r3, #4]
 800e842:	f1ac 0c08 	sub.w	ip, ip, #8
 800e846:	f10a 0a08 	add.w	sl, sl, #8
 800e84a:	f100 0008 	add.w	r0, r0, #8
 800e84e:	f1a1 0108 	sub.w	r1, r1, #8
 800e852:	f109 0910 	add.w	r9, r9, #16
 800e856:	f105 0508 	add.w	r5, r5, #8
 800e85a:	f1a4 0408 	sub.w	r4, r4, #8
 800e85e:	f108 0818 	add.w	r8, r8, #24
 800e862:	f102 0208 	add.w	r2, r2, #8
 800e866:	f1a3 0308 	sub.w	r3, r3, #8
 800e86a:	f47f aefc 	bne.w	800e666 <arm_cfft_radix8by4_f32+0x12e>
 800e86e:	9907      	ldr	r1, [sp, #28]
 800e870:	9800      	ldr	r0, [sp, #0]
 800e872:	00cb      	lsls	r3, r1, #3
 800e874:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800e878:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800e87c:	9100      	str	r1, [sp, #0]
 800e87e:	9904      	ldr	r1, [sp, #16]
 800e880:	4419      	add	r1, r3
 800e882:	9104      	str	r1, [sp, #16]
 800e884:	9903      	ldr	r1, [sp, #12]
 800e886:	4419      	add	r1, r3
 800e888:	9103      	str	r1, [sp, #12]
 800e88a:	9906      	ldr	r1, [sp, #24]
 800e88c:	4419      	add	r1, r3
 800e88e:	9106      	str	r1, [sp, #24]
 800e890:	9905      	ldr	r1, [sp, #20]
 800e892:	441f      	add	r7, r3
 800e894:	4419      	add	r1, r3
 800e896:	9b02      	ldr	r3, [sp, #8]
 800e898:	9105      	str	r1, [sp, #20]
 800e89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e89e:	9302      	str	r3, [sp, #8]
 800e8a0:	9904      	ldr	r1, [sp, #16]
 800e8a2:	9805      	ldr	r0, [sp, #20]
 800e8a4:	ed91 4a00 	vldr	s8, [r1]
 800e8a8:	edd0 6a00 	vldr	s13, [r0]
 800e8ac:	9b06      	ldr	r3, [sp, #24]
 800e8ae:	ed97 3a00 	vldr	s6, [r7]
 800e8b2:	edd3 7a00 	vldr	s15, [r3]
 800e8b6:	edd0 4a01 	vldr	s9, [r0, #4]
 800e8ba:	edd1 3a01 	vldr	s7, [r1, #4]
 800e8be:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8c2:	ed93 7a01 	vldr	s14, [r3, #4]
 800e8c6:	9a03      	ldr	r2, [sp, #12]
 800e8c8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800e8cc:	ee34 6a26 	vadd.f32	s12, s8, s13
 800e8d0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800e8d4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e8d8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800e8dc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e8e0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800e8e4:	ed81 5a00 	vstr	s10, [r1]
 800e8e8:	ed93 5a01 	vldr	s10, [r3, #4]
 800e8ec:	edd7 4a01 	vldr	s9, [r7, #4]
 800e8f0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e8f4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800e8f8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e8fc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800e900:	ed81 5a01 	vstr	s10, [r1, #4]
 800e904:	edd2 1a00 	vldr	s3, [r2]
 800e908:	edd2 2a01 	vldr	s5, [r2, #4]
 800e90c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800e910:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e914:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e918:	ee64 4a21 	vmul.f32	s9, s8, s3
 800e91c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e920:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e924:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e928:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800e92c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e930:	edc3 2a00 	vstr	s5, [r3]
 800e934:	ed83 5a01 	vstr	s10, [r3, #4]
 800e938:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e942:	ed93 4a01 	vldr	s8, [r3, #4]
 800e946:	ed93 5a00 	vldr	s10, [r3]
 800e94a:	9b02      	ldr	r3, [sp, #8]
 800e94c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800e950:	ee66 4a05 	vmul.f32	s9, s12, s10
 800e954:	ee25 5a85 	vmul.f32	s10, s11, s10
 800e958:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e95c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e960:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e964:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800e968:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e96c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e970:	ed80 6a01 	vstr	s12, [r0, #4]
 800e974:	edc0 5a00 	vstr	s11, [r0]
 800e978:	edd3 5a01 	vldr	s11, [r3, #4]
 800e97c:	edd3 6a00 	vldr	s13, [r3]
 800e980:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e984:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800e988:	ee27 6a26 	vmul.f32	s12, s14, s13
 800e98c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e990:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e994:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e998:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e99c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e9a0:	ed87 7a01 	vstr	s14, [r7, #4]
 800e9a4:	edc7 7a00 	vstr	s15, [r7]
 800e9a8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	686a      	ldr	r2, [r5, #4]
 800e9b0:	2304      	movs	r3, #4
 800e9b2:	f000 fa1d 	bl	800edf0 <arm_radix8_butterfly_f32>
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	686a      	ldr	r2, [r5, #4]
 800e9bc:	2304      	movs	r3, #4
 800e9be:	f000 fa17 	bl	800edf0 <arm_radix8_butterfly_f32>
 800e9c2:	9808      	ldr	r0, [sp, #32]
 800e9c4:	686a      	ldr	r2, [r5, #4]
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	2304      	movs	r3, #4
 800e9ca:	f000 fa11 	bl	800edf0 <arm_radix8_butterfly_f32>
 800e9ce:	686a      	ldr	r2, [r5, #4]
 800e9d0:	9801      	ldr	r0, [sp, #4]
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	2304      	movs	r3, #4
 800e9d6:	b00d      	add	sp, #52	; 0x34
 800e9d8:	ecbd 8b0a 	vpop	{d8-d12}
 800e9dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e0:	f000 ba06 	b.w	800edf0 <arm_radix8_butterfly_f32>

0800e9e4 <arm_cfft_f32>:
 800e9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e8:	2a01      	cmp	r2, #1
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	4617      	mov	r7, r2
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	4698      	mov	r8, r3
 800e9f2:	8805      	ldrh	r5, [r0, #0]
 800e9f4:	d056      	beq.n	800eaa4 <arm_cfft_f32+0xc0>
 800e9f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e9fa:	d063      	beq.n	800eac4 <arm_cfft_f32+0xe0>
 800e9fc:	d916      	bls.n	800ea2c <arm_cfft_f32+0x48>
 800e9fe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ea02:	d01a      	beq.n	800ea3a <arm_cfft_f32+0x56>
 800ea04:	d947      	bls.n	800ea96 <arm_cfft_f32+0xb2>
 800ea06:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ea0a:	d05b      	beq.n	800eac4 <arm_cfft_f32+0xe0>
 800ea0c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ea10:	d105      	bne.n	800ea1e <arm_cfft_f32+0x3a>
 800ea12:	2301      	movs	r3, #1
 800ea14:	6872      	ldr	r2, [r6, #4]
 800ea16:	4629      	mov	r1, r5
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 f9e9 	bl	800edf0 <arm_radix8_butterfly_f32>
 800ea1e:	f1b8 0f00 	cmp.w	r8, #0
 800ea22:	d111      	bne.n	800ea48 <arm_cfft_f32+0x64>
 800ea24:	2f01      	cmp	r7, #1
 800ea26:	d016      	beq.n	800ea56 <arm_cfft_f32+0x72>
 800ea28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea2c:	2d20      	cmp	r5, #32
 800ea2e:	d049      	beq.n	800eac4 <arm_cfft_f32+0xe0>
 800ea30:	d935      	bls.n	800ea9e <arm_cfft_f32+0xba>
 800ea32:	2d40      	cmp	r5, #64	; 0x40
 800ea34:	d0ed      	beq.n	800ea12 <arm_cfft_f32+0x2e>
 800ea36:	2d80      	cmp	r5, #128	; 0x80
 800ea38:	d1f1      	bne.n	800ea1e <arm_cfft_f32+0x3a>
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff fcab 	bl	800e398 <arm_cfft_radix8by2_f32>
 800ea42:	f1b8 0f00 	cmp.w	r8, #0
 800ea46:	d0ed      	beq.n	800ea24 <arm_cfft_f32+0x40>
 800ea48:	68b2      	ldr	r2, [r6, #8]
 800ea4a:	89b1      	ldrh	r1, [r6, #12]
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f000 f841 	bl	800ead4 <arm_bitreversal_32>
 800ea52:	2f01      	cmp	r7, #1
 800ea54:	d1e8      	bne.n	800ea28 <arm_cfft_f32+0x44>
 800ea56:	ee07 5a90 	vmov	s15, r5
 800ea5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea66:	2d00      	cmp	r5, #0
 800ea68:	d0de      	beq.n	800ea28 <arm_cfft_f32+0x44>
 800ea6a:	f104 0108 	add.w	r1, r4, #8
 800ea6e:	2300      	movs	r3, #0
 800ea70:	3301      	adds	r3, #1
 800ea72:	429d      	cmp	r5, r3
 800ea74:	f101 0108 	add.w	r1, r1, #8
 800ea78:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ea7c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ea80:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ea84:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ea88:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ea8c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ea90:	d1ee      	bne.n	800ea70 <arm_cfft_f32+0x8c>
 800ea92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea96:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ea9a:	d0ba      	beq.n	800ea12 <arm_cfft_f32+0x2e>
 800ea9c:	e7bf      	b.n	800ea1e <arm_cfft_f32+0x3a>
 800ea9e:	2d10      	cmp	r5, #16
 800eaa0:	d0cb      	beq.n	800ea3a <arm_cfft_f32+0x56>
 800eaa2:	e7bc      	b.n	800ea1e <arm_cfft_f32+0x3a>
 800eaa4:	b19d      	cbz	r5, 800eace <arm_cfft_f32+0xea>
 800eaa6:	f101 030c 	add.w	r3, r1, #12
 800eaaa:	2200      	movs	r2, #0
 800eaac:	ed53 7a02 	vldr	s15, [r3, #-8]
 800eab0:	3201      	adds	r2, #1
 800eab2:	eef1 7a67 	vneg.f32	s15, s15
 800eab6:	4295      	cmp	r5, r2
 800eab8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800eabc:	f103 0308 	add.w	r3, r3, #8
 800eac0:	d1f4      	bne.n	800eaac <arm_cfft_f32+0xc8>
 800eac2:	e798      	b.n	800e9f6 <arm_cfft_f32+0x12>
 800eac4:	4621      	mov	r1, r4
 800eac6:	4630      	mov	r0, r6
 800eac8:	f7ff fd36 	bl	800e538 <arm_cfft_radix8by4_f32>
 800eacc:	e7a7      	b.n	800ea1e <arm_cfft_f32+0x3a>
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0aa      	beq.n	800ea28 <arm_cfft_f32+0x44>
 800ead2:	e7b9      	b.n	800ea48 <arm_cfft_f32+0x64>

0800ead4 <arm_bitreversal_32>:
 800ead4:	b1e9      	cbz	r1, 800eb12 <arm_bitreversal_32+0x3e>
 800ead6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ead8:	2500      	movs	r5, #0
 800eada:	f102 0e02 	add.w	lr, r2, #2
 800eade:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800eae2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800eae6:	08a4      	lsrs	r4, r4, #2
 800eae8:	089b      	lsrs	r3, r3, #2
 800eaea:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800eaee:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800eaf2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800eaf6:	00a6      	lsls	r6, r4, #2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800eafe:	3304      	adds	r3, #4
 800eb00:	1d34      	adds	r4, r6, #4
 800eb02:	3502      	adds	r5, #2
 800eb04:	58c6      	ldr	r6, [r0, r3]
 800eb06:	5907      	ldr	r7, [r0, r4]
 800eb08:	50c7      	str	r7, [r0, r3]
 800eb0a:	428d      	cmp	r5, r1
 800eb0c:	5106      	str	r6, [r0, r4]
 800eb0e:	d3e6      	bcc.n	800eade <arm_bitreversal_32+0xa>
 800eb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb12:	4770      	bx	lr

0800eb14 <arm_cmplx_mag_f32>:
 800eb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb18:	ed2d 8b02 	vpush	{d8}
 800eb1c:	0897      	lsrs	r7, r2, #2
 800eb1e:	b084      	sub	sp, #16
 800eb20:	d077      	beq.n	800ec12 <arm_cmplx_mag_f32+0xfe>
 800eb22:	f04f 0800 	mov.w	r8, #0
 800eb26:	f100 0420 	add.w	r4, r0, #32
 800eb2a:	f101 0510 	add.w	r5, r1, #16
 800eb2e:	463e      	mov	r6, r7
 800eb30:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800eb34:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800eb38:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb40:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4c:	f2c0 80c5 	blt.w	800ecda <arm_cmplx_mag_f32+0x1c6>
 800eb50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb58:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eb5c:	f100 80cb 	bmi.w	800ecf6 <arm_cmplx_mag_f32+0x1e2>
 800eb60:	ed05 8a04 	vstr	s16, [r5, #-16]
 800eb64:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800eb68:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800eb6c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb80:	f2c0 80a8 	blt.w	800ecd4 <arm_cmplx_mag_f32+0x1c0>
 800eb84:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eb90:	f100 80a8 	bmi.w	800ece4 <arm_cmplx_mag_f32+0x1d0>
 800eb94:	ed05 8a03 	vstr	s16, [r5, #-12]
 800eb98:	ed14 0a04 	vldr	s0, [r4, #-16]
 800eb9c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800eba0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eba4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eba8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ebac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ebb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb4:	f2c0 808b 	blt.w	800ecce <arm_cmplx_mag_f32+0x1ba>
 800ebb8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ebbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ebc4:	f100 80a9 	bmi.w	800ed1a <arm_cmplx_mag_f32+0x206>
 800ebc8:	ed05 8a02 	vstr	s16, [r5, #-8]
 800ebcc:	ed14 0a02 	vldr	s0, [r4, #-8]
 800ebd0:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ebd4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ebd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ebe0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ebe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe8:	db6e      	blt.n	800ecc8 <arm_cmplx_mag_f32+0x1b4>
 800ebea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ebee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ebf6:	f100 8087 	bmi.w	800ed08 <arm_cmplx_mag_f32+0x1f4>
 800ebfa:	ed05 8a01 	vstr	s16, [r5, #-4]
 800ebfe:	3e01      	subs	r6, #1
 800ec00:	f104 0420 	add.w	r4, r4, #32
 800ec04:	f105 0510 	add.w	r5, r5, #16
 800ec08:	d192      	bne.n	800eb30 <arm_cmplx_mag_f32+0x1c>
 800ec0a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800ec0e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ec12:	f012 0203 	ands.w	r2, r2, #3
 800ec16:	d052      	beq.n	800ecbe <arm_cmplx_mag_f32+0x1aa>
 800ec18:	ed90 0a00 	vldr	s0, [r0]
 800ec1c:	edd0 7a01 	vldr	s15, [r0, #4]
 800ec20:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec28:	2300      	movs	r3, #0
 800ec2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ec2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec36:	bfb8      	it	lt
 800ec38:	600b      	strlt	r3, [r1, #0]
 800ec3a:	db08      	blt.n	800ec4e <arm_cmplx_mag_f32+0x13a>
 800ec3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ec40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec44:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ec48:	d479      	bmi.n	800ed3e <arm_cmplx_mag_f32+0x22a>
 800ec4a:	ed81 8a00 	vstr	s16, [r1]
 800ec4e:	3a01      	subs	r2, #1
 800ec50:	d035      	beq.n	800ecbe <arm_cmplx_mag_f32+0x1aa>
 800ec52:	ed90 0a02 	vldr	s0, [r0, #8]
 800ec56:	edd0 7a03 	vldr	s15, [r0, #12]
 800ec5a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec62:	2300      	movs	r3, #0
 800ec64:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ec68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec70:	bfb8      	it	lt
 800ec72:	604b      	strlt	r3, [r1, #4]
 800ec74:	db08      	blt.n	800ec88 <arm_cmplx_mag_f32+0x174>
 800ec76:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ec7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ec82:	d453      	bmi.n	800ed2c <arm_cmplx_mag_f32+0x218>
 800ec84:	ed81 8a01 	vstr	s16, [r1, #4]
 800ec88:	2a01      	cmp	r2, #1
 800ec8a:	d018      	beq.n	800ecbe <arm_cmplx_mag_f32+0x1aa>
 800ec8c:	ed90 0a04 	vldr	s0, [r0, #16]
 800ec90:	edd0 7a05 	vldr	s15, [r0, #20]
 800ec94:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eca2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecaa:	db19      	blt.n	800ece0 <arm_cmplx_mag_f32+0x1cc>
 800ecac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ecb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ecb8:	d44a      	bmi.n	800ed50 <arm_cmplx_mag_f32+0x23c>
 800ecba:	ed81 8a02 	vstr	s16, [r1, #8]
 800ecbe:	b004      	add	sp, #16
 800ecc0:	ecbd 8b02 	vpop	{d8}
 800ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc8:	f845 8c04 	str.w	r8, [r5, #-4]
 800eccc:	e797      	b.n	800ebfe <arm_cmplx_mag_f32+0xea>
 800ecce:	f845 8c08 	str.w	r8, [r5, #-8]
 800ecd2:	e77b      	b.n	800ebcc <arm_cmplx_mag_f32+0xb8>
 800ecd4:	f845 8c0c 	str.w	r8, [r5, #-12]
 800ecd8:	e75e      	b.n	800eb98 <arm_cmplx_mag_f32+0x84>
 800ecda:	f845 8c10 	str.w	r8, [r5, #-16]
 800ecde:	e741      	b.n	800eb64 <arm_cmplx_mag_f32+0x50>
 800ece0:	608b      	str	r3, [r1, #8]
 800ece2:	e7ec      	b.n	800ecbe <arm_cmplx_mag_f32+0x1aa>
 800ece4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ece8:	9001      	str	r0, [sp, #4]
 800ecea:	f005 fa05 	bl	80140f8 <sqrtf>
 800ecee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ecf2:	9801      	ldr	r0, [sp, #4]
 800ecf4:	e74e      	b.n	800eb94 <arm_cmplx_mag_f32+0x80>
 800ecf6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ecfa:	9001      	str	r0, [sp, #4]
 800ecfc:	f005 f9fc 	bl	80140f8 <sqrtf>
 800ed00:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ed04:	9801      	ldr	r0, [sp, #4]
 800ed06:	e72b      	b.n	800eb60 <arm_cmplx_mag_f32+0x4c>
 800ed08:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ed0c:	9001      	str	r0, [sp, #4]
 800ed0e:	f005 f9f3 	bl	80140f8 <sqrtf>
 800ed12:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ed16:	9801      	ldr	r0, [sp, #4]
 800ed18:	e76f      	b.n	800ebfa <arm_cmplx_mag_f32+0xe6>
 800ed1a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ed1e:	9001      	str	r0, [sp, #4]
 800ed20:	f005 f9ea 	bl	80140f8 <sqrtf>
 800ed24:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ed28:	9801      	ldr	r0, [sp, #4]
 800ed2a:	e74d      	b.n	800ebc8 <arm_cmplx_mag_f32+0xb4>
 800ed2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed30:	9201      	str	r2, [sp, #4]
 800ed32:	f005 f9e1 	bl	80140f8 <sqrtf>
 800ed36:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ed3a:	9903      	ldr	r1, [sp, #12]
 800ed3c:	e7a2      	b.n	800ec84 <arm_cmplx_mag_f32+0x170>
 800ed3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed42:	9201      	str	r2, [sp, #4]
 800ed44:	f005 f9d8 	bl	80140f8 <sqrtf>
 800ed48:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ed4c:	9903      	ldr	r1, [sp, #12]
 800ed4e:	e77c      	b.n	800ec4a <arm_cmplx_mag_f32+0x136>
 800ed50:	9101      	str	r1, [sp, #4]
 800ed52:	f005 f9d1 	bl	80140f8 <sqrtf>
 800ed56:	9901      	ldr	r1, [sp, #4]
 800ed58:	e7af      	b.n	800ecba <arm_cmplx_mag_f32+0x1a6>
 800ed5a:	bf00      	nop

0800ed5c <arm_cos_f32>:
 800ed5c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800ede4 <arm_cos_f32+0x88>
 800ed60:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed64:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ed68:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed74:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ed78:	d504      	bpl.n	800ed84 <arm_cos_f32+0x28>
 800ed7a:	ee17 3a90 	vmov	r3, s15
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	ee07 3a90 	vmov	s15, r3
 800ed84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed88:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800ede8 <arm_cos_f32+0x8c>
 800ed8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed90:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ed94:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ed98:	ee17 3a90 	vmov	r3, s15
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eda2:	d21a      	bcs.n	800edda <arm_cos_f32+0x7e>
 800eda4:	ee07 3a90 	vmov	s15, r3
 800eda8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edac:	1c59      	adds	r1, r3, #1
 800edae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800edb2:	4a0e      	ldr	r2, [pc, #56]	; (800edec <arm_cos_f32+0x90>)
 800edb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800edb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800edc0:	ed93 7a00 	vldr	s14, [r3]
 800edc4:	edd2 6a00 	vldr	s13, [r2]
 800edc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800edcc:	ee20 0a26 	vmul.f32	s0, s0, s13
 800edd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edd4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800edd8:	4770      	bx	lr
 800edda:	ee30 0a47 	vsub.f32	s0, s0, s14
 800edde:	2101      	movs	r1, #1
 800ede0:	2300      	movs	r3, #0
 800ede2:	e7e6      	b.n	800edb2 <arm_cos_f32+0x56>
 800ede4:	3e22f983 	.word	0x3e22f983
 800ede8:	44000000 	.word	0x44000000
 800edec:	0801a8e0 	.word	0x0801a8e0

0800edf0 <arm_radix8_butterfly_f32>:
 800edf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf4:	ed2d 8b10 	vpush	{d8-d15}
 800edf8:	b095      	sub	sp, #84	; 0x54
 800edfa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800edfe:	4603      	mov	r3, r0
 800ee00:	3304      	adds	r3, #4
 800ee02:	ed9f bab9 	vldr	s22, [pc, #740]	; 800f0e8 <arm_radix8_butterfly_f32+0x2f8>
 800ee06:	9012      	str	r0, [sp, #72]	; 0x48
 800ee08:	468b      	mov	fp, r1
 800ee0a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ee0c:	4689      	mov	r9, r1
 800ee0e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800ee12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee14:	960f      	str	r6, [sp, #60]	; 0x3c
 800ee16:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800ee1a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800ee1e:	eb03 0508 	add.w	r5, r3, r8
 800ee22:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ee26:	eb05 040e 	add.w	r4, r5, lr
 800ee2a:	0137      	lsls	r7, r6, #4
 800ee2c:	eba6 030a 	sub.w	r3, r6, sl
 800ee30:	eb04 000e 	add.w	r0, r4, lr
 800ee34:	44b2      	add	sl, r6
 800ee36:	1d3a      	adds	r2, r7, #4
 800ee38:	9702      	str	r7, [sp, #8]
 800ee3a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ee3e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800ee42:	ebae 0c06 	sub.w	ip, lr, r6
 800ee46:	9703      	str	r7, [sp, #12]
 800ee48:	eb03 0708 	add.w	r7, r3, r8
 800ee4c:	9701      	str	r7, [sp, #4]
 800ee4e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800ee52:	9706      	str	r7, [sp, #24]
 800ee54:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ee56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800ee5a:	f10e 0104 	add.w	r1, lr, #4
 800ee5e:	4439      	add	r1, r7
 800ee60:	443a      	add	r2, r7
 800ee62:	0137      	lsls	r7, r6, #4
 800ee64:	00f6      	lsls	r6, r6, #3
 800ee66:	9704      	str	r7, [sp, #16]
 800ee68:	9605      	str	r6, [sp, #20]
 800ee6a:	9f01      	ldr	r7, [sp, #4]
 800ee6c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ee6e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ee72:	f04f 0c00 	mov.w	ip, #0
 800ee76:	edd4 6a00 	vldr	s13, [r4]
 800ee7a:	edd7 1a00 	vldr	s3, [r7]
 800ee7e:	ed16 aa01 	vldr	s20, [r6, #-4]
 800ee82:	edd5 5a00 	vldr	s11, [r5]
 800ee86:	ed52 9a01 	vldr	s19, [r2, #-4]
 800ee8a:	ed90 6a00 	vldr	s12, [r0]
 800ee8e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ee92:	ed93 3a00 	vldr	s6, [r3]
 800ee96:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ee9a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ee9e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800eea2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800eea6:	ee35 7a02 	vadd.f32	s14, s10, s4
 800eeaa:	ee34 4a80 	vadd.f32	s8, s9, s0
 800eeae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eeb2:	ee74 6a07 	vadd.f32	s13, s8, s14
 800eeb6:	ee34 4a47 	vsub.f32	s8, s8, s14
 800eeba:	ed46 6a01 	vstr	s13, [r6, #-4]
 800eebe:	ed85 4a00 	vstr	s8, [r5]
 800eec2:	edd1 6a00 	vldr	s13, [r1]
 800eec6:	ed94 9a01 	vldr	s18, [r4, #4]
 800eeca:	edd3 2a01 	vldr	s5, [r3, #4]
 800eece:	edd7 8a01 	vldr	s17, [r7, #4]
 800eed2:	edd6 0a00 	vldr	s1, [r6]
 800eed6:	edd5 3a01 	vldr	s7, [r5, #4]
 800eeda:	ed90 8a01 	vldr	s16, [r0, #4]
 800eede:	ed92 7a00 	vldr	s14, [r2]
 800eee2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800eee6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800eeea:	ee72 aae8 	vsub.f32	s21, s5, s17
 800eeee:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800eef2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800eef6:	ee77 7a83 	vadd.f32	s15, s15, s6
 800eefa:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800eefe:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800ef02:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800ef06:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800ef0a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800ef0e:	ee77 0a08 	vadd.f32	s1, s14, s16
 800ef12:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800ef16:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ef1a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800ef1e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800ef22:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ef26:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ef2a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ef2e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ef32:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ef36:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800ef3a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800ef3e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ef42:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ef46:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800ef4a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800ef4e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800ef52:	ee37 7a41 	vsub.f32	s14, s14, s2
 800ef56:	ee73 1a84 	vadd.f32	s3, s7, s8
 800ef5a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ef5e:	ee76 3a27 	vadd.f32	s7, s12, s15
 800ef62:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ef66:	ee32 8a00 	vadd.f32	s16, s4, s0
 800ef6a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ef6e:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ef72:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ef76:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ef7a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800ef7e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800ef82:	ee34 6a67 	vsub.f32	s12, s8, s15
 800ef86:	ee75 4a87 	vadd.f32	s9, s11, s14
 800ef8a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800ef8e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ef92:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ef96:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800ef9a:	44dc      	add	ip, fp
 800ef9c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800efa0:	45e1      	cmp	r9, ip
 800efa2:	ed86 8a00 	vstr	s16, [r6]
 800efa6:	ed85 2a01 	vstr	s4, [r5, #4]
 800efaa:	4456      	add	r6, sl
 800efac:	ed02 0a01 	vstr	s0, [r2, #-4]
 800efb0:	4455      	add	r5, sl
 800efb2:	edc0 6a00 	vstr	s13, [r0]
 800efb6:	ed82 1a00 	vstr	s2, [r2]
 800efba:	ed80 5a01 	vstr	s10, [r0, #4]
 800efbe:	4452      	add	r2, sl
 800efc0:	ed01 3a01 	vstr	s6, [r1, #-4]
 800efc4:	4450      	add	r0, sl
 800efc6:	edc7 2a00 	vstr	s5, [r7]
 800efca:	edc4 4a00 	vstr	s9, [r4]
 800efce:	ed83 7a00 	vstr	s14, [r3]
 800efd2:	edc1 5a00 	vstr	s11, [r1]
 800efd6:	edc7 3a01 	vstr	s7, [r7, #4]
 800efda:	4451      	add	r1, sl
 800efdc:	ed84 6a01 	vstr	s12, [r4, #4]
 800efe0:	4457      	add	r7, sl
 800efe2:	edc3 7a01 	vstr	s15, [r3, #4]
 800efe6:	4454      	add	r4, sl
 800efe8:	4453      	add	r3, sl
 800efea:	f63f af44 	bhi.w	800ee76 <arm_radix8_butterfly_f32+0x86>
 800efee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eff0:	2b07      	cmp	r3, #7
 800eff2:	f240 81b7 	bls.w	800f364 <arm_radix8_butterfly_f32+0x574>
 800eff6:	9b06      	ldr	r3, [sp, #24]
 800eff8:	9903      	ldr	r1, [sp, #12]
 800effa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800effc:	9e05      	ldr	r6, [sp, #20]
 800effe:	9a04      	ldr	r2, [sp, #16]
 800f000:	f103 0c08 	add.w	ip, r3, #8
 800f004:	9b02      	ldr	r3, [sp, #8]
 800f006:	3108      	adds	r1, #8
 800f008:	f108 0808 	add.w	r8, r8, #8
 800f00c:	1841      	adds	r1, r0, r1
 800f00e:	3608      	adds	r6, #8
 800f010:	330c      	adds	r3, #12
 800f012:	4604      	mov	r4, r0
 800f014:	4444      	add	r4, r8
 800f016:	18c3      	adds	r3, r0, r3
 800f018:	9109      	str	r1, [sp, #36]	; 0x24
 800f01a:	1981      	adds	r1, r0, r6
 800f01c:	f10e 0e08 	add.w	lr, lr, #8
 800f020:	3208      	adds	r2, #8
 800f022:	940b      	str	r4, [sp, #44]	; 0x2c
 800f024:	9107      	str	r1, [sp, #28]
 800f026:	4604      	mov	r4, r0
 800f028:	4601      	mov	r1, r0
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	f100 030c 	add.w	r3, r0, #12
 800f030:	4474      	add	r4, lr
 800f032:	f04f 0801 	mov.w	r8, #1
 800f036:	1882      	adds	r2, r0, r2
 800f038:	4461      	add	r1, ip
 800f03a:	9305      	str	r3, [sp, #20]
 800f03c:	464b      	mov	r3, r9
 800f03e:	940a      	str	r4, [sp, #40]	; 0x28
 800f040:	46c1      	mov	r9, r8
 800f042:	9208      	str	r2, [sp, #32]
 800f044:	46d8      	mov	r8, fp
 800f046:	9106      	str	r1, [sp, #24]
 800f048:	f04f 0e00 	mov.w	lr, #0
 800f04c:	469b      	mov	fp, r3
 800f04e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f052:	449e      	add	lr, r3
 800f054:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800f058:	441a      	add	r2, r3
 800f05a:	920e      	str	r2, [sp, #56]	; 0x38
 800f05c:	441a      	add	r2, r3
 800f05e:	18d4      	adds	r4, r2, r3
 800f060:	18e5      	adds	r5, r4, r3
 800f062:	18ee      	adds	r6, r5, r3
 800f064:	18f7      	adds	r7, r6, r3
 800f066:	eb07 0c03 	add.w	ip, r7, r3
 800f06a:	920d      	str	r2, [sp, #52]	; 0x34
 800f06c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800f070:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800f074:	910c      	str	r1, [sp, #48]	; 0x30
 800f076:	4419      	add	r1, r3
 800f078:	9103      	str	r1, [sp, #12]
 800f07a:	4419      	add	r1, r3
 800f07c:	18ca      	adds	r2, r1, r3
 800f07e:	9202      	str	r2, [sp, #8]
 800f080:	441a      	add	r2, r3
 800f082:	18d0      	adds	r0, r2, r3
 800f084:	ed92 ea01 	vldr	s28, [r2, #4]
 800f088:	9a02      	ldr	r2, [sp, #8]
 800f08a:	edd4 7a00 	vldr	s15, [r4]
 800f08e:	edd2 da01 	vldr	s27, [r2, #4]
 800f092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f094:	ed91 da01 	vldr	s26, [r1, #4]
 800f098:	ed92 ca01 	vldr	s24, [r2, #4]
 800f09c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f09e:	9903      	ldr	r1, [sp, #12]
 800f0a0:	edcd 7a03 	vstr	s15, [sp, #12]
 800f0a4:	edd2 7a00 	vldr	s15, [r2]
 800f0a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0aa:	edcd 7a02 	vstr	s15, [sp, #8]
 800f0ae:	edd2 7a00 	vldr	s15, [r2]
 800f0b2:	edd0 ea01 	vldr	s29, [r0, #4]
 800f0b6:	edd1 ca01 	vldr	s25, [r1, #4]
 800f0ba:	eddc ba00 	vldr	s23, [ip]
 800f0be:	edd7 aa00 	vldr	s21, [r7]
 800f0c2:	ed96 aa00 	vldr	s20, [r6]
 800f0c6:	edd5 9a00 	vldr	s19, [r5]
 800f0ca:	edcd 7a01 	vstr	s15, [sp, #4]
 800f0ce:	4403      	add	r3, r0
 800f0d0:	ed93 fa01 	vldr	s30, [r3, #4]
 800f0d4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800f0d8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800f0dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f0e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f0e4:	46cc      	mov	ip, r9
 800f0e6:	e001      	b.n	800f0ec <arm_radix8_butterfly_f32+0x2fc>
 800f0e8:	3f3504f3 	.word	0x3f3504f3
 800f0ec:	ed91 6a00 	vldr	s12, [r1]
 800f0f0:	ed93 5a00 	vldr	s10, [r3]
 800f0f4:	edd0 fa00 	vldr	s31, [r0]
 800f0f8:	edd4 7a00 	vldr	s15, [r4]
 800f0fc:	ed95 7a00 	vldr	s14, [r5]
 800f100:	ed56 3a01 	vldr	s7, [r6, #-4]
 800f104:	ed17 3a01 	vldr	s6, [r7, #-4]
 800f108:	ed92 2a00 	vldr	s4, [r2]
 800f10c:	ed96 0a00 	vldr	s0, [r6]
 800f110:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f114:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f118:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800f11c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f120:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f124:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f128:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f12c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f134:	ed06 6a01 	vstr	s12, [r6, #-4]
 800f138:	edd4 8a01 	vldr	s17, [r4, #4]
 800f13c:	ed92 9a01 	vldr	s18, [r2, #4]
 800f140:	edd7 0a00 	vldr	s1, [r7]
 800f144:	edd1 2a01 	vldr	s5, [r1, #4]
 800f148:	ed95 7a01 	vldr	s14, [r5, #4]
 800f14c:	ed93 6a01 	vldr	s12, [r3, #4]
 800f150:	edd0 5a01 	vldr	s11, [r0, #4]
 800f154:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f158:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800f15c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f160:	ee78 fac7 	vsub.f32	s31, s17, s14
 800f164:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f168:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f16c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f170:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f174:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f178:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f17c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f180:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800f184:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f188:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800f18c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800f190:	ee72 fa87 	vadd.f32	s31, s5, s14
 800f194:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f198:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f19c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f1a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f1a4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f1a8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f1ac:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800f1b0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800f1b4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f1b8:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f1bc:	ee74 0a22 	vadd.f32	s1, s8, s5
 800f1c0:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f1c4:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f1c8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f1cc:	ee32 4a64 	vsub.f32	s8, s4, s9
 800f1d0:	ee73 8a09 	vadd.f32	s17, s6, s18
 800f1d4:	ee74 4a82 	vadd.f32	s9, s9, s4
 800f1d8:	ee33 9a49 	vsub.f32	s18, s6, s18
 800f1dc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800f1e0:	ee35 3a85 	vadd.f32	s6, s11, s10
 800f1e4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f1e8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800f1ec:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f1f0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800f1f4:	ee30 7a68 	vsub.f32	s14, s0, s17
 800f1f8:	ee35 8a03 	vadd.f32	s16, s10, s6
 800f1fc:	ee38 0a80 	vadd.f32	s0, s17, s0
 800f200:	ee73 3a82 	vadd.f32	s7, s7, s4
 800f204:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800f208:	ed9d 2a01 	vldr	s4, [sp, #4]
 800f20c:	eddd 1a02 	vldr	s3, [sp, #8]
 800f210:	ee35 5a43 	vsub.f32	s10, s10, s6
 800f214:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800f218:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800f21c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800f220:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f224:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800f228:	ee76 5a49 	vsub.f32	s11, s12, s18
 800f22c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800f230:	ee39 6a06 	vadd.f32	s12, s18, s12
 800f234:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800f238:	ee21 4a84 	vmul.f32	s8, s3, s8
 800f23c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800f240:	ee22 7a07 	vmul.f32	s14, s4, s14
 800f244:	ee22 2a08 	vmul.f32	s4, s4, s16
 800f248:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f24c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800f250:	ee31 1a09 	vadd.f32	s2, s2, s18
 800f254:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800f258:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800f25c:	ee74 0a60 	vsub.f32	s1, s8, s1
 800f260:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f264:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800f268:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800f26c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800f270:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800f274:	ee38 2a89 	vadd.f32	s4, s17, s18
 800f278:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800f27c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800f280:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800f284:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800f288:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800f28c:	eddd 5a03 	vldr	s11, [sp, #12]
 800f290:	edc6 fa00 	vstr	s31, [r6]
 800f294:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800f298:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f29c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800f2a0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800f2a4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800f2a8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800f2ac:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800f2b0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800f2b4:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f2b8:	ee74 4a89 	vadd.f32	s9, s9, s18
 800f2bc:	ee34 3a43 	vsub.f32	s6, s8, s6
 800f2c0:	ee78 8a85 	vadd.f32	s17, s17, s10
 800f2c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f2c8:	44c4      	add	ip, r8
 800f2ca:	45e3      	cmp	fp, ip
 800f2cc:	edc3 3a00 	vstr	s7, [r3]
 800f2d0:	edc3 6a01 	vstr	s13, [r3, #4]
 800f2d4:	4456      	add	r6, sl
 800f2d6:	ed07 1a01 	vstr	s2, [r7, #-4]
 800f2da:	edc7 0a00 	vstr	s1, [r7]
 800f2de:	4453      	add	r3, sl
 800f2e0:	ed80 2a00 	vstr	s4, [r0]
 800f2e4:	edc0 2a01 	vstr	s5, [r0, #4]
 800f2e8:	4457      	add	r7, sl
 800f2ea:	edc2 1a00 	vstr	s3, [r2]
 800f2ee:	ed82 7a01 	vstr	s14, [r2, #4]
 800f2f2:	4450      	add	r0, sl
 800f2f4:	ed85 8a00 	vstr	s16, [r5]
 800f2f8:	ed85 0a01 	vstr	s0, [r5, #4]
 800f2fc:	4452      	add	r2, sl
 800f2fe:	edc1 4a00 	vstr	s9, [r1]
 800f302:	4455      	add	r5, sl
 800f304:	ed81 3a01 	vstr	s6, [r1, #4]
 800f308:	edc4 8a00 	vstr	s17, [r4]
 800f30c:	ed84 6a01 	vstr	s12, [r4, #4]
 800f310:	4451      	add	r1, sl
 800f312:	4454      	add	r4, sl
 800f314:	f63f aeea 	bhi.w	800f0ec <arm_radix8_butterfly_f32+0x2fc>
 800f318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f31a:	3308      	adds	r3, #8
 800f31c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f320:	3308      	adds	r3, #8
 800f322:	930a      	str	r3, [sp, #40]	; 0x28
 800f324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f326:	3308      	adds	r3, #8
 800f328:	9309      	str	r3, [sp, #36]	; 0x24
 800f32a:	9b08      	ldr	r3, [sp, #32]
 800f32c:	3308      	adds	r3, #8
 800f32e:	9308      	str	r3, [sp, #32]
 800f330:	9b07      	ldr	r3, [sp, #28]
 800f332:	3308      	adds	r3, #8
 800f334:	9307      	str	r3, [sp, #28]
 800f336:	9b06      	ldr	r3, [sp, #24]
 800f338:	3308      	adds	r3, #8
 800f33a:	9306      	str	r3, [sp, #24]
 800f33c:	9b05      	ldr	r3, [sp, #20]
 800f33e:	3308      	adds	r3, #8
 800f340:	9305      	str	r3, [sp, #20]
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	3308      	adds	r3, #8
 800f346:	9304      	str	r3, [sp, #16]
 800f348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f34a:	f109 0901 	add.w	r9, r9, #1
 800f34e:	454b      	cmp	r3, r9
 800f350:	f47f ae7d 	bne.w	800f04e <arm_radix8_butterfly_f32+0x25e>
 800f354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	b29b      	uxth	r3, r3
 800f35a:	46d9      	mov	r9, fp
 800f35c:	9310      	str	r3, [sp, #64]	; 0x40
 800f35e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800f362:	e554      	b.n	800ee0e <arm_radix8_butterfly_f32+0x1e>
 800f364:	b015      	add	sp, #84	; 0x54
 800f366:	ecbd 8b10 	vpop	{d8-d15}
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	bf00      	nop

0800f370 <__assert_func>:
 800f370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f372:	4614      	mov	r4, r2
 800f374:	461a      	mov	r2, r3
 800f376:	4b09      	ldr	r3, [pc, #36]	; (800f39c <__assert_func+0x2c>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4605      	mov	r5, r0
 800f37c:	68d8      	ldr	r0, [r3, #12]
 800f37e:	b14c      	cbz	r4, 800f394 <__assert_func+0x24>
 800f380:	4b07      	ldr	r3, [pc, #28]	; (800f3a0 <__assert_func+0x30>)
 800f382:	9100      	str	r1, [sp, #0]
 800f384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f388:	4906      	ldr	r1, [pc, #24]	; (800f3a4 <__assert_func+0x34>)
 800f38a:	462b      	mov	r3, r5
 800f38c:	f000 f814 	bl	800f3b8 <fiprintf>
 800f390:	f002 f83a 	bl	8011408 <abort>
 800f394:	4b04      	ldr	r3, [pc, #16]	; (800f3a8 <__assert_func+0x38>)
 800f396:	461c      	mov	r4, r3
 800f398:	e7f3      	b.n	800f382 <__assert_func+0x12>
 800f39a:	bf00      	nop
 800f39c:	200000dc 	.word	0x200000dc
 800f3a0:	0802a8e4 	.word	0x0802a8e4
 800f3a4:	0802a8f1 	.word	0x0802a8f1
 800f3a8:	0802a91f 	.word	0x0802a91f

0800f3ac <__errno>:
 800f3ac:	4b01      	ldr	r3, [pc, #4]	; (800f3b4 <__errno+0x8>)
 800f3ae:	6818      	ldr	r0, [r3, #0]
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	200000dc 	.word	0x200000dc

0800f3b8 <fiprintf>:
 800f3b8:	b40e      	push	{r1, r2, r3}
 800f3ba:	b503      	push	{r0, r1, lr}
 800f3bc:	4601      	mov	r1, r0
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	4805      	ldr	r0, [pc, #20]	; (800f3d8 <fiprintf+0x20>)
 800f3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c6:	6800      	ldr	r0, [r0, #0]
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	f000 f86b 	bl	800f4a4 <_vfiprintf_r>
 800f3ce:	b002      	add	sp, #8
 800f3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d4:	b003      	add	sp, #12
 800f3d6:	4770      	bx	lr
 800f3d8:	200000dc 	.word	0x200000dc

0800f3dc <__libc_init_array>:
 800f3dc:	b570      	push	{r4, r5, r6, lr}
 800f3de:	4d0d      	ldr	r5, [pc, #52]	; (800f414 <__libc_init_array+0x38>)
 800f3e0:	4c0d      	ldr	r4, [pc, #52]	; (800f418 <__libc_init_array+0x3c>)
 800f3e2:	1b64      	subs	r4, r4, r5
 800f3e4:	10a4      	asrs	r4, r4, #2
 800f3e6:	2600      	movs	r6, #0
 800f3e8:	42a6      	cmp	r6, r4
 800f3ea:	d109      	bne.n	800f400 <__libc_init_array+0x24>
 800f3ec:	4d0b      	ldr	r5, [pc, #44]	; (800f41c <__libc_init_array+0x40>)
 800f3ee:	4c0c      	ldr	r4, [pc, #48]	; (800f420 <__libc_init_array+0x44>)
 800f3f0:	f005 ff1e 	bl	8015230 <_init>
 800f3f4:	1b64      	subs	r4, r4, r5
 800f3f6:	10a4      	asrs	r4, r4, #2
 800f3f8:	2600      	movs	r6, #0
 800f3fa:	42a6      	cmp	r6, r4
 800f3fc:	d105      	bne.n	800f40a <__libc_init_array+0x2e>
 800f3fe:	bd70      	pop	{r4, r5, r6, pc}
 800f400:	f855 3b04 	ldr.w	r3, [r5], #4
 800f404:	4798      	blx	r3
 800f406:	3601      	adds	r6, #1
 800f408:	e7ee      	b.n	800f3e8 <__libc_init_array+0xc>
 800f40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f40e:	4798      	blx	r3
 800f410:	3601      	adds	r6, #1
 800f412:	e7f2      	b.n	800f3fa <__libc_init_array+0x1e>
 800f414:	0802b200 	.word	0x0802b200
 800f418:	0802b200 	.word	0x0802b200
 800f41c:	0802b200 	.word	0x0802b200
 800f420:	0802b204 	.word	0x0802b204

0800f424 <memcpy>:
 800f424:	440a      	add	r2, r1
 800f426:	4291      	cmp	r1, r2
 800f428:	f100 33ff 	add.w	r3, r0, #4294967295
 800f42c:	d100      	bne.n	800f430 <memcpy+0xc>
 800f42e:	4770      	bx	lr
 800f430:	b510      	push	{r4, lr}
 800f432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f43a:	4291      	cmp	r1, r2
 800f43c:	d1f9      	bne.n	800f432 <memcpy+0xe>
 800f43e:	bd10      	pop	{r4, pc}

0800f440 <memset>:
 800f440:	4402      	add	r2, r0
 800f442:	4603      	mov	r3, r0
 800f444:	4293      	cmp	r3, r2
 800f446:	d100      	bne.n	800f44a <memset+0xa>
 800f448:	4770      	bx	lr
 800f44a:	f803 1b01 	strb.w	r1, [r3], #1
 800f44e:	e7f9      	b.n	800f444 <memset+0x4>

0800f450 <__sfputc_r>:
 800f450:	6893      	ldr	r3, [r2, #8]
 800f452:	3b01      	subs	r3, #1
 800f454:	2b00      	cmp	r3, #0
 800f456:	b410      	push	{r4}
 800f458:	6093      	str	r3, [r2, #8]
 800f45a:	da08      	bge.n	800f46e <__sfputc_r+0x1e>
 800f45c:	6994      	ldr	r4, [r2, #24]
 800f45e:	42a3      	cmp	r3, r4
 800f460:	db01      	blt.n	800f466 <__sfputc_r+0x16>
 800f462:	290a      	cmp	r1, #10
 800f464:	d103      	bne.n	800f46e <__sfputc_r+0x1e>
 800f466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f46a:	f001 bf0d 	b.w	8011288 <__swbuf_r>
 800f46e:	6813      	ldr	r3, [r2, #0]
 800f470:	1c58      	adds	r0, r3, #1
 800f472:	6010      	str	r0, [r2, #0]
 800f474:	7019      	strb	r1, [r3, #0]
 800f476:	4608      	mov	r0, r1
 800f478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f47c:	4770      	bx	lr

0800f47e <__sfputs_r>:
 800f47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f480:	4606      	mov	r6, r0
 800f482:	460f      	mov	r7, r1
 800f484:	4614      	mov	r4, r2
 800f486:	18d5      	adds	r5, r2, r3
 800f488:	42ac      	cmp	r4, r5
 800f48a:	d101      	bne.n	800f490 <__sfputs_r+0x12>
 800f48c:	2000      	movs	r0, #0
 800f48e:	e007      	b.n	800f4a0 <__sfputs_r+0x22>
 800f490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f494:	463a      	mov	r2, r7
 800f496:	4630      	mov	r0, r6
 800f498:	f7ff ffda 	bl	800f450 <__sfputc_r>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d1f3      	bne.n	800f488 <__sfputs_r+0xa>
 800f4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4a4 <_vfiprintf_r>:
 800f4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a8:	460d      	mov	r5, r1
 800f4aa:	b09d      	sub	sp, #116	; 0x74
 800f4ac:	4614      	mov	r4, r2
 800f4ae:	4698      	mov	r8, r3
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	b118      	cbz	r0, 800f4bc <_vfiprintf_r+0x18>
 800f4b4:	6983      	ldr	r3, [r0, #24]
 800f4b6:	b90b      	cbnz	r3, 800f4bc <_vfiprintf_r+0x18>
 800f4b8:	f002 ff42 	bl	8012340 <__sinit>
 800f4bc:	4b89      	ldr	r3, [pc, #548]	; (800f6e4 <_vfiprintf_r+0x240>)
 800f4be:	429d      	cmp	r5, r3
 800f4c0:	d11b      	bne.n	800f4fa <_vfiprintf_r+0x56>
 800f4c2:	6875      	ldr	r5, [r6, #4]
 800f4c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4c6:	07d9      	lsls	r1, r3, #31
 800f4c8:	d405      	bmi.n	800f4d6 <_vfiprintf_r+0x32>
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	059a      	lsls	r2, r3, #22
 800f4ce:	d402      	bmi.n	800f4d6 <_vfiprintf_r+0x32>
 800f4d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4d2:	f003 fb46 	bl	8012b62 <__retarget_lock_acquire_recursive>
 800f4d6:	89ab      	ldrh	r3, [r5, #12]
 800f4d8:	071b      	lsls	r3, r3, #28
 800f4da:	d501      	bpl.n	800f4e0 <_vfiprintf_r+0x3c>
 800f4dc:	692b      	ldr	r3, [r5, #16]
 800f4de:	b9eb      	cbnz	r3, 800f51c <_vfiprintf_r+0x78>
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f001 ff22 	bl	801132c <__swsetup_r>
 800f4e8:	b1c0      	cbz	r0, 800f51c <_vfiprintf_r+0x78>
 800f4ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4ec:	07dc      	lsls	r4, r3, #31
 800f4ee:	d50e      	bpl.n	800f50e <_vfiprintf_r+0x6a>
 800f4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f4:	b01d      	add	sp, #116	; 0x74
 800f4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fa:	4b7b      	ldr	r3, [pc, #492]	; (800f6e8 <_vfiprintf_r+0x244>)
 800f4fc:	429d      	cmp	r5, r3
 800f4fe:	d101      	bne.n	800f504 <_vfiprintf_r+0x60>
 800f500:	68b5      	ldr	r5, [r6, #8]
 800f502:	e7df      	b.n	800f4c4 <_vfiprintf_r+0x20>
 800f504:	4b79      	ldr	r3, [pc, #484]	; (800f6ec <_vfiprintf_r+0x248>)
 800f506:	429d      	cmp	r5, r3
 800f508:	bf08      	it	eq
 800f50a:	68f5      	ldreq	r5, [r6, #12]
 800f50c:	e7da      	b.n	800f4c4 <_vfiprintf_r+0x20>
 800f50e:	89ab      	ldrh	r3, [r5, #12]
 800f510:	0598      	lsls	r0, r3, #22
 800f512:	d4ed      	bmi.n	800f4f0 <_vfiprintf_r+0x4c>
 800f514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f516:	f003 fb25 	bl	8012b64 <__retarget_lock_release_recursive>
 800f51a:	e7e9      	b.n	800f4f0 <_vfiprintf_r+0x4c>
 800f51c:	2300      	movs	r3, #0
 800f51e:	9309      	str	r3, [sp, #36]	; 0x24
 800f520:	2320      	movs	r3, #32
 800f522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f526:	f8cd 800c 	str.w	r8, [sp, #12]
 800f52a:	2330      	movs	r3, #48	; 0x30
 800f52c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6f0 <_vfiprintf_r+0x24c>
 800f530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f534:	f04f 0901 	mov.w	r9, #1
 800f538:	4623      	mov	r3, r4
 800f53a:	469a      	mov	sl, r3
 800f53c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f540:	b10a      	cbz	r2, 800f546 <_vfiprintf_r+0xa2>
 800f542:	2a25      	cmp	r2, #37	; 0x25
 800f544:	d1f9      	bne.n	800f53a <_vfiprintf_r+0x96>
 800f546:	ebba 0b04 	subs.w	fp, sl, r4
 800f54a:	d00b      	beq.n	800f564 <_vfiprintf_r+0xc0>
 800f54c:	465b      	mov	r3, fp
 800f54e:	4622      	mov	r2, r4
 800f550:	4629      	mov	r1, r5
 800f552:	4630      	mov	r0, r6
 800f554:	f7ff ff93 	bl	800f47e <__sfputs_r>
 800f558:	3001      	adds	r0, #1
 800f55a:	f000 80aa 	beq.w	800f6b2 <_vfiprintf_r+0x20e>
 800f55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f560:	445a      	add	r2, fp
 800f562:	9209      	str	r2, [sp, #36]	; 0x24
 800f564:	f89a 3000 	ldrb.w	r3, [sl]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f000 80a2 	beq.w	800f6b2 <_vfiprintf_r+0x20e>
 800f56e:	2300      	movs	r3, #0
 800f570:	f04f 32ff 	mov.w	r2, #4294967295
 800f574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f578:	f10a 0a01 	add.w	sl, sl, #1
 800f57c:	9304      	str	r3, [sp, #16]
 800f57e:	9307      	str	r3, [sp, #28]
 800f580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f584:	931a      	str	r3, [sp, #104]	; 0x68
 800f586:	4654      	mov	r4, sl
 800f588:	2205      	movs	r2, #5
 800f58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f58e:	4858      	ldr	r0, [pc, #352]	; (800f6f0 <_vfiprintf_r+0x24c>)
 800f590:	f7f0 fe4e 	bl	8000230 <memchr>
 800f594:	9a04      	ldr	r2, [sp, #16]
 800f596:	b9d8      	cbnz	r0, 800f5d0 <_vfiprintf_r+0x12c>
 800f598:	06d1      	lsls	r1, r2, #27
 800f59a:	bf44      	itt	mi
 800f59c:	2320      	movmi	r3, #32
 800f59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5a2:	0713      	lsls	r3, r2, #28
 800f5a4:	bf44      	itt	mi
 800f5a6:	232b      	movmi	r3, #43	; 0x2b
 800f5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f5b2:	d015      	beq.n	800f5e0 <_vfiprintf_r+0x13c>
 800f5b4:	9a07      	ldr	r2, [sp, #28]
 800f5b6:	4654      	mov	r4, sl
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	f04f 0c0a 	mov.w	ip, #10
 800f5be:	4621      	mov	r1, r4
 800f5c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5c4:	3b30      	subs	r3, #48	; 0x30
 800f5c6:	2b09      	cmp	r3, #9
 800f5c8:	d94e      	bls.n	800f668 <_vfiprintf_r+0x1c4>
 800f5ca:	b1b0      	cbz	r0, 800f5fa <_vfiprintf_r+0x156>
 800f5cc:	9207      	str	r2, [sp, #28]
 800f5ce:	e014      	b.n	800f5fa <_vfiprintf_r+0x156>
 800f5d0:	eba0 0308 	sub.w	r3, r0, r8
 800f5d4:	fa09 f303 	lsl.w	r3, r9, r3
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	9304      	str	r3, [sp, #16]
 800f5dc:	46a2      	mov	sl, r4
 800f5de:	e7d2      	b.n	800f586 <_vfiprintf_r+0xe2>
 800f5e0:	9b03      	ldr	r3, [sp, #12]
 800f5e2:	1d19      	adds	r1, r3, #4
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	9103      	str	r1, [sp, #12]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	bfbb      	ittet	lt
 800f5ec:	425b      	neglt	r3, r3
 800f5ee:	f042 0202 	orrlt.w	r2, r2, #2
 800f5f2:	9307      	strge	r3, [sp, #28]
 800f5f4:	9307      	strlt	r3, [sp, #28]
 800f5f6:	bfb8      	it	lt
 800f5f8:	9204      	strlt	r2, [sp, #16]
 800f5fa:	7823      	ldrb	r3, [r4, #0]
 800f5fc:	2b2e      	cmp	r3, #46	; 0x2e
 800f5fe:	d10c      	bne.n	800f61a <_vfiprintf_r+0x176>
 800f600:	7863      	ldrb	r3, [r4, #1]
 800f602:	2b2a      	cmp	r3, #42	; 0x2a
 800f604:	d135      	bne.n	800f672 <_vfiprintf_r+0x1ce>
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	1d1a      	adds	r2, r3, #4
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	9203      	str	r2, [sp, #12]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bfb8      	it	lt
 800f612:	f04f 33ff 	movlt.w	r3, #4294967295
 800f616:	3402      	adds	r4, #2
 800f618:	9305      	str	r3, [sp, #20]
 800f61a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f700 <_vfiprintf_r+0x25c>
 800f61e:	7821      	ldrb	r1, [r4, #0]
 800f620:	2203      	movs	r2, #3
 800f622:	4650      	mov	r0, sl
 800f624:	f7f0 fe04 	bl	8000230 <memchr>
 800f628:	b140      	cbz	r0, 800f63c <_vfiprintf_r+0x198>
 800f62a:	2340      	movs	r3, #64	; 0x40
 800f62c:	eba0 000a 	sub.w	r0, r0, sl
 800f630:	fa03 f000 	lsl.w	r0, r3, r0
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	4303      	orrs	r3, r0
 800f638:	3401      	adds	r4, #1
 800f63a:	9304      	str	r3, [sp, #16]
 800f63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f640:	482c      	ldr	r0, [pc, #176]	; (800f6f4 <_vfiprintf_r+0x250>)
 800f642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f646:	2206      	movs	r2, #6
 800f648:	f7f0 fdf2 	bl	8000230 <memchr>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d03f      	beq.n	800f6d0 <_vfiprintf_r+0x22c>
 800f650:	4b29      	ldr	r3, [pc, #164]	; (800f6f8 <_vfiprintf_r+0x254>)
 800f652:	bb1b      	cbnz	r3, 800f69c <_vfiprintf_r+0x1f8>
 800f654:	9b03      	ldr	r3, [sp, #12]
 800f656:	3307      	adds	r3, #7
 800f658:	f023 0307 	bic.w	r3, r3, #7
 800f65c:	3308      	adds	r3, #8
 800f65e:	9303      	str	r3, [sp, #12]
 800f660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f662:	443b      	add	r3, r7
 800f664:	9309      	str	r3, [sp, #36]	; 0x24
 800f666:	e767      	b.n	800f538 <_vfiprintf_r+0x94>
 800f668:	fb0c 3202 	mla	r2, ip, r2, r3
 800f66c:	460c      	mov	r4, r1
 800f66e:	2001      	movs	r0, #1
 800f670:	e7a5      	b.n	800f5be <_vfiprintf_r+0x11a>
 800f672:	2300      	movs	r3, #0
 800f674:	3401      	adds	r4, #1
 800f676:	9305      	str	r3, [sp, #20]
 800f678:	4619      	mov	r1, r3
 800f67a:	f04f 0c0a 	mov.w	ip, #10
 800f67e:	4620      	mov	r0, r4
 800f680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f684:	3a30      	subs	r2, #48	; 0x30
 800f686:	2a09      	cmp	r2, #9
 800f688:	d903      	bls.n	800f692 <_vfiprintf_r+0x1ee>
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d0c5      	beq.n	800f61a <_vfiprintf_r+0x176>
 800f68e:	9105      	str	r1, [sp, #20]
 800f690:	e7c3      	b.n	800f61a <_vfiprintf_r+0x176>
 800f692:	fb0c 2101 	mla	r1, ip, r1, r2
 800f696:	4604      	mov	r4, r0
 800f698:	2301      	movs	r3, #1
 800f69a:	e7f0      	b.n	800f67e <_vfiprintf_r+0x1da>
 800f69c:	ab03      	add	r3, sp, #12
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	462a      	mov	r2, r5
 800f6a2:	4b16      	ldr	r3, [pc, #88]	; (800f6fc <_vfiprintf_r+0x258>)
 800f6a4:	a904      	add	r1, sp, #16
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f000 f8cc 	bl	800f844 <_printf_float>
 800f6ac:	4607      	mov	r7, r0
 800f6ae:	1c78      	adds	r0, r7, #1
 800f6b0:	d1d6      	bne.n	800f660 <_vfiprintf_r+0x1bc>
 800f6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6b4:	07d9      	lsls	r1, r3, #31
 800f6b6:	d405      	bmi.n	800f6c4 <_vfiprintf_r+0x220>
 800f6b8:	89ab      	ldrh	r3, [r5, #12]
 800f6ba:	059a      	lsls	r2, r3, #22
 800f6bc:	d402      	bmi.n	800f6c4 <_vfiprintf_r+0x220>
 800f6be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6c0:	f003 fa50 	bl	8012b64 <__retarget_lock_release_recursive>
 800f6c4:	89ab      	ldrh	r3, [r5, #12]
 800f6c6:	065b      	lsls	r3, r3, #25
 800f6c8:	f53f af12 	bmi.w	800f4f0 <_vfiprintf_r+0x4c>
 800f6cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6ce:	e711      	b.n	800f4f4 <_vfiprintf_r+0x50>
 800f6d0:	ab03      	add	r3, sp, #12
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	462a      	mov	r2, r5
 800f6d6:	4b09      	ldr	r3, [pc, #36]	; (800f6fc <_vfiprintf_r+0x258>)
 800f6d8:	a904      	add	r1, sp, #16
 800f6da:	4630      	mov	r0, r6
 800f6dc:	f000 fb56 	bl	800fd8c <_printf_i>
 800f6e0:	e7e4      	b.n	800f6ac <_vfiprintf_r+0x208>
 800f6e2:	bf00      	nop
 800f6e4:	0802ab94 	.word	0x0802ab94
 800f6e8:	0802abb4 	.word	0x0802abb4
 800f6ec:	0802ab74 	.word	0x0802ab74
 800f6f0:	0802a924 	.word	0x0802a924
 800f6f4:	0802a92e 	.word	0x0802a92e
 800f6f8:	0800f845 	.word	0x0800f845
 800f6fc:	0800f47f 	.word	0x0800f47f
 800f700:	0802a92a 	.word	0x0802a92a

0800f704 <__cvt>:
 800f704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f708:	ec55 4b10 	vmov	r4, r5, d0
 800f70c:	2d00      	cmp	r5, #0
 800f70e:	460e      	mov	r6, r1
 800f710:	4619      	mov	r1, r3
 800f712:	462b      	mov	r3, r5
 800f714:	bfbb      	ittet	lt
 800f716:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f71a:	461d      	movlt	r5, r3
 800f71c:	2300      	movge	r3, #0
 800f71e:	232d      	movlt	r3, #45	; 0x2d
 800f720:	700b      	strb	r3, [r1, #0]
 800f722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f724:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f728:	4691      	mov	r9, r2
 800f72a:	f023 0820 	bic.w	r8, r3, #32
 800f72e:	bfbc      	itt	lt
 800f730:	4622      	movlt	r2, r4
 800f732:	4614      	movlt	r4, r2
 800f734:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f738:	d005      	beq.n	800f746 <__cvt+0x42>
 800f73a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f73e:	d100      	bne.n	800f742 <__cvt+0x3e>
 800f740:	3601      	adds	r6, #1
 800f742:	2102      	movs	r1, #2
 800f744:	e000      	b.n	800f748 <__cvt+0x44>
 800f746:	2103      	movs	r1, #3
 800f748:	ab03      	add	r3, sp, #12
 800f74a:	9301      	str	r3, [sp, #4]
 800f74c:	ab02      	add	r3, sp, #8
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	ec45 4b10 	vmov	d0, r4, r5
 800f754:	4653      	mov	r3, sl
 800f756:	4632      	mov	r2, r6
 800f758:	f001 feea 	bl	8011530 <_dtoa_r>
 800f75c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f760:	4607      	mov	r7, r0
 800f762:	d102      	bne.n	800f76a <__cvt+0x66>
 800f764:	f019 0f01 	tst.w	r9, #1
 800f768:	d022      	beq.n	800f7b0 <__cvt+0xac>
 800f76a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f76e:	eb07 0906 	add.w	r9, r7, r6
 800f772:	d110      	bne.n	800f796 <__cvt+0x92>
 800f774:	783b      	ldrb	r3, [r7, #0]
 800f776:	2b30      	cmp	r3, #48	; 0x30
 800f778:	d10a      	bne.n	800f790 <__cvt+0x8c>
 800f77a:	2200      	movs	r2, #0
 800f77c:	2300      	movs	r3, #0
 800f77e:	4620      	mov	r0, r4
 800f780:	4629      	mov	r1, r5
 800f782:	f7f1 f9c9 	bl	8000b18 <__aeabi_dcmpeq>
 800f786:	b918      	cbnz	r0, 800f790 <__cvt+0x8c>
 800f788:	f1c6 0601 	rsb	r6, r6, #1
 800f78c:	f8ca 6000 	str.w	r6, [sl]
 800f790:	f8da 3000 	ldr.w	r3, [sl]
 800f794:	4499      	add	r9, r3
 800f796:	2200      	movs	r2, #0
 800f798:	2300      	movs	r3, #0
 800f79a:	4620      	mov	r0, r4
 800f79c:	4629      	mov	r1, r5
 800f79e:	f7f1 f9bb 	bl	8000b18 <__aeabi_dcmpeq>
 800f7a2:	b108      	cbz	r0, 800f7a8 <__cvt+0xa4>
 800f7a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7a8:	2230      	movs	r2, #48	; 0x30
 800f7aa:	9b03      	ldr	r3, [sp, #12]
 800f7ac:	454b      	cmp	r3, r9
 800f7ae:	d307      	bcc.n	800f7c0 <__cvt+0xbc>
 800f7b0:	9b03      	ldr	r3, [sp, #12]
 800f7b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7b4:	1bdb      	subs	r3, r3, r7
 800f7b6:	4638      	mov	r0, r7
 800f7b8:	6013      	str	r3, [r2, #0]
 800f7ba:	b004      	add	sp, #16
 800f7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c0:	1c59      	adds	r1, r3, #1
 800f7c2:	9103      	str	r1, [sp, #12]
 800f7c4:	701a      	strb	r2, [r3, #0]
 800f7c6:	e7f0      	b.n	800f7aa <__cvt+0xa6>

0800f7c8 <__exponent>:
 800f7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2900      	cmp	r1, #0
 800f7ce:	bfb8      	it	lt
 800f7d0:	4249      	neglt	r1, r1
 800f7d2:	f803 2b02 	strb.w	r2, [r3], #2
 800f7d6:	bfb4      	ite	lt
 800f7d8:	222d      	movlt	r2, #45	; 0x2d
 800f7da:	222b      	movge	r2, #43	; 0x2b
 800f7dc:	2909      	cmp	r1, #9
 800f7de:	7042      	strb	r2, [r0, #1]
 800f7e0:	dd2a      	ble.n	800f838 <__exponent+0x70>
 800f7e2:	f10d 0407 	add.w	r4, sp, #7
 800f7e6:	46a4      	mov	ip, r4
 800f7e8:	270a      	movs	r7, #10
 800f7ea:	46a6      	mov	lr, r4
 800f7ec:	460a      	mov	r2, r1
 800f7ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800f7f2:	fb07 1516 	mls	r5, r7, r6, r1
 800f7f6:	3530      	adds	r5, #48	; 0x30
 800f7f8:	2a63      	cmp	r2, #99	; 0x63
 800f7fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800f7fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f802:	4631      	mov	r1, r6
 800f804:	dcf1      	bgt.n	800f7ea <__exponent+0x22>
 800f806:	3130      	adds	r1, #48	; 0x30
 800f808:	f1ae 0502 	sub.w	r5, lr, #2
 800f80c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f810:	1c44      	adds	r4, r0, #1
 800f812:	4629      	mov	r1, r5
 800f814:	4561      	cmp	r1, ip
 800f816:	d30a      	bcc.n	800f82e <__exponent+0x66>
 800f818:	f10d 0209 	add.w	r2, sp, #9
 800f81c:	eba2 020e 	sub.w	r2, r2, lr
 800f820:	4565      	cmp	r5, ip
 800f822:	bf88      	it	hi
 800f824:	2200      	movhi	r2, #0
 800f826:	4413      	add	r3, r2
 800f828:	1a18      	subs	r0, r3, r0
 800f82a:	b003      	add	sp, #12
 800f82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f832:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f836:	e7ed      	b.n	800f814 <__exponent+0x4c>
 800f838:	2330      	movs	r3, #48	; 0x30
 800f83a:	3130      	adds	r1, #48	; 0x30
 800f83c:	7083      	strb	r3, [r0, #2]
 800f83e:	70c1      	strb	r1, [r0, #3]
 800f840:	1d03      	adds	r3, r0, #4
 800f842:	e7f1      	b.n	800f828 <__exponent+0x60>

0800f844 <_printf_float>:
 800f844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f848:	ed2d 8b02 	vpush	{d8}
 800f84c:	b08d      	sub	sp, #52	; 0x34
 800f84e:	460c      	mov	r4, r1
 800f850:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f854:	4616      	mov	r6, r2
 800f856:	461f      	mov	r7, r3
 800f858:	4605      	mov	r5, r0
 800f85a:	f003 f97d 	bl	8012b58 <_localeconv_r>
 800f85e:	f8d0 a000 	ldr.w	sl, [r0]
 800f862:	4650      	mov	r0, sl
 800f864:	f7f0 fcdc 	bl	8000220 <strlen>
 800f868:	2300      	movs	r3, #0
 800f86a:	930a      	str	r3, [sp, #40]	; 0x28
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	9305      	str	r3, [sp, #20]
 800f870:	f8d8 3000 	ldr.w	r3, [r8]
 800f874:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f878:	3307      	adds	r3, #7
 800f87a:	f023 0307 	bic.w	r3, r3, #7
 800f87e:	f103 0208 	add.w	r2, r3, #8
 800f882:	f8c8 2000 	str.w	r2, [r8]
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f88e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f896:	9307      	str	r3, [sp, #28]
 800f898:	f8cd 8018 	str.w	r8, [sp, #24]
 800f89c:	ee08 0a10 	vmov	s16, r0
 800f8a0:	4b9f      	ldr	r3, [pc, #636]	; (800fb20 <_printf_float+0x2dc>)
 800f8a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8aa:	f7f1 f967 	bl	8000b7c <__aeabi_dcmpun>
 800f8ae:	bb88      	cbnz	r0, 800f914 <_printf_float+0xd0>
 800f8b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8b4:	4b9a      	ldr	r3, [pc, #616]	; (800fb20 <_printf_float+0x2dc>)
 800f8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ba:	f7f1 f941 	bl	8000b40 <__aeabi_dcmple>
 800f8be:	bb48      	cbnz	r0, 800f914 <_printf_float+0xd0>
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	4640      	mov	r0, r8
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	f7f1 f930 	bl	8000b2c <__aeabi_dcmplt>
 800f8cc:	b110      	cbz	r0, 800f8d4 <_printf_float+0x90>
 800f8ce:	232d      	movs	r3, #45	; 0x2d
 800f8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8d4:	4b93      	ldr	r3, [pc, #588]	; (800fb24 <_printf_float+0x2e0>)
 800f8d6:	4894      	ldr	r0, [pc, #592]	; (800fb28 <_printf_float+0x2e4>)
 800f8d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f8dc:	bf94      	ite	ls
 800f8de:	4698      	movls	r8, r3
 800f8e0:	4680      	movhi	r8, r0
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	6123      	str	r3, [r4, #16]
 800f8e6:	9b05      	ldr	r3, [sp, #20]
 800f8e8:	f023 0204 	bic.w	r2, r3, #4
 800f8ec:	6022      	str	r2, [r4, #0]
 800f8ee:	f04f 0900 	mov.w	r9, #0
 800f8f2:	9700      	str	r7, [sp, #0]
 800f8f4:	4633      	mov	r3, r6
 800f8f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f000 f9d8 	bl	800fcb0 <_printf_common>
 800f900:	3001      	adds	r0, #1
 800f902:	f040 8090 	bne.w	800fa26 <_printf_float+0x1e2>
 800f906:	f04f 30ff 	mov.w	r0, #4294967295
 800f90a:	b00d      	add	sp, #52	; 0x34
 800f90c:	ecbd 8b02 	vpop	{d8}
 800f910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f914:	4642      	mov	r2, r8
 800f916:	464b      	mov	r3, r9
 800f918:	4640      	mov	r0, r8
 800f91a:	4649      	mov	r1, r9
 800f91c:	f7f1 f92e 	bl	8000b7c <__aeabi_dcmpun>
 800f920:	b140      	cbz	r0, 800f934 <_printf_float+0xf0>
 800f922:	464b      	mov	r3, r9
 800f924:	2b00      	cmp	r3, #0
 800f926:	bfbc      	itt	lt
 800f928:	232d      	movlt	r3, #45	; 0x2d
 800f92a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f92e:	487f      	ldr	r0, [pc, #508]	; (800fb2c <_printf_float+0x2e8>)
 800f930:	4b7f      	ldr	r3, [pc, #508]	; (800fb30 <_printf_float+0x2ec>)
 800f932:	e7d1      	b.n	800f8d8 <_printf_float+0x94>
 800f934:	6863      	ldr	r3, [r4, #4]
 800f936:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f93a:	9206      	str	r2, [sp, #24]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	d13f      	bne.n	800f9c0 <_printf_float+0x17c>
 800f940:	2306      	movs	r3, #6
 800f942:	6063      	str	r3, [r4, #4]
 800f944:	9b05      	ldr	r3, [sp, #20]
 800f946:	6861      	ldr	r1, [r4, #4]
 800f948:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f94c:	2300      	movs	r3, #0
 800f94e:	9303      	str	r3, [sp, #12]
 800f950:	ab0a      	add	r3, sp, #40	; 0x28
 800f952:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f956:	ab09      	add	r3, sp, #36	; 0x24
 800f958:	ec49 8b10 	vmov	d0, r8, r9
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	6022      	str	r2, [r4, #0]
 800f960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f964:	4628      	mov	r0, r5
 800f966:	f7ff fecd 	bl	800f704 <__cvt>
 800f96a:	9b06      	ldr	r3, [sp, #24]
 800f96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f96e:	2b47      	cmp	r3, #71	; 0x47
 800f970:	4680      	mov	r8, r0
 800f972:	d108      	bne.n	800f986 <_printf_float+0x142>
 800f974:	1cc8      	adds	r0, r1, #3
 800f976:	db02      	blt.n	800f97e <_printf_float+0x13a>
 800f978:	6863      	ldr	r3, [r4, #4]
 800f97a:	4299      	cmp	r1, r3
 800f97c:	dd41      	ble.n	800fa02 <_printf_float+0x1be>
 800f97e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f982:	fa5f fb8b 	uxtb.w	fp, fp
 800f986:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f98a:	d820      	bhi.n	800f9ce <_printf_float+0x18a>
 800f98c:	3901      	subs	r1, #1
 800f98e:	465a      	mov	r2, fp
 800f990:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f994:	9109      	str	r1, [sp, #36]	; 0x24
 800f996:	f7ff ff17 	bl	800f7c8 <__exponent>
 800f99a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f99c:	1813      	adds	r3, r2, r0
 800f99e:	2a01      	cmp	r2, #1
 800f9a0:	4681      	mov	r9, r0
 800f9a2:	6123      	str	r3, [r4, #16]
 800f9a4:	dc02      	bgt.n	800f9ac <_printf_float+0x168>
 800f9a6:	6822      	ldr	r2, [r4, #0]
 800f9a8:	07d2      	lsls	r2, r2, #31
 800f9aa:	d501      	bpl.n	800f9b0 <_printf_float+0x16c>
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	6123      	str	r3, [r4, #16]
 800f9b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d09c      	beq.n	800f8f2 <_printf_float+0xae>
 800f9b8:	232d      	movs	r3, #45	; 0x2d
 800f9ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9be:	e798      	b.n	800f8f2 <_printf_float+0xae>
 800f9c0:	9a06      	ldr	r2, [sp, #24]
 800f9c2:	2a47      	cmp	r2, #71	; 0x47
 800f9c4:	d1be      	bne.n	800f944 <_printf_float+0x100>
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1bc      	bne.n	800f944 <_printf_float+0x100>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e7b9      	b.n	800f942 <_printf_float+0xfe>
 800f9ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f9d2:	d118      	bne.n	800fa06 <_printf_float+0x1c2>
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	6863      	ldr	r3, [r4, #4]
 800f9d8:	dd0b      	ble.n	800f9f2 <_printf_float+0x1ae>
 800f9da:	6121      	str	r1, [r4, #16]
 800f9dc:	b913      	cbnz	r3, 800f9e4 <_printf_float+0x1a0>
 800f9de:	6822      	ldr	r2, [r4, #0]
 800f9e0:	07d0      	lsls	r0, r2, #31
 800f9e2:	d502      	bpl.n	800f9ea <_printf_float+0x1a6>
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	440b      	add	r3, r1
 800f9e8:	6123      	str	r3, [r4, #16]
 800f9ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800f9ec:	f04f 0900 	mov.w	r9, #0
 800f9f0:	e7de      	b.n	800f9b0 <_printf_float+0x16c>
 800f9f2:	b913      	cbnz	r3, 800f9fa <_printf_float+0x1b6>
 800f9f4:	6822      	ldr	r2, [r4, #0]
 800f9f6:	07d2      	lsls	r2, r2, #31
 800f9f8:	d501      	bpl.n	800f9fe <_printf_float+0x1ba>
 800f9fa:	3302      	adds	r3, #2
 800f9fc:	e7f4      	b.n	800f9e8 <_printf_float+0x1a4>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e7f2      	b.n	800f9e8 <_printf_float+0x1a4>
 800fa02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa08:	4299      	cmp	r1, r3
 800fa0a:	db05      	blt.n	800fa18 <_printf_float+0x1d4>
 800fa0c:	6823      	ldr	r3, [r4, #0]
 800fa0e:	6121      	str	r1, [r4, #16]
 800fa10:	07d8      	lsls	r0, r3, #31
 800fa12:	d5ea      	bpl.n	800f9ea <_printf_float+0x1a6>
 800fa14:	1c4b      	adds	r3, r1, #1
 800fa16:	e7e7      	b.n	800f9e8 <_printf_float+0x1a4>
 800fa18:	2900      	cmp	r1, #0
 800fa1a:	bfd4      	ite	le
 800fa1c:	f1c1 0202 	rsble	r2, r1, #2
 800fa20:	2201      	movgt	r2, #1
 800fa22:	4413      	add	r3, r2
 800fa24:	e7e0      	b.n	800f9e8 <_printf_float+0x1a4>
 800fa26:	6823      	ldr	r3, [r4, #0]
 800fa28:	055a      	lsls	r2, r3, #21
 800fa2a:	d407      	bmi.n	800fa3c <_printf_float+0x1f8>
 800fa2c:	6923      	ldr	r3, [r4, #16]
 800fa2e:	4642      	mov	r2, r8
 800fa30:	4631      	mov	r1, r6
 800fa32:	4628      	mov	r0, r5
 800fa34:	47b8      	blx	r7
 800fa36:	3001      	adds	r0, #1
 800fa38:	d12c      	bne.n	800fa94 <_printf_float+0x250>
 800fa3a:	e764      	b.n	800f906 <_printf_float+0xc2>
 800fa3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fa40:	f240 80e0 	bls.w	800fc04 <_printf_float+0x3c0>
 800fa44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa48:	2200      	movs	r2, #0
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f7f1 f864 	bl	8000b18 <__aeabi_dcmpeq>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d034      	beq.n	800fabe <_printf_float+0x27a>
 800fa54:	4a37      	ldr	r2, [pc, #220]	; (800fb34 <_printf_float+0x2f0>)
 800fa56:	2301      	movs	r3, #1
 800fa58:	4631      	mov	r1, r6
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	47b8      	blx	r7
 800fa5e:	3001      	adds	r0, #1
 800fa60:	f43f af51 	beq.w	800f906 <_printf_float+0xc2>
 800fa64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	db02      	blt.n	800fa72 <_printf_float+0x22e>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	07d8      	lsls	r0, r3, #31
 800fa70:	d510      	bpl.n	800fa94 <_printf_float+0x250>
 800fa72:	ee18 3a10 	vmov	r3, s16
 800fa76:	4652      	mov	r2, sl
 800fa78:	4631      	mov	r1, r6
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	47b8      	blx	r7
 800fa7e:	3001      	adds	r0, #1
 800fa80:	f43f af41 	beq.w	800f906 <_printf_float+0xc2>
 800fa84:	f04f 0800 	mov.w	r8, #0
 800fa88:	f104 091a 	add.w	r9, r4, #26
 800fa8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	4543      	cmp	r3, r8
 800fa92:	dc09      	bgt.n	800faa8 <_printf_float+0x264>
 800fa94:	6823      	ldr	r3, [r4, #0]
 800fa96:	079b      	lsls	r3, r3, #30
 800fa98:	f100 8105 	bmi.w	800fca6 <_printf_float+0x462>
 800fa9c:	68e0      	ldr	r0, [r4, #12]
 800fa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faa0:	4298      	cmp	r0, r3
 800faa2:	bfb8      	it	lt
 800faa4:	4618      	movlt	r0, r3
 800faa6:	e730      	b.n	800f90a <_printf_float+0xc6>
 800faa8:	2301      	movs	r3, #1
 800faaa:	464a      	mov	r2, r9
 800faac:	4631      	mov	r1, r6
 800faae:	4628      	mov	r0, r5
 800fab0:	47b8      	blx	r7
 800fab2:	3001      	adds	r0, #1
 800fab4:	f43f af27 	beq.w	800f906 <_printf_float+0xc2>
 800fab8:	f108 0801 	add.w	r8, r8, #1
 800fabc:	e7e6      	b.n	800fa8c <_printf_float+0x248>
 800fabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	dc39      	bgt.n	800fb38 <_printf_float+0x2f4>
 800fac4:	4a1b      	ldr	r2, [pc, #108]	; (800fb34 <_printf_float+0x2f0>)
 800fac6:	2301      	movs	r3, #1
 800fac8:	4631      	mov	r1, r6
 800faca:	4628      	mov	r0, r5
 800facc:	47b8      	blx	r7
 800face:	3001      	adds	r0, #1
 800fad0:	f43f af19 	beq.w	800f906 <_printf_float+0xc2>
 800fad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fad8:	4313      	orrs	r3, r2
 800fada:	d102      	bne.n	800fae2 <_printf_float+0x29e>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	07d9      	lsls	r1, r3, #31
 800fae0:	d5d8      	bpl.n	800fa94 <_printf_float+0x250>
 800fae2:	ee18 3a10 	vmov	r3, s16
 800fae6:	4652      	mov	r2, sl
 800fae8:	4631      	mov	r1, r6
 800faea:	4628      	mov	r0, r5
 800faec:	47b8      	blx	r7
 800faee:	3001      	adds	r0, #1
 800faf0:	f43f af09 	beq.w	800f906 <_printf_float+0xc2>
 800faf4:	f04f 0900 	mov.w	r9, #0
 800faf8:	f104 0a1a 	add.w	sl, r4, #26
 800fafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fafe:	425b      	negs	r3, r3
 800fb00:	454b      	cmp	r3, r9
 800fb02:	dc01      	bgt.n	800fb08 <_printf_float+0x2c4>
 800fb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb06:	e792      	b.n	800fa2e <_printf_float+0x1ea>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	4652      	mov	r2, sl
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4628      	mov	r0, r5
 800fb10:	47b8      	blx	r7
 800fb12:	3001      	adds	r0, #1
 800fb14:	f43f aef7 	beq.w	800f906 <_printf_float+0xc2>
 800fb18:	f109 0901 	add.w	r9, r9, #1
 800fb1c:	e7ee      	b.n	800fafc <_printf_float+0x2b8>
 800fb1e:	bf00      	nop
 800fb20:	7fefffff 	.word	0x7fefffff
 800fb24:	0802a935 	.word	0x0802a935
 800fb28:	0802a939 	.word	0x0802a939
 800fb2c:	0802a941 	.word	0x0802a941
 800fb30:	0802a93d 	.word	0x0802a93d
 800fb34:	0802a945 	.word	0x0802a945
 800fb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	bfa8      	it	ge
 800fb40:	461a      	movge	r2, r3
 800fb42:	2a00      	cmp	r2, #0
 800fb44:	4691      	mov	r9, r2
 800fb46:	dc37      	bgt.n	800fbb8 <_printf_float+0x374>
 800fb48:	f04f 0b00 	mov.w	fp, #0
 800fb4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb50:	f104 021a 	add.w	r2, r4, #26
 800fb54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb56:	9305      	str	r3, [sp, #20]
 800fb58:	eba3 0309 	sub.w	r3, r3, r9
 800fb5c:	455b      	cmp	r3, fp
 800fb5e:	dc33      	bgt.n	800fbc8 <_printf_float+0x384>
 800fb60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb64:	429a      	cmp	r2, r3
 800fb66:	db3b      	blt.n	800fbe0 <_printf_float+0x39c>
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	07da      	lsls	r2, r3, #31
 800fb6c:	d438      	bmi.n	800fbe0 <_printf_float+0x39c>
 800fb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb70:	9a05      	ldr	r2, [sp, #20]
 800fb72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb74:	1a9a      	subs	r2, r3, r2
 800fb76:	eba3 0901 	sub.w	r9, r3, r1
 800fb7a:	4591      	cmp	r9, r2
 800fb7c:	bfa8      	it	ge
 800fb7e:	4691      	movge	r9, r2
 800fb80:	f1b9 0f00 	cmp.w	r9, #0
 800fb84:	dc35      	bgt.n	800fbf2 <_printf_float+0x3ae>
 800fb86:	f04f 0800 	mov.w	r8, #0
 800fb8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb8e:	f104 0a1a 	add.w	sl, r4, #26
 800fb92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb96:	1a9b      	subs	r3, r3, r2
 800fb98:	eba3 0309 	sub.w	r3, r3, r9
 800fb9c:	4543      	cmp	r3, r8
 800fb9e:	f77f af79 	ble.w	800fa94 <_printf_float+0x250>
 800fba2:	2301      	movs	r3, #1
 800fba4:	4652      	mov	r2, sl
 800fba6:	4631      	mov	r1, r6
 800fba8:	4628      	mov	r0, r5
 800fbaa:	47b8      	blx	r7
 800fbac:	3001      	adds	r0, #1
 800fbae:	f43f aeaa 	beq.w	800f906 <_printf_float+0xc2>
 800fbb2:	f108 0801 	add.w	r8, r8, #1
 800fbb6:	e7ec      	b.n	800fb92 <_printf_float+0x34e>
 800fbb8:	4613      	mov	r3, r2
 800fbba:	4631      	mov	r1, r6
 800fbbc:	4642      	mov	r2, r8
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	47b8      	blx	r7
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	d1c0      	bne.n	800fb48 <_printf_float+0x304>
 800fbc6:	e69e      	b.n	800f906 <_printf_float+0xc2>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	4631      	mov	r1, r6
 800fbcc:	4628      	mov	r0, r5
 800fbce:	9205      	str	r2, [sp, #20]
 800fbd0:	47b8      	blx	r7
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	f43f ae97 	beq.w	800f906 <_printf_float+0xc2>
 800fbd8:	9a05      	ldr	r2, [sp, #20]
 800fbda:	f10b 0b01 	add.w	fp, fp, #1
 800fbde:	e7b9      	b.n	800fb54 <_printf_float+0x310>
 800fbe0:	ee18 3a10 	vmov	r3, s16
 800fbe4:	4652      	mov	r2, sl
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	4628      	mov	r0, r5
 800fbea:	47b8      	blx	r7
 800fbec:	3001      	adds	r0, #1
 800fbee:	d1be      	bne.n	800fb6e <_printf_float+0x32a>
 800fbf0:	e689      	b.n	800f906 <_printf_float+0xc2>
 800fbf2:	9a05      	ldr	r2, [sp, #20]
 800fbf4:	464b      	mov	r3, r9
 800fbf6:	4442      	add	r2, r8
 800fbf8:	4631      	mov	r1, r6
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	47b8      	blx	r7
 800fbfe:	3001      	adds	r0, #1
 800fc00:	d1c1      	bne.n	800fb86 <_printf_float+0x342>
 800fc02:	e680      	b.n	800f906 <_printf_float+0xc2>
 800fc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc06:	2a01      	cmp	r2, #1
 800fc08:	dc01      	bgt.n	800fc0e <_printf_float+0x3ca>
 800fc0a:	07db      	lsls	r3, r3, #31
 800fc0c:	d538      	bpl.n	800fc80 <_printf_float+0x43c>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	4642      	mov	r2, r8
 800fc12:	4631      	mov	r1, r6
 800fc14:	4628      	mov	r0, r5
 800fc16:	47b8      	blx	r7
 800fc18:	3001      	adds	r0, #1
 800fc1a:	f43f ae74 	beq.w	800f906 <_printf_float+0xc2>
 800fc1e:	ee18 3a10 	vmov	r3, s16
 800fc22:	4652      	mov	r2, sl
 800fc24:	4631      	mov	r1, r6
 800fc26:	4628      	mov	r0, r5
 800fc28:	47b8      	blx	r7
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	f43f ae6b 	beq.w	800f906 <_printf_float+0xc2>
 800fc30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc34:	2200      	movs	r2, #0
 800fc36:	2300      	movs	r3, #0
 800fc38:	f7f0 ff6e 	bl	8000b18 <__aeabi_dcmpeq>
 800fc3c:	b9d8      	cbnz	r0, 800fc76 <_printf_float+0x432>
 800fc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc40:	f108 0201 	add.w	r2, r8, #1
 800fc44:	3b01      	subs	r3, #1
 800fc46:	4631      	mov	r1, r6
 800fc48:	4628      	mov	r0, r5
 800fc4a:	47b8      	blx	r7
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d10e      	bne.n	800fc6e <_printf_float+0x42a>
 800fc50:	e659      	b.n	800f906 <_printf_float+0xc2>
 800fc52:	2301      	movs	r3, #1
 800fc54:	4652      	mov	r2, sl
 800fc56:	4631      	mov	r1, r6
 800fc58:	4628      	mov	r0, r5
 800fc5a:	47b8      	blx	r7
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	f43f ae52 	beq.w	800f906 <_printf_float+0xc2>
 800fc62:	f108 0801 	add.w	r8, r8, #1
 800fc66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	4543      	cmp	r3, r8
 800fc6c:	dcf1      	bgt.n	800fc52 <_printf_float+0x40e>
 800fc6e:	464b      	mov	r3, r9
 800fc70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fc74:	e6dc      	b.n	800fa30 <_printf_float+0x1ec>
 800fc76:	f04f 0800 	mov.w	r8, #0
 800fc7a:	f104 0a1a 	add.w	sl, r4, #26
 800fc7e:	e7f2      	b.n	800fc66 <_printf_float+0x422>
 800fc80:	2301      	movs	r3, #1
 800fc82:	4642      	mov	r2, r8
 800fc84:	e7df      	b.n	800fc46 <_printf_float+0x402>
 800fc86:	2301      	movs	r3, #1
 800fc88:	464a      	mov	r2, r9
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	47b8      	blx	r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	f43f ae38 	beq.w	800f906 <_printf_float+0xc2>
 800fc96:	f108 0801 	add.w	r8, r8, #1
 800fc9a:	68e3      	ldr	r3, [r4, #12]
 800fc9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc9e:	1a5b      	subs	r3, r3, r1
 800fca0:	4543      	cmp	r3, r8
 800fca2:	dcf0      	bgt.n	800fc86 <_printf_float+0x442>
 800fca4:	e6fa      	b.n	800fa9c <_printf_float+0x258>
 800fca6:	f04f 0800 	mov.w	r8, #0
 800fcaa:	f104 0919 	add.w	r9, r4, #25
 800fcae:	e7f4      	b.n	800fc9a <_printf_float+0x456>

0800fcb0 <_printf_common>:
 800fcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb4:	4616      	mov	r6, r2
 800fcb6:	4699      	mov	r9, r3
 800fcb8:	688a      	ldr	r2, [r1, #8]
 800fcba:	690b      	ldr	r3, [r1, #16]
 800fcbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	bfb8      	it	lt
 800fcc4:	4613      	movlt	r3, r2
 800fcc6:	6033      	str	r3, [r6, #0]
 800fcc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fccc:	4607      	mov	r7, r0
 800fcce:	460c      	mov	r4, r1
 800fcd0:	b10a      	cbz	r2, 800fcd6 <_printf_common+0x26>
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	6033      	str	r3, [r6, #0]
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	0699      	lsls	r1, r3, #26
 800fcda:	bf42      	ittt	mi
 800fcdc:	6833      	ldrmi	r3, [r6, #0]
 800fcde:	3302      	addmi	r3, #2
 800fce0:	6033      	strmi	r3, [r6, #0]
 800fce2:	6825      	ldr	r5, [r4, #0]
 800fce4:	f015 0506 	ands.w	r5, r5, #6
 800fce8:	d106      	bne.n	800fcf8 <_printf_common+0x48>
 800fcea:	f104 0a19 	add.w	sl, r4, #25
 800fcee:	68e3      	ldr	r3, [r4, #12]
 800fcf0:	6832      	ldr	r2, [r6, #0]
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	42ab      	cmp	r3, r5
 800fcf6:	dc26      	bgt.n	800fd46 <_printf_common+0x96>
 800fcf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcfc:	1e13      	subs	r3, r2, #0
 800fcfe:	6822      	ldr	r2, [r4, #0]
 800fd00:	bf18      	it	ne
 800fd02:	2301      	movne	r3, #1
 800fd04:	0692      	lsls	r2, r2, #26
 800fd06:	d42b      	bmi.n	800fd60 <_printf_common+0xb0>
 800fd08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd0c:	4649      	mov	r1, r9
 800fd0e:	4638      	mov	r0, r7
 800fd10:	47c0      	blx	r8
 800fd12:	3001      	adds	r0, #1
 800fd14:	d01e      	beq.n	800fd54 <_printf_common+0xa4>
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	68e5      	ldr	r5, [r4, #12]
 800fd1a:	6832      	ldr	r2, [r6, #0]
 800fd1c:	f003 0306 	and.w	r3, r3, #6
 800fd20:	2b04      	cmp	r3, #4
 800fd22:	bf08      	it	eq
 800fd24:	1aad      	subeq	r5, r5, r2
 800fd26:	68a3      	ldr	r3, [r4, #8]
 800fd28:	6922      	ldr	r2, [r4, #16]
 800fd2a:	bf0c      	ite	eq
 800fd2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd30:	2500      	movne	r5, #0
 800fd32:	4293      	cmp	r3, r2
 800fd34:	bfc4      	itt	gt
 800fd36:	1a9b      	subgt	r3, r3, r2
 800fd38:	18ed      	addgt	r5, r5, r3
 800fd3a:	2600      	movs	r6, #0
 800fd3c:	341a      	adds	r4, #26
 800fd3e:	42b5      	cmp	r5, r6
 800fd40:	d11a      	bne.n	800fd78 <_printf_common+0xc8>
 800fd42:	2000      	movs	r0, #0
 800fd44:	e008      	b.n	800fd58 <_printf_common+0xa8>
 800fd46:	2301      	movs	r3, #1
 800fd48:	4652      	mov	r2, sl
 800fd4a:	4649      	mov	r1, r9
 800fd4c:	4638      	mov	r0, r7
 800fd4e:	47c0      	blx	r8
 800fd50:	3001      	adds	r0, #1
 800fd52:	d103      	bne.n	800fd5c <_printf_common+0xac>
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295
 800fd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5c:	3501      	adds	r5, #1
 800fd5e:	e7c6      	b.n	800fcee <_printf_common+0x3e>
 800fd60:	18e1      	adds	r1, r4, r3
 800fd62:	1c5a      	adds	r2, r3, #1
 800fd64:	2030      	movs	r0, #48	; 0x30
 800fd66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd6a:	4422      	add	r2, r4
 800fd6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd74:	3302      	adds	r3, #2
 800fd76:	e7c7      	b.n	800fd08 <_printf_common+0x58>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	4649      	mov	r1, r9
 800fd7e:	4638      	mov	r0, r7
 800fd80:	47c0      	blx	r8
 800fd82:	3001      	adds	r0, #1
 800fd84:	d0e6      	beq.n	800fd54 <_printf_common+0xa4>
 800fd86:	3601      	adds	r6, #1
 800fd88:	e7d9      	b.n	800fd3e <_printf_common+0x8e>
	...

0800fd8c <_printf_i>:
 800fd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd90:	7e0f      	ldrb	r7, [r1, #24]
 800fd92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd94:	2f78      	cmp	r7, #120	; 0x78
 800fd96:	4691      	mov	r9, r2
 800fd98:	4680      	mov	r8, r0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	469a      	mov	sl, r3
 800fd9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fda2:	d807      	bhi.n	800fdb4 <_printf_i+0x28>
 800fda4:	2f62      	cmp	r7, #98	; 0x62
 800fda6:	d80a      	bhi.n	800fdbe <_printf_i+0x32>
 800fda8:	2f00      	cmp	r7, #0
 800fdaa:	f000 80d8 	beq.w	800ff5e <_printf_i+0x1d2>
 800fdae:	2f58      	cmp	r7, #88	; 0x58
 800fdb0:	f000 80a3 	beq.w	800fefa <_printf_i+0x16e>
 800fdb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdbc:	e03a      	b.n	800fe34 <_printf_i+0xa8>
 800fdbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdc2:	2b15      	cmp	r3, #21
 800fdc4:	d8f6      	bhi.n	800fdb4 <_printf_i+0x28>
 800fdc6:	a101      	add	r1, pc, #4	; (adr r1, 800fdcc <_printf_i+0x40>)
 800fdc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdcc:	0800fe25 	.word	0x0800fe25
 800fdd0:	0800fe39 	.word	0x0800fe39
 800fdd4:	0800fdb5 	.word	0x0800fdb5
 800fdd8:	0800fdb5 	.word	0x0800fdb5
 800fddc:	0800fdb5 	.word	0x0800fdb5
 800fde0:	0800fdb5 	.word	0x0800fdb5
 800fde4:	0800fe39 	.word	0x0800fe39
 800fde8:	0800fdb5 	.word	0x0800fdb5
 800fdec:	0800fdb5 	.word	0x0800fdb5
 800fdf0:	0800fdb5 	.word	0x0800fdb5
 800fdf4:	0800fdb5 	.word	0x0800fdb5
 800fdf8:	0800ff45 	.word	0x0800ff45
 800fdfc:	0800fe69 	.word	0x0800fe69
 800fe00:	0800ff27 	.word	0x0800ff27
 800fe04:	0800fdb5 	.word	0x0800fdb5
 800fe08:	0800fdb5 	.word	0x0800fdb5
 800fe0c:	0800ff67 	.word	0x0800ff67
 800fe10:	0800fdb5 	.word	0x0800fdb5
 800fe14:	0800fe69 	.word	0x0800fe69
 800fe18:	0800fdb5 	.word	0x0800fdb5
 800fe1c:	0800fdb5 	.word	0x0800fdb5
 800fe20:	0800ff2f 	.word	0x0800ff2f
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	1d1a      	adds	r2, r3, #4
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	602a      	str	r2, [r5, #0]
 800fe2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe34:	2301      	movs	r3, #1
 800fe36:	e0a3      	b.n	800ff80 <_printf_i+0x1f4>
 800fe38:	6820      	ldr	r0, [r4, #0]
 800fe3a:	6829      	ldr	r1, [r5, #0]
 800fe3c:	0606      	lsls	r6, r0, #24
 800fe3e:	f101 0304 	add.w	r3, r1, #4
 800fe42:	d50a      	bpl.n	800fe5a <_printf_i+0xce>
 800fe44:	680e      	ldr	r6, [r1, #0]
 800fe46:	602b      	str	r3, [r5, #0]
 800fe48:	2e00      	cmp	r6, #0
 800fe4a:	da03      	bge.n	800fe54 <_printf_i+0xc8>
 800fe4c:	232d      	movs	r3, #45	; 0x2d
 800fe4e:	4276      	negs	r6, r6
 800fe50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe54:	485e      	ldr	r0, [pc, #376]	; (800ffd0 <_printf_i+0x244>)
 800fe56:	230a      	movs	r3, #10
 800fe58:	e019      	b.n	800fe8e <_printf_i+0x102>
 800fe5a:	680e      	ldr	r6, [r1, #0]
 800fe5c:	602b      	str	r3, [r5, #0]
 800fe5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe62:	bf18      	it	ne
 800fe64:	b236      	sxthne	r6, r6
 800fe66:	e7ef      	b.n	800fe48 <_printf_i+0xbc>
 800fe68:	682b      	ldr	r3, [r5, #0]
 800fe6a:	6820      	ldr	r0, [r4, #0]
 800fe6c:	1d19      	adds	r1, r3, #4
 800fe6e:	6029      	str	r1, [r5, #0]
 800fe70:	0601      	lsls	r1, r0, #24
 800fe72:	d501      	bpl.n	800fe78 <_printf_i+0xec>
 800fe74:	681e      	ldr	r6, [r3, #0]
 800fe76:	e002      	b.n	800fe7e <_printf_i+0xf2>
 800fe78:	0646      	lsls	r6, r0, #25
 800fe7a:	d5fb      	bpl.n	800fe74 <_printf_i+0xe8>
 800fe7c:	881e      	ldrh	r6, [r3, #0]
 800fe7e:	4854      	ldr	r0, [pc, #336]	; (800ffd0 <_printf_i+0x244>)
 800fe80:	2f6f      	cmp	r7, #111	; 0x6f
 800fe82:	bf0c      	ite	eq
 800fe84:	2308      	moveq	r3, #8
 800fe86:	230a      	movne	r3, #10
 800fe88:	2100      	movs	r1, #0
 800fe8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe8e:	6865      	ldr	r5, [r4, #4]
 800fe90:	60a5      	str	r5, [r4, #8]
 800fe92:	2d00      	cmp	r5, #0
 800fe94:	bfa2      	ittt	ge
 800fe96:	6821      	ldrge	r1, [r4, #0]
 800fe98:	f021 0104 	bicge.w	r1, r1, #4
 800fe9c:	6021      	strge	r1, [r4, #0]
 800fe9e:	b90e      	cbnz	r6, 800fea4 <_printf_i+0x118>
 800fea0:	2d00      	cmp	r5, #0
 800fea2:	d04d      	beq.n	800ff40 <_printf_i+0x1b4>
 800fea4:	4615      	mov	r5, r2
 800fea6:	fbb6 f1f3 	udiv	r1, r6, r3
 800feaa:	fb03 6711 	mls	r7, r3, r1, r6
 800feae:	5dc7      	ldrb	r7, [r0, r7]
 800feb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800feb4:	4637      	mov	r7, r6
 800feb6:	42bb      	cmp	r3, r7
 800feb8:	460e      	mov	r6, r1
 800feba:	d9f4      	bls.n	800fea6 <_printf_i+0x11a>
 800febc:	2b08      	cmp	r3, #8
 800febe:	d10b      	bne.n	800fed8 <_printf_i+0x14c>
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	07de      	lsls	r6, r3, #31
 800fec4:	d508      	bpl.n	800fed8 <_printf_i+0x14c>
 800fec6:	6923      	ldr	r3, [r4, #16]
 800fec8:	6861      	ldr	r1, [r4, #4]
 800feca:	4299      	cmp	r1, r3
 800fecc:	bfde      	ittt	le
 800fece:	2330      	movle	r3, #48	; 0x30
 800fed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fed8:	1b52      	subs	r2, r2, r5
 800feda:	6122      	str	r2, [r4, #16]
 800fedc:	f8cd a000 	str.w	sl, [sp]
 800fee0:	464b      	mov	r3, r9
 800fee2:	aa03      	add	r2, sp, #12
 800fee4:	4621      	mov	r1, r4
 800fee6:	4640      	mov	r0, r8
 800fee8:	f7ff fee2 	bl	800fcb0 <_printf_common>
 800feec:	3001      	adds	r0, #1
 800feee:	d14c      	bne.n	800ff8a <_printf_i+0x1fe>
 800fef0:	f04f 30ff 	mov.w	r0, #4294967295
 800fef4:	b004      	add	sp, #16
 800fef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefa:	4835      	ldr	r0, [pc, #212]	; (800ffd0 <_printf_i+0x244>)
 800fefc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ff00:	6829      	ldr	r1, [r5, #0]
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff08:	6029      	str	r1, [r5, #0]
 800ff0a:	061d      	lsls	r5, r3, #24
 800ff0c:	d514      	bpl.n	800ff38 <_printf_i+0x1ac>
 800ff0e:	07df      	lsls	r7, r3, #31
 800ff10:	bf44      	itt	mi
 800ff12:	f043 0320 	orrmi.w	r3, r3, #32
 800ff16:	6023      	strmi	r3, [r4, #0]
 800ff18:	b91e      	cbnz	r6, 800ff22 <_printf_i+0x196>
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	f023 0320 	bic.w	r3, r3, #32
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	2310      	movs	r3, #16
 800ff24:	e7b0      	b.n	800fe88 <_printf_i+0xfc>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	f043 0320 	orr.w	r3, r3, #32
 800ff2c:	6023      	str	r3, [r4, #0]
 800ff2e:	2378      	movs	r3, #120	; 0x78
 800ff30:	4828      	ldr	r0, [pc, #160]	; (800ffd4 <_printf_i+0x248>)
 800ff32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff36:	e7e3      	b.n	800ff00 <_printf_i+0x174>
 800ff38:	0659      	lsls	r1, r3, #25
 800ff3a:	bf48      	it	mi
 800ff3c:	b2b6      	uxthmi	r6, r6
 800ff3e:	e7e6      	b.n	800ff0e <_printf_i+0x182>
 800ff40:	4615      	mov	r5, r2
 800ff42:	e7bb      	b.n	800febc <_printf_i+0x130>
 800ff44:	682b      	ldr	r3, [r5, #0]
 800ff46:	6826      	ldr	r6, [r4, #0]
 800ff48:	6961      	ldr	r1, [r4, #20]
 800ff4a:	1d18      	adds	r0, r3, #4
 800ff4c:	6028      	str	r0, [r5, #0]
 800ff4e:	0635      	lsls	r5, r6, #24
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	d501      	bpl.n	800ff58 <_printf_i+0x1cc>
 800ff54:	6019      	str	r1, [r3, #0]
 800ff56:	e002      	b.n	800ff5e <_printf_i+0x1d2>
 800ff58:	0670      	lsls	r0, r6, #25
 800ff5a:	d5fb      	bpl.n	800ff54 <_printf_i+0x1c8>
 800ff5c:	8019      	strh	r1, [r3, #0]
 800ff5e:	2300      	movs	r3, #0
 800ff60:	6123      	str	r3, [r4, #16]
 800ff62:	4615      	mov	r5, r2
 800ff64:	e7ba      	b.n	800fedc <_printf_i+0x150>
 800ff66:	682b      	ldr	r3, [r5, #0]
 800ff68:	1d1a      	adds	r2, r3, #4
 800ff6a:	602a      	str	r2, [r5, #0]
 800ff6c:	681d      	ldr	r5, [r3, #0]
 800ff6e:	6862      	ldr	r2, [r4, #4]
 800ff70:	2100      	movs	r1, #0
 800ff72:	4628      	mov	r0, r5
 800ff74:	f7f0 f95c 	bl	8000230 <memchr>
 800ff78:	b108      	cbz	r0, 800ff7e <_printf_i+0x1f2>
 800ff7a:	1b40      	subs	r0, r0, r5
 800ff7c:	6060      	str	r0, [r4, #4]
 800ff7e:	6863      	ldr	r3, [r4, #4]
 800ff80:	6123      	str	r3, [r4, #16]
 800ff82:	2300      	movs	r3, #0
 800ff84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff88:	e7a8      	b.n	800fedc <_printf_i+0x150>
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	462a      	mov	r2, r5
 800ff8e:	4649      	mov	r1, r9
 800ff90:	4640      	mov	r0, r8
 800ff92:	47d0      	blx	sl
 800ff94:	3001      	adds	r0, #1
 800ff96:	d0ab      	beq.n	800fef0 <_printf_i+0x164>
 800ff98:	6823      	ldr	r3, [r4, #0]
 800ff9a:	079b      	lsls	r3, r3, #30
 800ff9c:	d413      	bmi.n	800ffc6 <_printf_i+0x23a>
 800ff9e:	68e0      	ldr	r0, [r4, #12]
 800ffa0:	9b03      	ldr	r3, [sp, #12]
 800ffa2:	4298      	cmp	r0, r3
 800ffa4:	bfb8      	it	lt
 800ffa6:	4618      	movlt	r0, r3
 800ffa8:	e7a4      	b.n	800fef4 <_printf_i+0x168>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	4632      	mov	r2, r6
 800ffae:	4649      	mov	r1, r9
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	47d0      	blx	sl
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	d09b      	beq.n	800fef0 <_printf_i+0x164>
 800ffb8:	3501      	adds	r5, #1
 800ffba:	68e3      	ldr	r3, [r4, #12]
 800ffbc:	9903      	ldr	r1, [sp, #12]
 800ffbe:	1a5b      	subs	r3, r3, r1
 800ffc0:	42ab      	cmp	r3, r5
 800ffc2:	dcf2      	bgt.n	800ffaa <_printf_i+0x21e>
 800ffc4:	e7eb      	b.n	800ff9e <_printf_i+0x212>
 800ffc6:	2500      	movs	r5, #0
 800ffc8:	f104 0619 	add.w	r6, r4, #25
 800ffcc:	e7f5      	b.n	800ffba <_printf_i+0x22e>
 800ffce:	bf00      	nop
 800ffd0:	0802a947 	.word	0x0802a947
 800ffd4:	0802a958 	.word	0x0802a958

0800ffd8 <_scanf_float>:
 800ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	b087      	sub	sp, #28
 800ffde:	4617      	mov	r7, r2
 800ffe0:	9303      	str	r3, [sp, #12]
 800ffe2:	688b      	ldr	r3, [r1, #8]
 800ffe4:	1e5a      	subs	r2, r3, #1
 800ffe6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ffea:	bf83      	ittte	hi
 800ffec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fff0:	195b      	addhi	r3, r3, r5
 800fff2:	9302      	strhi	r3, [sp, #8]
 800fff4:	2300      	movls	r3, #0
 800fff6:	bf86      	itte	hi
 800fff8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fffc:	608b      	strhi	r3, [r1, #8]
 800fffe:	9302      	strls	r3, [sp, #8]
 8010000:	680b      	ldr	r3, [r1, #0]
 8010002:	468b      	mov	fp, r1
 8010004:	2500      	movs	r5, #0
 8010006:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801000a:	f84b 3b1c 	str.w	r3, [fp], #28
 801000e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010012:	4680      	mov	r8, r0
 8010014:	460c      	mov	r4, r1
 8010016:	465e      	mov	r6, fp
 8010018:	46aa      	mov	sl, r5
 801001a:	46a9      	mov	r9, r5
 801001c:	9501      	str	r5, [sp, #4]
 801001e:	68a2      	ldr	r2, [r4, #8]
 8010020:	b152      	cbz	r2, 8010038 <_scanf_float+0x60>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	2b4e      	cmp	r3, #78	; 0x4e
 8010028:	d864      	bhi.n	80100f4 <_scanf_float+0x11c>
 801002a:	2b40      	cmp	r3, #64	; 0x40
 801002c:	d83c      	bhi.n	80100a8 <_scanf_float+0xd0>
 801002e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010032:	b2c8      	uxtb	r0, r1
 8010034:	280e      	cmp	r0, #14
 8010036:	d93a      	bls.n	80100ae <_scanf_float+0xd6>
 8010038:	f1b9 0f00 	cmp.w	r9, #0
 801003c:	d003      	beq.n	8010046 <_scanf_float+0x6e>
 801003e:	6823      	ldr	r3, [r4, #0]
 8010040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	f10a 3aff 	add.w	sl, sl, #4294967295
 801004a:	f1ba 0f01 	cmp.w	sl, #1
 801004e:	f200 8113 	bhi.w	8010278 <_scanf_float+0x2a0>
 8010052:	455e      	cmp	r6, fp
 8010054:	f200 8105 	bhi.w	8010262 <_scanf_float+0x28a>
 8010058:	2501      	movs	r5, #1
 801005a:	4628      	mov	r0, r5
 801005c:	b007      	add	sp, #28
 801005e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010062:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010066:	2a0d      	cmp	r2, #13
 8010068:	d8e6      	bhi.n	8010038 <_scanf_float+0x60>
 801006a:	a101      	add	r1, pc, #4	; (adr r1, 8010070 <_scanf_float+0x98>)
 801006c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010070:	080101af 	.word	0x080101af
 8010074:	08010039 	.word	0x08010039
 8010078:	08010039 	.word	0x08010039
 801007c:	08010039 	.word	0x08010039
 8010080:	0801020f 	.word	0x0801020f
 8010084:	080101e7 	.word	0x080101e7
 8010088:	08010039 	.word	0x08010039
 801008c:	08010039 	.word	0x08010039
 8010090:	080101bd 	.word	0x080101bd
 8010094:	08010039 	.word	0x08010039
 8010098:	08010039 	.word	0x08010039
 801009c:	08010039 	.word	0x08010039
 80100a0:	08010039 	.word	0x08010039
 80100a4:	08010175 	.word	0x08010175
 80100a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80100ac:	e7db      	b.n	8010066 <_scanf_float+0x8e>
 80100ae:	290e      	cmp	r1, #14
 80100b0:	d8c2      	bhi.n	8010038 <_scanf_float+0x60>
 80100b2:	a001      	add	r0, pc, #4	; (adr r0, 80100b8 <_scanf_float+0xe0>)
 80100b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80100b8:	08010167 	.word	0x08010167
 80100bc:	08010039 	.word	0x08010039
 80100c0:	08010167 	.word	0x08010167
 80100c4:	080101fb 	.word	0x080101fb
 80100c8:	08010039 	.word	0x08010039
 80100cc:	08010115 	.word	0x08010115
 80100d0:	08010151 	.word	0x08010151
 80100d4:	08010151 	.word	0x08010151
 80100d8:	08010151 	.word	0x08010151
 80100dc:	08010151 	.word	0x08010151
 80100e0:	08010151 	.word	0x08010151
 80100e4:	08010151 	.word	0x08010151
 80100e8:	08010151 	.word	0x08010151
 80100ec:	08010151 	.word	0x08010151
 80100f0:	08010151 	.word	0x08010151
 80100f4:	2b6e      	cmp	r3, #110	; 0x6e
 80100f6:	d809      	bhi.n	801010c <_scanf_float+0x134>
 80100f8:	2b60      	cmp	r3, #96	; 0x60
 80100fa:	d8b2      	bhi.n	8010062 <_scanf_float+0x8a>
 80100fc:	2b54      	cmp	r3, #84	; 0x54
 80100fe:	d077      	beq.n	80101f0 <_scanf_float+0x218>
 8010100:	2b59      	cmp	r3, #89	; 0x59
 8010102:	d199      	bne.n	8010038 <_scanf_float+0x60>
 8010104:	2d07      	cmp	r5, #7
 8010106:	d197      	bne.n	8010038 <_scanf_float+0x60>
 8010108:	2508      	movs	r5, #8
 801010a:	e029      	b.n	8010160 <_scanf_float+0x188>
 801010c:	2b74      	cmp	r3, #116	; 0x74
 801010e:	d06f      	beq.n	80101f0 <_scanf_float+0x218>
 8010110:	2b79      	cmp	r3, #121	; 0x79
 8010112:	e7f6      	b.n	8010102 <_scanf_float+0x12a>
 8010114:	6821      	ldr	r1, [r4, #0]
 8010116:	05c8      	lsls	r0, r1, #23
 8010118:	d51a      	bpl.n	8010150 <_scanf_float+0x178>
 801011a:	9b02      	ldr	r3, [sp, #8]
 801011c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010120:	6021      	str	r1, [r4, #0]
 8010122:	f109 0901 	add.w	r9, r9, #1
 8010126:	b11b      	cbz	r3, 8010130 <_scanf_float+0x158>
 8010128:	3b01      	subs	r3, #1
 801012a:	3201      	adds	r2, #1
 801012c:	9302      	str	r3, [sp, #8]
 801012e:	60a2      	str	r2, [r4, #8]
 8010130:	68a3      	ldr	r3, [r4, #8]
 8010132:	3b01      	subs	r3, #1
 8010134:	60a3      	str	r3, [r4, #8]
 8010136:	6923      	ldr	r3, [r4, #16]
 8010138:	3301      	adds	r3, #1
 801013a:	6123      	str	r3, [r4, #16]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	3b01      	subs	r3, #1
 8010140:	2b00      	cmp	r3, #0
 8010142:	607b      	str	r3, [r7, #4]
 8010144:	f340 8084 	ble.w	8010250 <_scanf_float+0x278>
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	3301      	adds	r3, #1
 801014c:	603b      	str	r3, [r7, #0]
 801014e:	e766      	b.n	801001e <_scanf_float+0x46>
 8010150:	eb1a 0f05 	cmn.w	sl, r5
 8010154:	f47f af70 	bne.w	8010038 <_scanf_float+0x60>
 8010158:	6822      	ldr	r2, [r4, #0]
 801015a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801015e:	6022      	str	r2, [r4, #0]
 8010160:	f806 3b01 	strb.w	r3, [r6], #1
 8010164:	e7e4      	b.n	8010130 <_scanf_float+0x158>
 8010166:	6822      	ldr	r2, [r4, #0]
 8010168:	0610      	lsls	r0, r2, #24
 801016a:	f57f af65 	bpl.w	8010038 <_scanf_float+0x60>
 801016e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010172:	e7f4      	b.n	801015e <_scanf_float+0x186>
 8010174:	f1ba 0f00 	cmp.w	sl, #0
 8010178:	d10e      	bne.n	8010198 <_scanf_float+0x1c0>
 801017a:	f1b9 0f00 	cmp.w	r9, #0
 801017e:	d10e      	bne.n	801019e <_scanf_float+0x1c6>
 8010180:	6822      	ldr	r2, [r4, #0]
 8010182:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010186:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801018a:	d108      	bne.n	801019e <_scanf_float+0x1c6>
 801018c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010190:	6022      	str	r2, [r4, #0]
 8010192:	f04f 0a01 	mov.w	sl, #1
 8010196:	e7e3      	b.n	8010160 <_scanf_float+0x188>
 8010198:	f1ba 0f02 	cmp.w	sl, #2
 801019c:	d055      	beq.n	801024a <_scanf_float+0x272>
 801019e:	2d01      	cmp	r5, #1
 80101a0:	d002      	beq.n	80101a8 <_scanf_float+0x1d0>
 80101a2:	2d04      	cmp	r5, #4
 80101a4:	f47f af48 	bne.w	8010038 <_scanf_float+0x60>
 80101a8:	3501      	adds	r5, #1
 80101aa:	b2ed      	uxtb	r5, r5
 80101ac:	e7d8      	b.n	8010160 <_scanf_float+0x188>
 80101ae:	f1ba 0f01 	cmp.w	sl, #1
 80101b2:	f47f af41 	bne.w	8010038 <_scanf_float+0x60>
 80101b6:	f04f 0a02 	mov.w	sl, #2
 80101ba:	e7d1      	b.n	8010160 <_scanf_float+0x188>
 80101bc:	b97d      	cbnz	r5, 80101de <_scanf_float+0x206>
 80101be:	f1b9 0f00 	cmp.w	r9, #0
 80101c2:	f47f af3c 	bne.w	801003e <_scanf_float+0x66>
 80101c6:	6822      	ldr	r2, [r4, #0]
 80101c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80101cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80101d0:	f47f af39 	bne.w	8010046 <_scanf_float+0x6e>
 80101d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80101d8:	6022      	str	r2, [r4, #0]
 80101da:	2501      	movs	r5, #1
 80101dc:	e7c0      	b.n	8010160 <_scanf_float+0x188>
 80101de:	2d03      	cmp	r5, #3
 80101e0:	d0e2      	beq.n	80101a8 <_scanf_float+0x1d0>
 80101e2:	2d05      	cmp	r5, #5
 80101e4:	e7de      	b.n	80101a4 <_scanf_float+0x1cc>
 80101e6:	2d02      	cmp	r5, #2
 80101e8:	f47f af26 	bne.w	8010038 <_scanf_float+0x60>
 80101ec:	2503      	movs	r5, #3
 80101ee:	e7b7      	b.n	8010160 <_scanf_float+0x188>
 80101f0:	2d06      	cmp	r5, #6
 80101f2:	f47f af21 	bne.w	8010038 <_scanf_float+0x60>
 80101f6:	2507      	movs	r5, #7
 80101f8:	e7b2      	b.n	8010160 <_scanf_float+0x188>
 80101fa:	6822      	ldr	r2, [r4, #0]
 80101fc:	0591      	lsls	r1, r2, #22
 80101fe:	f57f af1b 	bpl.w	8010038 <_scanf_float+0x60>
 8010202:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010206:	6022      	str	r2, [r4, #0]
 8010208:	f8cd 9004 	str.w	r9, [sp, #4]
 801020c:	e7a8      	b.n	8010160 <_scanf_float+0x188>
 801020e:	6822      	ldr	r2, [r4, #0]
 8010210:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010214:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010218:	d006      	beq.n	8010228 <_scanf_float+0x250>
 801021a:	0550      	lsls	r0, r2, #21
 801021c:	f57f af0c 	bpl.w	8010038 <_scanf_float+0x60>
 8010220:	f1b9 0f00 	cmp.w	r9, #0
 8010224:	f43f af0f 	beq.w	8010046 <_scanf_float+0x6e>
 8010228:	0591      	lsls	r1, r2, #22
 801022a:	bf58      	it	pl
 801022c:	9901      	ldrpl	r1, [sp, #4]
 801022e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010232:	bf58      	it	pl
 8010234:	eba9 0101 	subpl.w	r1, r9, r1
 8010238:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801023c:	bf58      	it	pl
 801023e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010242:	6022      	str	r2, [r4, #0]
 8010244:	f04f 0900 	mov.w	r9, #0
 8010248:	e78a      	b.n	8010160 <_scanf_float+0x188>
 801024a:	f04f 0a03 	mov.w	sl, #3
 801024e:	e787      	b.n	8010160 <_scanf_float+0x188>
 8010250:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010254:	4639      	mov	r1, r7
 8010256:	4640      	mov	r0, r8
 8010258:	4798      	blx	r3
 801025a:	2800      	cmp	r0, #0
 801025c:	f43f aedf 	beq.w	801001e <_scanf_float+0x46>
 8010260:	e6ea      	b.n	8010038 <_scanf_float+0x60>
 8010262:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010266:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801026a:	463a      	mov	r2, r7
 801026c:	4640      	mov	r0, r8
 801026e:	4798      	blx	r3
 8010270:	6923      	ldr	r3, [r4, #16]
 8010272:	3b01      	subs	r3, #1
 8010274:	6123      	str	r3, [r4, #16]
 8010276:	e6ec      	b.n	8010052 <_scanf_float+0x7a>
 8010278:	1e6b      	subs	r3, r5, #1
 801027a:	2b06      	cmp	r3, #6
 801027c:	d825      	bhi.n	80102ca <_scanf_float+0x2f2>
 801027e:	2d02      	cmp	r5, #2
 8010280:	d836      	bhi.n	80102f0 <_scanf_float+0x318>
 8010282:	455e      	cmp	r6, fp
 8010284:	f67f aee8 	bls.w	8010058 <_scanf_float+0x80>
 8010288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801028c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010290:	463a      	mov	r2, r7
 8010292:	4640      	mov	r0, r8
 8010294:	4798      	blx	r3
 8010296:	6923      	ldr	r3, [r4, #16]
 8010298:	3b01      	subs	r3, #1
 801029a:	6123      	str	r3, [r4, #16]
 801029c:	e7f1      	b.n	8010282 <_scanf_float+0x2aa>
 801029e:	9802      	ldr	r0, [sp, #8]
 80102a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80102a8:	9002      	str	r0, [sp, #8]
 80102aa:	463a      	mov	r2, r7
 80102ac:	4640      	mov	r0, r8
 80102ae:	4798      	blx	r3
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	3b01      	subs	r3, #1
 80102b4:	6123      	str	r3, [r4, #16]
 80102b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102ba:	fa5f fa8a 	uxtb.w	sl, sl
 80102be:	f1ba 0f02 	cmp.w	sl, #2
 80102c2:	d1ec      	bne.n	801029e <_scanf_float+0x2c6>
 80102c4:	3d03      	subs	r5, #3
 80102c6:	b2ed      	uxtb	r5, r5
 80102c8:	1b76      	subs	r6, r6, r5
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	05da      	lsls	r2, r3, #23
 80102ce:	d52f      	bpl.n	8010330 <_scanf_float+0x358>
 80102d0:	055b      	lsls	r3, r3, #21
 80102d2:	d510      	bpl.n	80102f6 <_scanf_float+0x31e>
 80102d4:	455e      	cmp	r6, fp
 80102d6:	f67f aebf 	bls.w	8010058 <_scanf_float+0x80>
 80102da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102e2:	463a      	mov	r2, r7
 80102e4:	4640      	mov	r0, r8
 80102e6:	4798      	blx	r3
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	3b01      	subs	r3, #1
 80102ec:	6123      	str	r3, [r4, #16]
 80102ee:	e7f1      	b.n	80102d4 <_scanf_float+0x2fc>
 80102f0:	46aa      	mov	sl, r5
 80102f2:	9602      	str	r6, [sp, #8]
 80102f4:	e7df      	b.n	80102b6 <_scanf_float+0x2de>
 80102f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80102fa:	6923      	ldr	r3, [r4, #16]
 80102fc:	2965      	cmp	r1, #101	; 0x65
 80102fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8010302:	f106 35ff 	add.w	r5, r6, #4294967295
 8010306:	6123      	str	r3, [r4, #16]
 8010308:	d00c      	beq.n	8010324 <_scanf_float+0x34c>
 801030a:	2945      	cmp	r1, #69	; 0x45
 801030c:	d00a      	beq.n	8010324 <_scanf_float+0x34c>
 801030e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010312:	463a      	mov	r2, r7
 8010314:	4640      	mov	r0, r8
 8010316:	4798      	blx	r3
 8010318:	6923      	ldr	r3, [r4, #16]
 801031a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801031e:	3b01      	subs	r3, #1
 8010320:	1eb5      	subs	r5, r6, #2
 8010322:	6123      	str	r3, [r4, #16]
 8010324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010328:	463a      	mov	r2, r7
 801032a:	4640      	mov	r0, r8
 801032c:	4798      	blx	r3
 801032e:	462e      	mov	r6, r5
 8010330:	6825      	ldr	r5, [r4, #0]
 8010332:	f015 0510 	ands.w	r5, r5, #16
 8010336:	d159      	bne.n	80103ec <_scanf_float+0x414>
 8010338:	7035      	strb	r5, [r6, #0]
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010344:	d11b      	bne.n	801037e <_scanf_float+0x3a6>
 8010346:	9b01      	ldr	r3, [sp, #4]
 8010348:	454b      	cmp	r3, r9
 801034a:	eba3 0209 	sub.w	r2, r3, r9
 801034e:	d123      	bne.n	8010398 <_scanf_float+0x3c0>
 8010350:	2200      	movs	r2, #0
 8010352:	4659      	mov	r1, fp
 8010354:	4640      	mov	r0, r8
 8010356:	f000 ff0d 	bl	8011174 <_strtod_r>
 801035a:	6822      	ldr	r2, [r4, #0]
 801035c:	9b03      	ldr	r3, [sp, #12]
 801035e:	f012 0f02 	tst.w	r2, #2
 8010362:	ec57 6b10 	vmov	r6, r7, d0
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	d021      	beq.n	80103ae <_scanf_float+0x3d6>
 801036a:	9903      	ldr	r1, [sp, #12]
 801036c:	1d1a      	adds	r2, r3, #4
 801036e:	600a      	str	r2, [r1, #0]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	e9c3 6700 	strd	r6, r7, [r3]
 8010376:	68e3      	ldr	r3, [r4, #12]
 8010378:	3301      	adds	r3, #1
 801037a:	60e3      	str	r3, [r4, #12]
 801037c:	e66d      	b.n	801005a <_scanf_float+0x82>
 801037e:	9b04      	ldr	r3, [sp, #16]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0e5      	beq.n	8010350 <_scanf_float+0x378>
 8010384:	9905      	ldr	r1, [sp, #20]
 8010386:	230a      	movs	r3, #10
 8010388:	462a      	mov	r2, r5
 801038a:	3101      	adds	r1, #1
 801038c:	4640      	mov	r0, r8
 801038e:	f000 ff79 	bl	8011284 <_strtol_r>
 8010392:	9b04      	ldr	r3, [sp, #16]
 8010394:	9e05      	ldr	r6, [sp, #20]
 8010396:	1ac2      	subs	r2, r0, r3
 8010398:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801039c:	429e      	cmp	r6, r3
 801039e:	bf28      	it	cs
 80103a0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80103a4:	4912      	ldr	r1, [pc, #72]	; (80103f0 <_scanf_float+0x418>)
 80103a6:	4630      	mov	r0, r6
 80103a8:	f000 f8a2 	bl	80104f0 <siprintf>
 80103ac:	e7d0      	b.n	8010350 <_scanf_float+0x378>
 80103ae:	9903      	ldr	r1, [sp, #12]
 80103b0:	f012 0f04 	tst.w	r2, #4
 80103b4:	f103 0204 	add.w	r2, r3, #4
 80103b8:	600a      	str	r2, [r1, #0]
 80103ba:	d1d9      	bne.n	8010370 <_scanf_float+0x398>
 80103bc:	f8d3 8000 	ldr.w	r8, [r3]
 80103c0:	ee10 2a10 	vmov	r2, s0
 80103c4:	ee10 0a10 	vmov	r0, s0
 80103c8:	463b      	mov	r3, r7
 80103ca:	4639      	mov	r1, r7
 80103cc:	f7f0 fbd6 	bl	8000b7c <__aeabi_dcmpun>
 80103d0:	b128      	cbz	r0, 80103de <_scanf_float+0x406>
 80103d2:	4808      	ldr	r0, [pc, #32]	; (80103f4 <_scanf_float+0x41c>)
 80103d4:	f000 f886 	bl	80104e4 <nanf>
 80103d8:	ed88 0a00 	vstr	s0, [r8]
 80103dc:	e7cb      	b.n	8010376 <_scanf_float+0x39e>
 80103de:	4630      	mov	r0, r6
 80103e0:	4639      	mov	r1, r7
 80103e2:	f7f0 fc29 	bl	8000c38 <__aeabi_d2f>
 80103e6:	f8c8 0000 	str.w	r0, [r8]
 80103ea:	e7c4      	b.n	8010376 <_scanf_float+0x39e>
 80103ec:	2500      	movs	r5, #0
 80103ee:	e634      	b.n	801005a <_scanf_float+0x82>
 80103f0:	0802a969 	.word	0x0802a969
 80103f4:	0802a91f 	.word	0x0802a91f

080103f8 <_puts_r>:
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	460e      	mov	r6, r1
 80103fc:	4605      	mov	r5, r0
 80103fe:	b118      	cbz	r0, 8010408 <_puts_r+0x10>
 8010400:	6983      	ldr	r3, [r0, #24]
 8010402:	b90b      	cbnz	r3, 8010408 <_puts_r+0x10>
 8010404:	f001 ff9c 	bl	8012340 <__sinit>
 8010408:	69ab      	ldr	r3, [r5, #24]
 801040a:	68ac      	ldr	r4, [r5, #8]
 801040c:	b913      	cbnz	r3, 8010414 <_puts_r+0x1c>
 801040e:	4628      	mov	r0, r5
 8010410:	f001 ff96 	bl	8012340 <__sinit>
 8010414:	4b2c      	ldr	r3, [pc, #176]	; (80104c8 <_puts_r+0xd0>)
 8010416:	429c      	cmp	r4, r3
 8010418:	d120      	bne.n	801045c <_puts_r+0x64>
 801041a:	686c      	ldr	r4, [r5, #4]
 801041c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801041e:	07db      	lsls	r3, r3, #31
 8010420:	d405      	bmi.n	801042e <_puts_r+0x36>
 8010422:	89a3      	ldrh	r3, [r4, #12]
 8010424:	0598      	lsls	r0, r3, #22
 8010426:	d402      	bmi.n	801042e <_puts_r+0x36>
 8010428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801042a:	f002 fb9a 	bl	8012b62 <__retarget_lock_acquire_recursive>
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	0719      	lsls	r1, r3, #28
 8010432:	d51d      	bpl.n	8010470 <_puts_r+0x78>
 8010434:	6923      	ldr	r3, [r4, #16]
 8010436:	b1db      	cbz	r3, 8010470 <_puts_r+0x78>
 8010438:	3e01      	subs	r6, #1
 801043a:	68a3      	ldr	r3, [r4, #8]
 801043c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010440:	3b01      	subs	r3, #1
 8010442:	60a3      	str	r3, [r4, #8]
 8010444:	bb39      	cbnz	r1, 8010496 <_puts_r+0x9e>
 8010446:	2b00      	cmp	r3, #0
 8010448:	da38      	bge.n	80104bc <_puts_r+0xc4>
 801044a:	4622      	mov	r2, r4
 801044c:	210a      	movs	r1, #10
 801044e:	4628      	mov	r0, r5
 8010450:	f000 ff1a 	bl	8011288 <__swbuf_r>
 8010454:	3001      	adds	r0, #1
 8010456:	d011      	beq.n	801047c <_puts_r+0x84>
 8010458:	250a      	movs	r5, #10
 801045a:	e011      	b.n	8010480 <_puts_r+0x88>
 801045c:	4b1b      	ldr	r3, [pc, #108]	; (80104cc <_puts_r+0xd4>)
 801045e:	429c      	cmp	r4, r3
 8010460:	d101      	bne.n	8010466 <_puts_r+0x6e>
 8010462:	68ac      	ldr	r4, [r5, #8]
 8010464:	e7da      	b.n	801041c <_puts_r+0x24>
 8010466:	4b1a      	ldr	r3, [pc, #104]	; (80104d0 <_puts_r+0xd8>)
 8010468:	429c      	cmp	r4, r3
 801046a:	bf08      	it	eq
 801046c:	68ec      	ldreq	r4, [r5, #12]
 801046e:	e7d5      	b.n	801041c <_puts_r+0x24>
 8010470:	4621      	mov	r1, r4
 8010472:	4628      	mov	r0, r5
 8010474:	f000 ff5a 	bl	801132c <__swsetup_r>
 8010478:	2800      	cmp	r0, #0
 801047a:	d0dd      	beq.n	8010438 <_puts_r+0x40>
 801047c:	f04f 35ff 	mov.w	r5, #4294967295
 8010480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010482:	07da      	lsls	r2, r3, #31
 8010484:	d405      	bmi.n	8010492 <_puts_r+0x9a>
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	059b      	lsls	r3, r3, #22
 801048a:	d402      	bmi.n	8010492 <_puts_r+0x9a>
 801048c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801048e:	f002 fb69 	bl	8012b64 <__retarget_lock_release_recursive>
 8010492:	4628      	mov	r0, r5
 8010494:	bd70      	pop	{r4, r5, r6, pc}
 8010496:	2b00      	cmp	r3, #0
 8010498:	da04      	bge.n	80104a4 <_puts_r+0xac>
 801049a:	69a2      	ldr	r2, [r4, #24]
 801049c:	429a      	cmp	r2, r3
 801049e:	dc06      	bgt.n	80104ae <_puts_r+0xb6>
 80104a0:	290a      	cmp	r1, #10
 80104a2:	d004      	beq.n	80104ae <_puts_r+0xb6>
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	1c5a      	adds	r2, r3, #1
 80104a8:	6022      	str	r2, [r4, #0]
 80104aa:	7019      	strb	r1, [r3, #0]
 80104ac:	e7c5      	b.n	801043a <_puts_r+0x42>
 80104ae:	4622      	mov	r2, r4
 80104b0:	4628      	mov	r0, r5
 80104b2:	f000 fee9 	bl	8011288 <__swbuf_r>
 80104b6:	3001      	adds	r0, #1
 80104b8:	d1bf      	bne.n	801043a <_puts_r+0x42>
 80104ba:	e7df      	b.n	801047c <_puts_r+0x84>
 80104bc:	6823      	ldr	r3, [r4, #0]
 80104be:	250a      	movs	r5, #10
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	6022      	str	r2, [r4, #0]
 80104c4:	701d      	strb	r5, [r3, #0]
 80104c6:	e7db      	b.n	8010480 <_puts_r+0x88>
 80104c8:	0802ab94 	.word	0x0802ab94
 80104cc:	0802abb4 	.word	0x0802abb4
 80104d0:	0802ab74 	.word	0x0802ab74

080104d4 <puts>:
 80104d4:	4b02      	ldr	r3, [pc, #8]	; (80104e0 <puts+0xc>)
 80104d6:	4601      	mov	r1, r0
 80104d8:	6818      	ldr	r0, [r3, #0]
 80104da:	f7ff bf8d 	b.w	80103f8 <_puts_r>
 80104de:	bf00      	nop
 80104e0:	200000dc 	.word	0x200000dc

080104e4 <nanf>:
 80104e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80104ec <nanf+0x8>
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	7fc00000 	.word	0x7fc00000

080104f0 <siprintf>:
 80104f0:	b40e      	push	{r1, r2, r3}
 80104f2:	b500      	push	{lr}
 80104f4:	b09c      	sub	sp, #112	; 0x70
 80104f6:	ab1d      	add	r3, sp, #116	; 0x74
 80104f8:	9002      	str	r0, [sp, #8]
 80104fa:	9006      	str	r0, [sp, #24]
 80104fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010500:	4809      	ldr	r0, [pc, #36]	; (8010528 <siprintf+0x38>)
 8010502:	9107      	str	r1, [sp, #28]
 8010504:	9104      	str	r1, [sp, #16]
 8010506:	4909      	ldr	r1, [pc, #36]	; (801052c <siprintf+0x3c>)
 8010508:	f853 2b04 	ldr.w	r2, [r3], #4
 801050c:	9105      	str	r1, [sp, #20]
 801050e:	6800      	ldr	r0, [r0, #0]
 8010510:	9301      	str	r3, [sp, #4]
 8010512:	a902      	add	r1, sp, #8
 8010514:	f003 fa02 	bl	801391c <_svfiprintf_r>
 8010518:	9b02      	ldr	r3, [sp, #8]
 801051a:	2200      	movs	r2, #0
 801051c:	701a      	strb	r2, [r3, #0]
 801051e:	b01c      	add	sp, #112	; 0x70
 8010520:	f85d eb04 	ldr.w	lr, [sp], #4
 8010524:	b003      	add	sp, #12
 8010526:	4770      	bx	lr
 8010528:	200000dc 	.word	0x200000dc
 801052c:	ffff0208 	.word	0xffff0208

08010530 <sulp>:
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	4604      	mov	r4, r0
 8010534:	460d      	mov	r5, r1
 8010536:	ec45 4b10 	vmov	d0, r4, r5
 801053a:	4616      	mov	r6, r2
 801053c:	f002 ff1e 	bl	801337c <__ulp>
 8010540:	ec51 0b10 	vmov	r0, r1, d0
 8010544:	b17e      	cbz	r6, 8010566 <sulp+0x36>
 8010546:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801054a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801054e:	2b00      	cmp	r3, #0
 8010550:	dd09      	ble.n	8010566 <sulp+0x36>
 8010552:	051b      	lsls	r3, r3, #20
 8010554:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010558:	2400      	movs	r4, #0
 801055a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801055e:	4622      	mov	r2, r4
 8010560:	462b      	mov	r3, r5
 8010562:	f7f0 f871 	bl	8000648 <__aeabi_dmul>
 8010566:	bd70      	pop	{r4, r5, r6, pc}

08010568 <_strtod_l>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	ed2d 8b02 	vpush	{d8}
 8010570:	b09d      	sub	sp, #116	; 0x74
 8010572:	461f      	mov	r7, r3
 8010574:	2300      	movs	r3, #0
 8010576:	9318      	str	r3, [sp, #96]	; 0x60
 8010578:	4ba2      	ldr	r3, [pc, #648]	; (8010804 <_strtod_l+0x29c>)
 801057a:	9213      	str	r2, [sp, #76]	; 0x4c
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	9305      	str	r3, [sp, #20]
 8010580:	4604      	mov	r4, r0
 8010582:	4618      	mov	r0, r3
 8010584:	4688      	mov	r8, r1
 8010586:	f7ef fe4b 	bl	8000220 <strlen>
 801058a:	f04f 0a00 	mov.w	sl, #0
 801058e:	4605      	mov	r5, r0
 8010590:	f04f 0b00 	mov.w	fp, #0
 8010594:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801059a:	781a      	ldrb	r2, [r3, #0]
 801059c:	2a2b      	cmp	r2, #43	; 0x2b
 801059e:	d04e      	beq.n	801063e <_strtod_l+0xd6>
 80105a0:	d83b      	bhi.n	801061a <_strtod_l+0xb2>
 80105a2:	2a0d      	cmp	r2, #13
 80105a4:	d834      	bhi.n	8010610 <_strtod_l+0xa8>
 80105a6:	2a08      	cmp	r2, #8
 80105a8:	d834      	bhi.n	8010614 <_strtod_l+0xac>
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	d03e      	beq.n	801062c <_strtod_l+0xc4>
 80105ae:	2300      	movs	r3, #0
 80105b0:	930a      	str	r3, [sp, #40]	; 0x28
 80105b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80105b4:	7833      	ldrb	r3, [r6, #0]
 80105b6:	2b30      	cmp	r3, #48	; 0x30
 80105b8:	f040 80b0 	bne.w	801071c <_strtod_l+0x1b4>
 80105bc:	7873      	ldrb	r3, [r6, #1]
 80105be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80105c2:	2b58      	cmp	r3, #88	; 0x58
 80105c4:	d168      	bne.n	8010698 <_strtod_l+0x130>
 80105c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	ab18      	add	r3, sp, #96	; 0x60
 80105cc:	9702      	str	r7, [sp, #8]
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	4a8d      	ldr	r2, [pc, #564]	; (8010808 <_strtod_l+0x2a0>)
 80105d2:	ab19      	add	r3, sp, #100	; 0x64
 80105d4:	a917      	add	r1, sp, #92	; 0x5c
 80105d6:	4620      	mov	r0, r4
 80105d8:	f001 ffb6 	bl	8012548 <__gethex>
 80105dc:	f010 0707 	ands.w	r7, r0, #7
 80105e0:	4605      	mov	r5, r0
 80105e2:	d005      	beq.n	80105f0 <_strtod_l+0x88>
 80105e4:	2f06      	cmp	r7, #6
 80105e6:	d12c      	bne.n	8010642 <_strtod_l+0xda>
 80105e8:	3601      	adds	r6, #1
 80105ea:	2300      	movs	r3, #0
 80105ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80105ee:	930a      	str	r3, [sp, #40]	; 0x28
 80105f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f040 8590 	bne.w	8011118 <_strtod_l+0xbb0>
 80105f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105fa:	b1eb      	cbz	r3, 8010638 <_strtod_l+0xd0>
 80105fc:	4652      	mov	r2, sl
 80105fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010602:	ec43 2b10 	vmov	d0, r2, r3
 8010606:	b01d      	add	sp, #116	; 0x74
 8010608:	ecbd 8b02 	vpop	{d8}
 801060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010610:	2a20      	cmp	r2, #32
 8010612:	d1cc      	bne.n	80105ae <_strtod_l+0x46>
 8010614:	3301      	adds	r3, #1
 8010616:	9317      	str	r3, [sp, #92]	; 0x5c
 8010618:	e7be      	b.n	8010598 <_strtod_l+0x30>
 801061a:	2a2d      	cmp	r2, #45	; 0x2d
 801061c:	d1c7      	bne.n	80105ae <_strtod_l+0x46>
 801061e:	2201      	movs	r2, #1
 8010620:	920a      	str	r2, [sp, #40]	; 0x28
 8010622:	1c5a      	adds	r2, r3, #1
 8010624:	9217      	str	r2, [sp, #92]	; 0x5c
 8010626:	785b      	ldrb	r3, [r3, #1]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1c2      	bne.n	80105b2 <_strtod_l+0x4a>
 801062c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801062e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010632:	2b00      	cmp	r3, #0
 8010634:	f040 856e 	bne.w	8011114 <_strtod_l+0xbac>
 8010638:	4652      	mov	r2, sl
 801063a:	465b      	mov	r3, fp
 801063c:	e7e1      	b.n	8010602 <_strtod_l+0x9a>
 801063e:	2200      	movs	r2, #0
 8010640:	e7ee      	b.n	8010620 <_strtod_l+0xb8>
 8010642:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010644:	b13a      	cbz	r2, 8010656 <_strtod_l+0xee>
 8010646:	2135      	movs	r1, #53	; 0x35
 8010648:	a81a      	add	r0, sp, #104	; 0x68
 801064a:	f002 ffa2 	bl	8013592 <__copybits>
 801064e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010650:	4620      	mov	r0, r4
 8010652:	f002 fb61 	bl	8012d18 <_Bfree>
 8010656:	3f01      	subs	r7, #1
 8010658:	2f04      	cmp	r7, #4
 801065a:	d806      	bhi.n	801066a <_strtod_l+0x102>
 801065c:	e8df f007 	tbb	[pc, r7]
 8010660:	1714030a 	.word	0x1714030a
 8010664:	0a          	.byte	0x0a
 8010665:	00          	.byte	0x00
 8010666:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801066a:	0728      	lsls	r0, r5, #28
 801066c:	d5c0      	bpl.n	80105f0 <_strtod_l+0x88>
 801066e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010672:	e7bd      	b.n	80105f0 <_strtod_l+0x88>
 8010674:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010678:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801067a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801067e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010686:	e7f0      	b.n	801066a <_strtod_l+0x102>
 8010688:	f8df b180 	ldr.w	fp, [pc, #384]	; 801080c <_strtod_l+0x2a4>
 801068c:	e7ed      	b.n	801066a <_strtod_l+0x102>
 801068e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010692:	f04f 3aff 	mov.w	sl, #4294967295
 8010696:	e7e8      	b.n	801066a <_strtod_l+0x102>
 8010698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801069a:	1c5a      	adds	r2, r3, #1
 801069c:	9217      	str	r2, [sp, #92]	; 0x5c
 801069e:	785b      	ldrb	r3, [r3, #1]
 80106a0:	2b30      	cmp	r3, #48	; 0x30
 80106a2:	d0f9      	beq.n	8010698 <_strtod_l+0x130>
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d0a3      	beq.n	80105f0 <_strtod_l+0x88>
 80106a8:	2301      	movs	r3, #1
 80106aa:	f04f 0900 	mov.w	r9, #0
 80106ae:	9304      	str	r3, [sp, #16]
 80106b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106b2:	9308      	str	r3, [sp, #32]
 80106b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80106b8:	464f      	mov	r7, r9
 80106ba:	220a      	movs	r2, #10
 80106bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80106be:	7806      	ldrb	r6, [r0, #0]
 80106c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80106c4:	b2d9      	uxtb	r1, r3
 80106c6:	2909      	cmp	r1, #9
 80106c8:	d92a      	bls.n	8010720 <_strtod_l+0x1b8>
 80106ca:	9905      	ldr	r1, [sp, #20]
 80106cc:	462a      	mov	r2, r5
 80106ce:	f003 fac6 	bl	8013c5e <strncmp>
 80106d2:	b398      	cbz	r0, 801073c <_strtod_l+0x1d4>
 80106d4:	2000      	movs	r0, #0
 80106d6:	4632      	mov	r2, r6
 80106d8:	463d      	mov	r5, r7
 80106da:	9005      	str	r0, [sp, #20]
 80106dc:	4603      	mov	r3, r0
 80106de:	2a65      	cmp	r2, #101	; 0x65
 80106e0:	d001      	beq.n	80106e6 <_strtod_l+0x17e>
 80106e2:	2a45      	cmp	r2, #69	; 0x45
 80106e4:	d118      	bne.n	8010718 <_strtod_l+0x1b0>
 80106e6:	b91d      	cbnz	r5, 80106f0 <_strtod_l+0x188>
 80106e8:	9a04      	ldr	r2, [sp, #16]
 80106ea:	4302      	orrs	r2, r0
 80106ec:	d09e      	beq.n	801062c <_strtod_l+0xc4>
 80106ee:	2500      	movs	r5, #0
 80106f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80106f4:	f108 0201 	add.w	r2, r8, #1
 80106f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80106fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80106fe:	2a2b      	cmp	r2, #43	; 0x2b
 8010700:	d075      	beq.n	80107ee <_strtod_l+0x286>
 8010702:	2a2d      	cmp	r2, #45	; 0x2d
 8010704:	d07b      	beq.n	80107fe <_strtod_l+0x296>
 8010706:	f04f 0c00 	mov.w	ip, #0
 801070a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801070e:	2909      	cmp	r1, #9
 8010710:	f240 8082 	bls.w	8010818 <_strtod_l+0x2b0>
 8010714:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010718:	2600      	movs	r6, #0
 801071a:	e09d      	b.n	8010858 <_strtod_l+0x2f0>
 801071c:	2300      	movs	r3, #0
 801071e:	e7c4      	b.n	80106aa <_strtod_l+0x142>
 8010720:	2f08      	cmp	r7, #8
 8010722:	bfd8      	it	le
 8010724:	9907      	ldrle	r1, [sp, #28]
 8010726:	f100 0001 	add.w	r0, r0, #1
 801072a:	bfda      	itte	le
 801072c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010730:	9307      	strle	r3, [sp, #28]
 8010732:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010736:	3701      	adds	r7, #1
 8010738:	9017      	str	r0, [sp, #92]	; 0x5c
 801073a:	e7bf      	b.n	80106bc <_strtod_l+0x154>
 801073c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801073e:	195a      	adds	r2, r3, r5
 8010740:	9217      	str	r2, [sp, #92]	; 0x5c
 8010742:	5d5a      	ldrb	r2, [r3, r5]
 8010744:	2f00      	cmp	r7, #0
 8010746:	d037      	beq.n	80107b8 <_strtod_l+0x250>
 8010748:	9005      	str	r0, [sp, #20]
 801074a:	463d      	mov	r5, r7
 801074c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010750:	2b09      	cmp	r3, #9
 8010752:	d912      	bls.n	801077a <_strtod_l+0x212>
 8010754:	2301      	movs	r3, #1
 8010756:	e7c2      	b.n	80106de <_strtod_l+0x176>
 8010758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801075a:	1c5a      	adds	r2, r3, #1
 801075c:	9217      	str	r2, [sp, #92]	; 0x5c
 801075e:	785a      	ldrb	r2, [r3, #1]
 8010760:	3001      	adds	r0, #1
 8010762:	2a30      	cmp	r2, #48	; 0x30
 8010764:	d0f8      	beq.n	8010758 <_strtod_l+0x1f0>
 8010766:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801076a:	2b08      	cmp	r3, #8
 801076c:	f200 84d9 	bhi.w	8011122 <_strtod_l+0xbba>
 8010770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010772:	9005      	str	r0, [sp, #20]
 8010774:	2000      	movs	r0, #0
 8010776:	9308      	str	r3, [sp, #32]
 8010778:	4605      	mov	r5, r0
 801077a:	3a30      	subs	r2, #48	; 0x30
 801077c:	f100 0301 	add.w	r3, r0, #1
 8010780:	d014      	beq.n	80107ac <_strtod_l+0x244>
 8010782:	9905      	ldr	r1, [sp, #20]
 8010784:	4419      	add	r1, r3
 8010786:	9105      	str	r1, [sp, #20]
 8010788:	462b      	mov	r3, r5
 801078a:	eb00 0e05 	add.w	lr, r0, r5
 801078e:	210a      	movs	r1, #10
 8010790:	4573      	cmp	r3, lr
 8010792:	d113      	bne.n	80107bc <_strtod_l+0x254>
 8010794:	182b      	adds	r3, r5, r0
 8010796:	2b08      	cmp	r3, #8
 8010798:	f105 0501 	add.w	r5, r5, #1
 801079c:	4405      	add	r5, r0
 801079e:	dc1c      	bgt.n	80107da <_strtod_l+0x272>
 80107a0:	9907      	ldr	r1, [sp, #28]
 80107a2:	230a      	movs	r3, #10
 80107a4:	fb03 2301 	mla	r3, r3, r1, r2
 80107a8:	9307      	str	r3, [sp, #28]
 80107aa:	2300      	movs	r3, #0
 80107ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107ae:	1c51      	adds	r1, r2, #1
 80107b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80107b2:	7852      	ldrb	r2, [r2, #1]
 80107b4:	4618      	mov	r0, r3
 80107b6:	e7c9      	b.n	801074c <_strtod_l+0x1e4>
 80107b8:	4638      	mov	r0, r7
 80107ba:	e7d2      	b.n	8010762 <_strtod_l+0x1fa>
 80107bc:	2b08      	cmp	r3, #8
 80107be:	dc04      	bgt.n	80107ca <_strtod_l+0x262>
 80107c0:	9e07      	ldr	r6, [sp, #28]
 80107c2:	434e      	muls	r6, r1
 80107c4:	9607      	str	r6, [sp, #28]
 80107c6:	3301      	adds	r3, #1
 80107c8:	e7e2      	b.n	8010790 <_strtod_l+0x228>
 80107ca:	f103 0c01 	add.w	ip, r3, #1
 80107ce:	f1bc 0f10 	cmp.w	ip, #16
 80107d2:	bfd8      	it	le
 80107d4:	fb01 f909 	mulle.w	r9, r1, r9
 80107d8:	e7f5      	b.n	80107c6 <_strtod_l+0x25e>
 80107da:	2d10      	cmp	r5, #16
 80107dc:	bfdc      	itt	le
 80107de:	230a      	movle	r3, #10
 80107e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80107e4:	e7e1      	b.n	80107aa <_strtod_l+0x242>
 80107e6:	2300      	movs	r3, #0
 80107e8:	9305      	str	r3, [sp, #20]
 80107ea:	2301      	movs	r3, #1
 80107ec:	e77c      	b.n	80106e8 <_strtod_l+0x180>
 80107ee:	f04f 0c00 	mov.w	ip, #0
 80107f2:	f108 0202 	add.w	r2, r8, #2
 80107f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80107f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80107fc:	e785      	b.n	801070a <_strtod_l+0x1a2>
 80107fe:	f04f 0c01 	mov.w	ip, #1
 8010802:	e7f6      	b.n	80107f2 <_strtod_l+0x28a>
 8010804:	0802ac5c 	.word	0x0802ac5c
 8010808:	0802a970 	.word	0x0802a970
 801080c:	7ff00000 	.word	0x7ff00000
 8010810:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010812:	1c51      	adds	r1, r2, #1
 8010814:	9117      	str	r1, [sp, #92]	; 0x5c
 8010816:	7852      	ldrb	r2, [r2, #1]
 8010818:	2a30      	cmp	r2, #48	; 0x30
 801081a:	d0f9      	beq.n	8010810 <_strtod_l+0x2a8>
 801081c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010820:	2908      	cmp	r1, #8
 8010822:	f63f af79 	bhi.w	8010718 <_strtod_l+0x1b0>
 8010826:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801082a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801082c:	9206      	str	r2, [sp, #24]
 801082e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010830:	1c51      	adds	r1, r2, #1
 8010832:	9117      	str	r1, [sp, #92]	; 0x5c
 8010834:	7852      	ldrb	r2, [r2, #1]
 8010836:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801083a:	2e09      	cmp	r6, #9
 801083c:	d937      	bls.n	80108ae <_strtod_l+0x346>
 801083e:	9e06      	ldr	r6, [sp, #24]
 8010840:	1b89      	subs	r1, r1, r6
 8010842:	2908      	cmp	r1, #8
 8010844:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010848:	dc02      	bgt.n	8010850 <_strtod_l+0x2e8>
 801084a:	4576      	cmp	r6, lr
 801084c:	bfa8      	it	ge
 801084e:	4676      	movge	r6, lr
 8010850:	f1bc 0f00 	cmp.w	ip, #0
 8010854:	d000      	beq.n	8010858 <_strtod_l+0x2f0>
 8010856:	4276      	negs	r6, r6
 8010858:	2d00      	cmp	r5, #0
 801085a:	d14d      	bne.n	80108f8 <_strtod_l+0x390>
 801085c:	9904      	ldr	r1, [sp, #16]
 801085e:	4301      	orrs	r1, r0
 8010860:	f47f aec6 	bne.w	80105f0 <_strtod_l+0x88>
 8010864:	2b00      	cmp	r3, #0
 8010866:	f47f aee1 	bne.w	801062c <_strtod_l+0xc4>
 801086a:	2a69      	cmp	r2, #105	; 0x69
 801086c:	d027      	beq.n	80108be <_strtod_l+0x356>
 801086e:	dc24      	bgt.n	80108ba <_strtod_l+0x352>
 8010870:	2a49      	cmp	r2, #73	; 0x49
 8010872:	d024      	beq.n	80108be <_strtod_l+0x356>
 8010874:	2a4e      	cmp	r2, #78	; 0x4e
 8010876:	f47f aed9 	bne.w	801062c <_strtod_l+0xc4>
 801087a:	499f      	ldr	r1, [pc, #636]	; (8010af8 <_strtod_l+0x590>)
 801087c:	a817      	add	r0, sp, #92	; 0x5c
 801087e:	f002 f8bb 	bl	80129f8 <__match>
 8010882:	2800      	cmp	r0, #0
 8010884:	f43f aed2 	beq.w	801062c <_strtod_l+0xc4>
 8010888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b28      	cmp	r3, #40	; 0x28
 801088e:	d12d      	bne.n	80108ec <_strtod_l+0x384>
 8010890:	499a      	ldr	r1, [pc, #616]	; (8010afc <_strtod_l+0x594>)
 8010892:	aa1a      	add	r2, sp, #104	; 0x68
 8010894:	a817      	add	r0, sp, #92	; 0x5c
 8010896:	f002 f8c3 	bl	8012a20 <__hexnan>
 801089a:	2805      	cmp	r0, #5
 801089c:	d126      	bne.n	80108ec <_strtod_l+0x384>
 801089e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80108a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80108a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80108a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80108ac:	e6a0      	b.n	80105f0 <_strtod_l+0x88>
 80108ae:	210a      	movs	r1, #10
 80108b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80108b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80108b8:	e7b9      	b.n	801082e <_strtod_l+0x2c6>
 80108ba:	2a6e      	cmp	r2, #110	; 0x6e
 80108bc:	e7db      	b.n	8010876 <_strtod_l+0x30e>
 80108be:	4990      	ldr	r1, [pc, #576]	; (8010b00 <_strtod_l+0x598>)
 80108c0:	a817      	add	r0, sp, #92	; 0x5c
 80108c2:	f002 f899 	bl	80129f8 <__match>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f43f aeb0 	beq.w	801062c <_strtod_l+0xc4>
 80108cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108ce:	498d      	ldr	r1, [pc, #564]	; (8010b04 <_strtod_l+0x59c>)
 80108d0:	3b01      	subs	r3, #1
 80108d2:	a817      	add	r0, sp, #92	; 0x5c
 80108d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80108d6:	f002 f88f 	bl	80129f8 <__match>
 80108da:	b910      	cbnz	r0, 80108e2 <_strtod_l+0x37a>
 80108dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108de:	3301      	adds	r3, #1
 80108e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80108e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010b14 <_strtod_l+0x5ac>
 80108e6:	f04f 0a00 	mov.w	sl, #0
 80108ea:	e681      	b.n	80105f0 <_strtod_l+0x88>
 80108ec:	4886      	ldr	r0, [pc, #536]	; (8010b08 <_strtod_l+0x5a0>)
 80108ee:	f003 f917 	bl	8013b20 <nan>
 80108f2:	ec5b ab10 	vmov	sl, fp, d0
 80108f6:	e67b      	b.n	80105f0 <_strtod_l+0x88>
 80108f8:	9b05      	ldr	r3, [sp, #20]
 80108fa:	9807      	ldr	r0, [sp, #28]
 80108fc:	1af3      	subs	r3, r6, r3
 80108fe:	2f00      	cmp	r7, #0
 8010900:	bf08      	it	eq
 8010902:	462f      	moveq	r7, r5
 8010904:	2d10      	cmp	r5, #16
 8010906:	9306      	str	r3, [sp, #24]
 8010908:	46a8      	mov	r8, r5
 801090a:	bfa8      	it	ge
 801090c:	f04f 0810 	movge.w	r8, #16
 8010910:	f7ef fe20 	bl	8000554 <__aeabi_ui2d>
 8010914:	2d09      	cmp	r5, #9
 8010916:	4682      	mov	sl, r0
 8010918:	468b      	mov	fp, r1
 801091a:	dd13      	ble.n	8010944 <_strtod_l+0x3dc>
 801091c:	4b7b      	ldr	r3, [pc, #492]	; (8010b0c <_strtod_l+0x5a4>)
 801091e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010922:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010926:	f7ef fe8f 	bl	8000648 <__aeabi_dmul>
 801092a:	4682      	mov	sl, r0
 801092c:	4648      	mov	r0, r9
 801092e:	468b      	mov	fp, r1
 8010930:	f7ef fe10 	bl	8000554 <__aeabi_ui2d>
 8010934:	4602      	mov	r2, r0
 8010936:	460b      	mov	r3, r1
 8010938:	4650      	mov	r0, sl
 801093a:	4659      	mov	r1, fp
 801093c:	f7ef fcce 	bl	80002dc <__adddf3>
 8010940:	4682      	mov	sl, r0
 8010942:	468b      	mov	fp, r1
 8010944:	2d0f      	cmp	r5, #15
 8010946:	dc38      	bgt.n	80109ba <_strtod_l+0x452>
 8010948:	9b06      	ldr	r3, [sp, #24]
 801094a:	2b00      	cmp	r3, #0
 801094c:	f43f ae50 	beq.w	80105f0 <_strtod_l+0x88>
 8010950:	dd24      	ble.n	801099c <_strtod_l+0x434>
 8010952:	2b16      	cmp	r3, #22
 8010954:	dc0b      	bgt.n	801096e <_strtod_l+0x406>
 8010956:	496d      	ldr	r1, [pc, #436]	; (8010b0c <_strtod_l+0x5a4>)
 8010958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801095c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010960:	4652      	mov	r2, sl
 8010962:	465b      	mov	r3, fp
 8010964:	f7ef fe70 	bl	8000648 <__aeabi_dmul>
 8010968:	4682      	mov	sl, r0
 801096a:	468b      	mov	fp, r1
 801096c:	e640      	b.n	80105f0 <_strtod_l+0x88>
 801096e:	9a06      	ldr	r2, [sp, #24]
 8010970:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010974:	4293      	cmp	r3, r2
 8010976:	db20      	blt.n	80109ba <_strtod_l+0x452>
 8010978:	4c64      	ldr	r4, [pc, #400]	; (8010b0c <_strtod_l+0x5a4>)
 801097a:	f1c5 050f 	rsb	r5, r5, #15
 801097e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010982:	4652      	mov	r2, sl
 8010984:	465b      	mov	r3, fp
 8010986:	e9d1 0100 	ldrd	r0, r1, [r1]
 801098a:	f7ef fe5d 	bl	8000648 <__aeabi_dmul>
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	1b5d      	subs	r5, r3, r5
 8010992:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010996:	e9d4 2300 	ldrd	r2, r3, [r4]
 801099a:	e7e3      	b.n	8010964 <_strtod_l+0x3fc>
 801099c:	9b06      	ldr	r3, [sp, #24]
 801099e:	3316      	adds	r3, #22
 80109a0:	db0b      	blt.n	80109ba <_strtod_l+0x452>
 80109a2:	9b05      	ldr	r3, [sp, #20]
 80109a4:	1b9e      	subs	r6, r3, r6
 80109a6:	4b59      	ldr	r3, [pc, #356]	; (8010b0c <_strtod_l+0x5a4>)
 80109a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80109ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80109b0:	4650      	mov	r0, sl
 80109b2:	4659      	mov	r1, fp
 80109b4:	f7ef ff72 	bl	800089c <__aeabi_ddiv>
 80109b8:	e7d6      	b.n	8010968 <_strtod_l+0x400>
 80109ba:	9b06      	ldr	r3, [sp, #24]
 80109bc:	eba5 0808 	sub.w	r8, r5, r8
 80109c0:	4498      	add	r8, r3
 80109c2:	f1b8 0f00 	cmp.w	r8, #0
 80109c6:	dd74      	ble.n	8010ab2 <_strtod_l+0x54a>
 80109c8:	f018 030f 	ands.w	r3, r8, #15
 80109cc:	d00a      	beq.n	80109e4 <_strtod_l+0x47c>
 80109ce:	494f      	ldr	r1, [pc, #316]	; (8010b0c <_strtod_l+0x5a4>)
 80109d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80109d4:	4652      	mov	r2, sl
 80109d6:	465b      	mov	r3, fp
 80109d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109dc:	f7ef fe34 	bl	8000648 <__aeabi_dmul>
 80109e0:	4682      	mov	sl, r0
 80109e2:	468b      	mov	fp, r1
 80109e4:	f038 080f 	bics.w	r8, r8, #15
 80109e8:	d04f      	beq.n	8010a8a <_strtod_l+0x522>
 80109ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80109ee:	dd22      	ble.n	8010a36 <_strtod_l+0x4ce>
 80109f0:	2500      	movs	r5, #0
 80109f2:	462e      	mov	r6, r5
 80109f4:	9507      	str	r5, [sp, #28]
 80109f6:	9505      	str	r5, [sp, #20]
 80109f8:	2322      	movs	r3, #34	; 0x22
 80109fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010b14 <_strtod_l+0x5ac>
 80109fe:	6023      	str	r3, [r4, #0]
 8010a00:	f04f 0a00 	mov.w	sl, #0
 8010a04:	9b07      	ldr	r3, [sp, #28]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f43f adf2 	beq.w	80105f0 <_strtod_l+0x88>
 8010a0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f002 f982 	bl	8012d18 <_Bfree>
 8010a14:	9905      	ldr	r1, [sp, #20]
 8010a16:	4620      	mov	r0, r4
 8010a18:	f002 f97e 	bl	8012d18 <_Bfree>
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f002 f97a 	bl	8012d18 <_Bfree>
 8010a24:	9907      	ldr	r1, [sp, #28]
 8010a26:	4620      	mov	r0, r4
 8010a28:	f002 f976 	bl	8012d18 <_Bfree>
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f002 f972 	bl	8012d18 <_Bfree>
 8010a34:	e5dc      	b.n	80105f0 <_strtod_l+0x88>
 8010a36:	4b36      	ldr	r3, [pc, #216]	; (8010b10 <_strtod_l+0x5a8>)
 8010a38:	9304      	str	r3, [sp, #16]
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010a40:	4650      	mov	r0, sl
 8010a42:	4659      	mov	r1, fp
 8010a44:	4699      	mov	r9, r3
 8010a46:	f1b8 0f01 	cmp.w	r8, #1
 8010a4a:	dc21      	bgt.n	8010a90 <_strtod_l+0x528>
 8010a4c:	b10b      	cbz	r3, 8010a52 <_strtod_l+0x4ea>
 8010a4e:	4682      	mov	sl, r0
 8010a50:	468b      	mov	fp, r1
 8010a52:	4b2f      	ldr	r3, [pc, #188]	; (8010b10 <_strtod_l+0x5a8>)
 8010a54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010a58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010a5c:	4652      	mov	r2, sl
 8010a5e:	465b      	mov	r3, fp
 8010a60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010a64:	f7ef fdf0 	bl	8000648 <__aeabi_dmul>
 8010a68:	4b2a      	ldr	r3, [pc, #168]	; (8010b14 <_strtod_l+0x5ac>)
 8010a6a:	460a      	mov	r2, r1
 8010a6c:	400b      	ands	r3, r1
 8010a6e:	492a      	ldr	r1, [pc, #168]	; (8010b18 <_strtod_l+0x5b0>)
 8010a70:	428b      	cmp	r3, r1
 8010a72:	4682      	mov	sl, r0
 8010a74:	d8bc      	bhi.n	80109f0 <_strtod_l+0x488>
 8010a76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010a7a:	428b      	cmp	r3, r1
 8010a7c:	bf86      	itte	hi
 8010a7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010b1c <_strtod_l+0x5b4>
 8010a82:	f04f 3aff 	movhi.w	sl, #4294967295
 8010a86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	9304      	str	r3, [sp, #16]
 8010a8e:	e084      	b.n	8010b9a <_strtod_l+0x632>
 8010a90:	f018 0f01 	tst.w	r8, #1
 8010a94:	d005      	beq.n	8010aa2 <_strtod_l+0x53a>
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9c:	f7ef fdd4 	bl	8000648 <__aeabi_dmul>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	9a04      	ldr	r2, [sp, #16]
 8010aa4:	3208      	adds	r2, #8
 8010aa6:	f109 0901 	add.w	r9, r9, #1
 8010aaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010aae:	9204      	str	r2, [sp, #16]
 8010ab0:	e7c9      	b.n	8010a46 <_strtod_l+0x4de>
 8010ab2:	d0ea      	beq.n	8010a8a <_strtod_l+0x522>
 8010ab4:	f1c8 0800 	rsb	r8, r8, #0
 8010ab8:	f018 020f 	ands.w	r2, r8, #15
 8010abc:	d00a      	beq.n	8010ad4 <_strtod_l+0x56c>
 8010abe:	4b13      	ldr	r3, [pc, #76]	; (8010b0c <_strtod_l+0x5a4>)
 8010ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ac4:	4650      	mov	r0, sl
 8010ac6:	4659      	mov	r1, fp
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	f7ef fee6 	bl	800089c <__aeabi_ddiv>
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	468b      	mov	fp, r1
 8010ad4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010ad8:	d0d7      	beq.n	8010a8a <_strtod_l+0x522>
 8010ada:	f1b8 0f1f 	cmp.w	r8, #31
 8010ade:	dd1f      	ble.n	8010b20 <_strtod_l+0x5b8>
 8010ae0:	2500      	movs	r5, #0
 8010ae2:	462e      	mov	r6, r5
 8010ae4:	9507      	str	r5, [sp, #28]
 8010ae6:	9505      	str	r5, [sp, #20]
 8010ae8:	2322      	movs	r3, #34	; 0x22
 8010aea:	f04f 0a00 	mov.w	sl, #0
 8010aee:	f04f 0b00 	mov.w	fp, #0
 8010af2:	6023      	str	r3, [r4, #0]
 8010af4:	e786      	b.n	8010a04 <_strtod_l+0x49c>
 8010af6:	bf00      	nop
 8010af8:	0802a942 	.word	0x0802a942
 8010afc:	0802a984 	.word	0x0802a984
 8010b00:	0802a93a 	.word	0x0802a93a
 8010b04:	0802aac4 	.word	0x0802aac4
 8010b08:	0802a91f 	.word	0x0802a91f
 8010b0c:	0802ad18 	.word	0x0802ad18
 8010b10:	0802acf0 	.word	0x0802acf0
 8010b14:	7ff00000 	.word	0x7ff00000
 8010b18:	7ca00000 	.word	0x7ca00000
 8010b1c:	7fefffff 	.word	0x7fefffff
 8010b20:	f018 0310 	ands.w	r3, r8, #16
 8010b24:	bf18      	it	ne
 8010b26:	236a      	movne	r3, #106	; 0x6a
 8010b28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010ed8 <_strtod_l+0x970>
 8010b2c:	9304      	str	r3, [sp, #16]
 8010b2e:	4650      	mov	r0, sl
 8010b30:	4659      	mov	r1, fp
 8010b32:	2300      	movs	r3, #0
 8010b34:	f018 0f01 	tst.w	r8, #1
 8010b38:	d004      	beq.n	8010b44 <_strtod_l+0x5dc>
 8010b3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010b3e:	f7ef fd83 	bl	8000648 <__aeabi_dmul>
 8010b42:	2301      	movs	r3, #1
 8010b44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010b48:	f109 0908 	add.w	r9, r9, #8
 8010b4c:	d1f2      	bne.n	8010b34 <_strtod_l+0x5cc>
 8010b4e:	b10b      	cbz	r3, 8010b54 <_strtod_l+0x5ec>
 8010b50:	4682      	mov	sl, r0
 8010b52:	468b      	mov	fp, r1
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	b1c3      	cbz	r3, 8010b8a <_strtod_l+0x622>
 8010b58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010b5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	4659      	mov	r1, fp
 8010b64:	dd11      	ble.n	8010b8a <_strtod_l+0x622>
 8010b66:	2b1f      	cmp	r3, #31
 8010b68:	f340 8124 	ble.w	8010db4 <_strtod_l+0x84c>
 8010b6c:	2b34      	cmp	r3, #52	; 0x34
 8010b6e:	bfde      	ittt	le
 8010b70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010b74:	f04f 33ff 	movle.w	r3, #4294967295
 8010b78:	fa03 f202 	lslle.w	r2, r3, r2
 8010b7c:	f04f 0a00 	mov.w	sl, #0
 8010b80:	bfcc      	ite	gt
 8010b82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010b86:	ea02 0b01 	andle.w	fp, r2, r1
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	4650      	mov	r0, sl
 8010b90:	4659      	mov	r1, fp
 8010b92:	f7ef ffc1 	bl	8000b18 <__aeabi_dcmpeq>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d1a2      	bne.n	8010ae0 <_strtod_l+0x578>
 8010b9a:	9b07      	ldr	r3, [sp, #28]
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	9908      	ldr	r1, [sp, #32]
 8010ba0:	462b      	mov	r3, r5
 8010ba2:	463a      	mov	r2, r7
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f002 f91f 	bl	8012de8 <__s2b>
 8010baa:	9007      	str	r0, [sp, #28]
 8010bac:	2800      	cmp	r0, #0
 8010bae:	f43f af1f 	beq.w	80109f0 <_strtod_l+0x488>
 8010bb2:	9b05      	ldr	r3, [sp, #20]
 8010bb4:	1b9e      	subs	r6, r3, r6
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	bfb4      	ite	lt
 8010bbc:	4633      	movlt	r3, r6
 8010bbe:	2300      	movge	r3, #0
 8010bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8010bc2:	9b06      	ldr	r3, [sp, #24]
 8010bc4:	2500      	movs	r5, #0
 8010bc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010bca:	9312      	str	r3, [sp, #72]	; 0x48
 8010bcc:	462e      	mov	r6, r5
 8010bce:	9b07      	ldr	r3, [sp, #28]
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	6859      	ldr	r1, [r3, #4]
 8010bd4:	f002 f860 	bl	8012c98 <_Balloc>
 8010bd8:	9005      	str	r0, [sp, #20]
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	f43f af0c 	beq.w	80109f8 <_strtod_l+0x490>
 8010be0:	9b07      	ldr	r3, [sp, #28]
 8010be2:	691a      	ldr	r2, [r3, #16]
 8010be4:	3202      	adds	r2, #2
 8010be6:	f103 010c 	add.w	r1, r3, #12
 8010bea:	0092      	lsls	r2, r2, #2
 8010bec:	300c      	adds	r0, #12
 8010bee:	f7fe fc19 	bl	800f424 <memcpy>
 8010bf2:	ec4b ab10 	vmov	d0, sl, fp
 8010bf6:	aa1a      	add	r2, sp, #104	; 0x68
 8010bf8:	a919      	add	r1, sp, #100	; 0x64
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f002 fc3a 	bl	8013474 <__d2b>
 8010c00:	ec4b ab18 	vmov	d8, sl, fp
 8010c04:	9018      	str	r0, [sp, #96]	; 0x60
 8010c06:	2800      	cmp	r0, #0
 8010c08:	f43f aef6 	beq.w	80109f8 <_strtod_l+0x490>
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f002 f984 	bl	8012f1c <__i2b>
 8010c14:	4606      	mov	r6, r0
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f43f aeee 	beq.w	80109f8 <_strtod_l+0x490>
 8010c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c1e:	9904      	ldr	r1, [sp, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	bfab      	itete	ge
 8010c24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010c26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010c28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010c2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010c2e:	bfac      	ite	ge
 8010c30:	eb03 0902 	addge.w	r9, r3, r2
 8010c34:	1ad7      	sublt	r7, r2, r3
 8010c36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010c38:	eba3 0801 	sub.w	r8, r3, r1
 8010c3c:	4490      	add	r8, r2
 8010c3e:	4ba1      	ldr	r3, [pc, #644]	; (8010ec4 <_strtod_l+0x95c>)
 8010c40:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c44:	4598      	cmp	r8, r3
 8010c46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010c4a:	f280 80c7 	bge.w	8010ddc <_strtod_l+0x874>
 8010c4e:	eba3 0308 	sub.w	r3, r3, r8
 8010c52:	2b1f      	cmp	r3, #31
 8010c54:	eba2 0203 	sub.w	r2, r2, r3
 8010c58:	f04f 0101 	mov.w	r1, #1
 8010c5c:	f300 80b1 	bgt.w	8010dc2 <_strtod_l+0x85a>
 8010c60:	fa01 f303 	lsl.w	r3, r1, r3
 8010c64:	930d      	str	r3, [sp, #52]	; 0x34
 8010c66:	2300      	movs	r3, #0
 8010c68:	9308      	str	r3, [sp, #32]
 8010c6a:	eb09 0802 	add.w	r8, r9, r2
 8010c6e:	9b04      	ldr	r3, [sp, #16]
 8010c70:	45c1      	cmp	r9, r8
 8010c72:	4417      	add	r7, r2
 8010c74:	441f      	add	r7, r3
 8010c76:	464b      	mov	r3, r9
 8010c78:	bfa8      	it	ge
 8010c7a:	4643      	movge	r3, r8
 8010c7c:	42bb      	cmp	r3, r7
 8010c7e:	bfa8      	it	ge
 8010c80:	463b      	movge	r3, r7
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	bfc2      	ittt	gt
 8010c86:	eba8 0803 	subgt.w	r8, r8, r3
 8010c8a:	1aff      	subgt	r7, r7, r3
 8010c8c:	eba9 0903 	subgt.w	r9, r9, r3
 8010c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	dd17      	ble.n	8010cc6 <_strtod_l+0x75e>
 8010c96:	4631      	mov	r1, r6
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f002 f9fe 	bl	801309c <__pow5mult>
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	f43f aea8 	beq.w	80109f8 <_strtod_l+0x490>
 8010ca8:	4601      	mov	r1, r0
 8010caa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010cac:	4620      	mov	r0, r4
 8010cae:	f002 f94b 	bl	8012f48 <__multiply>
 8010cb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f43f ae9f 	beq.w	80109f8 <_strtod_l+0x490>
 8010cba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f002 f82b 	bl	8012d18 <_Bfree>
 8010cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cc4:	9318      	str	r3, [sp, #96]	; 0x60
 8010cc6:	f1b8 0f00 	cmp.w	r8, #0
 8010cca:	f300 808c 	bgt.w	8010de6 <_strtod_l+0x87e>
 8010cce:	9b06      	ldr	r3, [sp, #24]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	dd08      	ble.n	8010ce6 <_strtod_l+0x77e>
 8010cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010cd6:	9905      	ldr	r1, [sp, #20]
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f002 f9df 	bl	801309c <__pow5mult>
 8010cde:	9005      	str	r0, [sp, #20]
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	f43f ae89 	beq.w	80109f8 <_strtod_l+0x490>
 8010ce6:	2f00      	cmp	r7, #0
 8010ce8:	dd08      	ble.n	8010cfc <_strtod_l+0x794>
 8010cea:	9905      	ldr	r1, [sp, #20]
 8010cec:	463a      	mov	r2, r7
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f002 fa2e 	bl	8013150 <__lshift>
 8010cf4:	9005      	str	r0, [sp, #20]
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	f43f ae7e 	beq.w	80109f8 <_strtod_l+0x490>
 8010cfc:	f1b9 0f00 	cmp.w	r9, #0
 8010d00:	dd08      	ble.n	8010d14 <_strtod_l+0x7ac>
 8010d02:	4631      	mov	r1, r6
 8010d04:	464a      	mov	r2, r9
 8010d06:	4620      	mov	r0, r4
 8010d08:	f002 fa22 	bl	8013150 <__lshift>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	f43f ae72 	beq.w	80109f8 <_strtod_l+0x490>
 8010d14:	9a05      	ldr	r2, [sp, #20]
 8010d16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f002 faa5 	bl	8013268 <__mdiff>
 8010d1e:	4605      	mov	r5, r0
 8010d20:	2800      	cmp	r0, #0
 8010d22:	f43f ae69 	beq.w	80109f8 <_strtod_l+0x490>
 8010d26:	68c3      	ldr	r3, [r0, #12]
 8010d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60c3      	str	r3, [r0, #12]
 8010d2e:	4631      	mov	r1, r6
 8010d30:	f002 fa7e 	bl	8013230 <__mcmp>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	da60      	bge.n	8010dfa <_strtod_l+0x892>
 8010d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8010d3e:	f040 8082 	bne.w	8010e46 <_strtod_l+0x8de>
 8010d42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d17d      	bne.n	8010e46 <_strtod_l+0x8de>
 8010d4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d4e:	0d1b      	lsrs	r3, r3, #20
 8010d50:	051b      	lsls	r3, r3, #20
 8010d52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010d56:	d976      	bls.n	8010e46 <_strtod_l+0x8de>
 8010d58:	696b      	ldr	r3, [r5, #20]
 8010d5a:	b913      	cbnz	r3, 8010d62 <_strtod_l+0x7fa>
 8010d5c:	692b      	ldr	r3, [r5, #16]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	dd71      	ble.n	8010e46 <_strtod_l+0x8de>
 8010d62:	4629      	mov	r1, r5
 8010d64:	2201      	movs	r2, #1
 8010d66:	4620      	mov	r0, r4
 8010d68:	f002 f9f2 	bl	8013150 <__lshift>
 8010d6c:	4631      	mov	r1, r6
 8010d6e:	4605      	mov	r5, r0
 8010d70:	f002 fa5e 	bl	8013230 <__mcmp>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	dd66      	ble.n	8010e46 <_strtod_l+0x8de>
 8010d78:	9904      	ldr	r1, [sp, #16]
 8010d7a:	4a53      	ldr	r2, [pc, #332]	; (8010ec8 <_strtod_l+0x960>)
 8010d7c:	465b      	mov	r3, fp
 8010d7e:	2900      	cmp	r1, #0
 8010d80:	f000 8081 	beq.w	8010e86 <_strtod_l+0x91e>
 8010d84:	ea02 010b 	and.w	r1, r2, fp
 8010d88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010d8c:	dc7b      	bgt.n	8010e86 <_strtod_l+0x91e>
 8010d8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010d92:	f77f aea9 	ble.w	8010ae8 <_strtod_l+0x580>
 8010d96:	4b4d      	ldr	r3, [pc, #308]	; (8010ecc <_strtod_l+0x964>)
 8010d98:	4650      	mov	r0, sl
 8010d9a:	4659      	mov	r1, fp
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f7ef fc53 	bl	8000648 <__aeabi_dmul>
 8010da2:	460b      	mov	r3, r1
 8010da4:	4303      	orrs	r3, r0
 8010da6:	bf08      	it	eq
 8010da8:	2322      	moveq	r3, #34	; 0x22
 8010daa:	4682      	mov	sl, r0
 8010dac:	468b      	mov	fp, r1
 8010dae:	bf08      	it	eq
 8010db0:	6023      	streq	r3, [r4, #0]
 8010db2:	e62b      	b.n	8010a0c <_strtod_l+0x4a4>
 8010db4:	f04f 32ff 	mov.w	r2, #4294967295
 8010db8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dbc:	ea03 0a0a 	and.w	sl, r3, sl
 8010dc0:	e6e3      	b.n	8010b8a <_strtod_l+0x622>
 8010dc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010dc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010dca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010dce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010dd2:	fa01 f308 	lsl.w	r3, r1, r8
 8010dd6:	9308      	str	r3, [sp, #32]
 8010dd8:	910d      	str	r1, [sp, #52]	; 0x34
 8010dda:	e746      	b.n	8010c6a <_strtod_l+0x702>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	9308      	str	r3, [sp, #32]
 8010de0:	2301      	movs	r3, #1
 8010de2:	930d      	str	r3, [sp, #52]	; 0x34
 8010de4:	e741      	b.n	8010c6a <_strtod_l+0x702>
 8010de6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010de8:	4642      	mov	r2, r8
 8010dea:	4620      	mov	r0, r4
 8010dec:	f002 f9b0 	bl	8013150 <__lshift>
 8010df0:	9018      	str	r0, [sp, #96]	; 0x60
 8010df2:	2800      	cmp	r0, #0
 8010df4:	f47f af6b 	bne.w	8010cce <_strtod_l+0x766>
 8010df8:	e5fe      	b.n	80109f8 <_strtod_l+0x490>
 8010dfa:	465f      	mov	r7, fp
 8010dfc:	d16e      	bne.n	8010edc <_strtod_l+0x974>
 8010dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e04:	b342      	cbz	r2, 8010e58 <_strtod_l+0x8f0>
 8010e06:	4a32      	ldr	r2, [pc, #200]	; (8010ed0 <_strtod_l+0x968>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d128      	bne.n	8010e5e <_strtod_l+0x8f6>
 8010e0c:	9b04      	ldr	r3, [sp, #16]
 8010e0e:	4651      	mov	r1, sl
 8010e10:	b1eb      	cbz	r3, 8010e4e <_strtod_l+0x8e6>
 8010e12:	4b2d      	ldr	r3, [pc, #180]	; (8010ec8 <_strtod_l+0x960>)
 8010e14:	403b      	ands	r3, r7
 8010e16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e1e:	d819      	bhi.n	8010e54 <_strtod_l+0x8ec>
 8010e20:	0d1b      	lsrs	r3, r3, #20
 8010e22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010e26:	fa02 f303 	lsl.w	r3, r2, r3
 8010e2a:	4299      	cmp	r1, r3
 8010e2c:	d117      	bne.n	8010e5e <_strtod_l+0x8f6>
 8010e2e:	4b29      	ldr	r3, [pc, #164]	; (8010ed4 <_strtod_l+0x96c>)
 8010e30:	429f      	cmp	r7, r3
 8010e32:	d102      	bne.n	8010e3a <_strtod_l+0x8d2>
 8010e34:	3101      	adds	r1, #1
 8010e36:	f43f addf 	beq.w	80109f8 <_strtod_l+0x490>
 8010e3a:	4b23      	ldr	r3, [pc, #140]	; (8010ec8 <_strtod_l+0x960>)
 8010e3c:	403b      	ands	r3, r7
 8010e3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010e42:	f04f 0a00 	mov.w	sl, #0
 8010e46:	9b04      	ldr	r3, [sp, #16]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1a4      	bne.n	8010d96 <_strtod_l+0x82e>
 8010e4c:	e5de      	b.n	8010a0c <_strtod_l+0x4a4>
 8010e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e52:	e7ea      	b.n	8010e2a <_strtod_l+0x8c2>
 8010e54:	4613      	mov	r3, r2
 8010e56:	e7e8      	b.n	8010e2a <_strtod_l+0x8c2>
 8010e58:	ea53 030a 	orrs.w	r3, r3, sl
 8010e5c:	d08c      	beq.n	8010d78 <_strtod_l+0x810>
 8010e5e:	9b08      	ldr	r3, [sp, #32]
 8010e60:	b1db      	cbz	r3, 8010e9a <_strtod_l+0x932>
 8010e62:	423b      	tst	r3, r7
 8010e64:	d0ef      	beq.n	8010e46 <_strtod_l+0x8de>
 8010e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e68:	9a04      	ldr	r2, [sp, #16]
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	4659      	mov	r1, fp
 8010e6e:	b1c3      	cbz	r3, 8010ea2 <_strtod_l+0x93a>
 8010e70:	f7ff fb5e 	bl	8010530 <sulp>
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	ec51 0b18 	vmov	r0, r1, d8
 8010e7c:	f7ef fa2e 	bl	80002dc <__adddf3>
 8010e80:	4682      	mov	sl, r0
 8010e82:	468b      	mov	fp, r1
 8010e84:	e7df      	b.n	8010e46 <_strtod_l+0x8de>
 8010e86:	4013      	ands	r3, r2
 8010e88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010e8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e94:	f04f 3aff 	mov.w	sl, #4294967295
 8010e98:	e7d5      	b.n	8010e46 <_strtod_l+0x8de>
 8010e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e9c:	ea13 0f0a 	tst.w	r3, sl
 8010ea0:	e7e0      	b.n	8010e64 <_strtod_l+0x8fc>
 8010ea2:	f7ff fb45 	bl	8010530 <sulp>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	ec51 0b18 	vmov	r0, r1, d8
 8010eae:	f7ef fa13 	bl	80002d8 <__aeabi_dsub>
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4682      	mov	sl, r0
 8010eb8:	468b      	mov	fp, r1
 8010eba:	f7ef fe2d 	bl	8000b18 <__aeabi_dcmpeq>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d0c1      	beq.n	8010e46 <_strtod_l+0x8de>
 8010ec2:	e611      	b.n	8010ae8 <_strtod_l+0x580>
 8010ec4:	fffffc02 	.word	0xfffffc02
 8010ec8:	7ff00000 	.word	0x7ff00000
 8010ecc:	39500000 	.word	0x39500000
 8010ed0:	000fffff 	.word	0x000fffff
 8010ed4:	7fefffff 	.word	0x7fefffff
 8010ed8:	0802a998 	.word	0x0802a998
 8010edc:	4631      	mov	r1, r6
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f002 fb24 	bl	801352c <__ratio>
 8010ee4:	ec59 8b10 	vmov	r8, r9, d0
 8010ee8:	ee10 0a10 	vmov	r0, s0
 8010eec:	2200      	movs	r2, #0
 8010eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ef2:	4649      	mov	r1, r9
 8010ef4:	f7ef fe24 	bl	8000b40 <__aeabi_dcmple>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d07a      	beq.n	8010ff2 <_strtod_l+0xa8a>
 8010efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d04a      	beq.n	8010f98 <_strtod_l+0xa30>
 8010f02:	4b95      	ldr	r3, [pc, #596]	; (8011158 <_strtod_l+0xbf0>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011158 <_strtod_l+0xbf0>
 8010f0e:	f04f 0800 	mov.w	r8, #0
 8010f12:	4b92      	ldr	r3, [pc, #584]	; (801115c <_strtod_l+0xbf4>)
 8010f14:	403b      	ands	r3, r7
 8010f16:	930d      	str	r3, [sp, #52]	; 0x34
 8010f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f1a:	4b91      	ldr	r3, [pc, #580]	; (8011160 <_strtod_l+0xbf8>)
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	f040 80b0 	bne.w	8011082 <_strtod_l+0xb1a>
 8010f22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010f2a:	ec4b ab10 	vmov	d0, sl, fp
 8010f2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f32:	f002 fa23 	bl	801337c <__ulp>
 8010f36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f3a:	ec53 2b10 	vmov	r2, r3, d0
 8010f3e:	f7ef fb83 	bl	8000648 <__aeabi_dmul>
 8010f42:	4652      	mov	r2, sl
 8010f44:	465b      	mov	r3, fp
 8010f46:	f7ef f9c9 	bl	80002dc <__adddf3>
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4983      	ldr	r1, [pc, #524]	; (801115c <_strtod_l+0xbf4>)
 8010f4e:	4a85      	ldr	r2, [pc, #532]	; (8011164 <_strtod_l+0xbfc>)
 8010f50:	4019      	ands	r1, r3
 8010f52:	4291      	cmp	r1, r2
 8010f54:	4682      	mov	sl, r0
 8010f56:	d960      	bls.n	801101a <_strtod_l+0xab2>
 8010f58:	ee18 3a90 	vmov	r3, s17
 8010f5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d104      	bne.n	8010f6e <_strtod_l+0xa06>
 8010f64:	ee18 3a10 	vmov	r3, s16
 8010f68:	3301      	adds	r3, #1
 8010f6a:	f43f ad45 	beq.w	80109f8 <_strtod_l+0x490>
 8010f6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011170 <_strtod_l+0xc08>
 8010f72:	f04f 3aff 	mov.w	sl, #4294967295
 8010f76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f001 fecd 	bl	8012d18 <_Bfree>
 8010f7e:	9905      	ldr	r1, [sp, #20]
 8010f80:	4620      	mov	r0, r4
 8010f82:	f001 fec9 	bl	8012d18 <_Bfree>
 8010f86:	4631      	mov	r1, r6
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f001 fec5 	bl	8012d18 <_Bfree>
 8010f8e:	4629      	mov	r1, r5
 8010f90:	4620      	mov	r0, r4
 8010f92:	f001 fec1 	bl	8012d18 <_Bfree>
 8010f96:	e61a      	b.n	8010bce <_strtod_l+0x666>
 8010f98:	f1ba 0f00 	cmp.w	sl, #0
 8010f9c:	d11b      	bne.n	8010fd6 <_strtod_l+0xa6e>
 8010f9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fa2:	b9f3      	cbnz	r3, 8010fe2 <_strtod_l+0xa7a>
 8010fa4:	4b6c      	ldr	r3, [pc, #432]	; (8011158 <_strtod_l+0xbf0>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	4640      	mov	r0, r8
 8010faa:	4649      	mov	r1, r9
 8010fac:	f7ef fdbe 	bl	8000b2c <__aeabi_dcmplt>
 8010fb0:	b9d0      	cbnz	r0, 8010fe8 <_strtod_l+0xa80>
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	4b6c      	ldr	r3, [pc, #432]	; (8011168 <_strtod_l+0xc00>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f7ef fb45 	bl	8000648 <__aeabi_dmul>
 8010fbe:	4680      	mov	r8, r0
 8010fc0:	4689      	mov	r9, r1
 8010fc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010fc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010fca:	9315      	str	r3, [sp, #84]	; 0x54
 8010fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010fd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fd4:	e79d      	b.n	8010f12 <_strtod_l+0x9aa>
 8010fd6:	f1ba 0f01 	cmp.w	sl, #1
 8010fda:	d102      	bne.n	8010fe2 <_strtod_l+0xa7a>
 8010fdc:	2f00      	cmp	r7, #0
 8010fde:	f43f ad83 	beq.w	8010ae8 <_strtod_l+0x580>
 8010fe2:	4b62      	ldr	r3, [pc, #392]	; (801116c <_strtod_l+0xc04>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	e78e      	b.n	8010f06 <_strtod_l+0x99e>
 8010fe8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011168 <_strtod_l+0xc00>
 8010fec:	f04f 0800 	mov.w	r8, #0
 8010ff0:	e7e7      	b.n	8010fc2 <_strtod_l+0xa5a>
 8010ff2:	4b5d      	ldr	r3, [pc, #372]	; (8011168 <_strtod_l+0xc00>)
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	4649      	mov	r1, r9
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f7ef fb25 	bl	8000648 <__aeabi_dmul>
 8010ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011000:	4680      	mov	r8, r0
 8011002:	4689      	mov	r9, r1
 8011004:	b933      	cbnz	r3, 8011014 <_strtod_l+0xaac>
 8011006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801100a:	900e      	str	r0, [sp, #56]	; 0x38
 801100c:	930f      	str	r3, [sp, #60]	; 0x3c
 801100e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011012:	e7dd      	b.n	8010fd0 <_strtod_l+0xa68>
 8011014:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011018:	e7f9      	b.n	801100e <_strtod_l+0xaa6>
 801101a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1a8      	bne.n	8010f76 <_strtod_l+0xa0e>
 8011024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801102a:	0d1b      	lsrs	r3, r3, #20
 801102c:	051b      	lsls	r3, r3, #20
 801102e:	429a      	cmp	r2, r3
 8011030:	d1a1      	bne.n	8010f76 <_strtod_l+0xa0e>
 8011032:	4640      	mov	r0, r8
 8011034:	4649      	mov	r1, r9
 8011036:	f7ef feb7 	bl	8000da8 <__aeabi_d2lz>
 801103a:	f7ef fad7 	bl	80005ec <__aeabi_l2d>
 801103e:	4602      	mov	r2, r0
 8011040:	460b      	mov	r3, r1
 8011042:	4640      	mov	r0, r8
 8011044:	4649      	mov	r1, r9
 8011046:	f7ef f947 	bl	80002d8 <__aeabi_dsub>
 801104a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801104c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011050:	ea43 030a 	orr.w	r3, r3, sl
 8011054:	4313      	orrs	r3, r2
 8011056:	4680      	mov	r8, r0
 8011058:	4689      	mov	r9, r1
 801105a:	d055      	beq.n	8011108 <_strtod_l+0xba0>
 801105c:	a336      	add	r3, pc, #216	; (adr r3, 8011138 <_strtod_l+0xbd0>)
 801105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011062:	f7ef fd63 	bl	8000b2c <__aeabi_dcmplt>
 8011066:	2800      	cmp	r0, #0
 8011068:	f47f acd0 	bne.w	8010a0c <_strtod_l+0x4a4>
 801106c:	a334      	add	r3, pc, #208	; (adr r3, 8011140 <_strtod_l+0xbd8>)
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	4640      	mov	r0, r8
 8011074:	4649      	mov	r1, r9
 8011076:	f7ef fd77 	bl	8000b68 <__aeabi_dcmpgt>
 801107a:	2800      	cmp	r0, #0
 801107c:	f43f af7b 	beq.w	8010f76 <_strtod_l+0xa0e>
 8011080:	e4c4      	b.n	8010a0c <_strtod_l+0x4a4>
 8011082:	9b04      	ldr	r3, [sp, #16]
 8011084:	b333      	cbz	r3, 80110d4 <_strtod_l+0xb6c>
 8011086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011088:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801108c:	d822      	bhi.n	80110d4 <_strtod_l+0xb6c>
 801108e:	a32e      	add	r3, pc, #184	; (adr r3, 8011148 <_strtod_l+0xbe0>)
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	4640      	mov	r0, r8
 8011096:	4649      	mov	r1, r9
 8011098:	f7ef fd52 	bl	8000b40 <__aeabi_dcmple>
 801109c:	b1a0      	cbz	r0, 80110c8 <_strtod_l+0xb60>
 801109e:	4649      	mov	r1, r9
 80110a0:	4640      	mov	r0, r8
 80110a2:	f7ef fda9 	bl	8000bf8 <__aeabi_d2uiz>
 80110a6:	2801      	cmp	r0, #1
 80110a8:	bf38      	it	cc
 80110aa:	2001      	movcc	r0, #1
 80110ac:	f7ef fa52 	bl	8000554 <__aeabi_ui2d>
 80110b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b2:	4680      	mov	r8, r0
 80110b4:	4689      	mov	r9, r1
 80110b6:	bb23      	cbnz	r3, 8011102 <_strtod_l+0xb9a>
 80110b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110bc:	9010      	str	r0, [sp, #64]	; 0x40
 80110be:	9311      	str	r3, [sp, #68]	; 0x44
 80110c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80110c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80110d0:	1a9b      	subs	r3, r3, r2
 80110d2:	9309      	str	r3, [sp, #36]	; 0x24
 80110d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110d8:	eeb0 0a48 	vmov.f32	s0, s16
 80110dc:	eef0 0a68 	vmov.f32	s1, s17
 80110e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110e4:	f002 f94a 	bl	801337c <__ulp>
 80110e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110ec:	ec53 2b10 	vmov	r2, r3, d0
 80110f0:	f7ef faaa 	bl	8000648 <__aeabi_dmul>
 80110f4:	ec53 2b18 	vmov	r2, r3, d8
 80110f8:	f7ef f8f0 	bl	80002dc <__adddf3>
 80110fc:	4682      	mov	sl, r0
 80110fe:	468b      	mov	fp, r1
 8011100:	e78d      	b.n	801101e <_strtod_l+0xab6>
 8011102:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011106:	e7db      	b.n	80110c0 <_strtod_l+0xb58>
 8011108:	a311      	add	r3, pc, #68	; (adr r3, 8011150 <_strtod_l+0xbe8>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef fd0d 	bl	8000b2c <__aeabi_dcmplt>
 8011112:	e7b2      	b.n	801107a <_strtod_l+0xb12>
 8011114:	2300      	movs	r3, #0
 8011116:	930a      	str	r3, [sp, #40]	; 0x28
 8011118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801111a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	f7ff ba6b 	b.w	80105f8 <_strtod_l+0x90>
 8011122:	2a65      	cmp	r2, #101	; 0x65
 8011124:	f43f ab5f 	beq.w	80107e6 <_strtod_l+0x27e>
 8011128:	2a45      	cmp	r2, #69	; 0x45
 801112a:	f43f ab5c 	beq.w	80107e6 <_strtod_l+0x27e>
 801112e:	2301      	movs	r3, #1
 8011130:	f7ff bb94 	b.w	801085c <_strtod_l+0x2f4>
 8011134:	f3af 8000 	nop.w
 8011138:	94a03595 	.word	0x94a03595
 801113c:	3fdfffff 	.word	0x3fdfffff
 8011140:	35afe535 	.word	0x35afe535
 8011144:	3fe00000 	.word	0x3fe00000
 8011148:	ffc00000 	.word	0xffc00000
 801114c:	41dfffff 	.word	0x41dfffff
 8011150:	94a03595 	.word	0x94a03595
 8011154:	3fcfffff 	.word	0x3fcfffff
 8011158:	3ff00000 	.word	0x3ff00000
 801115c:	7ff00000 	.word	0x7ff00000
 8011160:	7fe00000 	.word	0x7fe00000
 8011164:	7c9fffff 	.word	0x7c9fffff
 8011168:	3fe00000 	.word	0x3fe00000
 801116c:	bff00000 	.word	0xbff00000
 8011170:	7fefffff 	.word	0x7fefffff

08011174 <_strtod_r>:
 8011174:	4b01      	ldr	r3, [pc, #4]	; (801117c <_strtod_r+0x8>)
 8011176:	f7ff b9f7 	b.w	8010568 <_strtod_l>
 801117a:	bf00      	nop
 801117c:	20000144 	.word	0x20000144

08011180 <_strtol_l.constprop.0>:
 8011180:	2b01      	cmp	r3, #1
 8011182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011186:	d001      	beq.n	801118c <_strtol_l.constprop.0+0xc>
 8011188:	2b24      	cmp	r3, #36	; 0x24
 801118a:	d906      	bls.n	801119a <_strtol_l.constprop.0+0x1a>
 801118c:	f7fe f90e 	bl	800f3ac <__errno>
 8011190:	2316      	movs	r3, #22
 8011192:	6003      	str	r3, [r0, #0]
 8011194:	2000      	movs	r0, #0
 8011196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801119a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011280 <_strtol_l.constprop.0+0x100>
 801119e:	460d      	mov	r5, r1
 80111a0:	462e      	mov	r6, r5
 80111a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80111aa:	f017 0708 	ands.w	r7, r7, #8
 80111ae:	d1f7      	bne.n	80111a0 <_strtol_l.constprop.0+0x20>
 80111b0:	2c2d      	cmp	r4, #45	; 0x2d
 80111b2:	d132      	bne.n	801121a <_strtol_l.constprop.0+0x9a>
 80111b4:	782c      	ldrb	r4, [r5, #0]
 80111b6:	2701      	movs	r7, #1
 80111b8:	1cb5      	adds	r5, r6, #2
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d05b      	beq.n	8011276 <_strtol_l.constprop.0+0xf6>
 80111be:	2b10      	cmp	r3, #16
 80111c0:	d109      	bne.n	80111d6 <_strtol_l.constprop.0+0x56>
 80111c2:	2c30      	cmp	r4, #48	; 0x30
 80111c4:	d107      	bne.n	80111d6 <_strtol_l.constprop.0+0x56>
 80111c6:	782c      	ldrb	r4, [r5, #0]
 80111c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80111cc:	2c58      	cmp	r4, #88	; 0x58
 80111ce:	d14d      	bne.n	801126c <_strtol_l.constprop.0+0xec>
 80111d0:	786c      	ldrb	r4, [r5, #1]
 80111d2:	2310      	movs	r3, #16
 80111d4:	3502      	adds	r5, #2
 80111d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80111da:	f108 38ff 	add.w	r8, r8, #4294967295
 80111de:	f04f 0c00 	mov.w	ip, #0
 80111e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80111e6:	4666      	mov	r6, ip
 80111e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80111ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80111f0:	f1be 0f09 	cmp.w	lr, #9
 80111f4:	d816      	bhi.n	8011224 <_strtol_l.constprop.0+0xa4>
 80111f6:	4674      	mov	r4, lr
 80111f8:	42a3      	cmp	r3, r4
 80111fa:	dd24      	ble.n	8011246 <_strtol_l.constprop.0+0xc6>
 80111fc:	f1bc 0f00 	cmp.w	ip, #0
 8011200:	db1e      	blt.n	8011240 <_strtol_l.constprop.0+0xc0>
 8011202:	45b1      	cmp	r9, r6
 8011204:	d31c      	bcc.n	8011240 <_strtol_l.constprop.0+0xc0>
 8011206:	d101      	bne.n	801120c <_strtol_l.constprop.0+0x8c>
 8011208:	45a2      	cmp	sl, r4
 801120a:	db19      	blt.n	8011240 <_strtol_l.constprop.0+0xc0>
 801120c:	fb06 4603 	mla	r6, r6, r3, r4
 8011210:	f04f 0c01 	mov.w	ip, #1
 8011214:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011218:	e7e8      	b.n	80111ec <_strtol_l.constprop.0+0x6c>
 801121a:	2c2b      	cmp	r4, #43	; 0x2b
 801121c:	bf04      	itt	eq
 801121e:	782c      	ldrbeq	r4, [r5, #0]
 8011220:	1cb5      	addeq	r5, r6, #2
 8011222:	e7ca      	b.n	80111ba <_strtol_l.constprop.0+0x3a>
 8011224:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011228:	f1be 0f19 	cmp.w	lr, #25
 801122c:	d801      	bhi.n	8011232 <_strtol_l.constprop.0+0xb2>
 801122e:	3c37      	subs	r4, #55	; 0x37
 8011230:	e7e2      	b.n	80111f8 <_strtol_l.constprop.0+0x78>
 8011232:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011236:	f1be 0f19 	cmp.w	lr, #25
 801123a:	d804      	bhi.n	8011246 <_strtol_l.constprop.0+0xc6>
 801123c:	3c57      	subs	r4, #87	; 0x57
 801123e:	e7db      	b.n	80111f8 <_strtol_l.constprop.0+0x78>
 8011240:	f04f 3cff 	mov.w	ip, #4294967295
 8011244:	e7e6      	b.n	8011214 <_strtol_l.constprop.0+0x94>
 8011246:	f1bc 0f00 	cmp.w	ip, #0
 801124a:	da05      	bge.n	8011258 <_strtol_l.constprop.0+0xd8>
 801124c:	2322      	movs	r3, #34	; 0x22
 801124e:	6003      	str	r3, [r0, #0]
 8011250:	4646      	mov	r6, r8
 8011252:	b942      	cbnz	r2, 8011266 <_strtol_l.constprop.0+0xe6>
 8011254:	4630      	mov	r0, r6
 8011256:	e79e      	b.n	8011196 <_strtol_l.constprop.0+0x16>
 8011258:	b107      	cbz	r7, 801125c <_strtol_l.constprop.0+0xdc>
 801125a:	4276      	negs	r6, r6
 801125c:	2a00      	cmp	r2, #0
 801125e:	d0f9      	beq.n	8011254 <_strtol_l.constprop.0+0xd4>
 8011260:	f1bc 0f00 	cmp.w	ip, #0
 8011264:	d000      	beq.n	8011268 <_strtol_l.constprop.0+0xe8>
 8011266:	1e69      	subs	r1, r5, #1
 8011268:	6011      	str	r1, [r2, #0]
 801126a:	e7f3      	b.n	8011254 <_strtol_l.constprop.0+0xd4>
 801126c:	2430      	movs	r4, #48	; 0x30
 801126e:	2b00      	cmp	r3, #0
 8011270:	d1b1      	bne.n	80111d6 <_strtol_l.constprop.0+0x56>
 8011272:	2308      	movs	r3, #8
 8011274:	e7af      	b.n	80111d6 <_strtol_l.constprop.0+0x56>
 8011276:	2c30      	cmp	r4, #48	; 0x30
 8011278:	d0a5      	beq.n	80111c6 <_strtol_l.constprop.0+0x46>
 801127a:	230a      	movs	r3, #10
 801127c:	e7ab      	b.n	80111d6 <_strtol_l.constprop.0+0x56>
 801127e:	bf00      	nop
 8011280:	0802a9c1 	.word	0x0802a9c1

08011284 <_strtol_r>:
 8011284:	f7ff bf7c 	b.w	8011180 <_strtol_l.constprop.0>

08011288 <__swbuf_r>:
 8011288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128a:	460e      	mov	r6, r1
 801128c:	4614      	mov	r4, r2
 801128e:	4605      	mov	r5, r0
 8011290:	b118      	cbz	r0, 801129a <__swbuf_r+0x12>
 8011292:	6983      	ldr	r3, [r0, #24]
 8011294:	b90b      	cbnz	r3, 801129a <__swbuf_r+0x12>
 8011296:	f001 f853 	bl	8012340 <__sinit>
 801129a:	4b21      	ldr	r3, [pc, #132]	; (8011320 <__swbuf_r+0x98>)
 801129c:	429c      	cmp	r4, r3
 801129e:	d12b      	bne.n	80112f8 <__swbuf_r+0x70>
 80112a0:	686c      	ldr	r4, [r5, #4]
 80112a2:	69a3      	ldr	r3, [r4, #24]
 80112a4:	60a3      	str	r3, [r4, #8]
 80112a6:	89a3      	ldrh	r3, [r4, #12]
 80112a8:	071a      	lsls	r2, r3, #28
 80112aa:	d52f      	bpl.n	801130c <__swbuf_r+0x84>
 80112ac:	6923      	ldr	r3, [r4, #16]
 80112ae:	b36b      	cbz	r3, 801130c <__swbuf_r+0x84>
 80112b0:	6923      	ldr	r3, [r4, #16]
 80112b2:	6820      	ldr	r0, [r4, #0]
 80112b4:	1ac0      	subs	r0, r0, r3
 80112b6:	6963      	ldr	r3, [r4, #20]
 80112b8:	b2f6      	uxtb	r6, r6
 80112ba:	4283      	cmp	r3, r0
 80112bc:	4637      	mov	r7, r6
 80112be:	dc04      	bgt.n	80112ca <__swbuf_r+0x42>
 80112c0:	4621      	mov	r1, r4
 80112c2:	4628      	mov	r0, r5
 80112c4:	f000 ffa8 	bl	8012218 <_fflush_r>
 80112c8:	bb30      	cbnz	r0, 8011318 <__swbuf_r+0x90>
 80112ca:	68a3      	ldr	r3, [r4, #8]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	60a3      	str	r3, [r4, #8]
 80112d0:	6823      	ldr	r3, [r4, #0]
 80112d2:	1c5a      	adds	r2, r3, #1
 80112d4:	6022      	str	r2, [r4, #0]
 80112d6:	701e      	strb	r6, [r3, #0]
 80112d8:	6963      	ldr	r3, [r4, #20]
 80112da:	3001      	adds	r0, #1
 80112dc:	4283      	cmp	r3, r0
 80112de:	d004      	beq.n	80112ea <__swbuf_r+0x62>
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	07db      	lsls	r3, r3, #31
 80112e4:	d506      	bpl.n	80112f4 <__swbuf_r+0x6c>
 80112e6:	2e0a      	cmp	r6, #10
 80112e8:	d104      	bne.n	80112f4 <__swbuf_r+0x6c>
 80112ea:	4621      	mov	r1, r4
 80112ec:	4628      	mov	r0, r5
 80112ee:	f000 ff93 	bl	8012218 <_fflush_r>
 80112f2:	b988      	cbnz	r0, 8011318 <__swbuf_r+0x90>
 80112f4:	4638      	mov	r0, r7
 80112f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112f8:	4b0a      	ldr	r3, [pc, #40]	; (8011324 <__swbuf_r+0x9c>)
 80112fa:	429c      	cmp	r4, r3
 80112fc:	d101      	bne.n	8011302 <__swbuf_r+0x7a>
 80112fe:	68ac      	ldr	r4, [r5, #8]
 8011300:	e7cf      	b.n	80112a2 <__swbuf_r+0x1a>
 8011302:	4b09      	ldr	r3, [pc, #36]	; (8011328 <__swbuf_r+0xa0>)
 8011304:	429c      	cmp	r4, r3
 8011306:	bf08      	it	eq
 8011308:	68ec      	ldreq	r4, [r5, #12]
 801130a:	e7ca      	b.n	80112a2 <__swbuf_r+0x1a>
 801130c:	4621      	mov	r1, r4
 801130e:	4628      	mov	r0, r5
 8011310:	f000 f80c 	bl	801132c <__swsetup_r>
 8011314:	2800      	cmp	r0, #0
 8011316:	d0cb      	beq.n	80112b0 <__swbuf_r+0x28>
 8011318:	f04f 37ff 	mov.w	r7, #4294967295
 801131c:	e7ea      	b.n	80112f4 <__swbuf_r+0x6c>
 801131e:	bf00      	nop
 8011320:	0802ab94 	.word	0x0802ab94
 8011324:	0802abb4 	.word	0x0802abb4
 8011328:	0802ab74 	.word	0x0802ab74

0801132c <__swsetup_r>:
 801132c:	4b32      	ldr	r3, [pc, #200]	; (80113f8 <__swsetup_r+0xcc>)
 801132e:	b570      	push	{r4, r5, r6, lr}
 8011330:	681d      	ldr	r5, [r3, #0]
 8011332:	4606      	mov	r6, r0
 8011334:	460c      	mov	r4, r1
 8011336:	b125      	cbz	r5, 8011342 <__swsetup_r+0x16>
 8011338:	69ab      	ldr	r3, [r5, #24]
 801133a:	b913      	cbnz	r3, 8011342 <__swsetup_r+0x16>
 801133c:	4628      	mov	r0, r5
 801133e:	f000 ffff 	bl	8012340 <__sinit>
 8011342:	4b2e      	ldr	r3, [pc, #184]	; (80113fc <__swsetup_r+0xd0>)
 8011344:	429c      	cmp	r4, r3
 8011346:	d10f      	bne.n	8011368 <__swsetup_r+0x3c>
 8011348:	686c      	ldr	r4, [r5, #4]
 801134a:	89a3      	ldrh	r3, [r4, #12]
 801134c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011350:	0719      	lsls	r1, r3, #28
 8011352:	d42c      	bmi.n	80113ae <__swsetup_r+0x82>
 8011354:	06dd      	lsls	r5, r3, #27
 8011356:	d411      	bmi.n	801137c <__swsetup_r+0x50>
 8011358:	2309      	movs	r3, #9
 801135a:	6033      	str	r3, [r6, #0]
 801135c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011360:	81a3      	strh	r3, [r4, #12]
 8011362:	f04f 30ff 	mov.w	r0, #4294967295
 8011366:	e03e      	b.n	80113e6 <__swsetup_r+0xba>
 8011368:	4b25      	ldr	r3, [pc, #148]	; (8011400 <__swsetup_r+0xd4>)
 801136a:	429c      	cmp	r4, r3
 801136c:	d101      	bne.n	8011372 <__swsetup_r+0x46>
 801136e:	68ac      	ldr	r4, [r5, #8]
 8011370:	e7eb      	b.n	801134a <__swsetup_r+0x1e>
 8011372:	4b24      	ldr	r3, [pc, #144]	; (8011404 <__swsetup_r+0xd8>)
 8011374:	429c      	cmp	r4, r3
 8011376:	bf08      	it	eq
 8011378:	68ec      	ldreq	r4, [r5, #12]
 801137a:	e7e6      	b.n	801134a <__swsetup_r+0x1e>
 801137c:	0758      	lsls	r0, r3, #29
 801137e:	d512      	bpl.n	80113a6 <__swsetup_r+0x7a>
 8011380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011382:	b141      	cbz	r1, 8011396 <__swsetup_r+0x6a>
 8011384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011388:	4299      	cmp	r1, r3
 801138a:	d002      	beq.n	8011392 <__swsetup_r+0x66>
 801138c:	4630      	mov	r0, r6
 801138e:	f002 f95b 	bl	8013648 <_free_r>
 8011392:	2300      	movs	r3, #0
 8011394:	6363      	str	r3, [r4, #52]	; 0x34
 8011396:	89a3      	ldrh	r3, [r4, #12]
 8011398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801139c:	81a3      	strh	r3, [r4, #12]
 801139e:	2300      	movs	r3, #0
 80113a0:	6063      	str	r3, [r4, #4]
 80113a2:	6923      	ldr	r3, [r4, #16]
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	f043 0308 	orr.w	r3, r3, #8
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	6923      	ldr	r3, [r4, #16]
 80113b0:	b94b      	cbnz	r3, 80113c6 <__swsetup_r+0x9a>
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113bc:	d003      	beq.n	80113c6 <__swsetup_r+0x9a>
 80113be:	4621      	mov	r1, r4
 80113c0:	4630      	mov	r0, r6
 80113c2:	f001 fbf5 	bl	8012bb0 <__smakebuf_r>
 80113c6:	89a0      	ldrh	r0, [r4, #12]
 80113c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113cc:	f010 0301 	ands.w	r3, r0, #1
 80113d0:	d00a      	beq.n	80113e8 <__swsetup_r+0xbc>
 80113d2:	2300      	movs	r3, #0
 80113d4:	60a3      	str	r3, [r4, #8]
 80113d6:	6963      	ldr	r3, [r4, #20]
 80113d8:	425b      	negs	r3, r3
 80113da:	61a3      	str	r3, [r4, #24]
 80113dc:	6923      	ldr	r3, [r4, #16]
 80113de:	b943      	cbnz	r3, 80113f2 <__swsetup_r+0xc6>
 80113e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80113e4:	d1ba      	bne.n	801135c <__swsetup_r+0x30>
 80113e6:	bd70      	pop	{r4, r5, r6, pc}
 80113e8:	0781      	lsls	r1, r0, #30
 80113ea:	bf58      	it	pl
 80113ec:	6963      	ldrpl	r3, [r4, #20]
 80113ee:	60a3      	str	r3, [r4, #8]
 80113f0:	e7f4      	b.n	80113dc <__swsetup_r+0xb0>
 80113f2:	2000      	movs	r0, #0
 80113f4:	e7f7      	b.n	80113e6 <__swsetup_r+0xba>
 80113f6:	bf00      	nop
 80113f8:	200000dc 	.word	0x200000dc
 80113fc:	0802ab94 	.word	0x0802ab94
 8011400:	0802abb4 	.word	0x0802abb4
 8011404:	0802ab74 	.word	0x0802ab74

08011408 <abort>:
 8011408:	b508      	push	{r3, lr}
 801140a:	2006      	movs	r0, #6
 801140c:	f002 fbc8 	bl	8013ba0 <raise>
 8011410:	2001      	movs	r0, #1
 8011412:	f7f2 fc2d 	bl	8003c70 <_exit>

08011416 <quorem>:
 8011416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141a:	6903      	ldr	r3, [r0, #16]
 801141c:	690c      	ldr	r4, [r1, #16]
 801141e:	42a3      	cmp	r3, r4
 8011420:	4607      	mov	r7, r0
 8011422:	f2c0 8081 	blt.w	8011528 <quorem+0x112>
 8011426:	3c01      	subs	r4, #1
 8011428:	f101 0814 	add.w	r8, r1, #20
 801142c:	f100 0514 	add.w	r5, r0, #20
 8011430:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011434:	9301      	str	r3, [sp, #4]
 8011436:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801143a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801143e:	3301      	adds	r3, #1
 8011440:	429a      	cmp	r2, r3
 8011442:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011446:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801144a:	fbb2 f6f3 	udiv	r6, r2, r3
 801144e:	d331      	bcc.n	80114b4 <quorem+0x9e>
 8011450:	f04f 0e00 	mov.w	lr, #0
 8011454:	4640      	mov	r0, r8
 8011456:	46ac      	mov	ip, r5
 8011458:	46f2      	mov	sl, lr
 801145a:	f850 2b04 	ldr.w	r2, [r0], #4
 801145e:	b293      	uxth	r3, r2
 8011460:	fb06 e303 	mla	r3, r6, r3, lr
 8011464:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011468:	b29b      	uxth	r3, r3
 801146a:	ebaa 0303 	sub.w	r3, sl, r3
 801146e:	f8dc a000 	ldr.w	sl, [ip]
 8011472:	0c12      	lsrs	r2, r2, #16
 8011474:	fa13 f38a 	uxtah	r3, r3, sl
 8011478:	fb06 e202 	mla	r2, r6, r2, lr
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	9b00      	ldr	r3, [sp, #0]
 8011480:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011484:	b292      	uxth	r2, r2
 8011486:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801148a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801148e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011492:	4581      	cmp	r9, r0
 8011494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011498:	f84c 3b04 	str.w	r3, [ip], #4
 801149c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80114a0:	d2db      	bcs.n	801145a <quorem+0x44>
 80114a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80114a6:	b92b      	cbnz	r3, 80114b4 <quorem+0x9e>
 80114a8:	9b01      	ldr	r3, [sp, #4]
 80114aa:	3b04      	subs	r3, #4
 80114ac:	429d      	cmp	r5, r3
 80114ae:	461a      	mov	r2, r3
 80114b0:	d32e      	bcc.n	8011510 <quorem+0xfa>
 80114b2:	613c      	str	r4, [r7, #16]
 80114b4:	4638      	mov	r0, r7
 80114b6:	f001 febb 	bl	8013230 <__mcmp>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	db24      	blt.n	8011508 <quorem+0xf2>
 80114be:	3601      	adds	r6, #1
 80114c0:	4628      	mov	r0, r5
 80114c2:	f04f 0c00 	mov.w	ip, #0
 80114c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80114ca:	f8d0 e000 	ldr.w	lr, [r0]
 80114ce:	b293      	uxth	r3, r2
 80114d0:	ebac 0303 	sub.w	r3, ip, r3
 80114d4:	0c12      	lsrs	r2, r2, #16
 80114d6:	fa13 f38e 	uxtah	r3, r3, lr
 80114da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80114de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114e8:	45c1      	cmp	r9, r8
 80114ea:	f840 3b04 	str.w	r3, [r0], #4
 80114ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80114f2:	d2e8      	bcs.n	80114c6 <quorem+0xb0>
 80114f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114fc:	b922      	cbnz	r2, 8011508 <quorem+0xf2>
 80114fe:	3b04      	subs	r3, #4
 8011500:	429d      	cmp	r5, r3
 8011502:	461a      	mov	r2, r3
 8011504:	d30a      	bcc.n	801151c <quorem+0x106>
 8011506:	613c      	str	r4, [r7, #16]
 8011508:	4630      	mov	r0, r6
 801150a:	b003      	add	sp, #12
 801150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011510:	6812      	ldr	r2, [r2, #0]
 8011512:	3b04      	subs	r3, #4
 8011514:	2a00      	cmp	r2, #0
 8011516:	d1cc      	bne.n	80114b2 <quorem+0x9c>
 8011518:	3c01      	subs	r4, #1
 801151a:	e7c7      	b.n	80114ac <quorem+0x96>
 801151c:	6812      	ldr	r2, [r2, #0]
 801151e:	3b04      	subs	r3, #4
 8011520:	2a00      	cmp	r2, #0
 8011522:	d1f0      	bne.n	8011506 <quorem+0xf0>
 8011524:	3c01      	subs	r4, #1
 8011526:	e7eb      	b.n	8011500 <quorem+0xea>
 8011528:	2000      	movs	r0, #0
 801152a:	e7ee      	b.n	801150a <quorem+0xf4>
 801152c:	0000      	movs	r0, r0
	...

08011530 <_dtoa_r>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	ed2d 8b04 	vpush	{d8-d9}
 8011538:	ec57 6b10 	vmov	r6, r7, d0
 801153c:	b093      	sub	sp, #76	; 0x4c
 801153e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011544:	9106      	str	r1, [sp, #24]
 8011546:	ee10 aa10 	vmov	sl, s0
 801154a:	4604      	mov	r4, r0
 801154c:	9209      	str	r2, [sp, #36]	; 0x24
 801154e:	930c      	str	r3, [sp, #48]	; 0x30
 8011550:	46bb      	mov	fp, r7
 8011552:	b975      	cbnz	r5, 8011572 <_dtoa_r+0x42>
 8011554:	2010      	movs	r0, #16
 8011556:	f001 fb6b 	bl	8012c30 <malloc>
 801155a:	4602      	mov	r2, r0
 801155c:	6260      	str	r0, [r4, #36]	; 0x24
 801155e:	b920      	cbnz	r0, 801156a <_dtoa_r+0x3a>
 8011560:	4ba7      	ldr	r3, [pc, #668]	; (8011800 <_dtoa_r+0x2d0>)
 8011562:	21ea      	movs	r1, #234	; 0xea
 8011564:	48a7      	ldr	r0, [pc, #668]	; (8011804 <_dtoa_r+0x2d4>)
 8011566:	f7fd ff03 	bl	800f370 <__assert_func>
 801156a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801156e:	6005      	str	r5, [r0, #0]
 8011570:	60c5      	str	r5, [r0, #12]
 8011572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011574:	6819      	ldr	r1, [r3, #0]
 8011576:	b151      	cbz	r1, 801158e <_dtoa_r+0x5e>
 8011578:	685a      	ldr	r2, [r3, #4]
 801157a:	604a      	str	r2, [r1, #4]
 801157c:	2301      	movs	r3, #1
 801157e:	4093      	lsls	r3, r2
 8011580:	608b      	str	r3, [r1, #8]
 8011582:	4620      	mov	r0, r4
 8011584:	f001 fbc8 	bl	8012d18 <_Bfree>
 8011588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801158a:	2200      	movs	r2, #0
 801158c:	601a      	str	r2, [r3, #0]
 801158e:	1e3b      	subs	r3, r7, #0
 8011590:	bfaa      	itet	ge
 8011592:	2300      	movge	r3, #0
 8011594:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011598:	f8c8 3000 	strge.w	r3, [r8]
 801159c:	4b9a      	ldr	r3, [pc, #616]	; (8011808 <_dtoa_r+0x2d8>)
 801159e:	bfbc      	itt	lt
 80115a0:	2201      	movlt	r2, #1
 80115a2:	f8c8 2000 	strlt.w	r2, [r8]
 80115a6:	ea33 030b 	bics.w	r3, r3, fp
 80115aa:	d11b      	bne.n	80115e4 <_dtoa_r+0xb4>
 80115ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80115b2:	6013      	str	r3, [r2, #0]
 80115b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115b8:	4333      	orrs	r3, r6
 80115ba:	f000 8592 	beq.w	80120e2 <_dtoa_r+0xbb2>
 80115be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115c0:	b963      	cbnz	r3, 80115dc <_dtoa_r+0xac>
 80115c2:	4b92      	ldr	r3, [pc, #584]	; (801180c <_dtoa_r+0x2dc>)
 80115c4:	e022      	b.n	801160c <_dtoa_r+0xdc>
 80115c6:	4b92      	ldr	r3, [pc, #584]	; (8011810 <_dtoa_r+0x2e0>)
 80115c8:	9301      	str	r3, [sp, #4]
 80115ca:	3308      	adds	r3, #8
 80115cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80115ce:	6013      	str	r3, [r2, #0]
 80115d0:	9801      	ldr	r0, [sp, #4]
 80115d2:	b013      	add	sp, #76	; 0x4c
 80115d4:	ecbd 8b04 	vpop	{d8-d9}
 80115d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115dc:	4b8b      	ldr	r3, [pc, #556]	; (801180c <_dtoa_r+0x2dc>)
 80115de:	9301      	str	r3, [sp, #4]
 80115e0:	3303      	adds	r3, #3
 80115e2:	e7f3      	b.n	80115cc <_dtoa_r+0x9c>
 80115e4:	2200      	movs	r2, #0
 80115e6:	2300      	movs	r3, #0
 80115e8:	4650      	mov	r0, sl
 80115ea:	4659      	mov	r1, fp
 80115ec:	f7ef fa94 	bl	8000b18 <__aeabi_dcmpeq>
 80115f0:	ec4b ab19 	vmov	d9, sl, fp
 80115f4:	4680      	mov	r8, r0
 80115f6:	b158      	cbz	r0, 8011610 <_dtoa_r+0xe0>
 80115f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115fa:	2301      	movs	r3, #1
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 856b 	beq.w	80120dc <_dtoa_r+0xbac>
 8011606:	4883      	ldr	r0, [pc, #524]	; (8011814 <_dtoa_r+0x2e4>)
 8011608:	6018      	str	r0, [r3, #0]
 801160a:	1e43      	subs	r3, r0, #1
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	e7df      	b.n	80115d0 <_dtoa_r+0xa0>
 8011610:	ec4b ab10 	vmov	d0, sl, fp
 8011614:	aa10      	add	r2, sp, #64	; 0x40
 8011616:	a911      	add	r1, sp, #68	; 0x44
 8011618:	4620      	mov	r0, r4
 801161a:	f001 ff2b 	bl	8013474 <__d2b>
 801161e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011622:	ee08 0a10 	vmov	s16, r0
 8011626:	2d00      	cmp	r5, #0
 8011628:	f000 8084 	beq.w	8011734 <_dtoa_r+0x204>
 801162c:	ee19 3a90 	vmov	r3, s19
 8011630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011634:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011638:	4656      	mov	r6, sl
 801163a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801163e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011642:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011646:	4b74      	ldr	r3, [pc, #464]	; (8011818 <_dtoa_r+0x2e8>)
 8011648:	2200      	movs	r2, #0
 801164a:	4630      	mov	r0, r6
 801164c:	4639      	mov	r1, r7
 801164e:	f7ee fe43 	bl	80002d8 <__aeabi_dsub>
 8011652:	a365      	add	r3, pc, #404	; (adr r3, 80117e8 <_dtoa_r+0x2b8>)
 8011654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011658:	f7ee fff6 	bl	8000648 <__aeabi_dmul>
 801165c:	a364      	add	r3, pc, #400	; (adr r3, 80117f0 <_dtoa_r+0x2c0>)
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	f7ee fe3b 	bl	80002dc <__adddf3>
 8011666:	4606      	mov	r6, r0
 8011668:	4628      	mov	r0, r5
 801166a:	460f      	mov	r7, r1
 801166c:	f7ee ff82 	bl	8000574 <__aeabi_i2d>
 8011670:	a361      	add	r3, pc, #388	; (adr r3, 80117f8 <_dtoa_r+0x2c8>)
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	f7ee ffe7 	bl	8000648 <__aeabi_dmul>
 801167a:	4602      	mov	r2, r0
 801167c:	460b      	mov	r3, r1
 801167e:	4630      	mov	r0, r6
 8011680:	4639      	mov	r1, r7
 8011682:	f7ee fe2b 	bl	80002dc <__adddf3>
 8011686:	4606      	mov	r6, r0
 8011688:	460f      	mov	r7, r1
 801168a:	f7ef fa8d 	bl	8000ba8 <__aeabi_d2iz>
 801168e:	2200      	movs	r2, #0
 8011690:	9000      	str	r0, [sp, #0]
 8011692:	2300      	movs	r3, #0
 8011694:	4630      	mov	r0, r6
 8011696:	4639      	mov	r1, r7
 8011698:	f7ef fa48 	bl	8000b2c <__aeabi_dcmplt>
 801169c:	b150      	cbz	r0, 80116b4 <_dtoa_r+0x184>
 801169e:	9800      	ldr	r0, [sp, #0]
 80116a0:	f7ee ff68 	bl	8000574 <__aeabi_i2d>
 80116a4:	4632      	mov	r2, r6
 80116a6:	463b      	mov	r3, r7
 80116a8:	f7ef fa36 	bl	8000b18 <__aeabi_dcmpeq>
 80116ac:	b910      	cbnz	r0, 80116b4 <_dtoa_r+0x184>
 80116ae:	9b00      	ldr	r3, [sp, #0]
 80116b0:	3b01      	subs	r3, #1
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	9b00      	ldr	r3, [sp, #0]
 80116b6:	2b16      	cmp	r3, #22
 80116b8:	d85a      	bhi.n	8011770 <_dtoa_r+0x240>
 80116ba:	9a00      	ldr	r2, [sp, #0]
 80116bc:	4b57      	ldr	r3, [pc, #348]	; (801181c <_dtoa_r+0x2ec>)
 80116be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c6:	ec51 0b19 	vmov	r0, r1, d9
 80116ca:	f7ef fa2f 	bl	8000b2c <__aeabi_dcmplt>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d050      	beq.n	8011774 <_dtoa_r+0x244>
 80116d2:	9b00      	ldr	r3, [sp, #0]
 80116d4:	3b01      	subs	r3, #1
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	2300      	movs	r3, #0
 80116da:	930b      	str	r3, [sp, #44]	; 0x2c
 80116dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116de:	1b5d      	subs	r5, r3, r5
 80116e0:	1e6b      	subs	r3, r5, #1
 80116e2:	9305      	str	r3, [sp, #20]
 80116e4:	bf45      	ittet	mi
 80116e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80116ea:	9304      	strmi	r3, [sp, #16]
 80116ec:	2300      	movpl	r3, #0
 80116ee:	2300      	movmi	r3, #0
 80116f0:	bf4c      	ite	mi
 80116f2:	9305      	strmi	r3, [sp, #20]
 80116f4:	9304      	strpl	r3, [sp, #16]
 80116f6:	9b00      	ldr	r3, [sp, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	db3d      	blt.n	8011778 <_dtoa_r+0x248>
 80116fc:	9b05      	ldr	r3, [sp, #20]
 80116fe:	9a00      	ldr	r2, [sp, #0]
 8011700:	920a      	str	r2, [sp, #40]	; 0x28
 8011702:	4413      	add	r3, r2
 8011704:	9305      	str	r3, [sp, #20]
 8011706:	2300      	movs	r3, #0
 8011708:	9307      	str	r3, [sp, #28]
 801170a:	9b06      	ldr	r3, [sp, #24]
 801170c:	2b09      	cmp	r3, #9
 801170e:	f200 8089 	bhi.w	8011824 <_dtoa_r+0x2f4>
 8011712:	2b05      	cmp	r3, #5
 8011714:	bfc4      	itt	gt
 8011716:	3b04      	subgt	r3, #4
 8011718:	9306      	strgt	r3, [sp, #24]
 801171a:	9b06      	ldr	r3, [sp, #24]
 801171c:	f1a3 0302 	sub.w	r3, r3, #2
 8011720:	bfcc      	ite	gt
 8011722:	2500      	movgt	r5, #0
 8011724:	2501      	movle	r5, #1
 8011726:	2b03      	cmp	r3, #3
 8011728:	f200 8087 	bhi.w	801183a <_dtoa_r+0x30a>
 801172c:	e8df f003 	tbb	[pc, r3]
 8011730:	59383a2d 	.word	0x59383a2d
 8011734:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011738:	441d      	add	r5, r3
 801173a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801173e:	2b20      	cmp	r3, #32
 8011740:	bfc1      	itttt	gt
 8011742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011746:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801174a:	fa0b f303 	lslgt.w	r3, fp, r3
 801174e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011752:	bfda      	itte	le
 8011754:	f1c3 0320 	rsble	r3, r3, #32
 8011758:	fa06 f003 	lslle.w	r0, r6, r3
 801175c:	4318      	orrgt	r0, r3
 801175e:	f7ee fef9 	bl	8000554 <__aeabi_ui2d>
 8011762:	2301      	movs	r3, #1
 8011764:	4606      	mov	r6, r0
 8011766:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801176a:	3d01      	subs	r5, #1
 801176c:	930e      	str	r3, [sp, #56]	; 0x38
 801176e:	e76a      	b.n	8011646 <_dtoa_r+0x116>
 8011770:	2301      	movs	r3, #1
 8011772:	e7b2      	b.n	80116da <_dtoa_r+0x1aa>
 8011774:	900b      	str	r0, [sp, #44]	; 0x2c
 8011776:	e7b1      	b.n	80116dc <_dtoa_r+0x1ac>
 8011778:	9b04      	ldr	r3, [sp, #16]
 801177a:	9a00      	ldr	r2, [sp, #0]
 801177c:	1a9b      	subs	r3, r3, r2
 801177e:	9304      	str	r3, [sp, #16]
 8011780:	4253      	negs	r3, r2
 8011782:	9307      	str	r3, [sp, #28]
 8011784:	2300      	movs	r3, #0
 8011786:	930a      	str	r3, [sp, #40]	; 0x28
 8011788:	e7bf      	b.n	801170a <_dtoa_r+0x1da>
 801178a:	2300      	movs	r3, #0
 801178c:	9308      	str	r3, [sp, #32]
 801178e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011790:	2b00      	cmp	r3, #0
 8011792:	dc55      	bgt.n	8011840 <_dtoa_r+0x310>
 8011794:	2301      	movs	r3, #1
 8011796:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801179a:	461a      	mov	r2, r3
 801179c:	9209      	str	r2, [sp, #36]	; 0x24
 801179e:	e00c      	b.n	80117ba <_dtoa_r+0x28a>
 80117a0:	2301      	movs	r3, #1
 80117a2:	e7f3      	b.n	801178c <_dtoa_r+0x25c>
 80117a4:	2300      	movs	r3, #0
 80117a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117a8:	9308      	str	r3, [sp, #32]
 80117aa:	9b00      	ldr	r3, [sp, #0]
 80117ac:	4413      	add	r3, r2
 80117ae:	9302      	str	r3, [sp, #8]
 80117b0:	3301      	adds	r3, #1
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	9303      	str	r3, [sp, #12]
 80117b6:	bfb8      	it	lt
 80117b8:	2301      	movlt	r3, #1
 80117ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80117bc:	2200      	movs	r2, #0
 80117be:	6042      	str	r2, [r0, #4]
 80117c0:	2204      	movs	r2, #4
 80117c2:	f102 0614 	add.w	r6, r2, #20
 80117c6:	429e      	cmp	r6, r3
 80117c8:	6841      	ldr	r1, [r0, #4]
 80117ca:	d93d      	bls.n	8011848 <_dtoa_r+0x318>
 80117cc:	4620      	mov	r0, r4
 80117ce:	f001 fa63 	bl	8012c98 <_Balloc>
 80117d2:	9001      	str	r0, [sp, #4]
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d13b      	bne.n	8011850 <_dtoa_r+0x320>
 80117d8:	4b11      	ldr	r3, [pc, #68]	; (8011820 <_dtoa_r+0x2f0>)
 80117da:	4602      	mov	r2, r0
 80117dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80117e0:	e6c0      	b.n	8011564 <_dtoa_r+0x34>
 80117e2:	2301      	movs	r3, #1
 80117e4:	e7df      	b.n	80117a6 <_dtoa_r+0x276>
 80117e6:	bf00      	nop
 80117e8:	636f4361 	.word	0x636f4361
 80117ec:	3fd287a7 	.word	0x3fd287a7
 80117f0:	8b60c8b3 	.word	0x8b60c8b3
 80117f4:	3fc68a28 	.word	0x3fc68a28
 80117f8:	509f79fb 	.word	0x509f79fb
 80117fc:	3fd34413 	.word	0x3fd34413
 8011800:	0802aace 	.word	0x0802aace
 8011804:	0802aae5 	.word	0x0802aae5
 8011808:	7ff00000 	.word	0x7ff00000
 801180c:	0802aaca 	.word	0x0802aaca
 8011810:	0802aac1 	.word	0x0802aac1
 8011814:	0802a946 	.word	0x0802a946
 8011818:	3ff80000 	.word	0x3ff80000
 801181c:	0802ad18 	.word	0x0802ad18
 8011820:	0802ab63 	.word	0x0802ab63
 8011824:	2501      	movs	r5, #1
 8011826:	2300      	movs	r3, #0
 8011828:	9306      	str	r3, [sp, #24]
 801182a:	9508      	str	r5, [sp, #32]
 801182c:	f04f 33ff 	mov.w	r3, #4294967295
 8011830:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011834:	2200      	movs	r2, #0
 8011836:	2312      	movs	r3, #18
 8011838:	e7b0      	b.n	801179c <_dtoa_r+0x26c>
 801183a:	2301      	movs	r3, #1
 801183c:	9308      	str	r3, [sp, #32]
 801183e:	e7f5      	b.n	801182c <_dtoa_r+0x2fc>
 8011840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011842:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011846:	e7b8      	b.n	80117ba <_dtoa_r+0x28a>
 8011848:	3101      	adds	r1, #1
 801184a:	6041      	str	r1, [r0, #4]
 801184c:	0052      	lsls	r2, r2, #1
 801184e:	e7b8      	b.n	80117c2 <_dtoa_r+0x292>
 8011850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011852:	9a01      	ldr	r2, [sp, #4]
 8011854:	601a      	str	r2, [r3, #0]
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	2b0e      	cmp	r3, #14
 801185a:	f200 809d 	bhi.w	8011998 <_dtoa_r+0x468>
 801185e:	2d00      	cmp	r5, #0
 8011860:	f000 809a 	beq.w	8011998 <_dtoa_r+0x468>
 8011864:	9b00      	ldr	r3, [sp, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	dd32      	ble.n	80118d0 <_dtoa_r+0x3a0>
 801186a:	4ab7      	ldr	r2, [pc, #732]	; (8011b48 <_dtoa_r+0x618>)
 801186c:	f003 030f 	and.w	r3, r3, #15
 8011870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011878:	9b00      	ldr	r3, [sp, #0]
 801187a:	05d8      	lsls	r0, r3, #23
 801187c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011880:	d516      	bpl.n	80118b0 <_dtoa_r+0x380>
 8011882:	4bb2      	ldr	r3, [pc, #712]	; (8011b4c <_dtoa_r+0x61c>)
 8011884:	ec51 0b19 	vmov	r0, r1, d9
 8011888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801188c:	f7ef f806 	bl	800089c <__aeabi_ddiv>
 8011890:	f007 070f 	and.w	r7, r7, #15
 8011894:	4682      	mov	sl, r0
 8011896:	468b      	mov	fp, r1
 8011898:	2503      	movs	r5, #3
 801189a:	4eac      	ldr	r6, [pc, #688]	; (8011b4c <_dtoa_r+0x61c>)
 801189c:	b957      	cbnz	r7, 80118b4 <_dtoa_r+0x384>
 801189e:	4642      	mov	r2, r8
 80118a0:	464b      	mov	r3, r9
 80118a2:	4650      	mov	r0, sl
 80118a4:	4659      	mov	r1, fp
 80118a6:	f7ee fff9 	bl	800089c <__aeabi_ddiv>
 80118aa:	4682      	mov	sl, r0
 80118ac:	468b      	mov	fp, r1
 80118ae:	e028      	b.n	8011902 <_dtoa_r+0x3d2>
 80118b0:	2502      	movs	r5, #2
 80118b2:	e7f2      	b.n	801189a <_dtoa_r+0x36a>
 80118b4:	07f9      	lsls	r1, r7, #31
 80118b6:	d508      	bpl.n	80118ca <_dtoa_r+0x39a>
 80118b8:	4640      	mov	r0, r8
 80118ba:	4649      	mov	r1, r9
 80118bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80118c0:	f7ee fec2 	bl	8000648 <__aeabi_dmul>
 80118c4:	3501      	adds	r5, #1
 80118c6:	4680      	mov	r8, r0
 80118c8:	4689      	mov	r9, r1
 80118ca:	107f      	asrs	r7, r7, #1
 80118cc:	3608      	adds	r6, #8
 80118ce:	e7e5      	b.n	801189c <_dtoa_r+0x36c>
 80118d0:	f000 809b 	beq.w	8011a0a <_dtoa_r+0x4da>
 80118d4:	9b00      	ldr	r3, [sp, #0]
 80118d6:	4f9d      	ldr	r7, [pc, #628]	; (8011b4c <_dtoa_r+0x61c>)
 80118d8:	425e      	negs	r6, r3
 80118da:	4b9b      	ldr	r3, [pc, #620]	; (8011b48 <_dtoa_r+0x618>)
 80118dc:	f006 020f 	and.w	r2, r6, #15
 80118e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e8:	ec51 0b19 	vmov	r0, r1, d9
 80118ec:	f7ee feac 	bl	8000648 <__aeabi_dmul>
 80118f0:	1136      	asrs	r6, r6, #4
 80118f2:	4682      	mov	sl, r0
 80118f4:	468b      	mov	fp, r1
 80118f6:	2300      	movs	r3, #0
 80118f8:	2502      	movs	r5, #2
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d17a      	bne.n	80119f4 <_dtoa_r+0x4c4>
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1d3      	bne.n	80118aa <_dtoa_r+0x37a>
 8011902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 8082 	beq.w	8011a0e <_dtoa_r+0x4de>
 801190a:	4b91      	ldr	r3, [pc, #580]	; (8011b50 <_dtoa_r+0x620>)
 801190c:	2200      	movs	r2, #0
 801190e:	4650      	mov	r0, sl
 8011910:	4659      	mov	r1, fp
 8011912:	f7ef f90b 	bl	8000b2c <__aeabi_dcmplt>
 8011916:	2800      	cmp	r0, #0
 8011918:	d079      	beq.n	8011a0e <_dtoa_r+0x4de>
 801191a:	9b03      	ldr	r3, [sp, #12]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d076      	beq.n	8011a0e <_dtoa_r+0x4de>
 8011920:	9b02      	ldr	r3, [sp, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	dd36      	ble.n	8011994 <_dtoa_r+0x464>
 8011926:	9b00      	ldr	r3, [sp, #0]
 8011928:	4650      	mov	r0, sl
 801192a:	4659      	mov	r1, fp
 801192c:	1e5f      	subs	r7, r3, #1
 801192e:	2200      	movs	r2, #0
 8011930:	4b88      	ldr	r3, [pc, #544]	; (8011b54 <_dtoa_r+0x624>)
 8011932:	f7ee fe89 	bl	8000648 <__aeabi_dmul>
 8011936:	9e02      	ldr	r6, [sp, #8]
 8011938:	4682      	mov	sl, r0
 801193a:	468b      	mov	fp, r1
 801193c:	3501      	adds	r5, #1
 801193e:	4628      	mov	r0, r5
 8011940:	f7ee fe18 	bl	8000574 <__aeabi_i2d>
 8011944:	4652      	mov	r2, sl
 8011946:	465b      	mov	r3, fp
 8011948:	f7ee fe7e 	bl	8000648 <__aeabi_dmul>
 801194c:	4b82      	ldr	r3, [pc, #520]	; (8011b58 <_dtoa_r+0x628>)
 801194e:	2200      	movs	r2, #0
 8011950:	f7ee fcc4 	bl	80002dc <__adddf3>
 8011954:	46d0      	mov	r8, sl
 8011956:	46d9      	mov	r9, fp
 8011958:	4682      	mov	sl, r0
 801195a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801195e:	2e00      	cmp	r6, #0
 8011960:	d158      	bne.n	8011a14 <_dtoa_r+0x4e4>
 8011962:	4b7e      	ldr	r3, [pc, #504]	; (8011b5c <_dtoa_r+0x62c>)
 8011964:	2200      	movs	r2, #0
 8011966:	4640      	mov	r0, r8
 8011968:	4649      	mov	r1, r9
 801196a:	f7ee fcb5 	bl	80002d8 <__aeabi_dsub>
 801196e:	4652      	mov	r2, sl
 8011970:	465b      	mov	r3, fp
 8011972:	4680      	mov	r8, r0
 8011974:	4689      	mov	r9, r1
 8011976:	f7ef f8f7 	bl	8000b68 <__aeabi_dcmpgt>
 801197a:	2800      	cmp	r0, #0
 801197c:	f040 8295 	bne.w	8011eaa <_dtoa_r+0x97a>
 8011980:	4652      	mov	r2, sl
 8011982:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011986:	4640      	mov	r0, r8
 8011988:	4649      	mov	r1, r9
 801198a:	f7ef f8cf 	bl	8000b2c <__aeabi_dcmplt>
 801198e:	2800      	cmp	r0, #0
 8011990:	f040 8289 	bne.w	8011ea6 <_dtoa_r+0x976>
 8011994:	ec5b ab19 	vmov	sl, fp, d9
 8011998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801199a:	2b00      	cmp	r3, #0
 801199c:	f2c0 8148 	blt.w	8011c30 <_dtoa_r+0x700>
 80119a0:	9a00      	ldr	r2, [sp, #0]
 80119a2:	2a0e      	cmp	r2, #14
 80119a4:	f300 8144 	bgt.w	8011c30 <_dtoa_r+0x700>
 80119a8:	4b67      	ldr	r3, [pc, #412]	; (8011b48 <_dtoa_r+0x618>)
 80119aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f280 80d5 	bge.w	8011b64 <_dtoa_r+0x634>
 80119ba:	9b03      	ldr	r3, [sp, #12]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f300 80d1 	bgt.w	8011b64 <_dtoa_r+0x634>
 80119c2:	f040 826f 	bne.w	8011ea4 <_dtoa_r+0x974>
 80119c6:	4b65      	ldr	r3, [pc, #404]	; (8011b5c <_dtoa_r+0x62c>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	4640      	mov	r0, r8
 80119cc:	4649      	mov	r1, r9
 80119ce:	f7ee fe3b 	bl	8000648 <__aeabi_dmul>
 80119d2:	4652      	mov	r2, sl
 80119d4:	465b      	mov	r3, fp
 80119d6:	f7ef f8bd 	bl	8000b54 <__aeabi_dcmpge>
 80119da:	9e03      	ldr	r6, [sp, #12]
 80119dc:	4637      	mov	r7, r6
 80119de:	2800      	cmp	r0, #0
 80119e0:	f040 8245 	bne.w	8011e6e <_dtoa_r+0x93e>
 80119e4:	9d01      	ldr	r5, [sp, #4]
 80119e6:	2331      	movs	r3, #49	; 0x31
 80119e8:	f805 3b01 	strb.w	r3, [r5], #1
 80119ec:	9b00      	ldr	r3, [sp, #0]
 80119ee:	3301      	adds	r3, #1
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	e240      	b.n	8011e76 <_dtoa_r+0x946>
 80119f4:	07f2      	lsls	r2, r6, #31
 80119f6:	d505      	bpl.n	8011a04 <_dtoa_r+0x4d4>
 80119f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119fc:	f7ee fe24 	bl	8000648 <__aeabi_dmul>
 8011a00:	3501      	adds	r5, #1
 8011a02:	2301      	movs	r3, #1
 8011a04:	1076      	asrs	r6, r6, #1
 8011a06:	3708      	adds	r7, #8
 8011a08:	e777      	b.n	80118fa <_dtoa_r+0x3ca>
 8011a0a:	2502      	movs	r5, #2
 8011a0c:	e779      	b.n	8011902 <_dtoa_r+0x3d2>
 8011a0e:	9f00      	ldr	r7, [sp, #0]
 8011a10:	9e03      	ldr	r6, [sp, #12]
 8011a12:	e794      	b.n	801193e <_dtoa_r+0x40e>
 8011a14:	9901      	ldr	r1, [sp, #4]
 8011a16:	4b4c      	ldr	r3, [pc, #304]	; (8011b48 <_dtoa_r+0x618>)
 8011a18:	4431      	add	r1, r6
 8011a1a:	910d      	str	r1, [sp, #52]	; 0x34
 8011a1c:	9908      	ldr	r1, [sp, #32]
 8011a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011a22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011a26:	2900      	cmp	r1, #0
 8011a28:	d043      	beq.n	8011ab2 <_dtoa_r+0x582>
 8011a2a:	494d      	ldr	r1, [pc, #308]	; (8011b60 <_dtoa_r+0x630>)
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	f7ee ff35 	bl	800089c <__aeabi_ddiv>
 8011a32:	4652      	mov	r2, sl
 8011a34:	465b      	mov	r3, fp
 8011a36:	f7ee fc4f 	bl	80002d8 <__aeabi_dsub>
 8011a3a:	9d01      	ldr	r5, [sp, #4]
 8011a3c:	4682      	mov	sl, r0
 8011a3e:	468b      	mov	fp, r1
 8011a40:	4649      	mov	r1, r9
 8011a42:	4640      	mov	r0, r8
 8011a44:	f7ef f8b0 	bl	8000ba8 <__aeabi_d2iz>
 8011a48:	4606      	mov	r6, r0
 8011a4a:	f7ee fd93 	bl	8000574 <__aeabi_i2d>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	460b      	mov	r3, r1
 8011a52:	4640      	mov	r0, r8
 8011a54:	4649      	mov	r1, r9
 8011a56:	f7ee fc3f 	bl	80002d8 <__aeabi_dsub>
 8011a5a:	3630      	adds	r6, #48	; 0x30
 8011a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8011a60:	4652      	mov	r2, sl
 8011a62:	465b      	mov	r3, fp
 8011a64:	4680      	mov	r8, r0
 8011a66:	4689      	mov	r9, r1
 8011a68:	f7ef f860 	bl	8000b2c <__aeabi_dcmplt>
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d163      	bne.n	8011b38 <_dtoa_r+0x608>
 8011a70:	4642      	mov	r2, r8
 8011a72:	464b      	mov	r3, r9
 8011a74:	4936      	ldr	r1, [pc, #216]	; (8011b50 <_dtoa_r+0x620>)
 8011a76:	2000      	movs	r0, #0
 8011a78:	f7ee fc2e 	bl	80002d8 <__aeabi_dsub>
 8011a7c:	4652      	mov	r2, sl
 8011a7e:	465b      	mov	r3, fp
 8011a80:	f7ef f854 	bl	8000b2c <__aeabi_dcmplt>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	f040 80b5 	bne.w	8011bf4 <_dtoa_r+0x6c4>
 8011a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a8c:	429d      	cmp	r5, r3
 8011a8e:	d081      	beq.n	8011994 <_dtoa_r+0x464>
 8011a90:	4b30      	ldr	r3, [pc, #192]	; (8011b54 <_dtoa_r+0x624>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	4650      	mov	r0, sl
 8011a96:	4659      	mov	r1, fp
 8011a98:	f7ee fdd6 	bl	8000648 <__aeabi_dmul>
 8011a9c:	4b2d      	ldr	r3, [pc, #180]	; (8011b54 <_dtoa_r+0x624>)
 8011a9e:	4682      	mov	sl, r0
 8011aa0:	468b      	mov	fp, r1
 8011aa2:	4640      	mov	r0, r8
 8011aa4:	4649      	mov	r1, r9
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f7ee fdce 	bl	8000648 <__aeabi_dmul>
 8011aac:	4680      	mov	r8, r0
 8011aae:	4689      	mov	r9, r1
 8011ab0:	e7c6      	b.n	8011a40 <_dtoa_r+0x510>
 8011ab2:	4650      	mov	r0, sl
 8011ab4:	4659      	mov	r1, fp
 8011ab6:	f7ee fdc7 	bl	8000648 <__aeabi_dmul>
 8011aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011abc:	9d01      	ldr	r5, [sp, #4]
 8011abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ac0:	4682      	mov	sl, r0
 8011ac2:	468b      	mov	fp, r1
 8011ac4:	4649      	mov	r1, r9
 8011ac6:	4640      	mov	r0, r8
 8011ac8:	f7ef f86e 	bl	8000ba8 <__aeabi_d2iz>
 8011acc:	4606      	mov	r6, r0
 8011ace:	f7ee fd51 	bl	8000574 <__aeabi_i2d>
 8011ad2:	3630      	adds	r6, #48	; 0x30
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	460b      	mov	r3, r1
 8011ad8:	4640      	mov	r0, r8
 8011ada:	4649      	mov	r1, r9
 8011adc:	f7ee fbfc 	bl	80002d8 <__aeabi_dsub>
 8011ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8011ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ae6:	429d      	cmp	r5, r3
 8011ae8:	4680      	mov	r8, r0
 8011aea:	4689      	mov	r9, r1
 8011aec:	f04f 0200 	mov.w	r2, #0
 8011af0:	d124      	bne.n	8011b3c <_dtoa_r+0x60c>
 8011af2:	4b1b      	ldr	r3, [pc, #108]	; (8011b60 <_dtoa_r+0x630>)
 8011af4:	4650      	mov	r0, sl
 8011af6:	4659      	mov	r1, fp
 8011af8:	f7ee fbf0 	bl	80002dc <__adddf3>
 8011afc:	4602      	mov	r2, r0
 8011afe:	460b      	mov	r3, r1
 8011b00:	4640      	mov	r0, r8
 8011b02:	4649      	mov	r1, r9
 8011b04:	f7ef f830 	bl	8000b68 <__aeabi_dcmpgt>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d173      	bne.n	8011bf4 <_dtoa_r+0x6c4>
 8011b0c:	4652      	mov	r2, sl
 8011b0e:	465b      	mov	r3, fp
 8011b10:	4913      	ldr	r1, [pc, #76]	; (8011b60 <_dtoa_r+0x630>)
 8011b12:	2000      	movs	r0, #0
 8011b14:	f7ee fbe0 	bl	80002d8 <__aeabi_dsub>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	4640      	mov	r0, r8
 8011b1e:	4649      	mov	r1, r9
 8011b20:	f7ef f804 	bl	8000b2c <__aeabi_dcmplt>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	f43f af35 	beq.w	8011994 <_dtoa_r+0x464>
 8011b2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011b2c:	1e6b      	subs	r3, r5, #1
 8011b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b34:	2b30      	cmp	r3, #48	; 0x30
 8011b36:	d0f8      	beq.n	8011b2a <_dtoa_r+0x5fa>
 8011b38:	9700      	str	r7, [sp, #0]
 8011b3a:	e049      	b.n	8011bd0 <_dtoa_r+0x6a0>
 8011b3c:	4b05      	ldr	r3, [pc, #20]	; (8011b54 <_dtoa_r+0x624>)
 8011b3e:	f7ee fd83 	bl	8000648 <__aeabi_dmul>
 8011b42:	4680      	mov	r8, r0
 8011b44:	4689      	mov	r9, r1
 8011b46:	e7bd      	b.n	8011ac4 <_dtoa_r+0x594>
 8011b48:	0802ad18 	.word	0x0802ad18
 8011b4c:	0802acf0 	.word	0x0802acf0
 8011b50:	3ff00000 	.word	0x3ff00000
 8011b54:	40240000 	.word	0x40240000
 8011b58:	401c0000 	.word	0x401c0000
 8011b5c:	40140000 	.word	0x40140000
 8011b60:	3fe00000 	.word	0x3fe00000
 8011b64:	9d01      	ldr	r5, [sp, #4]
 8011b66:	4656      	mov	r6, sl
 8011b68:	465f      	mov	r7, fp
 8011b6a:	4642      	mov	r2, r8
 8011b6c:	464b      	mov	r3, r9
 8011b6e:	4630      	mov	r0, r6
 8011b70:	4639      	mov	r1, r7
 8011b72:	f7ee fe93 	bl	800089c <__aeabi_ddiv>
 8011b76:	f7ef f817 	bl	8000ba8 <__aeabi_d2iz>
 8011b7a:	4682      	mov	sl, r0
 8011b7c:	f7ee fcfa 	bl	8000574 <__aeabi_i2d>
 8011b80:	4642      	mov	r2, r8
 8011b82:	464b      	mov	r3, r9
 8011b84:	f7ee fd60 	bl	8000648 <__aeabi_dmul>
 8011b88:	4602      	mov	r2, r0
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	4639      	mov	r1, r7
 8011b90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011b94:	f7ee fba0 	bl	80002d8 <__aeabi_dsub>
 8011b98:	f805 6b01 	strb.w	r6, [r5], #1
 8011b9c:	9e01      	ldr	r6, [sp, #4]
 8011b9e:	9f03      	ldr	r7, [sp, #12]
 8011ba0:	1bae      	subs	r6, r5, r6
 8011ba2:	42b7      	cmp	r7, r6
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	d135      	bne.n	8011c16 <_dtoa_r+0x6e6>
 8011baa:	f7ee fb97 	bl	80002dc <__adddf3>
 8011bae:	4642      	mov	r2, r8
 8011bb0:	464b      	mov	r3, r9
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	460f      	mov	r7, r1
 8011bb6:	f7ee ffd7 	bl	8000b68 <__aeabi_dcmpgt>
 8011bba:	b9d0      	cbnz	r0, 8011bf2 <_dtoa_r+0x6c2>
 8011bbc:	4642      	mov	r2, r8
 8011bbe:	464b      	mov	r3, r9
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	4639      	mov	r1, r7
 8011bc4:	f7ee ffa8 	bl	8000b18 <__aeabi_dcmpeq>
 8011bc8:	b110      	cbz	r0, 8011bd0 <_dtoa_r+0x6a0>
 8011bca:	f01a 0f01 	tst.w	sl, #1
 8011bce:	d110      	bne.n	8011bf2 <_dtoa_r+0x6c2>
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	ee18 1a10 	vmov	r1, s16
 8011bd6:	f001 f89f 	bl	8012d18 <_Bfree>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	9800      	ldr	r0, [sp, #0]
 8011bde:	702b      	strb	r3, [r5, #0]
 8011be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011be2:	3001      	adds	r0, #1
 8011be4:	6018      	str	r0, [r3, #0]
 8011be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f43f acf1 	beq.w	80115d0 <_dtoa_r+0xa0>
 8011bee:	601d      	str	r5, [r3, #0]
 8011bf0:	e4ee      	b.n	80115d0 <_dtoa_r+0xa0>
 8011bf2:	9f00      	ldr	r7, [sp, #0]
 8011bf4:	462b      	mov	r3, r5
 8011bf6:	461d      	mov	r5, r3
 8011bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011bfc:	2a39      	cmp	r2, #57	; 0x39
 8011bfe:	d106      	bne.n	8011c0e <_dtoa_r+0x6de>
 8011c00:	9a01      	ldr	r2, [sp, #4]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d1f7      	bne.n	8011bf6 <_dtoa_r+0x6c6>
 8011c06:	9901      	ldr	r1, [sp, #4]
 8011c08:	2230      	movs	r2, #48	; 0x30
 8011c0a:	3701      	adds	r7, #1
 8011c0c:	700a      	strb	r2, [r1, #0]
 8011c0e:	781a      	ldrb	r2, [r3, #0]
 8011c10:	3201      	adds	r2, #1
 8011c12:	701a      	strb	r2, [r3, #0]
 8011c14:	e790      	b.n	8011b38 <_dtoa_r+0x608>
 8011c16:	4ba6      	ldr	r3, [pc, #664]	; (8011eb0 <_dtoa_r+0x980>)
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f7ee fd15 	bl	8000648 <__aeabi_dmul>
 8011c1e:	2200      	movs	r2, #0
 8011c20:	2300      	movs	r3, #0
 8011c22:	4606      	mov	r6, r0
 8011c24:	460f      	mov	r7, r1
 8011c26:	f7ee ff77 	bl	8000b18 <__aeabi_dcmpeq>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d09d      	beq.n	8011b6a <_dtoa_r+0x63a>
 8011c2e:	e7cf      	b.n	8011bd0 <_dtoa_r+0x6a0>
 8011c30:	9a08      	ldr	r2, [sp, #32]
 8011c32:	2a00      	cmp	r2, #0
 8011c34:	f000 80d7 	beq.w	8011de6 <_dtoa_r+0x8b6>
 8011c38:	9a06      	ldr	r2, [sp, #24]
 8011c3a:	2a01      	cmp	r2, #1
 8011c3c:	f300 80ba 	bgt.w	8011db4 <_dtoa_r+0x884>
 8011c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c42:	2a00      	cmp	r2, #0
 8011c44:	f000 80b2 	beq.w	8011dac <_dtoa_r+0x87c>
 8011c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011c4c:	9e07      	ldr	r6, [sp, #28]
 8011c4e:	9d04      	ldr	r5, [sp, #16]
 8011c50:	9a04      	ldr	r2, [sp, #16]
 8011c52:	441a      	add	r2, r3
 8011c54:	9204      	str	r2, [sp, #16]
 8011c56:	9a05      	ldr	r2, [sp, #20]
 8011c58:	2101      	movs	r1, #1
 8011c5a:	441a      	add	r2, r3
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	9205      	str	r2, [sp, #20]
 8011c60:	f001 f95c 	bl	8012f1c <__i2b>
 8011c64:	4607      	mov	r7, r0
 8011c66:	2d00      	cmp	r5, #0
 8011c68:	dd0c      	ble.n	8011c84 <_dtoa_r+0x754>
 8011c6a:	9b05      	ldr	r3, [sp, #20]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	dd09      	ble.n	8011c84 <_dtoa_r+0x754>
 8011c70:	42ab      	cmp	r3, r5
 8011c72:	9a04      	ldr	r2, [sp, #16]
 8011c74:	bfa8      	it	ge
 8011c76:	462b      	movge	r3, r5
 8011c78:	1ad2      	subs	r2, r2, r3
 8011c7a:	9204      	str	r2, [sp, #16]
 8011c7c:	9a05      	ldr	r2, [sp, #20]
 8011c7e:	1aed      	subs	r5, r5, r3
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	9b07      	ldr	r3, [sp, #28]
 8011c86:	b31b      	cbz	r3, 8011cd0 <_dtoa_r+0x7a0>
 8011c88:	9b08      	ldr	r3, [sp, #32]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f000 80af 	beq.w	8011dee <_dtoa_r+0x8be>
 8011c90:	2e00      	cmp	r6, #0
 8011c92:	dd13      	ble.n	8011cbc <_dtoa_r+0x78c>
 8011c94:	4639      	mov	r1, r7
 8011c96:	4632      	mov	r2, r6
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f001 f9ff 	bl	801309c <__pow5mult>
 8011c9e:	ee18 2a10 	vmov	r2, s16
 8011ca2:	4601      	mov	r1, r0
 8011ca4:	4607      	mov	r7, r0
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f001 f94e 	bl	8012f48 <__multiply>
 8011cac:	ee18 1a10 	vmov	r1, s16
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f001 f830 	bl	8012d18 <_Bfree>
 8011cb8:	ee08 8a10 	vmov	s16, r8
 8011cbc:	9b07      	ldr	r3, [sp, #28]
 8011cbe:	1b9a      	subs	r2, r3, r6
 8011cc0:	d006      	beq.n	8011cd0 <_dtoa_r+0x7a0>
 8011cc2:	ee18 1a10 	vmov	r1, s16
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	f001 f9e8 	bl	801309c <__pow5mult>
 8011ccc:	ee08 0a10 	vmov	s16, r0
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f001 f922 	bl	8012f1c <__i2b>
 8011cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	4606      	mov	r6, r0
 8011cde:	f340 8088 	ble.w	8011df2 <_dtoa_r+0x8c2>
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f001 f9d8 	bl	801309c <__pow5mult>
 8011cec:	9b06      	ldr	r3, [sp, #24]
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	f340 8081 	ble.w	8011df8 <_dtoa_r+0x8c8>
 8011cf6:	f04f 0800 	mov.w	r8, #0
 8011cfa:	6933      	ldr	r3, [r6, #16]
 8011cfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011d00:	6918      	ldr	r0, [r3, #16]
 8011d02:	f001 f8bb 	bl	8012e7c <__hi0bits>
 8011d06:	f1c0 0020 	rsb	r0, r0, #32
 8011d0a:	9b05      	ldr	r3, [sp, #20]
 8011d0c:	4418      	add	r0, r3
 8011d0e:	f010 001f 	ands.w	r0, r0, #31
 8011d12:	f000 8092 	beq.w	8011e3a <_dtoa_r+0x90a>
 8011d16:	f1c0 0320 	rsb	r3, r0, #32
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	f340 808a 	ble.w	8011e34 <_dtoa_r+0x904>
 8011d20:	f1c0 001c 	rsb	r0, r0, #28
 8011d24:	9b04      	ldr	r3, [sp, #16]
 8011d26:	4403      	add	r3, r0
 8011d28:	9304      	str	r3, [sp, #16]
 8011d2a:	9b05      	ldr	r3, [sp, #20]
 8011d2c:	4403      	add	r3, r0
 8011d2e:	4405      	add	r5, r0
 8011d30:	9305      	str	r3, [sp, #20]
 8011d32:	9b04      	ldr	r3, [sp, #16]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dd07      	ble.n	8011d48 <_dtoa_r+0x818>
 8011d38:	ee18 1a10 	vmov	r1, s16
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f001 fa06 	bl	8013150 <__lshift>
 8011d44:	ee08 0a10 	vmov	s16, r0
 8011d48:	9b05      	ldr	r3, [sp, #20]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	dd05      	ble.n	8011d5a <_dtoa_r+0x82a>
 8011d4e:	4631      	mov	r1, r6
 8011d50:	461a      	mov	r2, r3
 8011d52:	4620      	mov	r0, r4
 8011d54:	f001 f9fc 	bl	8013150 <__lshift>
 8011d58:	4606      	mov	r6, r0
 8011d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d06e      	beq.n	8011e3e <_dtoa_r+0x90e>
 8011d60:	ee18 0a10 	vmov	r0, s16
 8011d64:	4631      	mov	r1, r6
 8011d66:	f001 fa63 	bl	8013230 <__mcmp>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	da67      	bge.n	8011e3e <_dtoa_r+0x90e>
 8011d6e:	9b00      	ldr	r3, [sp, #0]
 8011d70:	3b01      	subs	r3, #1
 8011d72:	ee18 1a10 	vmov	r1, s16
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	220a      	movs	r2, #10
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 ffed 	bl	8012d5c <__multadd>
 8011d82:	9b08      	ldr	r3, [sp, #32]
 8011d84:	ee08 0a10 	vmov	s16, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f000 81b1 	beq.w	80120f0 <_dtoa_r+0xbc0>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	4639      	mov	r1, r7
 8011d92:	220a      	movs	r2, #10
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 ffe1 	bl	8012d5c <__multadd>
 8011d9a:	9b02      	ldr	r3, [sp, #8]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	4607      	mov	r7, r0
 8011da0:	f300 808e 	bgt.w	8011ec0 <_dtoa_r+0x990>
 8011da4:	9b06      	ldr	r3, [sp, #24]
 8011da6:	2b02      	cmp	r3, #2
 8011da8:	dc51      	bgt.n	8011e4e <_dtoa_r+0x91e>
 8011daa:	e089      	b.n	8011ec0 <_dtoa_r+0x990>
 8011dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011db2:	e74b      	b.n	8011c4c <_dtoa_r+0x71c>
 8011db4:	9b03      	ldr	r3, [sp, #12]
 8011db6:	1e5e      	subs	r6, r3, #1
 8011db8:	9b07      	ldr	r3, [sp, #28]
 8011dba:	42b3      	cmp	r3, r6
 8011dbc:	bfbf      	itttt	lt
 8011dbe:	9b07      	ldrlt	r3, [sp, #28]
 8011dc0:	9607      	strlt	r6, [sp, #28]
 8011dc2:	1af2      	sublt	r2, r6, r3
 8011dc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011dc6:	bfb6      	itet	lt
 8011dc8:	189b      	addlt	r3, r3, r2
 8011dca:	1b9e      	subge	r6, r3, r6
 8011dcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011dce:	9b03      	ldr	r3, [sp, #12]
 8011dd0:	bfb8      	it	lt
 8011dd2:	2600      	movlt	r6, #0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	bfb7      	itett	lt
 8011dd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011ddc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011de0:	1a9d      	sublt	r5, r3, r2
 8011de2:	2300      	movlt	r3, #0
 8011de4:	e734      	b.n	8011c50 <_dtoa_r+0x720>
 8011de6:	9e07      	ldr	r6, [sp, #28]
 8011de8:	9d04      	ldr	r5, [sp, #16]
 8011dea:	9f08      	ldr	r7, [sp, #32]
 8011dec:	e73b      	b.n	8011c66 <_dtoa_r+0x736>
 8011dee:	9a07      	ldr	r2, [sp, #28]
 8011df0:	e767      	b.n	8011cc2 <_dtoa_r+0x792>
 8011df2:	9b06      	ldr	r3, [sp, #24]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	dc18      	bgt.n	8011e2a <_dtoa_r+0x8fa>
 8011df8:	f1ba 0f00 	cmp.w	sl, #0
 8011dfc:	d115      	bne.n	8011e2a <_dtoa_r+0x8fa>
 8011dfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e02:	b993      	cbnz	r3, 8011e2a <_dtoa_r+0x8fa>
 8011e04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e08:	0d1b      	lsrs	r3, r3, #20
 8011e0a:	051b      	lsls	r3, r3, #20
 8011e0c:	b183      	cbz	r3, 8011e30 <_dtoa_r+0x900>
 8011e0e:	9b04      	ldr	r3, [sp, #16]
 8011e10:	3301      	adds	r3, #1
 8011e12:	9304      	str	r3, [sp, #16]
 8011e14:	9b05      	ldr	r3, [sp, #20]
 8011e16:	3301      	adds	r3, #1
 8011e18:	9305      	str	r3, [sp, #20]
 8011e1a:	f04f 0801 	mov.w	r8, #1
 8011e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f47f af6a 	bne.w	8011cfa <_dtoa_r+0x7ca>
 8011e26:	2001      	movs	r0, #1
 8011e28:	e76f      	b.n	8011d0a <_dtoa_r+0x7da>
 8011e2a:	f04f 0800 	mov.w	r8, #0
 8011e2e:	e7f6      	b.n	8011e1e <_dtoa_r+0x8ee>
 8011e30:	4698      	mov	r8, r3
 8011e32:	e7f4      	b.n	8011e1e <_dtoa_r+0x8ee>
 8011e34:	f43f af7d 	beq.w	8011d32 <_dtoa_r+0x802>
 8011e38:	4618      	mov	r0, r3
 8011e3a:	301c      	adds	r0, #28
 8011e3c:	e772      	b.n	8011d24 <_dtoa_r+0x7f4>
 8011e3e:	9b03      	ldr	r3, [sp, #12]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	dc37      	bgt.n	8011eb4 <_dtoa_r+0x984>
 8011e44:	9b06      	ldr	r3, [sp, #24]
 8011e46:	2b02      	cmp	r3, #2
 8011e48:	dd34      	ble.n	8011eb4 <_dtoa_r+0x984>
 8011e4a:	9b03      	ldr	r3, [sp, #12]
 8011e4c:	9302      	str	r3, [sp, #8]
 8011e4e:	9b02      	ldr	r3, [sp, #8]
 8011e50:	b96b      	cbnz	r3, 8011e6e <_dtoa_r+0x93e>
 8011e52:	4631      	mov	r1, r6
 8011e54:	2205      	movs	r2, #5
 8011e56:	4620      	mov	r0, r4
 8011e58:	f000 ff80 	bl	8012d5c <__multadd>
 8011e5c:	4601      	mov	r1, r0
 8011e5e:	4606      	mov	r6, r0
 8011e60:	ee18 0a10 	vmov	r0, s16
 8011e64:	f001 f9e4 	bl	8013230 <__mcmp>
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	f73f adbb 	bgt.w	80119e4 <_dtoa_r+0x4b4>
 8011e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e70:	9d01      	ldr	r5, [sp, #4]
 8011e72:	43db      	mvns	r3, r3
 8011e74:	9300      	str	r3, [sp, #0]
 8011e76:	f04f 0800 	mov.w	r8, #0
 8011e7a:	4631      	mov	r1, r6
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f000 ff4b 	bl	8012d18 <_Bfree>
 8011e82:	2f00      	cmp	r7, #0
 8011e84:	f43f aea4 	beq.w	8011bd0 <_dtoa_r+0x6a0>
 8011e88:	f1b8 0f00 	cmp.w	r8, #0
 8011e8c:	d005      	beq.n	8011e9a <_dtoa_r+0x96a>
 8011e8e:	45b8      	cmp	r8, r7
 8011e90:	d003      	beq.n	8011e9a <_dtoa_r+0x96a>
 8011e92:	4641      	mov	r1, r8
 8011e94:	4620      	mov	r0, r4
 8011e96:	f000 ff3f 	bl	8012d18 <_Bfree>
 8011e9a:	4639      	mov	r1, r7
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f000 ff3b 	bl	8012d18 <_Bfree>
 8011ea2:	e695      	b.n	8011bd0 <_dtoa_r+0x6a0>
 8011ea4:	2600      	movs	r6, #0
 8011ea6:	4637      	mov	r7, r6
 8011ea8:	e7e1      	b.n	8011e6e <_dtoa_r+0x93e>
 8011eaa:	9700      	str	r7, [sp, #0]
 8011eac:	4637      	mov	r7, r6
 8011eae:	e599      	b.n	80119e4 <_dtoa_r+0x4b4>
 8011eb0:	40240000 	.word	0x40240000
 8011eb4:	9b08      	ldr	r3, [sp, #32]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f000 80ca 	beq.w	8012050 <_dtoa_r+0xb20>
 8011ebc:	9b03      	ldr	r3, [sp, #12]
 8011ebe:	9302      	str	r3, [sp, #8]
 8011ec0:	2d00      	cmp	r5, #0
 8011ec2:	dd05      	ble.n	8011ed0 <_dtoa_r+0x9a0>
 8011ec4:	4639      	mov	r1, r7
 8011ec6:	462a      	mov	r2, r5
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f001 f941 	bl	8013150 <__lshift>
 8011ece:	4607      	mov	r7, r0
 8011ed0:	f1b8 0f00 	cmp.w	r8, #0
 8011ed4:	d05b      	beq.n	8011f8e <_dtoa_r+0xa5e>
 8011ed6:	6879      	ldr	r1, [r7, #4]
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f000 fedd 	bl	8012c98 <_Balloc>
 8011ede:	4605      	mov	r5, r0
 8011ee0:	b928      	cbnz	r0, 8011eee <_dtoa_r+0x9be>
 8011ee2:	4b87      	ldr	r3, [pc, #540]	; (8012100 <_dtoa_r+0xbd0>)
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011eea:	f7ff bb3b 	b.w	8011564 <_dtoa_r+0x34>
 8011eee:	693a      	ldr	r2, [r7, #16]
 8011ef0:	3202      	adds	r2, #2
 8011ef2:	0092      	lsls	r2, r2, #2
 8011ef4:	f107 010c 	add.w	r1, r7, #12
 8011ef8:	300c      	adds	r0, #12
 8011efa:	f7fd fa93 	bl	800f424 <memcpy>
 8011efe:	2201      	movs	r2, #1
 8011f00:	4629      	mov	r1, r5
 8011f02:	4620      	mov	r0, r4
 8011f04:	f001 f924 	bl	8013150 <__lshift>
 8011f08:	9b01      	ldr	r3, [sp, #4]
 8011f0a:	f103 0901 	add.w	r9, r3, #1
 8011f0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011f12:	4413      	add	r3, r2
 8011f14:	9305      	str	r3, [sp, #20]
 8011f16:	f00a 0301 	and.w	r3, sl, #1
 8011f1a:	46b8      	mov	r8, r7
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	4607      	mov	r7, r0
 8011f20:	4631      	mov	r1, r6
 8011f22:	ee18 0a10 	vmov	r0, s16
 8011f26:	f7ff fa76 	bl	8011416 <quorem>
 8011f2a:	4641      	mov	r1, r8
 8011f2c:	9002      	str	r0, [sp, #8]
 8011f2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011f32:	ee18 0a10 	vmov	r0, s16
 8011f36:	f001 f97b 	bl	8013230 <__mcmp>
 8011f3a:	463a      	mov	r2, r7
 8011f3c:	9003      	str	r0, [sp, #12]
 8011f3e:	4631      	mov	r1, r6
 8011f40:	4620      	mov	r0, r4
 8011f42:	f001 f991 	bl	8013268 <__mdiff>
 8011f46:	68c2      	ldr	r2, [r0, #12]
 8011f48:	f109 3bff 	add.w	fp, r9, #4294967295
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	bb02      	cbnz	r2, 8011f92 <_dtoa_r+0xa62>
 8011f50:	4601      	mov	r1, r0
 8011f52:	ee18 0a10 	vmov	r0, s16
 8011f56:	f001 f96b 	bl	8013230 <__mcmp>
 8011f5a:	4602      	mov	r2, r0
 8011f5c:	4629      	mov	r1, r5
 8011f5e:	4620      	mov	r0, r4
 8011f60:	9207      	str	r2, [sp, #28]
 8011f62:	f000 fed9 	bl	8012d18 <_Bfree>
 8011f66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f6a:	ea43 0102 	orr.w	r1, r3, r2
 8011f6e:	9b04      	ldr	r3, [sp, #16]
 8011f70:	430b      	orrs	r3, r1
 8011f72:	464d      	mov	r5, r9
 8011f74:	d10f      	bne.n	8011f96 <_dtoa_r+0xa66>
 8011f76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f7a:	d02a      	beq.n	8011fd2 <_dtoa_r+0xaa2>
 8011f7c:	9b03      	ldr	r3, [sp, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	dd02      	ble.n	8011f88 <_dtoa_r+0xa58>
 8011f82:	9b02      	ldr	r3, [sp, #8]
 8011f84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011f88:	f88b a000 	strb.w	sl, [fp]
 8011f8c:	e775      	b.n	8011e7a <_dtoa_r+0x94a>
 8011f8e:	4638      	mov	r0, r7
 8011f90:	e7ba      	b.n	8011f08 <_dtoa_r+0x9d8>
 8011f92:	2201      	movs	r2, #1
 8011f94:	e7e2      	b.n	8011f5c <_dtoa_r+0xa2c>
 8011f96:	9b03      	ldr	r3, [sp, #12]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	db04      	blt.n	8011fa6 <_dtoa_r+0xa76>
 8011f9c:	9906      	ldr	r1, [sp, #24]
 8011f9e:	430b      	orrs	r3, r1
 8011fa0:	9904      	ldr	r1, [sp, #16]
 8011fa2:	430b      	orrs	r3, r1
 8011fa4:	d122      	bne.n	8011fec <_dtoa_r+0xabc>
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	ddee      	ble.n	8011f88 <_dtoa_r+0xa58>
 8011faa:	ee18 1a10 	vmov	r1, s16
 8011fae:	2201      	movs	r2, #1
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f001 f8cd 	bl	8013150 <__lshift>
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	ee08 0a10 	vmov	s16, r0
 8011fbc:	f001 f938 	bl	8013230 <__mcmp>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	dc03      	bgt.n	8011fcc <_dtoa_r+0xa9c>
 8011fc4:	d1e0      	bne.n	8011f88 <_dtoa_r+0xa58>
 8011fc6:	f01a 0f01 	tst.w	sl, #1
 8011fca:	d0dd      	beq.n	8011f88 <_dtoa_r+0xa58>
 8011fcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011fd0:	d1d7      	bne.n	8011f82 <_dtoa_r+0xa52>
 8011fd2:	2339      	movs	r3, #57	; 0x39
 8011fd4:	f88b 3000 	strb.w	r3, [fp]
 8011fd8:	462b      	mov	r3, r5
 8011fda:	461d      	mov	r5, r3
 8011fdc:	3b01      	subs	r3, #1
 8011fde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011fe2:	2a39      	cmp	r2, #57	; 0x39
 8011fe4:	d071      	beq.n	80120ca <_dtoa_r+0xb9a>
 8011fe6:	3201      	adds	r2, #1
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	e746      	b.n	8011e7a <_dtoa_r+0x94a>
 8011fec:	2a00      	cmp	r2, #0
 8011fee:	dd07      	ble.n	8012000 <_dtoa_r+0xad0>
 8011ff0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ff4:	d0ed      	beq.n	8011fd2 <_dtoa_r+0xaa2>
 8011ff6:	f10a 0301 	add.w	r3, sl, #1
 8011ffa:	f88b 3000 	strb.w	r3, [fp]
 8011ffe:	e73c      	b.n	8011e7a <_dtoa_r+0x94a>
 8012000:	9b05      	ldr	r3, [sp, #20]
 8012002:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012006:	4599      	cmp	r9, r3
 8012008:	d047      	beq.n	801209a <_dtoa_r+0xb6a>
 801200a:	ee18 1a10 	vmov	r1, s16
 801200e:	2300      	movs	r3, #0
 8012010:	220a      	movs	r2, #10
 8012012:	4620      	mov	r0, r4
 8012014:	f000 fea2 	bl	8012d5c <__multadd>
 8012018:	45b8      	cmp	r8, r7
 801201a:	ee08 0a10 	vmov	s16, r0
 801201e:	f04f 0300 	mov.w	r3, #0
 8012022:	f04f 020a 	mov.w	r2, #10
 8012026:	4641      	mov	r1, r8
 8012028:	4620      	mov	r0, r4
 801202a:	d106      	bne.n	801203a <_dtoa_r+0xb0a>
 801202c:	f000 fe96 	bl	8012d5c <__multadd>
 8012030:	4680      	mov	r8, r0
 8012032:	4607      	mov	r7, r0
 8012034:	f109 0901 	add.w	r9, r9, #1
 8012038:	e772      	b.n	8011f20 <_dtoa_r+0x9f0>
 801203a:	f000 fe8f 	bl	8012d5c <__multadd>
 801203e:	4639      	mov	r1, r7
 8012040:	4680      	mov	r8, r0
 8012042:	2300      	movs	r3, #0
 8012044:	220a      	movs	r2, #10
 8012046:	4620      	mov	r0, r4
 8012048:	f000 fe88 	bl	8012d5c <__multadd>
 801204c:	4607      	mov	r7, r0
 801204e:	e7f1      	b.n	8012034 <_dtoa_r+0xb04>
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	9302      	str	r3, [sp, #8]
 8012054:	9d01      	ldr	r5, [sp, #4]
 8012056:	ee18 0a10 	vmov	r0, s16
 801205a:	4631      	mov	r1, r6
 801205c:	f7ff f9db 	bl	8011416 <quorem>
 8012060:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012064:	9b01      	ldr	r3, [sp, #4]
 8012066:	f805 ab01 	strb.w	sl, [r5], #1
 801206a:	1aea      	subs	r2, r5, r3
 801206c:	9b02      	ldr	r3, [sp, #8]
 801206e:	4293      	cmp	r3, r2
 8012070:	dd09      	ble.n	8012086 <_dtoa_r+0xb56>
 8012072:	ee18 1a10 	vmov	r1, s16
 8012076:	2300      	movs	r3, #0
 8012078:	220a      	movs	r2, #10
 801207a:	4620      	mov	r0, r4
 801207c:	f000 fe6e 	bl	8012d5c <__multadd>
 8012080:	ee08 0a10 	vmov	s16, r0
 8012084:	e7e7      	b.n	8012056 <_dtoa_r+0xb26>
 8012086:	9b02      	ldr	r3, [sp, #8]
 8012088:	2b00      	cmp	r3, #0
 801208a:	bfc8      	it	gt
 801208c:	461d      	movgt	r5, r3
 801208e:	9b01      	ldr	r3, [sp, #4]
 8012090:	bfd8      	it	le
 8012092:	2501      	movle	r5, #1
 8012094:	441d      	add	r5, r3
 8012096:	f04f 0800 	mov.w	r8, #0
 801209a:	ee18 1a10 	vmov	r1, s16
 801209e:	2201      	movs	r2, #1
 80120a0:	4620      	mov	r0, r4
 80120a2:	f001 f855 	bl	8013150 <__lshift>
 80120a6:	4631      	mov	r1, r6
 80120a8:	ee08 0a10 	vmov	s16, r0
 80120ac:	f001 f8c0 	bl	8013230 <__mcmp>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	dc91      	bgt.n	8011fd8 <_dtoa_r+0xaa8>
 80120b4:	d102      	bne.n	80120bc <_dtoa_r+0xb8c>
 80120b6:	f01a 0f01 	tst.w	sl, #1
 80120ba:	d18d      	bne.n	8011fd8 <_dtoa_r+0xaa8>
 80120bc:	462b      	mov	r3, r5
 80120be:	461d      	mov	r5, r3
 80120c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120c4:	2a30      	cmp	r2, #48	; 0x30
 80120c6:	d0fa      	beq.n	80120be <_dtoa_r+0xb8e>
 80120c8:	e6d7      	b.n	8011e7a <_dtoa_r+0x94a>
 80120ca:	9a01      	ldr	r2, [sp, #4]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d184      	bne.n	8011fda <_dtoa_r+0xaaa>
 80120d0:	9b00      	ldr	r3, [sp, #0]
 80120d2:	3301      	adds	r3, #1
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	2331      	movs	r3, #49	; 0x31
 80120d8:	7013      	strb	r3, [r2, #0]
 80120da:	e6ce      	b.n	8011e7a <_dtoa_r+0x94a>
 80120dc:	4b09      	ldr	r3, [pc, #36]	; (8012104 <_dtoa_r+0xbd4>)
 80120de:	f7ff ba95 	b.w	801160c <_dtoa_r+0xdc>
 80120e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f47f aa6e 	bne.w	80115c6 <_dtoa_r+0x96>
 80120ea:	4b07      	ldr	r3, [pc, #28]	; (8012108 <_dtoa_r+0xbd8>)
 80120ec:	f7ff ba8e 	b.w	801160c <_dtoa_r+0xdc>
 80120f0:	9b02      	ldr	r3, [sp, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	dcae      	bgt.n	8012054 <_dtoa_r+0xb24>
 80120f6:	9b06      	ldr	r3, [sp, #24]
 80120f8:	2b02      	cmp	r3, #2
 80120fa:	f73f aea8 	bgt.w	8011e4e <_dtoa_r+0x91e>
 80120fe:	e7a9      	b.n	8012054 <_dtoa_r+0xb24>
 8012100:	0802ab63 	.word	0x0802ab63
 8012104:	0802a945 	.word	0x0802a945
 8012108:	0802aac1 	.word	0x0802aac1

0801210c <__sflush_r>:
 801210c:	898a      	ldrh	r2, [r1, #12]
 801210e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012112:	4605      	mov	r5, r0
 8012114:	0710      	lsls	r0, r2, #28
 8012116:	460c      	mov	r4, r1
 8012118:	d458      	bmi.n	80121cc <__sflush_r+0xc0>
 801211a:	684b      	ldr	r3, [r1, #4]
 801211c:	2b00      	cmp	r3, #0
 801211e:	dc05      	bgt.n	801212c <__sflush_r+0x20>
 8012120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012122:	2b00      	cmp	r3, #0
 8012124:	dc02      	bgt.n	801212c <__sflush_r+0x20>
 8012126:	2000      	movs	r0, #0
 8012128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801212c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801212e:	2e00      	cmp	r6, #0
 8012130:	d0f9      	beq.n	8012126 <__sflush_r+0x1a>
 8012132:	2300      	movs	r3, #0
 8012134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012138:	682f      	ldr	r7, [r5, #0]
 801213a:	602b      	str	r3, [r5, #0]
 801213c:	d032      	beq.n	80121a4 <__sflush_r+0x98>
 801213e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012140:	89a3      	ldrh	r3, [r4, #12]
 8012142:	075a      	lsls	r2, r3, #29
 8012144:	d505      	bpl.n	8012152 <__sflush_r+0x46>
 8012146:	6863      	ldr	r3, [r4, #4]
 8012148:	1ac0      	subs	r0, r0, r3
 801214a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801214c:	b10b      	cbz	r3, 8012152 <__sflush_r+0x46>
 801214e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012150:	1ac0      	subs	r0, r0, r3
 8012152:	2300      	movs	r3, #0
 8012154:	4602      	mov	r2, r0
 8012156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012158:	6a21      	ldr	r1, [r4, #32]
 801215a:	4628      	mov	r0, r5
 801215c:	47b0      	blx	r6
 801215e:	1c43      	adds	r3, r0, #1
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	d106      	bne.n	8012172 <__sflush_r+0x66>
 8012164:	6829      	ldr	r1, [r5, #0]
 8012166:	291d      	cmp	r1, #29
 8012168:	d82c      	bhi.n	80121c4 <__sflush_r+0xb8>
 801216a:	4a2a      	ldr	r2, [pc, #168]	; (8012214 <__sflush_r+0x108>)
 801216c:	40ca      	lsrs	r2, r1
 801216e:	07d6      	lsls	r6, r2, #31
 8012170:	d528      	bpl.n	80121c4 <__sflush_r+0xb8>
 8012172:	2200      	movs	r2, #0
 8012174:	6062      	str	r2, [r4, #4]
 8012176:	04d9      	lsls	r1, r3, #19
 8012178:	6922      	ldr	r2, [r4, #16]
 801217a:	6022      	str	r2, [r4, #0]
 801217c:	d504      	bpl.n	8012188 <__sflush_r+0x7c>
 801217e:	1c42      	adds	r2, r0, #1
 8012180:	d101      	bne.n	8012186 <__sflush_r+0x7a>
 8012182:	682b      	ldr	r3, [r5, #0]
 8012184:	b903      	cbnz	r3, 8012188 <__sflush_r+0x7c>
 8012186:	6560      	str	r0, [r4, #84]	; 0x54
 8012188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801218a:	602f      	str	r7, [r5, #0]
 801218c:	2900      	cmp	r1, #0
 801218e:	d0ca      	beq.n	8012126 <__sflush_r+0x1a>
 8012190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012194:	4299      	cmp	r1, r3
 8012196:	d002      	beq.n	801219e <__sflush_r+0x92>
 8012198:	4628      	mov	r0, r5
 801219a:	f001 fa55 	bl	8013648 <_free_r>
 801219e:	2000      	movs	r0, #0
 80121a0:	6360      	str	r0, [r4, #52]	; 0x34
 80121a2:	e7c1      	b.n	8012128 <__sflush_r+0x1c>
 80121a4:	6a21      	ldr	r1, [r4, #32]
 80121a6:	2301      	movs	r3, #1
 80121a8:	4628      	mov	r0, r5
 80121aa:	47b0      	blx	r6
 80121ac:	1c41      	adds	r1, r0, #1
 80121ae:	d1c7      	bne.n	8012140 <__sflush_r+0x34>
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d0c4      	beq.n	8012140 <__sflush_r+0x34>
 80121b6:	2b1d      	cmp	r3, #29
 80121b8:	d001      	beq.n	80121be <__sflush_r+0xb2>
 80121ba:	2b16      	cmp	r3, #22
 80121bc:	d101      	bne.n	80121c2 <__sflush_r+0xb6>
 80121be:	602f      	str	r7, [r5, #0]
 80121c0:	e7b1      	b.n	8012126 <__sflush_r+0x1a>
 80121c2:	89a3      	ldrh	r3, [r4, #12]
 80121c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121c8:	81a3      	strh	r3, [r4, #12]
 80121ca:	e7ad      	b.n	8012128 <__sflush_r+0x1c>
 80121cc:	690f      	ldr	r7, [r1, #16]
 80121ce:	2f00      	cmp	r7, #0
 80121d0:	d0a9      	beq.n	8012126 <__sflush_r+0x1a>
 80121d2:	0793      	lsls	r3, r2, #30
 80121d4:	680e      	ldr	r6, [r1, #0]
 80121d6:	bf08      	it	eq
 80121d8:	694b      	ldreq	r3, [r1, #20]
 80121da:	600f      	str	r7, [r1, #0]
 80121dc:	bf18      	it	ne
 80121de:	2300      	movne	r3, #0
 80121e0:	eba6 0807 	sub.w	r8, r6, r7
 80121e4:	608b      	str	r3, [r1, #8]
 80121e6:	f1b8 0f00 	cmp.w	r8, #0
 80121ea:	dd9c      	ble.n	8012126 <__sflush_r+0x1a>
 80121ec:	6a21      	ldr	r1, [r4, #32]
 80121ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121f0:	4643      	mov	r3, r8
 80121f2:	463a      	mov	r2, r7
 80121f4:	4628      	mov	r0, r5
 80121f6:	47b0      	blx	r6
 80121f8:	2800      	cmp	r0, #0
 80121fa:	dc06      	bgt.n	801220a <__sflush_r+0xfe>
 80121fc:	89a3      	ldrh	r3, [r4, #12]
 80121fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012202:	81a3      	strh	r3, [r4, #12]
 8012204:	f04f 30ff 	mov.w	r0, #4294967295
 8012208:	e78e      	b.n	8012128 <__sflush_r+0x1c>
 801220a:	4407      	add	r7, r0
 801220c:	eba8 0800 	sub.w	r8, r8, r0
 8012210:	e7e9      	b.n	80121e6 <__sflush_r+0xda>
 8012212:	bf00      	nop
 8012214:	20400001 	.word	0x20400001

08012218 <_fflush_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	690b      	ldr	r3, [r1, #16]
 801221c:	4605      	mov	r5, r0
 801221e:	460c      	mov	r4, r1
 8012220:	b913      	cbnz	r3, 8012228 <_fflush_r+0x10>
 8012222:	2500      	movs	r5, #0
 8012224:	4628      	mov	r0, r5
 8012226:	bd38      	pop	{r3, r4, r5, pc}
 8012228:	b118      	cbz	r0, 8012232 <_fflush_r+0x1a>
 801222a:	6983      	ldr	r3, [r0, #24]
 801222c:	b90b      	cbnz	r3, 8012232 <_fflush_r+0x1a>
 801222e:	f000 f887 	bl	8012340 <__sinit>
 8012232:	4b14      	ldr	r3, [pc, #80]	; (8012284 <_fflush_r+0x6c>)
 8012234:	429c      	cmp	r4, r3
 8012236:	d11b      	bne.n	8012270 <_fflush_r+0x58>
 8012238:	686c      	ldr	r4, [r5, #4]
 801223a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d0ef      	beq.n	8012222 <_fflush_r+0xa>
 8012242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012244:	07d0      	lsls	r0, r2, #31
 8012246:	d404      	bmi.n	8012252 <_fflush_r+0x3a>
 8012248:	0599      	lsls	r1, r3, #22
 801224a:	d402      	bmi.n	8012252 <_fflush_r+0x3a>
 801224c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801224e:	f000 fc88 	bl	8012b62 <__retarget_lock_acquire_recursive>
 8012252:	4628      	mov	r0, r5
 8012254:	4621      	mov	r1, r4
 8012256:	f7ff ff59 	bl	801210c <__sflush_r>
 801225a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801225c:	07da      	lsls	r2, r3, #31
 801225e:	4605      	mov	r5, r0
 8012260:	d4e0      	bmi.n	8012224 <_fflush_r+0xc>
 8012262:	89a3      	ldrh	r3, [r4, #12]
 8012264:	059b      	lsls	r3, r3, #22
 8012266:	d4dd      	bmi.n	8012224 <_fflush_r+0xc>
 8012268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801226a:	f000 fc7b 	bl	8012b64 <__retarget_lock_release_recursive>
 801226e:	e7d9      	b.n	8012224 <_fflush_r+0xc>
 8012270:	4b05      	ldr	r3, [pc, #20]	; (8012288 <_fflush_r+0x70>)
 8012272:	429c      	cmp	r4, r3
 8012274:	d101      	bne.n	801227a <_fflush_r+0x62>
 8012276:	68ac      	ldr	r4, [r5, #8]
 8012278:	e7df      	b.n	801223a <_fflush_r+0x22>
 801227a:	4b04      	ldr	r3, [pc, #16]	; (801228c <_fflush_r+0x74>)
 801227c:	429c      	cmp	r4, r3
 801227e:	bf08      	it	eq
 8012280:	68ec      	ldreq	r4, [r5, #12]
 8012282:	e7da      	b.n	801223a <_fflush_r+0x22>
 8012284:	0802ab94 	.word	0x0802ab94
 8012288:	0802abb4 	.word	0x0802abb4
 801228c:	0802ab74 	.word	0x0802ab74

08012290 <std>:
 8012290:	2300      	movs	r3, #0
 8012292:	b510      	push	{r4, lr}
 8012294:	4604      	mov	r4, r0
 8012296:	e9c0 3300 	strd	r3, r3, [r0]
 801229a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801229e:	6083      	str	r3, [r0, #8]
 80122a0:	8181      	strh	r1, [r0, #12]
 80122a2:	6643      	str	r3, [r0, #100]	; 0x64
 80122a4:	81c2      	strh	r2, [r0, #14]
 80122a6:	6183      	str	r3, [r0, #24]
 80122a8:	4619      	mov	r1, r3
 80122aa:	2208      	movs	r2, #8
 80122ac:	305c      	adds	r0, #92	; 0x5c
 80122ae:	f7fd f8c7 	bl	800f440 <memset>
 80122b2:	4b05      	ldr	r3, [pc, #20]	; (80122c8 <std+0x38>)
 80122b4:	6263      	str	r3, [r4, #36]	; 0x24
 80122b6:	4b05      	ldr	r3, [pc, #20]	; (80122cc <std+0x3c>)
 80122b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80122ba:	4b05      	ldr	r3, [pc, #20]	; (80122d0 <std+0x40>)
 80122bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122be:	4b05      	ldr	r3, [pc, #20]	; (80122d4 <std+0x44>)
 80122c0:	6224      	str	r4, [r4, #32]
 80122c2:	6323      	str	r3, [r4, #48]	; 0x30
 80122c4:	bd10      	pop	{r4, pc}
 80122c6:	bf00      	nop
 80122c8:	08013bd9 	.word	0x08013bd9
 80122cc:	08013bfb 	.word	0x08013bfb
 80122d0:	08013c33 	.word	0x08013c33
 80122d4:	08013c57 	.word	0x08013c57

080122d8 <_cleanup_r>:
 80122d8:	4901      	ldr	r1, [pc, #4]	; (80122e0 <_cleanup_r+0x8>)
 80122da:	f000 b8af 	b.w	801243c <_fwalk_reent>
 80122de:	bf00      	nop
 80122e0:	08012219 	.word	0x08012219

080122e4 <__sfmoreglue>:
 80122e4:	b570      	push	{r4, r5, r6, lr}
 80122e6:	2268      	movs	r2, #104	; 0x68
 80122e8:	1e4d      	subs	r5, r1, #1
 80122ea:	4355      	muls	r5, r2
 80122ec:	460e      	mov	r6, r1
 80122ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80122f2:	f001 fa15 	bl	8013720 <_malloc_r>
 80122f6:	4604      	mov	r4, r0
 80122f8:	b140      	cbz	r0, 801230c <__sfmoreglue+0x28>
 80122fa:	2100      	movs	r1, #0
 80122fc:	e9c0 1600 	strd	r1, r6, [r0]
 8012300:	300c      	adds	r0, #12
 8012302:	60a0      	str	r0, [r4, #8]
 8012304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012308:	f7fd f89a 	bl	800f440 <memset>
 801230c:	4620      	mov	r0, r4
 801230e:	bd70      	pop	{r4, r5, r6, pc}

08012310 <__sfp_lock_acquire>:
 8012310:	4801      	ldr	r0, [pc, #4]	; (8012318 <__sfp_lock_acquire+0x8>)
 8012312:	f000 bc26 	b.w	8012b62 <__retarget_lock_acquire_recursive>
 8012316:	bf00      	nop
 8012318:	2001346b 	.word	0x2001346b

0801231c <__sfp_lock_release>:
 801231c:	4801      	ldr	r0, [pc, #4]	; (8012324 <__sfp_lock_release+0x8>)
 801231e:	f000 bc21 	b.w	8012b64 <__retarget_lock_release_recursive>
 8012322:	bf00      	nop
 8012324:	2001346b 	.word	0x2001346b

08012328 <__sinit_lock_acquire>:
 8012328:	4801      	ldr	r0, [pc, #4]	; (8012330 <__sinit_lock_acquire+0x8>)
 801232a:	f000 bc1a 	b.w	8012b62 <__retarget_lock_acquire_recursive>
 801232e:	bf00      	nop
 8012330:	2001346c 	.word	0x2001346c

08012334 <__sinit_lock_release>:
 8012334:	4801      	ldr	r0, [pc, #4]	; (801233c <__sinit_lock_release+0x8>)
 8012336:	f000 bc15 	b.w	8012b64 <__retarget_lock_release_recursive>
 801233a:	bf00      	nop
 801233c:	2001346c 	.word	0x2001346c

08012340 <__sinit>:
 8012340:	b510      	push	{r4, lr}
 8012342:	4604      	mov	r4, r0
 8012344:	f7ff fff0 	bl	8012328 <__sinit_lock_acquire>
 8012348:	69a3      	ldr	r3, [r4, #24]
 801234a:	b11b      	cbz	r3, 8012354 <__sinit+0x14>
 801234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012350:	f7ff bff0 	b.w	8012334 <__sinit_lock_release>
 8012354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012358:	6523      	str	r3, [r4, #80]	; 0x50
 801235a:	4b13      	ldr	r3, [pc, #76]	; (80123a8 <__sinit+0x68>)
 801235c:	4a13      	ldr	r2, [pc, #76]	; (80123ac <__sinit+0x6c>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	62a2      	str	r2, [r4, #40]	; 0x28
 8012362:	42a3      	cmp	r3, r4
 8012364:	bf04      	itt	eq
 8012366:	2301      	moveq	r3, #1
 8012368:	61a3      	streq	r3, [r4, #24]
 801236a:	4620      	mov	r0, r4
 801236c:	f000 f820 	bl	80123b0 <__sfp>
 8012370:	6060      	str	r0, [r4, #4]
 8012372:	4620      	mov	r0, r4
 8012374:	f000 f81c 	bl	80123b0 <__sfp>
 8012378:	60a0      	str	r0, [r4, #8]
 801237a:	4620      	mov	r0, r4
 801237c:	f000 f818 	bl	80123b0 <__sfp>
 8012380:	2200      	movs	r2, #0
 8012382:	60e0      	str	r0, [r4, #12]
 8012384:	2104      	movs	r1, #4
 8012386:	6860      	ldr	r0, [r4, #4]
 8012388:	f7ff ff82 	bl	8012290 <std>
 801238c:	68a0      	ldr	r0, [r4, #8]
 801238e:	2201      	movs	r2, #1
 8012390:	2109      	movs	r1, #9
 8012392:	f7ff ff7d 	bl	8012290 <std>
 8012396:	68e0      	ldr	r0, [r4, #12]
 8012398:	2202      	movs	r2, #2
 801239a:	2112      	movs	r1, #18
 801239c:	f7ff ff78 	bl	8012290 <std>
 80123a0:	2301      	movs	r3, #1
 80123a2:	61a3      	str	r3, [r4, #24]
 80123a4:	e7d2      	b.n	801234c <__sinit+0xc>
 80123a6:	bf00      	nop
 80123a8:	0802a920 	.word	0x0802a920
 80123ac:	080122d9 	.word	0x080122d9

080123b0 <__sfp>:
 80123b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b2:	4607      	mov	r7, r0
 80123b4:	f7ff ffac 	bl	8012310 <__sfp_lock_acquire>
 80123b8:	4b1e      	ldr	r3, [pc, #120]	; (8012434 <__sfp+0x84>)
 80123ba:	681e      	ldr	r6, [r3, #0]
 80123bc:	69b3      	ldr	r3, [r6, #24]
 80123be:	b913      	cbnz	r3, 80123c6 <__sfp+0x16>
 80123c0:	4630      	mov	r0, r6
 80123c2:	f7ff ffbd 	bl	8012340 <__sinit>
 80123c6:	3648      	adds	r6, #72	; 0x48
 80123c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123cc:	3b01      	subs	r3, #1
 80123ce:	d503      	bpl.n	80123d8 <__sfp+0x28>
 80123d0:	6833      	ldr	r3, [r6, #0]
 80123d2:	b30b      	cbz	r3, 8012418 <__sfp+0x68>
 80123d4:	6836      	ldr	r6, [r6, #0]
 80123d6:	e7f7      	b.n	80123c8 <__sfp+0x18>
 80123d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123dc:	b9d5      	cbnz	r5, 8012414 <__sfp+0x64>
 80123de:	4b16      	ldr	r3, [pc, #88]	; (8012438 <__sfp+0x88>)
 80123e0:	60e3      	str	r3, [r4, #12]
 80123e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123e6:	6665      	str	r5, [r4, #100]	; 0x64
 80123e8:	f000 fbba 	bl	8012b60 <__retarget_lock_init_recursive>
 80123ec:	f7ff ff96 	bl	801231c <__sfp_lock_release>
 80123f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80123f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80123f8:	6025      	str	r5, [r4, #0]
 80123fa:	61a5      	str	r5, [r4, #24]
 80123fc:	2208      	movs	r2, #8
 80123fe:	4629      	mov	r1, r5
 8012400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012404:	f7fd f81c 	bl	800f440 <memset>
 8012408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801240c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012410:	4620      	mov	r0, r4
 8012412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012414:	3468      	adds	r4, #104	; 0x68
 8012416:	e7d9      	b.n	80123cc <__sfp+0x1c>
 8012418:	2104      	movs	r1, #4
 801241a:	4638      	mov	r0, r7
 801241c:	f7ff ff62 	bl	80122e4 <__sfmoreglue>
 8012420:	4604      	mov	r4, r0
 8012422:	6030      	str	r0, [r6, #0]
 8012424:	2800      	cmp	r0, #0
 8012426:	d1d5      	bne.n	80123d4 <__sfp+0x24>
 8012428:	f7ff ff78 	bl	801231c <__sfp_lock_release>
 801242c:	230c      	movs	r3, #12
 801242e:	603b      	str	r3, [r7, #0]
 8012430:	e7ee      	b.n	8012410 <__sfp+0x60>
 8012432:	bf00      	nop
 8012434:	0802a920 	.word	0x0802a920
 8012438:	ffff0001 	.word	0xffff0001

0801243c <_fwalk_reent>:
 801243c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012440:	4606      	mov	r6, r0
 8012442:	4688      	mov	r8, r1
 8012444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012448:	2700      	movs	r7, #0
 801244a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801244e:	f1b9 0901 	subs.w	r9, r9, #1
 8012452:	d505      	bpl.n	8012460 <_fwalk_reent+0x24>
 8012454:	6824      	ldr	r4, [r4, #0]
 8012456:	2c00      	cmp	r4, #0
 8012458:	d1f7      	bne.n	801244a <_fwalk_reent+0xe>
 801245a:	4638      	mov	r0, r7
 801245c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012460:	89ab      	ldrh	r3, [r5, #12]
 8012462:	2b01      	cmp	r3, #1
 8012464:	d907      	bls.n	8012476 <_fwalk_reent+0x3a>
 8012466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801246a:	3301      	adds	r3, #1
 801246c:	d003      	beq.n	8012476 <_fwalk_reent+0x3a>
 801246e:	4629      	mov	r1, r5
 8012470:	4630      	mov	r0, r6
 8012472:	47c0      	blx	r8
 8012474:	4307      	orrs	r7, r0
 8012476:	3568      	adds	r5, #104	; 0x68
 8012478:	e7e9      	b.n	801244e <_fwalk_reent+0x12>

0801247a <rshift>:
 801247a:	6903      	ldr	r3, [r0, #16]
 801247c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012484:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012488:	f100 0414 	add.w	r4, r0, #20
 801248c:	dd45      	ble.n	801251a <rshift+0xa0>
 801248e:	f011 011f 	ands.w	r1, r1, #31
 8012492:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012496:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801249a:	d10c      	bne.n	80124b6 <rshift+0x3c>
 801249c:	f100 0710 	add.w	r7, r0, #16
 80124a0:	4629      	mov	r1, r5
 80124a2:	42b1      	cmp	r1, r6
 80124a4:	d334      	bcc.n	8012510 <rshift+0x96>
 80124a6:	1a9b      	subs	r3, r3, r2
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	1eea      	subs	r2, r5, #3
 80124ac:	4296      	cmp	r6, r2
 80124ae:	bf38      	it	cc
 80124b0:	2300      	movcc	r3, #0
 80124b2:	4423      	add	r3, r4
 80124b4:	e015      	b.n	80124e2 <rshift+0x68>
 80124b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80124ba:	f1c1 0820 	rsb	r8, r1, #32
 80124be:	40cf      	lsrs	r7, r1
 80124c0:	f105 0e04 	add.w	lr, r5, #4
 80124c4:	46a1      	mov	r9, r4
 80124c6:	4576      	cmp	r6, lr
 80124c8:	46f4      	mov	ip, lr
 80124ca:	d815      	bhi.n	80124f8 <rshift+0x7e>
 80124cc:	1a9a      	subs	r2, r3, r2
 80124ce:	0092      	lsls	r2, r2, #2
 80124d0:	3a04      	subs	r2, #4
 80124d2:	3501      	adds	r5, #1
 80124d4:	42ae      	cmp	r6, r5
 80124d6:	bf38      	it	cc
 80124d8:	2200      	movcc	r2, #0
 80124da:	18a3      	adds	r3, r4, r2
 80124dc:	50a7      	str	r7, [r4, r2]
 80124de:	b107      	cbz	r7, 80124e2 <rshift+0x68>
 80124e0:	3304      	adds	r3, #4
 80124e2:	1b1a      	subs	r2, r3, r4
 80124e4:	42a3      	cmp	r3, r4
 80124e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80124ea:	bf08      	it	eq
 80124ec:	2300      	moveq	r3, #0
 80124ee:	6102      	str	r2, [r0, #16]
 80124f0:	bf08      	it	eq
 80124f2:	6143      	streq	r3, [r0, #20]
 80124f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124f8:	f8dc c000 	ldr.w	ip, [ip]
 80124fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8012500:	ea4c 0707 	orr.w	r7, ip, r7
 8012504:	f849 7b04 	str.w	r7, [r9], #4
 8012508:	f85e 7b04 	ldr.w	r7, [lr], #4
 801250c:	40cf      	lsrs	r7, r1
 801250e:	e7da      	b.n	80124c6 <rshift+0x4c>
 8012510:	f851 cb04 	ldr.w	ip, [r1], #4
 8012514:	f847 cf04 	str.w	ip, [r7, #4]!
 8012518:	e7c3      	b.n	80124a2 <rshift+0x28>
 801251a:	4623      	mov	r3, r4
 801251c:	e7e1      	b.n	80124e2 <rshift+0x68>

0801251e <__hexdig_fun>:
 801251e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012522:	2b09      	cmp	r3, #9
 8012524:	d802      	bhi.n	801252c <__hexdig_fun+0xe>
 8012526:	3820      	subs	r0, #32
 8012528:	b2c0      	uxtb	r0, r0
 801252a:	4770      	bx	lr
 801252c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012530:	2b05      	cmp	r3, #5
 8012532:	d801      	bhi.n	8012538 <__hexdig_fun+0x1a>
 8012534:	3847      	subs	r0, #71	; 0x47
 8012536:	e7f7      	b.n	8012528 <__hexdig_fun+0xa>
 8012538:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801253c:	2b05      	cmp	r3, #5
 801253e:	d801      	bhi.n	8012544 <__hexdig_fun+0x26>
 8012540:	3827      	subs	r0, #39	; 0x27
 8012542:	e7f1      	b.n	8012528 <__hexdig_fun+0xa>
 8012544:	2000      	movs	r0, #0
 8012546:	4770      	bx	lr

08012548 <__gethex>:
 8012548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	ed2d 8b02 	vpush	{d8}
 8012550:	b089      	sub	sp, #36	; 0x24
 8012552:	ee08 0a10 	vmov	s16, r0
 8012556:	9304      	str	r3, [sp, #16]
 8012558:	4bb4      	ldr	r3, [pc, #720]	; (801282c <__gethex+0x2e4>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	4618      	mov	r0, r3
 8012560:	468b      	mov	fp, r1
 8012562:	4690      	mov	r8, r2
 8012564:	f7ed fe5c 	bl	8000220 <strlen>
 8012568:	9b01      	ldr	r3, [sp, #4]
 801256a:	f8db 2000 	ldr.w	r2, [fp]
 801256e:	4403      	add	r3, r0
 8012570:	4682      	mov	sl, r0
 8012572:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012576:	9305      	str	r3, [sp, #20]
 8012578:	1c93      	adds	r3, r2, #2
 801257a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801257e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012582:	32fe      	adds	r2, #254	; 0xfe
 8012584:	18d1      	adds	r1, r2, r3
 8012586:	461f      	mov	r7, r3
 8012588:	f813 0b01 	ldrb.w	r0, [r3], #1
 801258c:	9100      	str	r1, [sp, #0]
 801258e:	2830      	cmp	r0, #48	; 0x30
 8012590:	d0f8      	beq.n	8012584 <__gethex+0x3c>
 8012592:	f7ff ffc4 	bl	801251e <__hexdig_fun>
 8012596:	4604      	mov	r4, r0
 8012598:	2800      	cmp	r0, #0
 801259a:	d13a      	bne.n	8012612 <__gethex+0xca>
 801259c:	9901      	ldr	r1, [sp, #4]
 801259e:	4652      	mov	r2, sl
 80125a0:	4638      	mov	r0, r7
 80125a2:	f001 fb5c 	bl	8013c5e <strncmp>
 80125a6:	4605      	mov	r5, r0
 80125a8:	2800      	cmp	r0, #0
 80125aa:	d168      	bne.n	801267e <__gethex+0x136>
 80125ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 80125b0:	eb07 060a 	add.w	r6, r7, sl
 80125b4:	f7ff ffb3 	bl	801251e <__hexdig_fun>
 80125b8:	2800      	cmp	r0, #0
 80125ba:	d062      	beq.n	8012682 <__gethex+0x13a>
 80125bc:	4633      	mov	r3, r6
 80125be:	7818      	ldrb	r0, [r3, #0]
 80125c0:	2830      	cmp	r0, #48	; 0x30
 80125c2:	461f      	mov	r7, r3
 80125c4:	f103 0301 	add.w	r3, r3, #1
 80125c8:	d0f9      	beq.n	80125be <__gethex+0x76>
 80125ca:	f7ff ffa8 	bl	801251e <__hexdig_fun>
 80125ce:	2301      	movs	r3, #1
 80125d0:	fab0 f480 	clz	r4, r0
 80125d4:	0964      	lsrs	r4, r4, #5
 80125d6:	4635      	mov	r5, r6
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	463a      	mov	r2, r7
 80125dc:	4616      	mov	r6, r2
 80125de:	3201      	adds	r2, #1
 80125e0:	7830      	ldrb	r0, [r6, #0]
 80125e2:	f7ff ff9c 	bl	801251e <__hexdig_fun>
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d1f8      	bne.n	80125dc <__gethex+0x94>
 80125ea:	9901      	ldr	r1, [sp, #4]
 80125ec:	4652      	mov	r2, sl
 80125ee:	4630      	mov	r0, r6
 80125f0:	f001 fb35 	bl	8013c5e <strncmp>
 80125f4:	b980      	cbnz	r0, 8012618 <__gethex+0xd0>
 80125f6:	b94d      	cbnz	r5, 801260c <__gethex+0xc4>
 80125f8:	eb06 050a 	add.w	r5, r6, sl
 80125fc:	462a      	mov	r2, r5
 80125fe:	4616      	mov	r6, r2
 8012600:	3201      	adds	r2, #1
 8012602:	7830      	ldrb	r0, [r6, #0]
 8012604:	f7ff ff8b 	bl	801251e <__hexdig_fun>
 8012608:	2800      	cmp	r0, #0
 801260a:	d1f8      	bne.n	80125fe <__gethex+0xb6>
 801260c:	1bad      	subs	r5, r5, r6
 801260e:	00ad      	lsls	r5, r5, #2
 8012610:	e004      	b.n	801261c <__gethex+0xd4>
 8012612:	2400      	movs	r4, #0
 8012614:	4625      	mov	r5, r4
 8012616:	e7e0      	b.n	80125da <__gethex+0x92>
 8012618:	2d00      	cmp	r5, #0
 801261a:	d1f7      	bne.n	801260c <__gethex+0xc4>
 801261c:	7833      	ldrb	r3, [r6, #0]
 801261e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012622:	2b50      	cmp	r3, #80	; 0x50
 8012624:	d13b      	bne.n	801269e <__gethex+0x156>
 8012626:	7873      	ldrb	r3, [r6, #1]
 8012628:	2b2b      	cmp	r3, #43	; 0x2b
 801262a:	d02c      	beq.n	8012686 <__gethex+0x13e>
 801262c:	2b2d      	cmp	r3, #45	; 0x2d
 801262e:	d02e      	beq.n	801268e <__gethex+0x146>
 8012630:	1c71      	adds	r1, r6, #1
 8012632:	f04f 0900 	mov.w	r9, #0
 8012636:	7808      	ldrb	r0, [r1, #0]
 8012638:	f7ff ff71 	bl	801251e <__hexdig_fun>
 801263c:	1e43      	subs	r3, r0, #1
 801263e:	b2db      	uxtb	r3, r3
 8012640:	2b18      	cmp	r3, #24
 8012642:	d82c      	bhi.n	801269e <__gethex+0x156>
 8012644:	f1a0 0210 	sub.w	r2, r0, #16
 8012648:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801264c:	f7ff ff67 	bl	801251e <__hexdig_fun>
 8012650:	1e43      	subs	r3, r0, #1
 8012652:	b2db      	uxtb	r3, r3
 8012654:	2b18      	cmp	r3, #24
 8012656:	d91d      	bls.n	8012694 <__gethex+0x14c>
 8012658:	f1b9 0f00 	cmp.w	r9, #0
 801265c:	d000      	beq.n	8012660 <__gethex+0x118>
 801265e:	4252      	negs	r2, r2
 8012660:	4415      	add	r5, r2
 8012662:	f8cb 1000 	str.w	r1, [fp]
 8012666:	b1e4      	cbz	r4, 80126a2 <__gethex+0x15a>
 8012668:	9b00      	ldr	r3, [sp, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	bf14      	ite	ne
 801266e:	2700      	movne	r7, #0
 8012670:	2706      	moveq	r7, #6
 8012672:	4638      	mov	r0, r7
 8012674:	b009      	add	sp, #36	; 0x24
 8012676:	ecbd 8b02 	vpop	{d8}
 801267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267e:	463e      	mov	r6, r7
 8012680:	4625      	mov	r5, r4
 8012682:	2401      	movs	r4, #1
 8012684:	e7ca      	b.n	801261c <__gethex+0xd4>
 8012686:	f04f 0900 	mov.w	r9, #0
 801268a:	1cb1      	adds	r1, r6, #2
 801268c:	e7d3      	b.n	8012636 <__gethex+0xee>
 801268e:	f04f 0901 	mov.w	r9, #1
 8012692:	e7fa      	b.n	801268a <__gethex+0x142>
 8012694:	230a      	movs	r3, #10
 8012696:	fb03 0202 	mla	r2, r3, r2, r0
 801269a:	3a10      	subs	r2, #16
 801269c:	e7d4      	b.n	8012648 <__gethex+0x100>
 801269e:	4631      	mov	r1, r6
 80126a0:	e7df      	b.n	8012662 <__gethex+0x11a>
 80126a2:	1bf3      	subs	r3, r6, r7
 80126a4:	3b01      	subs	r3, #1
 80126a6:	4621      	mov	r1, r4
 80126a8:	2b07      	cmp	r3, #7
 80126aa:	dc0b      	bgt.n	80126c4 <__gethex+0x17c>
 80126ac:	ee18 0a10 	vmov	r0, s16
 80126b0:	f000 faf2 	bl	8012c98 <_Balloc>
 80126b4:	4604      	mov	r4, r0
 80126b6:	b940      	cbnz	r0, 80126ca <__gethex+0x182>
 80126b8:	4b5d      	ldr	r3, [pc, #372]	; (8012830 <__gethex+0x2e8>)
 80126ba:	4602      	mov	r2, r0
 80126bc:	21de      	movs	r1, #222	; 0xde
 80126be:	485d      	ldr	r0, [pc, #372]	; (8012834 <__gethex+0x2ec>)
 80126c0:	f7fc fe56 	bl	800f370 <__assert_func>
 80126c4:	3101      	adds	r1, #1
 80126c6:	105b      	asrs	r3, r3, #1
 80126c8:	e7ee      	b.n	80126a8 <__gethex+0x160>
 80126ca:	f100 0914 	add.w	r9, r0, #20
 80126ce:	f04f 0b00 	mov.w	fp, #0
 80126d2:	f1ca 0301 	rsb	r3, sl, #1
 80126d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80126da:	f8cd b000 	str.w	fp, [sp]
 80126de:	9306      	str	r3, [sp, #24]
 80126e0:	42b7      	cmp	r7, r6
 80126e2:	d340      	bcc.n	8012766 <__gethex+0x21e>
 80126e4:	9802      	ldr	r0, [sp, #8]
 80126e6:	9b00      	ldr	r3, [sp, #0]
 80126e8:	f840 3b04 	str.w	r3, [r0], #4
 80126ec:	eba0 0009 	sub.w	r0, r0, r9
 80126f0:	1080      	asrs	r0, r0, #2
 80126f2:	0146      	lsls	r6, r0, #5
 80126f4:	6120      	str	r0, [r4, #16]
 80126f6:	4618      	mov	r0, r3
 80126f8:	f000 fbc0 	bl	8012e7c <__hi0bits>
 80126fc:	1a30      	subs	r0, r6, r0
 80126fe:	f8d8 6000 	ldr.w	r6, [r8]
 8012702:	42b0      	cmp	r0, r6
 8012704:	dd63      	ble.n	80127ce <__gethex+0x286>
 8012706:	1b87      	subs	r7, r0, r6
 8012708:	4639      	mov	r1, r7
 801270a:	4620      	mov	r0, r4
 801270c:	f000 ff64 	bl	80135d8 <__any_on>
 8012710:	4682      	mov	sl, r0
 8012712:	b1a8      	cbz	r0, 8012740 <__gethex+0x1f8>
 8012714:	1e7b      	subs	r3, r7, #1
 8012716:	1159      	asrs	r1, r3, #5
 8012718:	f003 021f 	and.w	r2, r3, #31
 801271c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012720:	f04f 0a01 	mov.w	sl, #1
 8012724:	fa0a f202 	lsl.w	r2, sl, r2
 8012728:	420a      	tst	r2, r1
 801272a:	d009      	beq.n	8012740 <__gethex+0x1f8>
 801272c:	4553      	cmp	r3, sl
 801272e:	dd05      	ble.n	801273c <__gethex+0x1f4>
 8012730:	1eb9      	subs	r1, r7, #2
 8012732:	4620      	mov	r0, r4
 8012734:	f000 ff50 	bl	80135d8 <__any_on>
 8012738:	2800      	cmp	r0, #0
 801273a:	d145      	bne.n	80127c8 <__gethex+0x280>
 801273c:	f04f 0a02 	mov.w	sl, #2
 8012740:	4639      	mov	r1, r7
 8012742:	4620      	mov	r0, r4
 8012744:	f7ff fe99 	bl	801247a <rshift>
 8012748:	443d      	add	r5, r7
 801274a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801274e:	42ab      	cmp	r3, r5
 8012750:	da4c      	bge.n	80127ec <__gethex+0x2a4>
 8012752:	ee18 0a10 	vmov	r0, s16
 8012756:	4621      	mov	r1, r4
 8012758:	f000 fade 	bl	8012d18 <_Bfree>
 801275c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801275e:	2300      	movs	r3, #0
 8012760:	6013      	str	r3, [r2, #0]
 8012762:	27a3      	movs	r7, #163	; 0xa3
 8012764:	e785      	b.n	8012672 <__gethex+0x12a>
 8012766:	1e73      	subs	r3, r6, #1
 8012768:	9a05      	ldr	r2, [sp, #20]
 801276a:	9303      	str	r3, [sp, #12]
 801276c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012770:	4293      	cmp	r3, r2
 8012772:	d019      	beq.n	80127a8 <__gethex+0x260>
 8012774:	f1bb 0f20 	cmp.w	fp, #32
 8012778:	d107      	bne.n	801278a <__gethex+0x242>
 801277a:	9b02      	ldr	r3, [sp, #8]
 801277c:	9a00      	ldr	r2, [sp, #0]
 801277e:	f843 2b04 	str.w	r2, [r3], #4
 8012782:	9302      	str	r3, [sp, #8]
 8012784:	2300      	movs	r3, #0
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	469b      	mov	fp, r3
 801278a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801278e:	f7ff fec6 	bl	801251e <__hexdig_fun>
 8012792:	9b00      	ldr	r3, [sp, #0]
 8012794:	f000 000f 	and.w	r0, r0, #15
 8012798:	fa00 f00b 	lsl.w	r0, r0, fp
 801279c:	4303      	orrs	r3, r0
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	f10b 0b04 	add.w	fp, fp, #4
 80127a4:	9b03      	ldr	r3, [sp, #12]
 80127a6:	e00d      	b.n	80127c4 <__gethex+0x27c>
 80127a8:	9b03      	ldr	r3, [sp, #12]
 80127aa:	9a06      	ldr	r2, [sp, #24]
 80127ac:	4413      	add	r3, r2
 80127ae:	42bb      	cmp	r3, r7
 80127b0:	d3e0      	bcc.n	8012774 <__gethex+0x22c>
 80127b2:	4618      	mov	r0, r3
 80127b4:	9901      	ldr	r1, [sp, #4]
 80127b6:	9307      	str	r3, [sp, #28]
 80127b8:	4652      	mov	r2, sl
 80127ba:	f001 fa50 	bl	8013c5e <strncmp>
 80127be:	9b07      	ldr	r3, [sp, #28]
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d1d7      	bne.n	8012774 <__gethex+0x22c>
 80127c4:	461e      	mov	r6, r3
 80127c6:	e78b      	b.n	80126e0 <__gethex+0x198>
 80127c8:	f04f 0a03 	mov.w	sl, #3
 80127cc:	e7b8      	b.n	8012740 <__gethex+0x1f8>
 80127ce:	da0a      	bge.n	80127e6 <__gethex+0x29e>
 80127d0:	1a37      	subs	r7, r6, r0
 80127d2:	4621      	mov	r1, r4
 80127d4:	ee18 0a10 	vmov	r0, s16
 80127d8:	463a      	mov	r2, r7
 80127da:	f000 fcb9 	bl	8013150 <__lshift>
 80127de:	1bed      	subs	r5, r5, r7
 80127e0:	4604      	mov	r4, r0
 80127e2:	f100 0914 	add.w	r9, r0, #20
 80127e6:	f04f 0a00 	mov.w	sl, #0
 80127ea:	e7ae      	b.n	801274a <__gethex+0x202>
 80127ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80127f0:	42a8      	cmp	r0, r5
 80127f2:	dd72      	ble.n	80128da <__gethex+0x392>
 80127f4:	1b45      	subs	r5, r0, r5
 80127f6:	42ae      	cmp	r6, r5
 80127f8:	dc36      	bgt.n	8012868 <__gethex+0x320>
 80127fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80127fe:	2b02      	cmp	r3, #2
 8012800:	d02a      	beq.n	8012858 <__gethex+0x310>
 8012802:	2b03      	cmp	r3, #3
 8012804:	d02c      	beq.n	8012860 <__gethex+0x318>
 8012806:	2b01      	cmp	r3, #1
 8012808:	d11c      	bne.n	8012844 <__gethex+0x2fc>
 801280a:	42ae      	cmp	r6, r5
 801280c:	d11a      	bne.n	8012844 <__gethex+0x2fc>
 801280e:	2e01      	cmp	r6, #1
 8012810:	d112      	bne.n	8012838 <__gethex+0x2f0>
 8012812:	9a04      	ldr	r2, [sp, #16]
 8012814:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	2301      	movs	r3, #1
 801281c:	6123      	str	r3, [r4, #16]
 801281e:	f8c9 3000 	str.w	r3, [r9]
 8012822:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012824:	2762      	movs	r7, #98	; 0x62
 8012826:	601c      	str	r4, [r3, #0]
 8012828:	e723      	b.n	8012672 <__gethex+0x12a>
 801282a:	bf00      	nop
 801282c:	0802ac5c 	.word	0x0802ac5c
 8012830:	0802ab63 	.word	0x0802ab63
 8012834:	0802abd4 	.word	0x0802abd4
 8012838:	1e71      	subs	r1, r6, #1
 801283a:	4620      	mov	r0, r4
 801283c:	f000 fecc 	bl	80135d8 <__any_on>
 8012840:	2800      	cmp	r0, #0
 8012842:	d1e6      	bne.n	8012812 <__gethex+0x2ca>
 8012844:	ee18 0a10 	vmov	r0, s16
 8012848:	4621      	mov	r1, r4
 801284a:	f000 fa65 	bl	8012d18 <_Bfree>
 801284e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012850:	2300      	movs	r3, #0
 8012852:	6013      	str	r3, [r2, #0]
 8012854:	2750      	movs	r7, #80	; 0x50
 8012856:	e70c      	b.n	8012672 <__gethex+0x12a>
 8012858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1f2      	bne.n	8012844 <__gethex+0x2fc>
 801285e:	e7d8      	b.n	8012812 <__gethex+0x2ca>
 8012860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1d5      	bne.n	8012812 <__gethex+0x2ca>
 8012866:	e7ed      	b.n	8012844 <__gethex+0x2fc>
 8012868:	1e6f      	subs	r7, r5, #1
 801286a:	f1ba 0f00 	cmp.w	sl, #0
 801286e:	d131      	bne.n	80128d4 <__gethex+0x38c>
 8012870:	b127      	cbz	r7, 801287c <__gethex+0x334>
 8012872:	4639      	mov	r1, r7
 8012874:	4620      	mov	r0, r4
 8012876:	f000 feaf 	bl	80135d8 <__any_on>
 801287a:	4682      	mov	sl, r0
 801287c:	117b      	asrs	r3, r7, #5
 801287e:	2101      	movs	r1, #1
 8012880:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012884:	f007 071f 	and.w	r7, r7, #31
 8012888:	fa01 f707 	lsl.w	r7, r1, r7
 801288c:	421f      	tst	r7, r3
 801288e:	4629      	mov	r1, r5
 8012890:	4620      	mov	r0, r4
 8012892:	bf18      	it	ne
 8012894:	f04a 0a02 	orrne.w	sl, sl, #2
 8012898:	1b76      	subs	r6, r6, r5
 801289a:	f7ff fdee 	bl	801247a <rshift>
 801289e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80128a2:	2702      	movs	r7, #2
 80128a4:	f1ba 0f00 	cmp.w	sl, #0
 80128a8:	d048      	beq.n	801293c <__gethex+0x3f4>
 80128aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128ae:	2b02      	cmp	r3, #2
 80128b0:	d015      	beq.n	80128de <__gethex+0x396>
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d017      	beq.n	80128e6 <__gethex+0x39e>
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d109      	bne.n	80128ce <__gethex+0x386>
 80128ba:	f01a 0f02 	tst.w	sl, #2
 80128be:	d006      	beq.n	80128ce <__gethex+0x386>
 80128c0:	f8d9 0000 	ldr.w	r0, [r9]
 80128c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80128c8:	f01a 0f01 	tst.w	sl, #1
 80128cc:	d10e      	bne.n	80128ec <__gethex+0x3a4>
 80128ce:	f047 0710 	orr.w	r7, r7, #16
 80128d2:	e033      	b.n	801293c <__gethex+0x3f4>
 80128d4:	f04f 0a01 	mov.w	sl, #1
 80128d8:	e7d0      	b.n	801287c <__gethex+0x334>
 80128da:	2701      	movs	r7, #1
 80128dc:	e7e2      	b.n	80128a4 <__gethex+0x35c>
 80128de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128e0:	f1c3 0301 	rsb	r3, r3, #1
 80128e4:	9315      	str	r3, [sp, #84]	; 0x54
 80128e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d0f0      	beq.n	80128ce <__gethex+0x386>
 80128ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80128f0:	f104 0314 	add.w	r3, r4, #20
 80128f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80128f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80128fc:	f04f 0c00 	mov.w	ip, #0
 8012900:	4618      	mov	r0, r3
 8012902:	f853 2b04 	ldr.w	r2, [r3], #4
 8012906:	f1b2 3fff 	cmp.w	r2, #4294967295
 801290a:	d01c      	beq.n	8012946 <__gethex+0x3fe>
 801290c:	3201      	adds	r2, #1
 801290e:	6002      	str	r2, [r0, #0]
 8012910:	2f02      	cmp	r7, #2
 8012912:	f104 0314 	add.w	r3, r4, #20
 8012916:	d13f      	bne.n	8012998 <__gethex+0x450>
 8012918:	f8d8 2000 	ldr.w	r2, [r8]
 801291c:	3a01      	subs	r2, #1
 801291e:	42b2      	cmp	r2, r6
 8012920:	d10a      	bne.n	8012938 <__gethex+0x3f0>
 8012922:	1171      	asrs	r1, r6, #5
 8012924:	2201      	movs	r2, #1
 8012926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801292a:	f006 061f 	and.w	r6, r6, #31
 801292e:	fa02 f606 	lsl.w	r6, r2, r6
 8012932:	421e      	tst	r6, r3
 8012934:	bf18      	it	ne
 8012936:	4617      	movne	r7, r2
 8012938:	f047 0720 	orr.w	r7, r7, #32
 801293c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801293e:	601c      	str	r4, [r3, #0]
 8012940:	9b04      	ldr	r3, [sp, #16]
 8012942:	601d      	str	r5, [r3, #0]
 8012944:	e695      	b.n	8012672 <__gethex+0x12a>
 8012946:	4299      	cmp	r1, r3
 8012948:	f843 cc04 	str.w	ip, [r3, #-4]
 801294c:	d8d8      	bhi.n	8012900 <__gethex+0x3b8>
 801294e:	68a3      	ldr	r3, [r4, #8]
 8012950:	459b      	cmp	fp, r3
 8012952:	db19      	blt.n	8012988 <__gethex+0x440>
 8012954:	6861      	ldr	r1, [r4, #4]
 8012956:	ee18 0a10 	vmov	r0, s16
 801295a:	3101      	adds	r1, #1
 801295c:	f000 f99c 	bl	8012c98 <_Balloc>
 8012960:	4681      	mov	r9, r0
 8012962:	b918      	cbnz	r0, 801296c <__gethex+0x424>
 8012964:	4b1a      	ldr	r3, [pc, #104]	; (80129d0 <__gethex+0x488>)
 8012966:	4602      	mov	r2, r0
 8012968:	2184      	movs	r1, #132	; 0x84
 801296a:	e6a8      	b.n	80126be <__gethex+0x176>
 801296c:	6922      	ldr	r2, [r4, #16]
 801296e:	3202      	adds	r2, #2
 8012970:	f104 010c 	add.w	r1, r4, #12
 8012974:	0092      	lsls	r2, r2, #2
 8012976:	300c      	adds	r0, #12
 8012978:	f7fc fd54 	bl	800f424 <memcpy>
 801297c:	4621      	mov	r1, r4
 801297e:	ee18 0a10 	vmov	r0, s16
 8012982:	f000 f9c9 	bl	8012d18 <_Bfree>
 8012986:	464c      	mov	r4, r9
 8012988:	6923      	ldr	r3, [r4, #16]
 801298a:	1c5a      	adds	r2, r3, #1
 801298c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012990:	6122      	str	r2, [r4, #16]
 8012992:	2201      	movs	r2, #1
 8012994:	615a      	str	r2, [r3, #20]
 8012996:	e7bb      	b.n	8012910 <__gethex+0x3c8>
 8012998:	6922      	ldr	r2, [r4, #16]
 801299a:	455a      	cmp	r2, fp
 801299c:	dd0b      	ble.n	80129b6 <__gethex+0x46e>
 801299e:	2101      	movs	r1, #1
 80129a0:	4620      	mov	r0, r4
 80129a2:	f7ff fd6a 	bl	801247a <rshift>
 80129a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129aa:	3501      	adds	r5, #1
 80129ac:	42ab      	cmp	r3, r5
 80129ae:	f6ff aed0 	blt.w	8012752 <__gethex+0x20a>
 80129b2:	2701      	movs	r7, #1
 80129b4:	e7c0      	b.n	8012938 <__gethex+0x3f0>
 80129b6:	f016 061f 	ands.w	r6, r6, #31
 80129ba:	d0fa      	beq.n	80129b2 <__gethex+0x46a>
 80129bc:	4453      	add	r3, sl
 80129be:	f1c6 0620 	rsb	r6, r6, #32
 80129c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80129c6:	f000 fa59 	bl	8012e7c <__hi0bits>
 80129ca:	42b0      	cmp	r0, r6
 80129cc:	dbe7      	blt.n	801299e <__gethex+0x456>
 80129ce:	e7f0      	b.n	80129b2 <__gethex+0x46a>
 80129d0:	0802ab63 	.word	0x0802ab63

080129d4 <L_shift>:
 80129d4:	f1c2 0208 	rsb	r2, r2, #8
 80129d8:	0092      	lsls	r2, r2, #2
 80129da:	b570      	push	{r4, r5, r6, lr}
 80129dc:	f1c2 0620 	rsb	r6, r2, #32
 80129e0:	6843      	ldr	r3, [r0, #4]
 80129e2:	6804      	ldr	r4, [r0, #0]
 80129e4:	fa03 f506 	lsl.w	r5, r3, r6
 80129e8:	432c      	orrs	r4, r5
 80129ea:	40d3      	lsrs	r3, r2
 80129ec:	6004      	str	r4, [r0, #0]
 80129ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80129f2:	4288      	cmp	r0, r1
 80129f4:	d3f4      	bcc.n	80129e0 <L_shift+0xc>
 80129f6:	bd70      	pop	{r4, r5, r6, pc}

080129f8 <__match>:
 80129f8:	b530      	push	{r4, r5, lr}
 80129fa:	6803      	ldr	r3, [r0, #0]
 80129fc:	3301      	adds	r3, #1
 80129fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a02:	b914      	cbnz	r4, 8012a0a <__match+0x12>
 8012a04:	6003      	str	r3, [r0, #0]
 8012a06:	2001      	movs	r0, #1
 8012a08:	bd30      	pop	{r4, r5, pc}
 8012a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a12:	2d19      	cmp	r5, #25
 8012a14:	bf98      	it	ls
 8012a16:	3220      	addls	r2, #32
 8012a18:	42a2      	cmp	r2, r4
 8012a1a:	d0f0      	beq.n	80129fe <__match+0x6>
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	e7f3      	b.n	8012a08 <__match+0x10>

08012a20 <__hexnan>:
 8012a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a24:	680b      	ldr	r3, [r1, #0]
 8012a26:	115e      	asrs	r6, r3, #5
 8012a28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a2c:	f013 031f 	ands.w	r3, r3, #31
 8012a30:	b087      	sub	sp, #28
 8012a32:	bf18      	it	ne
 8012a34:	3604      	addne	r6, #4
 8012a36:	2500      	movs	r5, #0
 8012a38:	1f37      	subs	r7, r6, #4
 8012a3a:	4690      	mov	r8, r2
 8012a3c:	6802      	ldr	r2, [r0, #0]
 8012a3e:	9301      	str	r3, [sp, #4]
 8012a40:	4682      	mov	sl, r0
 8012a42:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a46:	46b9      	mov	r9, r7
 8012a48:	463c      	mov	r4, r7
 8012a4a:	9502      	str	r5, [sp, #8]
 8012a4c:	46ab      	mov	fp, r5
 8012a4e:	7851      	ldrb	r1, [r2, #1]
 8012a50:	1c53      	adds	r3, r2, #1
 8012a52:	9303      	str	r3, [sp, #12]
 8012a54:	b341      	cbz	r1, 8012aa8 <__hexnan+0x88>
 8012a56:	4608      	mov	r0, r1
 8012a58:	9205      	str	r2, [sp, #20]
 8012a5a:	9104      	str	r1, [sp, #16]
 8012a5c:	f7ff fd5f 	bl	801251e <__hexdig_fun>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d14f      	bne.n	8012b04 <__hexnan+0xe4>
 8012a64:	9904      	ldr	r1, [sp, #16]
 8012a66:	9a05      	ldr	r2, [sp, #20]
 8012a68:	2920      	cmp	r1, #32
 8012a6a:	d818      	bhi.n	8012a9e <__hexnan+0x7e>
 8012a6c:	9b02      	ldr	r3, [sp, #8]
 8012a6e:	459b      	cmp	fp, r3
 8012a70:	dd13      	ble.n	8012a9a <__hexnan+0x7a>
 8012a72:	454c      	cmp	r4, r9
 8012a74:	d206      	bcs.n	8012a84 <__hexnan+0x64>
 8012a76:	2d07      	cmp	r5, #7
 8012a78:	dc04      	bgt.n	8012a84 <__hexnan+0x64>
 8012a7a:	462a      	mov	r2, r5
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f7ff ffa8 	bl	80129d4 <L_shift>
 8012a84:	4544      	cmp	r4, r8
 8012a86:	d950      	bls.n	8012b2a <__hexnan+0x10a>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	f1a4 0904 	sub.w	r9, r4, #4
 8012a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a92:	f8cd b008 	str.w	fp, [sp, #8]
 8012a96:	464c      	mov	r4, r9
 8012a98:	461d      	mov	r5, r3
 8012a9a:	9a03      	ldr	r2, [sp, #12]
 8012a9c:	e7d7      	b.n	8012a4e <__hexnan+0x2e>
 8012a9e:	2929      	cmp	r1, #41	; 0x29
 8012aa0:	d156      	bne.n	8012b50 <__hexnan+0x130>
 8012aa2:	3202      	adds	r2, #2
 8012aa4:	f8ca 2000 	str.w	r2, [sl]
 8012aa8:	f1bb 0f00 	cmp.w	fp, #0
 8012aac:	d050      	beq.n	8012b50 <__hexnan+0x130>
 8012aae:	454c      	cmp	r4, r9
 8012ab0:	d206      	bcs.n	8012ac0 <__hexnan+0xa0>
 8012ab2:	2d07      	cmp	r5, #7
 8012ab4:	dc04      	bgt.n	8012ac0 <__hexnan+0xa0>
 8012ab6:	462a      	mov	r2, r5
 8012ab8:	4649      	mov	r1, r9
 8012aba:	4620      	mov	r0, r4
 8012abc:	f7ff ff8a 	bl	80129d4 <L_shift>
 8012ac0:	4544      	cmp	r4, r8
 8012ac2:	d934      	bls.n	8012b2e <__hexnan+0x10e>
 8012ac4:	f1a8 0204 	sub.w	r2, r8, #4
 8012ac8:	4623      	mov	r3, r4
 8012aca:	f853 1b04 	ldr.w	r1, [r3], #4
 8012ace:	f842 1f04 	str.w	r1, [r2, #4]!
 8012ad2:	429f      	cmp	r7, r3
 8012ad4:	d2f9      	bcs.n	8012aca <__hexnan+0xaa>
 8012ad6:	1b3b      	subs	r3, r7, r4
 8012ad8:	f023 0303 	bic.w	r3, r3, #3
 8012adc:	3304      	adds	r3, #4
 8012ade:	3401      	adds	r4, #1
 8012ae0:	3e03      	subs	r6, #3
 8012ae2:	42b4      	cmp	r4, r6
 8012ae4:	bf88      	it	hi
 8012ae6:	2304      	movhi	r3, #4
 8012ae8:	4443      	add	r3, r8
 8012aea:	2200      	movs	r2, #0
 8012aec:	f843 2b04 	str.w	r2, [r3], #4
 8012af0:	429f      	cmp	r7, r3
 8012af2:	d2fb      	bcs.n	8012aec <__hexnan+0xcc>
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	b91b      	cbnz	r3, 8012b00 <__hexnan+0xe0>
 8012af8:	4547      	cmp	r7, r8
 8012afa:	d127      	bne.n	8012b4c <__hexnan+0x12c>
 8012afc:	2301      	movs	r3, #1
 8012afe:	603b      	str	r3, [r7, #0]
 8012b00:	2005      	movs	r0, #5
 8012b02:	e026      	b.n	8012b52 <__hexnan+0x132>
 8012b04:	3501      	adds	r5, #1
 8012b06:	2d08      	cmp	r5, #8
 8012b08:	f10b 0b01 	add.w	fp, fp, #1
 8012b0c:	dd06      	ble.n	8012b1c <__hexnan+0xfc>
 8012b0e:	4544      	cmp	r4, r8
 8012b10:	d9c3      	bls.n	8012a9a <__hexnan+0x7a>
 8012b12:	2300      	movs	r3, #0
 8012b14:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b18:	2501      	movs	r5, #1
 8012b1a:	3c04      	subs	r4, #4
 8012b1c:	6822      	ldr	r2, [r4, #0]
 8012b1e:	f000 000f 	and.w	r0, r0, #15
 8012b22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012b26:	6022      	str	r2, [r4, #0]
 8012b28:	e7b7      	b.n	8012a9a <__hexnan+0x7a>
 8012b2a:	2508      	movs	r5, #8
 8012b2c:	e7b5      	b.n	8012a9a <__hexnan+0x7a>
 8012b2e:	9b01      	ldr	r3, [sp, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d0df      	beq.n	8012af4 <__hexnan+0xd4>
 8012b34:	f04f 32ff 	mov.w	r2, #4294967295
 8012b38:	f1c3 0320 	rsb	r3, r3, #32
 8012b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8012b40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b44:	401a      	ands	r2, r3
 8012b46:	f846 2c04 	str.w	r2, [r6, #-4]
 8012b4a:	e7d3      	b.n	8012af4 <__hexnan+0xd4>
 8012b4c:	3f04      	subs	r7, #4
 8012b4e:	e7d1      	b.n	8012af4 <__hexnan+0xd4>
 8012b50:	2004      	movs	r0, #4
 8012b52:	b007      	add	sp, #28
 8012b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b58 <_localeconv_r>:
 8012b58:	4800      	ldr	r0, [pc, #0]	; (8012b5c <_localeconv_r+0x4>)
 8012b5a:	4770      	bx	lr
 8012b5c:	20000234 	.word	0x20000234

08012b60 <__retarget_lock_init_recursive>:
 8012b60:	4770      	bx	lr

08012b62 <__retarget_lock_acquire_recursive>:
 8012b62:	4770      	bx	lr

08012b64 <__retarget_lock_release_recursive>:
 8012b64:	4770      	bx	lr

08012b66 <__swhatbuf_r>:
 8012b66:	b570      	push	{r4, r5, r6, lr}
 8012b68:	460e      	mov	r6, r1
 8012b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b6e:	2900      	cmp	r1, #0
 8012b70:	b096      	sub	sp, #88	; 0x58
 8012b72:	4614      	mov	r4, r2
 8012b74:	461d      	mov	r5, r3
 8012b76:	da08      	bge.n	8012b8a <__swhatbuf_r+0x24>
 8012b78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	602a      	str	r2, [r5, #0]
 8012b80:	061a      	lsls	r2, r3, #24
 8012b82:	d410      	bmi.n	8012ba6 <__swhatbuf_r+0x40>
 8012b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b88:	e00e      	b.n	8012ba8 <__swhatbuf_r+0x42>
 8012b8a:	466a      	mov	r2, sp
 8012b8c:	f001 f8aa 	bl	8013ce4 <_fstat_r>
 8012b90:	2800      	cmp	r0, #0
 8012b92:	dbf1      	blt.n	8012b78 <__swhatbuf_r+0x12>
 8012b94:	9a01      	ldr	r2, [sp, #4]
 8012b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b9e:	425a      	negs	r2, r3
 8012ba0:	415a      	adcs	r2, r3
 8012ba2:	602a      	str	r2, [r5, #0]
 8012ba4:	e7ee      	b.n	8012b84 <__swhatbuf_r+0x1e>
 8012ba6:	2340      	movs	r3, #64	; 0x40
 8012ba8:	2000      	movs	r0, #0
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	b016      	add	sp, #88	; 0x58
 8012bae:	bd70      	pop	{r4, r5, r6, pc}

08012bb0 <__smakebuf_r>:
 8012bb0:	898b      	ldrh	r3, [r1, #12]
 8012bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bb4:	079d      	lsls	r5, r3, #30
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	460c      	mov	r4, r1
 8012bba:	d507      	bpl.n	8012bcc <__smakebuf_r+0x1c>
 8012bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	6123      	str	r3, [r4, #16]
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	6163      	str	r3, [r4, #20]
 8012bc8:	b002      	add	sp, #8
 8012bca:	bd70      	pop	{r4, r5, r6, pc}
 8012bcc:	ab01      	add	r3, sp, #4
 8012bce:	466a      	mov	r2, sp
 8012bd0:	f7ff ffc9 	bl	8012b66 <__swhatbuf_r>
 8012bd4:	9900      	ldr	r1, [sp, #0]
 8012bd6:	4605      	mov	r5, r0
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f000 fda1 	bl	8013720 <_malloc_r>
 8012bde:	b948      	cbnz	r0, 8012bf4 <__smakebuf_r+0x44>
 8012be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012be4:	059a      	lsls	r2, r3, #22
 8012be6:	d4ef      	bmi.n	8012bc8 <__smakebuf_r+0x18>
 8012be8:	f023 0303 	bic.w	r3, r3, #3
 8012bec:	f043 0302 	orr.w	r3, r3, #2
 8012bf0:	81a3      	strh	r3, [r4, #12]
 8012bf2:	e7e3      	b.n	8012bbc <__smakebuf_r+0xc>
 8012bf4:	4b0d      	ldr	r3, [pc, #52]	; (8012c2c <__smakebuf_r+0x7c>)
 8012bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8012bf8:	89a3      	ldrh	r3, [r4, #12]
 8012bfa:	6020      	str	r0, [r4, #0]
 8012bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c00:	81a3      	strh	r3, [r4, #12]
 8012c02:	9b00      	ldr	r3, [sp, #0]
 8012c04:	6163      	str	r3, [r4, #20]
 8012c06:	9b01      	ldr	r3, [sp, #4]
 8012c08:	6120      	str	r0, [r4, #16]
 8012c0a:	b15b      	cbz	r3, 8012c24 <__smakebuf_r+0x74>
 8012c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c10:	4630      	mov	r0, r6
 8012c12:	f001 f879 	bl	8013d08 <_isatty_r>
 8012c16:	b128      	cbz	r0, 8012c24 <__smakebuf_r+0x74>
 8012c18:	89a3      	ldrh	r3, [r4, #12]
 8012c1a:	f023 0303 	bic.w	r3, r3, #3
 8012c1e:	f043 0301 	orr.w	r3, r3, #1
 8012c22:	81a3      	strh	r3, [r4, #12]
 8012c24:	89a0      	ldrh	r0, [r4, #12]
 8012c26:	4305      	orrs	r5, r0
 8012c28:	81a5      	strh	r5, [r4, #12]
 8012c2a:	e7cd      	b.n	8012bc8 <__smakebuf_r+0x18>
 8012c2c:	080122d9 	.word	0x080122d9

08012c30 <malloc>:
 8012c30:	4b02      	ldr	r3, [pc, #8]	; (8012c3c <malloc+0xc>)
 8012c32:	4601      	mov	r1, r0
 8012c34:	6818      	ldr	r0, [r3, #0]
 8012c36:	f000 bd73 	b.w	8013720 <_malloc_r>
 8012c3a:	bf00      	nop
 8012c3c:	200000dc 	.word	0x200000dc

08012c40 <__ascii_mbtowc>:
 8012c40:	b082      	sub	sp, #8
 8012c42:	b901      	cbnz	r1, 8012c46 <__ascii_mbtowc+0x6>
 8012c44:	a901      	add	r1, sp, #4
 8012c46:	b142      	cbz	r2, 8012c5a <__ascii_mbtowc+0x1a>
 8012c48:	b14b      	cbz	r3, 8012c5e <__ascii_mbtowc+0x1e>
 8012c4a:	7813      	ldrb	r3, [r2, #0]
 8012c4c:	600b      	str	r3, [r1, #0]
 8012c4e:	7812      	ldrb	r2, [r2, #0]
 8012c50:	1e10      	subs	r0, r2, #0
 8012c52:	bf18      	it	ne
 8012c54:	2001      	movne	r0, #1
 8012c56:	b002      	add	sp, #8
 8012c58:	4770      	bx	lr
 8012c5a:	4610      	mov	r0, r2
 8012c5c:	e7fb      	b.n	8012c56 <__ascii_mbtowc+0x16>
 8012c5e:	f06f 0001 	mvn.w	r0, #1
 8012c62:	e7f8      	b.n	8012c56 <__ascii_mbtowc+0x16>

08012c64 <memmove>:
 8012c64:	4288      	cmp	r0, r1
 8012c66:	b510      	push	{r4, lr}
 8012c68:	eb01 0402 	add.w	r4, r1, r2
 8012c6c:	d902      	bls.n	8012c74 <memmove+0x10>
 8012c6e:	4284      	cmp	r4, r0
 8012c70:	4623      	mov	r3, r4
 8012c72:	d807      	bhi.n	8012c84 <memmove+0x20>
 8012c74:	1e43      	subs	r3, r0, #1
 8012c76:	42a1      	cmp	r1, r4
 8012c78:	d008      	beq.n	8012c8c <memmove+0x28>
 8012c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c82:	e7f8      	b.n	8012c76 <memmove+0x12>
 8012c84:	4402      	add	r2, r0
 8012c86:	4601      	mov	r1, r0
 8012c88:	428a      	cmp	r2, r1
 8012c8a:	d100      	bne.n	8012c8e <memmove+0x2a>
 8012c8c:	bd10      	pop	{r4, pc}
 8012c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c96:	e7f7      	b.n	8012c88 <memmove+0x24>

08012c98 <_Balloc>:
 8012c98:	b570      	push	{r4, r5, r6, lr}
 8012c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	460d      	mov	r5, r1
 8012ca0:	b976      	cbnz	r6, 8012cc0 <_Balloc+0x28>
 8012ca2:	2010      	movs	r0, #16
 8012ca4:	f7ff ffc4 	bl	8012c30 <malloc>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	6260      	str	r0, [r4, #36]	; 0x24
 8012cac:	b920      	cbnz	r0, 8012cb8 <_Balloc+0x20>
 8012cae:	4b18      	ldr	r3, [pc, #96]	; (8012d10 <_Balloc+0x78>)
 8012cb0:	4818      	ldr	r0, [pc, #96]	; (8012d14 <_Balloc+0x7c>)
 8012cb2:	2166      	movs	r1, #102	; 0x66
 8012cb4:	f7fc fb5c 	bl	800f370 <__assert_func>
 8012cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cbc:	6006      	str	r6, [r0, #0]
 8012cbe:	60c6      	str	r6, [r0, #12]
 8012cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012cc2:	68f3      	ldr	r3, [r6, #12]
 8012cc4:	b183      	cbz	r3, 8012ce8 <_Balloc+0x50>
 8012cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cce:	b9b8      	cbnz	r0, 8012d00 <_Balloc+0x68>
 8012cd0:	2101      	movs	r1, #1
 8012cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8012cd6:	1d72      	adds	r2, r6, #5
 8012cd8:	0092      	lsls	r2, r2, #2
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f000 fc9d 	bl	801361a <_calloc_r>
 8012ce0:	b160      	cbz	r0, 8012cfc <_Balloc+0x64>
 8012ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ce6:	e00e      	b.n	8012d06 <_Balloc+0x6e>
 8012ce8:	2221      	movs	r2, #33	; 0x21
 8012cea:	2104      	movs	r1, #4
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 fc94 	bl	801361a <_calloc_r>
 8012cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cf4:	60f0      	str	r0, [r6, #12]
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1e4      	bne.n	8012cc6 <_Balloc+0x2e>
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	6802      	ldr	r2, [r0, #0]
 8012d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d06:	2300      	movs	r3, #0
 8012d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d0c:	e7f7      	b.n	8012cfe <_Balloc+0x66>
 8012d0e:	bf00      	nop
 8012d10:	0802aace 	.word	0x0802aace
 8012d14:	0802ac70 	.word	0x0802ac70

08012d18 <_Bfree>:
 8012d18:	b570      	push	{r4, r5, r6, lr}
 8012d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	460c      	mov	r4, r1
 8012d20:	b976      	cbnz	r6, 8012d40 <_Bfree+0x28>
 8012d22:	2010      	movs	r0, #16
 8012d24:	f7ff ff84 	bl	8012c30 <malloc>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	6268      	str	r0, [r5, #36]	; 0x24
 8012d2c:	b920      	cbnz	r0, 8012d38 <_Bfree+0x20>
 8012d2e:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <_Bfree+0x3c>)
 8012d30:	4809      	ldr	r0, [pc, #36]	; (8012d58 <_Bfree+0x40>)
 8012d32:	218a      	movs	r1, #138	; 0x8a
 8012d34:	f7fc fb1c 	bl	800f370 <__assert_func>
 8012d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d3c:	6006      	str	r6, [r0, #0]
 8012d3e:	60c6      	str	r6, [r0, #12]
 8012d40:	b13c      	cbz	r4, 8012d52 <_Bfree+0x3a>
 8012d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d44:	6862      	ldr	r2, [r4, #4]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d4c:	6021      	str	r1, [r4, #0]
 8012d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d52:	bd70      	pop	{r4, r5, r6, pc}
 8012d54:	0802aace 	.word	0x0802aace
 8012d58:	0802ac70 	.word	0x0802ac70

08012d5c <__multadd>:
 8012d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d60:	690d      	ldr	r5, [r1, #16]
 8012d62:	4607      	mov	r7, r0
 8012d64:	460c      	mov	r4, r1
 8012d66:	461e      	mov	r6, r3
 8012d68:	f101 0c14 	add.w	ip, r1, #20
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8012d72:	b299      	uxth	r1, r3
 8012d74:	fb02 6101 	mla	r1, r2, r1, r6
 8012d78:	0c1e      	lsrs	r6, r3, #16
 8012d7a:	0c0b      	lsrs	r3, r1, #16
 8012d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8012d80:	b289      	uxth	r1, r1
 8012d82:	3001      	adds	r0, #1
 8012d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d88:	4285      	cmp	r5, r0
 8012d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8012d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d92:	dcec      	bgt.n	8012d6e <__multadd+0x12>
 8012d94:	b30e      	cbz	r6, 8012dda <__multadd+0x7e>
 8012d96:	68a3      	ldr	r3, [r4, #8]
 8012d98:	42ab      	cmp	r3, r5
 8012d9a:	dc19      	bgt.n	8012dd0 <__multadd+0x74>
 8012d9c:	6861      	ldr	r1, [r4, #4]
 8012d9e:	4638      	mov	r0, r7
 8012da0:	3101      	adds	r1, #1
 8012da2:	f7ff ff79 	bl	8012c98 <_Balloc>
 8012da6:	4680      	mov	r8, r0
 8012da8:	b928      	cbnz	r0, 8012db6 <__multadd+0x5a>
 8012daa:	4602      	mov	r2, r0
 8012dac:	4b0c      	ldr	r3, [pc, #48]	; (8012de0 <__multadd+0x84>)
 8012dae:	480d      	ldr	r0, [pc, #52]	; (8012de4 <__multadd+0x88>)
 8012db0:	21b5      	movs	r1, #181	; 0xb5
 8012db2:	f7fc fadd 	bl	800f370 <__assert_func>
 8012db6:	6922      	ldr	r2, [r4, #16]
 8012db8:	3202      	adds	r2, #2
 8012dba:	f104 010c 	add.w	r1, r4, #12
 8012dbe:	0092      	lsls	r2, r2, #2
 8012dc0:	300c      	adds	r0, #12
 8012dc2:	f7fc fb2f 	bl	800f424 <memcpy>
 8012dc6:	4621      	mov	r1, r4
 8012dc8:	4638      	mov	r0, r7
 8012dca:	f7ff ffa5 	bl	8012d18 <_Bfree>
 8012dce:	4644      	mov	r4, r8
 8012dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012dd4:	3501      	adds	r5, #1
 8012dd6:	615e      	str	r6, [r3, #20]
 8012dd8:	6125      	str	r5, [r4, #16]
 8012dda:	4620      	mov	r0, r4
 8012ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de0:	0802ab63 	.word	0x0802ab63
 8012de4:	0802ac70 	.word	0x0802ac70

08012de8 <__s2b>:
 8012de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dec:	460c      	mov	r4, r1
 8012dee:	4615      	mov	r5, r2
 8012df0:	461f      	mov	r7, r3
 8012df2:	2209      	movs	r2, #9
 8012df4:	3308      	adds	r3, #8
 8012df6:	4606      	mov	r6, r0
 8012df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dfc:	2100      	movs	r1, #0
 8012dfe:	2201      	movs	r2, #1
 8012e00:	429a      	cmp	r2, r3
 8012e02:	db09      	blt.n	8012e18 <__s2b+0x30>
 8012e04:	4630      	mov	r0, r6
 8012e06:	f7ff ff47 	bl	8012c98 <_Balloc>
 8012e0a:	b940      	cbnz	r0, 8012e1e <__s2b+0x36>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	4b19      	ldr	r3, [pc, #100]	; (8012e74 <__s2b+0x8c>)
 8012e10:	4819      	ldr	r0, [pc, #100]	; (8012e78 <__s2b+0x90>)
 8012e12:	21ce      	movs	r1, #206	; 0xce
 8012e14:	f7fc faac 	bl	800f370 <__assert_func>
 8012e18:	0052      	lsls	r2, r2, #1
 8012e1a:	3101      	adds	r1, #1
 8012e1c:	e7f0      	b.n	8012e00 <__s2b+0x18>
 8012e1e:	9b08      	ldr	r3, [sp, #32]
 8012e20:	6143      	str	r3, [r0, #20]
 8012e22:	2d09      	cmp	r5, #9
 8012e24:	f04f 0301 	mov.w	r3, #1
 8012e28:	6103      	str	r3, [r0, #16]
 8012e2a:	dd16      	ble.n	8012e5a <__s2b+0x72>
 8012e2c:	f104 0909 	add.w	r9, r4, #9
 8012e30:	46c8      	mov	r8, r9
 8012e32:	442c      	add	r4, r5
 8012e34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e38:	4601      	mov	r1, r0
 8012e3a:	3b30      	subs	r3, #48	; 0x30
 8012e3c:	220a      	movs	r2, #10
 8012e3e:	4630      	mov	r0, r6
 8012e40:	f7ff ff8c 	bl	8012d5c <__multadd>
 8012e44:	45a0      	cmp	r8, r4
 8012e46:	d1f5      	bne.n	8012e34 <__s2b+0x4c>
 8012e48:	f1a5 0408 	sub.w	r4, r5, #8
 8012e4c:	444c      	add	r4, r9
 8012e4e:	1b2d      	subs	r5, r5, r4
 8012e50:	1963      	adds	r3, r4, r5
 8012e52:	42bb      	cmp	r3, r7
 8012e54:	db04      	blt.n	8012e60 <__s2b+0x78>
 8012e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e5a:	340a      	adds	r4, #10
 8012e5c:	2509      	movs	r5, #9
 8012e5e:	e7f6      	b.n	8012e4e <__s2b+0x66>
 8012e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e64:	4601      	mov	r1, r0
 8012e66:	3b30      	subs	r3, #48	; 0x30
 8012e68:	220a      	movs	r2, #10
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	f7ff ff76 	bl	8012d5c <__multadd>
 8012e70:	e7ee      	b.n	8012e50 <__s2b+0x68>
 8012e72:	bf00      	nop
 8012e74:	0802ab63 	.word	0x0802ab63
 8012e78:	0802ac70 	.word	0x0802ac70

08012e7c <__hi0bits>:
 8012e7c:	0c03      	lsrs	r3, r0, #16
 8012e7e:	041b      	lsls	r3, r3, #16
 8012e80:	b9d3      	cbnz	r3, 8012eb8 <__hi0bits+0x3c>
 8012e82:	0400      	lsls	r0, r0, #16
 8012e84:	2310      	movs	r3, #16
 8012e86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e8a:	bf04      	itt	eq
 8012e8c:	0200      	lsleq	r0, r0, #8
 8012e8e:	3308      	addeq	r3, #8
 8012e90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e94:	bf04      	itt	eq
 8012e96:	0100      	lsleq	r0, r0, #4
 8012e98:	3304      	addeq	r3, #4
 8012e9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e9e:	bf04      	itt	eq
 8012ea0:	0080      	lsleq	r0, r0, #2
 8012ea2:	3302      	addeq	r3, #2
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	db05      	blt.n	8012eb4 <__hi0bits+0x38>
 8012ea8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012eac:	f103 0301 	add.w	r3, r3, #1
 8012eb0:	bf08      	it	eq
 8012eb2:	2320      	moveq	r3, #32
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	4770      	bx	lr
 8012eb8:	2300      	movs	r3, #0
 8012eba:	e7e4      	b.n	8012e86 <__hi0bits+0xa>

08012ebc <__lo0bits>:
 8012ebc:	6803      	ldr	r3, [r0, #0]
 8012ebe:	f013 0207 	ands.w	r2, r3, #7
 8012ec2:	4601      	mov	r1, r0
 8012ec4:	d00b      	beq.n	8012ede <__lo0bits+0x22>
 8012ec6:	07da      	lsls	r2, r3, #31
 8012ec8:	d423      	bmi.n	8012f12 <__lo0bits+0x56>
 8012eca:	0798      	lsls	r0, r3, #30
 8012ecc:	bf49      	itett	mi
 8012ece:	085b      	lsrmi	r3, r3, #1
 8012ed0:	089b      	lsrpl	r3, r3, #2
 8012ed2:	2001      	movmi	r0, #1
 8012ed4:	600b      	strmi	r3, [r1, #0]
 8012ed6:	bf5c      	itt	pl
 8012ed8:	600b      	strpl	r3, [r1, #0]
 8012eda:	2002      	movpl	r0, #2
 8012edc:	4770      	bx	lr
 8012ede:	b298      	uxth	r0, r3
 8012ee0:	b9a8      	cbnz	r0, 8012f0e <__lo0bits+0x52>
 8012ee2:	0c1b      	lsrs	r3, r3, #16
 8012ee4:	2010      	movs	r0, #16
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	b90a      	cbnz	r2, 8012eee <__lo0bits+0x32>
 8012eea:	3008      	adds	r0, #8
 8012eec:	0a1b      	lsrs	r3, r3, #8
 8012eee:	071a      	lsls	r2, r3, #28
 8012ef0:	bf04      	itt	eq
 8012ef2:	091b      	lsreq	r3, r3, #4
 8012ef4:	3004      	addeq	r0, #4
 8012ef6:	079a      	lsls	r2, r3, #30
 8012ef8:	bf04      	itt	eq
 8012efa:	089b      	lsreq	r3, r3, #2
 8012efc:	3002      	addeq	r0, #2
 8012efe:	07da      	lsls	r2, r3, #31
 8012f00:	d403      	bmi.n	8012f0a <__lo0bits+0x4e>
 8012f02:	085b      	lsrs	r3, r3, #1
 8012f04:	f100 0001 	add.w	r0, r0, #1
 8012f08:	d005      	beq.n	8012f16 <__lo0bits+0x5a>
 8012f0a:	600b      	str	r3, [r1, #0]
 8012f0c:	4770      	bx	lr
 8012f0e:	4610      	mov	r0, r2
 8012f10:	e7e9      	b.n	8012ee6 <__lo0bits+0x2a>
 8012f12:	2000      	movs	r0, #0
 8012f14:	4770      	bx	lr
 8012f16:	2020      	movs	r0, #32
 8012f18:	4770      	bx	lr
	...

08012f1c <__i2b>:
 8012f1c:	b510      	push	{r4, lr}
 8012f1e:	460c      	mov	r4, r1
 8012f20:	2101      	movs	r1, #1
 8012f22:	f7ff feb9 	bl	8012c98 <_Balloc>
 8012f26:	4602      	mov	r2, r0
 8012f28:	b928      	cbnz	r0, 8012f36 <__i2b+0x1a>
 8012f2a:	4b05      	ldr	r3, [pc, #20]	; (8012f40 <__i2b+0x24>)
 8012f2c:	4805      	ldr	r0, [pc, #20]	; (8012f44 <__i2b+0x28>)
 8012f2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f32:	f7fc fa1d 	bl	800f370 <__assert_func>
 8012f36:	2301      	movs	r3, #1
 8012f38:	6144      	str	r4, [r0, #20]
 8012f3a:	6103      	str	r3, [r0, #16]
 8012f3c:	bd10      	pop	{r4, pc}
 8012f3e:	bf00      	nop
 8012f40:	0802ab63 	.word	0x0802ab63
 8012f44:	0802ac70 	.word	0x0802ac70

08012f48 <__multiply>:
 8012f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f4c:	4691      	mov	r9, r2
 8012f4e:	690a      	ldr	r2, [r1, #16]
 8012f50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	bfb8      	it	lt
 8012f58:	460b      	movlt	r3, r1
 8012f5a:	460c      	mov	r4, r1
 8012f5c:	bfbc      	itt	lt
 8012f5e:	464c      	movlt	r4, r9
 8012f60:	4699      	movlt	r9, r3
 8012f62:	6927      	ldr	r7, [r4, #16]
 8012f64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f68:	68a3      	ldr	r3, [r4, #8]
 8012f6a:	6861      	ldr	r1, [r4, #4]
 8012f6c:	eb07 060a 	add.w	r6, r7, sl
 8012f70:	42b3      	cmp	r3, r6
 8012f72:	b085      	sub	sp, #20
 8012f74:	bfb8      	it	lt
 8012f76:	3101      	addlt	r1, #1
 8012f78:	f7ff fe8e 	bl	8012c98 <_Balloc>
 8012f7c:	b930      	cbnz	r0, 8012f8c <__multiply+0x44>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	4b44      	ldr	r3, [pc, #272]	; (8013094 <__multiply+0x14c>)
 8012f82:	4845      	ldr	r0, [pc, #276]	; (8013098 <__multiply+0x150>)
 8012f84:	f240 115d 	movw	r1, #349	; 0x15d
 8012f88:	f7fc f9f2 	bl	800f370 <__assert_func>
 8012f8c:	f100 0514 	add.w	r5, r0, #20
 8012f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f94:	462b      	mov	r3, r5
 8012f96:	2200      	movs	r2, #0
 8012f98:	4543      	cmp	r3, r8
 8012f9a:	d321      	bcc.n	8012fe0 <__multiply+0x98>
 8012f9c:	f104 0314 	add.w	r3, r4, #20
 8012fa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012fa4:	f109 0314 	add.w	r3, r9, #20
 8012fa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012fac:	9202      	str	r2, [sp, #8]
 8012fae:	1b3a      	subs	r2, r7, r4
 8012fb0:	3a15      	subs	r2, #21
 8012fb2:	f022 0203 	bic.w	r2, r2, #3
 8012fb6:	3204      	adds	r2, #4
 8012fb8:	f104 0115 	add.w	r1, r4, #21
 8012fbc:	428f      	cmp	r7, r1
 8012fbe:	bf38      	it	cc
 8012fc0:	2204      	movcc	r2, #4
 8012fc2:	9201      	str	r2, [sp, #4]
 8012fc4:	9a02      	ldr	r2, [sp, #8]
 8012fc6:	9303      	str	r3, [sp, #12]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d80c      	bhi.n	8012fe6 <__multiply+0x9e>
 8012fcc:	2e00      	cmp	r6, #0
 8012fce:	dd03      	ble.n	8012fd8 <__multiply+0x90>
 8012fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d05a      	beq.n	801308e <__multiply+0x146>
 8012fd8:	6106      	str	r6, [r0, #16]
 8012fda:	b005      	add	sp, #20
 8012fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe0:	f843 2b04 	str.w	r2, [r3], #4
 8012fe4:	e7d8      	b.n	8012f98 <__multiply+0x50>
 8012fe6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012fea:	f1ba 0f00 	cmp.w	sl, #0
 8012fee:	d024      	beq.n	801303a <__multiply+0xf2>
 8012ff0:	f104 0e14 	add.w	lr, r4, #20
 8012ff4:	46a9      	mov	r9, r5
 8012ff6:	f04f 0c00 	mov.w	ip, #0
 8012ffa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012ffe:	f8d9 1000 	ldr.w	r1, [r9]
 8013002:	fa1f fb82 	uxth.w	fp, r2
 8013006:	b289      	uxth	r1, r1
 8013008:	fb0a 110b 	mla	r1, sl, fp, r1
 801300c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013010:	f8d9 2000 	ldr.w	r2, [r9]
 8013014:	4461      	add	r1, ip
 8013016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801301a:	fb0a c20b 	mla	r2, sl, fp, ip
 801301e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013022:	b289      	uxth	r1, r1
 8013024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013028:	4577      	cmp	r7, lr
 801302a:	f849 1b04 	str.w	r1, [r9], #4
 801302e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013032:	d8e2      	bhi.n	8012ffa <__multiply+0xb2>
 8013034:	9a01      	ldr	r2, [sp, #4]
 8013036:	f845 c002 	str.w	ip, [r5, r2]
 801303a:	9a03      	ldr	r2, [sp, #12]
 801303c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013040:	3304      	adds	r3, #4
 8013042:	f1b9 0f00 	cmp.w	r9, #0
 8013046:	d020      	beq.n	801308a <__multiply+0x142>
 8013048:	6829      	ldr	r1, [r5, #0]
 801304a:	f104 0c14 	add.w	ip, r4, #20
 801304e:	46ae      	mov	lr, r5
 8013050:	f04f 0a00 	mov.w	sl, #0
 8013054:	f8bc b000 	ldrh.w	fp, [ip]
 8013058:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801305c:	fb09 220b 	mla	r2, r9, fp, r2
 8013060:	4492      	add	sl, r2
 8013062:	b289      	uxth	r1, r1
 8013064:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013068:	f84e 1b04 	str.w	r1, [lr], #4
 801306c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013070:	f8be 1000 	ldrh.w	r1, [lr]
 8013074:	0c12      	lsrs	r2, r2, #16
 8013076:	fb09 1102 	mla	r1, r9, r2, r1
 801307a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801307e:	4567      	cmp	r7, ip
 8013080:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013084:	d8e6      	bhi.n	8013054 <__multiply+0x10c>
 8013086:	9a01      	ldr	r2, [sp, #4]
 8013088:	50a9      	str	r1, [r5, r2]
 801308a:	3504      	adds	r5, #4
 801308c:	e79a      	b.n	8012fc4 <__multiply+0x7c>
 801308e:	3e01      	subs	r6, #1
 8013090:	e79c      	b.n	8012fcc <__multiply+0x84>
 8013092:	bf00      	nop
 8013094:	0802ab63 	.word	0x0802ab63
 8013098:	0802ac70 	.word	0x0802ac70

0801309c <__pow5mult>:
 801309c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130a0:	4615      	mov	r5, r2
 80130a2:	f012 0203 	ands.w	r2, r2, #3
 80130a6:	4606      	mov	r6, r0
 80130a8:	460f      	mov	r7, r1
 80130aa:	d007      	beq.n	80130bc <__pow5mult+0x20>
 80130ac:	4c25      	ldr	r4, [pc, #148]	; (8013144 <__pow5mult+0xa8>)
 80130ae:	3a01      	subs	r2, #1
 80130b0:	2300      	movs	r3, #0
 80130b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130b6:	f7ff fe51 	bl	8012d5c <__multadd>
 80130ba:	4607      	mov	r7, r0
 80130bc:	10ad      	asrs	r5, r5, #2
 80130be:	d03d      	beq.n	801313c <__pow5mult+0xa0>
 80130c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80130c2:	b97c      	cbnz	r4, 80130e4 <__pow5mult+0x48>
 80130c4:	2010      	movs	r0, #16
 80130c6:	f7ff fdb3 	bl	8012c30 <malloc>
 80130ca:	4602      	mov	r2, r0
 80130cc:	6270      	str	r0, [r6, #36]	; 0x24
 80130ce:	b928      	cbnz	r0, 80130dc <__pow5mult+0x40>
 80130d0:	4b1d      	ldr	r3, [pc, #116]	; (8013148 <__pow5mult+0xac>)
 80130d2:	481e      	ldr	r0, [pc, #120]	; (801314c <__pow5mult+0xb0>)
 80130d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80130d8:	f7fc f94a 	bl	800f370 <__assert_func>
 80130dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130e0:	6004      	str	r4, [r0, #0]
 80130e2:	60c4      	str	r4, [r0, #12]
 80130e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80130e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130ec:	b94c      	cbnz	r4, 8013102 <__pow5mult+0x66>
 80130ee:	f240 2171 	movw	r1, #625	; 0x271
 80130f2:	4630      	mov	r0, r6
 80130f4:	f7ff ff12 	bl	8012f1c <__i2b>
 80130f8:	2300      	movs	r3, #0
 80130fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80130fe:	4604      	mov	r4, r0
 8013100:	6003      	str	r3, [r0, #0]
 8013102:	f04f 0900 	mov.w	r9, #0
 8013106:	07eb      	lsls	r3, r5, #31
 8013108:	d50a      	bpl.n	8013120 <__pow5mult+0x84>
 801310a:	4639      	mov	r1, r7
 801310c:	4622      	mov	r2, r4
 801310e:	4630      	mov	r0, r6
 8013110:	f7ff ff1a 	bl	8012f48 <__multiply>
 8013114:	4639      	mov	r1, r7
 8013116:	4680      	mov	r8, r0
 8013118:	4630      	mov	r0, r6
 801311a:	f7ff fdfd 	bl	8012d18 <_Bfree>
 801311e:	4647      	mov	r7, r8
 8013120:	106d      	asrs	r5, r5, #1
 8013122:	d00b      	beq.n	801313c <__pow5mult+0xa0>
 8013124:	6820      	ldr	r0, [r4, #0]
 8013126:	b938      	cbnz	r0, 8013138 <__pow5mult+0x9c>
 8013128:	4622      	mov	r2, r4
 801312a:	4621      	mov	r1, r4
 801312c:	4630      	mov	r0, r6
 801312e:	f7ff ff0b 	bl	8012f48 <__multiply>
 8013132:	6020      	str	r0, [r4, #0]
 8013134:	f8c0 9000 	str.w	r9, [r0]
 8013138:	4604      	mov	r4, r0
 801313a:	e7e4      	b.n	8013106 <__pow5mult+0x6a>
 801313c:	4638      	mov	r0, r7
 801313e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013142:	bf00      	nop
 8013144:	0802ade0 	.word	0x0802ade0
 8013148:	0802aace 	.word	0x0802aace
 801314c:	0802ac70 	.word	0x0802ac70

08013150 <__lshift>:
 8013150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013154:	460c      	mov	r4, r1
 8013156:	6849      	ldr	r1, [r1, #4]
 8013158:	6923      	ldr	r3, [r4, #16]
 801315a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801315e:	68a3      	ldr	r3, [r4, #8]
 8013160:	4607      	mov	r7, r0
 8013162:	4691      	mov	r9, r2
 8013164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013168:	f108 0601 	add.w	r6, r8, #1
 801316c:	42b3      	cmp	r3, r6
 801316e:	db0b      	blt.n	8013188 <__lshift+0x38>
 8013170:	4638      	mov	r0, r7
 8013172:	f7ff fd91 	bl	8012c98 <_Balloc>
 8013176:	4605      	mov	r5, r0
 8013178:	b948      	cbnz	r0, 801318e <__lshift+0x3e>
 801317a:	4602      	mov	r2, r0
 801317c:	4b2a      	ldr	r3, [pc, #168]	; (8013228 <__lshift+0xd8>)
 801317e:	482b      	ldr	r0, [pc, #172]	; (801322c <__lshift+0xdc>)
 8013180:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013184:	f7fc f8f4 	bl	800f370 <__assert_func>
 8013188:	3101      	adds	r1, #1
 801318a:	005b      	lsls	r3, r3, #1
 801318c:	e7ee      	b.n	801316c <__lshift+0x1c>
 801318e:	2300      	movs	r3, #0
 8013190:	f100 0114 	add.w	r1, r0, #20
 8013194:	f100 0210 	add.w	r2, r0, #16
 8013198:	4618      	mov	r0, r3
 801319a:	4553      	cmp	r3, sl
 801319c:	db37      	blt.n	801320e <__lshift+0xbe>
 801319e:	6920      	ldr	r0, [r4, #16]
 80131a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131a4:	f104 0314 	add.w	r3, r4, #20
 80131a8:	f019 091f 	ands.w	r9, r9, #31
 80131ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80131b4:	d02f      	beq.n	8013216 <__lshift+0xc6>
 80131b6:	f1c9 0e20 	rsb	lr, r9, #32
 80131ba:	468a      	mov	sl, r1
 80131bc:	f04f 0c00 	mov.w	ip, #0
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	fa02 f209 	lsl.w	r2, r2, r9
 80131c6:	ea42 020c 	orr.w	r2, r2, ip
 80131ca:	f84a 2b04 	str.w	r2, [sl], #4
 80131ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80131d2:	4298      	cmp	r0, r3
 80131d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80131d8:	d8f2      	bhi.n	80131c0 <__lshift+0x70>
 80131da:	1b03      	subs	r3, r0, r4
 80131dc:	3b15      	subs	r3, #21
 80131de:	f023 0303 	bic.w	r3, r3, #3
 80131e2:	3304      	adds	r3, #4
 80131e4:	f104 0215 	add.w	r2, r4, #21
 80131e8:	4290      	cmp	r0, r2
 80131ea:	bf38      	it	cc
 80131ec:	2304      	movcc	r3, #4
 80131ee:	f841 c003 	str.w	ip, [r1, r3]
 80131f2:	f1bc 0f00 	cmp.w	ip, #0
 80131f6:	d001      	beq.n	80131fc <__lshift+0xac>
 80131f8:	f108 0602 	add.w	r6, r8, #2
 80131fc:	3e01      	subs	r6, #1
 80131fe:	4638      	mov	r0, r7
 8013200:	612e      	str	r6, [r5, #16]
 8013202:	4621      	mov	r1, r4
 8013204:	f7ff fd88 	bl	8012d18 <_Bfree>
 8013208:	4628      	mov	r0, r5
 801320a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801320e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013212:	3301      	adds	r3, #1
 8013214:	e7c1      	b.n	801319a <__lshift+0x4a>
 8013216:	3904      	subs	r1, #4
 8013218:	f853 2b04 	ldr.w	r2, [r3], #4
 801321c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013220:	4298      	cmp	r0, r3
 8013222:	d8f9      	bhi.n	8013218 <__lshift+0xc8>
 8013224:	e7ea      	b.n	80131fc <__lshift+0xac>
 8013226:	bf00      	nop
 8013228:	0802ab63 	.word	0x0802ab63
 801322c:	0802ac70 	.word	0x0802ac70

08013230 <__mcmp>:
 8013230:	b530      	push	{r4, r5, lr}
 8013232:	6902      	ldr	r2, [r0, #16]
 8013234:	690c      	ldr	r4, [r1, #16]
 8013236:	1b12      	subs	r2, r2, r4
 8013238:	d10e      	bne.n	8013258 <__mcmp+0x28>
 801323a:	f100 0314 	add.w	r3, r0, #20
 801323e:	3114      	adds	r1, #20
 8013240:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013244:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013248:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801324c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013250:	42a5      	cmp	r5, r4
 8013252:	d003      	beq.n	801325c <__mcmp+0x2c>
 8013254:	d305      	bcc.n	8013262 <__mcmp+0x32>
 8013256:	2201      	movs	r2, #1
 8013258:	4610      	mov	r0, r2
 801325a:	bd30      	pop	{r4, r5, pc}
 801325c:	4283      	cmp	r3, r0
 801325e:	d3f3      	bcc.n	8013248 <__mcmp+0x18>
 8013260:	e7fa      	b.n	8013258 <__mcmp+0x28>
 8013262:	f04f 32ff 	mov.w	r2, #4294967295
 8013266:	e7f7      	b.n	8013258 <__mcmp+0x28>

08013268 <__mdiff>:
 8013268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801326c:	460c      	mov	r4, r1
 801326e:	4606      	mov	r6, r0
 8013270:	4611      	mov	r1, r2
 8013272:	4620      	mov	r0, r4
 8013274:	4690      	mov	r8, r2
 8013276:	f7ff ffdb 	bl	8013230 <__mcmp>
 801327a:	1e05      	subs	r5, r0, #0
 801327c:	d110      	bne.n	80132a0 <__mdiff+0x38>
 801327e:	4629      	mov	r1, r5
 8013280:	4630      	mov	r0, r6
 8013282:	f7ff fd09 	bl	8012c98 <_Balloc>
 8013286:	b930      	cbnz	r0, 8013296 <__mdiff+0x2e>
 8013288:	4b3a      	ldr	r3, [pc, #232]	; (8013374 <__mdiff+0x10c>)
 801328a:	4602      	mov	r2, r0
 801328c:	f240 2132 	movw	r1, #562	; 0x232
 8013290:	4839      	ldr	r0, [pc, #228]	; (8013378 <__mdiff+0x110>)
 8013292:	f7fc f86d 	bl	800f370 <__assert_func>
 8013296:	2301      	movs	r3, #1
 8013298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801329c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a0:	bfa4      	itt	ge
 80132a2:	4643      	movge	r3, r8
 80132a4:	46a0      	movge	r8, r4
 80132a6:	4630      	mov	r0, r6
 80132a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80132ac:	bfa6      	itte	ge
 80132ae:	461c      	movge	r4, r3
 80132b0:	2500      	movge	r5, #0
 80132b2:	2501      	movlt	r5, #1
 80132b4:	f7ff fcf0 	bl	8012c98 <_Balloc>
 80132b8:	b920      	cbnz	r0, 80132c4 <__mdiff+0x5c>
 80132ba:	4b2e      	ldr	r3, [pc, #184]	; (8013374 <__mdiff+0x10c>)
 80132bc:	4602      	mov	r2, r0
 80132be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132c2:	e7e5      	b.n	8013290 <__mdiff+0x28>
 80132c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80132c8:	6926      	ldr	r6, [r4, #16]
 80132ca:	60c5      	str	r5, [r0, #12]
 80132cc:	f104 0914 	add.w	r9, r4, #20
 80132d0:	f108 0514 	add.w	r5, r8, #20
 80132d4:	f100 0e14 	add.w	lr, r0, #20
 80132d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80132dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80132e0:	f108 0210 	add.w	r2, r8, #16
 80132e4:	46f2      	mov	sl, lr
 80132e6:	2100      	movs	r1, #0
 80132e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80132ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80132f0:	fa1f f883 	uxth.w	r8, r3
 80132f4:	fa11 f18b 	uxtah	r1, r1, fp
 80132f8:	0c1b      	lsrs	r3, r3, #16
 80132fa:	eba1 0808 	sub.w	r8, r1, r8
 80132fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013302:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013306:	fa1f f888 	uxth.w	r8, r8
 801330a:	1419      	asrs	r1, r3, #16
 801330c:	454e      	cmp	r6, r9
 801330e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013312:	f84a 3b04 	str.w	r3, [sl], #4
 8013316:	d8e7      	bhi.n	80132e8 <__mdiff+0x80>
 8013318:	1b33      	subs	r3, r6, r4
 801331a:	3b15      	subs	r3, #21
 801331c:	f023 0303 	bic.w	r3, r3, #3
 8013320:	3304      	adds	r3, #4
 8013322:	3415      	adds	r4, #21
 8013324:	42a6      	cmp	r6, r4
 8013326:	bf38      	it	cc
 8013328:	2304      	movcc	r3, #4
 801332a:	441d      	add	r5, r3
 801332c:	4473      	add	r3, lr
 801332e:	469e      	mov	lr, r3
 8013330:	462e      	mov	r6, r5
 8013332:	4566      	cmp	r6, ip
 8013334:	d30e      	bcc.n	8013354 <__mdiff+0xec>
 8013336:	f10c 0203 	add.w	r2, ip, #3
 801333a:	1b52      	subs	r2, r2, r5
 801333c:	f022 0203 	bic.w	r2, r2, #3
 8013340:	3d03      	subs	r5, #3
 8013342:	45ac      	cmp	ip, r5
 8013344:	bf38      	it	cc
 8013346:	2200      	movcc	r2, #0
 8013348:	441a      	add	r2, r3
 801334a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801334e:	b17b      	cbz	r3, 8013370 <__mdiff+0x108>
 8013350:	6107      	str	r7, [r0, #16]
 8013352:	e7a3      	b.n	801329c <__mdiff+0x34>
 8013354:	f856 8b04 	ldr.w	r8, [r6], #4
 8013358:	fa11 f288 	uxtah	r2, r1, r8
 801335c:	1414      	asrs	r4, r2, #16
 801335e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013362:	b292      	uxth	r2, r2
 8013364:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013368:	f84e 2b04 	str.w	r2, [lr], #4
 801336c:	1421      	asrs	r1, r4, #16
 801336e:	e7e0      	b.n	8013332 <__mdiff+0xca>
 8013370:	3f01      	subs	r7, #1
 8013372:	e7ea      	b.n	801334a <__mdiff+0xe2>
 8013374:	0802ab63 	.word	0x0802ab63
 8013378:	0802ac70 	.word	0x0802ac70

0801337c <__ulp>:
 801337c:	b082      	sub	sp, #8
 801337e:	ed8d 0b00 	vstr	d0, [sp]
 8013382:	9b01      	ldr	r3, [sp, #4]
 8013384:	4912      	ldr	r1, [pc, #72]	; (80133d0 <__ulp+0x54>)
 8013386:	4019      	ands	r1, r3
 8013388:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801338c:	2900      	cmp	r1, #0
 801338e:	dd05      	ble.n	801339c <__ulp+0x20>
 8013390:	2200      	movs	r2, #0
 8013392:	460b      	mov	r3, r1
 8013394:	ec43 2b10 	vmov	d0, r2, r3
 8013398:	b002      	add	sp, #8
 801339a:	4770      	bx	lr
 801339c:	4249      	negs	r1, r1
 801339e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80133a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80133a6:	f04f 0200 	mov.w	r2, #0
 80133aa:	f04f 0300 	mov.w	r3, #0
 80133ae:	da04      	bge.n	80133ba <__ulp+0x3e>
 80133b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80133b4:	fa41 f300 	asr.w	r3, r1, r0
 80133b8:	e7ec      	b.n	8013394 <__ulp+0x18>
 80133ba:	f1a0 0114 	sub.w	r1, r0, #20
 80133be:	291e      	cmp	r1, #30
 80133c0:	bfda      	itte	le
 80133c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80133c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80133ca:	2101      	movgt	r1, #1
 80133cc:	460a      	mov	r2, r1
 80133ce:	e7e1      	b.n	8013394 <__ulp+0x18>
 80133d0:	7ff00000 	.word	0x7ff00000

080133d4 <__b2d>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	6905      	ldr	r5, [r0, #16]
 80133d8:	f100 0714 	add.w	r7, r0, #20
 80133dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80133e0:	1f2e      	subs	r6, r5, #4
 80133e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80133e6:	4620      	mov	r0, r4
 80133e8:	f7ff fd48 	bl	8012e7c <__hi0bits>
 80133ec:	f1c0 0320 	rsb	r3, r0, #32
 80133f0:	280a      	cmp	r0, #10
 80133f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013470 <__b2d+0x9c>
 80133f6:	600b      	str	r3, [r1, #0]
 80133f8:	dc14      	bgt.n	8013424 <__b2d+0x50>
 80133fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80133fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8013402:	42b7      	cmp	r7, r6
 8013404:	ea41 030c 	orr.w	r3, r1, ip
 8013408:	bf34      	ite	cc
 801340a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801340e:	2100      	movcs	r1, #0
 8013410:	3015      	adds	r0, #21
 8013412:	fa04 f000 	lsl.w	r0, r4, r0
 8013416:	fa21 f10e 	lsr.w	r1, r1, lr
 801341a:	ea40 0201 	orr.w	r2, r0, r1
 801341e:	ec43 2b10 	vmov	d0, r2, r3
 8013422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013424:	42b7      	cmp	r7, r6
 8013426:	bf3a      	itte	cc
 8013428:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801342c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013430:	2100      	movcs	r1, #0
 8013432:	380b      	subs	r0, #11
 8013434:	d017      	beq.n	8013466 <__b2d+0x92>
 8013436:	f1c0 0c20 	rsb	ip, r0, #32
 801343a:	fa04 f500 	lsl.w	r5, r4, r0
 801343e:	42be      	cmp	r6, r7
 8013440:	fa21 f40c 	lsr.w	r4, r1, ip
 8013444:	ea45 0504 	orr.w	r5, r5, r4
 8013448:	bf8c      	ite	hi
 801344a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801344e:	2400      	movls	r4, #0
 8013450:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013454:	fa01 f000 	lsl.w	r0, r1, r0
 8013458:	fa24 f40c 	lsr.w	r4, r4, ip
 801345c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013460:	ea40 0204 	orr.w	r2, r0, r4
 8013464:	e7db      	b.n	801341e <__b2d+0x4a>
 8013466:	ea44 030c 	orr.w	r3, r4, ip
 801346a:	460a      	mov	r2, r1
 801346c:	e7d7      	b.n	801341e <__b2d+0x4a>
 801346e:	bf00      	nop
 8013470:	3ff00000 	.word	0x3ff00000

08013474 <__d2b>:
 8013474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013478:	4689      	mov	r9, r1
 801347a:	2101      	movs	r1, #1
 801347c:	ec57 6b10 	vmov	r6, r7, d0
 8013480:	4690      	mov	r8, r2
 8013482:	f7ff fc09 	bl	8012c98 <_Balloc>
 8013486:	4604      	mov	r4, r0
 8013488:	b930      	cbnz	r0, 8013498 <__d2b+0x24>
 801348a:	4602      	mov	r2, r0
 801348c:	4b25      	ldr	r3, [pc, #148]	; (8013524 <__d2b+0xb0>)
 801348e:	4826      	ldr	r0, [pc, #152]	; (8013528 <__d2b+0xb4>)
 8013490:	f240 310a 	movw	r1, #778	; 0x30a
 8013494:	f7fb ff6c 	bl	800f370 <__assert_func>
 8013498:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801349c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80134a0:	bb35      	cbnz	r5, 80134f0 <__d2b+0x7c>
 80134a2:	2e00      	cmp	r6, #0
 80134a4:	9301      	str	r3, [sp, #4]
 80134a6:	d028      	beq.n	80134fa <__d2b+0x86>
 80134a8:	4668      	mov	r0, sp
 80134aa:	9600      	str	r6, [sp, #0]
 80134ac:	f7ff fd06 	bl	8012ebc <__lo0bits>
 80134b0:	9900      	ldr	r1, [sp, #0]
 80134b2:	b300      	cbz	r0, 80134f6 <__d2b+0x82>
 80134b4:	9a01      	ldr	r2, [sp, #4]
 80134b6:	f1c0 0320 	rsb	r3, r0, #32
 80134ba:	fa02 f303 	lsl.w	r3, r2, r3
 80134be:	430b      	orrs	r3, r1
 80134c0:	40c2      	lsrs	r2, r0
 80134c2:	6163      	str	r3, [r4, #20]
 80134c4:	9201      	str	r2, [sp, #4]
 80134c6:	9b01      	ldr	r3, [sp, #4]
 80134c8:	61a3      	str	r3, [r4, #24]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	bf14      	ite	ne
 80134ce:	2202      	movne	r2, #2
 80134d0:	2201      	moveq	r2, #1
 80134d2:	6122      	str	r2, [r4, #16]
 80134d4:	b1d5      	cbz	r5, 801350c <__d2b+0x98>
 80134d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80134da:	4405      	add	r5, r0
 80134dc:	f8c9 5000 	str.w	r5, [r9]
 80134e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134e4:	f8c8 0000 	str.w	r0, [r8]
 80134e8:	4620      	mov	r0, r4
 80134ea:	b003      	add	sp, #12
 80134ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134f4:	e7d5      	b.n	80134a2 <__d2b+0x2e>
 80134f6:	6161      	str	r1, [r4, #20]
 80134f8:	e7e5      	b.n	80134c6 <__d2b+0x52>
 80134fa:	a801      	add	r0, sp, #4
 80134fc:	f7ff fcde 	bl	8012ebc <__lo0bits>
 8013500:	9b01      	ldr	r3, [sp, #4]
 8013502:	6163      	str	r3, [r4, #20]
 8013504:	2201      	movs	r2, #1
 8013506:	6122      	str	r2, [r4, #16]
 8013508:	3020      	adds	r0, #32
 801350a:	e7e3      	b.n	80134d4 <__d2b+0x60>
 801350c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013510:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013514:	f8c9 0000 	str.w	r0, [r9]
 8013518:	6918      	ldr	r0, [r3, #16]
 801351a:	f7ff fcaf 	bl	8012e7c <__hi0bits>
 801351e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013522:	e7df      	b.n	80134e4 <__d2b+0x70>
 8013524:	0802ab63 	.word	0x0802ab63
 8013528:	0802ac70 	.word	0x0802ac70

0801352c <__ratio>:
 801352c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013530:	4688      	mov	r8, r1
 8013532:	4669      	mov	r1, sp
 8013534:	4681      	mov	r9, r0
 8013536:	f7ff ff4d 	bl	80133d4 <__b2d>
 801353a:	a901      	add	r1, sp, #4
 801353c:	4640      	mov	r0, r8
 801353e:	ec55 4b10 	vmov	r4, r5, d0
 8013542:	f7ff ff47 	bl	80133d4 <__b2d>
 8013546:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801354a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801354e:	eba3 0c02 	sub.w	ip, r3, r2
 8013552:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013556:	1a9b      	subs	r3, r3, r2
 8013558:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801355c:	ec51 0b10 	vmov	r0, r1, d0
 8013560:	2b00      	cmp	r3, #0
 8013562:	bfd6      	itet	le
 8013564:	460a      	movle	r2, r1
 8013566:	462a      	movgt	r2, r5
 8013568:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801356c:	468b      	mov	fp, r1
 801356e:	462f      	mov	r7, r5
 8013570:	bfd4      	ite	le
 8013572:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013576:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801357a:	4620      	mov	r0, r4
 801357c:	ee10 2a10 	vmov	r2, s0
 8013580:	465b      	mov	r3, fp
 8013582:	4639      	mov	r1, r7
 8013584:	f7ed f98a 	bl	800089c <__aeabi_ddiv>
 8013588:	ec41 0b10 	vmov	d0, r0, r1
 801358c:	b003      	add	sp, #12
 801358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013592 <__copybits>:
 8013592:	3901      	subs	r1, #1
 8013594:	b570      	push	{r4, r5, r6, lr}
 8013596:	1149      	asrs	r1, r1, #5
 8013598:	6914      	ldr	r4, [r2, #16]
 801359a:	3101      	adds	r1, #1
 801359c:	f102 0314 	add.w	r3, r2, #20
 80135a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80135a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135a8:	1f05      	subs	r5, r0, #4
 80135aa:	42a3      	cmp	r3, r4
 80135ac:	d30c      	bcc.n	80135c8 <__copybits+0x36>
 80135ae:	1aa3      	subs	r3, r4, r2
 80135b0:	3b11      	subs	r3, #17
 80135b2:	f023 0303 	bic.w	r3, r3, #3
 80135b6:	3211      	adds	r2, #17
 80135b8:	42a2      	cmp	r2, r4
 80135ba:	bf88      	it	hi
 80135bc:	2300      	movhi	r3, #0
 80135be:	4418      	add	r0, r3
 80135c0:	2300      	movs	r3, #0
 80135c2:	4288      	cmp	r0, r1
 80135c4:	d305      	bcc.n	80135d2 <__copybits+0x40>
 80135c6:	bd70      	pop	{r4, r5, r6, pc}
 80135c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80135cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80135d0:	e7eb      	b.n	80135aa <__copybits+0x18>
 80135d2:	f840 3b04 	str.w	r3, [r0], #4
 80135d6:	e7f4      	b.n	80135c2 <__copybits+0x30>

080135d8 <__any_on>:
 80135d8:	f100 0214 	add.w	r2, r0, #20
 80135dc:	6900      	ldr	r0, [r0, #16]
 80135de:	114b      	asrs	r3, r1, #5
 80135e0:	4298      	cmp	r0, r3
 80135e2:	b510      	push	{r4, lr}
 80135e4:	db11      	blt.n	801360a <__any_on+0x32>
 80135e6:	dd0a      	ble.n	80135fe <__any_on+0x26>
 80135e8:	f011 011f 	ands.w	r1, r1, #31
 80135ec:	d007      	beq.n	80135fe <__any_on+0x26>
 80135ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80135f2:	fa24 f001 	lsr.w	r0, r4, r1
 80135f6:	fa00 f101 	lsl.w	r1, r0, r1
 80135fa:	428c      	cmp	r4, r1
 80135fc:	d10b      	bne.n	8013616 <__any_on+0x3e>
 80135fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013602:	4293      	cmp	r3, r2
 8013604:	d803      	bhi.n	801360e <__any_on+0x36>
 8013606:	2000      	movs	r0, #0
 8013608:	bd10      	pop	{r4, pc}
 801360a:	4603      	mov	r3, r0
 801360c:	e7f7      	b.n	80135fe <__any_on+0x26>
 801360e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013612:	2900      	cmp	r1, #0
 8013614:	d0f5      	beq.n	8013602 <__any_on+0x2a>
 8013616:	2001      	movs	r0, #1
 8013618:	e7f6      	b.n	8013608 <__any_on+0x30>

0801361a <_calloc_r>:
 801361a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801361c:	fba1 2402 	umull	r2, r4, r1, r2
 8013620:	b94c      	cbnz	r4, 8013636 <_calloc_r+0x1c>
 8013622:	4611      	mov	r1, r2
 8013624:	9201      	str	r2, [sp, #4]
 8013626:	f000 f87b 	bl	8013720 <_malloc_r>
 801362a:	9a01      	ldr	r2, [sp, #4]
 801362c:	4605      	mov	r5, r0
 801362e:	b930      	cbnz	r0, 801363e <_calloc_r+0x24>
 8013630:	4628      	mov	r0, r5
 8013632:	b003      	add	sp, #12
 8013634:	bd30      	pop	{r4, r5, pc}
 8013636:	220c      	movs	r2, #12
 8013638:	6002      	str	r2, [r0, #0]
 801363a:	2500      	movs	r5, #0
 801363c:	e7f8      	b.n	8013630 <_calloc_r+0x16>
 801363e:	4621      	mov	r1, r4
 8013640:	f7fb fefe 	bl	800f440 <memset>
 8013644:	e7f4      	b.n	8013630 <_calloc_r+0x16>
	...

08013648 <_free_r>:
 8013648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801364a:	2900      	cmp	r1, #0
 801364c:	d044      	beq.n	80136d8 <_free_r+0x90>
 801364e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013652:	9001      	str	r0, [sp, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f1a1 0404 	sub.w	r4, r1, #4
 801365a:	bfb8      	it	lt
 801365c:	18e4      	addlt	r4, r4, r3
 801365e:	f000 fb75 	bl	8013d4c <__malloc_lock>
 8013662:	4a1e      	ldr	r2, [pc, #120]	; (80136dc <_free_r+0x94>)
 8013664:	9801      	ldr	r0, [sp, #4]
 8013666:	6813      	ldr	r3, [r2, #0]
 8013668:	b933      	cbnz	r3, 8013678 <_free_r+0x30>
 801366a:	6063      	str	r3, [r4, #4]
 801366c:	6014      	str	r4, [r2, #0]
 801366e:	b003      	add	sp, #12
 8013670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013674:	f000 bb70 	b.w	8013d58 <__malloc_unlock>
 8013678:	42a3      	cmp	r3, r4
 801367a:	d908      	bls.n	801368e <_free_r+0x46>
 801367c:	6825      	ldr	r5, [r4, #0]
 801367e:	1961      	adds	r1, r4, r5
 8013680:	428b      	cmp	r3, r1
 8013682:	bf01      	itttt	eq
 8013684:	6819      	ldreq	r1, [r3, #0]
 8013686:	685b      	ldreq	r3, [r3, #4]
 8013688:	1949      	addeq	r1, r1, r5
 801368a:	6021      	streq	r1, [r4, #0]
 801368c:	e7ed      	b.n	801366a <_free_r+0x22>
 801368e:	461a      	mov	r2, r3
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	b10b      	cbz	r3, 8013698 <_free_r+0x50>
 8013694:	42a3      	cmp	r3, r4
 8013696:	d9fa      	bls.n	801368e <_free_r+0x46>
 8013698:	6811      	ldr	r1, [r2, #0]
 801369a:	1855      	adds	r5, r2, r1
 801369c:	42a5      	cmp	r5, r4
 801369e:	d10b      	bne.n	80136b8 <_free_r+0x70>
 80136a0:	6824      	ldr	r4, [r4, #0]
 80136a2:	4421      	add	r1, r4
 80136a4:	1854      	adds	r4, r2, r1
 80136a6:	42a3      	cmp	r3, r4
 80136a8:	6011      	str	r1, [r2, #0]
 80136aa:	d1e0      	bne.n	801366e <_free_r+0x26>
 80136ac:	681c      	ldr	r4, [r3, #0]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	6053      	str	r3, [r2, #4]
 80136b2:	4421      	add	r1, r4
 80136b4:	6011      	str	r1, [r2, #0]
 80136b6:	e7da      	b.n	801366e <_free_r+0x26>
 80136b8:	d902      	bls.n	80136c0 <_free_r+0x78>
 80136ba:	230c      	movs	r3, #12
 80136bc:	6003      	str	r3, [r0, #0]
 80136be:	e7d6      	b.n	801366e <_free_r+0x26>
 80136c0:	6825      	ldr	r5, [r4, #0]
 80136c2:	1961      	adds	r1, r4, r5
 80136c4:	428b      	cmp	r3, r1
 80136c6:	bf04      	itt	eq
 80136c8:	6819      	ldreq	r1, [r3, #0]
 80136ca:	685b      	ldreq	r3, [r3, #4]
 80136cc:	6063      	str	r3, [r4, #4]
 80136ce:	bf04      	itt	eq
 80136d0:	1949      	addeq	r1, r1, r5
 80136d2:	6021      	streq	r1, [r4, #0]
 80136d4:	6054      	str	r4, [r2, #4]
 80136d6:	e7ca      	b.n	801366e <_free_r+0x26>
 80136d8:	b003      	add	sp, #12
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	20013470 	.word	0x20013470

080136e0 <sbrk_aligned>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	4e0e      	ldr	r6, [pc, #56]	; (801371c <sbrk_aligned+0x3c>)
 80136e4:	460c      	mov	r4, r1
 80136e6:	6831      	ldr	r1, [r6, #0]
 80136e8:	4605      	mov	r5, r0
 80136ea:	b911      	cbnz	r1, 80136f2 <sbrk_aligned+0x12>
 80136ec:	f000 fa20 	bl	8013b30 <_sbrk_r>
 80136f0:	6030      	str	r0, [r6, #0]
 80136f2:	4621      	mov	r1, r4
 80136f4:	4628      	mov	r0, r5
 80136f6:	f000 fa1b 	bl	8013b30 <_sbrk_r>
 80136fa:	1c43      	adds	r3, r0, #1
 80136fc:	d00a      	beq.n	8013714 <sbrk_aligned+0x34>
 80136fe:	1cc4      	adds	r4, r0, #3
 8013700:	f024 0403 	bic.w	r4, r4, #3
 8013704:	42a0      	cmp	r0, r4
 8013706:	d007      	beq.n	8013718 <sbrk_aligned+0x38>
 8013708:	1a21      	subs	r1, r4, r0
 801370a:	4628      	mov	r0, r5
 801370c:	f000 fa10 	bl	8013b30 <_sbrk_r>
 8013710:	3001      	adds	r0, #1
 8013712:	d101      	bne.n	8013718 <sbrk_aligned+0x38>
 8013714:	f04f 34ff 	mov.w	r4, #4294967295
 8013718:	4620      	mov	r0, r4
 801371a:	bd70      	pop	{r4, r5, r6, pc}
 801371c:	20013474 	.word	0x20013474

08013720 <_malloc_r>:
 8013720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013724:	1ccd      	adds	r5, r1, #3
 8013726:	f025 0503 	bic.w	r5, r5, #3
 801372a:	3508      	adds	r5, #8
 801372c:	2d0c      	cmp	r5, #12
 801372e:	bf38      	it	cc
 8013730:	250c      	movcc	r5, #12
 8013732:	2d00      	cmp	r5, #0
 8013734:	4607      	mov	r7, r0
 8013736:	db01      	blt.n	801373c <_malloc_r+0x1c>
 8013738:	42a9      	cmp	r1, r5
 801373a:	d905      	bls.n	8013748 <_malloc_r+0x28>
 801373c:	230c      	movs	r3, #12
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	2600      	movs	r6, #0
 8013742:	4630      	mov	r0, r6
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	4e2e      	ldr	r6, [pc, #184]	; (8013804 <_malloc_r+0xe4>)
 801374a:	f000 faff 	bl	8013d4c <__malloc_lock>
 801374e:	6833      	ldr	r3, [r6, #0]
 8013750:	461c      	mov	r4, r3
 8013752:	bb34      	cbnz	r4, 80137a2 <_malloc_r+0x82>
 8013754:	4629      	mov	r1, r5
 8013756:	4638      	mov	r0, r7
 8013758:	f7ff ffc2 	bl	80136e0 <sbrk_aligned>
 801375c:	1c43      	adds	r3, r0, #1
 801375e:	4604      	mov	r4, r0
 8013760:	d14d      	bne.n	80137fe <_malloc_r+0xde>
 8013762:	6834      	ldr	r4, [r6, #0]
 8013764:	4626      	mov	r6, r4
 8013766:	2e00      	cmp	r6, #0
 8013768:	d140      	bne.n	80137ec <_malloc_r+0xcc>
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	4631      	mov	r1, r6
 801376e:	4638      	mov	r0, r7
 8013770:	eb04 0803 	add.w	r8, r4, r3
 8013774:	f000 f9dc 	bl	8013b30 <_sbrk_r>
 8013778:	4580      	cmp	r8, r0
 801377a:	d13a      	bne.n	80137f2 <_malloc_r+0xd2>
 801377c:	6821      	ldr	r1, [r4, #0]
 801377e:	3503      	adds	r5, #3
 8013780:	1a6d      	subs	r5, r5, r1
 8013782:	f025 0503 	bic.w	r5, r5, #3
 8013786:	3508      	adds	r5, #8
 8013788:	2d0c      	cmp	r5, #12
 801378a:	bf38      	it	cc
 801378c:	250c      	movcc	r5, #12
 801378e:	4629      	mov	r1, r5
 8013790:	4638      	mov	r0, r7
 8013792:	f7ff ffa5 	bl	80136e0 <sbrk_aligned>
 8013796:	3001      	adds	r0, #1
 8013798:	d02b      	beq.n	80137f2 <_malloc_r+0xd2>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	442b      	add	r3, r5
 801379e:	6023      	str	r3, [r4, #0]
 80137a0:	e00e      	b.n	80137c0 <_malloc_r+0xa0>
 80137a2:	6822      	ldr	r2, [r4, #0]
 80137a4:	1b52      	subs	r2, r2, r5
 80137a6:	d41e      	bmi.n	80137e6 <_malloc_r+0xc6>
 80137a8:	2a0b      	cmp	r2, #11
 80137aa:	d916      	bls.n	80137da <_malloc_r+0xba>
 80137ac:	1961      	adds	r1, r4, r5
 80137ae:	42a3      	cmp	r3, r4
 80137b0:	6025      	str	r5, [r4, #0]
 80137b2:	bf18      	it	ne
 80137b4:	6059      	strne	r1, [r3, #4]
 80137b6:	6863      	ldr	r3, [r4, #4]
 80137b8:	bf08      	it	eq
 80137ba:	6031      	streq	r1, [r6, #0]
 80137bc:	5162      	str	r2, [r4, r5]
 80137be:	604b      	str	r3, [r1, #4]
 80137c0:	4638      	mov	r0, r7
 80137c2:	f104 060b 	add.w	r6, r4, #11
 80137c6:	f000 fac7 	bl	8013d58 <__malloc_unlock>
 80137ca:	f026 0607 	bic.w	r6, r6, #7
 80137ce:	1d23      	adds	r3, r4, #4
 80137d0:	1af2      	subs	r2, r6, r3
 80137d2:	d0b6      	beq.n	8013742 <_malloc_r+0x22>
 80137d4:	1b9b      	subs	r3, r3, r6
 80137d6:	50a3      	str	r3, [r4, r2]
 80137d8:	e7b3      	b.n	8013742 <_malloc_r+0x22>
 80137da:	6862      	ldr	r2, [r4, #4]
 80137dc:	42a3      	cmp	r3, r4
 80137de:	bf0c      	ite	eq
 80137e0:	6032      	streq	r2, [r6, #0]
 80137e2:	605a      	strne	r2, [r3, #4]
 80137e4:	e7ec      	b.n	80137c0 <_malloc_r+0xa0>
 80137e6:	4623      	mov	r3, r4
 80137e8:	6864      	ldr	r4, [r4, #4]
 80137ea:	e7b2      	b.n	8013752 <_malloc_r+0x32>
 80137ec:	4634      	mov	r4, r6
 80137ee:	6876      	ldr	r6, [r6, #4]
 80137f0:	e7b9      	b.n	8013766 <_malloc_r+0x46>
 80137f2:	230c      	movs	r3, #12
 80137f4:	603b      	str	r3, [r7, #0]
 80137f6:	4638      	mov	r0, r7
 80137f8:	f000 faae 	bl	8013d58 <__malloc_unlock>
 80137fc:	e7a1      	b.n	8013742 <_malloc_r+0x22>
 80137fe:	6025      	str	r5, [r4, #0]
 8013800:	e7de      	b.n	80137c0 <_malloc_r+0xa0>
 8013802:	bf00      	nop
 8013804:	20013470 	.word	0x20013470

08013808 <_realloc_r>:
 8013808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380c:	4680      	mov	r8, r0
 801380e:	4614      	mov	r4, r2
 8013810:	460e      	mov	r6, r1
 8013812:	b921      	cbnz	r1, 801381e <_realloc_r+0x16>
 8013814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013818:	4611      	mov	r1, r2
 801381a:	f7ff bf81 	b.w	8013720 <_malloc_r>
 801381e:	b92a      	cbnz	r2, 801382c <_realloc_r+0x24>
 8013820:	f7ff ff12 	bl	8013648 <_free_r>
 8013824:	4625      	mov	r5, r4
 8013826:	4628      	mov	r0, r5
 8013828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801382c:	f000 fa9a 	bl	8013d64 <_malloc_usable_size_r>
 8013830:	4284      	cmp	r4, r0
 8013832:	4607      	mov	r7, r0
 8013834:	d802      	bhi.n	801383c <_realloc_r+0x34>
 8013836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801383a:	d812      	bhi.n	8013862 <_realloc_r+0x5a>
 801383c:	4621      	mov	r1, r4
 801383e:	4640      	mov	r0, r8
 8013840:	f7ff ff6e 	bl	8013720 <_malloc_r>
 8013844:	4605      	mov	r5, r0
 8013846:	2800      	cmp	r0, #0
 8013848:	d0ed      	beq.n	8013826 <_realloc_r+0x1e>
 801384a:	42bc      	cmp	r4, r7
 801384c:	4622      	mov	r2, r4
 801384e:	4631      	mov	r1, r6
 8013850:	bf28      	it	cs
 8013852:	463a      	movcs	r2, r7
 8013854:	f7fb fde6 	bl	800f424 <memcpy>
 8013858:	4631      	mov	r1, r6
 801385a:	4640      	mov	r0, r8
 801385c:	f7ff fef4 	bl	8013648 <_free_r>
 8013860:	e7e1      	b.n	8013826 <_realloc_r+0x1e>
 8013862:	4635      	mov	r5, r6
 8013864:	e7df      	b.n	8013826 <_realloc_r+0x1e>

08013866 <__ssputs_r>:
 8013866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801386a:	688e      	ldr	r6, [r1, #8]
 801386c:	429e      	cmp	r6, r3
 801386e:	4682      	mov	sl, r0
 8013870:	460c      	mov	r4, r1
 8013872:	4690      	mov	r8, r2
 8013874:	461f      	mov	r7, r3
 8013876:	d838      	bhi.n	80138ea <__ssputs_r+0x84>
 8013878:	898a      	ldrh	r2, [r1, #12]
 801387a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801387e:	d032      	beq.n	80138e6 <__ssputs_r+0x80>
 8013880:	6825      	ldr	r5, [r4, #0]
 8013882:	6909      	ldr	r1, [r1, #16]
 8013884:	eba5 0901 	sub.w	r9, r5, r1
 8013888:	6965      	ldr	r5, [r4, #20]
 801388a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801388e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013892:	3301      	adds	r3, #1
 8013894:	444b      	add	r3, r9
 8013896:	106d      	asrs	r5, r5, #1
 8013898:	429d      	cmp	r5, r3
 801389a:	bf38      	it	cc
 801389c:	461d      	movcc	r5, r3
 801389e:	0553      	lsls	r3, r2, #21
 80138a0:	d531      	bpl.n	8013906 <__ssputs_r+0xa0>
 80138a2:	4629      	mov	r1, r5
 80138a4:	f7ff ff3c 	bl	8013720 <_malloc_r>
 80138a8:	4606      	mov	r6, r0
 80138aa:	b950      	cbnz	r0, 80138c2 <__ssputs_r+0x5c>
 80138ac:	230c      	movs	r3, #12
 80138ae:	f8ca 3000 	str.w	r3, [sl]
 80138b2:	89a3      	ldrh	r3, [r4, #12]
 80138b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138b8:	81a3      	strh	r3, [r4, #12]
 80138ba:	f04f 30ff 	mov.w	r0, #4294967295
 80138be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c2:	6921      	ldr	r1, [r4, #16]
 80138c4:	464a      	mov	r2, r9
 80138c6:	f7fb fdad 	bl	800f424 <memcpy>
 80138ca:	89a3      	ldrh	r3, [r4, #12]
 80138cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138d4:	81a3      	strh	r3, [r4, #12]
 80138d6:	6126      	str	r6, [r4, #16]
 80138d8:	6165      	str	r5, [r4, #20]
 80138da:	444e      	add	r6, r9
 80138dc:	eba5 0509 	sub.w	r5, r5, r9
 80138e0:	6026      	str	r6, [r4, #0]
 80138e2:	60a5      	str	r5, [r4, #8]
 80138e4:	463e      	mov	r6, r7
 80138e6:	42be      	cmp	r6, r7
 80138e8:	d900      	bls.n	80138ec <__ssputs_r+0x86>
 80138ea:	463e      	mov	r6, r7
 80138ec:	6820      	ldr	r0, [r4, #0]
 80138ee:	4632      	mov	r2, r6
 80138f0:	4641      	mov	r1, r8
 80138f2:	f7ff f9b7 	bl	8012c64 <memmove>
 80138f6:	68a3      	ldr	r3, [r4, #8]
 80138f8:	1b9b      	subs	r3, r3, r6
 80138fa:	60a3      	str	r3, [r4, #8]
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	4433      	add	r3, r6
 8013900:	6023      	str	r3, [r4, #0]
 8013902:	2000      	movs	r0, #0
 8013904:	e7db      	b.n	80138be <__ssputs_r+0x58>
 8013906:	462a      	mov	r2, r5
 8013908:	f7ff ff7e 	bl	8013808 <_realloc_r>
 801390c:	4606      	mov	r6, r0
 801390e:	2800      	cmp	r0, #0
 8013910:	d1e1      	bne.n	80138d6 <__ssputs_r+0x70>
 8013912:	6921      	ldr	r1, [r4, #16]
 8013914:	4650      	mov	r0, sl
 8013916:	f7ff fe97 	bl	8013648 <_free_r>
 801391a:	e7c7      	b.n	80138ac <__ssputs_r+0x46>

0801391c <_svfiprintf_r>:
 801391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013920:	4698      	mov	r8, r3
 8013922:	898b      	ldrh	r3, [r1, #12]
 8013924:	061b      	lsls	r3, r3, #24
 8013926:	b09d      	sub	sp, #116	; 0x74
 8013928:	4607      	mov	r7, r0
 801392a:	460d      	mov	r5, r1
 801392c:	4614      	mov	r4, r2
 801392e:	d50e      	bpl.n	801394e <_svfiprintf_r+0x32>
 8013930:	690b      	ldr	r3, [r1, #16]
 8013932:	b963      	cbnz	r3, 801394e <_svfiprintf_r+0x32>
 8013934:	2140      	movs	r1, #64	; 0x40
 8013936:	f7ff fef3 	bl	8013720 <_malloc_r>
 801393a:	6028      	str	r0, [r5, #0]
 801393c:	6128      	str	r0, [r5, #16]
 801393e:	b920      	cbnz	r0, 801394a <_svfiprintf_r+0x2e>
 8013940:	230c      	movs	r3, #12
 8013942:	603b      	str	r3, [r7, #0]
 8013944:	f04f 30ff 	mov.w	r0, #4294967295
 8013948:	e0d1      	b.n	8013aee <_svfiprintf_r+0x1d2>
 801394a:	2340      	movs	r3, #64	; 0x40
 801394c:	616b      	str	r3, [r5, #20]
 801394e:	2300      	movs	r3, #0
 8013950:	9309      	str	r3, [sp, #36]	; 0x24
 8013952:	2320      	movs	r3, #32
 8013954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013958:	f8cd 800c 	str.w	r8, [sp, #12]
 801395c:	2330      	movs	r3, #48	; 0x30
 801395e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013b08 <_svfiprintf_r+0x1ec>
 8013962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013966:	f04f 0901 	mov.w	r9, #1
 801396a:	4623      	mov	r3, r4
 801396c:	469a      	mov	sl, r3
 801396e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013972:	b10a      	cbz	r2, 8013978 <_svfiprintf_r+0x5c>
 8013974:	2a25      	cmp	r2, #37	; 0x25
 8013976:	d1f9      	bne.n	801396c <_svfiprintf_r+0x50>
 8013978:	ebba 0b04 	subs.w	fp, sl, r4
 801397c:	d00b      	beq.n	8013996 <_svfiprintf_r+0x7a>
 801397e:	465b      	mov	r3, fp
 8013980:	4622      	mov	r2, r4
 8013982:	4629      	mov	r1, r5
 8013984:	4638      	mov	r0, r7
 8013986:	f7ff ff6e 	bl	8013866 <__ssputs_r>
 801398a:	3001      	adds	r0, #1
 801398c:	f000 80aa 	beq.w	8013ae4 <_svfiprintf_r+0x1c8>
 8013990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013992:	445a      	add	r2, fp
 8013994:	9209      	str	r2, [sp, #36]	; 0x24
 8013996:	f89a 3000 	ldrb.w	r3, [sl]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f000 80a2 	beq.w	8013ae4 <_svfiprintf_r+0x1c8>
 80139a0:	2300      	movs	r3, #0
 80139a2:	f04f 32ff 	mov.w	r2, #4294967295
 80139a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139aa:	f10a 0a01 	add.w	sl, sl, #1
 80139ae:	9304      	str	r3, [sp, #16]
 80139b0:	9307      	str	r3, [sp, #28]
 80139b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139b6:	931a      	str	r3, [sp, #104]	; 0x68
 80139b8:	4654      	mov	r4, sl
 80139ba:	2205      	movs	r2, #5
 80139bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c0:	4851      	ldr	r0, [pc, #324]	; (8013b08 <_svfiprintf_r+0x1ec>)
 80139c2:	f7ec fc35 	bl	8000230 <memchr>
 80139c6:	9a04      	ldr	r2, [sp, #16]
 80139c8:	b9d8      	cbnz	r0, 8013a02 <_svfiprintf_r+0xe6>
 80139ca:	06d0      	lsls	r0, r2, #27
 80139cc:	bf44      	itt	mi
 80139ce:	2320      	movmi	r3, #32
 80139d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139d4:	0711      	lsls	r1, r2, #28
 80139d6:	bf44      	itt	mi
 80139d8:	232b      	movmi	r3, #43	; 0x2b
 80139da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139de:	f89a 3000 	ldrb.w	r3, [sl]
 80139e2:	2b2a      	cmp	r3, #42	; 0x2a
 80139e4:	d015      	beq.n	8013a12 <_svfiprintf_r+0xf6>
 80139e6:	9a07      	ldr	r2, [sp, #28]
 80139e8:	4654      	mov	r4, sl
 80139ea:	2000      	movs	r0, #0
 80139ec:	f04f 0c0a 	mov.w	ip, #10
 80139f0:	4621      	mov	r1, r4
 80139f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139f6:	3b30      	subs	r3, #48	; 0x30
 80139f8:	2b09      	cmp	r3, #9
 80139fa:	d94e      	bls.n	8013a9a <_svfiprintf_r+0x17e>
 80139fc:	b1b0      	cbz	r0, 8013a2c <_svfiprintf_r+0x110>
 80139fe:	9207      	str	r2, [sp, #28]
 8013a00:	e014      	b.n	8013a2c <_svfiprintf_r+0x110>
 8013a02:	eba0 0308 	sub.w	r3, r0, r8
 8013a06:	fa09 f303 	lsl.w	r3, r9, r3
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	9304      	str	r3, [sp, #16]
 8013a0e:	46a2      	mov	sl, r4
 8013a10:	e7d2      	b.n	80139b8 <_svfiprintf_r+0x9c>
 8013a12:	9b03      	ldr	r3, [sp, #12]
 8013a14:	1d19      	adds	r1, r3, #4
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	9103      	str	r1, [sp, #12]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	bfbb      	ittet	lt
 8013a1e:	425b      	neglt	r3, r3
 8013a20:	f042 0202 	orrlt.w	r2, r2, #2
 8013a24:	9307      	strge	r3, [sp, #28]
 8013a26:	9307      	strlt	r3, [sp, #28]
 8013a28:	bfb8      	it	lt
 8013a2a:	9204      	strlt	r2, [sp, #16]
 8013a2c:	7823      	ldrb	r3, [r4, #0]
 8013a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8013a30:	d10c      	bne.n	8013a4c <_svfiprintf_r+0x130>
 8013a32:	7863      	ldrb	r3, [r4, #1]
 8013a34:	2b2a      	cmp	r3, #42	; 0x2a
 8013a36:	d135      	bne.n	8013aa4 <_svfiprintf_r+0x188>
 8013a38:	9b03      	ldr	r3, [sp, #12]
 8013a3a:	1d1a      	adds	r2, r3, #4
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	9203      	str	r2, [sp, #12]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	bfb8      	it	lt
 8013a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a48:	3402      	adds	r4, #2
 8013a4a:	9305      	str	r3, [sp, #20]
 8013a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013b18 <_svfiprintf_r+0x1fc>
 8013a50:	7821      	ldrb	r1, [r4, #0]
 8013a52:	2203      	movs	r2, #3
 8013a54:	4650      	mov	r0, sl
 8013a56:	f7ec fbeb 	bl	8000230 <memchr>
 8013a5a:	b140      	cbz	r0, 8013a6e <_svfiprintf_r+0x152>
 8013a5c:	2340      	movs	r3, #64	; 0x40
 8013a5e:	eba0 000a 	sub.w	r0, r0, sl
 8013a62:	fa03 f000 	lsl.w	r0, r3, r0
 8013a66:	9b04      	ldr	r3, [sp, #16]
 8013a68:	4303      	orrs	r3, r0
 8013a6a:	3401      	adds	r4, #1
 8013a6c:	9304      	str	r3, [sp, #16]
 8013a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a72:	4826      	ldr	r0, [pc, #152]	; (8013b0c <_svfiprintf_r+0x1f0>)
 8013a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a78:	2206      	movs	r2, #6
 8013a7a:	f7ec fbd9 	bl	8000230 <memchr>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	d038      	beq.n	8013af4 <_svfiprintf_r+0x1d8>
 8013a82:	4b23      	ldr	r3, [pc, #140]	; (8013b10 <_svfiprintf_r+0x1f4>)
 8013a84:	bb1b      	cbnz	r3, 8013ace <_svfiprintf_r+0x1b2>
 8013a86:	9b03      	ldr	r3, [sp, #12]
 8013a88:	3307      	adds	r3, #7
 8013a8a:	f023 0307 	bic.w	r3, r3, #7
 8013a8e:	3308      	adds	r3, #8
 8013a90:	9303      	str	r3, [sp, #12]
 8013a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a94:	4433      	add	r3, r6
 8013a96:	9309      	str	r3, [sp, #36]	; 0x24
 8013a98:	e767      	b.n	801396a <_svfiprintf_r+0x4e>
 8013a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	2001      	movs	r0, #1
 8013aa2:	e7a5      	b.n	80139f0 <_svfiprintf_r+0xd4>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	3401      	adds	r4, #1
 8013aa8:	9305      	str	r3, [sp, #20]
 8013aaa:	4619      	mov	r1, r3
 8013aac:	f04f 0c0a 	mov.w	ip, #10
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ab6:	3a30      	subs	r2, #48	; 0x30
 8013ab8:	2a09      	cmp	r2, #9
 8013aba:	d903      	bls.n	8013ac4 <_svfiprintf_r+0x1a8>
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d0c5      	beq.n	8013a4c <_svfiprintf_r+0x130>
 8013ac0:	9105      	str	r1, [sp, #20]
 8013ac2:	e7c3      	b.n	8013a4c <_svfiprintf_r+0x130>
 8013ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ac8:	4604      	mov	r4, r0
 8013aca:	2301      	movs	r3, #1
 8013acc:	e7f0      	b.n	8013ab0 <_svfiprintf_r+0x194>
 8013ace:	ab03      	add	r3, sp, #12
 8013ad0:	9300      	str	r3, [sp, #0]
 8013ad2:	462a      	mov	r2, r5
 8013ad4:	4b0f      	ldr	r3, [pc, #60]	; (8013b14 <_svfiprintf_r+0x1f8>)
 8013ad6:	a904      	add	r1, sp, #16
 8013ad8:	4638      	mov	r0, r7
 8013ada:	f7fb feb3 	bl	800f844 <_printf_float>
 8013ade:	1c42      	adds	r2, r0, #1
 8013ae0:	4606      	mov	r6, r0
 8013ae2:	d1d6      	bne.n	8013a92 <_svfiprintf_r+0x176>
 8013ae4:	89ab      	ldrh	r3, [r5, #12]
 8013ae6:	065b      	lsls	r3, r3, #25
 8013ae8:	f53f af2c 	bmi.w	8013944 <_svfiprintf_r+0x28>
 8013aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aee:	b01d      	add	sp, #116	; 0x74
 8013af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af4:	ab03      	add	r3, sp, #12
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	462a      	mov	r2, r5
 8013afa:	4b06      	ldr	r3, [pc, #24]	; (8013b14 <_svfiprintf_r+0x1f8>)
 8013afc:	a904      	add	r1, sp, #16
 8013afe:	4638      	mov	r0, r7
 8013b00:	f7fc f944 	bl	800fd8c <_printf_i>
 8013b04:	e7eb      	b.n	8013ade <_svfiprintf_r+0x1c2>
 8013b06:	bf00      	nop
 8013b08:	0802a924 	.word	0x0802a924
 8013b0c:	0802a92e 	.word	0x0802a92e
 8013b10:	0800f845 	.word	0x0800f845
 8013b14:	08013867 	.word	0x08013867
 8013b18:	0802a92a 	.word	0x0802a92a
 8013b1c:	00000000 	.word	0x00000000

08013b20 <nan>:
 8013b20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b28 <nan+0x8>
 8013b24:	4770      	bx	lr
 8013b26:	bf00      	nop
 8013b28:	00000000 	.word	0x00000000
 8013b2c:	7ff80000 	.word	0x7ff80000

08013b30 <_sbrk_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	4d06      	ldr	r5, [pc, #24]	; (8013b4c <_sbrk_r+0x1c>)
 8013b34:	2300      	movs	r3, #0
 8013b36:	4604      	mov	r4, r0
 8013b38:	4608      	mov	r0, r1
 8013b3a:	602b      	str	r3, [r5, #0]
 8013b3c:	f7f0 f8f4 	bl	8003d28 <_sbrk>
 8013b40:	1c43      	adds	r3, r0, #1
 8013b42:	d102      	bne.n	8013b4a <_sbrk_r+0x1a>
 8013b44:	682b      	ldr	r3, [r5, #0]
 8013b46:	b103      	cbz	r3, 8013b4a <_sbrk_r+0x1a>
 8013b48:	6023      	str	r3, [r4, #0]
 8013b4a:	bd38      	pop	{r3, r4, r5, pc}
 8013b4c:	20013478 	.word	0x20013478

08013b50 <_raise_r>:
 8013b50:	291f      	cmp	r1, #31
 8013b52:	b538      	push	{r3, r4, r5, lr}
 8013b54:	4604      	mov	r4, r0
 8013b56:	460d      	mov	r5, r1
 8013b58:	d904      	bls.n	8013b64 <_raise_r+0x14>
 8013b5a:	2316      	movs	r3, #22
 8013b5c:	6003      	str	r3, [r0, #0]
 8013b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b66:	b112      	cbz	r2, 8013b6e <_raise_r+0x1e>
 8013b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b6c:	b94b      	cbnz	r3, 8013b82 <_raise_r+0x32>
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f000 f830 	bl	8013bd4 <_getpid_r>
 8013b74:	462a      	mov	r2, r5
 8013b76:	4601      	mov	r1, r0
 8013b78:	4620      	mov	r0, r4
 8013b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b7e:	f000 b817 	b.w	8013bb0 <_kill_r>
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d00a      	beq.n	8013b9c <_raise_r+0x4c>
 8013b86:	1c59      	adds	r1, r3, #1
 8013b88:	d103      	bne.n	8013b92 <_raise_r+0x42>
 8013b8a:	2316      	movs	r3, #22
 8013b8c:	6003      	str	r3, [r0, #0]
 8013b8e:	2001      	movs	r0, #1
 8013b90:	e7e7      	b.n	8013b62 <_raise_r+0x12>
 8013b92:	2400      	movs	r4, #0
 8013b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b98:	4628      	mov	r0, r5
 8013b9a:	4798      	blx	r3
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	e7e0      	b.n	8013b62 <_raise_r+0x12>

08013ba0 <raise>:
 8013ba0:	4b02      	ldr	r3, [pc, #8]	; (8013bac <raise+0xc>)
 8013ba2:	4601      	mov	r1, r0
 8013ba4:	6818      	ldr	r0, [r3, #0]
 8013ba6:	f7ff bfd3 	b.w	8013b50 <_raise_r>
 8013baa:	bf00      	nop
 8013bac:	200000dc 	.word	0x200000dc

08013bb0 <_kill_r>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	4d07      	ldr	r5, [pc, #28]	; (8013bd0 <_kill_r+0x20>)
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	4608      	mov	r0, r1
 8013bba:	4611      	mov	r1, r2
 8013bbc:	602b      	str	r3, [r5, #0]
 8013bbe:	f7f0 f847 	bl	8003c50 <_kill>
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	d102      	bne.n	8013bcc <_kill_r+0x1c>
 8013bc6:	682b      	ldr	r3, [r5, #0]
 8013bc8:	b103      	cbz	r3, 8013bcc <_kill_r+0x1c>
 8013bca:	6023      	str	r3, [r4, #0]
 8013bcc:	bd38      	pop	{r3, r4, r5, pc}
 8013bce:	bf00      	nop
 8013bd0:	20013478 	.word	0x20013478

08013bd4 <_getpid_r>:
 8013bd4:	f7f0 b834 	b.w	8003c40 <_getpid>

08013bd8 <__sread>:
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	460c      	mov	r4, r1
 8013bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be0:	f000 f8c8 	bl	8013d74 <_read_r>
 8013be4:	2800      	cmp	r0, #0
 8013be6:	bfab      	itete	ge
 8013be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013bea:	89a3      	ldrhlt	r3, [r4, #12]
 8013bec:	181b      	addge	r3, r3, r0
 8013bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013bf2:	bfac      	ite	ge
 8013bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013bf6:	81a3      	strhlt	r3, [r4, #12]
 8013bf8:	bd10      	pop	{r4, pc}

08013bfa <__swrite>:
 8013bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfe:	461f      	mov	r7, r3
 8013c00:	898b      	ldrh	r3, [r1, #12]
 8013c02:	05db      	lsls	r3, r3, #23
 8013c04:	4605      	mov	r5, r0
 8013c06:	460c      	mov	r4, r1
 8013c08:	4616      	mov	r6, r2
 8013c0a:	d505      	bpl.n	8013c18 <__swrite+0x1e>
 8013c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c10:	2302      	movs	r3, #2
 8013c12:	2200      	movs	r2, #0
 8013c14:	f000 f888 	bl	8013d28 <_lseek_r>
 8013c18:	89a3      	ldrh	r3, [r4, #12]
 8013c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c22:	81a3      	strh	r3, [r4, #12]
 8013c24:	4632      	mov	r2, r6
 8013c26:	463b      	mov	r3, r7
 8013c28:	4628      	mov	r0, r5
 8013c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2e:	f000 b837 	b.w	8013ca0 <_write_r>

08013c32 <__sseek>:
 8013c32:	b510      	push	{r4, lr}
 8013c34:	460c      	mov	r4, r1
 8013c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c3a:	f000 f875 	bl	8013d28 <_lseek_r>
 8013c3e:	1c43      	adds	r3, r0, #1
 8013c40:	89a3      	ldrh	r3, [r4, #12]
 8013c42:	bf15      	itete	ne
 8013c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c4e:	81a3      	strheq	r3, [r4, #12]
 8013c50:	bf18      	it	ne
 8013c52:	81a3      	strhne	r3, [r4, #12]
 8013c54:	bd10      	pop	{r4, pc}

08013c56 <__sclose>:
 8013c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c5a:	f000 b833 	b.w	8013cc4 <_close_r>

08013c5e <strncmp>:
 8013c5e:	b510      	push	{r4, lr}
 8013c60:	b17a      	cbz	r2, 8013c82 <strncmp+0x24>
 8013c62:	4603      	mov	r3, r0
 8013c64:	3901      	subs	r1, #1
 8013c66:	1884      	adds	r4, r0, r2
 8013c68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013c6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013c70:	4290      	cmp	r0, r2
 8013c72:	d101      	bne.n	8013c78 <strncmp+0x1a>
 8013c74:	42a3      	cmp	r3, r4
 8013c76:	d101      	bne.n	8013c7c <strncmp+0x1e>
 8013c78:	1a80      	subs	r0, r0, r2
 8013c7a:	bd10      	pop	{r4, pc}
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d1f3      	bne.n	8013c68 <strncmp+0xa>
 8013c80:	e7fa      	b.n	8013c78 <strncmp+0x1a>
 8013c82:	4610      	mov	r0, r2
 8013c84:	e7f9      	b.n	8013c7a <strncmp+0x1c>

08013c86 <__ascii_wctomb>:
 8013c86:	b149      	cbz	r1, 8013c9c <__ascii_wctomb+0x16>
 8013c88:	2aff      	cmp	r2, #255	; 0xff
 8013c8a:	bf85      	ittet	hi
 8013c8c:	238a      	movhi	r3, #138	; 0x8a
 8013c8e:	6003      	strhi	r3, [r0, #0]
 8013c90:	700a      	strbls	r2, [r1, #0]
 8013c92:	f04f 30ff 	movhi.w	r0, #4294967295
 8013c96:	bf98      	it	ls
 8013c98:	2001      	movls	r0, #1
 8013c9a:	4770      	bx	lr
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	4770      	bx	lr

08013ca0 <_write_r>:
 8013ca0:	b538      	push	{r3, r4, r5, lr}
 8013ca2:	4d07      	ldr	r5, [pc, #28]	; (8013cc0 <_write_r+0x20>)
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	4608      	mov	r0, r1
 8013ca8:	4611      	mov	r1, r2
 8013caa:	2200      	movs	r2, #0
 8013cac:	602a      	str	r2, [r5, #0]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	f7ef fad0 	bl	8003254 <_write>
 8013cb4:	1c43      	adds	r3, r0, #1
 8013cb6:	d102      	bne.n	8013cbe <_write_r+0x1e>
 8013cb8:	682b      	ldr	r3, [r5, #0]
 8013cba:	b103      	cbz	r3, 8013cbe <_write_r+0x1e>
 8013cbc:	6023      	str	r3, [r4, #0]
 8013cbe:	bd38      	pop	{r3, r4, r5, pc}
 8013cc0:	20013478 	.word	0x20013478

08013cc4 <_close_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4d06      	ldr	r5, [pc, #24]	; (8013ce0 <_close_r+0x1c>)
 8013cc8:	2300      	movs	r3, #0
 8013cca:	4604      	mov	r4, r0
 8013ccc:	4608      	mov	r0, r1
 8013cce:	602b      	str	r3, [r5, #0]
 8013cd0:	f7ef fff5 	bl	8003cbe <_close>
 8013cd4:	1c43      	adds	r3, r0, #1
 8013cd6:	d102      	bne.n	8013cde <_close_r+0x1a>
 8013cd8:	682b      	ldr	r3, [r5, #0]
 8013cda:	b103      	cbz	r3, 8013cde <_close_r+0x1a>
 8013cdc:	6023      	str	r3, [r4, #0]
 8013cde:	bd38      	pop	{r3, r4, r5, pc}
 8013ce0:	20013478 	.word	0x20013478

08013ce4 <_fstat_r>:
 8013ce4:	b538      	push	{r3, r4, r5, lr}
 8013ce6:	4d07      	ldr	r5, [pc, #28]	; (8013d04 <_fstat_r+0x20>)
 8013ce8:	2300      	movs	r3, #0
 8013cea:	4604      	mov	r4, r0
 8013cec:	4608      	mov	r0, r1
 8013cee:	4611      	mov	r1, r2
 8013cf0:	602b      	str	r3, [r5, #0]
 8013cf2:	f7ef fff0 	bl	8003cd6 <_fstat>
 8013cf6:	1c43      	adds	r3, r0, #1
 8013cf8:	d102      	bne.n	8013d00 <_fstat_r+0x1c>
 8013cfa:	682b      	ldr	r3, [r5, #0]
 8013cfc:	b103      	cbz	r3, 8013d00 <_fstat_r+0x1c>
 8013cfe:	6023      	str	r3, [r4, #0]
 8013d00:	bd38      	pop	{r3, r4, r5, pc}
 8013d02:	bf00      	nop
 8013d04:	20013478 	.word	0x20013478

08013d08 <_isatty_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	4d06      	ldr	r5, [pc, #24]	; (8013d24 <_isatty_r+0x1c>)
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4604      	mov	r4, r0
 8013d10:	4608      	mov	r0, r1
 8013d12:	602b      	str	r3, [r5, #0]
 8013d14:	f7ef ffef 	bl	8003cf6 <_isatty>
 8013d18:	1c43      	adds	r3, r0, #1
 8013d1a:	d102      	bne.n	8013d22 <_isatty_r+0x1a>
 8013d1c:	682b      	ldr	r3, [r5, #0]
 8013d1e:	b103      	cbz	r3, 8013d22 <_isatty_r+0x1a>
 8013d20:	6023      	str	r3, [r4, #0]
 8013d22:	bd38      	pop	{r3, r4, r5, pc}
 8013d24:	20013478 	.word	0x20013478

08013d28 <_lseek_r>:
 8013d28:	b538      	push	{r3, r4, r5, lr}
 8013d2a:	4d07      	ldr	r5, [pc, #28]	; (8013d48 <_lseek_r+0x20>)
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	4608      	mov	r0, r1
 8013d30:	4611      	mov	r1, r2
 8013d32:	2200      	movs	r2, #0
 8013d34:	602a      	str	r2, [r5, #0]
 8013d36:	461a      	mov	r2, r3
 8013d38:	f7ef ffe8 	bl	8003d0c <_lseek>
 8013d3c:	1c43      	adds	r3, r0, #1
 8013d3e:	d102      	bne.n	8013d46 <_lseek_r+0x1e>
 8013d40:	682b      	ldr	r3, [r5, #0]
 8013d42:	b103      	cbz	r3, 8013d46 <_lseek_r+0x1e>
 8013d44:	6023      	str	r3, [r4, #0]
 8013d46:	bd38      	pop	{r3, r4, r5, pc}
 8013d48:	20013478 	.word	0x20013478

08013d4c <__malloc_lock>:
 8013d4c:	4801      	ldr	r0, [pc, #4]	; (8013d54 <__malloc_lock+0x8>)
 8013d4e:	f7fe bf08 	b.w	8012b62 <__retarget_lock_acquire_recursive>
 8013d52:	bf00      	nop
 8013d54:	2001346a 	.word	0x2001346a

08013d58 <__malloc_unlock>:
 8013d58:	4801      	ldr	r0, [pc, #4]	; (8013d60 <__malloc_unlock+0x8>)
 8013d5a:	f7fe bf03 	b.w	8012b64 <__retarget_lock_release_recursive>
 8013d5e:	bf00      	nop
 8013d60:	2001346a 	.word	0x2001346a

08013d64 <_malloc_usable_size_r>:
 8013d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d68:	1f18      	subs	r0, r3, #4
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	bfbc      	itt	lt
 8013d6e:	580b      	ldrlt	r3, [r1, r0]
 8013d70:	18c0      	addlt	r0, r0, r3
 8013d72:	4770      	bx	lr

08013d74 <_read_r>:
 8013d74:	b538      	push	{r3, r4, r5, lr}
 8013d76:	4d07      	ldr	r5, [pc, #28]	; (8013d94 <_read_r+0x20>)
 8013d78:	4604      	mov	r4, r0
 8013d7a:	4608      	mov	r0, r1
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	2200      	movs	r2, #0
 8013d80:	602a      	str	r2, [r5, #0]
 8013d82:	461a      	mov	r2, r3
 8013d84:	f7ef ff7e 	bl	8003c84 <_read>
 8013d88:	1c43      	adds	r3, r0, #1
 8013d8a:	d102      	bne.n	8013d92 <_read_r+0x1e>
 8013d8c:	682b      	ldr	r3, [r5, #0]
 8013d8e:	b103      	cbz	r3, 8013d92 <_read_r+0x1e>
 8013d90:	6023      	str	r3, [r4, #0]
 8013d92:	bd38      	pop	{r3, r4, r5, pc}
 8013d94:	20013478 	.word	0x20013478

08013d98 <atanf>:
 8013d98:	b538      	push	{r3, r4, r5, lr}
 8013d9a:	ee10 5a10 	vmov	r5, s0
 8013d9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013da2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013da6:	eef0 7a40 	vmov.f32	s15, s0
 8013daa:	db0b      	blt.n	8013dc4 <atanf+0x2c>
 8013dac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013db0:	dc5b      	bgt.n	8013e6a <atanf+0xd2>
 8013db2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8013f00 <atanf+0x168>
 8013db6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8013f04 <atanf+0x16c>
 8013dba:	2d00      	cmp	r5, #0
 8013dbc:	bfc8      	it	gt
 8013dbe:	eeb0 0a67 	vmovgt.f32	s0, s15
 8013dc2:	bd38      	pop	{r3, r4, r5, pc}
 8013dc4:	4b50      	ldr	r3, [pc, #320]	; (8013f08 <atanf+0x170>)
 8013dc6:	429c      	cmp	r4, r3
 8013dc8:	dc5e      	bgt.n	8013e88 <atanf+0xf0>
 8013dca:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013dce:	db4f      	blt.n	8013e70 <atanf+0xd8>
 8013dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013dd8:	eddf 4a4c 	vldr	s9, [pc, #304]	; 8013f0c <atanf+0x174>
 8013ddc:	eddf 5a4c 	vldr	s11, [pc, #304]	; 8013f10 <atanf+0x178>
 8013de0:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8013f14 <atanf+0x17c>
 8013de4:	ed9f 4a4c 	vldr	s8, [pc, #304]	; 8013f18 <atanf+0x180>
 8013de8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013dec:	eeb0 6a66 	vmov.f32	s12, s13
 8013df0:	eee7 5a24 	vfma.f32	s11, s14, s9
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	eddf 4a49 	vldr	s9, [pc, #292]	; 8013f1c <atanf+0x184>
 8013dfa:	eddf 6a49 	vldr	s13, [pc, #292]	; 8013f20 <atanf+0x188>
 8013dfe:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013e02:	eee7 6a24 	vfma.f32	s13, s14, s9
 8013e06:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013f24 <atanf+0x18c>
 8013e0a:	eddf 4a47 	vldr	s9, [pc, #284]	; 8013f28 <atanf+0x190>
 8013e0e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013e12:	eea5 4a07 	vfma.f32	s8, s10, s14
 8013e16:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8013f2c <atanf+0x194>
 8013e1a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013f30 <atanf+0x198>
 8013e1e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013e22:	eee4 4a07 	vfma.f32	s9, s8, s14
 8013e26:	eddf 5a43 	vldr	s11, [pc, #268]	; 8013f34 <atanf+0x19c>
 8013e2a:	eee4 6a87 	vfma.f32	s13, s9, s14
 8013e2e:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013e32:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013e36:	ee25 7a87 	vmul.f32	s14, s11, s14
 8013e3a:	d03a      	beq.n	8013eb2 <atanf+0x11a>
 8013e3c:	4a3e      	ldr	r2, [pc, #248]	; (8013f38 <atanf+0x1a0>)
 8013e3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013e42:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013e46:	ed92 0a00 	vldr	s0, [r2]
 8013e4a:	4a3c      	ldr	r2, [pc, #240]	; (8013f3c <atanf+0x1a4>)
 8013e4c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8013e50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e54:	2d00      	cmp	r5, #0
 8013e56:	ed93 7a00 	vldr	s14, [r3]
 8013e5a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013e5e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013e62:	daae      	bge.n	8013dc2 <atanf+0x2a>
 8013e64:	eeb1 0a40 	vneg.f32	s0, s0
 8013e68:	bd38      	pop	{r3, r4, r5, pc}
 8013e6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e6e:	bd38      	pop	{r3, r4, r5, pc}
 8013e70:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013f40 <atanf+0x1a8>
 8013e74:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e7c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e84:	dda4      	ble.n	8013dd0 <atanf+0x38>
 8013e86:	bd38      	pop	{r3, r4, r5, pc}
 8013e88:	f000 f898 	bl	8013fbc <fabsf>
 8013e8c:	4b2d      	ldr	r3, [pc, #180]	; (8013f44 <atanf+0x1ac>)
 8013e8e:	429c      	cmp	r4, r3
 8013e90:	dc16      	bgt.n	8013ec0 <atanf+0x128>
 8013e92:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013e96:	429c      	cmp	r4, r3
 8013e98:	dc27      	bgt.n	8013eea <atanf+0x152>
 8013e9a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013e9e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013ea2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013eac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013eb0:	e790      	b.n	8013dd4 <atanf+0x3c>
 8013eb2:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013eb6:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8013eba:	eeb0 0a67 	vmov.f32	s0, s15
 8013ebe:	bd38      	pop	{r3, r4, r5, pc}
 8013ec0:	4b21      	ldr	r3, [pc, #132]	; (8013f48 <atanf+0x1b0>)
 8013ec2:	429c      	cmp	r4, r3
 8013ec4:	dc0b      	bgt.n	8013ede <atanf+0x146>
 8013ec6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ece:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013ed2:	2302      	movs	r3, #2
 8013ed4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013ed8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8013edc:	e77a      	b.n	8013dd4 <atanf+0x3c>
 8013ede:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013ee2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013ee6:	2303      	movs	r3, #3
 8013ee8:	e774      	b.n	8013dd4 <atanf+0x3c>
 8013eea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013eee:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013ef2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013efc:	e76a      	b.n	8013dd4 <atanf+0x3c>
 8013efe:	bf00      	nop
 8013f00:	3fc90fdb 	.word	0x3fc90fdb
 8013f04:	bfc90fdb 	.word	0xbfc90fdb
 8013f08:	3edfffff 	.word	0x3edfffff
 8013f0c:	3c8569d7 	.word	0x3c8569d7
 8013f10:	3d4bda59 	.word	0x3d4bda59
 8013f14:	3d886b35 	.word	0x3d886b35
 8013f18:	3dba2e6e 	.word	0x3dba2e6e
 8013f1c:	bd15a221 	.word	0xbd15a221
 8013f20:	bd6ef16b 	.word	0xbd6ef16b
 8013f24:	bd9d8795 	.word	0xbd9d8795
 8013f28:	3e124925 	.word	0x3e124925
 8013f2c:	bde38e38 	.word	0xbde38e38
 8013f30:	3eaaaaab 	.word	0x3eaaaaab
 8013f34:	be4ccccd 	.word	0xbe4ccccd
 8013f38:	0802adfc 	.word	0x0802adfc
 8013f3c:	0802adec 	.word	0x0802adec
 8013f40:	7149f2ca 	.word	0x7149f2ca
 8013f44:	3f97ffff 	.word	0x3f97ffff
 8013f48:	401bffff 	.word	0x401bffff

08013f4c <cosf>:
 8013f4c:	ee10 3a10 	vmov	r3, s0
 8013f50:	4a18      	ldr	r2, [pc, #96]	; (8013fb4 <cosf+0x68>)
 8013f52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f56:	4293      	cmp	r3, r2
 8013f58:	dd1b      	ble.n	8013f92 <cosf+0x46>
 8013f5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f5e:	db02      	blt.n	8013f66 <cosf+0x1a>
 8013f60:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013f64:	4770      	bx	lr
 8013f66:	b500      	push	{lr}
 8013f68:	b083      	sub	sp, #12
 8013f6a:	4668      	mov	r0, sp
 8013f6c:	f000 fa8e 	bl	801448c <__ieee754_rem_pio2f>
 8013f70:	f000 0003 	and.w	r0, r0, #3
 8013f74:	2801      	cmp	r0, #1
 8013f76:	eddd 0a01 	vldr	s1, [sp, #4]
 8013f7a:	ed9d 0a00 	vldr	s0, [sp]
 8013f7e:	d00c      	beq.n	8013f9a <cosf+0x4e>
 8013f80:	2802      	cmp	r0, #2
 8013f82:	d012      	beq.n	8013faa <cosf+0x5e>
 8013f84:	b170      	cbz	r0, 8013fa4 <cosf+0x58>
 8013f86:	2001      	movs	r0, #1
 8013f88:	f000 ff72 	bl	8014e70 <__kernel_sinf>
 8013f8c:	b003      	add	sp, #12
 8013f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f92:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013fb8 <cosf+0x6c>
 8013f96:	f000 bbaf 	b.w	80146f8 <__kernel_cosf>
 8013f9a:	f000 ff69 	bl	8014e70 <__kernel_sinf>
 8013f9e:	eeb1 0a40 	vneg.f32	s0, s0
 8013fa2:	e7f3      	b.n	8013f8c <cosf+0x40>
 8013fa4:	f000 fba8 	bl	80146f8 <__kernel_cosf>
 8013fa8:	e7f0      	b.n	8013f8c <cosf+0x40>
 8013faa:	f000 fba5 	bl	80146f8 <__kernel_cosf>
 8013fae:	eeb1 0a40 	vneg.f32	s0, s0
 8013fb2:	e7eb      	b.n	8013f8c <cosf+0x40>
 8013fb4:	3f490fd8 	.word	0x3f490fd8
 8013fb8:	00000000 	.word	0x00000000

08013fbc <fabsf>:
 8013fbc:	ee10 3a10 	vmov	r3, s0
 8013fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013fc4:	ee00 3a10 	vmov	s0, r3
 8013fc8:	4770      	bx	lr
 8013fca:	bf00      	nop

08013fcc <sinf>:
 8013fcc:	ee10 3a10 	vmov	r3, s0
 8013fd0:	4a19      	ldr	r2, [pc, #100]	; (8014038 <sinf+0x6c>)
 8013fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	dd1c      	ble.n	8014014 <sinf+0x48>
 8013fda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013fde:	db02      	blt.n	8013fe6 <sinf+0x1a>
 8013fe0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013fe4:	4770      	bx	lr
 8013fe6:	b500      	push	{lr}
 8013fe8:	b083      	sub	sp, #12
 8013fea:	4668      	mov	r0, sp
 8013fec:	f000 fa4e 	bl	801448c <__ieee754_rem_pio2f>
 8013ff0:	f000 0003 	and.w	r0, r0, #3
 8013ff4:	2801      	cmp	r0, #1
 8013ff6:	eddd 0a01 	vldr	s1, [sp, #4]
 8013ffa:	ed9d 0a00 	vldr	s0, [sp]
 8013ffe:	d00e      	beq.n	801401e <sinf+0x52>
 8014000:	2802      	cmp	r0, #2
 8014002:	d013      	beq.n	801402c <sinf+0x60>
 8014004:	b170      	cbz	r0, 8014024 <sinf+0x58>
 8014006:	f000 fb77 	bl	80146f8 <__kernel_cosf>
 801400a:	eeb1 0a40 	vneg.f32	s0, s0
 801400e:	b003      	add	sp, #12
 8014010:	f85d fb04 	ldr.w	pc, [sp], #4
 8014014:	eddf 0a09 	vldr	s1, [pc, #36]	; 801403c <sinf+0x70>
 8014018:	2000      	movs	r0, #0
 801401a:	f000 bf29 	b.w	8014e70 <__kernel_sinf>
 801401e:	f000 fb6b 	bl	80146f8 <__kernel_cosf>
 8014022:	e7f4      	b.n	801400e <sinf+0x42>
 8014024:	2001      	movs	r0, #1
 8014026:	f000 ff23 	bl	8014e70 <__kernel_sinf>
 801402a:	e7f0      	b.n	801400e <sinf+0x42>
 801402c:	2001      	movs	r0, #1
 801402e:	f000 ff1f 	bl	8014e70 <__kernel_sinf>
 8014032:	eeb1 0a40 	vneg.f32	s0, s0
 8014036:	e7ea      	b.n	801400e <sinf+0x42>
 8014038:	3f490fd8 	.word	0x3f490fd8
 801403c:	00000000 	.word	0x00000000

08014040 <tanf>:
 8014040:	ee10 3a10 	vmov	r3, s0
 8014044:	4a11      	ldr	r2, [pc, #68]	; (801408c <tanf+0x4c>)
 8014046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801404a:	4293      	cmp	r3, r2
 801404c:	dd18      	ble.n	8014080 <tanf+0x40>
 801404e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014052:	db02      	blt.n	801405a <tanf+0x1a>
 8014054:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014058:	4770      	bx	lr
 801405a:	b500      	push	{lr}
 801405c:	b083      	sub	sp, #12
 801405e:	4668      	mov	r0, sp
 8014060:	f000 fa14 	bl	801448c <__ieee754_rem_pio2f>
 8014064:	0040      	lsls	r0, r0, #1
 8014066:	f000 0002 	and.w	r0, r0, #2
 801406a:	eddd 0a01 	vldr	s1, [sp, #4]
 801406e:	ed9d 0a00 	vldr	s0, [sp]
 8014072:	f1c0 0001 	rsb	r0, r0, #1
 8014076:	f000 ff43 	bl	8014f00 <__kernel_tanf>
 801407a:	b003      	add	sp, #12
 801407c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014080:	eddf 0a03 	vldr	s1, [pc, #12]	; 8014090 <tanf+0x50>
 8014084:	2001      	movs	r0, #1
 8014086:	f000 bf3b 	b.w	8014f00 <__kernel_tanf>
 801408a:	bf00      	nop
 801408c:	3f490fda 	.word	0x3f490fda
 8014090:	00000000 	.word	0x00000000

08014094 <atan2f>:
 8014094:	f000 b852 	b.w	801413c <__ieee754_atan2f>

08014098 <logf>:
 8014098:	b508      	push	{r3, lr}
 801409a:	ed2d 8b02 	vpush	{d8}
 801409e:	eeb0 8a40 	vmov.f32	s16, s0
 80140a2:	f000 f8f3 	bl	801428c <__ieee754_logf>
 80140a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80140aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ae:	d60f      	bvs.n	80140d0 <logf+0x38>
 80140b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80140b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b8:	dc0a      	bgt.n	80140d0 <logf+0x38>
 80140ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80140be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140c2:	d108      	bne.n	80140d6 <logf+0x3e>
 80140c4:	f7fb f972 	bl	800f3ac <__errno>
 80140c8:	2322      	movs	r3, #34	; 0x22
 80140ca:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80140f0 <logf+0x58>
 80140ce:	6003      	str	r3, [r0, #0]
 80140d0:	ecbd 8b02 	vpop	{d8}
 80140d4:	bd08      	pop	{r3, pc}
 80140d6:	f7fb f969 	bl	800f3ac <__errno>
 80140da:	ecbd 8b02 	vpop	{d8}
 80140de:	4603      	mov	r3, r0
 80140e0:	2221      	movs	r2, #33	; 0x21
 80140e2:	601a      	str	r2, [r3, #0]
 80140e4:	4803      	ldr	r0, [pc, #12]	; (80140f4 <logf+0x5c>)
 80140e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80140ea:	f7fc b9fb 	b.w	80104e4 <nanf>
 80140ee:	bf00      	nop
 80140f0:	ff800000 	.word	0xff800000
 80140f4:	0802ae0c 	.word	0x0802ae0c

080140f8 <sqrtf>:
 80140f8:	b508      	push	{r3, lr}
 80140fa:	ed2d 8b02 	vpush	{d8}
 80140fe:	eeb0 8a40 	vmov.f32	s16, s0
 8014102:	f000 faf5 	bl	80146f0 <__ieee754_sqrtf>
 8014106:	eeb4 8a48 	vcmp.f32	s16, s16
 801410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410e:	d606      	bvs.n	801411e <sqrtf+0x26>
 8014110:	eddf 8a09 	vldr	s17, [pc, #36]	; 8014138 <sqrtf+0x40>
 8014114:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411c:	d402      	bmi.n	8014124 <sqrtf+0x2c>
 801411e:	ecbd 8b02 	vpop	{d8}
 8014122:	bd08      	pop	{r3, pc}
 8014124:	f7fb f942 	bl	800f3ac <__errno>
 8014128:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801412c:	ecbd 8b02 	vpop	{d8}
 8014130:	2321      	movs	r3, #33	; 0x21
 8014132:	6003      	str	r3, [r0, #0]
 8014134:	bd08      	pop	{r3, pc}
 8014136:	bf00      	nop
 8014138:	00000000 	.word	0x00000000

0801413c <__ieee754_atan2f>:
 801413c:	b510      	push	{r4, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	edcd 0a01 	vstr	s1, [sp, #4]
 8014144:	9b01      	ldr	r3, [sp, #4]
 8014146:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801414a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801414e:	eef0 7a40 	vmov.f32	s15, s0
 8014152:	dc30      	bgt.n	80141b6 <__ieee754_atan2f+0x7a>
 8014154:	ee10 0a10 	vmov	r0, s0
 8014158:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801415c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014160:	dc29      	bgt.n	80141b6 <__ieee754_atan2f+0x7a>
 8014162:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014166:	d042      	beq.n	80141ee <__ieee754_atan2f+0xb2>
 8014168:	179c      	asrs	r4, r3, #30
 801416a:	f004 0402 	and.w	r4, r4, #2
 801416e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014172:	b331      	cbz	r1, 80141c2 <__ieee754_atan2f+0x86>
 8014174:	b37a      	cbz	r2, 80141d6 <__ieee754_atan2f+0x9a>
 8014176:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801417a:	d040      	beq.n	80141fe <__ieee754_atan2f+0xc2>
 801417c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014180:	d029      	beq.n	80141d6 <__ieee754_atan2f+0x9a>
 8014182:	1a8a      	subs	r2, r1, r2
 8014184:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8014188:	ea4f 51e2 	mov.w	r1, r2, asr #23
 801418c:	da34      	bge.n	80141f8 <__ieee754_atan2f+0xbc>
 801418e:	2b00      	cmp	r3, #0
 8014190:	da42      	bge.n	8014218 <__ieee754_atan2f+0xdc>
 8014192:	313c      	adds	r1, #60	; 0x3c
 8014194:	da40      	bge.n	8014218 <__ieee754_atan2f+0xdc>
 8014196:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8014268 <__ieee754_atan2f+0x12c>
 801419a:	2c01      	cmp	r4, #1
 801419c:	d04e      	beq.n	801423c <__ieee754_atan2f+0x100>
 801419e:	2c02      	cmp	r4, #2
 80141a0:	d043      	beq.n	801422a <__ieee754_atan2f+0xee>
 80141a2:	b164      	cbz	r4, 80141be <__ieee754_atan2f+0x82>
 80141a4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801426c <__ieee754_atan2f+0x130>
 80141a8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014270 <__ieee754_atan2f+0x134>
 80141ac:	ee30 0a07 	vadd.f32	s0, s0, s14
 80141b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80141b4:	e003      	b.n	80141be <__ieee754_atan2f+0x82>
 80141b6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80141ba:	ee37 0a27 	vadd.f32	s0, s14, s15
 80141be:	b002      	add	sp, #8
 80141c0:	bd10      	pop	{r4, pc}
 80141c2:	2c02      	cmp	r4, #2
 80141c4:	d010      	beq.n	80141e8 <__ieee754_atan2f+0xac>
 80141c6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8014274 <__ieee754_atan2f+0x138>
 80141ca:	2c03      	cmp	r4, #3
 80141cc:	bf18      	it	ne
 80141ce:	eeb0 0a67 	vmovne.f32	s0, s15
 80141d2:	b002      	add	sp, #8
 80141d4:	bd10      	pop	{r4, pc}
 80141d6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8014278 <__ieee754_atan2f+0x13c>
 80141da:	eddf 7a28 	vldr	s15, [pc, #160]	; 801427c <__ieee754_atan2f+0x140>
 80141de:	2800      	cmp	r0, #0
 80141e0:	bfb8      	it	lt
 80141e2:	eeb0 0a67 	vmovlt.f32	s0, s15
 80141e6:	e7ea      	b.n	80141be <__ieee754_atan2f+0x82>
 80141e8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8014270 <__ieee754_atan2f+0x134>
 80141ec:	e7e7      	b.n	80141be <__ieee754_atan2f+0x82>
 80141ee:	b002      	add	sp, #8
 80141f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141f4:	f7ff bdd0 	b.w	8013d98 <atanf>
 80141f8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8014278 <__ieee754_atan2f+0x13c>
 80141fc:	e7cd      	b.n	801419a <__ieee754_atan2f+0x5e>
 80141fe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014202:	f104 34ff 	add.w	r4, r4, #4294967295
 8014206:	d020      	beq.n	801424a <__ieee754_atan2f+0x10e>
 8014208:	2c02      	cmp	r4, #2
 801420a:	d826      	bhi.n	801425a <__ieee754_atan2f+0x11e>
 801420c:	4b1c      	ldr	r3, [pc, #112]	; (8014280 <__ieee754_atan2f+0x144>)
 801420e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014212:	ed94 0a00 	vldr	s0, [r4]
 8014216:	e7d2      	b.n	80141be <__ieee754_atan2f+0x82>
 8014218:	ed9d 7a01 	vldr	s14, [sp, #4]
 801421c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8014220:	f7ff fecc 	bl	8013fbc <fabsf>
 8014224:	f7ff fdb8 	bl	8013d98 <atanf>
 8014228:	e7b7      	b.n	801419a <__ieee754_atan2f+0x5e>
 801422a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801426c <__ieee754_atan2f+0x130>
 801422e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014270 <__ieee754_atan2f+0x134>
 8014232:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014236:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801423a:	e7c0      	b.n	80141be <__ieee754_atan2f+0x82>
 801423c:	ee10 3a10 	vmov	r3, s0
 8014240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014244:	ee00 3a10 	vmov	s0, r3
 8014248:	e7b9      	b.n	80141be <__ieee754_atan2f+0x82>
 801424a:	2c02      	cmp	r4, #2
 801424c:	d808      	bhi.n	8014260 <__ieee754_atan2f+0x124>
 801424e:	4b0d      	ldr	r3, [pc, #52]	; (8014284 <__ieee754_atan2f+0x148>)
 8014250:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014254:	ed94 0a00 	vldr	s0, [r4]
 8014258:	e7b1      	b.n	80141be <__ieee754_atan2f+0x82>
 801425a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014268 <__ieee754_atan2f+0x12c>
 801425e:	e7ae      	b.n	80141be <__ieee754_atan2f+0x82>
 8014260:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014288 <__ieee754_atan2f+0x14c>
 8014264:	e7ab      	b.n	80141be <__ieee754_atan2f+0x82>
 8014266:	bf00      	nop
 8014268:	00000000 	.word	0x00000000
 801426c:	33bbbd2e 	.word	0x33bbbd2e
 8014270:	40490fdb 	.word	0x40490fdb
 8014274:	c0490fdb 	.word	0xc0490fdb
 8014278:	3fc90fdb 	.word	0x3fc90fdb
 801427c:	bfc90fdb 	.word	0xbfc90fdb
 8014280:	0802ae1c 	.word	0x0802ae1c
 8014284:	0802ae10 	.word	0x0802ae10
 8014288:	3f490fdb 	.word	0x3f490fdb

0801428c <__ieee754_logf>:
 801428c:	ee10 3a10 	vmov	r3, s0
 8014290:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014294:	d02e      	beq.n	80142f4 <__ieee754_logf+0x68>
 8014296:	2b00      	cmp	r3, #0
 8014298:	db33      	blt.n	8014302 <__ieee754_logf+0x76>
 801429a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801429e:	da40      	bge.n	8014322 <__ieee754_logf+0x96>
 80142a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80142a4:	db34      	blt.n	8014310 <__ieee754_logf+0x84>
 80142a6:	f04f 0c00 	mov.w	ip, #0
 80142aa:	4868      	ldr	r0, [pc, #416]	; (801444c <__ieee754_logf+0x1c0>)
 80142ac:	f3c3 0116 	ubfx	r1, r3, #0, #23
 80142b0:	4408      	add	r0, r1
 80142b2:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 80142b6:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 80142ba:	430a      	orrs	r2, r1
 80142bc:	15db      	asrs	r3, r3, #23
 80142be:	ee00 2a10 	vmov	s0, r2
 80142c2:	3b7f      	subs	r3, #127	; 0x7f
 80142c4:	4a62      	ldr	r2, [pc, #392]	; (8014450 <__ieee754_logf+0x1c4>)
 80142c6:	4463      	add	r3, ip
 80142c8:	f101 0c0f 	add.w	ip, r1, #15
 80142cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142d0:	ea0c 0202 	and.w	r2, ip, r2
 80142d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80142d8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80142dc:	bb22      	cbnz	r2, 8014328 <__ieee754_logf+0x9c>
 80142de:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80142e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e6:	d160      	bne.n	80143aa <__ieee754_logf+0x11e>
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f040 8092 	bne.w	8014412 <__ieee754_logf+0x186>
 80142ee:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8014454 <__ieee754_logf+0x1c8>
 80142f2:	4770      	bx	lr
 80142f4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8014458 <__ieee754_logf+0x1cc>
 80142f8:	eddf 7a56 	vldr	s15, [pc, #344]	; 8014454 <__ieee754_logf+0x1c8>
 80142fc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014300:	4770      	bx	lr
 8014302:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014306:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8014454 <__ieee754_logf+0x1c8>
 801430a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801430e:	4770      	bx	lr
 8014310:	eddf 7a52 	vldr	s15, [pc, #328]	; 801445c <__ieee754_logf+0x1d0>
 8014314:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014318:	f06f 0c18 	mvn.w	ip, #24
 801431c:	ee17 3a90 	vmov	r3, s15
 8014320:	e7c3      	b.n	80142aa <__ieee754_logf+0x1e>
 8014322:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014326:	4770      	bx	lr
 8014328:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801432c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014330:	ee07 3a10 	vmov	s14, r3
 8014334:	ee80 4a27 	vdiv.f32	s8, s0, s15
 8014338:	4849      	ldr	r0, [pc, #292]	; (8014460 <__ieee754_logf+0x1d4>)
 801433a:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
 801433e:	4408      	add	r0, r1
 8014340:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8014344:	4302      	orrs	r2, r0
 8014346:	2a00      	cmp	r2, #0
 8014348:	ed9f 3a46 	vldr	s6, [pc, #280]	; 8014464 <__ieee754_logf+0x1d8>
 801434c:	eddf 4a46 	vldr	s9, [pc, #280]	; 8014468 <__ieee754_logf+0x1dc>
 8014350:	eddf 5a46 	vldr	s11, [pc, #280]	; 801446c <__ieee754_logf+0x1e0>
 8014354:	eddf 3a46 	vldr	s7, [pc, #280]	; 8014470 <__ieee754_logf+0x1e4>
 8014358:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8014474 <__ieee754_logf+0x1e8>
 801435c:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014478 <__ieee754_logf+0x1ec>
 8014360:	eddf 6a46 	vldr	s13, [pc, #280]	; 801447c <__ieee754_logf+0x1f0>
 8014364:	ee24 6a04 	vmul.f32	s12, s8, s8
 8014368:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 801436c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8014370:	eee7 4a03 	vfma.f32	s9, s14, s6
 8014374:	eea7 5a23 	vfma.f32	s10, s14, s7
 8014378:	eee4 5a87 	vfma.f32	s11, s9, s14
 801437c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8014380:	eee5 7a87 	vfma.f32	s15, s11, s14
 8014384:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014388:	eee6 7a87 	vfma.f32	s15, s13, s14
 801438c:	dd2a      	ble.n	80143e4 <__ieee754_logf+0x158>
 801438e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014392:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014396:	ee27 7a00 	vmul.f32	s14, s14, s0
 801439a:	bb4b      	cbnz	r3, 80143f0 <__ieee754_logf+0x164>
 801439c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143a0:	eea7 7ac4 	vfms.f32	s14, s15, s8
 80143a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80143a8:	4770      	bx	lr
 80143aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80143ae:	eddf 6a34 	vldr	s13, [pc, #208]	; 8014480 <__ieee754_logf+0x1f4>
 80143b2:	eef0 7a47 	vmov.f32	s15, s14
 80143b6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80143ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80143be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d0ee      	beq.n	80143a4 <__ieee754_logf+0x118>
 80143c6:	ee07 3a90 	vmov	s15, r3
 80143ca:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8014484 <__ieee754_logf+0x1f8>
 80143ce:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014488 <__ieee754_logf+0x1fc>
 80143d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d6:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80143da:	ee37 0a40 	vsub.f32	s0, s14, s0
 80143de:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 80143e2:	4770      	bx	lr
 80143e4:	bb13      	cbnz	r3, 801442c <__ieee754_logf+0x1a0>
 80143e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80143ea:	eea7 0ac4 	vfms.f32	s0, s15, s8
 80143ee:	4770      	bx	lr
 80143f0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014484 <__ieee754_logf+0x1f8>
 80143f4:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8014488 <__ieee754_logf+0x1fc>
 80143f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143fc:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8014400:	eee7 6a84 	vfma.f32	s13, s15, s8
 8014404:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014408:	ee37 0a40 	vsub.f32	s0, s14, s0
 801440c:	ee92 0a86 	vfnms.f32	s0, s5, s12
 8014410:	4770      	bx	lr
 8014412:	ee07 3a90 	vmov	s15, r3
 8014416:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8014484 <__ieee754_logf+0x1f8>
 801441a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8014488 <__ieee754_logf+0x1fc>
 801441e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014422:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014426:	eea7 0a87 	vfma.f32	s0, s15, s14
 801442a:	4770      	bx	lr
 801442c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014484 <__ieee754_logf+0x1f8>
 8014430:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014488 <__ieee754_logf+0x1fc>
 8014434:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014438:	ee27 7a62 	vnmul.f32	s14, s14, s5
 801443c:	eea7 7a84 	vfma.f32	s14, s15, s8
 8014440:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014444:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8014448:	4770      	bx	lr
 801444a:	bf00      	nop
 801444c:	004afb20 	.word	0x004afb20
 8014450:	007ffff0 	.word	0x007ffff0
 8014454:	00000000 	.word	0x00000000
 8014458:	cc000000 	.word	0xcc000000
 801445c:	4c000000 	.word	0x4c000000
 8014460:	ffcf5c30 	.word	0xffcf5c30
 8014464:	3e178897 	.word	0x3e178897
 8014468:	3e3a3325 	.word	0x3e3a3325
 801446c:	3e924925 	.word	0x3e924925
 8014470:	3e1cd04f 	.word	0x3e1cd04f
 8014474:	3e638e29 	.word	0x3e638e29
 8014478:	3f2aaaab 	.word	0x3f2aaaab
 801447c:	3ecccccd 	.word	0x3ecccccd
 8014480:	3eaaaaab 	.word	0x3eaaaaab
 8014484:	3717f7d1 	.word	0x3717f7d1
 8014488:	3f317180 	.word	0x3f317180

0801448c <__ieee754_rem_pio2f>:
 801448c:	b570      	push	{r4, r5, r6, lr}
 801448e:	ee10 3a10 	vmov	r3, s0
 8014492:	4a89      	ldr	r2, [pc, #548]	; (80146b8 <__ieee754_rem_pio2f+0x22c>)
 8014494:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014498:	4294      	cmp	r4, r2
 801449a:	b086      	sub	sp, #24
 801449c:	4605      	mov	r5, r0
 801449e:	dd70      	ble.n	8014582 <__ieee754_rem_pio2f+0xf6>
 80144a0:	4a86      	ldr	r2, [pc, #536]	; (80146bc <__ieee754_rem_pio2f+0x230>)
 80144a2:	4294      	cmp	r4, r2
 80144a4:	ee10 6a10 	vmov	r6, s0
 80144a8:	dc22      	bgt.n	80144f0 <__ieee754_rem_pio2f+0x64>
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	eddf 7a84 	vldr	s15, [pc, #528]	; 80146c0 <__ieee754_rem_pio2f+0x234>
 80144b0:	4a84      	ldr	r2, [pc, #528]	; (80146c4 <__ieee754_rem_pio2f+0x238>)
 80144b2:	f024 040f 	bic.w	r4, r4, #15
 80144b6:	eeb0 7a40 	vmov.f32	s14, s0
 80144ba:	f340 80e4 	ble.w	8014686 <__ieee754_rem_pio2f+0x1fa>
 80144be:	4294      	cmp	r4, r2
 80144c0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80144c4:	bf09      	itett	eq
 80144c6:	eddf 6a80 	vldreq	s13, [pc, #512]	; 80146c8 <__ieee754_rem_pio2f+0x23c>
 80144ca:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 80146cc <__ieee754_rem_pio2f+0x240>
 80144ce:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 80146d0 <__ieee754_rem_pio2f+0x244>
 80144d2:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
 80144d6:	2001      	movs	r0, #1
 80144d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80144dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80144e0:	edc5 6a00 	vstr	s13, [r5]
 80144e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144e8:	edc5 7a01 	vstr	s15, [r5, #4]
 80144ec:	b006      	add	sp, #24
 80144ee:	bd70      	pop	{r4, r5, r6, pc}
 80144f0:	4a78      	ldr	r2, [pc, #480]	; (80146d4 <__ieee754_rem_pio2f+0x248>)
 80144f2:	4294      	cmp	r4, r2
 80144f4:	dd54      	ble.n	80145a0 <__ieee754_rem_pio2f+0x114>
 80144f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80144fa:	da49      	bge.n	8014590 <__ieee754_rem_pio2f+0x104>
 80144fc:	15e2      	asrs	r2, r4, #23
 80144fe:	3a86      	subs	r2, #134	; 0x86
 8014500:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8014504:	ee07 3a90 	vmov	s15, r3
 8014508:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801450c:	eddf 6a72 	vldr	s13, [pc, #456]	; 80146d8 <__ieee754_rem_pio2f+0x24c>
 8014510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014518:	ed8d 7a03 	vstr	s14, [sp, #12]
 801451c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014520:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014524:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801452c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014530:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014534:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453c:	edcd 7a05 	vstr	s15, [sp, #20]
 8014540:	f040 8090 	bne.w	8014664 <__ieee754_rem_pio2f+0x1d8>
 8014544:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454c:	bf14      	ite	ne
 801454e:	2302      	movne	r3, #2
 8014550:	2301      	moveq	r3, #1
 8014552:	4962      	ldr	r1, [pc, #392]	; (80146dc <__ieee754_rem_pio2f+0x250>)
 8014554:	9101      	str	r1, [sp, #4]
 8014556:	2102      	movs	r1, #2
 8014558:	9100      	str	r1, [sp, #0]
 801455a:	a803      	add	r0, sp, #12
 801455c:	4629      	mov	r1, r5
 801455e:	f000 f94d 	bl	80147fc <__kernel_rem_pio2f>
 8014562:	2e00      	cmp	r6, #0
 8014564:	dac2      	bge.n	80144ec <__ieee754_rem_pio2f+0x60>
 8014566:	ed95 7a00 	vldr	s14, [r5]
 801456a:	edd5 7a01 	vldr	s15, [r5, #4]
 801456e:	eeb1 7a47 	vneg.f32	s14, s14
 8014572:	eef1 7a67 	vneg.f32	s15, s15
 8014576:	ed85 7a00 	vstr	s14, [r5]
 801457a:	edc5 7a01 	vstr	s15, [r5, #4]
 801457e:	4240      	negs	r0, r0
 8014580:	e7b4      	b.n	80144ec <__ieee754_rem_pio2f+0x60>
 8014582:	2200      	movs	r2, #0
 8014584:	ed85 0a00 	vstr	s0, [r5]
 8014588:	6042      	str	r2, [r0, #4]
 801458a:	2000      	movs	r0, #0
 801458c:	b006      	add	sp, #24
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014594:	2000      	movs	r0, #0
 8014596:	edc5 7a01 	vstr	s15, [r5, #4]
 801459a:	edc5 7a00 	vstr	s15, [r5]
 801459e:	e7a5      	b.n	80144ec <__ieee754_rem_pio2f+0x60>
 80145a0:	f7ff fd0c 	bl	8013fbc <fabsf>
 80145a4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80146e0 <__ieee754_rem_pio2f+0x254>
 80145a8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80146c0 <__ieee754_rem_pio2f+0x234>
 80145ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80145b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80145b4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80146cc <__ieee754_rem_pio2f+0x240>
 80145b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145bc:	ee17 0a90 	vmov	r0, s15
 80145c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80145c4:	281f      	cmp	r0, #31
 80145c6:	eea6 0ac6 	vfms.f32	s0, s13, s12
 80145ca:	ee66 7a87 	vmul.f32	s15, s13, s14
 80145ce:	eeb1 6a66 	vneg.f32	s12, s13
 80145d2:	dc1e      	bgt.n	8014612 <__ieee754_rem_pio2f+0x186>
 80145d4:	4a43      	ldr	r2, [pc, #268]	; (80146e4 <__ieee754_rem_pio2f+0x258>)
 80145d6:	1e41      	subs	r1, r0, #1
 80145d8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 80145dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d016      	beq.n	8014612 <__ieee754_rem_pio2f+0x186>
 80145e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80145e8:	ed85 7a00 	vstr	s14, [r5]
 80145ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80145f0:	2e00      	cmp	r6, #0
 80145f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80145f6:	ed85 0a01 	vstr	s0, [r5, #4]
 80145fa:	f6bf af77 	bge.w	80144ec <__ieee754_rem_pio2f+0x60>
 80145fe:	eeb1 7a47 	vneg.f32	s14, s14
 8014602:	eeb1 0a40 	vneg.f32	s0, s0
 8014606:	ed85 7a00 	vstr	s14, [r5]
 801460a:	ed85 0a01 	vstr	s0, [r5, #4]
 801460e:	4240      	negs	r0, r0
 8014610:	e76c      	b.n	80144ec <__ieee754_rem_pio2f+0x60>
 8014612:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014616:	15e2      	asrs	r2, r4, #23
 8014618:	ee17 3a10 	vmov	r3, s14
 801461c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014620:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
 8014624:	2c08      	cmp	r4, #8
 8014626:	dddf      	ble.n	80145e8 <__ieee754_rem_pio2f+0x15c>
 8014628:	eddf 7a27 	vldr	s15, [pc, #156]	; 80146c8 <__ieee754_rem_pio2f+0x23c>
 801462c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80146d0 <__ieee754_rem_pio2f+0x244>
 8014630:	eef0 5a40 	vmov.f32	s11, s0
 8014634:	eee6 5a27 	vfma.f32	s11, s12, s15
 8014638:	ee30 0a65 	vsub.f32	s0, s0, s11
 801463c:	eea6 0a27 	vfma.f32	s0, s12, s15
 8014640:	eef0 7a40 	vmov.f32	s15, s0
 8014644:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8014648:	ee35 7ae7 	vsub.f32	s14, s11, s15
 801464c:	ee17 3a10 	vmov	r3, s14
 8014650:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014654:	1ad2      	subs	r2, r2, r3
 8014656:	2a19      	cmp	r2, #25
 8014658:	dc06      	bgt.n	8014668 <__ieee754_rem_pio2f+0x1dc>
 801465a:	eeb0 0a65 	vmov.f32	s0, s11
 801465e:	ed85 7a00 	vstr	s14, [r5]
 8014662:	e7c3      	b.n	80145ec <__ieee754_rem_pio2f+0x160>
 8014664:	2303      	movs	r3, #3
 8014666:	e774      	b.n	8014552 <__ieee754_rem_pio2f+0xc6>
 8014668:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80146e8 <__ieee754_rem_pio2f+0x25c>
 801466c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80146ec <__ieee754_rem_pio2f+0x260>
 8014670:	eeb0 0a65 	vmov.f32	s0, s11
 8014674:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014678:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801467c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014680:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8014684:	e7ae      	b.n	80145e4 <__ieee754_rem_pio2f+0x158>
 8014686:	4294      	cmp	r4, r2
 8014688:	ee70 7a27 	vadd.f32	s15, s0, s15
 801468c:	bf09      	itett	eq
 801468e:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 80146c8 <__ieee754_rem_pio2f+0x23c>
 8014692:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 80146cc <__ieee754_rem_pio2f+0x240>
 8014696:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 80146d0 <__ieee754_rem_pio2f+0x244>
 801469a:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 801469e:	f04f 30ff 	mov.w	r0, #4294967295
 80146a2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80146a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80146aa:	edc5 6a00 	vstr	s13, [r5]
 80146ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146b2:	edc5 7a01 	vstr	s15, [r5, #4]
 80146b6:	e719      	b.n	80144ec <__ieee754_rem_pio2f+0x60>
 80146b8:	3f490fd8 	.word	0x3f490fd8
 80146bc:	4016cbe3 	.word	0x4016cbe3
 80146c0:	3fc90f80 	.word	0x3fc90f80
 80146c4:	3fc90fd0 	.word	0x3fc90fd0
 80146c8:	37354400 	.word	0x37354400
 80146cc:	37354443 	.word	0x37354443
 80146d0:	2e85a308 	.word	0x2e85a308
 80146d4:	43490f80 	.word	0x43490f80
 80146d8:	43800000 	.word	0x43800000
 80146dc:	0802aea8 	.word	0x0802aea8
 80146e0:	3f22f984 	.word	0x3f22f984
 80146e4:	0802ae28 	.word	0x0802ae28
 80146e8:	2e85a300 	.word	0x2e85a300
 80146ec:	248d3132 	.word	0x248d3132

080146f0 <__ieee754_sqrtf>:
 80146f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop

080146f8 <__kernel_cosf>:
 80146f8:	ee10 3a10 	vmov	r3, s0
 80146fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014700:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014704:	da2c      	bge.n	8014760 <__kernel_cosf+0x68>
 8014706:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801470a:	ee17 3a90 	vmov	r3, s15
 801470e:	2b00      	cmp	r3, #0
 8014710:	d060      	beq.n	80147d4 <__kernel_cosf+0xdc>
 8014712:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014716:	eddf 7a31 	vldr	s15, [pc, #196]	; 80147dc <__kernel_cosf+0xe4>
 801471a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80147e0 <__kernel_cosf+0xe8>
 801471e:	eddf 5a31 	vldr	s11, [pc, #196]	; 80147e4 <__kernel_cosf+0xec>
 8014722:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80147e8 <__kernel_cosf+0xf0>
 8014726:	eddf 6a31 	vldr	s13, [pc, #196]	; 80147ec <__kernel_cosf+0xf4>
 801472a:	eea7 5a27 	vfma.f32	s10, s14, s15
 801472e:	eddf 7a30 	vldr	s15, [pc, #192]	; 80147f0 <__kernel_cosf+0xf8>
 8014732:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014736:	eea7 6a25 	vfma.f32	s12, s14, s11
 801473a:	eee7 7a06 	vfma.f32	s15, s14, s12
 801473e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014742:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014746:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801474a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801474e:	eee7 0a26 	vfma.f32	s1, s14, s13
 8014752:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014756:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801475a:	ee30 0a60 	vsub.f32	s0, s0, s1
 801475e:	4770      	bx	lr
 8014760:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014764:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80147dc <__kernel_cosf+0xe4>
 8014768:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80147e0 <__kernel_cosf+0xe8>
 801476c:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80147e4 <__kernel_cosf+0xec>
 8014770:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80147e8 <__kernel_cosf+0xf0>
 8014774:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80147ec <__kernel_cosf+0xf4>
 8014778:	4a1e      	ldr	r2, [pc, #120]	; (80147f4 <__kernel_cosf+0xfc>)
 801477a:	eea7 5a27 	vfma.f32	s10, s14, s15
 801477e:	4293      	cmp	r3, r2
 8014780:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80147f0 <__kernel_cosf+0xf8>
 8014784:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014788:	eea5 6a87 	vfma.f32	s12, s11, s14
 801478c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014790:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014794:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014798:	ddd5      	ble.n	8014746 <__kernel_cosf+0x4e>
 801479a:	4a17      	ldr	r2, [pc, #92]	; (80147f8 <__kernel_cosf+0x100>)
 801479c:	4293      	cmp	r3, r2
 801479e:	dc14      	bgt.n	80147ca <__kernel_cosf+0xd2>
 80147a0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80147a4:	ee07 3a90 	vmov	s15, r3
 80147a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 80147b0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80147b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80147b8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80147bc:	eee7 0a26 	vfma.f32	s1, s14, s13
 80147c0:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80147c4:	ee36 0a60 	vsub.f32	s0, s12, s1
 80147c8:	4770      	bx	lr
 80147ca:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80147ce:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 80147d2:	e7ed      	b.n	80147b0 <__kernel_cosf+0xb8>
 80147d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80147d8:	4770      	bx	lr
 80147da:	bf00      	nop
 80147dc:	ad47d74e 	.word	0xad47d74e
 80147e0:	310f74f6 	.word	0x310f74f6
 80147e4:	b493f27c 	.word	0xb493f27c
 80147e8:	37d00d01 	.word	0x37d00d01
 80147ec:	3d2aaaab 	.word	0x3d2aaaab
 80147f0:	bab60b61 	.word	0xbab60b61
 80147f4:	3e999999 	.word	0x3e999999
 80147f8:	3f480000 	.word	0x3f480000

080147fc <__kernel_rem_pio2f>:
 80147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	ed2d 8b04 	vpush	{d8-d9}
 8014804:	b0db      	sub	sp, #364	; 0x16c
 8014806:	461c      	mov	r4, r3
 8014808:	9303      	str	r3, [sp, #12]
 801480a:	9106      	str	r1, [sp, #24]
 801480c:	4ba2      	ldr	r3, [pc, #648]	; (8014a98 <__kernel_rem_pio2f+0x29c>)
 801480e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8014810:	9208      	str	r2, [sp, #32]
 8014812:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8014816:	1d11      	adds	r1, r2, #4
 8014818:	4682      	mov	sl, r0
 801481a:	f104 38ff 	add.w	r8, r4, #4294967295
 801481e:	f2c0 82a3 	blt.w	8014d68 <__kernel_rem_pio2f+0x56c>
 8014822:	1ed3      	subs	r3, r2, #3
 8014824:	bf48      	it	mi
 8014826:	1d13      	addmi	r3, r2, #4
 8014828:	10db      	asrs	r3, r3, #3
 801482a:	9302      	str	r3, [sp, #8]
 801482c:	3301      	adds	r3, #1
 801482e:	00db      	lsls	r3, r3, #3
 8014830:	9307      	str	r3, [sp, #28]
 8014832:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014836:	1a9b      	subs	r3, r3, r2
 8014838:	9305      	str	r3, [sp, #20]
 801483a:	9b02      	ldr	r3, [sp, #8]
 801483c:	eb15 0108 	adds.w	r1, r5, r8
 8014840:	eba3 0308 	sub.w	r3, r3, r8
 8014844:	d416      	bmi.n	8014874 <__kernel_rem_pio2f+0x78>
 8014846:	3101      	adds	r1, #1
 8014848:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8014a9c <__kernel_rem_pio2f+0x2a0>
 801484c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 801484e:	4419      	add	r1, r3
 8014850:	aa1e      	add	r2, sp, #120	; 0x78
 8014852:	2b00      	cmp	r3, #0
 8014854:	bfa4      	itt	ge
 8014856:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 801485a:	ee07 4a90 	vmovge	s15, r4
 801485e:	f103 0301 	add.w	r3, r3, #1
 8014862:	bfac      	ite	ge
 8014864:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8014868:	eef0 7a47 	vmovlt.f32	s15, s14
 801486c:	428b      	cmp	r3, r1
 801486e:	ece2 7a01 	vstmia	r2!, {s15}
 8014872:	d1ee      	bne.n	8014852 <__kernel_rem_pio2f+0x56>
 8014874:	2d00      	cmp	r5, #0
 8014876:	f2c0 82e7 	blt.w	8014e48 <__kernel_rem_pio2f+0x64c>
 801487a:	9b03      	ldr	r3, [sp, #12]
 801487c:	aa1e      	add	r2, sp, #120	; 0x78
 801487e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8014882:	ae46      	add	r6, sp, #280	; 0x118
 8014884:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014888:	4640      	mov	r0, r8
 801488a:	18ef      	adds	r7, r5, r3
 801488c:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 8014890:	f1b8 0f00 	cmp.w	r8, #0
 8014894:	eddf 7a81 	vldr	s15, [pc, #516]	; 8014a9c <__kernel_rem_pio2f+0x2a0>
 8014898:	db09      	blt.n	80148ae <__kernel_rem_pio2f+0xb2>
 801489a:	4622      	mov	r2, r4
 801489c:	4653      	mov	r3, sl
 801489e:	ecf3 6a01 	vldmia	r3!, {s13}
 80148a2:	ed32 7a01 	vldmdb	r2!, {s14}
 80148a6:	428b      	cmp	r3, r1
 80148a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80148ac:	d1f7      	bne.n	801489e <__kernel_rem_pio2f+0xa2>
 80148ae:	3001      	adds	r0, #1
 80148b0:	42b8      	cmp	r0, r7
 80148b2:	ece6 7a01 	vstmia	r6!, {s15}
 80148b6:	f104 0404 	add.w	r4, r4, #4
 80148ba:	d1e9      	bne.n	8014890 <__kernel_rem_pio2f+0x94>
 80148bc:	ab09      	add	r3, sp, #36	; 0x24
 80148be:	af0a      	add	r7, sp, #40	; 0x28
 80148c0:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 80148c4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80148c8:	3b08      	subs	r3, #8
 80148ca:	ed9f 9a76 	vldr	s18, [pc, #472]	; 8014aa4 <__kernel_rem_pio2f+0x2a8>
 80148ce:	eddf 8a74 	vldr	s17, [pc, #464]	; 8014aa0 <__kernel_rem_pio2f+0x2a4>
 80148d2:	9805      	ldr	r0, [sp, #20]
 80148d4:	9304      	str	r3, [sp, #16]
 80148d6:	eb0a 040c 	add.w	r4, sl, ip
 80148da:	ae46      	add	r6, sp, #280	; 0x118
 80148dc:	9500      	str	r5, [sp, #0]
 80148de:	ab5a      	add	r3, sp, #360	; 0x168
 80148e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80148e4:	2d00      	cmp	r5, #0
 80148e6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80148ea:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 80148ee:	dd16      	ble.n	801491e <__kernel_rem_pio2f+0x122>
 80148f0:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80148f4:	463a      	mov	r2, r7
 80148f6:	ee60 7a09 	vmul.f32	s15, s0, s18
 80148fa:	eeb0 7a40 	vmov.f32	s14, s0
 80148fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014902:	ed73 6a01 	vldmdb	r3!, {s13}
 8014906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801490a:	42b3      	cmp	r3, r6
 801490c:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8014910:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8014914:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014918:	eca2 7a01 	vstmia	r2!, {s14}
 801491c:	d1eb      	bne.n	80148f6 <__kernel_rem_pio2f+0xfa>
 801491e:	9001      	str	r0, [sp, #4]
 8014920:	f000 fc14 	bl	801514c <scalbnf>
 8014924:	eeb0 8a40 	vmov.f32	s16, s0
 8014928:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801492c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014930:	f000 fbc6 	bl	80150c0 <floorf>
 8014934:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014938:	eea0 8a67 	vfms.f32	s16, s0, s15
 801493c:	9801      	ldr	r0, [sp, #4]
 801493e:	2800      	cmp	r0, #0
 8014940:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014944:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8014948:	ee38 8a67 	vsub.f32	s16, s16, s15
 801494c:	dd79      	ble.n	8014a42 <__kernel_rem_pio2f+0x246>
 801494e:	f105 3eff 	add.w	lr, r5, #4294967295
 8014952:	f1c0 0308 	rsb	r3, r0, #8
 8014956:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 801495a:	fa41 fc03 	asr.w	ip, r1, r3
 801495e:	fa0c f303 	lsl.w	r3, ip, r3
 8014962:	1acb      	subs	r3, r1, r3
 8014964:	f1c0 0207 	rsb	r2, r0, #7
 8014968:	ee19 1a90 	vmov	r1, s19
 801496c:	fa43 f202 	asr.w	r2, r3, r2
 8014970:	4461      	add	r1, ip
 8014972:	2a00      	cmp	r2, #0
 8014974:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
 8014978:	ee09 1a90 	vmov	s19, r1
 801497c:	dc69      	bgt.n	8014a52 <__kernel_rem_pio2f+0x256>
 801497e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014986:	f040 80c0 	bne.w	8014b0a <__kernel_rem_pio2f+0x30e>
 801498a:	9b00      	ldr	r3, [sp, #0]
 801498c:	f105 3bff 	add.w	fp, r5, #4294967295
 8014990:	455b      	cmp	r3, fp
 8014992:	dc10      	bgt.n	80149b6 <__kernel_rem_pio2f+0x1ba>
 8014994:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8014998:	3b01      	subs	r3, #1
 801499a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801499e:	2100      	movs	r1, #0
 80149a0:	4694      	mov	ip, r2
 80149a2:	f853 2904 	ldr.w	r2, [r3], #-4
 80149a6:	454b      	cmp	r3, r9
 80149a8:	ea41 0102 	orr.w	r1, r1, r2
 80149ac:	d1f9      	bne.n	80149a2 <__kernel_rem_pio2f+0x1a6>
 80149ae:	4662      	mov	r2, ip
 80149b0:	2900      	cmp	r1, #0
 80149b2:	f040 80f2 	bne.w	8014b9a <__kernel_rem_pio2f+0x39e>
 80149b6:	9b00      	ldr	r3, [sp, #0]
 80149b8:	3b01      	subs	r3, #1
 80149ba:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f040 80e7 	bne.w	8014b92 <__kernel_rem_pio2f+0x396>
 80149c4:	9b04      	ldr	r3, [sp, #16]
 80149c6:	f04f 0c01 	mov.w	ip, #1
 80149ca:	f853 2904 	ldr.w	r2, [r3], #-4
 80149ce:	f10c 0c01 	add.w	ip, ip, #1
 80149d2:	2a00      	cmp	r2, #0
 80149d4:	d0f9      	beq.n	80149ca <__kernel_rem_pio2f+0x1ce>
 80149d6:	1c6b      	adds	r3, r5, #1
 80149d8:	44ac      	add	ip, r5
 80149da:	469e      	mov	lr, r3
 80149dc:	9a03      	ldr	r2, [sp, #12]
 80149de:	1951      	adds	r1, r2, r5
 80149e0:	9a02      	ldr	r2, [sp, #8]
 80149e2:	eb02 0b03 	add.w	fp, r2, r3
 80149e6:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 80149ea:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80149ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80149f0:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80149f4:	ab1e      	add	r3, sp, #120	; 0x78
 80149f6:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80149fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80149fe:	eddb 7a01 	vldr	s15, [fp, #4]
 8014a02:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014a9c <__kernel_rem_pio2f+0x2a0>
 8014a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a0a:	f1b8 0f00 	cmp.w	r8, #0
 8014a0e:	f10b 0b04 	add.w	fp, fp, #4
 8014a12:	edc1 7a00 	vstr	s15, [r1]
 8014a16:	460a      	mov	r2, r1
 8014a18:	f101 0104 	add.w	r1, r1, #4
 8014a1c:	db09      	blt.n	8014a32 <__kernel_rem_pio2f+0x236>
 8014a1e:	4653      	mov	r3, sl
 8014a20:	e001      	b.n	8014a26 <__kernel_rem_pio2f+0x22a>
 8014a22:	ed72 7a01 	vldmdb	r2!, {s15}
 8014a26:	ecf3 6a01 	vldmia	r3!, {s13}
 8014a2a:	42a3      	cmp	r3, r4
 8014a2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a30:	d1f7      	bne.n	8014a22 <__kernel_rem_pio2f+0x226>
 8014a32:	f10e 0e01 	add.w	lr, lr, #1
 8014a36:	45e6      	cmp	lr, ip
 8014a38:	eca5 7a01 	vstmia	r5!, {s14}
 8014a3c:	dddf      	ble.n	80149fe <__kernel_rem_pio2f+0x202>
 8014a3e:	4665      	mov	r5, ip
 8014a40:	e74d      	b.n	80148de <__kernel_rem_pio2f+0xe2>
 8014a42:	f040 809c 	bne.w	8014b7e <__kernel_rem_pio2f+0x382>
 8014a46:	1e6b      	subs	r3, r5, #1
 8014a48:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8014a4c:	11d2      	asrs	r2, r2, #7
 8014a4e:	2a00      	cmp	r2, #0
 8014a50:	dd95      	ble.n	801497e <__kernel_rem_pio2f+0x182>
 8014a52:	ee19 3a90 	vmov	r3, s19
 8014a56:	2d00      	cmp	r5, #0
 8014a58:	f103 0301 	add.w	r3, r3, #1
 8014a5c:	ee09 3a90 	vmov	s19, r3
 8014a60:	f340 8198 	ble.w	8014d94 <__kernel_rem_pio2f+0x598>
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	2900      	cmp	r1, #0
 8014a68:	d17f      	bne.n	8014b6a <__kernel_rem_pio2f+0x36e>
 8014a6a:	2d01      	cmp	r5, #1
 8014a6c:	d026      	beq.n	8014abc <__kernel_rem_pio2f+0x2c0>
 8014a6e:	463b      	mov	r3, r7
 8014a70:	f04f 0c01 	mov.w	ip, #1
 8014a74:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8014a78:	2900      	cmp	r1, #0
 8014a7a:	d07a      	beq.n	8014b72 <__kernel_rem_pio2f+0x376>
 8014a7c:	f10c 0301 	add.w	r3, ip, #1
 8014a80:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8014a84:	429d      	cmp	r5, r3
 8014a86:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
 8014a8a:	dd16      	ble.n	8014aba <__kernel_rem_pio2f+0x2be>
 8014a8c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8014a90:	44bb      	add	fp, r7
 8014a92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014a96:	e00a      	b.n	8014aae <__kernel_rem_pio2f+0x2b2>
 8014a98:	0802b1ec 	.word	0x0802b1ec
 8014a9c:	00000000 	.word	0x00000000
 8014aa0:	43800000 	.word	0x43800000
 8014aa4:	3b800000 	.word	0x3b800000
 8014aa8:	3fc90000 	.word	0x3fc90000
 8014aac:	6819      	ldr	r1, [r3, #0]
 8014aae:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8014ab2:	f843 1b04 	str.w	r1, [r3], #4
 8014ab6:	455b      	cmp	r3, fp
 8014ab8:	d1f8      	bne.n	8014aac <__kernel_rem_pio2f+0x2b0>
 8014aba:	2101      	movs	r1, #1
 8014abc:	2800      	cmp	r0, #0
 8014abe:	dd0c      	ble.n	8014ada <__kernel_rem_pio2f+0x2de>
 8014ac0:	2801      	cmp	r0, #1
 8014ac2:	f000 8148 	beq.w	8014d56 <__kernel_rem_pio2f+0x55a>
 8014ac6:	2802      	cmp	r0, #2
 8014ac8:	d107      	bne.n	8014ada <__kernel_rem_pio2f+0x2de>
 8014aca:	f105 3cff 	add.w	ip, r5, #4294967295
 8014ace:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ad6:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014ada:	2a02      	cmp	r2, #2
 8014adc:	f47f af4f 	bne.w	801497e <__kernel_rem_pio2f+0x182>
 8014ae0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014ae4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014ae8:	2900      	cmp	r1, #0
 8014aea:	f43f af48 	beq.w	801497e <__kernel_rem_pio2f+0x182>
 8014aee:	9209      	str	r2, [sp, #36]	; 0x24
 8014af0:	9001      	str	r0, [sp, #4]
 8014af2:	f000 fb2b 	bl	801514c <scalbnf>
 8014af6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014afc:	9801      	ldr	r0, [sp, #4]
 8014afe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b06:	f43f af40 	beq.w	801498a <__kernel_rem_pio2f+0x18e>
 8014b0a:	9202      	str	r2, [sp, #8]
 8014b0c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014b10:	eeb0 0a48 	vmov.f32	s0, s16
 8014b14:	1a98      	subs	r0, r3, r2
 8014b16:	9501      	str	r5, [sp, #4]
 8014b18:	9d00      	ldr	r5, [sp, #0]
 8014b1a:	f000 fb17 	bl	801514c <scalbnf>
 8014b1e:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8014aa0 <__kernel_rem_pio2f+0x2a4>
 8014b22:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8014b2e:	f2c0 8159 	blt.w	8014de4 <__kernel_rem_pio2f+0x5e8>
 8014b32:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8014aa4 <__kernel_rem_pio2f+0x2a8>
 8014b36:	9905      	ldr	r1, [sp, #20]
 8014b38:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014b3c:	3108      	adds	r1, #8
 8014b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b42:	9105      	str	r1, [sp, #20]
 8014b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b48:	f103 0b01 	add.w	fp, r3, #1
 8014b4c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014b58:	ee10 1a10 	vmov	r1, s0
 8014b5c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014b60:	ee17 3a90 	vmov	r3, s15
 8014b64:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
 8014b68:	e02e      	b.n	8014bc8 <__kernel_rem_pio2f+0x3cc>
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	f04f 0c00 	mov.w	ip, #0
 8014b70:	e786      	b.n	8014a80 <__kernel_rem_pio2f+0x284>
 8014b72:	f10c 0c01 	add.w	ip, ip, #1
 8014b76:	45ac      	cmp	ip, r5
 8014b78:	f47f af7c 	bne.w	8014a74 <__kernel_rem_pio2f+0x278>
 8014b7c:	e79e      	b.n	8014abc <__kernel_rem_pio2f+0x2c0>
 8014b7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014b82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8a:	f280 80f2 	bge.w	8014d72 <__kernel_rem_pio2f+0x576>
 8014b8e:	2200      	movs	r2, #0
 8014b90:	e6f5      	b.n	801497e <__kernel_rem_pio2f+0x182>
 8014b92:	1c6b      	adds	r3, r5, #1
 8014b94:	469e      	mov	lr, r3
 8014b96:	469c      	mov	ip, r3
 8014b98:	e720      	b.n	80149dc <__kernel_rem_pio2f+0x1e0>
 8014b9a:	9905      	ldr	r1, [sp, #20]
 8014b9c:	f1a1 0008 	sub.w	r0, r1, #8
 8014ba0:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 8014ba4:	9005      	str	r0, [sp, #20]
 8014ba6:	462b      	mov	r3, r5
 8014ba8:	9d00      	ldr	r5, [sp, #0]
 8014baa:	b969      	cbnz	r1, 8014bc8 <__kernel_rem_pio2f+0x3cc>
 8014bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014bb0:	3b02      	subs	r3, #2
 8014bb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014bb6:	4601      	mov	r1, r0
 8014bb8:	f853 0904 	ldr.w	r0, [r3], #-4
 8014bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bc0:	3908      	subs	r1, #8
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	d0f8      	beq.n	8014bb8 <__kernel_rem_pio2f+0x3bc>
 8014bc6:	9105      	str	r1, [sp, #20]
 8014bc8:	9805      	ldr	r0, [sp, #20]
 8014bca:	9200      	str	r2, [sp, #0]
 8014bcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014bd0:	f000 fabc 	bl	801514c <scalbnf>
 8014bd4:	f1bb 0f00 	cmp.w	fp, #0
 8014bd8:	9a00      	ldr	r2, [sp, #0]
 8014bda:	f2c0 8128 	blt.w	8014e2e <__kernel_rem_pio2f+0x632>
 8014bde:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 8014be2:	ab46      	add	r3, sp, #280	; 0x118
 8014be4:	eb03 060e 	add.w	r6, r3, lr
 8014be8:	f10e 0c04 	add.w	ip, lr, #4
 8014bec:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 8014aa4 <__kernel_rem_pio2f+0x2a8>
 8014bf0:	eb07 030c 	add.w	r3, r7, ip
 8014bf4:	1d31      	adds	r1, r6, #4
 8014bf6:	ed73 7a01 	vldmdb	r3!, {s15}
 8014bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bfe:	42bb      	cmp	r3, r7
 8014c00:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c04:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c08:	ed61 7a01 	vstmdb	r1!, {s15}
 8014c0c:	d1f3      	bne.n	8014bf6 <__kernel_rem_pio2f+0x3fa>
 8014c0e:	2d00      	cmp	r5, #0
 8014c10:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 8014aa8 <__kernel_rem_pio2f+0x2ac>
 8014c14:	f04f 0400 	mov.w	r4, #0
 8014c18:	db20      	blt.n	8014c5c <__kernel_rem_pio2f+0x460>
 8014c1a:	4893      	ldr	r0, [pc, #588]	; (8014e68 <__kernel_rem_pio2f+0x66c>)
 8014c1c:	eddf 7a93 	vldr	s15, [pc, #588]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014c20:	eeb0 7a46 	vmov.f32	s14, s12
 8014c24:	4631      	mov	r1, r6
 8014c26:	2300      	movs	r3, #0
 8014c28:	e003      	b.n	8014c32 <__kernel_rem_pio2f+0x436>
 8014c2a:	429c      	cmp	r4, r3
 8014c2c:	db08      	blt.n	8014c40 <__kernel_rem_pio2f+0x444>
 8014c2e:	ecb0 7a01 	vldmia	r0!, {s14}
 8014c32:	ecf1 6a01 	vldmia	r1!, {s13}
 8014c36:	3301      	adds	r3, #1
 8014c38:	429d      	cmp	r5, r3
 8014c3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c3e:	daf4      	bge.n	8014c2a <__kernel_rem_pio2f+0x42e>
 8014c40:	ab5a      	add	r3, sp, #360	; 0x168
 8014c42:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014c46:	45a3      	cmp	fp, r4
 8014c48:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
 8014c4c:	f1a6 0604 	sub.w	r6, r6, #4
 8014c50:	f104 0301 	add.w	r3, r4, #1
 8014c54:	d005      	beq.n	8014c62 <__kernel_rem_pio2f+0x466>
 8014c56:	2d00      	cmp	r5, #0
 8014c58:	461c      	mov	r4, r3
 8014c5a:	dade      	bge.n	8014c1a <__kernel_rem_pio2f+0x41e>
 8014c5c:	eddf 7a83 	vldr	s15, [pc, #524]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014c60:	e7ee      	b.n	8014c40 <__kernel_rem_pio2f+0x444>
 8014c62:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8014c64:	2902      	cmp	r1, #2
 8014c66:	dc1c      	bgt.n	8014ca2 <__kernel_rem_pio2f+0x4a6>
 8014c68:	2900      	cmp	r1, #0
 8014c6a:	f300 8095 	bgt.w	8014d98 <__kernel_rem_pio2f+0x59c>
 8014c6e:	d10f      	bne.n	8014c90 <__kernel_rem_pio2f+0x494>
 8014c70:	ab32      	add	r3, sp, #200	; 0xc8
 8014c72:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014c76:	449c      	add	ip, r3
 8014c78:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014c7c:	4563      	cmp	r3, ip
 8014c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c82:	d1f9      	bne.n	8014c78 <__kernel_rem_pio2f+0x47c>
 8014c84:	b10a      	cbz	r2, 8014c8a <__kernel_rem_pio2f+0x48e>
 8014c86:	eef1 7a67 	vneg.f32	s15, s15
 8014c8a:	9b06      	ldr	r3, [sp, #24]
 8014c8c:	edc3 7a00 	vstr	s15, [r3]
 8014c90:	ee19 3a90 	vmov	r3, s19
 8014c94:	f003 0007 	and.w	r0, r3, #7
 8014c98:	b05b      	add	sp, #364	; 0x16c
 8014c9a:	ecbd 8b04 	vpop	{d8-d9}
 8014c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca2:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014ca4:	2b03      	cmp	r3, #3
 8014ca6:	d1f3      	bne.n	8014c90 <__kernel_rem_pio2f+0x494>
 8014ca8:	f1bb 0f00 	cmp.w	fp, #0
 8014cac:	f000 80d4 	beq.w	8014e58 <__kernel_rem_pio2f+0x65c>
 8014cb0:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014cb4:	446b      	add	r3, sp
 8014cb6:	a932      	add	r1, sp, #200	; 0xc8
 8014cb8:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8014cbc:	eb01 038b 	add.w	r3, r1, fp, lsl #2
 8014cc0:	ed73 7a01 	vldmdb	r3!, {s15}
 8014cc4:	eef0 6a47 	vmov.f32	s13, s14
 8014cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ccc:	4299      	cmp	r1, r3
 8014cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cd2:	ed83 7a00 	vstr	s14, [r3]
 8014cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014cda:	edc3 7a01 	vstr	s15, [r3, #4]
 8014cde:	d1ef      	bne.n	8014cc0 <__kernel_rem_pio2f+0x4c4>
 8014ce0:	f1bb 0f01 	cmp.w	fp, #1
 8014ce4:	f340 80b8 	ble.w	8014e58 <__kernel_rem_pio2f+0x65c>
 8014ce8:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 8014cec:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014cf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cf4:	eb0d 0e03 	add.w	lr, sp, r3
 8014cf8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8014cfc:	f10b 0304 	add.w	r3, fp, #4
 8014d00:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
 8014d04:	440b      	add	r3, r1
 8014d06:	a833      	add	r0, sp, #204	; 0xcc
 8014d08:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d0c:	eef0 6a47 	vmov.f32	s13, s14
 8014d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d14:	4298      	cmp	r0, r3
 8014d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d1a:	ed83 7a00 	vstr	s14, [r3]
 8014d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d22:	edc3 7a01 	vstr	s15, [r3, #4]
 8014d26:	d1ef      	bne.n	8014d08 <__kernel_rem_pio2f+0x50c>
 8014d28:	f10b 0b08 	add.w	fp, fp, #8
 8014d2c:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014d30:	eb01 030b 	add.w	r3, r1, fp
 8014d34:	3108      	adds	r1, #8
 8014d36:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d3a:	4299      	cmp	r1, r3
 8014d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d40:	d1f9      	bne.n	8014d36 <__kernel_rem_pio2f+0x53a>
 8014d42:	2a00      	cmp	r2, #0
 8014d44:	d156      	bne.n	8014df4 <__kernel_rem_pio2f+0x5f8>
 8014d46:	9906      	ldr	r1, [sp, #24]
 8014d48:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014d4a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014d4c:	600a      	str	r2, [r1, #0]
 8014d4e:	604b      	str	r3, [r1, #4]
 8014d50:	edc1 7a02 	vstr	s15, [r1, #8]
 8014d54:	e79c      	b.n	8014c90 <__kernel_rem_pio2f+0x494>
 8014d56:	f105 3cff 	add.w	ip, r5, #4294967295
 8014d5a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d62:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014d66:	e6b8      	b.n	8014ada <__kernel_rem_pio2f+0x2de>
 8014d68:	2308      	movs	r3, #8
 8014d6a:	9307      	str	r3, [sp, #28]
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	9302      	str	r3, [sp, #8]
 8014d70:	e55f      	b.n	8014832 <__kernel_rem_pio2f+0x36>
 8014d72:	ee19 3a90 	vmov	r3, s19
 8014d76:	2d00      	cmp	r5, #0
 8014d78:	f103 0301 	add.w	r3, r3, #1
 8014d7c:	ee09 3a90 	vmov	s19, r3
 8014d80:	bfc8      	it	gt
 8014d82:	2202      	movgt	r2, #2
 8014d84:	f73f ae6e 	bgt.w	8014a64 <__kernel_rem_pio2f+0x268>
 8014d88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d8c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8014d90:	2202      	movs	r2, #2
 8014d92:	e5f4      	b.n	801497e <__kernel_rem_pio2f+0x182>
 8014d94:	2100      	movs	r1, #0
 8014d96:	e691      	b.n	8014abc <__kernel_rem_pio2f+0x2c0>
 8014d98:	a932      	add	r1, sp, #200	; 0xc8
 8014d9a:	eddf 7a34 	vldr	s15, [pc, #208]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014d9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014da2:	ed33 7a01 	vldmdb	r3!, {s14}
 8014da6:	4299      	cmp	r1, r3
 8014da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dac:	d1f9      	bne.n	8014da2 <__kernel_rem_pio2f+0x5a6>
 8014dae:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8014db2:	bb8a      	cbnz	r2, 8014e18 <__kernel_rem_pio2f+0x61c>
 8014db4:	9b06      	ldr	r3, [sp, #24]
 8014db6:	f1bb 0f00 	cmp.w	fp, #0
 8014dba:	edc3 7a00 	vstr	s15, [r3]
 8014dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014dc2:	dd0b      	ble.n	8014ddc <__kernel_rem_pio2f+0x5e0>
 8014dc4:	a933      	add	r1, sp, #204	; 0xcc
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	ecb1 7a01 	vldmia	r1!, {s14}
 8014dcc:	3301      	adds	r3, #1
 8014dce:	459b      	cmp	fp, r3
 8014dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dd4:	daf8      	bge.n	8014dc8 <__kernel_rem_pio2f+0x5cc>
 8014dd6:	b10a      	cbz	r2, 8014ddc <__kernel_rem_pio2f+0x5e0>
 8014dd8:	eef1 7a67 	vneg.f32	s15, s15
 8014ddc:	9b06      	ldr	r3, [sp, #24]
 8014dde:	edc3 7a01 	vstr	s15, [r3, #4]
 8014de2:	e755      	b.n	8014c90 <__kernel_rem_pio2f+0x494>
 8014de4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014de8:	469b      	mov	fp, r3
 8014dea:	ee10 1a10 	vmov	r1, s0
 8014dee:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014df2:	e6e9      	b.n	8014bc8 <__kernel_rem_pio2f+0x3cc>
 8014df4:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8014df8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014dfc:	9b06      	ldr	r3, [sp, #24]
 8014dfe:	eef1 6a66 	vneg.f32	s13, s13
 8014e02:	eeb1 7a47 	vneg.f32	s14, s14
 8014e06:	eef1 7a67 	vneg.f32	s15, s15
 8014e0a:	edc3 6a00 	vstr	s13, [r3]
 8014e0e:	ed83 7a01 	vstr	s14, [r3, #4]
 8014e12:	edc3 7a02 	vstr	s15, [r3, #8]
 8014e16:	e73b      	b.n	8014c90 <__kernel_rem_pio2f+0x494>
 8014e18:	9b06      	ldr	r3, [sp, #24]
 8014e1a:	eef1 6a67 	vneg.f32	s13, s15
 8014e1e:	f1bb 0f00 	cmp.w	fp, #0
 8014e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e26:	edc3 6a00 	vstr	s13, [r3]
 8014e2a:	dccb      	bgt.n	8014dc4 <__kernel_rem_pio2f+0x5c8>
 8014e2c:	e7d4      	b.n	8014dd8 <__kernel_rem_pio2f+0x5dc>
 8014e2e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014e30:	2b02      	cmp	r3, #2
 8014e32:	dc0d      	bgt.n	8014e50 <__kernel_rem_pio2f+0x654>
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	dc14      	bgt.n	8014e62 <__kernel_rem_pio2f+0x666>
 8014e38:	f47f af2a 	bne.w	8014c90 <__kernel_rem_pio2f+0x494>
 8014e3c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014e40:	2a00      	cmp	r2, #0
 8014e42:	f43f af22 	beq.w	8014c8a <__kernel_rem_pio2f+0x48e>
 8014e46:	e71e      	b.n	8014c86 <__kernel_rem_pio2f+0x48a>
 8014e48:	9b03      	ldr	r3, [sp, #12]
 8014e4a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014e4e:	e535      	b.n	80148bc <__kernel_rem_pio2f+0xc0>
 8014e50:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014e52:	2b03      	cmp	r3, #3
 8014e54:	f47f af1c 	bne.w	8014c90 <__kernel_rem_pio2f+0x494>
 8014e58:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014e5c:	2a00      	cmp	r2, #0
 8014e5e:	d1c9      	bne.n	8014df4 <__kernel_rem_pio2f+0x5f8>
 8014e60:	e771      	b.n	8014d46 <__kernel_rem_pio2f+0x54a>
 8014e62:	eddf 7a02 	vldr	s15, [pc, #8]	; 8014e6c <__kernel_rem_pio2f+0x670>
 8014e66:	e7a2      	b.n	8014dae <__kernel_rem_pio2f+0x5b2>
 8014e68:	0802b1c4 	.word	0x0802b1c4
 8014e6c:	00000000 	.word	0x00000000

08014e70 <__kernel_sinf>:
 8014e70:	ee10 3a10 	vmov	r3, s0
 8014e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014e7c:	da04      	bge.n	8014e88 <__kernel_sinf+0x18>
 8014e7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014e82:	ee17 3a90 	vmov	r3, s15
 8014e86:	b35b      	cbz	r3, 8014ee0 <__kernel_sinf+0x70>
 8014e88:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014e8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014ee4 <__kernel_sinf+0x74>
 8014e90:	eddf 5a15 	vldr	s11, [pc, #84]	; 8014ee8 <__kernel_sinf+0x78>
 8014e94:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014eec <__kernel_sinf+0x7c>
 8014e98:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014ef0 <__kernel_sinf+0x80>
 8014e9c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014ea0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014ef4 <__kernel_sinf+0x84>
 8014ea4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014ea8:	ee20 5a27 	vmul.f32	s10, s0, s15
 8014eac:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014eb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014eb4:	b930      	cbnz	r0, 8014ec4 <__kernel_sinf+0x54>
 8014eb6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8014ef8 <__kernel_sinf+0x88>
 8014eba:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014ebe:	eea6 0a85 	vfma.f32	s0, s13, s10
 8014ec2:	4770      	bx	lr
 8014ec4:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8014ec8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014ecc:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8014ed0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8014efc <__kernel_sinf+0x8c>
 8014ed4:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014ed8:	eee5 0a26 	vfma.f32	s1, s10, s13
 8014edc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014ee0:	4770      	bx	lr
 8014ee2:	bf00      	nop
 8014ee4:	2f2ec9d3 	.word	0x2f2ec9d3
 8014ee8:	b2d72f34 	.word	0xb2d72f34
 8014eec:	3638ef1b 	.word	0x3638ef1b
 8014ef0:	b9500d01 	.word	0xb9500d01
 8014ef4:	3c088889 	.word	0x3c088889
 8014ef8:	be2aaaab 	.word	0xbe2aaaab
 8014efc:	3e2aaaab 	.word	0x3e2aaaab

08014f00 <__kernel_tanf>:
 8014f00:	b508      	push	{r3, lr}
 8014f02:	ee10 3a10 	vmov	r3, s0
 8014f06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014f0a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014f0e:	eef0 7a40 	vmov.f32	s15, s0
 8014f12:	da0f      	bge.n	8014f34 <__kernel_tanf+0x34>
 8014f14:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014f18:	ee17 1a10 	vmov	r1, s14
 8014f1c:	bb01      	cbnz	r1, 8014f60 <__kernel_tanf+0x60>
 8014f1e:	1c43      	adds	r3, r0, #1
 8014f20:	4313      	orrs	r3, r2
 8014f22:	f000 80a0 	beq.w	8015066 <__kernel_tanf+0x166>
 8014f26:	2801      	cmp	r0, #1
 8014f28:	d003      	beq.n	8014f32 <__kernel_tanf+0x32>
 8014f2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014f2e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014f32:	bd08      	pop	{r3, pc}
 8014f34:	4950      	ldr	r1, [pc, #320]	; (8015078 <__kernel_tanf+0x178>)
 8014f36:	428a      	cmp	r2, r1
 8014f38:	db12      	blt.n	8014f60 <__kernel_tanf+0x60>
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	bfb8      	it	lt
 8014f3e:	eef1 7a40 	vneglt.f32	s15, s0
 8014f42:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 801507c <__kernel_tanf+0x17c>
 8014f46:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015080 <__kernel_tanf+0x180>
 8014f4a:	bfb8      	it	lt
 8014f4c:	eef1 0a60 	vneglt.f32	s1, s1
 8014f50:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014f54:	ee37 0a60 	vsub.f32	s0, s14, s1
 8014f58:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8015084 <__kernel_tanf+0x184>
 8014f5c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014f60:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014f64:	eddf 4a48 	vldr	s9, [pc, #288]	; 8015088 <__kernel_tanf+0x188>
 8014f68:	eddf 5a48 	vldr	s11, [pc, #288]	; 801508c <__kernel_tanf+0x18c>
 8014f6c:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8015090 <__kernel_tanf+0x190>
 8014f70:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8015094 <__kernel_tanf+0x194>
 8014f74:	4940      	ldr	r1, [pc, #256]	; (8015078 <__kernel_tanf+0x178>)
 8014f76:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014f7a:	428a      	cmp	r2, r1
 8014f7c:	eee7 5a24 	vfma.f32	s11, s14, s9
 8014f80:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014f84:	eddf 4a44 	vldr	s9, [pc, #272]	; 8015098 <__kernel_tanf+0x198>
 8014f88:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801509c <__kernel_tanf+0x19c>
 8014f8c:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014f90:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014f94:	eddf 5a42 	vldr	s11, [pc, #264]	; 80150a0 <__kernel_tanf+0x1a0>
 8014f98:	ed9f 6a42 	vldr	s12, [pc, #264]	; 80150a4 <__kernel_tanf+0x1a4>
 8014f9c:	eee4 5a87 	vfma.f32	s11, s9, s14
 8014fa0:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014fa4:	eddf 4a40 	vldr	s9, [pc, #256]	; 80150a8 <__kernel_tanf+0x1a8>
 8014fa8:	ed9f 5a40 	vldr	s10, [pc, #256]	; 80150ac <__kernel_tanf+0x1ac>
 8014fac:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014fb0:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014fb4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80150b0 <__kernel_tanf+0x1b0>
 8014fb8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80150b4 <__kernel_tanf+0x1b4>
 8014fbc:	eea4 6a87 	vfma.f32	s12, s9, s14
 8014fc0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014fc4:	eeb0 7a46 	vmov.f32	s14, s12
 8014fc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014fcc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8014fd0:	eeb0 6a60 	vmov.f32	s12, s1
 8014fd4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014fd8:	eddf 4a37 	vldr	s9, [pc, #220]	; 80150b8 <__kernel_tanf+0x1b8>
 8014fdc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014fe0:	eee5 0a24 	vfma.f32	s1, s10, s9
 8014fe4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8014fe8:	da1f      	bge.n	801502a <__kernel_tanf+0x12a>
 8014fea:	2801      	cmp	r0, #1
 8014fec:	d0a1      	beq.n	8014f32 <__kernel_tanf+0x32>
 8014fee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014ff2:	eec7 6a00 	vdiv.f32	s13, s14, s0
 8014ff6:	4b31      	ldr	r3, [pc, #196]	; (80150bc <__kernel_tanf+0x1bc>)
 8014ff8:	ee10 2a10 	vmov	r2, s0
 8014ffc:	401a      	ands	r2, r3
 8014ffe:	ee06 2a10 	vmov	s12, r2
 8015002:	ee16 2a90 	vmov	r2, s13
 8015006:	ee76 7a67 	vsub.f32	s15, s12, s15
 801500a:	4013      	ands	r3, r2
 801500c:	ee00 3a10 	vmov	s0, r3
 8015010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015014:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015018:	eef0 7a47 	vmov.f32	s15, s14
 801501c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8015020:	eee0 7a80 	vfma.f32	s15, s1, s0
 8015024:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8015028:	bd08      	pop	{r3, pc}
 801502a:	ee07 0a10 	vmov	s14, r0
 801502e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015032:	ee60 5a00 	vmul.f32	s11, s0, s0
 8015036:	ee30 0a07 	vadd.f32	s0, s0, s14
 801503a:	179b      	asrs	r3, r3, #30
 801503c:	eec5 6a80 	vdiv.f32	s13, s11, s0
 8015040:	f003 0302 	and.w	r3, r3, #2
 8015044:	f1c3 0301 	rsb	r3, r3, #1
 8015048:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801504c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8015050:	ee00 3a10 	vmov	s0, r3
 8015054:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015058:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801505c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8015060:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015064:	bd08      	pop	{r3, pc}
 8015066:	f7fe ffa9 	bl	8013fbc <fabsf>
 801506a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801506e:	eef0 7a40 	vmov.f32	s15, s0
 8015072:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015076:	bd08      	pop	{r3, pc}
 8015078:	3f2ca140 	.word	0x3f2ca140
 801507c:	33222168 	.word	0x33222168
 8015080:	3f490fda 	.word	0x3f490fda
 8015084:	00000000 	.word	0x00000000
 8015088:	b79bae5f 	.word	0xb79bae5f
 801508c:	38a3f445 	.word	0x38a3f445
 8015090:	37d95384 	.word	0x37d95384
 8015094:	3895c07a 	.word	0x3895c07a
 8015098:	3a1a26c8 	.word	0x3a1a26c8
 801509c:	398137b9 	.word	0x398137b9
 80150a0:	3b6b6916 	.word	0x3b6b6916
 80150a4:	3abede48 	.word	0x3abede48
 80150a8:	3cb327a4 	.word	0x3cb327a4
 80150ac:	3c11371f 	.word	0x3c11371f
 80150b0:	3e088889 	.word	0x3e088889
 80150b4:	3d5d0dd1 	.word	0x3d5d0dd1
 80150b8:	3eaaaaab 	.word	0x3eaaaaab
 80150bc:	fffff000 	.word	0xfffff000

080150c0 <floorf>:
 80150c0:	ee10 2a10 	vmov	r2, s0
 80150c4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80150c8:	3b7f      	subs	r3, #127	; 0x7f
 80150ca:	2b16      	cmp	r3, #22
 80150cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80150d0:	dc28      	bgt.n	8015124 <floorf+0x64>
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	db18      	blt.n	8015108 <floorf+0x48>
 80150d6:	491a      	ldr	r1, [pc, #104]	; (8015140 <floorf+0x80>)
 80150d8:	4119      	asrs	r1, r3
 80150da:	420a      	tst	r2, r1
 80150dc:	d021      	beq.n	8015122 <floorf+0x62>
 80150de:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015144 <floorf+0x84>
 80150e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80150e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150ee:	dd18      	ble.n	8015122 <floorf+0x62>
 80150f0:	2a00      	cmp	r2, #0
 80150f2:	da04      	bge.n	80150fe <floorf+0x3e>
 80150f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80150f8:	fa40 f303 	asr.w	r3, r0, r3
 80150fc:	441a      	add	r2, r3
 80150fe:	ea22 0301 	bic.w	r3, r2, r1
 8015102:	ee00 3a10 	vmov	s0, r3
 8015106:	4770      	bx	lr
 8015108:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8015144 <floorf+0x84>
 801510c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015118:	dd03      	ble.n	8015122 <floorf+0x62>
 801511a:	2a00      	cmp	r2, #0
 801511c:	db08      	blt.n	8015130 <floorf+0x70>
 801511e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015148 <floorf+0x88>
 8015122:	4770      	bx	lr
 8015124:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015128:	d3fb      	bcc.n	8015122 <floorf+0x62>
 801512a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801512e:	4770      	bx	lr
 8015130:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015134:	2900      	cmp	r1, #0
 8015136:	bf18      	it	ne
 8015138:	eeb0 0a67 	vmovne.f32	s0, s15
 801513c:	4770      	bx	lr
 801513e:	bf00      	nop
 8015140:	007fffff 	.word	0x007fffff
 8015144:	7149f2ca 	.word	0x7149f2ca
 8015148:	00000000 	.word	0x00000000

0801514c <scalbnf>:
 801514c:	b082      	sub	sp, #8
 801514e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015152:	9b01      	ldr	r3, [sp, #4]
 8015154:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015158:	d02a      	beq.n	80151b0 <scalbnf+0x64>
 801515a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801515e:	d223      	bcs.n	80151a8 <scalbnf+0x5c>
 8015160:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015164:	d128      	bne.n	80151b8 <scalbnf+0x6c>
 8015166:	ed9d 7a01 	vldr	s14, [sp, #4]
 801516a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8015214 <scalbnf+0xc8>
 801516e:	4b2a      	ldr	r3, [pc, #168]	; (8015218 <scalbnf+0xcc>)
 8015170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015174:	4298      	cmp	r0, r3
 8015176:	edcd 7a01 	vstr	s15, [sp, #4]
 801517a:	db37      	blt.n	80151ec <scalbnf+0xa0>
 801517c:	9b01      	ldr	r3, [sp, #4]
 801517e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015182:	3a19      	subs	r2, #25
 8015184:	4402      	add	r2, r0
 8015186:	2afe      	cmp	r2, #254	; 0xfe
 8015188:	dd1a      	ble.n	80151c0 <scalbnf+0x74>
 801518a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801521c <scalbnf+0xd0>
 801518e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8015220 <scalbnf+0xd4>
 8015192:	9b01      	ldr	r3, [sp, #4]
 8015194:	2b00      	cmp	r3, #0
 8015196:	eef0 7a40 	vmov.f32	s15, s0
 801519a:	bfb8      	it	lt
 801519c:	eeb0 0a47 	vmovlt.f32	s0, s14
 80151a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80151a4:	b002      	add	sp, #8
 80151a6:	4770      	bx	lr
 80151a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80151ac:	b002      	add	sp, #8
 80151ae:	4770      	bx	lr
 80151b0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80151b4:	b002      	add	sp, #8
 80151b6:	4770      	bx	lr
 80151b8:	0dd2      	lsrs	r2, r2, #23
 80151ba:	4402      	add	r2, r0
 80151bc:	2afe      	cmp	r2, #254	; 0xfe
 80151be:	dce4      	bgt.n	801518a <scalbnf+0x3e>
 80151c0:	2a00      	cmp	r2, #0
 80151c2:	dc0b      	bgt.n	80151dc <scalbnf+0x90>
 80151c4:	f112 0f16 	cmn.w	r2, #22
 80151c8:	da17      	bge.n	80151fa <scalbnf+0xae>
 80151ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80151ce:	4298      	cmp	r0, r3
 80151d0:	dcdb      	bgt.n	801518a <scalbnf+0x3e>
 80151d2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8015224 <scalbnf+0xd8>
 80151d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8015228 <scalbnf+0xdc>
 80151da:	e7da      	b.n	8015192 <scalbnf+0x46>
 80151dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80151e0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80151e4:	ee00 3a10 	vmov	s0, r3
 80151e8:	b002      	add	sp, #8
 80151ea:	4770      	bx	lr
 80151ec:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8015224 <scalbnf+0xd8>
 80151f0:	eddd 7a01 	vldr	s15, [sp, #4]
 80151f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80151f8:	e7d8      	b.n	80151ac <scalbnf+0x60>
 80151fa:	3219      	adds	r2, #25
 80151fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015200:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015204:	eddf 7a09 	vldr	s15, [pc, #36]	; 801522c <scalbnf+0xe0>
 8015208:	ee07 3a10 	vmov	s14, r3
 801520c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015210:	e7cc      	b.n	80151ac <scalbnf+0x60>
 8015212:	bf00      	nop
 8015214:	4c000000 	.word	0x4c000000
 8015218:	ffff3cb0 	.word	0xffff3cb0
 801521c:	7149f2ca 	.word	0x7149f2ca
 8015220:	f149f2ca 	.word	0xf149f2ca
 8015224:	0da24260 	.word	0x0da24260
 8015228:	8da24260 	.word	0x8da24260
 801522c:	33000000 	.word	0x33000000

08015230 <_init>:
 8015230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015232:	bf00      	nop
 8015234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015236:	bc08      	pop	{r3}
 8015238:	469e      	mov	lr, r3
 801523a:	4770      	bx	lr

0801523c <_fini>:
 801523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523e:	bf00      	nop
 8015240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015242:	bc08      	pop	{r3}
 8015244:	469e      	mov	lr, r3
 8015246:	4770      	bx	lr
