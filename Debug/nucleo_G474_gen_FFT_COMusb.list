
nucleo_G474_gen_FFT_COMusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015010  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015fb0  080151f0  080151f0  000251f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b1a0  0802b1a0  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  0802b1a0  0802b1a0  0003b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b1a8  0802b1a8  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b1a8  0802b1a8  0003b1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b1ac  0802b1ac  0003b1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0802b1b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131cc  200002b0  0802b460  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2001347c  0802b460  0004347c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f089  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005279  00000000  00000000  0006f369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed8  00000000  00000000  000745e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  000764c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f606  00000000  00000000  000781b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029e5e  00000000  00000000  000a77be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013a3bd  00000000  00000000  000d161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0020b9d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099e0  00000000  00000000  0020ba98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002946  00000000  00000000  00215478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b0 	.word	0x200002b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080151d8 	.word	0x080151d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002b4 	.word	0x200002b4
 800021c:	080151d8 	.word	0x080151d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f5 	b.w	80010e4 <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e f971 	bl	800f3e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_ADC1_Init+0xf4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_ADC1_Init+0xf4>)
 800112e:	2204      	movs	r2, #4
 8001130:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_ADC1_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001140:	2201      	movs	r2, #1
 8001142:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_ADC1_Init+0xf4>)
 800114e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0xf4>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0xf4>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001176:	f003 ffbb 	bl	80050f0 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001180:	f002 fba8 	bl	80038d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_ADC1_Init+0xf4>)
 800119a:	f005 f899 	bl	80062d0 <HAL_ADCEx_MultiModeConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80011a4:	f002 fb96 	bl	80038d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_ADC1_Init+0xf8>)
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0xf4>)
 80011c6:	f004 f969 	bl	800549c <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80011d0:	f002 fb80 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002cc 	.word	0x200002cc
 80011e0:	04300002 	.word	0x04300002

080011e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e f8f9 	bl	800f3e8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <MX_ADC2_Init+0xb8>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_ADC2_Init+0xb4>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC2_Init+0xb4>)
 800121c:	2204      	movs	r2, #4
 800121e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_ADC2_Init+0xb4>)
 800122e:	2201      	movs	r2, #1
 8001230:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC2_Init+0xb4>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_ADC2_Init+0xb4>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001254:	f003 ff4c 	bl	80050f0 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f002 fb39 	bl	80038d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC2_Init+0xbc>)
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001266:	2306      	movs	r3, #6
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126e:	237f      	movs	r3, #127	; 0x7f
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001272:	2304      	movs	r3, #4
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001280:	f004 f90c 	bl	800549c <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800128a:	f002 fb23 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000338 	.word	0x20000338
 800129c:	50000100 	.word	0x50000100
 80012a0:	1d500080 	.word	0x1d500080

080012a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a0      	sub	sp, #128	; 0x80
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00e f88f 	bl	800f3e8 <memset>
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d16a      	bne.n	80013aa <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80012da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fcef 	bl	8009cc8 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f0:	f002 faf0 	bl	80038d4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f005 ff50 	bl	80071f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_ADC_MspInit+0x1f8>)
 8001354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001358:	2205      	movs	r2, #5
 800135a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	4842      	ldr	r0, [pc, #264]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800138e:	f005 fbb5 	bl	8006afc <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001398:	f002 fa9c 	bl	80038d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013a8:	e06d      	b.n	8001486 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_ADC_MspInit+0x1fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d168      	bne.n	8001486 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fc7f 	bl	8009cc8 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80013d0:	f002 fa80 	bl	80038d4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <HAL_ADC_MspInit+0x200>)
 800142a:	f005 fee1 	bl	80071f0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0x208>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800146c:	f005 fb46 	bl	8006afc <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8001476:	f002 fa2d 	bl	80038d4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001486:	bf00      	nop
 8001488:	3780      	adds	r7, #128	; 0x80
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000464 	.word	0x20000464
 8001494:	40021000 	.word	0x40021000
 8001498:	200003a4 	.word	0x200003a4
 800149c:	40020008 	.word	0x40020008
 80014a0:	50000100 	.word	0x50000100
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20000404 	.word	0x20000404
 80014ac:	40020408 	.word	0x40020408

080014b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CRC_Init+0x54>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_CRC_Init+0x58>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_CRC_Init+0x54>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_CRC_Init+0x54>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CRC_Init+0x54>)
 80014c8:	f248 0205 	movw	r2, #32773	; 0x8005
 80014cc:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CRC_Init+0x54>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_CRC_Init+0x54>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CRC_Init+0x54>)
 80014de:	2220      	movs	r2, #32
 80014e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_CRC_Init+0x54>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CRC_Init+0x54>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CRC_Init+0x54>)
 80014f0:	f005 f906 	bl	8006700 <HAL_CRC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80014fa:	f002 f9eb 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000468 	.word	0x20000468
 8001508:	40023000 	.word	0x40023000

0800150c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_CRC_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6493      	str	r3, [r2, #72]	; 0x48
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023000 	.word	0x40023000
 8001548:	40021000 	.word	0x40021000

0800154c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel4
  */
void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_DMA_Init+0x104>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	4a3e      	ldr	r2, [pc, #248]	; (8001650 <MX_DMA_Init+0x104>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6493      	str	r3, [r2, #72]	; 0x48
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_DMA_Init+0x104>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <MX_DMA_Init+0x104>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <MX_DMA_Init+0x104>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6493      	str	r3, [r2, #72]	; 0x48
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <MX_DMA_Init+0x104>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <MX_DMA_Init+0x104>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <MX_DMA_Init+0x104>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6493      	str	r3, [r2, #72]	; 0x48
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_DMA_Init+0x104>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <MX_DMA_Init+0x108>)
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <MX_DMA_Init+0x10c>)
 800159e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <MX_DMA_Init+0x108>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_DMA_Init+0x108>)
 80015a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ac:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_DMA_Init+0x108>)
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MX_DMA_Init+0x108>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_DMA_Init+0x108>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_DMA_Init+0x108>)
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_DMA_Init+0x108>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_DMA_Init+0x108>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <MX_DMA_Init+0x108>)
 80015d8:	f005 fa90 	bl	8006afc <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 80015e2:	f002 f977 	bl	80038d4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f005 f853 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f005 f86a 	bl	80066ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200c      	movs	r0, #12
 80015fc:	f005 f84b 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001600:	200c      	movs	r0, #12
 8001602:	f005 f862 	bl	80066ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f005 f843 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001610:	200d      	movs	r0, #13
 8001612:	f005 f85a 	bl	80066ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200e      	movs	r0, #14
 800161c:	f005 f83b 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001620:	200e      	movs	r0, #14
 8001622:	f005 f852 	bl	80066ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200f      	movs	r0, #15
 800162c:	f005 f833 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001630:	200f      	movs	r0, #15
 8001632:	f005 f84a 	bl	80066ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2038      	movs	r0, #56	; 0x38
 800163c:	f005 f82b 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001640:	2038      	movs	r0, #56	; 0x38
 8001642:	f005 f842 	bl	80066ca <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	2000048c 	.word	0x2000048c
 8001658:	40020044 	.word	0x40020044

0800165c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <MX_GPIO_Init+0x11c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80016d8:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_GPIO_Init+0x120>)
 80016da:	f005 ff23 	bl	8007524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f005 ff1d 	bl	8007524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <MX_GPIO_Init+0x120>)
 8001700:	f005 fd76 	bl	80071f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 8001704:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <MX_GPIO_Init+0x120>)
 800171e:	f005 fd67 	bl	80071f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001722:	2320      	movs	r3, #32
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f005 fd58 	bl	80071f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001746:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f005 fd49 	bl	80071f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2028      	movs	r0, #40	; 0x28
 8001764:	f004 ff97 	bl	8006696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001768:	2028      	movs	r0, #40	; 0x28
 800176a:	f004 ffae 	bl	80066ca <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	48000800 	.word	0x48000800

08001780 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ac      	sub	sp, #176	; 0xb0
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8001786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8001796:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80017a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80017b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	2260      	movs	r2, #96	; 0x60
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00d fe0e 	bl	800f3e8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017d8:	4a73      	ldr	r2, [pc, #460]	; (80019a8 <MX_HRTIM1_Init+0x228>)
 80017da:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	609a      	str	r2, [r3, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_MASTER_CMP1;
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 80017f0:	4b6c      	ldr	r3, [pc, #432]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	615a      	str	r2, [r3, #20]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80017f8:	486a      	ldr	r0, [pc, #424]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017fa:	f005 fedd 	bl	80075b8 <HAL_HRTIM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001804:	f002 f866 	bl	80038d4 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001808:	210c      	movs	r1, #12
 800180a:	4866      	ldr	r0, [pc, #408]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800180c:	f005 ffa4 	bl	8007758 <HAL_HRTIM_DLLCalibrationStart>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001816:	f002 f85d 	bl	80038d4 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800181a:	210a      	movs	r1, #10
 800181c:	4861      	ldr	r0, [pc, #388]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800181e:	f005 fff3 	bl	8007808 <HAL_HRTIM_PollForDLLCalibration>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001828:	f002 f854 	bl	80038d4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	485d      	ldr	r0, [pc, #372]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001830:	f006 f8a5 	bl	800797e <HAL_HRTIM_EventPrescalerConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_HRTIM1_Init+0xbe>
  {
    Error_Handler();
 800183a:	f002 f84b 	bl	80038d4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EEV1SRC_TIM1_TRGO;
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8001856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185a:	461a      	mov	r2, r3
 800185c:	2101      	movs	r1, #1
 800185e:	4851      	ldr	r0, [pc, #324]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001860:	f006 f85e 	bl	8007920 <HAL_HRTIM_EventConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 800186a:	f002 f833 	bl	80038d4 <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	484c      	ldr	r0, [pc, #304]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001872:	f006 fa7d 	bl	8007d70 <HAL_HRTIM_FaultPrescalerConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 800187c:	f002 f82a 	bl	80038d4 <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_INTERNAL;
 8001880:	2301      	movs	r3, #1
 8001882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 8001898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800189c:	461a      	mov	r2, r3
 800189e:	2101      	movs	r1, #1
 80018a0:	4840      	ldr	r0, [pc, #256]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018a2:	f006 f8a5 	bl	80079f0 <HAL_HRTIM_FaultConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_HRTIM1_Init+0x130>
  {
    Error_Handler();
 80018ac:	f002 f812 	bl	80038d4 <Error_Handler>
  }
  pFaultBlkCfg.Threshold = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018c6:	461a      	mov	r2, r3
 80018c8:	2101      	movs	r1, #1
 80018ca:	4836      	ldr	r0, [pc, #216]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018cc:	f006 fb76 	bl	8007fbc <HAL_HRTIM_FaultCounterConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 80018d6:	f001 fffd 	bl	80038d4 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018de:	461a      	mov	r2, r3
 80018e0:	2101      	movs	r1, #1
 80018e2:	4830      	ldr	r0, [pc, #192]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018e4:	f006 fa7e 	bl	8007de4 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 80018ee:	f001 fff1 	bl	80038d4 <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018f8:	f006 fc58 	bl	80081ac <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 1700;
 80018fc:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	677b      	str	r3, [r7, #116]	; 0x74
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001906:	2300      	movs	r3, #0
 8001908:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800190a:	2308      	movs	r3, #8
 800190c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800190e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001912:	461a      	mov	r2, r3
 8001914:	2106      	movs	r1, #6
 8001916:	4823      	ldr	r0, [pc, #140]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001918:	f005 ffaa 	bl	8007870 <HAL_HRTIM_TimeBaseConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_HRTIM1_Init+0x1a6>
  {
    Error_Handler();
 8001922:	f001 ffd7 	bl	80038d4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASrcAddress = 0x0000;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = 0x0000;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  pTimerCfg.DMASize = 0x1;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800195e:	2300      	movs	r3, #0
 8001960:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	461a      	mov	r2, r3
 8001968:	2106      	movs	r1, #6
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800196c:	f006 fca0 	bl	80082b0 <HAL_HRTIM_WaveformTimerConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8001976:	f001 ffad 	bl	80038d4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 850;
 800197a:	f240 3352 	movw	r3, #850	; 0x352
 800197e:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2201      	movs	r2, #1
 8001984:	2106      	movs	r1, #6
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001988:	f006 fd20 	bl	80083cc <HAL_HRTIM_WaveformCompareConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 8001992:	f001 ff9f 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001998:	f000 f828 	bl	80019ec <HAL_HRTIM_MspPostInit>

}
 800199c:	bf00      	nop
 800199e:	37b0      	adds	r7, #176	; 0xb0
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200004ec 	.word	0x200004ec
 80019a8:	40016800 	.word	0x40016800

080019ac <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_HRTIM_MspInit+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10b      	bne.n	80019d6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40016800 	.word	0x40016800
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_HRTIM_MspPostInit+0x64>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11b      	bne.n	8001a46 <HAL_HRTIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB1     ------> HRTIM1_SCOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a26:	2302      	movs	r3, #2
 8001a28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001a36:	230d      	movs	r3, #13
 8001a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a42:	f005 fbd5 	bl	80071f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40016800 	.word	0x40016800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000400 	.word	0x48000400

08001a5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a84:	e000      	b.n	8001a88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f9      	beq.n	8001a86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abe:	f043 0204 	orr.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <__critical_enter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	static uint32_t lock_nesting_count = 0;
	void __critical_enter(void)
	{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
		__disable_irq();
		++lock_nesting_count;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__critical_enter+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <__critical_enter+0x1c>)
 8001ae4:	6013      	str	r3, [r2, #0]
	}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20011f38 	.word	0x20011f38

08001af4 <__critical_exit>:
	void __critical_exit(void)
	{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
		/* Unlock interrupts only when we are exiting the outermost nested call. */
		--lock_nesting_count;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <__critical_exit+0x24>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <__critical_exit+0x24>)
 8001b00:	6013      	str	r3, [r2, #0]
		if (lock_nesting_count == 0) {
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <__critical_exit+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b0a:	b662      	cpsie	i
}
 8001b0c:	bf00      	nop
			__enable_irq();
		}
	}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20011f38 	.word	0x20011f38
 8001b1c:	00000000 	.word	0x00000000

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b08d      	sub	sp, #52	; 0x34
 8001b26:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// test for github
	// ===================== тики замеряем, время работы вычисляем
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <main+0x288>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a9e      	ldr	r2, [pc, #632]	; (8001da8 <main+0x288>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT = 0;// обнуляем значение
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <main+0x28c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
	DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик, здесь и один раз
 8001b3a:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <main+0x290>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a9c      	ldr	r2, [pc, #624]	; (8001db0 <main+0x290>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b46:	f003 f81a 	bl	8004b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4a:	f001 f99f 	bl	8002e8c <SystemClock_Config>
  // 4 -много ошибок,  256 - медлено,   16 - вроде как норм

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4e:	f7ff fd85 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b52:	f7ff fcfb 	bl	800154c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b56:	f7ff fac7 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b5a:	f7ff fb43 	bl	80011e4 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001b5e:	f7ff fe0f 	bl	8001780 <MX_HRTIM1_Init>
  MX_TIM1_Init();
 8001b62:	f002 f8fd 	bl	8003d60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b66:	f002 f9fb 	bl	8003f60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b6a:	f002 fa73 	bl	8004054 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b6e:	f002 fb1f 	bl	80041b0 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001b72:	f002 fb55 	bl	8004220 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001b76:	f002 fae5 	bl	8004144 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001b7a:	f002 fd3f 	bl	80045fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b7e:	f002 fd8d 	bl	800469c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001b82:	f7ff fc95 	bl	80014b0 <MX_CRC_Init>
  MX_TIM17_Init();
 8001b86:	f002 fb71 	bl	800426c <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8001b8a:	f002 fdd3 	bl	8004734 <MX_USART3_UART_Init>
  // TIM6 - используем для модбуса, делает прерывания через 50uS, а там библиотека ModBUS  работает
  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // TIM16 - используем для увеличения уменьшения мощности, выдает тики 1uS, прерывания нет, в цикле смотрим CNT
  // TIM17 - используем для сканирования по частоте, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // �?нициализируйте стек протоколов в режиме RTU для SLAVE устройства с адресом 1 = 0x01
  adr_huart_MB = &huart1;
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <main+0x294>)
 8001b90:	4a89      	ldr	r2, [pc, #548]	; (8001db8 <main+0x298>)
 8001b92:	601a      	str	r2, [r3, #0]
   eMBInit( MB_RTU, MB_ADDRESS/*address*/, 1/*LPUART1*/, adr_huart_MB->Init.BaudRate/*115200*/ , adr_huart_MB->Init.Parity/*UART_PARITY_NONE*/ );
 8001b94:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <main+0x294>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <main+0x294>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2107      	movs	r1, #7
 8001baa:	2000      	movs	r0, #0
 8001bac:	f00c f83a 	bl	800dc24 <eMBInit>

   // Включите стек протоколов Modbus.
   eMBEnable();
 8001bb0:	f00c f864 	bl	800dc7c <eMBEnable>

	  HAL_Delay(300);
 8001bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bb8:	f003 f852 	bl	8004c60 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f005 fcc7 	bl	8007554 <HAL_GPIO_TogglePin>

  printf("MX_xxx_Init(); \n");
 8001bc6:	487d      	ldr	r0, [pc, #500]	; (8001dbc <main+0x29c>)
 8001bc8:	f00e fc58 	bl	801047c <puts>
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	e086      	b.n	8001ce0 <main+0x1c0>
  {
	  data_I[i] = (uint16_t) 1000 * sinf(((float)i)/64);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001dc0 <main+0x2a0>
 8001be0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001be4:	eeb0 0a47 	vmov.f32	s0, s14
 8001be8:	f012 f9c4 	bl	8013f74 <sinf>
 8001bec:	eef0 7a40 	vmov.f32	s15, s0
 8001bf0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001dc4 <main+0x2a4>
 8001bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	b299      	uxth	r1, r3
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <main+0x2a8>)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_U[i] = (uint16_t) cosf(((float)i)/64);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001dc0 <main+0x2a0>
 8001c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c20:	f012 f968 	bl	8013ef4 <cosf>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b299      	uxth	r1, r3
 8001c32:	4a66      	ldr	r2, [pc, #408]	; (8001dcc <main+0x2ac>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_P[i] = (uint16_t) 100 * sinf(((float)i)/64);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001dc0 <main+0x2a0>
 8001c48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c50:	f012 f990 	bl	8013f74 <sinf>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001dd0 <main+0x2b0>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <main+0x2b4>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_R[i] = (uint16_t) 100 * cosf(((float)i)/64);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001dc0 <main+0x2a0>
 8001c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c84:	eeb0 0a47 	vmov.f32	s0, s14
 8001c88:	f012 f934 	bl	8013ef4 <cosf>
 8001c8c:	eef0 7a40 	vmov.f32	s15, s0
 8001c90:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001dd0 <main+0x2b0>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c9c:	ee17 3a90 	vmov	r3, s15
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <main+0x2b8>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_Z[i] = (uint16_t) tanf(((float)i)/64);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001dc0 <main+0x2a0>
 8001cb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc0:	f012 f992 	bl	8013fe8 <tanf>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <main+0x2bc>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	f6ff af74 	blt.w	8001bd2 <main+0xb2>
	  //data_Q[i] = (uint16_t) i;
	  //data_X[i] = (uint16_t) i+1024;
	  //data_Y[i] = (uint16_t) i+4096;
  }
  //data_Q[1024] = 0;
  data_I[1024] = 1;
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <main+0x2a8>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_U[1024] = 2;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <main+0x2ac>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_P[1024] = 3;
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <main+0x2b4>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_R[1024] = 4;
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <main+0x2b8>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_Z[1024] = 5;
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <main+0x2bc>)
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

  // ============== LPUART =============== LPUART ============= LPUART ==================
  // вначале надо получить данные, пока будут нулевые, ещё нет никаких,
  // но потом прием данных будет активироваться окончанием передачи.
  // Дальше приемник не будет активирован. активация приемника происходит только 1 раз, после передачи
	  wTransferState_RX = TRANSFER_RX_START; // TRANSFER_WAIT - пока ждем приема настроечных данных
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <main+0x2c0>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
	  wTransferState_TX = TRANSFER_TX_Stop;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <main+0x2c4>)
 8001d1a:	2209      	movs	r2, #9
 8001d1c:	601a      	str	r2, [r3, #0]
  // if ((wTransferState != TRANSFER_ERROR ) & (status_SPI == HAL_OK))
  // { ; } // теперь надо извлечь все надобные настройки из полученого массива   cmd_array_SPI[] , только потом мохно будет запускать генерацию
  // else
  // { default; }

  HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_MASTER);
 8001d1e:	2106      	movs	r1, #6
 8001d20:	4831      	ldr	r0, [pc, #196]	; (8001de8 <main+0x2c8>)
 8001d22:	f005 fdcd 	bl	80078c0 <HAL_HRTIM_SimpleBaseStart>

  // TIM1 - главный таймер выдает управление ключами моста
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-низ PC0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4830      	ldr	r0, [pc, #192]	; (8001dec <main+0x2cc>)
 8001d2a:	f008 fbeb 	bl	800a504 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-верх PА7
 8001d2e:	2100      	movs	r1, #0
 8001d30:	482e      	ldr	r0, [pc, #184]	; (8001dec <main+0x2cc>)
 8001d32:	f009 fd75 	bl	800b820 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-низ PС2
 8001d36:	2108      	movs	r1, #8
 8001d38:	482c      	ldr	r0, [pc, #176]	; (8001dec <main+0x2cc>)
 8001d3a:	f008 fbe3 	bl	800a504 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-верх PB9
 8001d3e:	2108      	movs	r1, #8
 8001d40:	482a      	ldr	r0, [pc, #168]	; (8001dec <main+0x2cc>)
 8001d42:	f009 fd6d 	bl	800b820 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		// запаздывание CH3 относительно CH1 - это ширина импульса накачки, мощность
 8001d46:	210c      	movs	r1, #12
 8001d48:	4828      	ldr	r0, [pc, #160]	; (8001dec <main+0x2cc>)
 8001d4a:	f008 fbdb 	bl	800a504 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); 	// PA9 синхро�?мпульс - начало периода переключения ключей
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4826      	ldr	r0, [pc, #152]	; (8001dec <main+0x2cc>)
 8001d52:	f008 fbd7 	bl	800a504 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim7); // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <main+0x2d0>)
 8001d58:	f008 fa5c 	bl	800a214 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);// tim16 тактуется 1 MHz,  по условию if (htim16.Instance->CNT >10000)   будет плавно меняться мощность на одну ступеньку
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <main+0x2d4>)
 8001d5e:	f008 fa59 	bl	800a214 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17); // tim17 тактуется 10 MHz, по условию if (htim17.Instance->CNT > time_step*10)   будет работать скольжение по частоте
 8001d62:	4825      	ldr	r0, [pc, #148]	; (8001df8 <main+0x2d8>)
 8001d64:	f008 fa56 	bl	800a214 <HAL_TIM_Base_Start>

  // для запуска 256 замеров, от HRTIM_SCOUT / 2, будут перекрывать 4 периода
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4824      	ldr	r0, [pc, #144]	; (8001dfc <main+0x2dc>)
 8001d6c:	f008 fbca 	bl	800a504 <HAL_TIM_PWM_Start>

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);      // синхроимпульс для осцила, 6 тактов от таймера TIM1 отсчитывает
 8001d70:	2100      	movs	r1, #0
 8001d72:	4823      	ldr	r0, [pc, #140]	; (8001e00 <main+0x2e0>)
 8001d74:	f008 fbc6 	bl	800a504 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1,  ADC_SINGLE_ENDED );
 8001d78:	217f      	movs	r1, #127	; 0x7f
 8001d7a:	4822      	ldr	r0, [pc, #136]	; (8001e04 <main+0x2e4>)
 8001d7c:	f004 f98a 	bl	8006094 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2,  ADC_SINGLE_ENDED );
 8001d80:	217f      	movs	r1, #127	; 0x7f
 8001d82:	4821      	ldr	r0, [pc, #132]	; (8001e08 <main+0x2e8>)
 8001d84:	f004 f986 	bl	8006094 <HAL_ADCEx_Calibration_Start>
	uint32_t temp_length = LENGTH_SAMPLES; // 32 замера, по 16 в начале и в конце, будут отброшены
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	613b      	str	r3, [r7, #16]
    HAL_ADCEx_MultiModeStart_DMA(&hadc1, zamer_adc1_2, temp_length);
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	491e      	ldr	r1, [pc, #120]	; (8001e0c <main+0x2ec>)
 8001d92:	481c      	ldr	r0, [pc, #112]	; (8001e04 <main+0x2e4>)
 8001d94:	f004 f9e0 	bl	8006158 <HAL_ADCEx_MultiModeStart_DMA>
   // LL_ADC_REG_StopConversion(hadc1->Instance);  - это есть стоп АЦП произвольно по желанию, по тесту в любом месте
   // LL_ADC_REG_StartConversion(hadc1.Instance);  - это есть старт АЦП произвольно по желанию, если был остановлен

    size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <main+0x2f0>)
 8001d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001da0:	2300      	movs	r3, #0
 8001da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001da4:	e047      	b.n	8001e36 <main+0x316>
 8001da6:	bf00      	nop
 8001da8:	e000edfc 	.word	0xe000edfc
 8001dac:	e0001004 	.word	0xe0001004
 8001db0:	e0001000 	.word	0xe0001000
 8001db4:	20000610 	.word	0x20000610
 8001db8:	20012158 	.word	0x20012158
 8001dbc:	080151f0 	.word	0x080151f0
 8001dc0:	42800000 	.word	0x42800000
 8001dc4:	447a0000 	.word	0x447a0000
 8001dc8:	2000f6b0 	.word	0x2000f6b0
 8001dcc:	2000feb4 	.word	0x2000feb4
 8001dd0:	42c80000 	.word	0x42c80000
 8001dd4:	200106b8 	.word	0x200106b8
 8001dd8:	20010ebc 	.word	0x20010ebc
 8001ddc:	200116c0 	.word	0x200116c0
 8001de0:	20000028 	.word	0x20000028
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	200004ec 	.word	0x200004ec
 8001dec:	20011f44 	.word	0x20011f44
 8001df0:	20012074 	.word	0x20012074
 8001df4:	200120c0 	.word	0x200120c0
 8001df8:	2001210c 	.word	0x2001210c
 8001dfc:	20011f90 	.word	0x20011f90
 8001e00:	20011fdc 	.word	0x20011fdc
 8001e04:	200002cc 	.word	0x200002cc
 8001e08:	20000338 	.word	0x20000338
 8001e0c:	2000062c 	.word	0x2000062c
 8001e10:	2000662c 	.word	0x2000662c
		{
			data_adc1[ic] =0;
 8001e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e16:	4a8e      	ldr	r2, [pc, #568]	; (8002050 <main+0x530>)
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
			data_adc2[ic] =0;
 8001e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e24:	4a8b      	ldr	r2, [pc, #556]	; (8002054 <main+0x534>)
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001e30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e32:	3301      	adds	r3, #1
 8001e34:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e38:	4b87      	ldr	r3, [pc, #540]	; (8002058 <main+0x538>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbe9      	blt.n	8001e14 <main+0x2f4>
		}

	  // Select Callbacks functions called after Transfer complete and Transfer error
	  // Выберите функции Callbacks, вызываемые после завершения передачи и Ошибки передачи
	  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_CPLT_CB_ID, Mem_to_Mem_Complete);
 8001e40:	4a86      	ldr	r2, [pc, #536]	; (800205c <main+0x53c>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4886      	ldr	r0, [pc, #536]	; (8002060 <main+0x540>)
 8001e46:	f005 f8eb 	bl	8007020 <HAL_DMA_RegisterCallback>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8001e4a:	4986      	ldr	r1, [pc, #536]	; (8002064 <main+0x544>)
 8001e4c:	4a86      	ldr	r2, [pc, #536]	; (8002068 <main+0x548>)
 8001e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e52:	4883      	ldr	r0, [pc, #524]	; (8002060 <main+0x540>)
 8001e54:	f004 fefa 	bl	8006c4c <HAL_DMA_Start_IT>

	  //R_filter = 0.5857864376269; // для 512 замеров
	 // L_filter = 0.01;

	  freq_new = 25000;
 8001e58:	4b84      	ldr	r3, [pc, #528]	; (800206c <main+0x54c>)
 8001e5a:	4a85      	ldr	r2, [pc, #532]	; (8002070 <main+0x550>)
 8001e5c:	601a      	str	r2, [r3, #0]
	  old_freq_new = freq_new;
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <main+0x54c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a84      	ldr	r2, [pc, #528]	; (8002074 <main+0x554>)
 8001e64:	6013      	str	r3, [r2, #0]
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, adc1_int, 256, DAC_ALIGN_12B_R);

	  printf("INIT__xxx (); - executed  \n");
 8001e66:	4884      	ldr	r0, [pc, #528]	; (8002078 <main+0x558>)
 8001e68:	f00e fb08 	bl	801047c <puts>
  /* USER CODE BEGIN WHILE */

	  uint16_t usCRC16_main;
  while (1)
  {
	  if (cmd_set.flag_ON_TxData_cicle == true)// если надо, по флагу, вот тут будет включаться циклическая долбежка
 8001e6c:	4b83      	ldr	r3, [pc, #524]	; (800207c <main+0x55c>)
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d066      	beq.n	8001f42 <main+0x422>
	  {
                  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
		  	  	  // 25 mS  минимальный интервал между передачами, при котором минимум ошибок CRC
              	  //if (htim7.Instance->CNT >250) // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
              	  if ((htim7.Instance->CNT >250) & (flag_data_complit_for_Tx ==0))
 8001e74:	4b82      	ldr	r3, [pc, #520]	; (8002080 <main+0x560>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	2bfa      	cmp	r3, #250	; 0xfa
 8001e7c:	bf8c      	ite	hi
 8001e7e:	2301      	movhi	r3, #1
 8001e80:	2300      	movls	r3, #0
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <main+0x564>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4013      	ands	r3, r2
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d055      	beq.n	8001f46 <main+0x426>
              	  {
              		  htim7.Instance->CNT =0;
 8001e9a:	4b79      	ldr	r3, [pc, #484]	; (8002080 <main+0x560>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
              		  	send_buff_cicle[0] = MB_ADDRESS;
 8001ea2:	4b79      	ldr	r3, [pc, #484]	; (8002088 <main+0x568>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	701a      	strb	r2, [r3, #0]
						send_buff_cicle[1] = 4;  // заглушка-обманка
 8001ea8:	4b77      	ldr	r3, [pc, #476]	; (8002088 <main+0x568>)
 8001eaa:	2204      	movs	r2, #4
 8001eac:	705a      	strb	r2, [r3, #1]
						send_buff_cicle[2] = 80; // заглушка-обманка, типа длина данных
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <main+0x568>)
 8001eb0:	2250      	movs	r2, #80	; 0x50
 8001eb2:	709a      	strb	r2, [r3, #2]

						if ( cmd_set.flag_ON_scan_time == true)
 8001eb4:	4b71      	ldr	r3, [pc, #452]	; (800207c <main+0x55c>)
 8001eb6:	799b      	ldrb	r3, [r3, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d014      	beq.n	8001ee6 <main+0x3c6>
						{
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
								{ index_data_real_zamer = index_data_real_zamer +2; }
 8001ebc:	4b73      	ldr	r3, [pc, #460]	; (800208c <main+0x56c>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b71      	ldr	r3, [pc, #452]	; (800208c <main+0x56c>)
 8001ec6:	801a      	strh	r2, [r3, #0]
							if (index_data_real_zamer >1021)
 8001ec8:	4b70      	ldr	r3, [pc, #448]	; (800208c <main+0x56c>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d902      	bls.n	8001eda <main+0x3ba>
								{ index_data_real_zamer =0; }
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <main+0x56c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
							fun_data_time_podgotovka( &(send_buff_cicle[3]), index_data_real_zamer/*номер элемента массива замеров*/ );
 8001eda:	4b6c      	ldr	r3, [pc, #432]	; (800208c <main+0x56c>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	486b      	ldr	r0, [pc, #428]	; (8002090 <main+0x570>)
 8001ee2:	f001 f9cf 	bl	8003284 <fun_data_time_podgotovka>
						}

						if ( cmd_set.flag_ON_scan_freq == true)
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <main+0x55c>)
 8001ee8:	78db      	ldrb	r3, [r3, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <main+0x3de>
						{
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							fun_data_scan_freq_podgotovka( &(send_buff_cicle[3]), freq_tim1_float/*номер элемента массива замеров*/ );
 8001eee:	4b69      	ldr	r3, [pc, #420]	; (8002094 <main+0x574>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	4865      	ldr	r0, [pc, #404]	; (8002090 <main+0x570>)
 8001efa:	f001 fb75 	bl	80035e8 <fun_data_scan_freq_podgotovka>
						}

						usCRC16_main = HAL_CRC_Calculate(&hcrc, ( uint32_t *)(&send_buff_cicle), 83);//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
 8001efe:	2253      	movs	r2, #83	; 0x53
 8001f00:	4961      	ldr	r1, [pc, #388]	; (8002088 <main+0x568>)
 8001f02:	4865      	ldr	r0, [pc, #404]	; (8002098 <main+0x578>)
 8001f04:	f004 fc60 	bl	80067c8 <HAL_CRC_Calculate>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	81fb      	strh	r3, [r7, #14]
						send_buff_cicle[83] = ( UCHAR )( usCRC16_main & 0xFF );
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <main+0x568>)
 8001f12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
						send_buff_cicle[84] = ( UCHAR )( usCRC16_main >> 8 );
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <main+0x568>)
 8001f20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
						vMBPortSerialEnable( FALSE, TRUE );
 8001f24:	2101      	movs	r1, #1
 8001f26:	2000      	movs	r0, #0
 8001f28:	f00b ffc4 	bl	800deb4 <vMBPortSerialEnable>

						HAL_UART_Transmit_DMA(&huart3, send_buff_cicle, 85);
 8001f2c:	2255      	movs	r2, #85	; 0x55
 8001f2e:	4956      	ldr	r1, [pc, #344]	; (8002088 <main+0x568>)
 8001f30:	485a      	ldr	r0, [pc, #360]	; (800209c <main+0x57c>)
 8001f32:	f00a f85d 	bl	800bff0 <HAL_UART_Transmit_DMA>
						//if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							{ HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10); }
 8001f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f3a:	4859      	ldr	r0, [pc, #356]	; (80020a0 <main+0x580>)
 8001f3c:	f005 fb0a 	bl	8007554 <HAL_GPIO_TogglePin>
 8001f40:	e001      	b.n	8001f46 <main+0x426>
              	  }
	  }
	  else
	  {  eMBPoll(  ); } // Вызовите основной цикл опроса стека протоколов Modbus.
 8001f42:	f00b feb5 	bl	800dcb0 <eMBPoll>




	  // power_procent - меняется от 2 проц до 98 проц, и от этого сдвигаются фронты TIM1_OUT3,  TIM1_OUT1 - constanta
	  if (htim16.Instance->CNT >1000) // tim16 тактуется 1 MHz, нужен для плавного старта-стопа генерации
 8001f46:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <main+0x584>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f50:	f240 8115 	bls.w	800217e <main+0x65e>
	  {
		  htim16.Instance->CNT =0;
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <main+0x584>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
		  // синяя кнопка для стопа, если был запущен с модбуса
	      if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // нажата кнопка
 8001f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f60:	484f      	ldr	r0, [pc, #316]	; (80020a0 <main+0x580>)
 8001f62:	f005 fac7 	bl	80074f4 <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d11c      	bne.n	8001fa6 <main+0x486>
	      { 														// HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	    	  count_press_blue_btn ++;
 8001f6c:	4b4e      	ldr	r3, [pc, #312]	; (80020a8 <main+0x588>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <main+0x588>)
 8001f76:	701a      	strb	r2, [r3, #0]
	    	  if (count_press_blue_btn >5)
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <main+0x588>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d915      	bls.n	8001fac <main+0x48c>
	    	  {
	    		  count_press_blue_btn=5;
 8001f80:	4b49      	ldr	r3, [pc, #292]	; (80020a8 <main+0x588>)
 8001f82:	2205      	movs	r2, #5
 8001f84:	701a      	strb	r2, [r3, #0]
	    		  //cmd_set.cmd_flags =0;  // тотальный стоп
	    		  cmd_set.flag_ON_generation = false;
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <main+0x55c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	709a      	strb	r2, [r3, #2]
	    		  cmd_set.flag_ON_TxData_cicle = false;
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <main+0x55c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	711a      	strb	r2, [r3, #4]
	    		  cmd_set.flag_ON_scan_freq = false;
 8001f92:	4b3a      	ldr	r3, [pc, #232]	; (800207c <main+0x55c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	70da      	strb	r2, [r3, #3]
	    		  cmd_set.flag_ON_scan_time = false;
 8001f98:	4b38      	ldr	r3, [pc, #224]	; (800207c <main+0x55c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	719a      	strb	r2, [r3, #6]
	    		  cmd_set.flag_ON_autoTuning_freq = false;
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <main+0x55c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	715a      	strb	r2, [r3, #5]
 8001fa4:	e002      	b.n	8001fac <main+0x48c>
	    	  }
	      }
	      else
	      { count_press_blue_btn =0; } // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <main+0x588>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]


		  if (cmd_set.flag_ON_generation == true)// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <main+0x55c>)
 8001fae:	789b      	ldrb	r3, [r3, #2]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d042      	beq.n	800203a <main+0x51a>
	  		{
	  			if (step_power_procent > cmd_set.proc_pwr /*power_procent*/) {step_power_procent --;}
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <main+0x55c>)
 8001fb6:	895b      	ldrh	r3, [r3, #10]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <main+0x58c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d204      	bcs.n	8001fcc <main+0x4ac>
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	; (80020ac <main+0x58c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	4a38      	ldr	r2, [pc, #224]	; (80020ac <main+0x58c>)
 8001fca:	6013      	str	r3, [r2, #0]
	  			if (step_power_procent < cmd_set.proc_pwr /*power_procent*/) {step_power_procent ++;}
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <main+0x55c>)
 8001fce:	895b      	ldrh	r3, [r3, #10]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b36      	ldr	r3, [pc, #216]	; (80020ac <main+0x58c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d904      	bls.n	8001fe4 <main+0x4c4>
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <main+0x58c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	4a32      	ldr	r2, [pc, #200]	; (80020ac <main+0x58c>)
 8001fe2:	6013      	str	r3, [r2, #0]
	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <main+0x590>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <main+0x594>)
 8001fec:	6013      	str	r3, [r2, #0]
					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <main+0x594>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	bf8c      	ite	hi
 8001ff6:	2301      	movhi	r3, #1
 8001ff8:	2300      	movls	r3, #0
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <main+0x594>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b36      	cmp	r3, #54	; 0x36
 8002002:	bf94      	ite	ls
 8002004:	2301      	movls	r3, #1
 8002006:	2300      	movhi	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4013      	ands	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80b5 	beq.w	800217e <main+0x65e>
					{
						if (flag_generate_ON ==0)
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <main+0x598>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <main+0x50c>
							{ __HAL_TIM_MOE_ENABLE(&htim1); } // програмно восстанавливается флаг MOE для подключения выходов TIM1
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <main+0x590>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <main+0x590>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
						flag_generate_ON =255;
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <main+0x598>)
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	701a      	strb	r2, [r3, #0]
						flag_generate_OFF =0;
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <main+0x59c>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e0a1      	b.n	800217e <main+0x65e>
					}
	  		}
	  		else	// кнопка отпущена, СТОП
	  		{
				if (step_power_procent > 2)
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <main+0x58c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d93e      	bls.n	80020c0 <main+0x5a0>
					{step_power_procent --;}
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <main+0x58c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <main+0x58c>)
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e097      	b.n	800217e <main+0x65e>
 800204e:	bf00      	nop
 8002050:	2000262c 	.word	0x2000262c
 8002054:	2000462c 	.word	0x2000462c
 8002058:	2000662c 	.word	0x2000662c
 800205c:	0800321d 	.word	0x0800321d
 8002060:	2000048c 	.word	0x2000048c
 8002064:	2000062c 	.word	0x2000062c
 8002068:	2000162c 	.word	0x2000162c
 800206c:	2000f66c 	.word	0x2000f66c
 8002070:	46c35000 	.word	0x46c35000
 8002074:	2000f670 	.word	0x2000f670
 8002078:	08015200 	.word	0x08015200
 800207c:	20011ec8 	.word	0x20011ec8
 8002080:	20012074 	.word	0x20012074
 8002084:	20011ec6 	.word	0x20011ec6
 8002088:	20011edc 	.word	0x20011edc
 800208c:	20011ec4 	.word	0x20011ec4
 8002090:	20011edf 	.word	0x20011edf
 8002094:	2000f658 	.word	0x2000f658
 8002098:	20000468 	.word	0x20000468
 800209c:	20012278 	.word	0x20012278
 80020a0:	48000800 	.word	0x48000800
 80020a4:	200120c0 	.word	0x200120c0
 80020a8:	20000618 	.word	0x20000618
 80020ac:	20000010 	.word	0x20000010
 80020b0:	20011f44 	.word	0x20011f44
 80020b4:	20000614 	.word	0x20000614
 80020b8:	20000629 	.word	0x20000629
 80020bc:	20000628 	.word	0x20000628
				else
				{
					step_power_procent =2;
 80020c0:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <main+0x7b8>)
 80020c2:	2202      	movs	r2, #2
 80020c4:	601a      	str	r2, [r3, #0]
	  	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 80020c6:	4b85      	ldr	r3, [pc, #532]	; (80022dc <main+0x7bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	4a84      	ldr	r2, [pc, #528]	; (80022e0 <main+0x7c0>)
 80020ce:	6013      	str	r3, [r2, #0]
	  					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 80020d0:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <main+0x7c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	bf8c      	ite	hi
 80020d8:	2301      	movhi	r3, #1
 80020da:	2300      	movls	r3, #0
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b80      	ldr	r3, [pc, #512]	; (80022e0 <main+0x7c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b36      	cmp	r3, #54	; 0x36
 80020e4:	bf94      	ite	ls
 80020e6:	2301      	movls	r3, #1
 80020e8:	2300      	movhi	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4013      	ands	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d044      	beq.n	800217e <main+0x65e>
	  					{
							if (flag_generate_OFF ==0)
 80020f4:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <main+0x7c4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d13a      	bne.n	8002172 <main+0x652>
							{
								for(int i=0; i<100; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	e034      	b.n	800216c <main+0x64c>
								{
									if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	4875      	ldr	r0, [pc, #468]	; (80022dc <main+0x7bc>)
 8002106:	f008 fda3 	bl	800ac50 <HAL_TIM_GenerateEvent>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12a      	bne.n	8002166 <main+0x646>
									{
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 8002110:	2300      	movs	r3, #0
 8002112:	837b      	strh	r3, [r7, #26]
 8002114:	e01a      	b.n	800214c <main+0x62c>
											{
												data_adc1_Tx[ic] =0;
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	4a73      	ldr	r2, [pc, #460]	; (80022e8 <main+0x7c8>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
												data_adc2_Tx[ic] =0;
 8002124:	8b7b      	ldrh	r3, [r7, #26]
 8002126:	4a71      	ldr	r2, [pc, #452]	; (80022ec <main+0x7cc>)
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
												adc1_Tx[ic] =0;
 8002132:	8b7b      	ldrh	r3, [r7, #26]
 8002134:	4a6e      	ldr	r2, [pc, #440]	; (80022f0 <main+0x7d0>)
 8002136:	2100      	movs	r1, #0
 8002138:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
												adc2_Tx[ic] =0;
 800213c:	8b7b      	ldrh	r3, [r7, #26]
 800213e:	4a6d      	ldr	r2, [pc, #436]	; (80022f4 <main+0x7d4>)
 8002140:	2100      	movs	r1, #0
 8002142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 8002146:	8b7b      	ldrh	r3, [r7, #26]
 8002148:	3301      	adds	r3, #1
 800214a:	837b      	strh	r3, [r7, #26]
 800214c:	8b7a      	ldrh	r2, [r7, #26]
 800214e:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <main+0x7d8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0fd9      	lsrs	r1, r3, #31
 8002154:	440b      	add	r3, r1
 8002156:	105b      	asrs	r3, r3, #1
 8002158:	429a      	cmp	r2, r3
 800215a:	dbdc      	blt.n	8002116 <main+0x5f6>
											}
										index_data_real_zamer =800; // подготовка для замера
 800215c:	4b67      	ldr	r3, [pc, #412]	; (80022fc <main+0x7dc>)
 800215e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002162:	801a      	strh	r2, [r3, #0]
										break;
 8002164:	e005      	b.n	8002172 <main+0x652>
								for(int i=0; i<100; i++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b63      	cmp	r3, #99	; 0x63
 8002170:	ddc7      	ble.n	8002102 <main+0x5e2>
									}// if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
								} // for(int i=0; i<100; i++)
							} // if (flag_generate_OFF ==0)
							flag_generate_OFF =255;
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <main+0x7c4>)
 8002174:	22ff      	movs	r2, #255	; 0xff
 8002176:	701a      	strb	r2, [r3, #0]
							flag_generate_ON =0;
 8002178:	4b61      	ldr	r3, [pc, #388]	; (8002300 <main+0x7e0>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
	  					}
	  	*/
	  					// ======   А ЭТО СТОП  СТОП  ====== ======   А ЭТО START  START  ======


	  htim1.Instance->CCR1 = ccr1_tim1; // tim1->CCR1 == 63   всегда без вариантов
 800217e:	4b57      	ldr	r3, [pc, #348]	; (80022dc <main+0x7bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a60      	ldr	r2, [pc, #384]	; (8002304 <main+0x7e4>)
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
	  ccr3_tim1 = (64 * step_power_procent ) / 100;
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <main+0x7b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	4a5e      	ldr	r2, [pc, #376]	; (8002308 <main+0x7e8>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	4a5d      	ldr	r2, [pc, #372]	; (800230c <main+0x7ec>)
 8002198:	6013      	str	r3, [r2, #0]
		  if(ccr3_tim1 >62) {ccr3_tim1 =62;}// 96.88%   =>   64*96.88/100=62	 deadtime фиксировано ==85 тиков от 170_МГц, Меньшая мощность будет наползать на deadtime
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <main+0x7ec>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b3e      	cmp	r3, #62	; 0x3e
 80021a0:	d902      	bls.n	80021a8 <main+0x688>
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <main+0x7ec>)
 80021a4:	223e      	movs	r2, #62	; 0x3e
 80021a6:	601a      	str	r2, [r3, #0]
		  if(ccr3_tim1 <2) {ccr3_tim1 =2;}  // 3.125%   =>    64* 3.125/100=2	 2 тика от TIM1  == 90(тиков от 170_МГц при 30кГц) == 106(тиков от 170_МГц при 25кГц) == 186(тиков от 170_МГц при 14,5кГц)
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <main+0x7ec>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d802      	bhi.n	80021b6 <main+0x696>
 80021b0:	4b56      	ldr	r3, [pc, #344]	; (800230c <main+0x7ec>)
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
	  ccr4_tim1 = 64 + ccr3_tim1;
 80021b6:	4b55      	ldr	r3, [pc, #340]	; (800230c <main+0x7ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3340      	adds	r3, #64	; 0x40
 80021bc:	4a54      	ldr	r2, [pc, #336]	; (8002310 <main+0x7f0>)
 80021be:	6013      	str	r3, [r2, #0]
		  if(ccr4_tim1 >125) {ccr4_tim1 =125;}
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <main+0x7f0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b7d      	cmp	r3, #125	; 0x7d
 80021c6:	d902      	bls.n	80021ce <main+0x6ae>
 80021c8:	4b51      	ldr	r3, [pc, #324]	; (8002310 <main+0x7f0>)
 80021ca:	227d      	movs	r2, #125	; 0x7d
 80021cc:	601a      	str	r2, [r3, #0]
		  if(ccr4_tim1 <66) {ccr4_tim1 =66;}
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <main+0x7f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b41      	cmp	r3, #65	; 0x41
 80021d4:	d802      	bhi.n	80021dc <main+0x6bc>
 80021d6:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <main+0x7f0>)
 80021d8:	2242      	movs	r2, #66	; 0x42
 80021da:	601a      	str	r2, [r3, #0]
	  htim1.Instance->CCR3 = ccr3_tim1; //
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <main+0x7bc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a4a      	ldr	r2, [pc, #296]	; (800230c <main+0x7ec>)
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance->CCR4 = ccr4_tim1; //  power_procent
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <main+0x7bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a49      	ldr	r2, [pc, #292]	; (8002310 <main+0x7f0>)
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40

	  // ========================== а вот ОНО, - новая частота  ============================
	  // hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
	  if(hrtim_period_new >1000) // == 43 kHz    hrtim_period_new=2930  == 14505 Hz
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <main+0x7f4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f8:	d904      	bls.n	8002204 <main+0x6e4>
		  {  hhrtim1.Instance->sMasterRegs.MPER = hrtim_period_new; }
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <main+0x7f8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a45      	ldr	r2, [pc, #276]	; (8002314 <main+0x7f4>)
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	615a      	str	r2, [r3, #20]
	  freq_tim1 = 5440000000 / (hhrtim1.Instance->sMasterRegs.MPER) / 128; // это есть выходная частота, tim1->ARR == 127  всегда ==> делитель=128
 8002204:	4b44      	ldr	r3, [pc, #272]	; (8002318 <main+0x7f8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002214:	a12e      	add	r1, pc, #184	; (adr r1, 80022d0 <main+0x7b0>)
 8002216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800221a:	f7fe fd5d 	bl	8000cd8 <__aeabi_ldivmod>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	2b00      	cmp	r3, #0
 8002224:	da05      	bge.n	8002232 <main+0x712>
 8002226:	f112 087f 	adds.w	r8, r2, #127	; 0x7f
 800222a:	f143 0900 	adc.w	r9, r3, #0
 800222e:	4642      	mov	r2, r8
 8002230:	464b      	mov	r3, r9
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	09d0      	lsrs	r0, r2, #7
 800223c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002240:	11d9      	asrs	r1, r3, #7
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <main+0x7fc>)
 8002248:	601a      	str	r2, [r3, #0]
	  freq_tim1_float = (float)freq_tim1;
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <main+0x7fc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <main+0x800>)
 8002258:	edc3 7a00 	vstr	s15, [r3]

	  if ((cmd_set.flag_ON_scan_time == true) & (index_data_real_zamer >1000))
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <main+0x804>)
 800225e:	799a      	ldrb	r2, [r3, #6]
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <main+0x7dc>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002268:	bf8c      	ite	hi
 800226a:	2301      	movhi	r3, #1
 800226c:	2300      	movls	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4013      	ands	r3, r2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <main+0x75e>
	  	  { flag_data_complit_for_Tx = 255; }
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <main+0x808>)
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	801a      	strh	r2, [r3, #0]

	  if (flag_end_FFT ==0) // flag_complit_ADC ==1 означает что все замеры сделаны
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <main+0x80c>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8476 	bne.w	8002b74 <main+0x1054>
	  {
		  flag_end_FFT =1;
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <main+0x80c>)
 800228a:	2201      	movs	r2, #1
 800228c:	801a      	strh	r2, [r3, #0]
		//count_tic_adc_finish = DWT_CYCCNT;//смотрим сколько натикало, поскольку при старте  DWT_CYCCNT==0, то все просто
		//count_tic_adc_float_mks = (float)count_tic_adc_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 82-86 мкс
		// обнуляем счетчик тиков, для подсчета времени работы прг, и одновременно уже будет идти 256 замеров АЦП
			count_tic_ALL_finish = DWT_CYCCNT;
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <main+0x810>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a28      	ldr	r2, [pc, #160]	; (8002334 <main+0x814>)
 8002294:	6013      	str	r3, [r2, #0]
			count_tic_ALL_float_mks = (float)count_tic_ALL_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 1320 мкс 512 zamerov;
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <main+0x814>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002338 <main+0x818>
 80022a6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <main+0x81c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <main+0x820>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
		 DWT_CYCCNT =0;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <main+0x810>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]



//		for (uint16_t ic =32; ic < LENGTH_OTSOS; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 80022c6:	2300      	movs	r3, #0
 80022c8:	833b      	strh	r3, [r7, #24]
 80022ca:	e11f      	b.n	800250c <main+0x9ec>
 80022cc:	f3af 8000 	nop.w
 80022d0:	443fd000 	.word	0x443fd000
 80022d4:	00000001 	.word	0x00000001
 80022d8:	20000010 	.word	0x20000010
 80022dc:	20011f44 	.word	0x20011f44
 80022e0:	20000614 	.word	0x20000614
 80022e4:	20000628 	.word	0x20000628
 80022e8:	20007630 	.word	0x20007630
 80022ec:	20008630 	.word	0x20008630
 80022f0:	20006630 	.word	0x20006630
 80022f4:	20006e30 	.word	0x20006e30
 80022f8:	2000662c 	.word	0x2000662c
 80022fc:	20011ec4 	.word	0x20011ec4
 8002300:	20000629 	.word	0x20000629
 8002304:	20000004 	.word	0x20000004
 8002308:	51eb851f 	.word	0x51eb851f
 800230c:	20000008 	.word	0x20000008
 8002310:	2000000c 	.word	0x2000000c
 8002314:	2000001c 	.word	0x2000001c
 8002318:	200004ec 	.word	0x200004ec
 800231c:	2000f654 	.word	0x2000f654
 8002320:	2000f658 	.word	0x2000f658
 8002324:	20011ec8 	.word	0x20011ec8
 8002328:	20011ec6 	.word	0x20011ec6
 800232c:	2000061a 	.word	0x2000061a
 8002330:	e0001004 	.word	0xe0001004
 8002334:	20000620 	.word	0x20000620
 8002338:	49742400 	.word	0x49742400
 800233c:	20000030 	.word	0x20000030
 8002340:	20000624 	.word	0x20000624
				//X_filter += V_filter - X_filter * L_filter;
				// ===============================================================
				// X_filter_1 += (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] & 0x0000FFFF);
				// if (zamer_tim20[ic] >50) { X_filter_1 += 1; }
				if(flag_data_complit_for_Tx>0) { adc1_Tx[ic] = zamer_adc_dma[ic] & 0x0000FFFF; }
 8002344:	4ba6      	ldr	r3, [pc, #664]	; (80025e0 <main+0xac0>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <main+0x83e>
 800234c:	8b3b      	ldrh	r3, [r7, #24]
 800234e:	4aa5      	ldr	r2, [pc, #660]	; (80025e4 <main+0xac4>)
 8002350:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002354:	8b3b      	ldrh	r3, [r7, #24]
 8002356:	b291      	uxth	r1, r2
 8002358:	4aa3      	ldr	r2, [pc, #652]	; (80025e8 <main+0xac8>)
 800235a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_1 += (float) (zamer_adc_dma[ic] & 0x0000FFFF);
 800235e:	8b3b      	ldrh	r3, [r7, #24]
 8002360:	4aa0      	ldr	r2, [pc, #640]	; (80025e4 <main+0xac4>)
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	b29b      	uxth	r3, r3
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002370:	4b9e      	ldr	r3, [pc, #632]	; (80025ec <main+0xacc>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	4b9c      	ldr	r3, [pc, #624]	; (80025ec <main+0xacc>)
 800237c:	edc3 7a00 	vstr	s15, [r3]
				V_filter_1 -= X_filter_1 * (R_filter);
 8002380:	4b9b      	ldr	r3, [pc, #620]	; (80025f0 <main+0xad0>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	4b99      	ldr	r3, [pc, #612]	; (80025ec <main+0xacc>)
 8002388:	edd3 6a00 	vldr	s13, [r3]
 800238c:	4b99      	ldr	r3, [pc, #612]	; (80025f4 <main+0xad4>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239a:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <main+0xad0>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
				X_filter_1 += V_filter_1 - X_filter_1 * L_filter;
 80023a0:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <main+0xad0>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	4b91      	ldr	r3, [pc, #580]	; (80025ec <main+0xacc>)
 80023a8:	edd3 6a00 	vldr	s13, [r3]
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <main+0xad8>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ba:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <main+0xacc>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c4:	4b89      	ldr	r3, [pc, #548]	; (80025ec <main+0xacc>)
 80023c6:	edc3 7a00 	vstr	s15, [r3]
				filter_adc1[ic] = X_filter_1;
 80023ca:	8b3b      	ldrh	r3, [r7, #24]
 80023cc:	4a87      	ldr	r2, [pc, #540]	; (80025ec <main+0xacc>)
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	498a      	ldr	r1, [pc, #552]	; (80025fc <main+0xadc>)
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	601a      	str	r2, [r3, #0]
				data_adc1[2*ic] = 0.001 * X_filter_1;
 80023d8:	4b84      	ldr	r3, [pc, #528]	; (80025ec <main+0xacc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8db 	bl	8000598 <__aeabi_f2d>
 80023e2:	a37d      	add	r3, pc, #500	; (adr r3, 80025d8 <main+0xab8>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fe f92e 	bl	8000648 <__aeabi_dmul>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	8b3b      	ldrh	r3, [r7, #24]
 80023f6:	005c      	lsls	r4, r3, #1
 80023f8:	f7fe fc1e 	bl	8000c38 <__aeabi_d2f>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4980      	ldr	r1, [pc, #512]	; (8002600 <main+0xae0>)
 8002400:	00a3      	lsls	r3, r4, #2
 8002402:	440b      	add	r3, r1
 8002404:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc1_Tx[ic] = data_adc1[2*ic]; }
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <main+0xac0>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <main+0x904>
 800240e:	8b3b      	ldrh	r3, [r7, #24]
 8002410:	005a      	lsls	r2, r3, #1
 8002412:	8b3b      	ldrh	r3, [r7, #24]
 8002414:	497a      	ldr	r1, [pc, #488]	; (8002600 <main+0xae0>)
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	440a      	add	r2, r1
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4979      	ldr	r1, [pc, #484]	; (8002604 <main+0xae4>)
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	601a      	str	r2, [r3, #0]
				//data_adc1[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*(ic-32+1)] =0;
				// ==================================================================
				// X_filter_2 += (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] >>16);
				if(flag_data_complit_for_Tx>0) { adc2_Tx[ic] = (zamer_adc_dma[ic] >>16); }
 8002424:	4b6e      	ldr	r3, [pc, #440]	; (80025e0 <main+0xac0>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <main+0x920>
 800242c:	8b3b      	ldrh	r3, [r7, #24]
 800242e:	4a6d      	ldr	r2, [pc, #436]	; (80025e4 <main+0xac4>)
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	0c1a      	lsrs	r2, r3, #16
 8002436:	8b3b      	ldrh	r3, [r7, #24]
 8002438:	b291      	uxth	r1, r2
 800243a:	4a73      	ldr	r2, [pc, #460]	; (8002608 <main+0xae8>)
 800243c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_2 += (float) ((zamer_adc_dma[ic] >>16));
 8002440:	8b3b      	ldrh	r3, [r7, #24]
 8002442:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <main+0xac4>)
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <main+0xaec>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	4b6b      	ldr	r3, [pc, #428]	; (800260c <main+0xaec>)
 800245e:	edc3 7a00 	vstr	s15, [r3]
				V_filter_2 -= X_filter_2 * (R_filter);
 8002462:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <main+0xaf0>)
 8002464:	ed93 7a00 	vldr	s14, [r3]
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <main+0xaec>)
 800246a:	edd3 6a00 	vldr	s13, [r3]
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <main+0xad4>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247c:	4b64      	ldr	r3, [pc, #400]	; (8002610 <main+0xaf0>)
 800247e:	edc3 7a00 	vstr	s15, [r3]
				X_filter_2 += V_filter_2 - X_filter_2 * L_filter;
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <main+0xaf0>)
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	4b60      	ldr	r3, [pc, #384]	; (800260c <main+0xaec>)
 800248a:	edd3 6a00 	vldr	s13, [r3]
 800248e:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <main+0xad8>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800249c:	4b5b      	ldr	r3, [pc, #364]	; (800260c <main+0xaec>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a6:	4b59      	ldr	r3, [pc, #356]	; (800260c <main+0xaec>)
 80024a8:	edc3 7a00 	vstr	s15, [r3]
				filter_adc2[ic] = X_filter_2;
 80024ac:	8b3b      	ldrh	r3, [r7, #24]
 80024ae:	4a57      	ldr	r2, [pc, #348]	; (800260c <main+0xaec>)
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4958      	ldr	r1, [pc, #352]	; (8002614 <main+0xaf4>)
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	601a      	str	r2, [r3, #0]
				data_adc2[2*ic] = 0.001 * X_filter_2;
 80024ba:	4b54      	ldr	r3, [pc, #336]	; (800260c <main+0xaec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f86a 	bl	8000598 <__aeabi_f2d>
 80024c4:	a344      	add	r3, pc, #272	; (adr r3, 80025d8 <main+0xab8>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f8bd 	bl	8000648 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	8b3b      	ldrh	r3, [r7, #24]
 80024d8:	005c      	lsls	r4, r3, #1
 80024da:	f7fe fbad 	bl	8000c38 <__aeabi_d2f>
 80024de:	4602      	mov	r2, r0
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <main+0xaf8>)
 80024e2:	00a3      	lsls	r3, r4, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc2_Tx[ic] = data_adc2[2*ic]; }
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <main+0xac0>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <main+0x9e6>
 80024f0:	8b3b      	ldrh	r3, [r7, #24]
 80024f2:	005a      	lsls	r2, r3, #1
 80024f4:	8b3b      	ldrh	r3, [r7, #24]
 80024f6:	4948      	ldr	r1, [pc, #288]	; (8002618 <main+0xaf8>)
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	440a      	add	r2, r1
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	4947      	ldr	r1, [pc, #284]	; (800261c <main+0xafc>)
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	601a      	str	r2, [r3, #0]
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 8002506:	8b3b      	ldrh	r3, [r7, #24]
 8002508:	3301      	adds	r3, #1
 800250a:	833b      	strh	r3, [r7, #24]
 800250c:	8b3b      	ldrh	r3, [r7, #24]
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002512:	f4ff af17 	bcc.w	8002344 <main+0x824>
				//data_adc2[2*(ic-32)] = X_filter_2;
				//data_adc2[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*(ic-32+1)] =0;
			}

			if(flag_data_complit_for_Tx>0)
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <main+0xac0>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <main+0xa0a>
				{
					index_data_real_zamer =0;
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <main+0xb00>)
 8002520:	2200      	movs	r2, #0
 8002522:	801a      	strh	r2, [r3, #0]
					flag_data_complit_for_Tx =0;
 8002524:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <main+0xac0>)
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]
//					for (uint16_t iv =0; iv < 16; iv++)
//					{ data_adc1[32*iv + ic] = 0; }
//				}
//			}

			flag_end_FFT =2; // такой флаг разрешает остановить АЦП и перекинуть массив данных, пока тут дорасчитываем до конца
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <main+0xb04>)
 800252c:	2202      	movs	r2, #2
 800252e:	801a      	strh	r2, [r3, #0]
							// перекид данных занимает 41мкс, и произойдет только при полном окончании N(512) замеров
			count_tic_FFT_start= DWT_CYCCNT;
 8002530:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <main+0xb08>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3d      	ldr	r2, [pc, #244]	; (800262c <main+0xb0c>)
 8002536:	6013      	str	r3, [r2, #0]
		  // Process the data through the CFFT/CIFFT module
			if (fft_N ==256)
 8002538:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <main+0xb10>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002540:	d114      	bne.n	800256c <main+0xa4c>
			{
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc1, ifftFlag, doBitReverse);//в реале == 361мкс(256 sampl)
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <main+0xb14>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <main+0xb18>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	492c      	ldr	r1, [pc, #176]	; (8002600 <main+0xae0>)
 8002550:	483a      	ldr	r0, [pc, #232]	; (800263c <main+0xb1c>)
 8002552:	f00c fa1b 	bl	800e98c <arm_cfft_f32>
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc2, ifftFlag, doBitReverse);
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <main+0xb14>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <main+0xb18>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	492d      	ldr	r1, [pc, #180]	; (8002618 <main+0xaf8>)
 8002564:	4835      	ldr	r0, [pc, #212]	; (800263c <main+0xb1c>)
 8002566:	f00c fa11 	bl	800e98c <arm_cfft_f32>
 800256a:	e0a0      	b.n	80026ae <main+0xb8e>
			}
			else
			{
				if (fft_N ==512)
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <main+0xb10>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d114      	bne.n	80025a0 <main+0xa80>
				{
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc1, ifftFlag, doBitReverse);//в реале == 618мкс(512 sampl)
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <main+0xb14>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <main+0xb18>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	491f      	ldr	r1, [pc, #124]	; (8002600 <main+0xae0>)
 8002584:	482e      	ldr	r0, [pc, #184]	; (8002640 <main+0xb20>)
 8002586:	f00c fa01 	bl	800e98c <arm_cfft_f32>
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc2, ifftFlag, doBitReverse);
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <main+0xb14>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <main+0xb18>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4920      	ldr	r1, [pc, #128]	; (8002618 <main+0xaf8>)
 8002598:	4829      	ldr	r0, [pc, #164]	; (8002640 <main+0xb20>)
 800259a:	f00c f9f7 	bl	800e98c <arm_cfft_f32>
 800259e:	e086      	b.n	80026ae <main+0xb8e>
				}
				else
				{
					if (fft_N ==1024)
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <main+0xb10>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d14e      	bne.n	8002648 <main+0xb28>
					{
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(1024 sampl)
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <main+0xb14>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <main+0xb18>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4912      	ldr	r1, [pc, #72]	; (8002600 <main+0xae0>)
 80025b8:	4822      	ldr	r0, [pc, #136]	; (8002644 <main+0xb24>)
 80025ba:	f00c f9e7 	bl	800e98c <arm_cfft_f32>
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc2, ifftFlag, doBitReverse);
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <main+0xb14>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <main+0xb18>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4913      	ldr	r1, [pc, #76]	; (8002618 <main+0xaf8>)
 80025cc:	481d      	ldr	r0, [pc, #116]	; (8002644 <main+0xb24>)
 80025ce:	f00c f9dd 	bl	800e98c <arm_cfft_f32>
 80025d2:	e06c      	b.n	80026ae <main+0xb8e>
 80025d4:	f3af 8000 	nop.w
 80025d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025dc:	3f50624d 	.word	0x3f50624d
 80025e0:	20011ec6 	.word	0x20011ec6
 80025e4:	2000162c 	.word	0x2000162c
 80025e8:	20006630 	.word	0x20006630
 80025ec:	2000f674 	.word	0x2000f674
 80025f0:	2000f678 	.word	0x2000f678
 80025f4:	20000020 	.word	0x20000020
 80025f8:	20000024 	.word	0x20000024
 80025fc:	20009630 	.word	0x20009630
 8002600:	2000262c 	.word	0x2000262c
 8002604:	20007630 	.word	0x20007630
 8002608:	20006e30 	.word	0x20006e30
 800260c:	2000f67c 	.word	0x2000f67c
 8002610:	2000f680 	.word	0x2000f680
 8002614:	2000a630 	.word	0x2000a630
 8002618:	2000462c 	.word	0x2000462c
 800261c:	20008630 	.word	0x20008630
 8002620:	20011ec4 	.word	0x20011ec4
 8002624:	2000061a 	.word	0x2000061a
 8002628:	e0001004 	.word	0xe0001004
 800262c:	2000061c 	.word	0x2000061c
 8002630:	20000018 	.word	0x20000018
 8002634:	2000f650 	.word	0x2000f650
 8002638:	20000014 	.word	0x20000014
 800263c:	08015618 	.word	0x08015618
 8002640:	08015638 	.word	0x08015638
 8002644:	080155f8 	.word	0x080155f8
					}
					else
					{
						if (fft_N ==2048)
 8002648:	4b6b      	ldr	r3, [pc, #428]	; (80027f8 <main+0xcd8>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002650:	d114      	bne.n	800267c <main+0xb5c>
						{
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(2048 sampl)
 8002652:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <main+0xcdc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b69      	ldr	r3, [pc, #420]	; (8002800 <main+0xce0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4969      	ldr	r1, [pc, #420]	; (8002804 <main+0xce4>)
 8002660:	4869      	ldr	r0, [pc, #420]	; (8002808 <main+0xce8>)
 8002662:	f00c f993 	bl	800e98c <arm_cfft_f32>
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc2, ifftFlag, doBitReverse);
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <main+0xcdc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	4b64      	ldr	r3, [pc, #400]	; (8002800 <main+0xce0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4966      	ldr	r1, [pc, #408]	; (800280c <main+0xcec>)
 8002674:	4864      	ldr	r0, [pc, #400]	; (8002808 <main+0xce8>)
 8002676:	f00c f989 	bl	800e98c <arm_cfft_f32>
 800267a:	e018      	b.n	80026ae <main+0xb8e>
						}
						else
						{
							if (fft_N ==4096)
 800267c:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <main+0xcd8>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d113      	bne.n	80026ae <main+0xb8e>
							{
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc1, ifftFlag, doBitReverse);//в реале == 5461мкс(4096 sampl)
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <main+0xcdc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <main+0xce0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	495c      	ldr	r1, [pc, #368]	; (8002804 <main+0xce4>)
 8002694:	485e      	ldr	r0, [pc, #376]	; (8002810 <main+0xcf0>)
 8002696:	f00c f979 	bl	800e98c <arm_cfft_f32>
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc2, ifftFlag, doBitReverse);
 800269a:	4b58      	ldr	r3, [pc, #352]	; (80027fc <main+0xcdc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <main+0xce0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4959      	ldr	r1, [pc, #356]	; (800280c <main+0xcec>)
 80026a8:	4859      	ldr	r0, [pc, #356]	; (8002810 <main+0xcf0>)
 80026aa:	f00c f96f 	bl	800e98c <arm_cfft_f32>
					} // if (fft_N ==1024)
				} // if (fft_N ==512)
			} // if (fft_N ==256)

		  // Process the data through the Complex Magnitude Module for  calculating the magnitude at each bin
		  fftSize = fft_N /64 +10; // 10 такое количество гармоник достаточно, для массива 512 без нулей
 80026ae:	4b52      	ldr	r3, [pc, #328]	; (80027f8 <main+0xcd8>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	330a      	adds	r3, #10
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <main+0xcf4>)
 80026bc:	601a      	str	r2, [r3, #0]
		  //ввремя вычисления Две магнитуды, в реале == 97мкс(fftSize==256) == 37мкс(fftSize==96)
		  arm_cmplx_mag_f32(data_adc1, arr1_Output_f32, fftSize);
 80026be:	4b55      	ldr	r3, [pc, #340]	; (8002814 <main+0xcf4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4954      	ldr	r1, [pc, #336]	; (8002818 <main+0xcf8>)
 80026c6:	484f      	ldr	r0, [pc, #316]	; (8002804 <main+0xce4>)
 80026c8:	f00c f9f8 	bl	800eabc <arm_cmplx_mag_f32>
		  arm_cmplx_mag_f32(data_adc2, arr2_Output_f32, fftSize);
 80026cc:	4b51      	ldr	r3, [pc, #324]	; (8002814 <main+0xcf4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4952      	ldr	r1, [pc, #328]	; (800281c <main+0xcfc>)
 80026d4:	484d      	ldr	r0, [pc, #308]	; (800280c <main+0xcec>)
 80026d6:	f00c f9f1 	bl	800eabc <arm_cmplx_mag_f32>
		  arr1_phase_Output_8_f32 = atan2f(data_adc1[17], data_adc1[16]);
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <main+0xce4>)
 80026dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026e0:	4b48      	ldr	r3, [pc, #288]	; (8002804 <main+0xce4>)
 80026e2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80026e6:	eef0 0a47 	vmov.f32	s1, s14
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	f011 fca5 	bl	801403c <atan2f>
 80026f2:	eef0 7a40 	vmov.f32	s15, s0
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <main+0xd00>)
 80026f8:	edc3 7a00 	vstr	s15, [r3]
		  	  while(arr1_phase_Output_8_f32 > M_PI ) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 - M_PI; }
 80026fc:	e012      	b.n	8002724 <main+0xc04>
 80026fe:	4b48      	ldr	r3, [pc, #288]	; (8002820 <main+0xd00>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd ff48 	bl	8000598 <__aeabi_f2d>
 8002708:	a335      	add	r3, pc, #212	; (adr r3, 80027e0 <main+0xcc0>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd fde3 	bl	80002d8 <__aeabi_dsub>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7fe fa8d 	bl	8000c38 <__aeabi_d2f>
 800271e:	4603      	mov	r3, r0
 8002720:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <main+0xd00>)
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <main+0xd00>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd ff35 	bl	8000598 <__aeabi_f2d>
 800272e:	a32c      	add	r3, pc, #176	; (adr r3, 80027e0 <main+0xcc0>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fe fa18 	bl	8000b68 <__aeabi_dcmpgt>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1df      	bne.n	80026fe <main+0xbde>
		      while(arr1_phase_Output_8_f32 < -M_PI) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 + M_PI; }
 800273e:	e012      	b.n	8002766 <main+0xc46>
 8002740:	4b37      	ldr	r3, [pc, #220]	; (8002820 <main+0xd00>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff27 	bl	8000598 <__aeabi_f2d>
 800274a:	a325      	add	r3, pc, #148	; (adr r3, 80027e0 <main+0xcc0>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd fdc4 	bl	80002dc <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa6c 	bl	8000c38 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <main+0xd00>)
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <main+0xd00>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd ff14 	bl	8000598 <__aeabi_f2d>
 8002770:	a31d      	add	r3, pc, #116	; (adr r3, 80027e8 <main+0xcc8>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fe f9d9 	bl	8000b2c <__aeabi_dcmplt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1df      	bne.n	8002740 <main+0xc20>
		  arr2_phase_Output_8_f32 = atan2f(data_adc2[17], data_adc2[16]);
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <main+0xcec>)
 8002782:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <main+0xcec>)
 8002788:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800278c:	eef0 0a47 	vmov.f32	s1, s14
 8002790:	eeb0 0a67 	vmov.f32	s0, s15
 8002794:	f011 fc52 	bl	801403c <atan2f>
 8002798:	eef0 7a40 	vmov.f32	s15, s0
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <main+0xd04>)
 800279e:	edc3 7a00 	vstr	s15, [r3]
			  while(arr2_phase_Output_8_f32 > 0 ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 - 2*M_PI; }
 80027a2:	e012      	b.n	80027ca <main+0xcaa>
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <main+0xd04>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fef5 	bl	8000598 <__aeabi_f2d>
 80027ae:	a310      	add	r3, pc, #64	; (adr r3, 80027f0 <main+0xcd0>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fd90 	bl	80002d8 <__aeabi_dsub>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe fa3a 	bl	8000c38 <__aeabi_d2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <main+0xd04>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <main+0xd04>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	dce4      	bgt.n	80027a4 <main+0xc84>
			  while(arr2_phase_Output_8_f32 < -2*M_PI ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 + 2*M_PI; }
 80027da:	e038      	b.n	800284e <main+0xd2e>
 80027dc:	f3af 8000 	nop.w
 80027e0:	54442d18 	.word	0x54442d18
 80027e4:	400921fb 	.word	0x400921fb
 80027e8:	54442d18 	.word	0x54442d18
 80027ec:	c00921fb 	.word	0xc00921fb
 80027f0:	54442d18 	.word	0x54442d18
 80027f4:	401921fb 	.word	0x401921fb
 80027f8:	20000018 	.word	0x20000018
 80027fc:	2000f650 	.word	0x2000f650
 8002800:	20000014 	.word	0x20000014
 8002804:	2000262c 	.word	0x2000262c
 8002808:	08015608 	.word	0x08015608
 800280c:	2000462c 	.word	0x2000462c
 8002810:	08015628 	.word	0x08015628
 8002814:	2000f64c 	.word	0x2000f64c
 8002818:	2000b630 	.word	0x2000b630
 800281c:	2000d630 	.word	0x2000d630
 8002820:	2000f630 	.word	0x2000f630
 8002824:	2000f634 	.word	0x2000f634
 8002828:	4bb3      	ldr	r3, [pc, #716]	; (8002af8 <main+0xfd8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	a3ad      	add	r3, pc, #692	; (adr r3, 8002ae8 <main+0xfc8>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd fd50 	bl	80002dc <__adddf3>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f9f8 	bl	8000c38 <__aeabi_d2f>
 8002848:	4603      	mov	r3, r0
 800284a:	4aab      	ldr	r2, [pc, #684]	; (8002af8 <main+0xfd8>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4baa      	ldr	r3, [pc, #680]	; (8002af8 <main+0xfd8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	a3a5      	add	r3, pc, #660	; (adr r3, 8002af0 <main+0xfd0>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fe f965 	bl	8000b2c <__aeabi_dcmplt>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1df      	bne.n	8002828 <main+0xd08>

			  shift_phase_I8_U8_f32 = arr1_phase_Output_8_f32 - arr2_phase_Output_8_f32;
 8002868:	4ba4      	ldr	r3, [pc, #656]	; (8002afc <main+0xfdc>)
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	4ba2      	ldr	r3, [pc, #648]	; (8002af8 <main+0xfd8>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002878:	4ba1      	ldr	r3, [pc, #644]	; (8002b00 <main+0xfe0>)
 800287a:	edc3 7a00 	vstr	s15, [r3]
//			  	  while(shift_phase_I8_U8_f32 > M_PI/2 ) {shift_phase_I8_U8_f32 = shift_phase_I8_U8_f32 - M_PI/2; }
//			  	  while(shift_phase_I8_U8_f32 < -M_PI/2 ) {shift_phase_I8_U8_f32 = shift_phase_I8_U8_f32 + M_PI/2; }
		  cos_phase_8_f32 = arm_cos_f32(shift_phase_I8_U8_f32);
 800287e:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <main+0xfe0>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	eeb0 0a67 	vmov.f32	s0, s15
 8002888:	f00c fa3c 	bl	800ed04 <arm_cos_f32>
 800288c:	eef0 7a40 	vmov.f32	s15, s0
 8002890:	4b9c      	ldr	r3, [pc, #624]	; (8002b04 <main+0xfe4>)
 8002892:	edc3 7a00 	vstr	s15, [r3]
		  atan_phase_8_f32 = atanf(tanf(shift_phase_I8_U8_f32));
 8002896:	4b9a      	ldr	r3, [pc, #616]	; (8002b00 <main+0xfe0>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb0 0a67 	vmov.f32	s0, s15
 80028a0:	f011 fba2 	bl	8013fe8 <tanf>
 80028a4:	eef0 7a40 	vmov.f32	s15, s0
 80028a8:	eeb0 0a67 	vmov.f32	s0, s15
 80028ac:	f011 fa48 	bl	8013d40 <atanf>
 80028b0:	eef0 7a40 	vmov.f32	s15, s0
 80028b4:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <main+0xfe8>)
 80028b6:	edc3 7a00 	vstr	s15, [r3]
		  calc_power_Output_8_f32	= arr2_Output_f32[8] * arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 80028ba:	4b94      	ldr	r3, [pc, #592]	; (8002b0c <main+0xfec>)
 80028bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80028c0:	4b93      	ldr	r3, [pc, #588]	; (8002b10 <main+0xff0>)
 80028c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ca:	4b8e      	ldr	r3, [pc, #568]	; (8002b04 <main+0xfe4>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	4b8f      	ldr	r3, [pc, #572]	; (8002b14 <main+0xff4>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
		  calc_R_Output_8_f32 		= arr2_Output_f32[8] / arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 80028da:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <main+0xfec>)
 80028dc:	edd3 6a08 	vldr	s13, [r3, #32]
 80028e0:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <main+0xff0>)
 80028e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ea:	4b86      	ldr	r3, [pc, #536]	; (8002b04 <main+0xfe4>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <main+0xff8>)
 80028f6:	edc3 7a00 	vstr	s15, [r3]
		// F_bin = F *64/256 = F / 4 ;
		// F_bin = F *64/512 = F / 8 ;
		// F_bin = F *64/1024 = F / 16 ;
		// Koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
		// freq_new = F_bin * N + Koeff * F_bin;   // для этого случая N==4
		  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <main+0xffc>)
 80028fc:	789a      	ldrb	r2, [r3, #2]
 80028fe:	4b87      	ldr	r3, [pc, #540]	; (8002b1c <main+0xffc>)
 8002900:	795b      	ldrb	r3, [r3, #5]
 8002902:	4013      	ands	r3, r2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <main+0xffc>)
 800290a:	78db      	ldrb	r3, [r3, #3]
 800290c:	f083 0301 	eor.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4013      	ands	r3, r2
 8002914:	4a81      	ldr	r2, [pc, #516]	; (8002b1c <main+0xffc>)
 8002916:	7992      	ldrb	r2, [r2, #6]
 8002918:	f082 0201 	eor.w	r2, r2, #1
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80dc 	beq.w	8002ade <main+0xfbe>
		  {
			if (fft_N ==256)
 8002926:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <main+0x1000>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292e:	d132      	bne.n	8002996 <main+0xe76>
			{
				koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
 8002930:	4b77      	ldr	r3, [pc, #476]	; (8002b10 <main+0xff0>)
 8002932:	ed93 7a05 	vldr	s14, [r3, #20]
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <main+0xff0>)
 8002938:	edd3 7a03 	vldr	s15, [r3, #12]
 800293c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002940:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <main+0xff0>)
 8002942:	edd3 7a04 	vldr	s15, [r3, #16]
 8002946:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800294a:	4b71      	ldr	r3, [pc, #452]	; (8002b10 <main+0xff0>)
 800294c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002954:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <main+0xff0>)
 8002956:	edd3 7a03 	vldr	s15, [r3, #12]
 800295a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002966:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <main+0x1004>)
 8002968:	edc3 7a00 	vstr	s15, [r3]
				freq_new = freq_tim1_float + koeff * freq_tim1_float/4;   // для этого случая N==4
 800296c:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <main+0x1004>)
 800296e:	ed93 7a00 	vldr	s14, [r3]
 8002972:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <main+0x1008>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002980:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <main+0x1008>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <main+0x100c>)
 8002990:	edc3 7a00 	vstr	s15, [r3]
 8002994:	e0a3      	b.n	8002ade <main+0xfbe>
			}
			else
			{
				if (fft_N ==512)
 8002996:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <main+0x1000>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299e:	d167      	bne.n	8002a70 <main+0xf50>
				{
					ln_x3 = 100000.f * logf((float)arr1_Output_f32[7]);
 80029a0:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <main+0xff0>)
 80029a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80029a6:	eeb0 0a67 	vmov.f32	s0, s15
 80029aa:	f011 fb49 	bl	8014040 <logf>
 80029ae:	eef0 7a40 	vmov.f32	s15, s0
 80029b2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002b30 <main+0x1010>
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	4b5e      	ldr	r3, [pc, #376]	; (8002b34 <main+0x1014>)
 80029bc:	edc3 7a00 	vstr	s15, [r3]
					ln_x4 = 100000.f * logf((float)arr1_Output_f32[8]);
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <main+0xff0>)
 80029c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80029c6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ca:	f011 fb39 	bl	8014040 <logf>
 80029ce:	eef0 7a40 	vmov.f32	s15, s0
 80029d2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002b30 <main+0x1010>
 80029d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <main+0x1018>)
 80029dc:	edc3 7a00 	vstr	s15, [r3]
					ln_x5 = 100000.f * logf((float)arr1_Output_f32[9]);
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <main+0xff0>)
 80029e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	f011 fb29 	bl	8014040 <logf>
 80029ee:	eef0 7a40 	vmov.f32	s15, s0
 80029f2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002b30 <main+0x1010>
 80029f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fa:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <main+0x101c>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
					// koeff = (ln_x5 -ln_x3) / (2*(2*ln_x4 -ln_x5 -ln_x3));
					koeff = (8.f + (ln_x5 -ln_x3) / 2.f / (2.f * ln_x4 -ln_x5 -ln_x3)) * 10000.f;
 8002a00:	4b4e      	ldr	r3, [pc, #312]	; (8002b3c <main+0x101c>)
 8002a02:	ed93 7a00 	vldr	s14, [r3]
 8002a06:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <main+0x1014>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a18:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <main+0x1018>)
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a22:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <main+0x101c>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2c:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <main+0x1014>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a42:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002b40 <main+0x1020>
 8002a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <main+0x1004>)
 8002a4c:	edc3 7a00 	vstr	s15, [r3]
					freq_new = koeff * ((float)freq_tim1_float)/80000.f; // для этого случая N==8
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <main+0x1004>)
 8002a52:	ed93 7a00 	vldr	s14, [r3]
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <main+0x1008>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a60:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b44 <main+0x1024>
 8002a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a68:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <main+0x100c>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]
 8002a6e:	e036      	b.n	8002ade <main+0xfbe>
				}
				else
				{
					if (fft_N ==1024)
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <main+0x1000>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a78:	d131      	bne.n	8002ade <main+0xfbe>
					{
						koeff = (arr1_Output_f32[17] -arr1_Output_f32[15]) / (2*(2*arr1_Output_f32[16] -arr1_Output_f32[17] -arr1_Output_f32[15]));
 8002a7a:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <main+0xff0>)
 8002a7c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <main+0xff0>)
 8002a82:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <main+0xff0>)
 8002a8c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a90:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <main+0xff0>)
 8002a96:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <main+0xff0>)
 8002aa0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <main+0x1004>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
						freq_new = freq_tim1_float + koeff * freq_tim1_float/16;   // для этого случая N==16
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <main+0x1004>)
 8002ab8:	ed93 7a00 	vldr	s14, [r3]
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <main+0x1008>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002aca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <main+0x1008>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <main+0x100c>)
 8002ada:	edc3 7a00 	vstr	s15, [r3]
			//memset(data_adc2, 0, 32764); // sizeof(float32_t)*8196);



		  	// size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002ade:	2300      	movs	r3, #0
 8002ae0:	82fb      	strh	r3, [r7, #22]
 8002ae2:	e042      	b.n	8002b6a <main+0x104a>
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	54442d18 	.word	0x54442d18
 8002aec:	401921fb 	.word	0x401921fb
 8002af0:	54442d18 	.word	0x54442d18
 8002af4:	c01921fb 	.word	0xc01921fb
 8002af8:	2000f634 	.word	0x2000f634
 8002afc:	2000f630 	.word	0x2000f630
 8002b00:	2000f63c 	.word	0x2000f63c
 8002b04:	2000f640 	.word	0x2000f640
 8002b08:	2000f644 	.word	0x2000f644
 8002b0c:	2000d630 	.word	0x2000d630
 8002b10:	2000b630 	.word	0x2000b630
 8002b14:	2000f638 	.word	0x2000f638
 8002b18:	2000f648 	.word	0x2000f648
 8002b1c:	20011ec8 	.word	0x20011ec8
 8002b20:	20000018 	.word	0x20000018
 8002b24:	2000f65c 	.word	0x2000f65c
 8002b28:	2000f658 	.word	0x2000f658
 8002b2c:	2000f66c 	.word	0x2000f66c
 8002b30:	47c35000 	.word	0x47c35000
 8002b34:	2000f660 	.word	0x2000f660
 8002b38:	2000f664 	.word	0x2000f664
 8002b3c:	2000f668 	.word	0x2000f668
 8002b40:	461c4000 	.word	0x461c4000
 8002b44:	479c4000 	.word	0x479c4000
				{
					data_adc1[ic] =0;
 8002b48:	8afb      	ldrh	r3, [r7, #22]
 8002b4a:	4a72      	ldr	r2, [pc, #456]	; (8002d14 <main+0x11f4>)
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
					data_adc2[ic] =0;
 8002b56:	8afb      	ldrh	r3, [r7, #22]
 8002b58:	4a6f      	ldr	r2, [pc, #444]	; (8002d18 <main+0x11f8>)
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002b64:	8afb      	ldrh	r3, [r7, #22]
 8002b66:	3301      	adds	r3, #1
 8002b68:	82fb      	strh	r3, [r7, #22]
 8002b6a:	8afa      	ldrh	r2, [r7, #22]
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <main+0x11fc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	dbe9      	blt.n	8002b48 <main+0x1028>

	  // здесь будет разборка условий перехода по частоте
	  // freq_new - вычислена выше для типа автоподдержания частоты
	  // если получаем бит сканирования по частоте,  cmd_set.cmd_flags.1
	  // ============================================  сканирование по частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==true)) // скольжение по частоте
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <main+0x1200>)
 8002b76:	789a      	ldrb	r2, [r3, #2]
 8002b78:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <main+0x1200>)
 8002b7a:	78db      	ldrb	r3, [r3, #3]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d058      	beq.n	8002c36 <main+0x1116>
	  {
		  if (htim17.Instance->CNT > (cmd_set.time_step *10) )
 8002b84:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <main+0x1204>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <main+0x1200>)
 8002b8c:	89db      	ldrh	r3, [r3, #14]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	460b      	mov	r3, r1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d94c      	bls.n	8002c36 <main+0x1116>
		  {
			  htim17.Instance->CNT =0;
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <main+0x1204>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
			  old_freq_new = freq_new;
 8002ba4:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <main+0x1208>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a60      	ldr	r2, [pc, #384]	; (8002d2c <main+0x120c>)
 8002baa:	6013      	str	r3, [r2, #0]
			  freq_new = freq_new + flag_napravlenia_scan * cmd_set.step;
 8002bac:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <main+0x1210>)
 8002bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <main+0x1200>)
 8002bb6:	899b      	ldrh	r3, [r3, #12]
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <main+0x1208>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	4b56      	ldr	r3, [pc, #344]	; (8002d28 <main+0x1208>)
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
			  if (freq_new > (cmd_set.freq_start + (cmd_set.step *(cmd_set.N_step-1))))
 8002bd4:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <main+0x1200>)
 8002bd6:	891b      	ldrh	r3, [r3, #8]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <main+0x1200>)
 8002bdc:	899b      	ldrh	r3, [r3, #12]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <main+0x1200>)
 8002be2:	8a1b      	ldrh	r3, [r3, #16]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <main+0x1208>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	d503      	bpl.n	8002c0c <main+0x10ec>
			  {
				  flag_napravlenia_scan = -1; // следующий степ будет в отрицательную сторону
 8002c04:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <main+0x1210>)
 8002c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0a:	801a      	strh	r2, [r3, #0]
			  }
			  if (freq_new < (cmd_set.freq_start + cmd_set.step))
 8002c0c:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <main+0x1200>)
 8002c0e:	891b      	ldrh	r3, [r3, #8]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <main+0x1200>)
 8002c14:	899b      	ldrh	r3, [r3, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <main+0x1208>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dd02      	ble.n	8002c36 <main+0x1116>
			  {
				  flag_napravlenia_scan = 1; // следующий степ будет в положительную сторону
 8002c30:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <main+0x1210>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	  // ============================================  стоять на одной частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_autoTuning_freq ==false)) // стоять на одной частоте
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <main+0x1200>)
 8002c38:	789b      	ldrb	r3, [r3, #2]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <main+0x1200>)
 8002c3e:	78db      	ldrb	r3, [r3, #3]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4013      	ands	r3, r2
 8002c48:	4a35      	ldr	r2, [pc, #212]	; (8002d20 <main+0x1200>)
 8002c4a:	7952      	ldrb	r2, [r2, #5]
 8002c4c:	f082 0201 	eor.w	r2, r2, #1
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <main+0x1152>
	  {
		  old_freq_new = freq_new;		//  при  cmd_set.flag_ON_scan_freq      новая частота будет формироваться при сканировании
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <main+0x1208>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <main+0x120c>)
 8002c5e:	6013      	str	r3, [r2, #0]
		  freq_new = cmd_set.freq_start; // при  cmd_set.flag_ON_autoTuning_freq  новую частоту будем вычислять после FFT преобразования
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <main+0x1200>)
 8002c62:	891b      	ldrh	r3, [r3, #8]
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <main+0x1208>)
 8002c6e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (cmd_set.flag_ON_generation ==false)
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <main+0x1200>)
 8002c74:	789b      	ldrb	r3, [r3, #2]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <main+0x1168>
		  { index_data_real_zamer = 1024; } // чтобы при сканировании по времени, передача начиналась сразу, не надо было ждать
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <main+0x1214>)
 8002c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c86:	801a      	strh	r2, [r3, #0]

	  // ============================================  автоподстройка частоты  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <main+0x1200>)
 8002c8a:	789a      	ldrb	r2, [r3, #2]
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <main+0x1200>)
 8002c8e:	795b      	ldrb	r3, [r3, #5]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <main+0x1200>)
 8002c98:	78db      	ldrb	r3, [r3, #3]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <main+0x1200>)
 8002ca4:	7992      	ldrb	r2, [r2, #6]
 8002ca6:	f082 0201 	eor.w	r2, r2, #1
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80b5 	beq.w	8002e1e <main+0x12fe>
	  {
			if (old_freq_new >0)// надо проверить, чтобы не выскакивало за пределы
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <main+0x120c>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	dd42      	ble.n	8002d4a <main+0x122a>
				{
					if (freq_new >14500)
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <main+0x1208>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002d38 <main+0x1218>
 8002cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	dd35      	ble.n	8002d44 <main+0x1224>
						{
							if (freq_new <43000)
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <main+0x1208>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d3c <main+0x121c>
 8002ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	d50f      	bpl.n	8002d0c <main+0x11ec>
								{ freq_new = (freq_new + old_freq_new) /2;  }
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <main+0x1208>)
 8002cee:	ed93 7a00 	vldr	s14, [r3]
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <main+0x120c>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <main+0x1208>)
 8002d06:	edc3 7a00 	vstr	s15, [r3]
 8002d0a:	e01e      	b.n	8002d4a <main+0x122a>
							else
								{ freq_new = 25000; }
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <main+0x1208>)
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <main+0x1220>)
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e01a      	b.n	8002d4a <main+0x122a>
 8002d14:	2000262c 	.word	0x2000262c
 8002d18:	2000462c 	.word	0x2000462c
 8002d1c:	2000662c 	.word	0x2000662c
 8002d20:	20011ec8 	.word	0x20011ec8
 8002d24:	2001210c 	.word	0x2001210c
 8002d28:	2000f66c 	.word	0x2000f66c
 8002d2c:	2000f670 	.word	0x2000f670
 8002d30:	2000001a 	.word	0x2000001a
 8002d34:	20011ec4 	.word	0x20011ec4
 8002d38:	46629000 	.word	0x46629000
 8002d3c:	4727f800 	.word	0x4727f800
 8002d40:	46c35000 	.word	0x46c35000
						}
					else
					{ freq_new = 25000; }
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <main+0x1350>)
 8002d46:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <main+0x1354>)
 8002d48:	601a      	str	r2, [r3, #0]
				}
			old_freq_new = freq_new;
 8002d4a:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <main+0x1350>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <main+0x1358>)
 8002d50:	6013      	str	r3, [r2, #0]
			err_f[9] = err_f[8];
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <main+0x135c>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <main+0x135c>)
 8002d58:	6253      	str	r3, [r2, #36]	; 0x24
			err_f[8] = err_f[7];
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <main+0x135c>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a47      	ldr	r2, [pc, #284]	; (8002e7c <main+0x135c>)
 8002d60:	6213      	str	r3, [r2, #32]
			err_f[7] = err_f[6];
 8002d62:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <main+0x135c>)
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <main+0x135c>)
 8002d68:	61d3      	str	r3, [r2, #28]
			err_f[6] = err_f[5];
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <main+0x135c>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4a43      	ldr	r2, [pc, #268]	; (8002e7c <main+0x135c>)
 8002d70:	6193      	str	r3, [r2, #24]
			err_f[5] = err_f[4];
 8002d72:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <main+0x135c>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <main+0x135c>)
 8002d78:	6153      	str	r3, [r2, #20]
			err_f[4] = err_f[3];
 8002d7a:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <main+0x135c>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a3f      	ldr	r2, [pc, #252]	; (8002e7c <main+0x135c>)
 8002d80:	6113      	str	r3, [r2, #16]
			err_f[3] = err_f[2];
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <main+0x135c>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4a3d      	ldr	r2, [pc, #244]	; (8002e7c <main+0x135c>)
 8002d88:	60d3      	str	r3, [r2, #12]
			err_f[2] = err_f[1];
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <main+0x135c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <main+0x135c>)
 8002d90:	6093      	str	r3, [r2, #8]
			err_f[1] = err_f[0];
 8002d92:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <main+0x135c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a39      	ldr	r2, [pc, #228]	; (8002e7c <main+0x135c>)
 8002d98:	6053      	str	r3, [r2, #4]
			err_f[0] = freq_new;
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <main+0x1350>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <main+0x135c>)
 8002da0:	6013      	str	r3, [r2, #0]
			delta_F = fabsf (freq_new - (err_f[0] +err_f[1] +err_f[2] +err_f[3] +err_f[4] +err_f[5] +err_f[6] +err_f[7] +err_f[8] +err_f[9])/10);
 8002da2:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <main+0x1350>)
 8002da4:	ed93 7a00 	vldr	s14, [r3]
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <main+0x135c>)
 8002daa:	edd3 6a00 	vldr	s13, [r3]
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <main+0x135c>)
 8002db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002db4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <main+0x135c>)
 8002dba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <main+0x135c>)
 8002dc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <main+0x135c>)
 8002dce:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dd2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <main+0x135c>)
 8002dd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ddc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <main+0x135c>)
 8002de2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002de6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <main+0x135c>)
 8002dec:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <main+0x135c>)
 8002df6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <main+0x135c>)
 8002e00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e08:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002e0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	eef0 7ae7 	vabs.f32	s15, s15
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <main+0x1360>)
 8002e1a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // ========================== а вот ОНО, - новая частота  ============================
	  hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <main+0x1350>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e28:	2300      	movs	r3, #0
 8002e2a:	ee17 5a90 	vmov	r5, s15
 8002e2e:	461e      	mov	r6, r3
 8002e30:	462a      	mov	r2, r5
 8002e32:	4633      	mov	r3, r6
 8002e34:	a10c      	add	r1, pc, #48	; (adr r1, 8002e68 <main+0x1348>)
 8002e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e3a:	f7fd ff4d 	bl	8000cd8 <__aeabi_ldivmod>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <main+0x1364>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	2200      	movs	r2, #0
 8002e50:	469a      	mov	sl, r3
 8002e52:	4693      	mov	fp, r2
 8002e54:	4652      	mov	r2, sl
 8002e56:	465b      	mov	r3, fp
 8002e58:	f7fd ff3e 	bl	8000cd8 <__aeabi_ldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <main+0x1368>)
 8002e62:	601a      	str	r2, [r3, #0]
	  if (cmd_set.flag_ON_TxData_cicle == true)// если надо, по флагу, вот тут будет включаться циклическая долбежка
 8002e64:	f7ff b802 	b.w	8001e6c <main+0x34c>
 8002e68:	443fd000 	.word	0x443fd000
 8002e6c:	00000001 	.word	0x00000001
 8002e70:	2000f66c 	.word	0x2000f66c
 8002e74:	46c35000 	.word	0x46c35000
 8002e78:	2000f670 	.word	0x2000f670
 8002e7c:	2000f684 	.word	0x2000f684
 8002e80:	2000f6ac 	.word	0x2000f6ac
 8002e84:	20011f44 	.word	0x20011f44
 8002e88:	2000001c 	.word	0x2000001c

08002e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	; 0x50
 8002e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e92:	f107 0318 	add.w	r3, r7, #24
 8002e96:	2238      	movs	r2, #56	; 0x38
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f00c faa4 	bl	800f3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f006 f922 	bl	80090f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002ece:	2355      	movs	r3, #85	; 0x55
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002eda:	2302      	movs	r3, #2
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ede:	f107 0318 	add.w	r3, r7, #24
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f006 f9bc 	bl	8009260 <HAL_RCC_OscConfig>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002eee:	f000 fcf1 	bl	80038d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f06:	1d3b      	adds	r3, r7, #4
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f006 fcc0 	bl	8009890 <HAL_RCC_ClockConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002f16:	f000 fcdd 	bl	80038d4 <Error_Handler>
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3750      	adds	r7, #80	; 0x50
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <eMBRegInputCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   						В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	803b      	strh	r3, [r7, #0]
	// эта фун осталась как заглушка, значения в буфер  pucRegBuffer  закладываются в конце обработки замера
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
    USHORT number_data_array = usNRegs; // number_data_array - это будет номер элемента массива замеров, это будет собираться пакет из 10 массивов, из каждого этот элемент
 8002f38:	883b      	ldrh	r3, [r7, #0]
 8002f3a:	81bb      	strh	r3, [r7, #12]
    if (number_data_array > 1024) { number_data_array =1023; } // размер всех этих массивов = 1024
 8002f3c:	89bb      	ldrh	r3, [r7, #12]
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	d902      	bls.n	8002f4a <eMBRegInputCB+0x26>
 8002f44:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002f48:	81bb      	strh	r3, [r7, #12]

	// DWT_CYCCNT =0;// обнуляем значение
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код
    		if (cmd_set.step ==0) {cmd_set.step =1;}
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <eMBRegInputCB+0xa0>)
 8002f4c:	899b      	ldrh	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <eMBRegInputCB+0x34>
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <eMBRegInputCB+0xa0>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	819a      	strh	r2, [r3, #12]
			 index_temp = (freq_tim1 - cmd_set.freq_start) / cmd_set.step;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <eMBRegInputCB+0xa4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <eMBRegInputCB+0xa0>)
 8002f5e:	8912      	ldrh	r2, [r2, #8]
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <eMBRegInputCB+0xa0>)
 8002f64:	8992      	ldrh	r2, [r2, #12]
 8002f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <eMBRegInputCB+0xa8>)
 8002f6e:	801a      	strh	r2, [r3, #0]
			 if (index_temp > 1000) { index_temp =1000; }
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <eMBRegInputCB+0xa8>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f78:	d903      	bls.n	8002f82 <eMBRegInputCB+0x5e>
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <eMBRegInputCB+0xa8>)
 8002f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f80:	801a      	strh	r2, [r3, #0]
			 if (index_temp < 1) { index_temp =0; }
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <eMBRegInputCB+0xa8>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <eMBRegInputCB+0x6c>
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <eMBRegInputCB+0xa8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	801a      	strh	r2, [r3, #0]

			 number_data_array=index_temp;
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <eMBRegInputCB+0xa8>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	81bb      	strh	r3, [r7, #12]


			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float = (float32_t) (freq_tim1 +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <eMBRegInputCB+0xa4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	332a      	adds	r3, #42	; 0x2a
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <eMBRegInputCB+0xac>)
 8002fa6:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002faa:	4909      	ldr	r1, [pc, #36]	; (8002fd0 <eMBRegInputCB+0xac>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	780a      	ldrb	r2, [r1, #0]
 8002fb4:	701a      	strb	r2, [r3, #0]

    return eStatus;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20011ec8 	.word	0x20011ec8
 8002fc8:	2000f654 	.word	0x2000f654
 8002fcc:	20011ec2 	.word	0x20011ec2
 8002fd0:	20011f34 	.word	0x20011f34

08002fd4 <eMBRegHoldingCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress,  USHORT usNRegs, eMBRegisterMode eMode )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	74fb      	strb	r3, [r7, #19]
    int             iRegIndex;

    // проверка пределов, и вгон в разрешенный диапазон,
    // будет отвечать ошибочными данными, но сам дебил кто дает ошибочный запрос
    if (usNRegs ==0) 	{ usNRegs =1; }
 8002ff2:	893b      	ldrh	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <eMBRegHoldingCB+0x28>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	813b      	strh	r3, [r7, #8]
    if (usNRegs > REG_HOLDING_NREGS)	{ usNRegs =REG_HOLDING_NREGS; }
 8002ffc:	893b      	ldrh	r3, [r7, #8]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d901      	bls.n	8003006 <eMBRegHoldingCB+0x32>
 8003002:	2310      	movs	r3, #16
 8003004:	813b      	strh	r3, [r7, #8]
    if (usAddress < REG_HOLDING_START)	{ usAddress = usAddress; }
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	2b00      	cmp	r3, #0
    if ((usAddress + usNRegs) > (REG_HOLDING_START + REG_HOLDING_NREGS)) { usAddress = REG_HOLDING_START - REG_HOLDING_NREGS; }
 800300a:	897a      	ldrh	r2, [r7, #10]
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	4413      	add	r3, r2
 8003010:	2b11      	cmp	r3, #17
 8003012:	dd02      	ble.n	800301a <eMBRegHoldingCB+0x46>
 8003014:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8003018:	817b      	strh	r3, [r7, #10]

        iRegIndex = ( int )( usAddress - num_reg_CMD_Start );
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	4a53      	ldr	r2, [pc, #332]	; (800316c <eMBRegHoldingCB+0x198>)
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	617b      	str	r3, [r7, #20]

            /* Pass current register values to the protocol stack.
             * Передайте текущие значения регистра в стек протоколов.*/
        if (eMode == MB_REG_READ)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11d      	bne.n	8003066 <eMBRegHoldingCB+0x92>
        {
             while( usNRegs > 0 )
 800302a:	e019      	b.n	8003060 <eMBRegHoldingCB+0x8c>
            {
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] >> 8 );
 800302c:	4a50      	ldr	r2, [pc, #320]	; (8003170 <eMBRegHoldingCB+0x19c>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	b299      	uxth	r1, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60fa      	str	r2, [r7, #12]
 800303e:	b2ca      	uxtb	r2, r1
 8003040:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] & 0xFF );
 8003042:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	b2ca      	uxtb	r2, r1
 8003052:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
                usNRegs--;
 800305a:	893b      	ldrh	r3, [r7, #8]
 800305c:	3b01      	subs	r3, #1
 800305e:	813b      	strh	r3, [r7, #8]
             while( usNRegs > 0 )
 8003060:	893b      	ldrh	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e2      	bne.n	800302c <eMBRegHoldingCB+0x58>
            }
        } // if (eMode == MB_REG_READ)

            /* Update current register values with new values from the  protocol stack.
             * Обновите текущие значения регистра новыми значениями из стека протоколов. */
        if (eMode == MB_REG_WRITE)
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d178      	bne.n	800315e <eMBRegHoldingCB+0x18a>
        {
            while( usNRegs > 0 )
 800306c:	e01f      	b.n	80030ae <eMBRegHoldingCB+0xda>
            {
                Reg_CMD_Buf[iRegIndex] = *pucRegBuffer++ << 8;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b299      	uxth	r1, r3
 800307c:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <eMBRegHoldingCB+0x19c>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Reg_CMD_Buf[iRegIndex] |= *pucRegBuffer++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60fa      	str	r2, [r7, #12]
 800308a:	7819      	ldrb	r1, [r3, #0]
 800308c:	4a38      	ldr	r2, [pc, #224]	; (8003170 <eMBRegHoldingCB+0x19c>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003094:	b28b      	uxth	r3, r1
 8003096:	4313      	orrs	r3, r2
 8003098:	b299      	uxth	r1, r3
 800309a:	4a35      	ldr	r2, [pc, #212]	; (8003170 <eMBRegHoldingCB+0x19c>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
                usNRegs--;
 80030a8:	893b      	ldrh	r3, [r7, #8]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80030ae:	893b      	ldrh	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1dc      	bne.n	800306e <eMBRegHoldingCB+0x9a>
            }
            cmd_set.cmd_flags	= Reg_CMD_Buf[0];	//	Reg_CMD_Buf[0] - регистр флагов-команд, приходящих для исполнения
 80030b4:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <eMBRegHoldingCB+0x19c>)
 80030b6:	881a      	ldrh	r2, [r3, #0]
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 80030ba:	801a      	strh	r2, [r3, #0]
            cmd_set.flag_ON_generation = 	Reg_CMD_Buf[0] & 0b0000000000000001;	// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 80030bc:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <eMBRegHoldingCB+0x19c>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 80030d0:	709a      	strb	r2, [r3, #2]
            cmd_set.flag_ON_scan_freq = 	Reg_CMD_Buf[0] & 0b0000000000000010;	// Reg_CMD_Buf[0].1 - флаг-команда Вкл. Скольжение по диапазону, в соответствии с задаными регистрами
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <eMBRegHoldingCB+0x19c>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 80030e6:	70da      	strb	r2, [r3, #3]
            cmd_set.flag_ON_TxData_cicle = 	Reg_CMD_Buf[0] & 0b0000000000000100;	// Reg_CMD_Buf[0].2 - флаг-команда Вкл. долбежку передачи данных по кругу, прием при этом прекратиться, стоповать можно будет только синей кнопкой
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <eMBRegHoldingCB+0x19c>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 80030fc:	711a      	strb	r2, [r3, #4]
            cmd_set.flag_ON_autoTuning_freq=Reg_CMD_Buf[0] & 0b0000000000001000;	// Reg_CMD_Buf[0].3 - флаг-команда при включеной генерации автоподстройка частоты будет работать, если включен флаг скольжения, этот флаг игнорится
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 8003112:	715a      	strb	r2, [r3, #5]
            cmd_set.flag_ON_scan_time = 	Reg_CMD_Buf[0] & 0b0000000000010000;	// Reg_CMD_Buf[0].4 - флаг-команда на вкл генерации на одной частоте, и циклическую передачу сигналов КЛЮЧ�?, ТОК и НАПРЯЖЕН�?Е в реале, как есть из замера
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 8003128:	719a      	strb	r2, [r3, #6]

            cmd_set.proc_pwr	= Reg_CMD_Buf[1];	//	Reg_CMD_Buf[1] - регистр мощности,  2-98% заполнения
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <eMBRegHoldingCB+0x19c>)
 800312c:	885a      	ldrh	r2, [r3, #2]
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 8003130:	815a      	strh	r2, [r3, #10]
   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
            cmd_set.freq_start	= Reg_CMD_Buf[2] -42;	// Reg_CMD_Buf[2] - регистр стартовой частоты, 14500-43000
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003134:	889b      	ldrh	r3, [r3, #4]
 8003136:	3b2a      	subs	r3, #42	; 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 800313c:	811a      	strh	r2, [r3, #8]
            cmd_set.step 		= Reg_CMD_Buf[3];	//	Reg_CMD_Buf[3] - регистр step(1-25гц) перемещения частоты, при сканировании диапазона, при сканировании старт будет Reg_CMD_Buf[2], максимум = (Reg_CMD_Buf[2] + step*_N-количество_)
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003140:	88da      	ldrh	r2, [r3, #6]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 8003144:	819a      	strh	r2, [r3, #12]
            cmd_set.time_step	= Reg_CMD_Buf[4];	//	Reg_CMD_Buf[4] - регистр время милисекунд, между степами (10-1000мс)
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003148:	891a      	ldrh	r2, [r3, #8]
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 800314c:	81da      	strh	r2, [r3, #14]
            cmd_set.N_step		= Reg_CMD_Buf[5];	//	Reg_CMD_Buf[5] - регистр N-количество степов при сканировании 4-1000
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003150:	895a      	ldrh	r2, [r3, #10]
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <eMBRegHoldingCB+0x1a0>)
 8003154:	821a      	strh	r2, [r3, #16]
            Reg_CMD_Buf[6] = Reg_CMD_Buf[5];
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <eMBRegHoldingCB+0x19c>)
 8003158:	895a      	ldrh	r2, [r3, #10]
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <eMBRegHoldingCB+0x19c>)
 800315c:	819a      	strh	r2, [r3, #12]
        } // if (eMode == MB_REG_WRITE)
    return eStatus;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20000000 	.word	0x20000000
 8003170:	200005ec 	.word	0x200005ec
 8003174:	20011ec8 	.word	0x20011ec8

08003178 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
	// для контроля окончания передачи пакета на МВ485, используем прерывание от ножки PA11--PA12--DE--MB485
	// никаких разборок с EXTI нету,  там всего одно прерывание включено,
	xMBRTUTransmitFSM();
 8003182:	f00b f873 	bl	800e26c <xMBRTUTransmitFSM>
	flag_exti_stop_TX_cicles++;
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_GPIO_EXTI_Callback+0x24>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GPIO_EXTI_Callback+0x24>)
 8003190:	701a      	strb	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000619 	.word	0x20000619

080031a0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10d      	bne.n	80031ce <HAL_TIM_PeriodElapsedCallback+0x2e>
    	{
    		counter_Tim6_MB++;
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031bc:	801a      	strh	r2, [r3, #0]
    		if(counter_Tim6_MB >=timeout_Tim6_50us)
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d301      	bcc.n	80031ce <HAL_TIM_PeriodElapsedCallback+0x2e>
			  { xMBRTUTimerT35Expired();   }
 80031ca:	f00b f875 	bl	800e2b8 <xMBRTUTimerT35Expired>
    	}
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40001000 	.word	0x40001000
 80031dc:	2000060e 	.word	0x2000060e
 80031e0:	2000060c 	.word	0x2000060c

080031e4 <_write>:


int _write(int file, char *ptr, int len)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e009      	b.n	800320a <_write+0x26>
		{ ITM_SendChar(*ptr++); }
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	60ba      	str	r2, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fc2c 	bl	8001a5c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	dbf1      	blt.n	80031f6 <_write+0x12>
	return len;
 8003212:	687b      	ldr	r3, [r7, #4]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <Mem_to_Mem_Complete>:


static void Mem_to_Mem_Complete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	 // а сколько это мкс? в реале == 41 мкс 1024 WORD передача Mem_to_Mem;
	LL_ADC_REG_StartConversion(hadc1.Instance);  //  - это есть старт АЦП произвольно по желанию, если был остановлен
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <Mem_to_Mem_Complete+0x20>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fc3e 	bl	8001aaa <LL_ADC_REG_StartConversion>
	flag_end_FFT =0;
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <Mem_to_Mem_Complete+0x24>)
 8003230:	2200      	movs	r2, #0
 8003232:	801a      	strh	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200002cc 	.word	0x200002cc
 8003240:	2000061a 	.word	0x2000061a

08003244 <HAL_ADC_ConvCpltCallback>:
//			 какой то код
// count_tic_finish = DWT_CYCCNT - count_tic_start;//смотрим сколько натикало  - ццикл отсоса массивов данных длится 16мкс
// count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	// LL_ADC_REG_StopConversion (hadc1.Instance);
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 800324c:	4905      	ldr	r1, [pc, #20]	; (8003264 <HAL_ADC_ConvCpltCallback+0x20>)
 800324e:	4a06      	ldr	r2, [pc, #24]	; (8003268 <HAL_ADC_ConvCpltCallback+0x24>)
 8003250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003254:	4805      	ldr	r0, [pc, #20]	; (800326c <HAL_ADC_ConvCpltCallback+0x28>)
 8003256:	f003 fcf9 	bl	8006c4c <HAL_DMA_Start_IT>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000062c 	.word	0x2000062c
 8003268:	2000162c 	.word	0x2000162c
 800326c:	2000048c 	.word	0x2000048c

08003270 <HAL_UART_TxCpltCallback>:
//	// status_USBcdc_TX = CDC_Transmit_FS((uint8_t *) HEAP_arr_ADC_zamer, 64);
	return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	// включаем прием LPUART, ждём настроечных данных+
//	status_RX_LPuart = HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *) cmd_array_SPI, len_cmd_array_SPI);
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
	return;
 8003278:	bf00      	nop
}
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <fun_data_time_podgotovka>:

uint16_t fun_data_time_podgotovka( uint8_t * buffer_data_time, uint16_t index_data_time_zamer )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
	if (cmd_set.flag_ON_scan_time ==false)
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <fun_data_time_podgotovka+0x20>)
 8003292:	799b      	ldrb	r3, [r3, #6]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <fun_data_time_podgotovka+0x24>
		{ return 0;  }
 800329e:	2300      	movs	r3, #0
 80032a0:	e195      	b.n	80035ce <fun_data_time_podgotovka+0x34a>
 80032a2:	bf00      	nop
 80032a4:	20011ec8 	.word	0x20011ec8
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код

			 // index_data_real_zamer ++; // в ноль будет сбрасываться при окончании пересчета массивов данных, �? после передачи всего пакета
			 if (index_data_time_zamer > 1022)
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d902      	bls.n	80032b8 <fun_data_time_podgotovka+0x34>
			 	 {index_data_time_zamer =1022; }
 80032b2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80032b6:	807b      	strh	r3, [r7, #2]

			 temp_float = (float) index_data_time_zamer;  // index-NUMBER index-NUMBER index-NUMBER index-NUMBER index-NUMBER   если будем долбить по кругу реальные замеры по времени
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	4ba1      	ldr	r3, [pc, #644]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80032c4:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80032c8:	499f      	ldr	r1, [pc, #636]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	780a      	ldrb	r2, [r1, #0]
 80032d2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	4a9b      	ldr	r2, [pc, #620]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80032dc:	7852      	ldrb	r2, [r2, #1]
 80032de:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	4a98      	ldr	r2, [pc, #608]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80032e8:	7892      	ldrb	r2, [r2, #2]
 80032ea:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	4a95      	ldr	r2, [pc, #596]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80032f4:	78d2      	ldrb	r2, [r2, #3]
 80032f6:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  X0
			 temp_float = (float) adc1_Tx[index_data_time_zamer]; //
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	4a94      	ldr	r2, [pc, #592]	; (800354c <fun_data_time_podgotovka+0x2c8>)
 80032fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003308:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800330a:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800330e:	498e      	ldr	r1, [pc, #568]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	780a      	ldrb	r2, [r1, #0]
 8003318:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	4a89      	ldr	r2, [pc, #548]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003322:	7852      	ldrb	r2, [r2, #1]
 8003324:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	4a86      	ldr	r2, [pc, #536]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800332e:	7892      	ldrb	r2, [r2, #2]
 8003330:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800333a:	78d2      	ldrb	r2, [r2, #3]
 800333c:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  X0+1
			 temp_float = (float) adc1_Tx[index_data_time_zamer +1];
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	3301      	adds	r3, #1
 8003342:	4a82      	ldr	r2, [pc, #520]	; (800354c <fun_data_time_podgotovka+0x2c8>)
 8003344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	4b7d      	ldr	r3, [pc, #500]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003352:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003356:	497c      	ldr	r1, [pc, #496]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	780a      	ldrb	r2, [r1, #0]
 8003360:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	4a77      	ldr	r2, [pc, #476]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800336a:	7852      	ldrb	r2, [r2, #1]
 800336c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	4a74      	ldr	r2, [pc, #464]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003376:	7892      	ldrb	r2, [r2, #2]
 8003378:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	4a71      	ldr	r2, [pc, #452]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003382:	78d2      	ldrb	r2, [r2, #3]
 8003384:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   X0
			 temp_float = data_adc1_Tx[index_data_time_zamer];
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	4a71      	ldr	r2, [pc, #452]	; (8003550 <fun_data_time_podgotovka+0x2cc>)
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6d      	ldr	r2, [pc, #436]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003392:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003394:	496c      	ldr	r1, [pc, #432]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	780a      	ldrb	r2, [r1, #0]
 800339e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	4a68      	ldr	r2, [pc, #416]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033a8:	7852      	ldrb	r2, [r2, #1]
 80033aa:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	4a65      	ldr	r2, [pc, #404]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033b4:	7892      	ldrb	r2, [r2, #2]
 80033b6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	4a62      	ldr	r2, [pc, #392]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033c0:	78d2      	ldrb	r2, [r2, #3]
 80033c2:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   X0+1
			 temp_float = data_adc1_Tx[index_data_time_zamer +1];
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a61      	ldr	r2, [pc, #388]	; (8003550 <fun_data_time_podgotovka+0x2cc>)
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033d2:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033d4:	495c      	ldr	r1, [pc, #368]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	780a      	ldrb	r2, [r1, #0]
 80033de:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	4a58      	ldr	r2, [pc, #352]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033e8:	7852      	ldrb	r2, [r2, #1]
 80033ea:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	4a55      	ldr	r2, [pc, #340]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80033f4:	7892      	ldrb	r2, [r2, #2]
 80033f6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	4a52      	ldr	r2, [pc, #328]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003400:	78d2      	ldrb	r2, [r2, #3]
 8003402:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    X0
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	4a53      	ldr	r2, [pc, #332]	; (8003554 <fun_data_time_podgotovka+0x2d0>)
 8003408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003416:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800341a:	494b      	ldr	r1, [pc, #300]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	780a      	ldrb	r2, [r1, #0]
 8003424:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	4a46      	ldr	r2, [pc, #280]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800342e:	7852      	ldrb	r2, [r2, #1]
 8003430:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	4a43      	ldr	r2, [pc, #268]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800343a:	7892      	ldrb	r2, [r2, #2]
 800343c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	4a40      	ldr	r2, [pc, #256]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003446:	78d2      	ldrb	r2, [r2, #3]
 8003448:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    X0+1
			 temp_float = (float) (adc2_Tx[index_data_time_zamer +1]);
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	3301      	adds	r3, #1
 800344e:	4a41      	ldr	r2, [pc, #260]	; (8003554 <fun_data_time_podgotovka+0x2d0>)
 8003450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800345e:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003462:	4939      	ldr	r1, [pc, #228]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	780a      	ldrb	r2, [r1, #0]
 800346c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	4a34      	ldr	r2, [pc, #208]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003476:	7852      	ldrb	r2, [r2, #1]
 8003478:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	4a31      	ldr	r2, [pc, #196]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003482:	7892      	ldrb	r2, [r2, #2]
 8003484:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 3);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800348e:	78d2      	ldrb	r2, [r2, #3]
 8003490:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    X0
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <fun_data_time_podgotovka+0x2d4>)
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800349e:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034a0:	4929      	ldr	r1, [pc, #164]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	780a      	ldrb	r2, [r1, #0]
 80034aa:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	4a25      	ldr	r2, [pc, #148]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034b4:	7852      	ldrb	r2, [r2, #1]
 80034b6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	4a22      	ldr	r2, [pc, #136]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034c0:	7892      	ldrb	r2, [r2, #2]
 80034c2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034cc:	78d2      	ldrb	r2, [r2, #3]
 80034ce:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    X0+1
			 temp_float = data_adc2_Tx[index_data_time_zamer +1];
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <fun_data_time_podgotovka+0x2d4>)
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034de:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034e0:	4919      	ldr	r1, [pc, #100]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	780a      	ldrb	r2, [r1, #0]
 80034ea:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 80034f4:	7852      	ldrb	r2, [r2, #1]
 80034f6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003500:	7892      	ldrb	r2, [r2, #2]
 8003502:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 800350c:	78d2      	ldrb	r2, [r2, #3]
 800350e:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <fun_data_time_podgotovka+0x2d0>)
 8003514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <fun_data_time_podgotovka+0x2c4>)
 8003522:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	69;//*(((uint8_t *) &temp_float) + 0); //
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	2245      	movs	r2, #69	; 0x45
 800352e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	70;//*(((uint8_t *) &temp_float) + 1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	2246      	movs	r2, #70	; 0x46
 8003538:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  71;//*(((uint8_t *) &temp_float) + 2); //
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	2247      	movs	r2, #71	; 0x47
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e00a      	b.n	800355c <fun_data_time_podgotovka+0x2d8>
 8003546:	bf00      	nop
 8003548:	20011f34 	.word	0x20011f34
 800354c:	20006630 	.word	0x20006630
 8003550:	20007630 	.word	0x20007630
 8003554:	20006e30 	.word	0x20006e30
 8003558:	20008630 	.word	0x20008630
			 *buffer_data_time++ =	72;//*(((uint8_t *) &temp_float) + 3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	2248      	movs	r2, #72	; 0x48
 8003564:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <fun_data_time_podgotovka+0x358>)
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <fun_data_time_podgotovka+0x35c>)
 8003572:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ =  73;//*(((uint8_t *) &temp_float) + 0); //
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	2249      	movs	r2, #73	; 0x49
 800357c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	74;//*(((uint8_t *) &temp_float) + 1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	224a      	movs	r2, #74	; 0x4a
 8003586:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  75;//*(((uint8_t *) &temp_float) + 2); //
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	224b      	movs	r2, #75	; 0x4b
 8003590:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	76;//*(((uint8_t *) &temp_float) + 3);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	224c      	movs	r2, #76	; 0x4c
 800359a:	701a      	strb	r2, [r3, #0]

			 temp_float = calc_power_Output_8_f32; // (float32_t) data_Y[number_data_array];
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <fun_data_time_podgotovka+0x360>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <fun_data_time_podgotovka+0x35c>)
 80035a2:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	77;//*(((uint8_t *) &temp_float) + 0); //
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	224d      	movs	r2, #77	; 0x4d
 80035ac:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	78;//*(((uint8_t *) &temp_float) + 1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	224e      	movs	r2, #78	; 0x4e
 80035b6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  79;//*(((uint8_t *) &temp_float) + 2); //
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	224f      	movs	r2, #79	; 0x4f
 80035c0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	80;//*(((uint8_t *) &temp_float) + 3);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	2250      	movs	r2, #80	; 0x50
 80035ca:	701a      	strb	r2, [r3, #0]

			//	count_tic_finish = DWT_CYCCNT;//смотрим сколько натикало -цикл формирования массивов данных длится 4.894мкс (832 тика)
			//	count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

    return index_data_time_zamer;
 80035cc:	887b      	ldrh	r3, [r7, #2]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20008630 	.word	0x20008630
 80035e0:	20011f34 	.word	0x20011f34
 80035e4:	2000f638 	.word	0x2000f638

080035e8 <fun_data_scan_freq_podgotovka>:

void fun_data_scan_freq_podgotovka( uint8_t * buffer_data_scan_freq,  float32_t freq_float )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	ed87 0a00 	vstr	s0, [r7]
	//			 какой то код

			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float =  (freq_float +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 80035f4:	edd7 7a00 	vldr	s15, [r7]
 80035f8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003858 <fun_data_scan_freq_podgotovka+0x270>
 80035fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003600:	4b96      	ldr	r3, [pc, #600]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003602:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003606:	4995      	ldr	r1, [pc, #596]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	780a      	ldrb	r2, [r1, #0]
 8003610:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	4a90      	ldr	r2, [pc, #576]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800361a:	7852      	ldrb	r2, [r2, #1]
 800361c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	4a8d      	ldr	r2, [pc, #564]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003626:	7892      	ldrb	r2, [r2, #2]
 8003628:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	4a8a      	ldr	r2, [pc, #552]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003632:	78d2      	ldrb	r2, [r2, #3]
 8003634:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз
			 temp_float = (float32_t) arr1_Output_f32[8]; //
 8003636:	4b8a      	ldr	r3, [pc, #552]	; (8003860 <fun_data_scan_freq_podgotovka+0x278>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4a88      	ldr	r2, [pc, #544]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800363c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800363e:	4987      	ldr	r1, [pc, #540]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	780a      	ldrb	r2, [r1, #0]
 8003648:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	4a82      	ldr	r2, [pc, #520]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003652:	7852      	ldrb	r2, [r2, #1]
 8003654:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	4a7f      	ldr	r2, [pc, #508]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800365e:	7892      	ldrb	r2, [r2, #2]
 8003660:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	4a7c      	ldr	r2, [pc, #496]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800366a:	78d2      	ldrb	r2, [r2, #3]
 800366c:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз
			 temp_float = (float32_t) arr2_Output_f32[8]; //
 800366e:	4b7d      	ldr	r3, [pc, #500]	; (8003864 <fun_data_scan_freq_podgotovka+0x27c>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a7a      	ldr	r2, [pc, #488]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003674:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003676:	4979      	ldr	r1, [pc, #484]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	780a      	ldrb	r2, [r1, #0]
 8003680:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	4a74      	ldr	r2, [pc, #464]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800368a:	7852      	ldrb	r2, [r2, #1]
 800368c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	4a71      	ldr	r2, [pc, #452]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003696:	7892      	ldrb	r2, [r2, #2]
 8003698:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036a2:	78d2      	ldrb	r2, [r2, #3]
 80036a4:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз
			 temp_float = arr1_phase_Output_8_f32; //
 80036a6:	4b70      	ldr	r3, [pc, #448]	; (8003868 <fun_data_scan_freq_podgotovka+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6c      	ldr	r2, [pc, #432]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036ac:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036ae:	496b      	ldr	r1, [pc, #428]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	780a      	ldrb	r2, [r1, #0]
 80036b8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036c2:	7852      	ldrb	r2, [r2, #1]
 80036c4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	4a63      	ldr	r2, [pc, #396]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036ce:	7892      	ldrb	r2, [r2, #2]
 80036d0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	4a60      	ldr	r2, [pc, #384]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036da:	78d2      	ldrb	r2, [r2, #3]
 80036dc:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз
			 temp_float = arr2_phase_Output_8_f32; //
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <fun_data_scan_freq_podgotovka+0x284>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5e      	ldr	r2, [pc, #376]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036e4:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036e6:	495d      	ldr	r1, [pc, #372]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	780a      	ldrb	r2, [r1, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80036fa:	7852      	ldrb	r2, [r2, #1]
 80036fc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	4a55      	ldr	r2, [pc, #340]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003706:	7892      	ldrb	r2, [r2, #2]
 8003708:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003712:	78d2      	ldrb	r2, [r2, #3]
 8003714:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float =  shift_phase_I8_U8_f32; // (float32_t)
 8003716:	4b56      	ldr	r3, [pc, #344]	; (8003870 <fun_data_scan_freq_podgotovka+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a50      	ldr	r2, [pc, #320]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800371c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800371e:	494f      	ldr	r1, [pc, #316]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	780a      	ldrb	r2, [r1, #0]
 8003728:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	4a4a      	ldr	r2, [pc, #296]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003732:	7852      	ldrb	r2, [r2, #1]
 8003734:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	4a47      	ldr	r2, [pc, #284]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800373e:	7892      	ldrb	r2, [r2, #2]
 8003740:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	4a44      	ldr	r2, [pc, #272]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800374a:	78d2      	ldrb	r2, [r2, #3]
 800374c:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз
			 temp_float =   calc_power_Output_8_f32; //
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <fun_data_scan_freq_podgotovka+0x28c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a42      	ldr	r2, [pc, #264]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003754:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003756:	4941      	ldr	r1, [pc, #260]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	780a      	ldrb	r2, [r1, #0]
 8003760:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	4a3c      	ldr	r2, [pc, #240]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800376a:	7852      	ldrb	r2, [r2, #1]
 800376c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	4a39      	ldr	r2, [pc, #228]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003776:	7892      	ldrb	r2, [r2, #2]
 8003778:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 3);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	4a36      	ldr	r2, [pc, #216]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003782:	78d2      	ldrb	r2, [r2, #3]
 8003784:	701a      	strb	r2, [r3, #0]

			 // 7 график, сверху вниз
			 temp_float = calc_R_Output_8_f32;
 8003786:	4b3c      	ldr	r3, [pc, #240]	; (8003878 <fun_data_scan_freq_podgotovka+0x290>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800378c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800378e:	4933      	ldr	r1, [pc, #204]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	780a      	ldrb	r2, [r1, #0]
 8003798:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	4a2e      	ldr	r2, [pc, #184]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80037a2:	7852      	ldrb	r2, [r2, #1]
 80037a4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80037ae:	7892      	ldrb	r2, [r2, #2]
 80037b0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	4a28      	ldr	r2, [pc, #160]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80037ba:	78d2      	ldrb	r2, [r2, #3]
 80037bc:	701a      	strb	r2, [r3, #0]

			 // 8 график, сверху вниз
			 temp_float = 8;
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80037c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80037c4:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	65;//*(((uint8_t *) &temp_float) + 0); //
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	2241      	movs	r2, #65	; 0x41
 80037ce:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	66;//*(((uint8_t *) &temp_float) + 1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	2242      	movs	r2, #66	; 0x42
 80037d8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  67;//*(((uint8_t *) &temp_float) + 2); //
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	2243      	movs	r2, #67	; 0x43
 80037e2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	68;//*(((uint8_t *) &temp_float) + 3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	2244      	movs	r2, #68	; 0x44
 80037ec:	701a      	strb	r2, [r3, #0]

			 // 9 график, сверху вниз
			 temp_float = 9;
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80037f0:	4a22      	ldr	r2, [pc, #136]	; (800387c <fun_data_scan_freq_podgotovka+0x294>)
 80037f2:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80037f4:	4919      	ldr	r1, [pc, #100]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	780a      	ldrb	r2, [r1, #0]
 80037fe:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003808:	7852      	ldrb	r2, [r2, #1]
 800380a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003814:	7892      	ldrb	r2, [r2, #2]
 8003816:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003820:	78d2      	ldrb	r2, [r2, #3]
 8003822:	701a      	strb	r2, [r3, #0]

			 // 10 график, сверху вниз
			 temp_float = 10;
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <fun_data_scan_freq_podgotovka+0x298>)
 8003828:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 0); //
 800382a:	490c      	ldr	r1, [pc, #48]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	780a      	ldrb	r2, [r1, #0]
 8003834:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800383e:	7852      	ldrb	r2, [r2, #1]
 8003840:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <fun_data_scan_freq_podgotovka+0x274>)
 800384a:	7892      	ldrb	r2, [r2, #2]
 800384c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	e016      	b.n	8003884 <fun_data_scan_freq_podgotovka+0x29c>
 8003856:	bf00      	nop
 8003858:	42280000 	.word	0x42280000
 800385c:	20011f34 	.word	0x20011f34
 8003860:	2000b630 	.word	0x2000b630
 8003864:	2000d630 	.word	0x2000d630
 8003868:	2000f630 	.word	0x2000f630
 800386c:	2000f634 	.word	0x2000f634
 8003870:	2000f63c 	.word	0x2000f63c
 8003874:	2000f638 	.word	0x2000f638
 8003878:	2000f648 	.word	0x2000f648
 800387c:	41100000 	.word	0x41100000
 8003880:	41200000 	.word	0x41200000
 8003884:	4a11      	ldr	r2, [pc, #68]	; (80038cc <fun_data_scan_freq_podgotovka+0x2e4>)
 8003886:	78d2      	ldrb	r2, [r2, #3]
 8003888:	701a      	strb	r2, [r3, #0]

			 // 11 график, сверху вниз
			 temp_float = 11;
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <fun_data_scan_freq_podgotovka+0x2e4>)
 800388c:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <fun_data_scan_freq_podgotovka+0x2e8>)
 800388e:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <fun_data_scan_freq_podgotovka+0x2e4>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	780a      	ldrb	r2, [r1, #0]
 800389a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <fun_data_scan_freq_podgotovka+0x2e4>)
 80038a4:	7852      	ldrb	r2, [r2, #1]
 80038a6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <fun_data_scan_freq_podgotovka+0x2e4>)
 80038b0:	7892      	ldrb	r2, [r2, #2]
 80038b2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <fun_data_scan_freq_podgotovka+0x2e4>)
 80038bc:	78d2      	ldrb	r2, [r2, #3]
 80038be:	701a      	strb	r2, [r3, #0]

	//return HAL_OK;
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	20011f34 	.word	0x20011f34
 80038d0:	41300000 	.word	0x41300000

080038d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80038da:	b672      	cpsid	i
}
 80038dc:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
	uint16_t count_printf;
  __disable_irq();
  while (1)
  {
	  count_printf++;
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	3301      	adds	r3, #1
 80038e2:	80fb      	strh	r3, [r7, #6]
	  if (count_printf >1000)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ea:	d9f8      	bls.n	80038de <Error_Handler+0xa>
	  	  {
		  	printf("MAIN Error_Handler() Error_Handler_Debug\n");
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <Error_Handler+0x24>)
 80038ee:	f00c fdc5 	bl	801047c <puts>
		  	count_printf =0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	80fb      	strh	r3, [r7, #6]
	  count_printf++;
 80038f6:	e7f2      	b.n	80038de <Error_Handler+0xa>
 80038f8:	0801521c 	.word	0x0801521c

080038fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_MspInit+0x44>)
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_MspInit+0x44>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6613      	str	r3, [r2, #96]	; 0x60
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_MspInit+0x44>)
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_MspInit+0x44>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <HAL_MspInit+0x44>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_MspInit+0x44>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003932:	f005 fc85 	bl	8009240 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000

08003944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  count_printf++;
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <NMI_Handler+0x28>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <NMI_Handler+0x28>)
 8003952:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <NMI_Handler+0x28>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800395c:	d9f4      	bls.n	8003948 <NMI_Handler+0x4>
	  	  {
		  	printf("NMI Non maskable interrupt\n");
 800395e:	4804      	ldr	r0, [pc, #16]	; (8003970 <NMI_Handler+0x2c>)
 8003960:	f00c fd8c 	bl	801047c <puts>
		  	count_printf =0;
 8003964:	4b01      	ldr	r3, [pc, #4]	; (800396c <NMI_Handler+0x28>)
 8003966:	2200      	movs	r2, #0
 8003968:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 800396a:	e7ed      	b.n	8003948 <NMI_Handler+0x4>
 800396c:	20011f3c 	.word	0x20011f3c
 8003970:	08015248 	.word	0x08015248

08003974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  count_printf++;
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <HardFault_Handler+0x28>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HardFault_Handler+0x28>)
 8003982:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HardFault_Handler+0x28>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398c:	d9f4      	bls.n	8003978 <HardFault_Handler+0x4>
	  	  {
		  	printf("Hard fault interrupt\n");
 800398e:	4804      	ldr	r0, [pc, #16]	; (80039a0 <HardFault_Handler+0x2c>)
 8003990:	f00c fd74 	bl	801047c <puts>
		  	count_printf =0;
 8003994:	4b01      	ldr	r3, [pc, #4]	; (800399c <HardFault_Handler+0x28>)
 8003996:	2200      	movs	r2, #0
 8003998:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 800399a:	e7ed      	b.n	8003978 <HardFault_Handler+0x4>
 800399c:	20011f3c 	.word	0x20011f3c
 80039a0:	08015264 	.word	0x08015264

080039a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  count_printf++;
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <MemManage_Handler+0x28>)
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <MemManage_Handler+0x28>)
 80039b2:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <MemManage_Handler+0x28>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039bc:	d9f4      	bls.n	80039a8 <MemManage_Handler+0x4>
	  	  {
		  	printf("Memory management fault\n");
 80039be:	4804      	ldr	r0, [pc, #16]	; (80039d0 <MemManage_Handler+0x2c>)
 80039c0:	f00c fd5c 	bl	801047c <puts>
		  	count_printf =0;
 80039c4:	4b01      	ldr	r3, [pc, #4]	; (80039cc <MemManage_Handler+0x28>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80039ca:	e7ed      	b.n	80039a8 <MemManage_Handler+0x4>
 80039cc:	20011f3c 	.word	0x20011f3c
 80039d0:	0801527c 	.word	0x0801527c

080039d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  count_printf++;
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <BusFault_Handler+0x28>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <BusFault_Handler+0x28>)
 80039e2:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <BusFault_Handler+0x28>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ec:	d9f4      	bls.n	80039d8 <BusFault_Handler+0x4>
	  	  {
		  	printf("BusFault_Handler\n");
 80039ee:	4804      	ldr	r0, [pc, #16]	; (8003a00 <BusFault_Handler+0x2c>)
 80039f0:	f00c fd44 	bl	801047c <puts>
		  	count_printf =0;
 80039f4:	4b01      	ldr	r3, [pc, #4]	; (80039fc <BusFault_Handler+0x28>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80039fa:	e7ed      	b.n	80039d8 <BusFault_Handler+0x4>
 80039fc:	20011f3c 	.word	0x20011f3c
 8003a00:	08015294 	.word	0x08015294

08003a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  count_printf++;
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <UsageFault_Handler+0x28>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <UsageFault_Handler+0x28>)
 8003a12:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <UsageFault_Handler+0x28>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a1c:	d9f4      	bls.n	8003a08 <UsageFault_Handler+0x4>
	  	  {
		  	printf("UsageFault_Handler\n");
 8003a1e:	4804      	ldr	r0, [pc, #16]	; (8003a30 <UsageFault_Handler+0x2c>)
 8003a20:	f00c fd2c 	bl	801047c <puts>
		  	count_printf =0;
 8003a24:	4b01      	ldr	r3, [pc, #4]	; (8003a2c <UsageFault_Handler+0x28>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003a2a:	e7ed      	b.n	8003a08 <UsageFault_Handler+0x4>
 8003a2c:	20011f3c 	.word	0x20011f3c
 8003a30:	080152a8 	.word	0x080152a8

08003a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	printf("SVC_Handler()\n");
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <SVC_Handler+0x10>)
 8003a3a:	f00c fd1f 	bl	801047c <puts>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	080152bc 	.word	0x080152bc

08003a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler()\n");
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <DebugMon_Handler+0x10>)
 8003a4e:	f00c fd15 	bl	801047c <puts>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	080152cc 	.word	0x080152cc

08003a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	printf("PendSV_Handler()\n");
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <PendSV_Handler+0x10>)
 8003a62:	f00c fd0b 	bl	801047c <puts>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	080152e0 	.word	0x080152e0

08003a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a74:	f001 f8d6 	bl	8004c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <DMA1_Channel1_IRQHandler+0x10>)
 8003a82:	f003 fa1e 	bl	8006ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200003a4 	.word	0x200003a4

08003a90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	xMBRTUTransmitFSM();
 8003a94:	f00a fbea 	bl	800e26c <xMBRTUTransmitFSM>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <DMA1_Channel2_IRQHandler+0x14>)
 8003a9a:	f003 fa12 	bl	8006ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20012368 	.word	0x20012368

08003aa8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
//	if ((0U != (hdma_usart1_tx.Instance->CCR & DMA_IT_TC)) & (0U == (hdma_usart1_tx.Instance->CCR & DMA_IT_HT)))
//	{
//		xMBRTUTransmitFSM();
//	}
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <DMA1_Channel3_IRQHandler+0x10>)
 8003aae:	f003 fa08 	bl	8006ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20012308 	.word	0x20012308

08003abc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel4);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <DMA1_Channel4_IRQHandler+0x10>)
 8003ac2:	f003 f9fe 	bl	8006ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	2000048c 	.word	0x2000048c

08003ad0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <DMA1_Channel5_IRQHandler+0x10>)
 8003ad6:	f003 f9f4 	bl	8006ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200123c8 	.word	0x200123c8

08003ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	2300      	movs	r3, #0
 8003af0:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <USART1_IRQHandler+0x58>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <USART1_IRQHandler+0x58>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <USART1_IRQHandler+0x4a>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <USART1_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003b2a:	f00a fb35 	bl	800e198 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b2e:	4803      	ldr	r0, [pc, #12]	; (8003b3c <USART1_IRQHandler+0x58>)
 8003b30:	f008 faf0 	bl	800c114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20012158 	.word	0x20012158

08003b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <USART2_IRQHandler+0x58>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <USART2_IRQHandler+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <USART2_IRQHandler+0x4a>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <USART2_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003b86:	f00a fb07 	bl	800e198 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b8a:	4803      	ldr	r0, [pc, #12]	; (8003b98 <USART2_IRQHandler+0x58>)
 8003b8c:	f008 fac2 	bl	800c114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200121e8 	.word	0x200121e8

08003b9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <USART3_IRQHandler+0x10>)
 8003ba2:	f008 fab7 	bl	800c114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20012278 	.word	0x20012278

08003bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003bb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bb8:	f003 fce6 	bl	8007588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <TIM6_DAC_IRQHandler+0x10>)
 8003bc6:	f006 fdaf 	bl	800a728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20012028 	.word	0x20012028

08003bd4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <DMA2_Channel1_IRQHandler+0x10>)
 8003bda:	f003 f972 	bl	8006ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000404 	.word	0x20000404

08003be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	return 1;
 8003bec:	2301      	movs	r3, #1
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <_kill>:

int _kill(int pid, int sig)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c02:	f00b fba7 	bl	800f354 <__errno>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2216      	movs	r2, #22
 8003c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_exit>:

void _exit (int status)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ffe7 	bl	8003bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c2a:	e7fe      	b.n	8003c2a <_exit+0x12>

08003c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e00a      	b.n	8003c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c3e:	f3af 8000 	nop.w
 8003c42:	4601      	mov	r1, r0
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	60ba      	str	r2, [r7, #8]
 8003c4a:	b2ca      	uxtb	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	dbf0      	blt.n	8003c3e <_read+0x12>
	}

return len;
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_isatty>:

int _isatty(int file)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <_sbrk+0x5c>)
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <_sbrk+0x60>)
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <_sbrk+0x64>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <_sbrk+0x64>)
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <_sbrk+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d207      	bcs.n	8003d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d00:	f00b fb28 	bl	800f354 <__errno>
 8003d04:	4603      	mov	r3, r0
 8003d06:	220c      	movs	r2, #12
 8003d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e009      	b.n	8003d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <_sbrk+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <_sbrk+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <_sbrk+0x64>)
 8003d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20020000 	.word	0x20020000
 8003d30:	00004000 	.word	0x00004000
 8003d34:	20011f40 	.word	0x20011f40
 8003d38:	20013480 	.word	0x20013480

08003d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <SystemInit+0x20>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <SystemInit+0x20>)
 8003d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b0a0      	sub	sp, #128	; 0x80
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003d82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	611a      	str	r2, [r3, #16]
 8003d9e:	615a      	str	r2, [r3, #20]
 8003da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	2234      	movs	r2, #52	; 0x34
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f00b fb1d 	bl	800f3e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dae:	4b67      	ldr	r3, [pc, #412]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003db0:	4a67      	ldr	r2, [pc, #412]	; (8003f50 <MX_TIM1_Init+0x1f0>)
 8003db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003db4:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dba:	4b64      	ldr	r3, [pc, #400]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 127;
 8003dc0:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dc2:	227f      	movs	r2, #127	; 0x7f
 8003dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dc6:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dcc:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd2:	4b5e      	ldr	r3, [pc, #376]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003dd8:	485c      	ldr	r0, [pc, #368]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dda:	f006 f9c3 	bl	800a164 <HAL_TIM_Base_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003de4:	f7ff fd76 	bl	80038d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003de8:	4858      	ldr	r0, [pc, #352]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003dea:	f006 fb2a 	bl	800a442 <HAL_TIM_PWM_Init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003df4:	f7ff fd6e 	bl	80038d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003df8:	2307      	movs	r3, #7
 8003dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8003dfc:	4b55      	ldr	r3, [pc, #340]	; (8003f54 <MX_TIM1_Init+0x1f4>)
 8003dfe:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e04:	4619      	mov	r1, r3
 8003e06:	4851      	ldr	r0, [pc, #324]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003e08:	f006 ff49 	bl	800ac9e <HAL_TIM_SlaveConfigSynchro>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8003e12:	f7ff fd5f 	bl	80038d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e16:	2320      	movs	r3, #32
 8003e18:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e26:	4619      	mov	r1, r3
 8003e28:	4848      	ldr	r0, [pc, #288]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003e2a:	f007 fdbb 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003e34:	f7ff fd4e 	bl	80038d4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003e40:	2300      	movs	r3, #0
 8003e42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003e44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	483f      	ldr	r0, [pc, #252]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003e4e:	f007 fef1 	bl	800bc34 <HAL_TIMEx_ConfigBreakInput>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003e58:	f7ff fd3c 	bl	80038d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003e5c:	2370      	movs	r3, #112	; 0x70
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8003e60:	2340      	movs	r3, #64	; 0x40
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e64:	2300      	movs	r3, #0
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e7e:	2200      	movs	r2, #0
 8003e80:	4619      	mov	r1, r3
 8003e82:	4832      	ldr	r0, [pc, #200]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003e84:	f006 fdd0 	bl	800aa28 <HAL_TIM_PWM_ConfigChannel>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8003e8e:	f7ff fd21 	bl	80038d4 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8003e92:	2302      	movs	r3, #2
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	482b      	ldr	r0, [pc, #172]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003ea0:	f006 fdc2 	bl	800aa28 <HAL_TIM_PWM_ConfigChannel>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8003eaa:	f7ff fd13 	bl	80038d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM1;
 8003eae:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <MX_TIM1_Init+0x1f8>)
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003eb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003eba:	2208      	movs	r2, #8
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4823      	ldr	r0, [pc, #140]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003ec0:	f006 fdb2 	bl	800aa28 <HAL_TIM_PWM_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8003eca:	f7ff fd03 	bl	80038d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM2;
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <MX_TIM1_Init+0x1fc>)
 8003ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ed2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ed6:	220c      	movs	r2, #12
 8003ed8:	4619      	mov	r1, r3
 8003eda:	481c      	ldr	r0, [pc, #112]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003edc:	f006 fda4 	bl	800aa28 <HAL_TIM_PWM_ConfigChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003ee6:	f7ff fcf5 	bl	80038d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 85;
 8003efa:	2355      	movs	r3, #85	; 0x55
 8003efc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f20:	2300      	movs	r3, #0
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4807      	ldr	r0, [pc, #28]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003f2e:	f007 fdcf 	bl	800bad0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM1_Init+0x1dc>
  {
    Error_Handler();
 8003f38:	f7ff fccc 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f3c:	4803      	ldr	r0, [pc, #12]	; (8003f4c <MX_TIM1_Init+0x1ec>)
 8003f3e:	f000 fa7f 	bl	8004440 <HAL_TIM_MspPostInit>

}
 8003f42:	bf00      	nop
 8003f44:	3780      	adds	r7, #128	; 0x80
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20011f44 	.word	0x20011f44
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	00100060 	.word	0x00100060
 8003f58:	00010040 	.word	0x00010040
 8003f5c:	00010050 	.word	0x00010050

08003f60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b090      	sub	sp, #64	; 0x40
 8003f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f76:	f107 0320 	add.w	r3, r7, #32
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
 8003f90:	615a      	str	r2, [r3, #20]
 8003f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f94:	4b2d      	ldr	r3, [pc, #180]	; (800404c <MX_TIM2_Init+0xec>)
 8003f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <MX_TIM2_Init+0xec>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <MX_TIM2_Init+0xec>)
 8003fa4:	2260      	movs	r2, #96	; 0x60
 8003fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003fa8:	4b28      	ldr	r3, [pc, #160]	; (800404c <MX_TIM2_Init+0xec>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <MX_TIM2_Init+0xec>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <MX_TIM2_Init+0xec>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fba:	4824      	ldr	r0, [pc, #144]	; (800404c <MX_TIM2_Init+0xec>)
 8003fbc:	f006 f8d2 	bl	800a164 <HAL_TIM_Base_Init>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003fc6:	f7ff fc85 	bl	80038d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fca:	4820      	ldr	r0, [pc, #128]	; (800404c <MX_TIM2_Init+0xec>)
 8003fcc:	f006 fa39 	bl	800a442 <HAL_TIM_PWM_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003fd6:	f7ff fc7d 	bl	80038d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003fda:	2307      	movs	r3, #7
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8003fde:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <MX_TIM2_Init+0xf0>)
 8003fe0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4818      	ldr	r0, [pc, #96]	; (800404c <MX_TIM2_Init+0xec>)
 8003fea:	f006 fe58 	bl	800ac9e <HAL_TIM_SlaveConfigSynchro>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003ff4:	f7ff fc6e 	bl	80038d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8003ff8:	2350      	movs	r3, #80	; 0x50
 8003ffa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004000:	f107 0320 	add.w	r3, r7, #32
 8004004:	4619      	mov	r1, r3
 8004006:	4811      	ldr	r0, [pc, #68]	; (800404c <MX_TIM2_Init+0xec>)
 8004008:	f007 fccc 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8004012:	f7ff fc5f 	bl	80038d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004016:	2360      	movs	r3, #96	; 0x60
 8004018:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	2204      	movs	r2, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4807      	ldr	r0, [pc, #28]	; (800404c <MX_TIM2_Init+0xec>)
 800402e:	f006 fcfb 	bl	800aa28 <HAL_TIM_PWM_ConfigChannel>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004038:	f7ff fc4c 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800403c:	4803      	ldr	r0, [pc, #12]	; (800404c <MX_TIM2_Init+0xec>)
 800403e:	f000 f9ff 	bl	8004440 <HAL_TIM_MspPostInit>

}
 8004042:	bf00      	nop
 8004044:	3740      	adds	r7, #64	; 0x40
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20011f90 	.word	0x20011f90
 8004050:	00100060 	.word	0x00100060

08004054 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b090      	sub	sp, #64	; 0x40
 8004058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800405a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800406a:	f107 0320 	add.w	r3, r7, #32
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
 8004084:	615a      	str	r2, [r3, #20]
 8004086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <MX_TIM3_Init+0xe8>)
 800408a:	4a2d      	ldr	r2, [pc, #180]	; (8004140 <MX_TIM3_Init+0xec>)
 800408c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <MX_TIM3_Init+0xe8>)
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004094:	4b29      	ldr	r3, [pc, #164]	; (800413c <MX_TIM3_Init+0xe8>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 800409a:	4b28      	ldr	r3, [pc, #160]	; (800413c <MX_TIM3_Init+0xe8>)
 800409c:	2205      	movs	r2, #5
 800409e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <MX_TIM3_Init+0xe8>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a6:	4b25      	ldr	r3, [pc, #148]	; (800413c <MX_TIM3_Init+0xe8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040ac:	4823      	ldr	r0, [pc, #140]	; (800413c <MX_TIM3_Init+0xe8>)
 80040ae:	f006 f859 	bl	800a164 <HAL_TIM_Base_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040b8:	f7ff fc0c 	bl	80038d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040bc:	481f      	ldr	r0, [pc, #124]	; (800413c <MX_TIM3_Init+0xe8>)
 80040be:	f006 f9c0 	bl	800a442 <HAL_TIM_PWM_Init>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80040c8:	f7ff fc04 	bl	80038d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80040cc:	2307      	movs	r3, #7
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80040d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d8:	4619      	mov	r1, r3
 80040da:	4818      	ldr	r0, [pc, #96]	; (800413c <MX_TIM3_Init+0xe8>)
 80040dc:	f006 fddf 	bl	800ac9e <HAL_TIM_SlaveConfigSynchro>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80040e6:	f7ff fbf5 	bl	80038d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80040ea:	2320      	movs	r3, #32
 80040ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040f2:	f107 0320 	add.w	r3, r7, #32
 80040f6:	4619      	mov	r1, r3
 80040f8:	4810      	ldr	r0, [pc, #64]	; (800413c <MX_TIM3_Init+0xe8>)
 80040fa:	f007 fc53 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004104:	f7ff fbe6 	bl	80038d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004108:	2360      	movs	r3, #96	; 0x60
 800410a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 800410c:	2304      	movs	r3, #4
 800410e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	4619      	mov	r1, r3
 800411e:	4807      	ldr	r0, [pc, #28]	; (800413c <MX_TIM3_Init+0xe8>)
 8004120:	f006 fc82 	bl	800aa28 <HAL_TIM_PWM_ConfigChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800412a:	f7ff fbd3 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800412e:	4803      	ldr	r0, [pc, #12]	; (800413c <MX_TIM3_Init+0xe8>)
 8004130:	f000 f986 	bl	8004440 <HAL_TIM_MspPostInit>

}
 8004134:	bf00      	nop
 8004136:	3740      	adds	r7, #64	; 0x40
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20011fdc 	.word	0x20011fdc
 8004140:	40000400 	.word	0x40000400

08004144 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004156:	4a15      	ldr	r2, [pc, #84]	; (80041ac <MX_TIM6_Init+0x68>)
 8004158:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <MX_TIM6_Init+0x64>)
 800415c:	22a9      	movs	r2, #169	; 0xa9
 800415e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004168:	2231      	movs	r2, #49	; 0x31
 800416a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <MX_TIM6_Init+0x64>)
 800416e:	2200      	movs	r2, #0
 8004170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004172:	480d      	ldr	r0, [pc, #52]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004174:	f005 fff6 	bl	800a164 <HAL_TIM_Base_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800417e:	f7ff fba9 	bl	80038d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4806      	ldr	r0, [pc, #24]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004190:	f007 fc08 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800419a:	f7ff fb9b 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20012028 	.word	0x20012028
 80041ac:	40001000 	.word	0x40001000

080041b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80041c0:	4b15      	ldr	r3, [pc, #84]	; (8004218 <MX_TIM7_Init+0x68>)
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <MX_TIM7_Init+0x6c>)
 80041c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16999;
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <MX_TIM7_Init+0x68>)
 80041c8:	f244 2267 	movw	r2, #16999	; 0x4267
 80041cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <MX_TIM7_Init+0x68>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <MX_TIM7_Init+0x68>)
 80041d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <MX_TIM7_Init+0x68>)
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041e2:	480d      	ldr	r0, [pc, #52]	; (8004218 <MX_TIM7_Init+0x68>)
 80041e4:	f005 ffbe 	bl	800a164 <HAL_TIM_Base_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80041ee:	f7ff fb71 	bl	80038d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041f2:	2320      	movs	r3, #32
 80041f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4806      	ldr	r0, [pc, #24]	; (8004218 <MX_TIM7_Init+0x68>)
 8004200:	f007 fbd0 	bl	800b9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800420a:	f7ff fb63 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20012074 	.word	0x20012074
 800421c:	40001400 	.word	0x40001400

08004220 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <MX_TIM16_Init+0x44>)
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <MX_TIM16_Init+0x48>)
 8004228:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <MX_TIM16_Init+0x44>)
 800422c:	22a9      	movs	r2, #169	; 0xa9
 800422e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <MX_TIM16_Init+0x44>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <MX_TIM16_Init+0x44>)
 8004238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800423c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <MX_TIM16_Init+0x44>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <MX_TIM16_Init+0x44>)
 8004246:	2200      	movs	r2, #0
 8004248:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <MX_TIM16_Init+0x44>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004250:	4804      	ldr	r0, [pc, #16]	; (8004264 <MX_TIM16_Init+0x44>)
 8004252:	f005 ff87 	bl	800a164 <HAL_TIM_Base_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800425c:	f7ff fb3a 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200120c0 	.word	0x200120c0
 8004268:	40014400 	.word	0x40014400

0800426c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004270:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <MX_TIM17_Init+0x48>)
 8004272:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <MX_TIM17_Init+0x4c>)
 8004274:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16999;
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <MX_TIM17_Init+0x48>)
 8004278:	f244 2267 	movw	r2, #16999	; 0x4267
 800427c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <MX_TIM17_Init+0x48>)
 8004280:	2200      	movs	r2, #0
 8004282:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <MX_TIM17_Init+0x48>)
 8004286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <MX_TIM17_Init+0x48>)
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <MX_TIM17_Init+0x48>)
 8004294:	2200      	movs	r2, #0
 8004296:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <MX_TIM17_Init+0x48>)
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <MX_TIM17_Init+0x48>)
 80042a0:	f005 ff60 	bl	800a164 <HAL_TIM_Base_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80042aa:	f7ff fb13 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	2001210c 	.word	0x2001210c
 80042b8:	40014800 	.word	0x40014800

080042bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b090      	sub	sp, #64	; 0x40
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a52      	ldr	r2, [pc, #328]	; (8004424 <HAL_TIM_Base_MspInit+0x168>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d12a      	bne.n	8004334 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042de:	4b52      	ldr	r3, [pc, #328]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	4a51      	ldr	r2, [pc, #324]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e8:	6613      	str	r3, [r2, #96]	; 0x60
 80042ea:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f6:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fa:	4a4b      	ldr	r2, [pc, #300]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004314:	2312      	movs	r3, #18
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431c:	2300      	movs	r3, #0
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8004320:	2309      	movs	r3, #9
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004328:	4619      	mov	r1, r3
 800432a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800432e:	f002 ff5f 	bl	80071f0 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004332:	e072      	b.n	800441a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d10c      	bne.n	8004358 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800433e:	4b3a      	ldr	r3, [pc, #232]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	4a39      	ldr	r2, [pc, #228]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	623b      	str	r3, [r7, #32]
 8004354:	6a3b      	ldr	r3, [r7, #32]
}
 8004356:	e060      	b.n	800441a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a33      	ldr	r2, [pc, #204]	; (800442c <HAL_TIM_Base_MspInit+0x170>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10c      	bne.n	800437c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	6593      	str	r3, [r2, #88]	; 0x58
 800436e:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	69fb      	ldr	r3, [r7, #28]
}
 800437a:	e04e      	b.n	800441a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM6)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <HAL_TIM_Base_MspInit+0x174>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d114      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004386:	4b28      	ldr	r3, [pc, #160]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	4a27      	ldr	r2, [pc, #156]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 800438c:	f043 0310 	orr.w	r3, r3, #16
 8004390:	6593      	str	r3, [r2, #88]	; 0x58
 8004392:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2100      	movs	r1, #0
 80043a2:	2036      	movs	r0, #54	; 0x36
 80043a4:	f002 f977 	bl	8006696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043a8:	2036      	movs	r0, #54	; 0x36
 80043aa:	f002 f98e 	bl	80066ca <HAL_NVIC_EnableIRQ>
}
 80043ae:	e034      	b.n	800441a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM7)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <HAL_TIM_Base_MspInit+0x178>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80043c0:	f043 0320 	orr.w	r3, r3, #32
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
}
 80043d2:	e022      	b.n	800441a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM16)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_TIM_Base_MspInit+0x17c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10c      	bne.n	80043f8 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80043e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e2:	4a11      	ldr	r2, [pc, #68]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80043e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e8:	6613      	str	r3, [r2, #96]	; 0x60
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 80043ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
}
 80043f6:	e010      	b.n	800441a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM17)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0f      	ldr	r2, [pc, #60]	; (800443c <HAL_TIM_Base_MspInit+0x180>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10b      	bne.n	800441a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6613      	str	r3, [r2, #96]	; 0x60
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_TIM_Base_MspInit+0x16c>)
 8004410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	3740      	adds	r7, #64	; 0x40
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40021000 	.word	0x40021000
 800442c:	40000400 	.word	0x40000400
 8004430:	40001000 	.word	0x40001000
 8004434:	40001400 	.word	0x40001400
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	; 0x30
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 031c 	add.w	r3, r7, #28
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a62      	ldr	r2, [pc, #392]	; (80045e8 <HAL_TIM_MspPostInit+0x1a8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d17a      	bne.n	8004558 <HAL_TIM_MspPostInit+0x118>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004462:	4b62      	ldr	r3, [pc, #392]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	4a61      	ldr	r2, [pc, #388]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446e:	4b5f      	ldr	r3, [pc, #380]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447a:	4b5c      	ldr	r3, [pc, #368]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	4a5b      	ldr	r2, [pc, #364]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004486:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4a55      	ldr	r2, [pc, #340]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800449e:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
    PB13     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	2300      	movs	r3, #0
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80044ba:	2302      	movs	r3, #2
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044be:	f107 031c 	add.w	r3, r7, #28
 80044c2:	4619      	mov	r1, r3
 80044c4:	484a      	ldr	r0, [pc, #296]	; (80045f0 <HAL_TIM_MspPostInit+0x1b0>)
 80044c6:	f002 fe93 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d0:	2302      	movs	r3, #2
 80044d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80044d8:	2301      	movs	r3, #1
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80044dc:	2306      	movs	r3, #6
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e0:	f107 031c 	add.w	r3, r7, #28
 80044e4:	4619      	mov	r1, r3
 80044e6:	4843      	ldr	r0, [pc, #268]	; (80045f4 <HAL_TIM_MspPostInit+0x1b4>)
 80044e8:	f002 fe82 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80044fe:	2306      	movs	r3, #6
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004502:	f107 031c 	add.w	r3, r7, #28
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450c:	f002 fe70 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800451e:	2301      	movs	r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004522:	2306      	movs	r3, #6
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004530:	f002 fe5e 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004542:	2300      	movs	r3, #0
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8004546:	230c      	movs	r3, #12
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454a:	f107 031c 	add.w	r3, r7, #28
 800454e:	4619      	mov	r1, r3
 8004550:	4828      	ldr	r0, [pc, #160]	; (80045f4 <HAL_TIM_MspPostInit+0x1b4>)
 8004552:	f002 fe4d 	bl	80071f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004556:	e043      	b.n	80045e0 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d11d      	bne.n	800459e <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800457a:	2302      	movs	r3, #2
 800457c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458e:	f107 031c 	add.w	r3, r7, #28
 8004592:	4619      	mov	r1, r3
 8004594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004598:	f002 fe2a 	bl	80071f0 <HAL_GPIO_Init>
}
 800459c:	e020      	b.n	80045e0 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM3)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <HAL_TIM_MspPostInit+0x1b8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d11b      	bne.n	80045e0 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 80045ae:	f043 0302 	orr.w	r3, r3, #2
 80045b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_TIM_MspPostInit+0x1ac>)
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80045c0:	2310      	movs	r3, #16
 80045c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c4:	2302      	movs	r3, #2
 80045c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045d0:	2302      	movs	r3, #2
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d4:	f107 031c 	add.w	r3, r7, #28
 80045d8:	4619      	mov	r1, r3
 80045da:	4806      	ldr	r0, [pc, #24]	; (80045f4 <HAL_TIM_MspPostInit+0x1b4>)
 80045dc:	f002 fe08 	bl	80071f0 <HAL_GPIO_Init>
}
 80045e0:	bf00      	nop
 80045e2:	3730      	adds	r7, #48	; 0x30
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	48000800 	.word	0x48000800
 80045f4:	48000400 	.word	0x48000400
 80045f8:	40000400 	.word	0x40000400

080045fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004600:	4b24      	ldr	r3, [pc, #144]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004602:	4a25      	ldr	r2, [pc, #148]	; (8004698 <MX_USART1_UART_Init+0x9c>)
 8004604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004608:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800460c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800460e:	4b21      	ldr	r3, [pc, #132]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004616:	2200      	movs	r2, #0
 8004618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <MX_USART1_UART_Init+0x98>)
 800461c:	2200      	movs	r2, #0
 800461e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004622:	220c      	movs	r2, #12
 8004624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <MX_USART1_UART_Init+0x98>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004634:	2200      	movs	r2, #0
 8004636:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <MX_USART1_UART_Init+0x98>)
 800463a:	2200      	movs	r2, #0
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004640:	2200      	movs	r2, #0
 8004642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004644:	2300      	movs	r3, #0
 8004646:	2200      	movs	r2, #0
 8004648:	2100      	movs	r1, #0
 800464a:	4812      	ldr	r0, [pc, #72]	; (8004694 <MX_USART1_UART_Init+0x98>)
 800464c:	f008 fece 	bl	800d3ec <HAL_RS485Ex_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8004656:	f7ff f93d 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800465a:	2100      	movs	r1, #0
 800465c:	480d      	ldr	r0, [pc, #52]	; (8004694 <MX_USART1_UART_Init+0x98>)
 800465e:	f008 ffc0 	bl	800d5e2 <HAL_UARTEx_SetTxFifoThreshold>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8004668:	f7ff f934 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800466c:	2100      	movs	r1, #0
 800466e:	4809      	ldr	r0, [pc, #36]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004670:	f008 fff5 	bl	800d65e <HAL_UARTEx_SetRxFifoThreshold>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 800467a:	f7ff f92b 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800467e:	4805      	ldr	r0, [pc, #20]	; (8004694 <MX_USART1_UART_Init+0x98>)
 8004680:	f008 ff76 	bl	800d570 <HAL_UARTEx_DisableFifoMode>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800468a:	f7ff f923 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20012158 	.word	0x20012158
 8004698:	40013800 	.word	0x40013800

0800469c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046a2:	4a23      	ldr	r2, [pc, #140]	; (8004730 <MX_USART2_UART_Init+0x94>)
 80046a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046b4:	4b1d      	ldr	r3, [pc, #116]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046ba:	4b1c      	ldr	r3, [pc, #112]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046bc:	2200      	movs	r2, #0
 80046be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046c2:	220c      	movs	r2, #12
 80046c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046c6:	4b19      	ldr	r3, [pc, #100]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046da:	2200      	movs	r2, #0
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046e4:	4811      	ldr	r0, [pc, #68]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046e6:	f007 fc32 	bl	800bf4e <HAL_UART_Init>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80046f0:	f7ff f8f0 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046f4:	2100      	movs	r1, #0
 80046f6:	480d      	ldr	r0, [pc, #52]	; (800472c <MX_USART2_UART_Init+0x90>)
 80046f8:	f008 ff73 	bl	800d5e2 <HAL_UARTEx_SetTxFifoThreshold>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004702:	f7ff f8e7 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004706:	2100      	movs	r1, #0
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <MX_USART2_UART_Init+0x90>)
 800470a:	f008 ffa8 	bl	800d65e <HAL_UARTEx_SetRxFifoThreshold>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004714:	f7ff f8de 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004718:	4804      	ldr	r0, [pc, #16]	; (800472c <MX_USART2_UART_Init+0x90>)
 800471a:	f008 ff29 	bl	800d570 <HAL_UARTEx_DisableFifoMode>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004724:	f7ff f8d6 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200121e8 	.word	0x200121e8
 8004730:	40004400 	.word	0x40004400

08004734 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004738:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 800473a:	4a26      	ldr	r2, [pc, #152]	; (80047d4 <MX_USART3_UART_Init+0xa0>)
 800473c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004740:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 800474e:	2200      	movs	r2, #0
 8004750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004752:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 800475a:	2208      	movs	r2, #8
 800475c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 800476c:	2200      	movs	r2, #0
 800476e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004772:	2200      	movs	r2, #0
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004778:	2220      	movs	r2, #32
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 800477e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004784:	4812      	ldr	r0, [pc, #72]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 8004786:	f007 fbe2 	bl	800bf4e <HAL_UART_Init>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 8004790:	f7ff f8a0 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_4) != HAL_OK)
 8004794:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8004798:	480d      	ldr	r0, [pc, #52]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 800479a:	f008 ff22 	bl	800d5e2 <HAL_UARTEx_SetTxFifoThreshold>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 80047a4:	f7ff f896 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_4) != HAL_OK)
 80047a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047ac:	4808      	ldr	r0, [pc, #32]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 80047ae:	f008 ff56 	bl	800d65e <HAL_UARTEx_SetRxFifoThreshold>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_USART3_UART_Init+0x88>
  {
    Error_Handler();
 80047b8:	f7ff f88c 	bl	80038d4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 80047bc:	4804      	ldr	r0, [pc, #16]	; (80047d0 <MX_USART3_UART_Init+0x9c>)
 80047be:	f008 fe9c 	bl	800d4fa <HAL_UARTEx_EnableFifoMode>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <MX_USART3_UART_Init+0x98>
  {
    Error_Handler();
 80047c8:	f7ff f884 	bl	80038d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80047cc:	bf00      	nop
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20012278 	.word	0x20012278
 80047d4:	40004800 	.word	0x40004800

080047d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b0a4      	sub	sp, #144	; 0x90
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f4:	2254      	movs	r2, #84	; 0x54
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f00a fdf5 	bl	800f3e8 <memset>
  if(uartHandle->Instance==USART1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a82      	ldr	r2, [pc, #520]	; (8004a0c <HAL_UART_MspInit+0x234>)
 8004804:	4293      	cmp	r3, r2
 8004806:	f040 808e 	bne.w	8004926 <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800480a:	2301      	movs	r3, #1
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800480e:	2300      	movs	r3, #0
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004816:	4618      	mov	r0, r3
 8004818:	f005 fa56 	bl	8009cc8 <HAL_RCCEx_PeriphCLKConfig>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004822:	f7ff f857 	bl	80038d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004826:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	4a79      	ldr	r2, [pc, #484]	; (8004a10 <HAL_UART_MspInit+0x238>)
 800482c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004830:	6613      	str	r3, [r2, #96]	; 0x60
 8004832:	4b77      	ldr	r3, [pc, #476]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800483e:	4b74      	ldr	r3, [pc, #464]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004842:	4a73      	ldr	r2, [pc, #460]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800484a:	4b71      	ldr	r3, [pc, #452]	; (8004a10 <HAL_UART_MspInit+0x238>)
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	4b6e      	ldr	r3, [pc, #440]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	4a6d      	ldr	r2, [pc, #436]	; (8004a10 <HAL_UART_MspInit+0x238>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004862:	4b6b      	ldr	r3, [pc, #428]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800486e:	2330      	movs	r3, #48	; 0x30
 8004870:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004884:	2307      	movs	r3, #7
 8004886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800488e:	4619      	mov	r1, r3
 8004890:	4860      	ldr	r0, [pc, #384]	; (8004a14 <HAL_UART_MspInit+0x23c>)
 8004892:	f002 fcad 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800489a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489c:	2302      	movs	r3, #2
 800489e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048ae:	2307      	movs	r3, #7
 80048b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048b8:	4619      	mov	r1, r3
 80048ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048be:	f002 fc97 	bl	80071f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 80048c2:	4b55      	ldr	r3, [pc, #340]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048c4:	4a55      	ldr	r2, [pc, #340]	; (8004a1c <HAL_UART_MspInit+0x244>)
 80048c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048ca:	2219      	movs	r2, #25
 80048cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048ce:	4b52      	ldr	r3, [pc, #328]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048d0:	2210      	movs	r2, #16
 80048d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048da:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048dc:	2280      	movs	r2, #128	; 0x80
 80048de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e0:	4b4d      	ldr	r3, [pc, #308]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048e6:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80048ec:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80048f8:	4847      	ldr	r0, [pc, #284]	; (8004a18 <HAL_UART_MspInit+0x240>)
 80048fa:	f002 f8ff 	bl	8006afc <HAL_DMA_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8004904:	f7fe ffe6 	bl	80038d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_UART_MspInit+0x240>)
 800490c:	679a      	str	r2, [r3, #120]	; 0x78
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_UART_MspInit+0x240>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004914:	2200      	movs	r2, #0
 8004916:	2100      	movs	r1, #0
 8004918:	2025      	movs	r0, #37	; 0x25
 800491a:	f001 febc 	bl	8006696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800491e:	2025      	movs	r0, #37	; 0x25
 8004920:	f001 fed3 	bl	80066ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004924:	e0f3      	b.n	8004b0e <HAL_UART_MspInit+0x336>
  else if(uartHandle->Instance==USART2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3d      	ldr	r2, [pc, #244]	; (8004a20 <HAL_UART_MspInit+0x248>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d17d      	bne.n	8004a2c <HAL_UART_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004930:	2302      	movs	r3, #2
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004934:	2300      	movs	r3, #0
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800493c:	4618      	mov	r0, r3
 800493e:	f005 f9c3 	bl	8009cc8 <HAL_RCCEx_PeriphCLKConfig>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_UART_MspInit+0x174>
      Error_Handler();
 8004948:	f7fe ffc4 	bl	80038d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800494c:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <HAL_UART_MspInit+0x238>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004956:	6593      	str	r3, [r2, #88]	; 0x58
 8004958:	4b2d      	ldr	r3, [pc, #180]	; (8004a10 <HAL_UART_MspInit+0x238>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004964:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <HAL_UART_MspInit+0x238>)
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_UART_MspInit+0x238>)
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800497c:	230c      	movs	r3, #12
 800497e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	2302      	movs	r3, #2
 8004982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004992:	2307      	movs	r3, #7
 8004994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004998:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800499c:	4619      	mov	r1, r3
 800499e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a2:	f002 fc25 	bl	80071f0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80049a6:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049a8:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_UART_MspInit+0x250>)
 80049aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049ae:	221b      	movs	r2, #27
 80049b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049b4:	2210      	movs	r2, #16
 80049b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049ca:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80049dc:	4811      	ldr	r0, [pc, #68]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049de:	f002 f88d 	bl	8006afc <HAL_DMA_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_UART_MspInit+0x214>
      Error_Handler();
 80049e8:	f7fe ff74 	bl	80038d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049f0:	679a      	str	r2, [r3, #120]	; 0x78
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <HAL_UART_MspInit+0x24c>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2100      	movs	r1, #0
 80049fc:	2026      	movs	r0, #38	; 0x26
 80049fe:	f001 fe4a 	bl	8006696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a02:	2026      	movs	r0, #38	; 0x26
 8004a04:	f001 fe61 	bl	80066ca <HAL_NVIC_EnableIRQ>
}
 8004a08:	e081      	b.n	8004b0e <HAL_UART_MspInit+0x336>
 8004a0a:	bf00      	nop
 8004a0c:	40013800 	.word	0x40013800
 8004a10:	40021000 	.word	0x40021000
 8004a14:	48000800 	.word	0x48000800
 8004a18:	20012308 	.word	0x20012308
 8004a1c:	40020030 	.word	0x40020030
 8004a20:	40004400 	.word	0x40004400
 8004a24:	20012368 	.word	0x20012368
 8004a28:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART3)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a39      	ldr	r2, [pc, #228]	; (8004b18 <HAL_UART_MspInit+0x340>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d16b      	bne.n	8004b0e <HAL_UART_MspInit+0x336>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004a36:	2304      	movs	r3, #4
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a42:	4618      	mov	r0, r3
 8004a44:	f005 f940 	bl	8009cc8 <HAL_RCCEx_PeriphCLKConfig>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8004a4e:	f7fe ff41 	bl	80038d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a52:	4b32      	ldr	r3, [pc, #200]	; (8004b1c <HAL_UART_MspInit+0x344>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	4a31      	ldr	r2, [pc, #196]	; (8004b1c <HAL_UART_MspInit+0x344>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_UART_MspInit+0x344>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_UART_MspInit+0x344>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <HAL_UART_MspInit+0x344>)
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a76:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <HAL_UART_MspInit+0x344>)
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a86:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	481e      	ldr	r0, [pc, #120]	; (8004b20 <HAL_UART_MspInit+0x348>)
 8004aa8:	f002 fba2 	bl	80071f0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <HAL_UART_MspInit+0x350>)
 8004ab0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ab4:	221d      	movs	r2, #29
 8004ab6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004aba:	2210      	movs	r2, #16
 8004abc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ae2:	4810      	ldr	r0, [pc, #64]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004ae4:	f002 f80a 	bl	8006afc <HAL_DMA_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8004aee:	f7fe fef1 	bl	80038d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004af6:	679a      	str	r2, [r3, #120]	; 0x78
 8004af8:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <HAL_UART_MspInit+0x34c>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2100      	movs	r1, #0
 8004b02:	2027      	movs	r0, #39	; 0x27
 8004b04:	f001 fdc7 	bl	8006696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b08:	2027      	movs	r0, #39	; 0x27
 8004b0a:	f001 fdde 	bl	80066ca <HAL_NVIC_EnableIRQ>
}
 8004b0e:	bf00      	nop
 8004b10:	3790      	adds	r7, #144	; 0x90
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40004800 	.word	0x40004800
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	48000400 	.word	0x48000400
 8004b24:	200123c8 	.word	0x200123c8
 8004b28:	40020058 	.word	0x40020058

08004b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b2c:	480d      	ldr	r0, [pc, #52]	; (8004b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b30:	480d      	ldr	r0, [pc, #52]	; (8004b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b32:	490e      	ldr	r1, [pc, #56]	; (8004b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b34:	4a0e      	ldr	r2, [pc, #56]	; (8004b70 <LoopForever+0xe>)
  movs r3, #0
 8004b36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004b38:	e002      	b.n	8004b40 <LoopCopyDataInit>

08004b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b3e:	3304      	adds	r3, #4

08004b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b44:	d3f9      	bcc.n	8004b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b48:	4c0b      	ldr	r4, [pc, #44]	; (8004b78 <LoopForever+0x16>)
  movs r3, #0
 8004b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b4c:	e001      	b.n	8004b52 <LoopFillZerobss>

08004b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b50:	3204      	adds	r2, #4

08004b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b54:	d3fb      	bcc.n	8004b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b56:	f7ff f8f1 	bl	8003d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b5a:	f00a fc13 	bl	800f384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b5e:	f7fc ffdf 	bl	8001b20 <main>

08004b62 <LoopForever>:

LoopForever:
    b LoopForever
 8004b62:	e7fe      	b.n	8004b62 <LoopForever>
  ldr   r0, =_estack
 8004b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b6c:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8004b70:	0802b1b0 	.word	0x0802b1b0
  ldr r2, =_sbss
 8004b74:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8004b78:	2001347c 	.word	0x2001347c

08004b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b7c:	e7fe      	b.n	8004b7c <ADC1_2_IRQHandler>

08004b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b88:	2003      	movs	r0, #3
 8004b8a:	f001 fd79 	bl	8006680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f000 f80e 	bl	8004bb0 <HAL_InitTick>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	71fb      	strb	r3, [r7, #7]
 8004b9e:	e001      	b.n	8004ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ba0:	f7fe feac 	bl	80038fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ba4:	79fb      	ldrb	r3, [r7, #7]

}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_InitTick+0x68>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d022      	beq.n	8004c0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004bc4:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <HAL_InitTick+0x6c>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_InitTick+0x68>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 fd84 	bl	80066e6 <HAL_SYSTICK_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10f      	bne.n	8004c04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b0f      	cmp	r3, #15
 8004be8:	d809      	bhi.n	8004bfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bea:	2200      	movs	r2, #0
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf2:	f001 fd50 	bl	8006696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <HAL_InitTick+0x70>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e007      	b.n	8004c0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	e004      	b.n	8004c0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e001      	b.n	8004c0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000038 	.word	0x20000038
 8004c1c:	20000030 	.word	0x20000030
 8004c20:	20000034 	.word	0x20000034

08004c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_IncTick+0x1c>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_IncTick+0x20>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <HAL_IncTick+0x1c>)
 8004c34:	6013      	str	r3, [r2, #0]
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	20012428 	.word	0x20012428
 8004c44:	20000038 	.word	0x20000038

08004c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_GetTick+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20012428 	.word	0x20012428

08004c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c68:	f7ff ffee 	bl	8004c48 <HAL_GetTick>
 8004c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d004      	beq.n	8004c84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_Delay+0x40>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c84:	bf00      	nop
 8004c86:	f7ff ffdf 	bl	8004c48 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d8f7      	bhi.n	8004c86 <HAL_Delay+0x26>
  {
  }
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000038 	.word	0x20000038

08004ca4 <LL_ADC_SetCommonClock>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_ADC_SetCommonPathInternalCh>:
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_ADC_GetCommonPathInternalCh>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_ADC_SetOffset>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3360      	adds	r3, #96	; 0x60
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <LL_ADC_SetOffset+0x44>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	03fff000 	.word	0x03fff000

08004d54 <LL_ADC_GetOffsetChannel>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3360      	adds	r3, #96	; 0x60
 8004d62:	461a      	mov	r2, r3
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_ADC_SetOffsetState>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3360      	adds	r3, #96	; 0x60
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	601a      	str	r2, [r3, #0]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_ADC_SetOffsetSign>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	b087      	sub	sp, #28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3360      	adds	r3, #96	; 0x60
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_SetOffsetSaturation>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3360      	adds	r3, #96	; 0x60
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	615a      	str	r2, [r3, #20]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_ADC_REG_SetSequencerRanks>:
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3330      	adds	r3, #48	; 0x30
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	4413      	add	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	211f      	movs	r1, #31
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0e9b      	lsrs	r3, r3, #26
 8004ea6:	f003 011f 	and.w	r1, r3, #31
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <LL_ADC_SetChannelSamplingTime>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0e5b      	lsrs	r3, r3, #25
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	0d1b      	lsrs	r3, r3, #20
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2107      	movs	r1, #7
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	401a      	ands	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	0d1b      	lsrs	r3, r3, #20
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <LL_ADC_SetChannelSingleDiff>:
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10a      	bne.n	8004f46 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004f44:	e00a      	b.n	8004f5c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f52:	43db      	mvns	r3, r3
 8004f54:	401a      	ands	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	407f0000 	.word	0x407f0000

08004f6c <LL_ADC_DisableDeepPowerDown>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6093      	str	r3, [r2, #8]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa4:	d101      	bne.n	8004faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_ADC_EnableInternalRegulator>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff4:	d101      	bne.n	8004ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_ADC_Enable>:
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800501c:	f043 0201 	orr.w	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <LL_ADC_Disable>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005044:	f043 0202 	orr.w	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_ADC_IsEnabled>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <LL_ADC_IsEnabled+0x18>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <LL_ADC_IsEnabled+0x1a>
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_ADC_IsDisableOngoing>:
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b02      	cmp	r3, #2
 8005090:	d101      	bne.n	8005096 <LL_ADC_IsDisableOngoing+0x18>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <LL_ADC_IsDisableOngoing+0x1a>
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d101      	bne.n	80050bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d101      	bne.n	80050e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e1af      	b.n	800546a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fc f8c3 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff ff2d 	bl	8004f90 <LL_ADC_IsDeepPowerDownEnabled>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff13 	bl	8004f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff48 	bl	8004fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d115      	bne.n	8005182 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff ff2c 	bl	8004fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005160:	4b9f      	ldr	r3, [pc, #636]	; (80053e0 <HAL_ADC_Init+0x2f0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	099b      	lsrs	r3, r3, #6
 8005166:	4a9f      	ldr	r2, [pc, #636]	; (80053e4 <HAL_ADC_Init+0x2f4>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	099b      	lsrs	r3, r3, #6
 800516e:	3301      	adds	r3, #1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005174:	e002      	b.n	800517c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3b01      	subs	r3, #1
 800517a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f9      	bne.n	8005176 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff2a 	bl	8004fe0 <LL_ADC_IsInternalRegulatorEnabled>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	f043 0210 	orr.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff76 	bl	80050a4 <LL_ADC_REG_IsConversionOngoing>
 80051b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 8148 	bne.w	8005458 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 8144 	bne.w	8005458 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80051d8:	f043 0202 	orr.w	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff37 	bl	8005058 <LL_ADC_IsEnabled>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d141      	bne.n	8005274 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f8:	d004      	beq.n	8005204 <HAL_ADC_Init+0x114>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7a      	ldr	r2, [pc, #488]	; (80053e8 <HAL_ADC_Init+0x2f8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10f      	bne.n	8005224 <HAL_ADC_Init+0x134>
 8005204:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005208:	f7ff ff26 	bl	8005058 <LL_ADC_IsEnabled>
 800520c:	4604      	mov	r4, r0
 800520e:	4876      	ldr	r0, [pc, #472]	; (80053e8 <HAL_ADC_Init+0x2f8>)
 8005210:	f7ff ff22 	bl	8005058 <LL_ADC_IsEnabled>
 8005214:	4603      	mov	r3, r0
 8005216:	4323      	orrs	r3, r4
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e012      	b.n	800524a <HAL_ADC_Init+0x15a>
 8005224:	4871      	ldr	r0, [pc, #452]	; (80053ec <HAL_ADC_Init+0x2fc>)
 8005226:	f7ff ff17 	bl	8005058 <LL_ADC_IsEnabled>
 800522a:	4604      	mov	r4, r0
 800522c:	4870      	ldr	r0, [pc, #448]	; (80053f0 <HAL_ADC_Init+0x300>)
 800522e:	f7ff ff13 	bl	8005058 <LL_ADC_IsEnabled>
 8005232:	4603      	mov	r3, r0
 8005234:	431c      	orrs	r4, r3
 8005236:	486f      	ldr	r0, [pc, #444]	; (80053f4 <HAL_ADC_Init+0x304>)
 8005238:	f7ff ff0e 	bl	8005058 <LL_ADC_IsEnabled>
 800523c:	4603      	mov	r3, r0
 800523e:	4323      	orrs	r3, r4
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d012      	beq.n	8005274 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005256:	d004      	beq.n	8005262 <HAL_ADC_Init+0x172>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a62      	ldr	r2, [pc, #392]	; (80053e8 <HAL_ADC_Init+0x2f8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <HAL_ADC_Init+0x176>
 8005262:	4a65      	ldr	r2, [pc, #404]	; (80053f8 <HAL_ADC_Init+0x308>)
 8005264:	e000      	b.n	8005268 <HAL_ADC_Init+0x178>
 8005266:	4a65      	ldr	r2, [pc, #404]	; (80053fc <HAL_ADC_Init+0x30c>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4619      	mov	r1, r3
 800526e:	4610      	mov	r0, r2
 8005270:	f7ff fd18 	bl	8004ca4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7f5b      	ldrb	r3, [r3, #29]
 8005278:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800527e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005284:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800528a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005292:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d106      	bne.n	80052b0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	3b01      	subs	r3, #1
 80052a8:	045b      	lsls	r3, r3, #17
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_ADC_Init+0x310>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	430b      	orrs	r3, r1
 80052de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fed2 	bl	80050a4 <LL_ADC_REG_IsConversionOngoing>
 8005300:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fedf 	bl	80050ca <LL_ADC_INJ_IsConversionOngoing>
 800530c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d17f      	bne.n	8005414 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d17c      	bne.n	8005414 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800531e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005326:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005336:	f023 0302 	bic.w	r3, r3, #2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	430b      	orrs	r3, r1
 8005342:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800535a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005364:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6911      	ldr	r1, [r2, #16]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	430b      	orrs	r3, r1
 8005376:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800537a:	e013      	b.n	80053a4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800538a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800539c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d12a      	bne.n	8005404 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053c4:	4311      	orrs	r1, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053ca:	4311      	orrs	r1, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053d0:	430a      	orrs	r2, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
 80053de:	e019      	b.n	8005414 <HAL_ADC_Init+0x324>
 80053e0:	20000030 	.word	0x20000030
 80053e4:	053e2d63 	.word	0x053e2d63
 80053e8:	50000100 	.word	0x50000100
 80053ec:	50000400 	.word	0x50000400
 80053f0:	50000500 	.word	0x50000500
 80053f4:	50000600 	.word	0x50000600
 80053f8:	50000300 	.word	0x50000300
 80053fc:	50000700 	.word	0x50000700
 8005400:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d10c      	bne.n	8005436 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f023 010f 	bic.w	r1, r3, #15
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	1e5a      	subs	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
 8005434:	e007      	b.n	8005446 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 020f 	bic.w	r2, r2, #15
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	65da      	str	r2, [r3, #92]	; 0x5c
 8005456:	e007      	b.n	8005468 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545c:	f043 0210 	orr.w	r2, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005468:	7ffb      	ldrb	r3, [r7, #31]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	bf00      	nop

08005474 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b0b6      	sub	sp, #216	; 0xd8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d102      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x24>
 80054ba:	2302      	movs	r3, #2
 80054bc:	f000 bc13 	b.w	8005ce6 <HAL_ADC_ConfigChannel+0x84a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fde9 	bl	80050a4 <LL_ADC_REG_IsConversionOngoing>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 83f3 	bne.w	8005cc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7ff fcc1 	bl	8004e6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fdd7 	bl	80050a4 <LL_ADC_REG_IsConversionOngoing>
 80054f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fde3 	bl	80050ca <LL_ADC_INJ_IsConversionOngoing>
 8005504:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005508:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 81d9 	bne.w	80058c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005516:	2b00      	cmp	r3, #0
 8005518:	f040 81d4 	bne.w	80058c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005524:	d10f      	bne.n	8005546 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	4619      	mov	r1, r3
 8005532:	f7ff fcc8 	bl	8004ec6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fc6f 	bl	8004e22 <LL_ADC_SetSamplingTimeCommonConfig>
 8005544:	e00e      	b.n	8005564 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	461a      	mov	r2, r3
 8005554:	f7ff fcb7 	bl	8004ec6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fc5f 	bl	8004e22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b04      	cmp	r3, #4
 8005584:	d022      	beq.n	80055cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6919      	ldr	r1, [r3, #16]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005596:	f7ff fbb9 	bl	8004d0c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6919      	ldr	r1, [r3, #16]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7ff fc05 	bl	8004db6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6919      	ldr	r1, [r3, #16]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	7f1b      	ldrb	r3, [r3, #28]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d102      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x126>
 80055bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c0:	e000      	b.n	80055c4 <HAL_ADC_ConfigChannel+0x128>
 80055c2:	2300      	movs	r3, #0
 80055c4:	461a      	mov	r2, r3
 80055c6:	f7ff fc11 	bl	8004dec <LL_ADC_SetOffsetSaturation>
 80055ca:	e17b      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fbbe 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 80055d8:	4603      	mov	r3, r0
 80055da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x15c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fbb3 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 80055ee:	4603      	mov	r3, r0
 80055f0:	0e9b      	lsrs	r3, r3, #26
 80055f2:	f003 021f 	and.w	r2, r3, #31
 80055f6:	e01e      	b.n	8005636 <HAL_ADC_ConfigChannel+0x19a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fba8 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 8005604:	4603      	mov	r3, r0
 8005606:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800560e:	fa93 f3a3 	rbit	r3, r3
 8005612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800561a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800561e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005626:	2320      	movs	r3, #32
 8005628:	e004      	b.n	8005634 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800562a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <HAL_ADC_ConfigChannel+0x1b2>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0e9b      	lsrs	r3, r3, #26
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	e018      	b.n	8005680 <HAL_ADC_ConfigChannel+0x1e4>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800566a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005672:	2320      	movs	r3, #32
 8005674:	e004      	b.n	8005680 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005680:	429a      	cmp	r2, r3
 8005682:	d106      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fb77 	bl	8004d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2101      	movs	r1, #1
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fb5b 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 800569e:	4603      	mov	r3, r0
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <HAL_ADC_ConfigChannel+0x222>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2101      	movs	r1, #1
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fb50 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 80056b4:	4603      	mov	r3, r0
 80056b6:	0e9b      	lsrs	r3, r3, #26
 80056b8:	f003 021f 	and.w	r2, r3, #31
 80056bc:	e01e      	b.n	80056fc <HAL_ADC_ConfigChannel+0x260>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2101      	movs	r1, #1
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fb45 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056d4:	fa93 f3a3 	rbit	r3, r3
 80056d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80056dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80056e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80056ec:	2320      	movs	r3, #32
 80056ee:	e004      	b.n	80056fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80056f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x278>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	0e9b      	lsrs	r3, r3, #26
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	e018      	b.n	8005746 <HAL_ADC_ConfigChannel+0x2aa>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005720:	fa93 f3a3 	rbit	r3, r3
 8005724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800572c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005738:	2320      	movs	r3, #32
 800573a:	e004      	b.n	8005746 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800573c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005740:	fab3 f383 	clz	r3, r3
 8005744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005746:	429a      	cmp	r2, r3
 8005748:	d106      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2200      	movs	r2, #0
 8005750:	2101      	movs	r1, #1
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fb14 	bl	8004d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff faf8 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 8005764:	4603      	mov	r3, r0
 8005766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x2e8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2102      	movs	r1, #2
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff faed 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 800577a:	4603      	mov	r3, r0
 800577c:	0e9b      	lsrs	r3, r3, #26
 800577e:	f003 021f 	and.w	r2, r3, #31
 8005782:	e01e      	b.n	80057c2 <HAL_ADC_ConfigChannel+0x326>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2102      	movs	r1, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fae2 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 8005790:	4603      	mov	r3, r0
 8005792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800579a:	fa93 f3a3 	rbit	r3, r3
 800579e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80057a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80057aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80057b2:	2320      	movs	r3, #32
 80057b4:	e004      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80057b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057ba:	fab3 f383 	clz	r3, r3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <HAL_ADC_ConfigChannel+0x33e>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	0e9b      	lsrs	r3, r3, #26
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	e016      	b.n	8005808 <HAL_ADC_ConfigChannel+0x36c>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057e6:	fa93 f3a3 	rbit	r3, r3
 80057ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80057ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80057f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80057fa:	2320      	movs	r3, #32
 80057fc:	e004      	b.n	8005808 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80057fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005808:	429a      	cmp	r2, r3
 800580a:	d106      	bne.n	800581a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2200      	movs	r2, #0
 8005812:	2102      	movs	r1, #2
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fab3 	bl	8004d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2103      	movs	r1, #3
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fa97 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 8005826:	4603      	mov	r3, r0
 8005828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x3aa>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2103      	movs	r1, #3
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fa8c 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 800583c:	4603      	mov	r3, r0
 800583e:	0e9b      	lsrs	r3, r3, #26
 8005840:	f003 021f 	and.w	r2, r3, #31
 8005844:	e017      	b.n	8005876 <HAL_ADC_ConfigChannel+0x3da>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2103      	movs	r1, #3
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fa81 	bl	8004d54 <LL_ADC_GetOffsetChannel>
 8005852:	4603      	mov	r3, r0
 8005854:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005858:	fa93 f3a3 	rbit	r3, r3
 800585c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800585e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005860:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005868:	2320      	movs	r3, #32
 800586a:	e003      	b.n	8005874 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800586c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586e:	fab3 f383 	clz	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <HAL_ADC_ConfigChannel+0x3f2>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	0e9b      	lsrs	r3, r3, #26
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	e011      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x416>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800589c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80058a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80058a6:	2320      	movs	r3, #32
 80058a8:	e003      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80058aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d106      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	2103      	movs	r1, #3
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fa5e 	bl	8004d80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fbc5 	bl	8005058 <LL_ADC_IsEnabled>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 813d 	bne.w	8005b50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7ff fb1a 	bl	8004f1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4aa2      	ldr	r2, [pc, #648]	; (8005b78 <HAL_ADC_ConfigChannel+0x6dc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f040 812e 	bne.w	8005b50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <HAL_ADC_ConfigChannel+0x480>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0e9b      	lsrs	r3, r3, #26
 800590a:	3301      	adds	r3, #1
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2b09      	cmp	r3, #9
 8005912:	bf94      	ite	ls
 8005914:	2301      	movls	r3, #1
 8005916:	2300      	movhi	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e019      	b.n	8005950 <HAL_ADC_ConfigChannel+0x4b4>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005924:	fa93 f3a3 	rbit	r3, r3
 8005928:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800592a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800592c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800592e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005934:	2320      	movs	r3, #32
 8005936:	e003      	b.n	8005940 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800593a:	fab3 f383 	clz	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3301      	adds	r3, #1
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2b09      	cmp	r3, #9
 8005948:	bf94      	ite	ls
 800594a:	2301      	movls	r3, #1
 800594c:	2300      	movhi	r3, #0
 800594e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005950:	2b00      	cmp	r3, #0
 8005952:	d079      	beq.n	8005a48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x4d4>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	0e9b      	lsrs	r3, r3, #26
 8005966:	3301      	adds	r3, #1
 8005968:	069b      	lsls	r3, r3, #26
 800596a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800596e:	e015      	b.n	800599c <HAL_ADC_ConfigChannel+0x500>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005978:	fa93 f3a3 	rbit	r3, r3
 800597c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800597e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005980:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005988:	2320      	movs	r3, #32
 800598a:	e003      	b.n	8005994 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800598c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	3301      	adds	r3, #1
 8005996:	069b      	lsls	r3, r3, #26
 8005998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x520>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	0e9b      	lsrs	r3, r3, #26
 80059ae:	3301      	adds	r3, #1
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	e017      	b.n	80059ec <HAL_ADC_ConfigChannel+0x550>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c4:	fa93 f3a3 	rbit	r3, r3
 80059c8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80059ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80059ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80059d4:	2320      	movs	r3, #32
 80059d6:	e003      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80059d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059da:	fab3 f383 	clz	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	3301      	adds	r3, #1
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2101      	movs	r1, #1
 80059e8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ec:	ea42 0103 	orr.w	r1, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <HAL_ADC_ConfigChannel+0x576>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	0e9b      	lsrs	r3, r3, #26
 8005a02:	3301      	adds	r3, #1
 8005a04:	f003 021f 	and.w	r2, r3, #31
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	051b      	lsls	r3, r3, #20
 8005a10:	e018      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x5a8>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	fa93 f3a3 	rbit	r3, r3
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	e003      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	fab3 f383 	clz	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3301      	adds	r3, #1
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a44:	430b      	orrs	r3, r1
 8005a46:	e07e      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d107      	bne.n	8005a64 <HAL_ADC_ConfigChannel+0x5c8>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	0e9b      	lsrs	r3, r3, #26
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	069b      	lsls	r3, r3, #26
 8005a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a62:	e015      	b.n	8005a90 <HAL_ADC_ConfigChannel+0x5f4>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	fa93 f3a3 	rbit	r3, r3
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	e003      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	fab3 f383 	clz	r3, r3
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	3301      	adds	r3, #1
 8005a8a:	069b      	lsls	r3, r3, #26
 8005a8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x614>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	0e9b      	lsrs	r3, r3, #26
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	e017      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x644>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	fa93 f3a3 	rbit	r3, r3
 8005abc:	61fb      	str	r3, [r7, #28]
  return result;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ac8:	2320      	movs	r3, #32
 8005aca:	e003      	b.n	8005ad4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	fab3 f383 	clz	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2101      	movs	r1, #1
 8005adc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae0:	ea42 0103 	orr.w	r1, r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x670>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	0e9b      	lsrs	r3, r3, #26
 8005af6:	3301      	adds	r3, #1
 8005af8:	f003 021f 	and.w	r2, r3, #31
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	3b1e      	subs	r3, #30
 8005b04:	051b      	lsls	r3, r3, #20
 8005b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	e01b      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x6a8>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	fa93 f3a3 	rbit	r3, r3
 8005b18:	613b      	str	r3, [r7, #16]
  return result;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b24:	2320      	movs	r3, #32
 8005b26:	e003      	b.n	8005b30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	fab3 f383 	clz	r3, r3
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	f003 021f 	and.w	r2, r3, #31
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3b1e      	subs	r3, #30
 8005b3e:	051b      	lsls	r3, r3, #20
 8005b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b44:	430b      	orrs	r3, r1
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	6892      	ldr	r2, [r2, #8]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f7ff f9bb 	bl	8004ec6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_ADC_ConfigChannel+0x6e0>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80be 	beq.w	8005cda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b66:	d004      	beq.n	8005b72 <HAL_ADC_ConfigChannel+0x6d6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <HAL_ADC_ConfigChannel+0x6e4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10a      	bne.n	8005b88 <HAL_ADC_ConfigChannel+0x6ec>
 8005b72:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <HAL_ADC_ConfigChannel+0x6e8>)
 8005b74:	e009      	b.n	8005b8a <HAL_ADC_ConfigChannel+0x6ee>
 8005b76:	bf00      	nop
 8005b78:	407f0000 	.word	0x407f0000
 8005b7c:	80080000 	.word	0x80080000
 8005b80:	50000100 	.word	0x50000100
 8005b84:	50000300 	.word	0x50000300
 8005b88:	4b59      	ldr	r3, [pc, #356]	; (8005cf0 <HAL_ADC_ConfigChannel+0x854>)
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff f8b0 	bl	8004cf0 <LL_ADC_GetCommonPathInternalCh>
 8005b90:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a56      	ldr	r2, [pc, #344]	; (8005cf4 <HAL_ADC_ConfigChannel+0x858>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_ADC_ConfigChannel+0x70c>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a55      	ldr	r2, [pc, #340]	; (8005cf8 <HAL_ADC_ConfigChannel+0x85c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d13a      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d134      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bbc:	d005      	beq.n	8005bca <HAL_ADC_ConfigChannel+0x72e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a4e      	ldr	r2, [pc, #312]	; (8005cfc <HAL_ADC_ConfigChannel+0x860>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	f040 8085 	bne.w	8005cd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd2:	d004      	beq.n	8005bde <HAL_ADC_ConfigChannel+0x742>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a49      	ldr	r2, [pc, #292]	; (8005d00 <HAL_ADC_ConfigChannel+0x864>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <HAL_ADC_ConfigChannel+0x746>
 8005bde:	4a49      	ldr	r2, [pc, #292]	; (8005d04 <HAL_ADC_ConfigChannel+0x868>)
 8005be0:	e000      	b.n	8005be4 <HAL_ADC_ConfigChannel+0x748>
 8005be2:	4a43      	ldr	r2, [pc, #268]	; (8005cf0 <HAL_ADC_ConfigChannel+0x854>)
 8005be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f7ff f86b 	bl	8004cca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bf4:	4b44      	ldr	r3, [pc, #272]	; (8005d08 <HAL_ADC_ConfigChannel+0x86c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	4a44      	ldr	r2, [pc, #272]	; (8005d0c <HAL_ADC_ConfigChannel+0x870>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c0e:	e002      	b.n	8005c16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f9      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c1c:	e05a      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <HAL_ADC_ConfigChannel+0x874>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d125      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x7d8>
 8005c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11f      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a31      	ldr	r2, [pc, #196]	; (8005d00 <HAL_ADC_ConfigChannel+0x864>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d104      	bne.n	8005c48 <HAL_ADC_ConfigChannel+0x7ac>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <HAL_ADC_ConfigChannel+0x878>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d047      	beq.n	8005cd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c50:	d004      	beq.n	8005c5c <HAL_ADC_ConfigChannel+0x7c0>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <HAL_ADC_ConfigChannel+0x864>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <HAL_ADC_ConfigChannel+0x7c4>
 8005c5c:	4a29      	ldr	r2, [pc, #164]	; (8005d04 <HAL_ADC_ConfigChannel+0x868>)
 8005c5e:	e000      	b.n	8005c62 <HAL_ADC_ConfigChannel+0x7c6>
 8005c60:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_ADC_ConfigChannel+0x854>)
 8005c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7ff f82c 	bl	8004cca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c72:	e031      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <HAL_ADC_ConfigChannel+0x87c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d12d      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d127      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_ADC_ConfigChannel+0x864>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c9c:	d004      	beq.n	8005ca8 <HAL_ADC_ConfigChannel+0x80c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <HAL_ADC_ConfigChannel+0x864>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d101      	bne.n	8005cac <HAL_ADC_ConfigChannel+0x810>
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <HAL_ADC_ConfigChannel+0x868>)
 8005caa:	e000      	b.n	8005cae <HAL_ADC_ConfigChannel+0x812>
 8005cac:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <HAL_ADC_ConfigChannel+0x854>)
 8005cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7ff f806 	bl	8004cca <LL_ADC_SetCommonPathInternalCh>
 8005cbe:	e00c      	b.n	8005cda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005cd2:	e002      	b.n	8005cda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ce2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	37d8      	adds	r7, #216	; 0xd8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	50000700 	.word	0x50000700
 8005cf4:	c3210000 	.word	0xc3210000
 8005cf8:	90c00010 	.word	0x90c00010
 8005cfc:	50000600 	.word	0x50000600
 8005d00:	50000100 	.word	0x50000100
 8005d04:	50000300 	.word	0x50000300
 8005d08:	20000030 	.word	0x20000030
 8005d0c:	053e2d63 	.word	0x053e2d63
 8005d10:	c7520000 	.word	0xc7520000
 8005d14:	50000500 	.word	0x50000500
 8005d18:	cb840000 	.word	0xcb840000

08005d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff f995 	bl	8005058 <LL_ADC_IsEnabled>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d14d      	bne.n	8005dd0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	4b28      	ldr	r3, [pc, #160]	; (8005ddc <ADC_Enable+0xc0>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d46:	f043 0210 	orr.w	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d52:	f043 0201 	orr.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e039      	b.n	8005dd2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff f950 	bl	8005008 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d68:	f7fe ff6e 	bl	8004c48 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d6e:	e028      	b.n	8005dc2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff f96f 	bl	8005058 <LL_ADC_IsEnabled>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff f93f 	bl	8005008 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d8a:	f7fe ff5d 	bl	8004c48 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d914      	bls.n	8005dc2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00d      	beq.n	8005dc2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005daa:	f043 0210 	orr.w	r2, r3, #16
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db6:	f043 0201 	orr.w	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e007      	b.n	8005dd2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d1cf      	bne.n	8005d70 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	8000003f 	.word	0x8000003f

08005de0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff f946 	bl	800507e <LL_ADC_IsDisableOngoing>
 8005df2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff f92d 	bl	8005058 <LL_ADC_IsEnabled>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d047      	beq.n	8005e94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d144      	bne.n	8005e94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 030d 	and.w	r3, r3, #13
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10c      	bne.n	8005e32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff f907 	bl	8005030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2203      	movs	r2, #3
 8005e28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e2a:	f7fe ff0d 	bl	8004c48 <HAL_GetTick>
 8005e2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e30:	e029      	b.n	8005e86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e36:	f043 0210 	orr.w	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	f043 0201 	orr.w	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e023      	b.n	8005e96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e4e:	f7fe fefb 	bl	8004c48 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d914      	bls.n	8005e86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	f043 0210 	orr.w	r2, r3, #16
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e007      	b.n	8005e96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1dc      	bne.n	8005e4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d14b      	bne.n	8005f50 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d021      	beq.n	8005f16 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe ffb6 	bl	8004e48 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d032      	beq.n	8005f48 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d12b      	bne.n	8005f48 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11f      	bne.n	8005f48 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0c:	f043 0201 	orr.w	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f14:	e018      	b.n	8005f48 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d111      	bne.n	8005f48 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f40:	f043 0201 	orr.w	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7fd f97b 	bl	8003244 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f4e:	e00e      	b.n	8005f6e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff fa93 	bl	8005488 <HAL_ADC_ErrorCallback>
}
 8005f62:	e004      	b.n	8005f6e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fa75 	bl	8005474 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	f043 0204 	orr.w	r2, r3, #4
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fa65 	bl	8005488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <LL_ADC_IsEnabled>:
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <LL_ADC_IsEnabled+0x18>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <LL_ADC_IsEnabled+0x1a>
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_ADC_StartCalibration>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ffe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006008:	4313      	orrs	r3, r2
 800600a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	609a      	str	r2, [r3, #8]
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <LL_ADC_IsCalibrationOnGoing>:
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800602e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006032:	d101      	bne.n	8006038 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_ADC_REG_StartConversion>:
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006056:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	609a      	str	r2, [r3, #8]
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_ADC_REG_IsConversionOngoing>:
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d101      	bne.n	8006086 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e04d      	b.n	800614c <HAL_ADCEx_Calibration_Start+0xb8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fe91 	bl	8005de0 <ADC_Disable>
 80060be:	4603      	mov	r3, r0
 80060c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d136      	bne.n	8006136 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060d0:	f023 0302 	bic.w	r3, r3, #2
 80060d4:	f043 0202 	orr.w	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff ff82 	bl	8005fec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80060e8:	e014      	b.n	8006114 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	3301      	adds	r3, #1
 80060ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4a18      	ldr	r2, [pc, #96]	; (8006154 <HAL_ADCEx_Calibration_Start+0xc0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d90d      	bls.n	8006114 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fc:	f023 0312 	bic.w	r3, r3, #18
 8006100:	f043 0210 	orr.w	r2, r3, #16
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e01b      	b.n	800614c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff ff80 	bl	800601e <LL_ADC_IsCalibrationOnGoing>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e2      	bne.n	80060ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f023 0303 	bic.w	r3, r3, #3
 800612c:	f043 0201 	orr.w	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c
 8006134:	e005      	b.n	8006142 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613a:	f043 0210 	orr.w	r2, r3, #16
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	0004de01 	.word	0x0004de01

08006158 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b0a2      	sub	sp, #136	; 0x88
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff80 	bl	800606e <LL_ADC_REG_IsConversionOngoing>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006174:	2302      	movs	r3, #2
 8006176:	e096      	b.n	80062a6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006182:	2302      	movs	r3, #2
 8006184:	e08f      	b.n	80062a6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800618e:	2300      	movs	r3, #0
 8006190:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006192:	2300      	movs	r3, #0
 8006194:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800619e:	d102      	bne.n	80061a6 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80061a0:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e009      	b.n	80061ba <HAL_ADCEx_MultiModeStart_DMA+0x62>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a42      	ldr	r2, [pc, #264]	; (80062b4 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d102      	bne.n	80061b6 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 80061b0:	4b41      	ldr	r3, [pc, #260]	; (80062b8 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e001      	b.n	80061ba <HAL_ADCEx_MultiModeStart_DMA+0x62>
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	f043 0220 	orr.w	r2, r3, #32
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e066      	b.n	80062a6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fd9f 	bl	8005d1c <ADC_Enable>
 80061de:	4603      	mov	r3, r0
 80061e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80061e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d107      	bne.n	80061fc <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80061ec:	f107 0314 	add.w	r3, r7, #20
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fd93 	bl	8005d1c <ADC_Enable>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80061fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006200:	2b00      	cmp	r3, #0
 8006202:	d14a      	bne.n	800629a <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	4a26      	ldr	r2, [pc, #152]	; (80062bc <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8006224:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 800622c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8006234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800623e:	d004      	beq.n	800624a <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d101      	bne.n	800624e <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 800624a:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 800624c:	e000      	b.n	8006250 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 800624e:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8006250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	221c      	movs	r2, #28
 800625a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0210 	orr.w	r2, r2, #16
 8006272:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800627c:	330c      	adds	r3, #12
 800627e:	4619      	mov	r1, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f000 fce2 	bl	8006c4c <HAL_DMA_Start_IT>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fed7 	bl	8006046 <LL_ADC_REG_StartConversion>
 8006298:	e003      	b.n	80062a2 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80062a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3788      	adds	r7, #136	; 0x88
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	50000100 	.word	0x50000100
 80062b4:	50000400 	.word	0x50000400
 80062b8:	50000500 	.word	0x50000500
 80062bc:	08005e9f 	.word	0x08005e9f
 80062c0:	08005f77 	.word	0x08005f77
 80062c4:	08005f93 	.word	0x08005f93
 80062c8:	50000300 	.word	0x50000300
 80062cc:	50000700 	.word	0x50000700

080062d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80062d0:	b590      	push	{r4, r7, lr}
 80062d2:	b0a1      	sub	sp, #132	; 0x84
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0e7      	b.n	80064be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80062f6:	2300      	movs	r3, #0
 80062f8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80062fa:	2300      	movs	r3, #0
 80062fc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006306:	d102      	bne.n	800630e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006308:	4b6f      	ldr	r3, [pc, #444]	; (80064c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800630a:	60bb      	str	r3, [r7, #8]
 800630c:	e009      	b.n	8006322 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6e      	ldr	r2, [pc, #440]	; (80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d102      	bne.n	800631e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006318:	4b6d      	ldr	r3, [pc, #436]	; (80064d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	e001      	b.n	8006322 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	f043 0220 	orr.w	r2, r3, #32
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e0be      	b.n	80064be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fe93 	bl	800606e <LL_ADC_REG_IsConversionOngoing>
 8006348:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fe8d 	bl	800606e <LL_ADC_REG_IsConversionOngoing>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80a0 	bne.w	800649c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800635c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635e:	2b00      	cmp	r3, #0
 8006360:	f040 809c 	bne.w	800649c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800636c:	d004      	beq.n	8006378 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a55      	ldr	r2, [pc, #340]	; (80064c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006378:	4b56      	ldr	r3, [pc, #344]	; (80064d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800637a:	e000      	b.n	800637e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800637c:	4b56      	ldr	r3, [pc, #344]	; (80064d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800637e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d04b      	beq.n	8006420 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800639a:	035b      	lsls	r3, r3, #13
 800639c:	430b      	orrs	r3, r1
 800639e:	431a      	orrs	r2, r3
 80063a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ac:	d004      	beq.n	80063b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a45      	ldr	r2, [pc, #276]	; (80064c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d10f      	bne.n	80063d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80063b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80063bc:	f7ff fe03 	bl	8005fc6 <LL_ADC_IsEnabled>
 80063c0:	4604      	mov	r4, r0
 80063c2:	4841      	ldr	r0, [pc, #260]	; (80064c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063c4:	f7ff fdff 	bl	8005fc6 <LL_ADC_IsEnabled>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4323      	orrs	r3, r4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e012      	b.n	80063fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80063d8:	483c      	ldr	r0, [pc, #240]	; (80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80063da:	f7ff fdf4 	bl	8005fc6 <LL_ADC_IsEnabled>
 80063de:	4604      	mov	r4, r0
 80063e0:	483b      	ldr	r0, [pc, #236]	; (80064d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80063e2:	f7ff fdf0 	bl	8005fc6 <LL_ADC_IsEnabled>
 80063e6:	4603      	mov	r3, r0
 80063e8:	431c      	orrs	r4, r3
 80063ea:	483c      	ldr	r0, [pc, #240]	; (80064dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80063ec:	f7ff fdeb 	bl	8005fc6 <LL_ADC_IsEnabled>
 80063f0:	4603      	mov	r3, r0
 80063f2:	4323      	orrs	r3, r4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d056      	beq.n	80064b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800640a:	f023 030f 	bic.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	6811      	ldr	r1, [r2, #0]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	6892      	ldr	r2, [r2, #8]
 8006416:	430a      	orrs	r2, r1
 8006418:	431a      	orrs	r2, r3
 800641a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800641e:	e047      	b.n	80064b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006434:	d004      	beq.n	8006440 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a23      	ldr	r2, [pc, #140]	; (80064c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10f      	bne.n	8006460 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006440:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006444:	f7ff fdbf 	bl	8005fc6 <LL_ADC_IsEnabled>
 8006448:	4604      	mov	r4, r0
 800644a:	481f      	ldr	r0, [pc, #124]	; (80064c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800644c:	f7ff fdbb 	bl	8005fc6 <LL_ADC_IsEnabled>
 8006450:	4603      	mov	r3, r0
 8006452:	4323      	orrs	r3, r4
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e012      	b.n	8006486 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006460:	481a      	ldr	r0, [pc, #104]	; (80064cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006462:	f7ff fdb0 	bl	8005fc6 <LL_ADC_IsEnabled>
 8006466:	4604      	mov	r4, r0
 8006468:	4819      	ldr	r0, [pc, #100]	; (80064d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800646a:	f7ff fdac 	bl	8005fc6 <LL_ADC_IsEnabled>
 800646e:	4603      	mov	r3, r0
 8006470:	431c      	orrs	r4, r3
 8006472:	481a      	ldr	r0, [pc, #104]	; (80064dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006474:	f7ff fda7 	bl	8005fc6 <LL_ADC_IsEnabled>
 8006478:	4603      	mov	r3, r0
 800647a:	4323      	orrs	r3, r4
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d012      	beq.n	80064b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800648a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006492:	f023 030f 	bic.w	r3, r3, #15
 8006496:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006498:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800649a:	e009      	b.n	80064b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80064ae:	e000      	b.n	80064b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80064ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3784      	adds	r7, #132	; 0x84
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd90      	pop	{r4, r7, pc}
 80064c6:	bf00      	nop
 80064c8:	50000100 	.word	0x50000100
 80064cc:	50000400 	.word	0x50000400
 80064d0:	50000500 	.word	0x50000500
 80064d4:	50000300 	.word	0x50000300
 80064d8:	50000700 	.word	0x50000700
 80064dc:	50000600 	.word	0x50000600

080064e0 <__NVIC_SetPriorityGrouping>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064f0:	4b0c      	ldr	r3, [pc, #48]	; (8006524 <__NVIC_SetPriorityGrouping+0x44>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064fc:	4013      	ands	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800650c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006512:	4a04      	ldr	r2, [pc, #16]	; (8006524 <__NVIC_SetPriorityGrouping+0x44>)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	60d3      	str	r3, [r2, #12]
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	e000ed00 	.word	0xe000ed00

08006528 <__NVIC_GetPriorityGrouping>:
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <__NVIC_GetPriorityGrouping+0x18>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	f003 0307 	and.w	r3, r3, #7
}
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	e000ed00 	.word	0xe000ed00

08006544 <__NVIC_EnableIRQ>:
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800654e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006552:	2b00      	cmp	r3, #0
 8006554:	db0b      	blt.n	800656e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	f003 021f 	and.w	r2, r3, #31
 800655c:	4907      	ldr	r1, [pc, #28]	; (800657c <__NVIC_EnableIRQ+0x38>)
 800655e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	2001      	movs	r0, #1
 8006566:	fa00 f202 	lsl.w	r2, r0, r2
 800656a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	e000e100 	.word	0xe000e100

08006580 <__NVIC_SetPriority>:
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800658c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006590:	2b00      	cmp	r3, #0
 8006592:	db0a      	blt.n	80065aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	490c      	ldr	r1, [pc, #48]	; (80065cc <__NVIC_SetPriority+0x4c>)
 800659a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659e:	0112      	lsls	r2, r2, #4
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	440b      	add	r3, r1
 80065a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065a8:	e00a      	b.n	80065c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	4908      	ldr	r1, [pc, #32]	; (80065d0 <__NVIC_SetPriority+0x50>)
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	3b04      	subs	r3, #4
 80065b8:	0112      	lsls	r2, r2, #4
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	440b      	add	r3, r1
 80065be:	761a      	strb	r2, [r3, #24]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	e000e100 	.word	0xe000e100
 80065d0:	e000ed00 	.word	0xe000ed00

080065d4 <NVIC_EncodePriority>:
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f1c3 0307 	rsb	r3, r3, #7
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	bf28      	it	cs
 80065f2:	2304      	movcs	r3, #4
 80065f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3304      	adds	r3, #4
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d902      	bls.n	8006604 <NVIC_EncodePriority+0x30>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3b03      	subs	r3, #3
 8006602:	e000      	b.n	8006606 <NVIC_EncodePriority+0x32>
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006608:	f04f 32ff 	mov.w	r2, #4294967295
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	43da      	mvns	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	401a      	ands	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800661c:	f04f 31ff 	mov.w	r1, #4294967295
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	fa01 f303 	lsl.w	r3, r1, r3
 8006626:	43d9      	mvns	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800662c:	4313      	orrs	r3, r2
}
 800662e:	4618      	mov	r0, r3
 8006630:	3724      	adds	r7, #36	; 0x24
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
	...

0800663c <SysTick_Config>:
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3b01      	subs	r3, #1
 8006648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800664c:	d301      	bcc.n	8006652 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800664e:	2301      	movs	r3, #1
 8006650:	e00f      	b.n	8006672 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006652:	4a0a      	ldr	r2, [pc, #40]	; (800667c <SysTick_Config+0x40>)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3b01      	subs	r3, #1
 8006658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800665a:	210f      	movs	r1, #15
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	f7ff ff8e 	bl	8006580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <SysTick_Config+0x40>)
 8006666:	2200      	movs	r2, #0
 8006668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800666a:	4b04      	ldr	r3, [pc, #16]	; (800667c <SysTick_Config+0x40>)
 800666c:	2207      	movs	r2, #7
 800666e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	e000e010 	.word	0xe000e010

08006680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff29 	bl	80064e0 <__NVIC_SetPriorityGrouping>
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b086      	sub	sp, #24
 800669a:	af00      	add	r7, sp, #0
 800669c:	4603      	mov	r3, r0
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066a4:	f7ff ff40 	bl	8006528 <__NVIC_GetPriorityGrouping>
 80066a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	6978      	ldr	r0, [r7, #20]
 80066b0:	f7ff ff90 	bl	80065d4 <NVIC_EncodePriority>
 80066b4:	4602      	mov	r2, r0
 80066b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff5f 	bl	8006580 <__NVIC_SetPriority>
}
 80066c2:	bf00      	nop
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	4603      	mov	r3, r0
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff ff33 	bl	8006544 <__NVIC_EnableIRQ>
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff ffa4 	bl	800663c <SysTick_Config>
 80066f4:	4603      	mov	r3, r0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e054      	b.n	80067bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	7f5b      	ldrb	r3, [r3, #29]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fa fef2 	bl	800150c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	791b      	ldrb	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10c      	bne.n	8006750 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_CRC_Init+0xc4>)
 800673c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0218 	bic.w	r2, r2, #24
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	e00c      	b.n	800676a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6899      	ldr	r1, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	461a      	mov	r2, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f948 	bl	80069f0 <HAL_CRCEx_Polynomial_Set>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e028      	b.n	80067bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	795b      	ldrb	r3, [r3, #5]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f04f 32ff 	mov.w	r2, #4294967295
 800677a:	611a      	str	r2, [r3, #16]
 800677c:	e004      	b.n	8006788 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6912      	ldr	r2, [r2, #16]
 8006786:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	04c11db7 	.word	0x04c11db7

080067c8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2202      	movs	r2, #2
 80067dc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0201 	orr.w	r2, r2, #1
 80067ec:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d006      	beq.n	8006804 <HAL_CRC_Calculate+0x3c>
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d829      	bhi.n	800684e <HAL_CRC_Calculate+0x86>
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d019      	beq.n	8006832 <HAL_CRC_Calculate+0x6a>
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d01e      	beq.n	8006840 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006802:	e024      	b.n	800684e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e00a      	b.n	8006820 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	441a      	add	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	3301      	adds	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d3f0      	bcc.n	800680a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	613b      	str	r3, [r7, #16]
      break;
 8006830:	e00e      	b.n	8006850 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f812 	bl	8006860 <CRC_Handle_8>
 800683c:	6138      	str	r0, [r7, #16]
      break;
 800683e:	e007      	b.n	8006850 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f899 	bl	800697c <CRC_Handle_16>
 800684a:	6138      	str	r0, [r7, #16]
      break;
 800684c:	e000      	b.n	8006850 <HAL_CRC_Calculate+0x88>
      break;
 800684e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006856:	693b      	ldr	r3, [r7, #16]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	; 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e023      	b.n	80068ba <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	3301      	adds	r3, #1
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	440b      	add	r3, r1
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800688c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	3302      	adds	r3, #2
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	440b      	add	r3, r1
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800689c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	3303      	adds	r3, #3
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	440b      	add	r3, r1
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80068b0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80068b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3301      	adds	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	089b      	lsrs	r3, r3, #2
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d3d6      	bcc.n	8006872 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d04d      	beq.n	800696a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	4413      	add	r3, r2
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d116      	bne.n	8006920 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4413      	add	r3, r2
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	b21a      	sxth	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	3301      	adds	r3, #1
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	440b      	add	r3, r1
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b21b      	sxth	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	b21b      	sxth	r3, r3
 8006912:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	8b7a      	ldrh	r2, [r7, #26]
 800691e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b03      	cmp	r3, #3
 8006928:	d11f      	bne.n	800696a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4413      	add	r3, r2
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	b21a      	sxth	r2, r3
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	3301      	adds	r3, #1
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	440b      	add	r3, r1
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b21b      	sxth	r3, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	b21b      	sxth	r3, r3
 800694a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	8b7a      	ldrh	r2, [r7, #26]
 8006956:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	3302      	adds	r3, #2
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3724      	adds	r7, #36	; 0x24
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e013      	b.n	80069b6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	041a      	lsls	r2, r3, #16
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	3302      	adds	r3, #2
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	440b      	add	r3, r1
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3301      	adds	r3, #1
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3e6      	bcc.n	800698e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4413      	add	r3, r2
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006a00:	231f      	movs	r3, #31
 8006a02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006a04:	bf00      	nop
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	613a      	str	r2, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <HAL_CRCEx_Polynomial_Set+0x34>
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b18      	cmp	r3, #24
 8006a28:	d846      	bhi.n	8006ab8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006abf 	.word	0x08006abf
 8006a34:	08006ab9 	.word	0x08006ab9
 8006a38:	08006ab9 	.word	0x08006ab9
 8006a3c:	08006ab9 	.word	0x08006ab9
 8006a40:	08006ab9 	.word	0x08006ab9
 8006a44:	08006ab9 	.word	0x08006ab9
 8006a48:	08006ab9 	.word	0x08006ab9
 8006a4c:	08006ab9 	.word	0x08006ab9
 8006a50:	08006aad 	.word	0x08006aad
 8006a54:	08006ab9 	.word	0x08006ab9
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	08006ab9 	.word	0x08006ab9
 8006a60:	08006ab9 	.word	0x08006ab9
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006ab9 	.word	0x08006ab9
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006ab9 	.word	0x08006ab9
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ab9 	.word	0x08006ab9
 8006a80:	08006ab9 	.word	0x08006ab9
 8006a84:	08006ab9 	.word	0x08006ab9
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006a95 	.word	0x08006a95
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d913      	bls.n	8006ac2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a9e:	e010      	b.n	8006ac2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b07      	cmp	r3, #7
 8006aa4:	d90f      	bls.n	8006ac6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006aaa:	e00c      	b.n	8006ac6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b0f      	cmp	r3, #15
 8006ab0:	d90b      	bls.n	8006aca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ab6:	e008      	b.n	8006aca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
      break;
 8006abc:	e006      	b.n	8006acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006abe:	bf00      	nop
 8006ac0:	e004      	b.n	8006acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006aca:	bf00      	nop
  }
  if (status == HAL_OK)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f023 0118 	bic.w	r1, r3, #24
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e08d      	b.n	8006c2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <HAL_DMA_Init+0x138>)
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d80f      	bhi.n	8006b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <HAL_DMA_Init+0x13c>)
 8006b22:	4413      	add	r3, r2
 8006b24:	4a45      	ldr	r2, [pc, #276]	; (8006c3c <HAL_DMA_Init+0x140>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	091b      	lsrs	r3, r3, #4
 8006b2c:	009a      	lsls	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a42      	ldr	r2, [pc, #264]	; (8006c40 <HAL_DMA_Init+0x144>)
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40
 8006b38:	e00e      	b.n	8006b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b40      	ldr	r3, [pc, #256]	; (8006c44 <HAL_DMA_Init+0x148>)
 8006b42:	4413      	add	r3, r2
 8006b44:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <HAL_DMA_Init+0x140>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	091b      	lsrs	r3, r3, #4
 8006b4c:	009a      	lsls	r2, r3, #2
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a3c      	ldr	r2, [pc, #240]	; (8006c48 <HAL_DMA_Init+0x14c>)
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fabe 	bl	800712c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bb8:	d102      	bne.n	8006bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d010      	beq.n	8006c00 <HAL_DMA_Init+0x104>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d80c      	bhi.n	8006c00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fade 	bl	80071a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006bfc:	605a      	str	r2, [r3, #4]
 8006bfe:	e008      	b.n	8006c12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40020407 	.word	0x40020407
 8006c38:	bffdfff8 	.word	0xbffdfff8
 8006c3c:	cccccccd 	.word	0xcccccccd
 8006c40:	40020000 	.word	0x40020000
 8006c44:	bffdfbf8 	.word	0xbffdfbf8
 8006c48:	40020400 	.word	0x40020400

08006c4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_DMA_Start_IT+0x20>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e066      	b.n	8006d3a <HAL_DMA_Start_IT+0xee>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d155      	bne.n	8006d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fa03 	bl	80070b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 020e 	orr.w	r2, r2, #14
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e00f      	b.n	8006ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0204 	bic.w	r2, r2, #4
 8006cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 020a 	orr.w	r2, r2, #10
 8006ce2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e005      	b.n	8006d38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
 8006d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d005      	beq.n	8006d66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	e037      	b.n	8006dd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 020e 	bic.w	r2, r2, #14
 8006d74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0201 	bic.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	f003 021f 	and.w	r2, r3, #31
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2101      	movs	r1, #1
 8006da4:	fa01 f202 	lsl.w	r2, r1, r2
 8006da8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006db2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00c      	beq.n	8006dd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006dd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d00d      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	e047      	b.n	8006eb8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 020e 	bic.w	r2, r2, #14
 8006e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f003 021f 	and.w	r2, r3, #31
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f202 	lsl.w	r2, r1, r2
 8006e6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00c      	beq.n	8006e98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
    }
  }
  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	409a      	lsls	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d026      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x7a>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d021      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d107      	bne.n	8006f16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0204 	bic.w	r2, r2, #4
 8006f14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	f003 021f 	and.w	r2, r3, #31
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	2104      	movs	r1, #4
 8006f24:	fa01 f202 	lsl.w	r2, r1, r2
 8006f28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d071      	beq.n	8007016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006f3a:	e06c      	b.n	8007016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2202      	movs	r2, #2
 8006f46:	409a      	lsls	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02e      	beq.n	8006fae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d029      	beq.n	8006fae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 020a 	bic.w	r2, r2, #10
 8006f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f84:	f003 021f 	and.w	r2, r3, #31
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d038      	beq.n	8007016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006fac:	e033      	b.n	8007016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d02a      	beq.n	8007018 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d025      	beq.n	8007018 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 020e 	bic.w	r2, r2, #14
 8006fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	f003 021f 	and.w	r2, r3, #31
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	2101      	movs	r1, #1
 8006fea:	fa01 f202 	lsl.w	r2, r1, r2
 8006fee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007016:	bf00      	nop
 8007018:	bf00      	nop
}
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	460b      	mov	r3, r1
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_DMA_RegisterCallback+0x20>
 800703c:	2302      	movs	r3, #2
 800703e:	e031      	b.n	80070a4 <HAL_DMA_RegisterCallback+0x84>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	d120      	bne.n	8007096 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d81a      	bhi.n	8007090 <HAL_DMA_RegisterCallback+0x70>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <HAL_DMA_RegisterCallback+0x40>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007071 	.word	0x08007071
 8007064:	08007079 	.word	0x08007079
 8007068:	08007081 	.word	0x08007081
 800706c:	08007089 	.word	0x08007089
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007076:	e010      	b.n	800709a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800707e:	e00c      	b.n	800709a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8007086:	e008      	b.n	800709a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800708e:	e004      	b.n	800709a <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
        break;
 8007094:	e001      	b.n	800709a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80070c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	f003 021f 	and.w	r2, r3, #31
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2101      	movs	r1, #1
 80070e8:	fa01 f202 	lsl.w	r2, r1, r2
 80070ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d108      	bne.n	8007110 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800710e:	e007      	b.n	8007120 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	4b16      	ldr	r3, [pc, #88]	; (8007194 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800713c:	429a      	cmp	r2, r3
 800713e:	d802      	bhi.n	8007146 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007140:	4b15      	ldr	r3, [pc, #84]	; (8007198 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	e001      	b.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007146:	4b15      	ldr	r3, [pc, #84]	; (800719c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007148:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3b08      	subs	r3, #8
 8007156:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	009a      	lsls	r2, r3, #2
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	4413      	add	r3, r2
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007176:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	2201      	movs	r2, #1
 8007180:	409a      	lsls	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007186:	bf00      	nop
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40020407 	.word	0x40020407
 8007198:	40020800 	.word	0x40020800
 800719c:	40020820 	.word	0x40020820
 80071a0:	cccccccd 	.word	0xcccccccd
 80071a4:	40020880 	.word	0x40020880

080071a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80071ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	2201      	movs	r2, #1
 80071d6:	409a      	lsls	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80071dc:	bf00      	nop
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	1000823f 	.word	0x1000823f
 80071ec:	40020940 	.word	0x40020940

080071f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80071fe:	e15a      	b.n	80074b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	2101      	movs	r1, #1
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 814c 	beq.w	80074b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d005      	beq.n	8007230 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800722c:	2b02      	cmp	r3, #2
 800722e:	d130      	bne.n	8007292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	2203      	movs	r2, #3
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	43db      	mvns	r3, r3
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4013      	ands	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007266:	2201      	movs	r2, #1
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4013      	ands	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	091b      	lsrs	r3, r3, #4
 800727c:	f003 0201 	and.w	r2, r3, #1
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d017      	beq.n	80072ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	2203      	movs	r2, #3
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	43db      	mvns	r3, r3
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4013      	ands	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d123      	bne.n	8007322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	08da      	lsrs	r2, r3, #3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3208      	adds	r2, #8
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	220f      	movs	r2, #15
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	08da      	lsrs	r2, r3, #3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3208      	adds	r2, #8
 800731c:	6939      	ldr	r1, [r7, #16]
 800731e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	2203      	movs	r2, #3
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4013      	ands	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0203 	and.w	r2, r3, #3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80a6 	beq.w	80074b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007364:	4b5b      	ldr	r3, [pc, #364]	; (80074d4 <HAL_GPIO_Init+0x2e4>)
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	4a5a      	ldr	r2, [pc, #360]	; (80074d4 <HAL_GPIO_Init+0x2e4>)
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	6613      	str	r3, [r2, #96]	; 0x60
 8007370:	4b58      	ldr	r3, [pc, #352]	; (80074d4 <HAL_GPIO_Init+0x2e4>)
 8007372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800737c:	4a56      	ldr	r2, [pc, #344]	; (80074d8 <HAL_GPIO_Init+0x2e8>)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	089b      	lsrs	r3, r3, #2
 8007382:	3302      	adds	r3, #2
 8007384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	220f      	movs	r2, #15
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	43db      	mvns	r3, r3
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4013      	ands	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073a6:	d01f      	beq.n	80073e8 <HAL_GPIO_Init+0x1f8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a4c      	ldr	r2, [pc, #304]	; (80074dc <HAL_GPIO_Init+0x2ec>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d019      	beq.n	80073e4 <HAL_GPIO_Init+0x1f4>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a4b      	ldr	r2, [pc, #300]	; (80074e0 <HAL_GPIO_Init+0x2f0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <HAL_GPIO_Init+0x1f0>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a4a      	ldr	r2, [pc, #296]	; (80074e4 <HAL_GPIO_Init+0x2f4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00d      	beq.n	80073dc <HAL_GPIO_Init+0x1ec>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a49      	ldr	r2, [pc, #292]	; (80074e8 <HAL_GPIO_Init+0x2f8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d007      	beq.n	80073d8 <HAL_GPIO_Init+0x1e8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a48      	ldr	r2, [pc, #288]	; (80074ec <HAL_GPIO_Init+0x2fc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d101      	bne.n	80073d4 <HAL_GPIO_Init+0x1e4>
 80073d0:	2305      	movs	r3, #5
 80073d2:	e00a      	b.n	80073ea <HAL_GPIO_Init+0x1fa>
 80073d4:	2306      	movs	r3, #6
 80073d6:	e008      	b.n	80073ea <HAL_GPIO_Init+0x1fa>
 80073d8:	2304      	movs	r3, #4
 80073da:	e006      	b.n	80073ea <HAL_GPIO_Init+0x1fa>
 80073dc:	2303      	movs	r3, #3
 80073de:	e004      	b.n	80073ea <HAL_GPIO_Init+0x1fa>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e002      	b.n	80073ea <HAL_GPIO_Init+0x1fa>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <HAL_GPIO_Init+0x1fa>
 80073e8:	2300      	movs	r3, #0
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	f002 0203 	and.w	r2, r2, #3
 80073f0:	0092      	lsls	r2, r2, #2
 80073f2:	4093      	lsls	r3, r2
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073fa:	4937      	ldr	r1, [pc, #220]	; (80074d8 <HAL_GPIO_Init+0x2e8>)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	089b      	lsrs	r3, r3, #2
 8007400:	3302      	adds	r3, #2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007408:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <HAL_GPIO_Init+0x300>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	43db      	mvns	r3, r3
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4013      	ands	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800742c:	4a30      	ldr	r2, [pc, #192]	; (80074f0 <HAL_GPIO_Init+0x300>)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007432:	4b2f      	ldr	r3, [pc, #188]	; (80074f0 <HAL_GPIO_Init+0x300>)
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	43db      	mvns	r3, r3
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4013      	ands	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007456:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <HAL_GPIO_Init+0x300>)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800745c:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <HAL_GPIO_Init+0x300>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	43db      	mvns	r3, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4013      	ands	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007480:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_GPIO_Init+0x300>)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <HAL_GPIO_Init+0x300>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	43db      	mvns	r3, r3
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4013      	ands	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80074aa:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <HAL_GPIO_Init+0x300>)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	3301      	adds	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f47f ae9d 	bne.w	8007200 <HAL_GPIO_Init+0x10>
  }
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40010000 	.word	0x40010000
 80074dc:	48000400 	.word	0x48000400
 80074e0:	48000800 	.word	0x48000800
 80074e4:	48000c00 	.word	0x48000c00
 80074e8:	48001000 	.word	0x48001000
 80074ec:	48001400 	.word	0x48001400
 80074f0:	40010400 	.word	0x40010400

080074f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	887b      	ldrh	r3, [r7, #2]
 8007506:	4013      	ands	r3, r2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
 8007510:	e001      	b.n	8007516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
 8007530:	4613      	mov	r3, r2
 8007532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007534:	787b      	ldrb	r3, [r7, #1]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800753a:	887a      	ldrh	r2, [r7, #2]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007540:	e002      	b.n	8007548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007566:	887a      	ldrh	r2, [r7, #2]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4013      	ands	r3, r2
 800756c:	041a      	lsls	r2, r3, #16
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	43d9      	mvns	r1, r3
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	400b      	ands	r3, r1
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	619a      	str	r2, [r3, #24]
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007592:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007594:	695a      	ldr	r2, [r3, #20]
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800759e:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fb fde6 	bl	8003178 <HAL_GPIO_EXTI_Callback>
  }
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40010400 	.word	0x40010400

080075b8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0be      	b.n	8007748 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d02e      	beq.n	8007674 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a4d      	ldr	r2, [pc, #308]	; (8007750 <HAL_HRTIM_Init+0x198>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10b      	bne.n	8007638 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007620:	4b4c      	ldr	r3, [pc, #304]	; (8007754 <HAL_HRTIM_Init+0x19c>)
 8007622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007624:	4a4b      	ldr	r2, [pc, #300]	; (8007754 <HAL_HRTIM_Init+0x19c>)
 8007626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800762a:	6613      	str	r3, [r2, #96]	; 0x60
 800762c:	4b49      	ldr	r3, [pc, #292]	; (8007754 <HAL_HRTIM_Init+0x19c>)
 800762e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007646:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800765c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fa f999 	bl	80019ac <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d012      	beq.n	80076ac <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007694:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80076bc:	2300      	movs	r3, #0
 80076be:	75fb      	strb	r3, [r7, #23]
 80076c0:	e03e      	b.n	8007740 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80076c2:	7dfa      	ldrb	r2, [r7, #23]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	3318      	adds	r3, #24
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80076d6:	7dfa      	ldrb	r2, [r7, #23]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	331c      	adds	r3, #28
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80076ea:	7dfa      	ldrb	r2, [r7, #23]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	3320      	adds	r3, #32
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80076fe:	7dfa      	ldrb	r2, [r7, #23]
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	3324      	adds	r3, #36	; 0x24
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007712:	7dfa      	ldrb	r2, [r7, #23]
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	4613      	mov	r3, r2
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	3328      	adds	r3, #40	; 0x28
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007726:	7dfa      	ldrb	r2, [r7, #23]
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3330      	adds	r3, #48	; 0x30
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	3301      	adds	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	2b06      	cmp	r3, #6
 8007744:	d9bd      	bls.n	80076c2 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40016800 	.word	0x40016800
 8007754:	40021000 	.word	0x40021000

08007758 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_HRTIM_DLLCalibrationStart+0x18>
 800776c:	2302      	movs	r3, #2
 800776e:	e045      	b.n	80077fc <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d114      	bne.n	80077b2 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0202 	bic.w	r2, r2, #2
 8007798:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80077b0:	e01f      	b.n	80077f2 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0202 	orr.w	r2, r2, #2
 80077c2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80077ce:	f023 010c 	bic.w	r1, r3, #12
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8007812:	f7fd fa19 	bl	8004c48 <HAL_GetTick>
 8007816:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007818:	e014      	b.n	8007844 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d010      	beq.n	8007844 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8007822:	f7fd fa11 	bl	8004c48 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d302      	bcc.n	8007838 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2207      	movs	r2, #7
 800783c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e011      	b.n	8007868 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800784c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007854:	d1e1      	bne.n	800781a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d101      	bne.n	800788c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
 800788a:	e015      	b.n	80078b8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b06      	cmp	r3, #6
 8007898:	d104      	bne.n	80078a4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 ff03 	bl	80086a8 <HRTIM_MasterBase_Config>
 80078a2:	e004      	b.n	80078ae <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 ff2c 	bl	8008706 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_HRTIM_SimpleBaseStart+0x18>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e01b      	b.n	8007910 <HAL_HRTIM_SimpleBaseStart+0x50>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6819      	ldr	r1, [r3, #0]
 80078ee:	4a0b      	ldr	r2, [pc, #44]	; (800791c <HAL_HRTIM_SimpleBaseStart+0x5c>)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	2000003c 	.word	0x2000003c

08007920 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d101      	bne.n	800793c <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
 800793a:	e01c      	b.n	8007976 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_HRTIM_EventConfig+0x2a>
 8007946:	2302      	movs	r3, #2
 8007948:	e015      	b.n	8007976 <HAL_HRTIM_EventConfig+0x56>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2202      	movs	r2, #2
 8007956:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f001 f934 	bl	8008bcc <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d101      	bne.n	8007998 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
 8007996:	e025      	b.n	80079e4 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_HRTIM_EventPrescalerConfig+0x28>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e01e      	b.n	80079e4 <HAL_HRTIM_EventPrescalerConfig+0x66>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 80079be:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b089      	sub	sp, #36	; 0x24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d101      	bne.n	8007a0c <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e1aa      	b.n	8007d62 <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_HRTIM_FaultConfig+0x2a>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e1a3      	b.n	8007d62 <HAL_HRTIM_FaultConfig+0x372>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2202      	movs	r2, #2
 8007a26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a32:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a3c:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	2b1f      	cmp	r3, #31
 8007a5a:	f200 813f 	bhi.w	8007cdc <HAL_HRTIM_FaultConfig+0x2ec>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <HAL_HRTIM_FaultConfig+0x74>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007ae5 	.word	0x08007ae5
 8007a68:	08007b35 	.word	0x08007b35
 8007a6c:	08007cdd 	.word	0x08007cdd
 8007a70:	08007b8b 	.word	0x08007b8b
 8007a74:	08007cdd 	.word	0x08007cdd
 8007a78:	08007cdd 	.word	0x08007cdd
 8007a7c:	08007cdd 	.word	0x08007cdd
 8007a80:	08007be1 	.word	0x08007be1
 8007a84:	08007cdd 	.word	0x08007cdd
 8007a88:	08007cdd 	.word	0x08007cdd
 8007a8c:	08007cdd 	.word	0x08007cdd
 8007a90:	08007cdd 	.word	0x08007cdd
 8007a94:	08007cdd 	.word	0x08007cdd
 8007a98:	08007cdd 	.word	0x08007cdd
 8007a9c:	08007cdd 	.word	0x08007cdd
 8007aa0:	08007c37 	.word	0x08007c37
 8007aa4:	08007cdd 	.word	0x08007cdd
 8007aa8:	08007cdd 	.word	0x08007cdd
 8007aac:	08007cdd 	.word	0x08007cdd
 8007ab0:	08007cdd 	.word	0x08007cdd
 8007ab4:	08007cdd 	.word	0x08007cdd
 8007ab8:	08007cdd 	.word	0x08007cdd
 8007abc:	08007cdd 	.word	0x08007cdd
 8007ac0:	08007cdd 	.word	0x08007cdd
 8007ac4:	08007cdd 	.word	0x08007cdd
 8007ac8:	08007cdd 	.word	0x08007cdd
 8007acc:	08007cdd 	.word	0x08007cdd
 8007ad0:	08007cdd 	.word	0x08007cdd
 8007ad4:	08007cdd 	.word	0x08007cdd
 8007ad8:	08007cdd 	.word	0x08007cdd
 8007adc:	08007cdd 	.word	0x08007cdd
 8007ae0:	08007c87 	.word	0x08007c87
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007aea:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	041b      	lsls	r3, r3, #16
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61fb      	str	r3, [r7, #28]
      break;
 8007b32:	e0dc      	b.n	8007cee <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007b3a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	029b      	lsls	r3, r3, #10
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b5c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	045b      	lsls	r3, r3, #17
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61fb      	str	r3, [r7, #28]
      break;
 8007b88:	e0b1      	b.n	8007cee <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8007b90:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	049b      	lsls	r3, r3, #18
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bb2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	049b      	lsls	r3, r3, #18
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	041b      	lsls	r3, r3, #16
 8007bc4:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	61fb      	str	r3, [r7, #28]
      break;
 8007bde:	e086      	b.n	8007cee <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007be6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	069b      	lsls	r3, r3, #26
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c08:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	04db      	lsls	r3, r3, #19
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	061b      	lsls	r3, r3, #24
 8007c1a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	061b      	lsls	r3, r3, #24
 8007c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
      break;
 8007c34:	e05b      	b.n	8007cee <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007c3c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c5c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	051b      	lsls	r3, r3, #20
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
      break;
 8007c84:	e033      	b.n	8007cee <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007c8c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	029b      	lsls	r3, r3, #10
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cae:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	055b      	lsls	r3, r3, #21
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	61bb      	str	r3, [r7, #24]
      break;
 8007cda:	e008      	b.n	8007cee <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2207      	movs	r2, #7
 8007ce0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007cec:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b07      	cmp	r3, #7
 8007cf8:	d101      	bne.n	8007cfe <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e031      	b.n	8007d62 <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007d08:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d1a:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	f248 0380 	movw	r3, #32896	; 0x8080
 8007d44:	4013      	ands	r3, r2
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3724      	adds	r7, #36	; 0x24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop

08007d70 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d101      	bne.n	8007d8a <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
 8007d88:	e025      	b.n	8007dd6 <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e01e      	b.n	8007dd6 <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007db0:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d101      	bne.n	8007e00 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e0d7      	b.n	8007fb0 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e0d0      	b.n	8007fb0 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	2b1f      	cmp	r3, #31
 8007e24:	f200 80aa 	bhi.w	8007f7c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007eb1 	.word	0x08007eb1
 8007e34:	08007ed3 	.word	0x08007ed3
 8007e38:	08007f7d 	.word	0x08007f7d
 8007e3c:	08007ef5 	.word	0x08007ef5
 8007e40:	08007f7d 	.word	0x08007f7d
 8007e44:	08007f7d 	.word	0x08007f7d
 8007e48:	08007f7d 	.word	0x08007f7d
 8007e4c:	08007f17 	.word	0x08007f17
 8007e50:	08007f7d 	.word	0x08007f7d
 8007e54:	08007f7d 	.word	0x08007f7d
 8007e58:	08007f7d 	.word	0x08007f7d
 8007e5c:	08007f7d 	.word	0x08007f7d
 8007e60:	08007f7d 	.word	0x08007f7d
 8007e64:	08007f7d 	.word	0x08007f7d
 8007e68:	08007f7d 	.word	0x08007f7d
 8007e6c:	08007f39 	.word	0x08007f39
 8007e70:	08007f7d 	.word	0x08007f7d
 8007e74:	08007f7d 	.word	0x08007f7d
 8007e78:	08007f7d 	.word	0x08007f7d
 8007e7c:	08007f7d 	.word	0x08007f7d
 8007e80:	08007f7d 	.word	0x08007f7d
 8007e84:	08007f7d 	.word	0x08007f7d
 8007e88:	08007f7d 	.word	0x08007f7d
 8007e8c:	08007f7d 	.word	0x08007f7d
 8007e90:	08007f7d 	.word	0x08007f7d
 8007e94:	08007f7d 	.word	0x08007f7d
 8007e98:	08007f7d 	.word	0x08007f7d
 8007e9c:	08007f7d 	.word	0x08007f7d
 8007ea0:	08007f7d 	.word	0x08007f7d
 8007ea4:	08007f7d 	.word	0x08007f7d
 8007ea8:	08007f7d 	.word	0x08007f7d
 8007eac:	08007f5b 	.word	0x08007f5b
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007eb8:	f023 0203 	bic.w	r2, r3, #3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8007ed0:	e05d      	b.n	8007f8e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007eda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	025b      	lsls	r3, r3, #9
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8007ef2:	e04c      	b.n	8007f8e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	045b      	lsls	r3, r3, #17
 8007f06:	431a      	orrs	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f10:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8007f14:	e03b      	b.n	8007f8e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	065b      	lsls	r3, r3, #25
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f32:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8007f36:	e02a      	b.n	8007f8e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007f40:	f023 0203 	bic.w	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8007f58:	e019      	b.n	8007f8e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	025b      	lsls	r3, r3, #9
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f76:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8007f7a:	e008      	b.n	8007f8e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2207      	movs	r2, #7
 8007f80:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007f8c:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	d101      	bne.n	8007f9e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e008      	b.n	8007fb0 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d101      	bne.n	8007fd8 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e0e3      	b.n	80081a0 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_HRTIM_FaultCounterConfig+0x2a>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e0dc      	b.n	80081a0 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	2b1f      	cmp	r3, #31
 8007ffc:	f200 80b6 	bhi.w	800816c <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	08008089 	.word	0x08008089
 800800c:	080080af 	.word	0x080080af
 8008010:	0800816d 	.word	0x0800816d
 8008014:	080080d5 	.word	0x080080d5
 8008018:	0800816d 	.word	0x0800816d
 800801c:	0800816d 	.word	0x0800816d
 8008020:	0800816d 	.word	0x0800816d
 8008024:	080080fb 	.word	0x080080fb
 8008028:	0800816d 	.word	0x0800816d
 800802c:	0800816d 	.word	0x0800816d
 8008030:	0800816d 	.word	0x0800816d
 8008034:	0800816d 	.word	0x0800816d
 8008038:	0800816d 	.word	0x0800816d
 800803c:	0800816d 	.word	0x0800816d
 8008040:	0800816d 	.word	0x0800816d
 8008044:	08008121 	.word	0x08008121
 8008048:	0800816d 	.word	0x0800816d
 800804c:	0800816d 	.word	0x0800816d
 8008050:	0800816d 	.word	0x0800816d
 8008054:	0800816d 	.word	0x0800816d
 8008058:	0800816d 	.word	0x0800816d
 800805c:	0800816d 	.word	0x0800816d
 8008060:	0800816d 	.word	0x0800816d
 8008064:	0800816d 	.word	0x0800816d
 8008068:	0800816d 	.word	0x0800816d
 800806c:	0800816d 	.word	0x0800816d
 8008070:	0800816d 	.word	0x0800816d
 8008074:	0800816d 	.word	0x0800816d
 8008078:	0800816d 	.word	0x0800816d
 800807c:	0800816d 	.word	0x0800816d
 8008080:	0800816d 	.word	0x0800816d
 8008084:	08008147 	.word	0x08008147
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008090:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	009a      	lsls	r2, r3, #2
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	431a      	orrs	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 80080ac:	e067      	b.n	800817e <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80080b6:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	029a      	lsls	r2, r3, #10
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	03db      	lsls	r3, r3, #15
 80080c6:	431a      	orrs	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 80080d2:	e054      	b.n	800817e <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80080dc:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	049a      	lsls	r2, r3, #18
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	05db      	lsls	r3, r3, #23
 80080ec:	431a      	orrs	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 80080f8:	e041      	b.n	800817e <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008102:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	069a      	lsls	r2, r3, #26
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	07db      	lsls	r3, r3, #31
 8008112:	431a      	orrs	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 800811e:	e02e      	b.n	800817e <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008128:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	009a      	lsls	r2, r3, #2
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	01db      	lsls	r3, r3, #7
 8008138:	431a      	orrs	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 8008144:	e01b      	b.n	800817e <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800814e:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	029a      	lsls	r2, r3, #10
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	03db      	lsls	r3, r3, #15
 800815e:	431a      	orrs	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 800816a:	e008      	b.n	800817e <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2207      	movs	r2, #7
 8008170:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 800817c:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b07      	cmp	r3, #7
 8008188:	d101      	bne.n	800818e <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e008      	b.n	80081a0 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ca:	f023 0101 	bic.w	r1, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f003 0201 	and.w	r2, r3, #1
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00e      	beq.n	8008206 <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081f0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00e      	beq.n	800822e <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	041b      	lsls	r3, r3, #16
 8008220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00e      	beq.n	8008256 <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008240:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008268:	f023 0101 	bic.w	r1, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f003 0201 	and.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800828e:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d101      	bne.n	80082cc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80082c8:	2302      	movs	r3, #2
 80082ca:	e07a      	b.n	80083c2 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80082d6:	2302      	movs	r3, #2
 80082d8:	e073      	b.n	80083c2 <HAL_HRTIM_WaveformTimerConfig+0x112>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2202      	movs	r2, #2
 80082e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	d104      	bne.n	80082fa <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fa47 	bl	8008786 <HRTIM_MasterWaveform_Config>
 80082f8:	e004      	b.n	8008304 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fade 	bl	80088c0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6819      	ldr	r1, [r3, #0]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4613      	mov	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4403      	add	r3, r0
 8008316:	3320      	adds	r3, #32
 8008318:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6859      	ldr	r1, [r3, #4]
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4403      	add	r3, r0
 800832c:	3324      	adds	r3, #36	; 0x24
 800832e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6899      	ldr	r1, [r3, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4613      	mov	r3, r2
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4403      	add	r3, r0
 8008342:	3328      	adds	r3, #40	; 0x28
 8008344:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68d9      	ldr	r1, [r3, #12]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4403      	add	r3, r0
 8008358:	332c      	adds	r3, #44	; 0x2c
 800835a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6919      	ldr	r1, [r3, #16]
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4403      	add	r3, r0
 800836e:	3330      	adds	r3, #48	; 0x30
 8008370:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fe51 	bl	800901c <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b06      	cmp	r3, #6
 800837e:	d017      	beq.n	80083b0 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d113      	bne.n	80083b0 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3301      	adds	r3, #1
 8008390:	01db      	lsls	r3, r3, #7
 8008392:	4413      	add	r3, r2
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839e:	025b      	lsls	r3, r3, #9
 80083a0:	68f9      	ldr	r1, [r7, #12]
 80083a2:	6809      	ldr	r1, [r1, #0]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3301      	adds	r3, #1
 80083aa:	01db      	lsls	r3, r3, #7
 80083ac:	440b      	add	r3, r1
 80083ae:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d101      	bne.n	80083ea <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
 80083e8:	e157      	b.n	800869a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e150      	b.n	800869a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b06      	cmp	r3, #6
 800840c:	d140      	bne.n	8008490 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3b01      	subs	r3, #1
 8008412:	2b07      	cmp	r3, #7
 8008414:	d82a      	bhi.n	800846c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	0800843d 	.word	0x0800843d
 8008420:	08008449 	.word	0x08008449
 8008424:	0800846d 	.word	0x0800846d
 8008428:	08008455 	.word	0x08008455
 800842c:	0800846d 	.word	0x0800846d
 8008430:	0800846d 	.word	0x0800846d
 8008434:	0800846d 	.word	0x0800846d
 8008438:	08008461 	.word	0x08008461
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	61da      	str	r2, [r3, #28]
        break;
 8008446:	e01a      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	6812      	ldr	r2, [r2, #0]
 8008450:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8008452:	e014      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800845e:	e00e      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800846a:	e008      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2207      	movs	r2, #7
 8008470:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 800847c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b07      	cmp	r3, #7
 8008488:	f040 80fe 	bne.w	8008688 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e104      	b.n	800869a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3b01      	subs	r3, #1
 8008494:	2b07      	cmp	r3, #7
 8008496:	f200 80e3 	bhi.w	8008660 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084c1 	.word	0x080084c1
 80084a4:	080084d5 	.word	0x080084d5
 80084a8:	08008661 	.word	0x08008661
 80084ac:	08008591 	.word	0x08008591
 80084b0:	08008661 	.word	0x08008661
 80084b4:	08008661 	.word	0x08008661
 80084b8:	08008661 	.word	0x08008661
 80084bc:	080085a5 	.word	0x080085a5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6819      	ldr	r1, [r3, #0]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	01db      	lsls	r3, r3, #7
 80084cc:	440b      	add	r3, r1
 80084ce:	339c      	adds	r3, #156	; 0x9c
 80084d0:	601a      	str	r2, [r3, #0]
        break;
 80084d2:	e0d1      	b.n	8008678 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6819      	ldr	r1, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	01db      	lsls	r3, r3, #7
 80084e0:	440b      	add	r3, r1
 80084e2:	33a4      	adds	r3, #164	; 0xa4
 80084e4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d03f      	beq.n	800856e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	3301      	adds	r3, #1
 80084f6:	01db      	lsls	r3, r3, #7
 80084f8:	4413      	add	r3, r2
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	6811      	ldr	r1, [r2, #0]
 8008500:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3301      	adds	r3, #1
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	440b      	add	r3, r1
 800850c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3301      	adds	r3, #1
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	4413      	add	r3, r2
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	6809      	ldr	r1, [r1, #0]
 8008524:	431a      	orrs	r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	3301      	adds	r3, #1
 800852a:	01db      	lsls	r3, r3, #7
 800852c:	440b      	add	r3, r1
 800852e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d109      	bne.n	800854e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6819      	ldr	r1, [r3, #0]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	01db      	lsls	r3, r3, #7
 8008546:	440b      	add	r3, r1
 8008548:	339c      	adds	r3, #156	; 0x9c
 800854a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800854c:	e091      	b.n	8008672 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008556:	f040 808c 	bne.w	8008672 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	01db      	lsls	r3, r3, #7
 8008566:	440b      	add	r3, r1
 8008568:	33a8      	adds	r3, #168	; 0xa8
 800856a:	601a      	str	r2, [r3, #0]
         break;
 800856c:	e081      	b.n	8008672 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3301      	adds	r3, #1
 8008576:	01db      	lsls	r3, r3, #7
 8008578:	4413      	add	r3, r2
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	6811      	ldr	r1, [r2, #0]
 8008580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3301      	adds	r3, #1
 8008588:	01db      	lsls	r3, r3, #7
 800858a:	440b      	add	r3, r1
 800858c:	601a      	str	r2, [r3, #0]
         break;
 800858e:	e070      	b.n	8008672 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6819      	ldr	r1, [r3, #0]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	01db      	lsls	r3, r3, #7
 800859c:	440b      	add	r3, r1
 800859e:	33a8      	adds	r3, #168	; 0xa8
 80085a0:	601a      	str	r2, [r3, #0]
        break;
 80085a2:	e069      	b.n	8008678 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6819      	ldr	r1, [r3, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	01db      	lsls	r3, r3, #7
 80085b0:	440b      	add	r3, r1
 80085b2:	33ac      	adds	r3, #172	; 0xac
 80085b4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d03f      	beq.n	800863e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	3301      	adds	r3, #1
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	4413      	add	r3, r2
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	6811      	ldr	r1, [r2, #0]
 80085d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	3301      	adds	r3, #1
 80085d8:	01db      	lsls	r3, r3, #7
 80085da:	440b      	add	r3, r1
 80085dc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3301      	adds	r3, #1
 80085e6:	01db      	lsls	r3, r3, #7
 80085e8:	4413      	add	r3, r2
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	68f9      	ldr	r1, [r7, #12]
 80085f4:	6809      	ldr	r1, [r1, #0]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3301      	adds	r3, #1
 80085fc:	01db      	lsls	r3, r3, #7
 80085fe:	440b      	add	r3, r1
 8008600:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860a:	d109      	bne.n	8008620 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	01db      	lsls	r3, r3, #7
 8008618:	440b      	add	r3, r1
 800861a:	339c      	adds	r3, #156	; 0x9c
 800861c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800861e:	e02a      	b.n	8008676 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008628:	d125      	bne.n	8008676 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6819      	ldr	r1, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	01db      	lsls	r3, r3, #7
 8008636:	440b      	add	r3, r1
 8008638:	33a8      	adds	r3, #168	; 0xa8
 800863a:	601a      	str	r2, [r3, #0]
         break;
 800863c:	e01b      	b.n	8008676 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	3301      	adds	r3, #1
 8008646:	01db      	lsls	r3, r3, #7
 8008648:	4413      	add	r3, r2
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	6811      	ldr	r1, [r2, #0]
 8008650:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	3301      	adds	r3, #1
 8008658:	01db      	lsls	r3, r3, #7
 800865a:	440b      	add	r3, r1
 800865c:	601a      	str	r2, [r3, #0]
         break;
 800865e:	e00a      	b.n	8008676 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2207      	movs	r2, #7
 8008664:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008670:	e002      	b.n	8008678 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008672:	bf00      	nop
 8008674:	e000      	b.n	8008678 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008676:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b07      	cmp	r3, #7
 8008682:	d101      	bne.n	8008688 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e008      	b.n	800869a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop

080086a8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f023 0307 	bic.w	r3, r3, #7
 80086c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0318 	bic.w	r3, r3, #24
 80086d2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	6852      	ldr	r2, [r2, #4]
 80086f8:	619a      	str	r2, [r3, #24]
}
 80086fa:	bf00      	nop
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008706:	b480      	push	{r7}
 8008708:	b087      	sub	sp, #28
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3301      	adds	r3, #1
 800871a:	01db      	lsls	r3, r3, #7
 800871c:	4413      	add	r3, r2
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0318 	bic.w	r3, r3, #24
 800873a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3301      	adds	r3, #1
 800874e:	01db      	lsls	r3, r3, #7
 8008750:	4413      	add	r3, r2
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	01db      	lsls	r3, r3, #7
 8008762:	440b      	add	r3, r1
 8008764:	3394      	adds	r3, #148	; 0x94
 8008766:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6819      	ldr	r1, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	01db      	lsls	r3, r3, #7
 8008774:	440b      	add	r3, r1
 8008776:	3398      	adds	r3, #152	; 0x98
 8008778:	601a      	str	r2, [r3, #0]
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80087a0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f023 0320 	bic.w	r3, r3, #32
 80087a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087ba:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d003      	beq.n	80087cc <HRTIM_MasterWaveform_Config+0x46>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d108      	bne.n	80087de <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087d2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f043 0320 	orr.w	r3, r3, #32
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e021      	b.n	8008822 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d108      	bne.n	80087f8 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ec:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	e014      	b.n	8008822 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d108      	bne.n	8008812 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008806:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e007      	b.n	8008822 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f023 0320 	bic.w	r3, r3, #32
 8008818:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008820:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008828:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800883a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800884c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800885e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008870:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008884:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008896:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b08b      	sub	sp, #44	; 0x2c
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	3301      	adds	r3, #1
 80088d4:	01db      	lsls	r3, r3, #7
 80088d6:	4413      	add	r3, r2
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	3301      	adds	r3, #1
 80088e6:	01db      	lsls	r3, r3, #7
 80088e8:	440b      	add	r3, r1
 80088ea:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	3301      	adds	r3, #1
 80088f4:	01db      	lsls	r3, r3, #7
 80088f6:	4413      	add	r3, r2
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	01db      	lsls	r3, r3, #7
 8008904:	4413      	add	r3, r2
 8008906:	33e8      	adds	r3, #232	; 0xe8
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	01db      	lsls	r3, r3, #7
 8008914:	4413      	add	r3, r2
 8008916:	33e4      	adds	r3, #228	; 0xe4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008924:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	f023 0320 	bic.w	r3, r3, #32
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008934:	4313      	orrs	r3, r2
 8008936:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	2b20      	cmp	r3, #32
 800893e:	d003      	beq.n	8008948 <HRTIM_TimingUnitWaveform_Config+0x88>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d108      	bne.n	800895a <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	f043 0320 	orr.w	r3, r3, #32
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
 8008958:	e021      	b.n	800899e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	2b03      	cmp	r3, #3
 8008960:	d108      	bne.n	8008974 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
 8008972:	e014      	b.n	800899e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	2b04      	cmp	r3, #4
 800897a:	d108      	bne.n	800898e <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	e007      	b.n	800899e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	f023 0320 	bic.w	r3, r3, #32
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ac:	4313      	orrs	r3, r2
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089be:	4313      	orrs	r3, r2
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d0:	4313      	orrs	r3, r2
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	4313      	orrs	r3, r2
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f4:	4313      	orrs	r3, r2
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a08:	d103      	bne.n	8008a12 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a20:	4313      	orrs	r3, r2
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	4313      	orrs	r3, r2
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a52:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a7a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a80:	6a3a      	ldr	r2, [r7, #32]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a8a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008a8e:	d004      	beq.n	8008a9a <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a94:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008a98:	d103      	bne.n	8008aa2 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	d108      	bne.n	8008ab4 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008aa8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aae:	6a3a      	ldr	r2, [r7, #32]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aba:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b05      	cmp	r3, #5
 8008ad0:	d850      	bhi.n	8008b74 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008af1 	.word	0x08008af1
 8008adc:	08008b07 	.word	0x08008b07
 8008ae0:	08008b1d 	.word	0x08008b1d
 8008ae4:	08008b33 	.word	0x08008b33
 8008ae8:	08008b49 	.word	0x08008b49
 8008aec:	08008b5f 	.word	0x08008b5f
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008af6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61fb      	str	r3, [r7, #28]
      break;
 8008b04:	e037      	b.n	8008b76 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b0c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	61fb      	str	r3, [r7, #28]
      break;
 8008b1a:	e02c      	b.n	8008b76 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008b22:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	61fb      	str	r3, [r7, #28]
      break;
 8008b30:	e021      	b.n	8008b76 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b38:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]
      break;
 8008b46:	e016      	b.n	8008b76 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b4e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	015b      	lsls	r3, r3, #5
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	61fb      	str	r3, [r7, #28]
      break;
 8008b5c:	e00b      	b.n	8008b76 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008b64:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	019b      	lsls	r3, r3, #6
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	61fb      	str	r3, [r7, #28]
      break;
 8008b72:	e000      	b.n	8008b76 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8008b74:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	01db      	lsls	r3, r3, #7
 8008b80:	4413      	add	r3, r2
 8008b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b84:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	01db      	lsls	r3, r3, #7
 8008b8e:	4413      	add	r3, r2
 8008b90:	33e8      	adds	r3, #232	; 0xe8
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	01db      	lsls	r3, r3, #7
 8008b9e:	4413      	add	r3, r2
 8008ba0:	33e4      	adds	r3, #228	; 0xe4
 8008ba2:	6a3a      	ldr	r2, [r7, #32]
 8008ba4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	01db      	lsls	r3, r3, #7
 8008bae:	4413      	add	r3, r2
 8008bb0:	33d4      	adds	r3, #212	; 0xd4
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008bc0:	bf00      	nop
 8008bc2:	372c      	adds	r7, #44	; 0x2c
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b089      	sub	sp, #36	; 0x24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8008be0:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008bea:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008bf4:	617b      	str	r3, [r7, #20]

  switch (Event)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b0a      	cmp	r3, #10
 8008bfa:	f200 8208 	bhi.w	800900e <HRTIM_EventConfig+0x442>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <HRTIM_EventConfig+0x38>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c31 	.word	0x08008c31
 8008c08:	08008c51 	.word	0x08008c51
 8008c0c:	08008ca7 	.word	0x08008ca7
 8008c10:	08008d03 	.word	0x08008d03
 8008c14:	08008d61 	.word	0x08008d61
 8008c18:	08008dbf 	.word	0x08008dbf
 8008c1c:	08008e1d 	.word	0x08008e1d
 8008c20:	08008e7b 	.word	0x08008e7b
 8008c24:	08008edf 	.word	0x08008edf
 8008c28:	08008f43 	.word	0x08008f43
 8008c2c:	08008fa9 	.word	0x08008fa9
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008c4e:	e1df      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008c56:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 0318 	and.w	r3, r3, #24
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008ca4:	e1b4      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8008cac:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	019b      	lsls	r3, r3, #6
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	019b      	lsls	r3, r3, #6
 8008cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	019b      	lsls	r3, r3, #6
 8008cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	019b      	lsls	r3, r3, #6
 8008cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008d00:	e186      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d08:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	031b      	lsls	r3, r3, #12
 8008d10:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008d14:	69fa      	ldr	r2, [r7, #28]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	031b      	lsls	r3, r3, #12
 8008d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	031b      	lsls	r3, r3, #12
 8008d30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	031b      	lsls	r3, r3, #12
 8008d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008d5e:	e157      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 8008d66:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	049b      	lsls	r3, r3, #18
 8008d6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	049b      	lsls	r3, r3, #18
 8008d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	049b      	lsls	r3, r3, #18
 8008d8e:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	049b      	lsls	r3, r3, #18
 8008da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008dbc:	e128      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008dc4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	061b      	lsls	r3, r3, #24
 8008dcc:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008de0:	69fa      	ldr	r2, [r7, #28]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	061b      	lsls	r3, r3, #24
 8008dec:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	061b      	lsls	r3, r3, #24
 8008e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008e1a:	e0f9      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	f023 031f 	bic.w	r3, r3, #31
 8008e22:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 0318 	and.w	r3, r3, #24
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f023 030f 	bic.w	r3, r3, #15
 8008e54:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008e78:	e0ca      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8008e80:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	019b      	lsls	r3, r3, #6
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	019b      	lsls	r3, r3, #6
 8008e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	019b      	lsls	r3, r3, #6
 8008ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8008eb6:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	019b      	lsls	r3, r3, #6
 8008ebe:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008edc:	e098      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8008ee4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	031b      	lsls	r3, r3, #12
 8008eec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	031b      	lsls	r3, r3, #12
 8008efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	031b      	lsls	r3, r3, #12
 8008f0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f1c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	031b      	lsls	r3, r3, #12
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008f40:	e066      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8008f48:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	049b      	lsls	r3, r3, #18
 8008f50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	049b      	lsls	r3, r3, #18
 8008f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	049b      	lsls	r3, r3, #18
 8008f70:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8008f80:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	049b      	lsls	r3, r3, #18
 8008f88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008fa6:	e033      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8008fae:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	061b      	lsls	r3, r3, #24
 8008fd6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008fe6:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	061b      	lsls	r3, r3, #24
 8008fee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800900c:	e000      	b.n	8009010 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 800900e:	bf00      	nop
  }
}
 8009010:	bf00      	nop
 8009012:	3724      	adds	r7, #36	; 0x24
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b06      	cmp	r3, #6
 800902a:	d85e      	bhi.n	80090ea <HRTIM_ForceRegistersUpdate+0xce>
 800902c:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <HRTIM_ForceRegistersUpdate+0x18>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	08009067 	.word	0x08009067
 8009038:	0800907d 	.word	0x0800907d
 800903c:	08009093 	.word	0x08009093
 8009040:	080090a9 	.word	0x080090a9
 8009044:	080090bf 	.word	0x080090bf
 8009048:	080090d5 	.word	0x080090d5
 800904c:	08009051 	.word	0x08009051
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f042 0201 	orr.w	r2, r2, #1
 8009060:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009064:	e042      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0202 	orr.w	r2, r2, #2
 8009076:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800907a:	e037      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0204 	orr.w	r2, r2, #4
 800908c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009090:	e02c      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0208 	orr.w	r2, r2, #8
 80090a2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090a6:	e021      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0210 	orr.w	r2, r2, #16
 80090b8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090bc:	e016      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0220 	orr.w	r2, r2, #32
 80090ce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090d2:	e00b      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090e8:	e000      	b.n	80090ec <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 80090ea:	bf00      	nop
  }
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d141      	bne.n	800918a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009106:	4b4b      	ldr	r3, [pc, #300]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800910e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009112:	d131      	bne.n	8009178 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009114:	4b47      	ldr	r3, [pc, #284]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800911a:	4a46      	ldr	r2, [pc, #280]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800911c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009124:	4b43      	ldr	r3, [pc, #268]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800912c:	4a41      	ldr	r2, [pc, #260]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800912e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009134:	4b40      	ldr	r3, [pc, #256]	; (8009238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2232      	movs	r2, #50	; 0x32
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	4a3f      	ldr	r2, [pc, #252]	; (800923c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009140:	fba2 2303 	umull	r2, r3, r2, r3
 8009144:	0c9b      	lsrs	r3, r3, #18
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800914a:	e002      	b.n	8009152 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3b01      	subs	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009152:	4b38      	ldr	r3, [pc, #224]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915e:	d102      	bne.n	8009166 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f2      	bne.n	800914c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009166:	4b33      	ldr	r3, [pc, #204]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800916e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009172:	d158      	bne.n	8009226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e057      	b.n	8009228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009178:	4b2e      	ldr	r3, [pc, #184]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800917a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800917e:	4a2d      	ldr	r2, [pc, #180]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009188:	e04d      	b.n	8009226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009190:	d141      	bne.n	8009216 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009192:	4b28      	ldr	r3, [pc, #160]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800919a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919e:	d131      	bne.n	8009204 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091a0:	4b24      	ldr	r3, [pc, #144]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091a6:	4a23      	ldr	r2, [pc, #140]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80091b0:	4b20      	ldr	r3, [pc, #128]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80091b8:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80091c0:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2232      	movs	r2, #50	; 0x32
 80091c6:	fb02 f303 	mul.w	r3, r2, r3
 80091ca:	4a1c      	ldr	r2, [pc, #112]	; (800923c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80091cc:	fba2 2303 	umull	r2, r3, r2, r3
 80091d0:	0c9b      	lsrs	r3, r3, #18
 80091d2:	3301      	adds	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091d6:	e002      	b.n	80091de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3b01      	subs	r3, #1
 80091dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091de:	4b15      	ldr	r3, [pc, #84]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ea:	d102      	bne.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f2      	bne.n	80091d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80091f2:	4b10      	ldr	r3, [pc, #64]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091fe:	d112      	bne.n	8009226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e011      	b.n	8009228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800920a:	4a0a      	ldr	r2, [pc, #40]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800920c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009214:	e007      	b.n	8009226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009216:	4b07      	ldr	r3, [pc, #28]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800921e:	4a05      	ldr	r2, [pc, #20]	; (8009234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009224:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	40007000 	.word	0x40007000
 8009238:	20000030 	.word	0x20000030
 800923c:	431bde83 	.word	0x431bde83

08009240 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	4a04      	ldr	r2, [pc, #16]	; (800925c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800924a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800924e:	6093      	str	r3, [r2, #8]
}
 8009250:	bf00      	nop
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40007000 	.word	0x40007000

08009260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b088      	sub	sp, #32
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e306      	b.n	8009880 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d075      	beq.n	800936a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800927e:	4b97      	ldr	r3, [pc, #604]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 030c 	and.w	r3, r3, #12
 8009286:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009288:	4b94      	ldr	r3, [pc, #592]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b0c      	cmp	r3, #12
 8009296:	d102      	bne.n	800929e <HAL_RCC_OscConfig+0x3e>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b03      	cmp	r3, #3
 800929c:	d002      	beq.n	80092a4 <HAL_RCC_OscConfig+0x44>
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d10b      	bne.n	80092bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a4:	4b8d      	ldr	r3, [pc, #564]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d05b      	beq.n	8009368 <HAL_RCC_OscConfig+0x108>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d157      	bne.n	8009368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e2e1      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c4:	d106      	bne.n	80092d4 <HAL_RCC_OscConfig+0x74>
 80092c6:	4b85      	ldr	r3, [pc, #532]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a84      	ldr	r2, [pc, #528]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	e01d      	b.n	8009310 <HAL_RCC_OscConfig+0xb0>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092dc:	d10c      	bne.n	80092f8 <HAL_RCC_OscConfig+0x98>
 80092de:	4b7f      	ldr	r3, [pc, #508]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a7e      	ldr	r2, [pc, #504]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	4b7c      	ldr	r3, [pc, #496]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a7b      	ldr	r2, [pc, #492]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	e00b      	b.n	8009310 <HAL_RCC_OscConfig+0xb0>
 80092f8:	4b78      	ldr	r3, [pc, #480]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a77      	ldr	r2, [pc, #476]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80092fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	4b75      	ldr	r3, [pc, #468]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a74      	ldr	r2, [pc, #464]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800930a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800930e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d013      	beq.n	8009340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009318:	f7fb fc96 	bl	8004c48 <HAL_GetTick>
 800931c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800931e:	e008      	b.n	8009332 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009320:	f7fb fc92 	bl	8004c48 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b64      	cmp	r3, #100	; 0x64
 800932c:	d901      	bls.n	8009332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e2a6      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009332:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0f0      	beq.n	8009320 <HAL_RCC_OscConfig+0xc0>
 800933e:	e014      	b.n	800936a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009340:	f7fb fc82 	bl	8004c48 <HAL_GetTick>
 8009344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009348:	f7fb fc7e 	bl	8004c48 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b64      	cmp	r3, #100	; 0x64
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e292      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800935a:	4b60      	ldr	r3, [pc, #384]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1f0      	bne.n	8009348 <HAL_RCC_OscConfig+0xe8>
 8009366:	e000      	b.n	800936a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d075      	beq.n	8009462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009376:	4b59      	ldr	r3, [pc, #356]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 030c 	and.w	r3, r3, #12
 800937e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009380:	4b56      	ldr	r3, [pc, #344]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f003 0303 	and.w	r3, r3, #3
 8009388:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b0c      	cmp	r3, #12
 800938e:	d102      	bne.n	8009396 <HAL_RCC_OscConfig+0x136>
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d002      	beq.n	800939c <HAL_RCC_OscConfig+0x13c>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	2b04      	cmp	r3, #4
 800939a:	d11f      	bne.n	80093dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800939c:	4b4f      	ldr	r3, [pc, #316]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d005      	beq.n	80093b4 <HAL_RCC_OscConfig+0x154>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e265      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093b4:	4b49      	ldr	r3, [pc, #292]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	061b      	lsls	r3, r3, #24
 80093c2:	4946      	ldr	r1, [pc, #280]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80093c8:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <HAL_RCC_OscConfig+0x280>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fb fbef 	bl	8004bb0 <HAL_InitTick>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d043      	beq.n	8009460 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e251      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d023      	beq.n	800942c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093e4:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a3c      	ldr	r2, [pc, #240]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80093ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f0:	f7fb fc2a 	bl	8004c48 <HAL_GetTick>
 80093f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f8:	f7fb fc26 	bl	8004c48 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e23a      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800940a:	4b34      	ldr	r3, [pc, #208]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f0      	beq.n	80093f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009416:	4b31      	ldr	r3, [pc, #196]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	061b      	lsls	r3, r3, #24
 8009424:	492d      	ldr	r1, [pc, #180]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009426:	4313      	orrs	r3, r2
 8009428:	604b      	str	r3, [r1, #4]
 800942a:	e01a      	b.n	8009462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800942c:	4b2b      	ldr	r3, [pc, #172]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a2a      	ldr	r2, [pc, #168]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009438:	f7fb fc06 	bl	8004c48 <HAL_GetTick>
 800943c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800943e:	e008      	b.n	8009452 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009440:	f7fb fc02 	bl	8004c48 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e216      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009452:	4b22      	ldr	r3, [pc, #136]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1f0      	bne.n	8009440 <HAL_RCC_OscConfig+0x1e0>
 800945e:	e000      	b.n	8009462 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d041      	beq.n	80094f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01c      	beq.n	80094b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009476:	4b19      	ldr	r3, [pc, #100]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 8009478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800947c:	4a17      	ldr	r2, [pc, #92]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009486:	f7fb fbdf 	bl	8004c48 <HAL_GetTick>
 800948a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800948c:	e008      	b.n	80094a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800948e:	f7fb fbdb 	bl	8004c48 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b02      	cmp	r3, #2
 800949a:	d901      	bls.n	80094a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e1ef      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80094a0:	4b0e      	ldr	r3, [pc, #56]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80094a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0ef      	beq.n	800948e <HAL_RCC_OscConfig+0x22e>
 80094ae:	e020      	b.n	80094f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80094b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <HAL_RCC_OscConfig+0x27c>)
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094c0:	f7fb fbc2 	bl	8004c48 <HAL_GetTick>
 80094c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094c6:	e00d      	b.n	80094e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094c8:	f7fb fbbe 	bl	8004c48 <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d906      	bls.n	80094e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e1d2      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
 80094da:	bf00      	nop
 80094dc:	40021000 	.word	0x40021000
 80094e0:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094e4:	4b8c      	ldr	r3, [pc, #560]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80094e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1ea      	bne.n	80094c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80a6 	beq.w	800964c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009500:	2300      	movs	r3, #0
 8009502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009504:	4b84      	ldr	r3, [pc, #528]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <HAL_RCC_OscConfig+0x2b4>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <HAL_RCC_OscConfig+0x2b6>
 8009514:	2300      	movs	r3, #0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00d      	beq.n	8009536 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800951a:	4b7f      	ldr	r3, [pc, #508]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 800951c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951e:	4a7e      	ldr	r2, [pc, #504]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009524:	6593      	str	r3, [r2, #88]	; 0x58
 8009526:	4b7c      	ldr	r3, [pc, #496]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009532:	2301      	movs	r3, #1
 8009534:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009536:	4b79      	ldr	r3, [pc, #484]	; (800971c <HAL_RCC_OscConfig+0x4bc>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953e:	2b00      	cmp	r3, #0
 8009540:	d118      	bne.n	8009574 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009542:	4b76      	ldr	r3, [pc, #472]	; (800971c <HAL_RCC_OscConfig+0x4bc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a75      	ldr	r2, [pc, #468]	; (800971c <HAL_RCC_OscConfig+0x4bc>)
 8009548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800954c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800954e:	f7fb fb7b 	bl	8004c48 <HAL_GetTick>
 8009552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009554:	e008      	b.n	8009568 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009556:	f7fb fb77 	bl	8004c48 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d901      	bls.n	8009568 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e18b      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009568:	4b6c      	ldr	r3, [pc, #432]	; (800971c <HAL_RCC_OscConfig+0x4bc>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0f0      	beq.n	8009556 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d108      	bne.n	800958e <HAL_RCC_OscConfig+0x32e>
 800957c:	4b66      	ldr	r3, [pc, #408]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 800957e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009582:	4a65      	ldr	r2, [pc, #404]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009584:	f043 0301 	orr.w	r3, r3, #1
 8009588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800958c:	e024      	b.n	80095d8 <HAL_RCC_OscConfig+0x378>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	2b05      	cmp	r3, #5
 8009594:	d110      	bne.n	80095b8 <HAL_RCC_OscConfig+0x358>
 8009596:	4b60      	ldr	r3, [pc, #384]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959c:	4a5e      	ldr	r2, [pc, #376]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 800959e:	f043 0304 	orr.w	r3, r3, #4
 80095a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095a6:	4b5c      	ldr	r3, [pc, #368]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ac:	4a5a      	ldr	r2, [pc, #360]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80095ae:	f043 0301 	orr.w	r3, r3, #1
 80095b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095b6:	e00f      	b.n	80095d8 <HAL_RCC_OscConfig+0x378>
 80095b8:	4b57      	ldr	r3, [pc, #348]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80095ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095be:	4a56      	ldr	r2, [pc, #344]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80095c0:	f023 0301 	bic.w	r3, r3, #1
 80095c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80095c8:	4b53      	ldr	r3, [pc, #332]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80095ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ce:	4a52      	ldr	r2, [pc, #328]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80095d0:	f023 0304 	bic.w	r3, r3, #4
 80095d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d016      	beq.n	800960e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e0:	f7fb fb32 	bl	8004c48 <HAL_GetTick>
 80095e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095e6:	e00a      	b.n	80095fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095e8:	f7fb fb2e 	bl	8004c48 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e140      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095fe:	4b46      	ldr	r3, [pc, #280]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0ed      	beq.n	80095e8 <HAL_RCC_OscConfig+0x388>
 800960c:	e015      	b.n	800963a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800960e:	f7fb fb1b 	bl	8004c48 <HAL_GetTick>
 8009612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009614:	e00a      	b.n	800962c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009616:	f7fb fb17 	bl	8004c48 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	f241 3288 	movw	r2, #5000	; 0x1388
 8009624:	4293      	cmp	r3, r2
 8009626:	d901      	bls.n	800962c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e129      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800962c:	4b3a      	ldr	r3, [pc, #232]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1ed      	bne.n	8009616 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800963a:	7ffb      	ldrb	r3, [r7, #31]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d105      	bne.n	800964c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009640:	4b35      	ldr	r3, [pc, #212]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009644:	4a34      	ldr	r2, [pc, #208]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800964a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d03c      	beq.n	80096d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01c      	beq.n	800969a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009660:	4b2d      	ldr	r3, [pc, #180]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009666:	4a2c      	ldr	r2, [pc, #176]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009670:	f7fb faea 	bl	8004c48 <HAL_GetTick>
 8009674:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009676:	e008      	b.n	800968a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009678:	f7fb fae6 	bl	8004c48 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e0fa      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800968a:	4b23      	ldr	r3, [pc, #140]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 800968c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0ef      	beq.n	8009678 <HAL_RCC_OscConfig+0x418>
 8009698:	e01b      	b.n	80096d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800969a:	4b1f      	ldr	r3, [pc, #124]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 800969c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096a0:	4a1d      	ldr	r2, [pc, #116]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80096a2:	f023 0301 	bic.w	r3, r3, #1
 80096a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096aa:	f7fb facd 	bl	8004c48 <HAL_GetTick>
 80096ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096b0:	e008      	b.n	80096c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096b2:	f7fb fac9 	bl	8004c48 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d901      	bls.n	80096c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e0dd      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096c4:	4b14      	ldr	r3, [pc, #80]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80096c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1ef      	bne.n	80096b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 80d1 	beq.w	800987e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096dc:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f003 030c 	and.w	r3, r3, #12
 80096e4:	2b0c      	cmp	r3, #12
 80096e6:	f000 808b 	beq.w	8009800 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d15e      	bne.n	80097b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a08      	ldr	r2, [pc, #32]	; (8009718 <HAL_RCC_OscConfig+0x4b8>)
 80096f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096fe:	f7fb faa3 	bl	8004c48 <HAL_GetTick>
 8009702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009704:	e00c      	b.n	8009720 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009706:	f7fb fa9f 	bl	8004c48 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	2b02      	cmp	r3, #2
 8009712:	d905      	bls.n	8009720 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e0b3      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
 8009718:	40021000 	.word	0x40021000
 800971c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009720:	4b59      	ldr	r3, [pc, #356]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1ec      	bne.n	8009706 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800972c:	4b56      	ldr	r3, [pc, #344]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	4b56      	ldr	r3, [pc, #344]	; (800988c <HAL_RCC_OscConfig+0x62c>)
 8009732:	4013      	ands	r3, r2
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6a11      	ldr	r1, [r2, #32]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800973c:	3a01      	subs	r2, #1
 800973e:	0112      	lsls	r2, r2, #4
 8009740:	4311      	orrs	r1, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009746:	0212      	lsls	r2, r2, #8
 8009748:	4311      	orrs	r1, r2
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800974e:	0852      	lsrs	r2, r2, #1
 8009750:	3a01      	subs	r2, #1
 8009752:	0552      	lsls	r2, r2, #21
 8009754:	4311      	orrs	r1, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800975a:	0852      	lsrs	r2, r2, #1
 800975c:	3a01      	subs	r2, #1
 800975e:	0652      	lsls	r2, r2, #25
 8009760:	4311      	orrs	r1, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009766:	06d2      	lsls	r2, r2, #27
 8009768:	430a      	orrs	r2, r1
 800976a:	4947      	ldr	r1, [pc, #284]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 800976c:	4313      	orrs	r3, r2
 800976e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009770:	4b45      	ldr	r3, [pc, #276]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a44      	ldr	r2, [pc, #272]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 8009776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800977a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800977c:	4b42      	ldr	r3, [pc, #264]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	4a41      	ldr	r2, [pc, #260]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 8009782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009786:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009788:	f7fb fa5e 	bl	8004c48 <HAL_GetTick>
 800978c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009790:	f7fb fa5a 	bl	8004c48 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e06e      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097a2:	4b39      	ldr	r3, [pc, #228]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0f0      	beq.n	8009790 <HAL_RCC_OscConfig+0x530>
 80097ae:	e066      	b.n	800987e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097b0:	4b35      	ldr	r3, [pc, #212]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a34      	ldr	r2, [pc, #208]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80097bc:	4b32      	ldr	r3, [pc, #200]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	4a31      	ldr	r2, [pc, #196]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80097c8:	4b2f      	ldr	r3, [pc, #188]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4a2e      	ldr	r2, [pc, #184]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80097d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d8:	f7fb fa36 	bl	8004c48 <HAL_GetTick>
 80097dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e0:	f7fb fa32 	bl	8004c48 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e046      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097f2:	4b25      	ldr	r3, [pc, #148]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f0      	bne.n	80097e0 <HAL_RCC_OscConfig+0x580>
 80097fe:	e03e      	b.n	800987e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e039      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800980c:	4b1e      	ldr	r3, [pc, #120]	; (8009888 <HAL_RCC_OscConfig+0x628>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f003 0203 	and.w	r2, r3, #3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	429a      	cmp	r2, r3
 800981e:	d12c      	bne.n	800987a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	3b01      	subs	r3, #1
 800982c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800982e:	429a      	cmp	r2, r3
 8009830:	d123      	bne.n	800987a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800983e:	429a      	cmp	r2, r3
 8009840:	d11b      	bne.n	800987a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800984e:	429a      	cmp	r2, r3
 8009850:	d113      	bne.n	800987a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	3b01      	subs	r3, #1
 8009860:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009862:	429a      	cmp	r2, r3
 8009864:	d109      	bne.n	800987a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	3b01      	subs	r3, #1
 8009874:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009876:	429a      	cmp	r2, r3
 8009878:	d001      	beq.n	800987e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e000      	b.n	8009880 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3720      	adds	r7, #32
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	40021000 	.word	0x40021000
 800988c:	019f800c 	.word	0x019f800c

08009890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e11e      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098a8:	4b91      	ldr	r3, [pc, #580]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d910      	bls.n	80098d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098b6:	4b8e      	ldr	r3, [pc, #568]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 020f 	bic.w	r2, r3, #15
 80098be:	498c      	ldr	r1, [pc, #560]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098c6:	4b8a      	ldr	r3, [pc, #552]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d001      	beq.n	80098d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e106      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d073      	beq.n	80099cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d129      	bne.n	8009940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098ec:	4b81      	ldr	r3, [pc, #516]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e0f4      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80098fc:	f000 f99e 	bl	8009c3c <RCC_GetSysClockFreqFromPLLSource>
 8009900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	4a7c      	ldr	r2, [pc, #496]	; (8009af8 <HAL_RCC_ClockConfig+0x268>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d93f      	bls.n	800998a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800990a:	4b7a      	ldr	r3, [pc, #488]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d009      	beq.n	800992a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800991e:	2b00      	cmp	r3, #0
 8009920:	d033      	beq.n	800998a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009926:	2b00      	cmp	r3, #0
 8009928:	d12f      	bne.n	800998a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800992a:	4b72      	ldr	r3, [pc, #456]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009932:	4a70      	ldr	r2, [pc, #448]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800993a:	2380      	movs	r3, #128	; 0x80
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	e024      	b.n	800998a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d107      	bne.n	8009958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009948:	4b6a      	ldr	r3, [pc, #424]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d109      	bne.n	8009968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e0c6      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009958:	4b66      	ldr	r3, [pc, #408]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e0be      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009968:	f000 f8ce 	bl	8009b08 <HAL_RCC_GetSysClockFreq>
 800996c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	4a61      	ldr	r2, [pc, #388]	; (8009af8 <HAL_RCC_ClockConfig+0x268>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d909      	bls.n	800998a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009976:	4b5f      	ldr	r3, [pc, #380]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800997e:	4a5d      	ldr	r2, [pc, #372]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009986:	2380      	movs	r3, #128	; 0x80
 8009988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800998a:	4b5a      	ldr	r3, [pc, #360]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f023 0203 	bic.w	r2, r3, #3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4957      	ldr	r1, [pc, #348]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009998:	4313      	orrs	r3, r2
 800999a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999c:	f7fb f954 	bl	8004c48 <HAL_GetTick>
 80099a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099a2:	e00a      	b.n	80099ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099a4:	f7fb f950 	bl	8004c48 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e095      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ba:	4b4e      	ldr	r3, [pc, #312]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 020c 	and.w	r2, r3, #12
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d1eb      	bne.n	80099a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d023      	beq.n	8009a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099e4:	4b43      	ldr	r3, [pc, #268]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	4a42      	ldr	r2, [pc, #264]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 80099ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80099ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80099fc:	4b3d      	ldr	r3, [pc, #244]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a04:	4a3b      	ldr	r2, [pc, #236]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a0c:	4b39      	ldr	r3, [pc, #228]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	4936      	ldr	r1, [pc, #216]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	608b      	str	r3, [r1, #8]
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2b80      	cmp	r3, #128	; 0x80
 8009a24:	d105      	bne.n	8009a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009a26:	4b33      	ldr	r3, [pc, #204]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	4a32      	ldr	r2, [pc, #200]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a32:	4b2f      	ldr	r3, [pc, #188]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d21d      	bcs.n	8009a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a40:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f023 020f 	bic.w	r2, r3, #15
 8009a48:	4929      	ldr	r1, [pc, #164]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009a50:	f7fb f8fa 	bl	8004c48 <HAL_GetTick>
 8009a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a56:	e00a      	b.n	8009a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a58:	f7fb f8f6 	bl	8004c48 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e03b      	b.n	8009ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a6e:	4b20      	ldr	r3, [pc, #128]	; (8009af0 <HAL_RCC_ClockConfig+0x260>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d1ed      	bne.n	8009a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a88:	4b1a      	ldr	r3, [pc, #104]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	4917      	ldr	r1, [pc, #92]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0308 	and.w	r3, r3, #8
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d009      	beq.n	8009aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	490f      	ldr	r1, [pc, #60]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009aba:	f000 f825 	bl	8009b08 <HAL_RCC_GetSysClockFreq>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	4b0c      	ldr	r3, [pc, #48]	; (8009af4 <HAL_RCC_ClockConfig+0x264>)
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	091b      	lsrs	r3, r3, #4
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	490c      	ldr	r1, [pc, #48]	; (8009afc <HAL_RCC_ClockConfig+0x26c>)
 8009acc:	5ccb      	ldrb	r3, [r1, r3]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad6:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <HAL_RCC_ClockConfig+0x270>)
 8009ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009ada:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <HAL_RCC_ClockConfig+0x274>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fb f866 	bl	8004bb0 <HAL_InitTick>
 8009ae4:	4603      	mov	r3, r0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	40022000 	.word	0x40022000
 8009af4:	40021000 	.word	0x40021000
 8009af8:	04c4b400 	.word	0x04c4b400
 8009afc:	08015394 	.word	0x08015394
 8009b00:	20000030 	.word	0x20000030
 8009b04:	20000034 	.word	0x20000034

08009b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009b0e:	4b2c      	ldr	r3, [pc, #176]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f003 030c 	and.w	r3, r3, #12
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d102      	bne.n	8009b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b1a:	4b2a      	ldr	r3, [pc, #168]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b1c:	613b      	str	r3, [r7, #16]
 8009b1e:	e047      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 030c 	and.w	r3, r3, #12
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d102      	bne.n	8009b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b2c:	4b26      	ldr	r3, [pc, #152]	; (8009bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	e03e      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009b32:	4b23      	ldr	r3, [pc, #140]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 030c 	and.w	r3, r3, #12
 8009b3a:	2b0c      	cmp	r3, #12
 8009b3c:	d136      	bne.n	8009bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b3e:	4b20      	ldr	r3, [pc, #128]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b48:	4b1d      	ldr	r3, [pc, #116]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	091b      	lsrs	r3, r3, #4
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	3301      	adds	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d10c      	bne.n	8009b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b5c:	4a1a      	ldr	r2, [pc, #104]	; (8009bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b64:	4a16      	ldr	r2, [pc, #88]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b66:	68d2      	ldr	r2, [r2, #12]
 8009b68:	0a12      	lsrs	r2, r2, #8
 8009b6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
 8009b72:	617b      	str	r3, [r7, #20]
      break;
 8009b74:	e00c      	b.n	8009b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b76:	4a13      	ldr	r2, [pc, #76]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b7e:	4a10      	ldr	r2, [pc, #64]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b80:	68d2      	ldr	r2, [r2, #12]
 8009b82:	0a12      	lsrs	r2, r2, #8
 8009b84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b88:	fb02 f303 	mul.w	r3, r2, r3
 8009b8c:	617b      	str	r3, [r7, #20]
      break;
 8009b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	0e5b      	lsrs	r3, r3, #25
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	e001      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009bb0:	693b      	ldr	r3, [r7, #16]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	40021000 	.word	0x40021000
 8009bc4:	00f42400 	.word	0x00f42400
 8009bc8:	016e3600 	.word	0x016e3600

08009bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	20000030 	.word	0x20000030

08009be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009be8:	f7ff fff0 	bl	8009bcc <HAL_RCC_GetHCLKFreq>
 8009bec:	4602      	mov	r2, r0
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	0a1b      	lsrs	r3, r3, #8
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bfa:	5ccb      	ldrb	r3, [r1, r3]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40021000 	.word	0x40021000
 8009c0c:	080153a4 	.word	0x080153a4

08009c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c14:	f7ff ffda 	bl	8009bcc <HAL_RCC_GetHCLKFreq>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	0adb      	lsrs	r3, r3, #11
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	4904      	ldr	r1, [pc, #16]	; (8009c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c26:	5ccb      	ldrb	r3, [r1, r3]
 8009c28:	f003 031f 	and.w	r3, r3, #31
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40021000 	.word	0x40021000
 8009c38:	080153a4 	.word	0x080153a4

08009c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c42:	4b1e      	ldr	r3, [pc, #120]	; (8009cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c4c:	4b1b      	ldr	r3, [pc, #108]	; (8009cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	091b      	lsrs	r3, r3, #4
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	3301      	adds	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d10c      	bne.n	8009c7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c60:	4a17      	ldr	r2, [pc, #92]	; (8009cc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c68:	4a14      	ldr	r2, [pc, #80]	; (8009cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c6a:	68d2      	ldr	r2, [r2, #12]
 8009c6c:	0a12      	lsrs	r2, r2, #8
 8009c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c72:	fb02 f303 	mul.w	r3, r2, r3
 8009c76:	617b      	str	r3, [r7, #20]
    break;
 8009c78:	e00c      	b.n	8009c94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c7a:	4a12      	ldr	r2, [pc, #72]	; (8009cc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c82:	4a0e      	ldr	r2, [pc, #56]	; (8009cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c84:	68d2      	ldr	r2, [r2, #12]
 8009c86:	0a12      	lsrs	r2, r2, #8
 8009c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c8c:	fb02 f303 	mul.w	r3, r2, r3
 8009c90:	617b      	str	r3, [r7, #20]
    break;
 8009c92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	0e5b      	lsrs	r3, r3, #25
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009cae:	687b      	ldr	r3, [r7, #4]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	371c      	adds	r7, #28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	40021000 	.word	0x40021000
 8009cc0:	016e3600 	.word	0x016e3600
 8009cc4:	00f42400 	.word	0x00f42400

08009cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8098 	beq.w	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cea:	4b43      	ldr	r3, [pc, #268]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10d      	bne.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cf6:	4b40      	ldr	r3, [pc, #256]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	4a3f      	ldr	r2, [pc, #252]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d00:	6593      	str	r3, [r2, #88]	; 0x58
 8009d02:	4b3d      	ldr	r3, [pc, #244]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d0a:	60bb      	str	r3, [r7, #8]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d12:	4b3a      	ldr	r3, [pc, #232]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a39      	ldr	r2, [pc, #228]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d1e:	f7fa ff93 	bl	8004c48 <HAL_GetTick>
 8009d22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d24:	e009      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d26:	f7fa ff8f 	bl	8004c48 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d902      	bls.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	74fb      	strb	r3, [r7, #19]
        break;
 8009d38:	e005      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d3a:	4b30      	ldr	r3, [pc, #192]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0ef      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009d46:	7cfb      	ldrb	r3, [r7, #19]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d159      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d4c:	4b2a      	ldr	r3, [pc, #168]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01e      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d019      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009d68:	4b23      	ldr	r3, [pc, #140]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d74:	4b20      	ldr	r3, [pc, #128]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7a:	4a1f      	ldr	r2, [pc, #124]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d84:	4b1c      	ldr	r3, [pc, #112]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8a:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d94:	4a18      	ldr	r2, [pc, #96]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d016      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da6:	f7fa ff4f 	bl	8004c48 <HAL_GetTick>
 8009daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dac:	e00b      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dae:	f7fa ff4b 	bl	8004c48 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d902      	bls.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8009dc4:	e006      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dc6:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0ec      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009dd4:	7cfb      	ldrb	r3, [r7, #19]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dda:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de8:	4903      	ldr	r1, [pc, #12]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009df0:	e008      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009df2:	7cfb      	ldrb	r3, [r7, #19]
 8009df4:	74bb      	strb	r3, [r7, #18]
 8009df6:	e005      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009df8:	40021000 	.word	0x40021000
 8009dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	7cfb      	ldrb	r3, [r7, #19]
 8009e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e04:	7c7b      	ldrb	r3, [r7, #17]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d105      	bne.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e0a:	4ba7      	ldr	r3, [pc, #668]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0e:	4aa6      	ldr	r2, [pc, #664]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e22:	4ba1      	ldr	r3, [pc, #644]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	f023 0203 	bic.w	r2, r3, #3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	499d      	ldr	r1, [pc, #628]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e44:	4b98      	ldr	r3, [pc, #608]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e4a:	f023 020c 	bic.w	r2, r3, #12
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	4995      	ldr	r1, [pc, #596]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009e66:	4b90      	ldr	r3, [pc, #576]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	498c      	ldr	r1, [pc, #560]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e88:	4b87      	ldr	r3, [pc, #540]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	4984      	ldr	r1, [pc, #528]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009eaa:	4b7f      	ldr	r3, [pc, #508]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	497b      	ldr	r1, [pc, #492]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00a      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ecc:	4b76      	ldr	r3, [pc, #472]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	4973      	ldr	r1, [pc, #460]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009edc:	4313      	orrs	r3, r2
 8009ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009eee:	4b6e      	ldr	r3, [pc, #440]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	496a      	ldr	r1, [pc, #424]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00a      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f10:	4b65      	ldr	r3, [pc, #404]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	4962      	ldr	r1, [pc, #392]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f20:	4313      	orrs	r3, r2
 8009f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f32:	4b5d      	ldr	r3, [pc, #372]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	4959      	ldr	r1, [pc, #356]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f54:	4b54      	ldr	r3, [pc, #336]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f5a:	f023 0203 	bic.w	r2, r3, #3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f62:	4951      	ldr	r1, [pc, #324]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f76:	4b4c      	ldr	r3, [pc, #304]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	4948      	ldr	r1, [pc, #288]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d015      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f98:	4b43      	ldr	r3, [pc, #268]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	4940      	ldr	r1, [pc, #256]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fb6:	d105      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fb8:	4b3b      	ldr	r3, [pc, #236]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	4a3a      	ldr	r2, [pc, #232]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d015      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009fd0:	4b35      	ldr	r3, [pc, #212]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fde:	4932      	ldr	r1, [pc, #200]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fee:	d105      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ff0:	4b2d      	ldr	r3, [pc, #180]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4a2c      	ldr	r2, [pc, #176]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d015      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a008:	4b27      	ldr	r3, [pc, #156]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	4924      	ldr	r1, [pc, #144]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a026:	d105      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a028:	4b1f      	ldr	r3, [pc, #124]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	4a1e      	ldr	r2, [pc, #120]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a02e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a032:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d015      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a040:	4b19      	ldr	r3, [pc, #100]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	4916      	ldr	r1, [pc, #88]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a050:	4313      	orrs	r3, r2
 800a052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a05e:	d105      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a060:	4b11      	ldr	r3, [pc, #68]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	4a10      	ldr	r2, [pc, #64]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a06a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d019      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a078:	4b0b      	ldr	r3, [pc, #44]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	4908      	ldr	r1, [pc, #32]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a096:	d109      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	4a02      	ldr	r2, [pc, #8]	; (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a09e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a2:	60d3      	str	r3, [r2, #12]
 800a0a4:	e002      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a0a6:	bf00      	nop
 800a0a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d015      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a0b8:	4b29      	ldr	r3, [pc, #164]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c6:	4926      	ldr	r1, [pc, #152]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d6:	d105      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a0d8:	4b21      	ldr	r3, [pc, #132]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	4a20      	ldr	r2, [pc, #128]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d015      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fe:	4918      	ldr	r1, [pc, #96]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a100:	4313      	orrs	r3, r2
 800a102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10e:	d105      	bne.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	4a12      	ldr	r2, [pc, #72]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a11a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d015      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a128:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a12a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a12e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a136:	490a      	ldr	r1, [pc, #40]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a146:	d105      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a148:	4b05      	ldr	r3, [pc, #20]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	4a04      	ldr	r2, [pc, #16]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a14e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a154:	7cbb      	ldrb	r3, [r7, #18]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	40021000 	.word	0x40021000

0800a164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e049      	b.n	800a20a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fa f896 	bl	80042bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f000 fde6 	bl	800ad74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d001      	beq.n	800a22c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e04c      	b.n	800a2c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a26      	ldr	r2, [pc, #152]	; (800a2d4 <HAL_TIM_Base_Start+0xc0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d022      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a246:	d01d      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a22      	ldr	r2, [pc, #136]	; (800a2d8 <HAL_TIM_Base_Start+0xc4>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d018      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <HAL_TIM_Base_Start+0xc8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d013      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <HAL_TIM_Base_Start+0xcc>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d00e      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a1e      	ldr	r2, [pc, #120]	; (800a2e4 <HAL_TIM_Base_Start+0xd0>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d009      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a1c      	ldr	r2, [pc, #112]	; (800a2e8 <HAL_TIM_Base_Start+0xd4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d004      	beq.n	800a284 <HAL_TIM_Base_Start+0x70>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a1b      	ldr	r2, [pc, #108]	; (800a2ec <HAL_TIM_Base_Start+0xd8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d115      	bne.n	800a2b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	4b19      	ldr	r3, [pc, #100]	; (800a2f0 <HAL_TIM_Base_Start+0xdc>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b06      	cmp	r3, #6
 800a294:	d015      	beq.n	800a2c2 <HAL_TIM_Base_Start+0xae>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29c:	d011      	beq.n	800a2c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f042 0201 	orr.w	r2, r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ae:	e008      	b.n	800a2c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0201 	orr.w	r2, r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	e000      	b.n	800a2c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	40012c00 	.word	0x40012c00
 800a2d8:	40000400 	.word	0x40000400
 800a2dc:	40000800 	.word	0x40000800
 800a2e0:	40000c00 	.word	0x40000c00
 800a2e4:	40013400 	.word	0x40013400
 800a2e8:	40014000 	.word	0x40014000
 800a2ec:	40015000 	.word	0x40015000
 800a2f0:	00010007 	.word	0x00010007

0800a2f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b01      	cmp	r3, #1
 800a306:	d001      	beq.n	800a30c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e054      	b.n	800a3b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a26      	ldr	r2, [pc, #152]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d022      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a336:	d01d      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a22      	ldr	r2, [pc, #136]	; (800a3c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d018      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a21      	ldr	r2, [pc, #132]	; (800a3cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d013      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1f      	ldr	r2, [pc, #124]	; (800a3d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00e      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a1e      	ldr	r2, [pc, #120]	; (800a3d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d009      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a1c      	ldr	r2, [pc, #112]	; (800a3d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d004      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x80>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a1b      	ldr	r2, [pc, #108]	; (800a3dc <HAL_TIM_Base_Start_IT+0xe8>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d115      	bne.n	800a3a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	4b19      	ldr	r3, [pc, #100]	; (800a3e0 <HAL_TIM_Base_Start_IT+0xec>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b06      	cmp	r3, #6
 800a384:	d015      	beq.n	800a3b2 <HAL_TIM_Base_Start_IT+0xbe>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d011      	beq.n	800a3b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0201 	orr.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39e:	e008      	b.n	800a3b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0201 	orr.w	r2, r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e000      	b.n	800a3b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	40012c00 	.word	0x40012c00
 800a3c8:	40000400 	.word	0x40000400
 800a3cc:	40000800 	.word	0x40000800
 800a3d0:	40000c00 	.word	0x40000c00
 800a3d4:	40013400 	.word	0x40013400
 800a3d8:	40014000 	.word	0x40014000
 800a3dc:	40015000 	.word	0x40015000
 800a3e0:	00010007 	.word	0x00010007

0800a3e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68da      	ldr	r2, [r3, #12]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0201 	bic.w	r2, r2, #1
 800a3fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6a1a      	ldr	r2, [r3, #32]
 800a402:	f241 1311 	movw	r3, #4369	; 0x1111
 800a406:	4013      	ands	r3, r2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10f      	bne.n	800a42c <HAL_TIM_Base_Stop_IT+0x48>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	f244 4344 	movw	r3, #17476	; 0x4444
 800a416:	4013      	ands	r3, r2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d107      	bne.n	800a42c <HAL_TIM_Base_Stop_IT+0x48>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0201 	bic.w	r2, r2, #1
 800a42a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e049      	b.n	800a4e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d106      	bne.n	800a46e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f841 	bl	800a4f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2202      	movs	r2, #2
 800a472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3304      	adds	r3, #4
 800a47e:	4619      	mov	r1, r3
 800a480:	4610      	mov	r0, r2
 800a482:	f000 fc77 	bl	800ad74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <HAL_TIM_PWM_Start+0x24>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	bf14      	ite	ne
 800a520:	2301      	movne	r3, #1
 800a522:	2300      	moveq	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	e03c      	b.n	800a5a2 <HAL_TIM_PWM_Start+0x9e>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d109      	bne.n	800a542 <HAL_TIM_PWM_Start+0x3e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	bf14      	ite	ne
 800a53a:	2301      	movne	r3, #1
 800a53c:	2300      	moveq	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	e02f      	b.n	800a5a2 <HAL_TIM_PWM_Start+0x9e>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b08      	cmp	r3, #8
 800a546:	d109      	bne.n	800a55c <HAL_TIM_PWM_Start+0x58>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b01      	cmp	r3, #1
 800a552:	bf14      	ite	ne
 800a554:	2301      	movne	r3, #1
 800a556:	2300      	moveq	r3, #0
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	e022      	b.n	800a5a2 <HAL_TIM_PWM_Start+0x9e>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b0c      	cmp	r3, #12
 800a560:	d109      	bne.n	800a576 <HAL_TIM_PWM_Start+0x72>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	bf14      	ite	ne
 800a56e:	2301      	movne	r3, #1
 800a570:	2300      	moveq	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	e015      	b.n	800a5a2 <HAL_TIM_PWM_Start+0x9e>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b10      	cmp	r3, #16
 800a57a:	d109      	bne.n	800a590 <HAL_TIM_PWM_Start+0x8c>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b01      	cmp	r3, #1
 800a586:	bf14      	ite	ne
 800a588:	2301      	movne	r3, #1
 800a58a:	2300      	moveq	r3, #0
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	e008      	b.n	800a5a2 <HAL_TIM_PWM_Start+0x9e>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b01      	cmp	r3, #1
 800a59a:	bf14      	ite	ne
 800a59c:	2301      	movne	r3, #1
 800a59e:	2300      	moveq	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e0a6      	b.n	800a6f8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <HAL_TIM_PWM_Start+0xb6>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5b8:	e023      	b.n	800a602 <HAL_TIM_PWM_Start+0xfe>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d104      	bne.n	800a5ca <HAL_TIM_PWM_Start+0xc6>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5c8:	e01b      	b.n	800a602 <HAL_TIM_PWM_Start+0xfe>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d104      	bne.n	800a5da <HAL_TIM_PWM_Start+0xd6>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5d8:	e013      	b.n	800a602 <HAL_TIM_PWM_Start+0xfe>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b0c      	cmp	r3, #12
 800a5de:	d104      	bne.n	800a5ea <HAL_TIM_PWM_Start+0xe6>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5e8:	e00b      	b.n	800a602 <HAL_TIM_PWM_Start+0xfe>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b10      	cmp	r3, #16
 800a5ee:	d104      	bne.n	800a5fa <HAL_TIM_PWM_Start+0xf6>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f8:	e003      	b.n	800a602 <HAL_TIM_PWM_Start+0xfe>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2201      	movs	r2, #1
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 f8e3 	bl	800b7d6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a3a      	ldr	r2, [pc, #232]	; (800a700 <HAL_TIM_PWM_Start+0x1fc>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d018      	beq.n	800a64c <HAL_TIM_PWM_Start+0x148>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a39      	ldr	r2, [pc, #228]	; (800a704 <HAL_TIM_PWM_Start+0x200>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d013      	beq.n	800a64c <HAL_TIM_PWM_Start+0x148>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a37      	ldr	r2, [pc, #220]	; (800a708 <HAL_TIM_PWM_Start+0x204>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00e      	beq.n	800a64c <HAL_TIM_PWM_Start+0x148>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a36      	ldr	r2, [pc, #216]	; (800a70c <HAL_TIM_PWM_Start+0x208>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d009      	beq.n	800a64c <HAL_TIM_PWM_Start+0x148>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a34      	ldr	r2, [pc, #208]	; (800a710 <HAL_TIM_PWM_Start+0x20c>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d004      	beq.n	800a64c <HAL_TIM_PWM_Start+0x148>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a33      	ldr	r2, [pc, #204]	; (800a714 <HAL_TIM_PWM_Start+0x210>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d101      	bne.n	800a650 <HAL_TIM_PWM_Start+0x14c>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <HAL_TIM_PWM_Start+0x14e>
 800a650:	2300      	movs	r3, #0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a664:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a25      	ldr	r2, [pc, #148]	; (800a700 <HAL_TIM_PWM_Start+0x1fc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d022      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a678:	d01d      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a26      	ldr	r2, [pc, #152]	; (800a718 <HAL_TIM_PWM_Start+0x214>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d018      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a24      	ldr	r2, [pc, #144]	; (800a71c <HAL_TIM_PWM_Start+0x218>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d013      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a23      	ldr	r2, [pc, #140]	; (800a720 <HAL_TIM_PWM_Start+0x21c>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d00e      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a19      	ldr	r2, [pc, #100]	; (800a704 <HAL_TIM_PWM_Start+0x200>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d009      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a18      	ldr	r2, [pc, #96]	; (800a708 <HAL_TIM_PWM_Start+0x204>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d004      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x1b2>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a18      	ldr	r2, [pc, #96]	; (800a714 <HAL_TIM_PWM_Start+0x210>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d115      	bne.n	800a6e2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	4b19      	ldr	r3, [pc, #100]	; (800a724 <HAL_TIM_PWM_Start+0x220>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b06      	cmp	r3, #6
 800a6c6:	d015      	beq.n	800a6f4 <HAL_TIM_PWM_Start+0x1f0>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ce:	d011      	beq.n	800a6f4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0201 	orr.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e0:	e008      	b.n	800a6f4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0201 	orr.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	e000      	b.n	800a6f6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	40012c00 	.word	0x40012c00
 800a704:	40013400 	.word	0x40013400
 800a708:	40014000 	.word	0x40014000
 800a70c:	40014400 	.word	0x40014400
 800a710:	40014800 	.word	0x40014800
 800a714:	40015000 	.word	0x40015000
 800a718:	40000400 	.word	0x40000400
 800a71c:	40000800 	.word	0x40000800
 800a720:	40000c00 	.word	0x40000c00
 800a724:	00010007 	.word	0x00010007

0800a728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d122      	bne.n	800a784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d11b      	bne.n	800a784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f06f 0202 	mvn.w	r2, #2
 800a754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f003 0303 	and.w	r3, r3, #3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fae3 	bl	800ad36 <HAL_TIM_IC_CaptureCallback>
 800a770:	e005      	b.n	800a77e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fad5 	bl	800ad22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fae6 	bl	800ad4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d122      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	d11b      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0204 	mvn.w	r2, #4
 800a7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fab9 	bl	800ad36 <HAL_TIM_IC_CaptureCallback>
 800a7c4:	e005      	b.n	800a7d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 faab 	bl	800ad22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fabc 	bl	800ad4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 0308 	and.w	r3, r3, #8
 800a7e2:	2b08      	cmp	r3, #8
 800a7e4:	d122      	bne.n	800a82c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f003 0308 	and.w	r3, r3, #8
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d11b      	bne.n	800a82c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0208 	mvn.w	r2, #8
 800a7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2204      	movs	r2, #4
 800a802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f003 0303 	and.w	r3, r3, #3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa8f 	bl	800ad36 <HAL_TIM_IC_CaptureCallback>
 800a818:	e005      	b.n	800a826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa81 	bl	800ad22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fa92 	bl	800ad4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0310 	and.w	r3, r3, #16
 800a836:	2b10      	cmp	r3, #16
 800a838:	d122      	bne.n	800a880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	2b10      	cmp	r3, #16
 800a846:	d11b      	bne.n	800a880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0210 	mvn.w	r2, #16
 800a850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2208      	movs	r2, #8
 800a856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fa65 	bl	800ad36 <HAL_TIM_IC_CaptureCallback>
 800a86c:	e005      	b.n	800a87a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fa57 	bl	800ad22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fa68 	bl	800ad4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d10e      	bne.n	800a8ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d107      	bne.n	800a8ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f06f 0201 	mvn.w	r2, #1
 800a8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7f8 fc7a 	bl	80031a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b6:	2b80      	cmp	r3, #128	; 0x80
 800a8b8:	d10e      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c4:	2b80      	cmp	r3, #128	; 0x80
 800a8c6:	d107      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 fada 	bl	800be8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e6:	d10e      	bne.n	800a906 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f2:	2b80      	cmp	r3, #128	; 0x80
 800a8f4:	d107      	bne.n	800a906 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f001 facd 	bl	800bea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a910:	2b40      	cmp	r3, #64	; 0x40
 800a912:	d10e      	bne.n	800a932 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	d107      	bne.n	800a932 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a92a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fa16 	bl	800ad5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f003 0320 	and.w	r3, r3, #32
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	d10e      	bne.n	800a95e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	d107      	bne.n	800a95e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f06f 0220 	mvn.w	r2, #32
 800a956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 fa8d 	bl	800be78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a96c:	d10f      	bne.n	800a98e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a97c:	d107      	bne.n	800a98e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 fa93 	bl	800beb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a99c:	d10f      	bne.n	800a9be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ac:	d107      	bne.n	800a9be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a9b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 fa85 	bl	800bec8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9cc:	d10f      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9dc:	d107      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 fa77 	bl	800bedc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9fc:	d10f      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa0c:	d107      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800aa16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 fa69 	bl	800bef0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d101      	bne.n	800aa46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa42:	2302      	movs	r3, #2
 800aa44:	e0ff      	b.n	800ac46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b14      	cmp	r3, #20
 800aa52:	f200 80f0 	bhi.w	800ac36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aab1 	.word	0x0800aab1
 800aa60:	0800ac37 	.word	0x0800ac37
 800aa64:	0800ac37 	.word	0x0800ac37
 800aa68:	0800ac37 	.word	0x0800ac37
 800aa6c:	0800aaf1 	.word	0x0800aaf1
 800aa70:	0800ac37 	.word	0x0800ac37
 800aa74:	0800ac37 	.word	0x0800ac37
 800aa78:	0800ac37 	.word	0x0800ac37
 800aa7c:	0800ab33 	.word	0x0800ab33
 800aa80:	0800ac37 	.word	0x0800ac37
 800aa84:	0800ac37 	.word	0x0800ac37
 800aa88:	0800ac37 	.word	0x0800ac37
 800aa8c:	0800ab73 	.word	0x0800ab73
 800aa90:	0800ac37 	.word	0x0800ac37
 800aa94:	0800ac37 	.word	0x0800ac37
 800aa98:	0800ac37 	.word	0x0800ac37
 800aa9c:	0800abb5 	.word	0x0800abb5
 800aaa0:	0800ac37 	.word	0x0800ac37
 800aaa4:	0800ac37 	.word	0x0800ac37
 800aaa8:	0800ac37 	.word	0x0800ac37
 800aaac:	0800abf5 	.word	0x0800abf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fa04 	bl	800aec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	699a      	ldr	r2, [r3, #24]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0208 	orr.w	r2, r2, #8
 800aaca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f022 0204 	bic.w	r2, r2, #4
 800aada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6999      	ldr	r1, [r3, #24]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	619a      	str	r2, [r3, #24]
      break;
 800aaee:	e0a5      	b.n	800ac3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fa7e 	bl	800aff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6999      	ldr	r1, [r3, #24]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	021a      	lsls	r2, r3, #8
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	619a      	str	r2, [r3, #24]
      break;
 800ab30:	e084      	b.n	800ac3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68b9      	ldr	r1, [r7, #8]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 faf1 	bl	800b120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69da      	ldr	r2, [r3, #28]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0208 	orr.w	r2, r2, #8
 800ab4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f022 0204 	bic.w	r2, r2, #4
 800ab5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	69d9      	ldr	r1, [r3, #28]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	61da      	str	r2, [r3, #28]
      break;
 800ab70:	e064      	b.n	800ac3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fb63 	bl	800b244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69d9      	ldr	r1, [r3, #28]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	021a      	lsls	r2, r3, #8
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	61da      	str	r2, [r3, #28]
      break;
 800abb2:	e043      	b.n	800ac3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68b9      	ldr	r1, [r7, #8]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fbd6 	bl	800b36c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0208 	orr.w	r2, r2, #8
 800abce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0204 	bic.w	r2, r2, #4
 800abde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	691a      	ldr	r2, [r3, #16]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800abf2:	e023      	b.n	800ac3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fc20 	bl	800b440 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	021a      	lsls	r2, r3, #8
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ac34:	e002      	b.n	800ac3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75fb      	strb	r3, [r7, #23]
      break;
 800ac3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop

0800ac50 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_GenerateEvent+0x18>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e014      	b.n	800ac92 <HAL_TIM_GenerateEvent+0x42>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e031      	b.n	800ad1a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2202      	movs	r2, #2
 800acc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fc25 	bl	800b518 <TIM_SlaveTimer_SetConfig>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d009      	beq.n	800ace8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e018      	b.n	800ad1a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acf6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad06:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b083      	sub	sp, #12
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b083      	sub	sp, #12
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad3e:	bf00      	nop
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b083      	sub	sp, #12
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad52:	bf00      	nop
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b083      	sub	sp, #12
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad66:	bf00      	nop
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
	...

0800ad74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a46      	ldr	r2, [pc, #280]	; (800aea0 <TIM_Base_SetConfig+0x12c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d017      	beq.n	800adbc <TIM_Base_SetConfig+0x48>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad92:	d013      	beq.n	800adbc <TIM_Base_SetConfig+0x48>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a43      	ldr	r2, [pc, #268]	; (800aea4 <TIM_Base_SetConfig+0x130>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d00f      	beq.n	800adbc <TIM_Base_SetConfig+0x48>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a42      	ldr	r2, [pc, #264]	; (800aea8 <TIM_Base_SetConfig+0x134>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00b      	beq.n	800adbc <TIM_Base_SetConfig+0x48>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a41      	ldr	r2, [pc, #260]	; (800aeac <TIM_Base_SetConfig+0x138>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d007      	beq.n	800adbc <TIM_Base_SetConfig+0x48>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a40      	ldr	r2, [pc, #256]	; (800aeb0 <TIM_Base_SetConfig+0x13c>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d003      	beq.n	800adbc <TIM_Base_SetConfig+0x48>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a3f      	ldr	r2, [pc, #252]	; (800aeb4 <TIM_Base_SetConfig+0x140>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d108      	bne.n	800adce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a33      	ldr	r2, [pc, #204]	; (800aea0 <TIM_Base_SetConfig+0x12c>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d023      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800addc:	d01f      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a30      	ldr	r2, [pc, #192]	; (800aea4 <TIM_Base_SetConfig+0x130>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d01b      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a2f      	ldr	r2, [pc, #188]	; (800aea8 <TIM_Base_SetConfig+0x134>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d017      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a2e      	ldr	r2, [pc, #184]	; (800aeac <TIM_Base_SetConfig+0x138>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d013      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a2d      	ldr	r2, [pc, #180]	; (800aeb0 <TIM_Base_SetConfig+0x13c>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00f      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a2d      	ldr	r2, [pc, #180]	; (800aeb8 <TIM_Base_SetConfig+0x144>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d00b      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a2c      	ldr	r2, [pc, #176]	; (800aebc <TIM_Base_SetConfig+0x148>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d007      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a2b      	ldr	r2, [pc, #172]	; (800aec0 <TIM_Base_SetConfig+0x14c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d003      	beq.n	800ae1e <TIM_Base_SetConfig+0xaa>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a26      	ldr	r2, [pc, #152]	; (800aeb4 <TIM_Base_SetConfig+0x140>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d108      	bne.n	800ae30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a12      	ldr	r2, [pc, #72]	; (800aea0 <TIM_Base_SetConfig+0x12c>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <TIM_Base_SetConfig+0x110>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a14      	ldr	r2, [pc, #80]	; (800aeb0 <TIM_Base_SetConfig+0x13c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00f      	beq.n	800ae84 <TIM_Base_SetConfig+0x110>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a14      	ldr	r2, [pc, #80]	; (800aeb8 <TIM_Base_SetConfig+0x144>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00b      	beq.n	800ae84 <TIM_Base_SetConfig+0x110>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a13      	ldr	r2, [pc, #76]	; (800aebc <TIM_Base_SetConfig+0x148>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d007      	beq.n	800ae84 <TIM_Base_SetConfig+0x110>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a12      	ldr	r2, [pc, #72]	; (800aec0 <TIM_Base_SetConfig+0x14c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_Base_SetConfig+0x110>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a0d      	ldr	r2, [pc, #52]	; (800aeb4 <TIM_Base_SetConfig+0x140>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d103      	bne.n	800ae8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	691a      	ldr	r2, [r3, #16]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	615a      	str	r2, [r3, #20]
}
 800ae92:	bf00      	nop
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	40012c00 	.word	0x40012c00
 800aea4:	40000400 	.word	0x40000400
 800aea8:	40000800 	.word	0x40000800
 800aeac:	40000c00 	.word	0x40000c00
 800aeb0:	40013400 	.word	0x40013400
 800aeb4:	40015000 	.word	0x40015000
 800aeb8:	40014000 	.word	0x40014000
 800aebc:	40014400 	.word	0x40014400
 800aec0:	40014800 	.word	0x40014800

0800aec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	f023 0201 	bic.w	r2, r3, #1
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	4313      	orrs	r3, r2
 800af08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f023 0302 	bic.w	r3, r3, #2
 800af10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	4313      	orrs	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a30      	ldr	r2, [pc, #192]	; (800afe0 <TIM_OC1_SetConfig+0x11c>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d013      	beq.n	800af4c <TIM_OC1_SetConfig+0x88>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a2f      	ldr	r2, [pc, #188]	; (800afe4 <TIM_OC1_SetConfig+0x120>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d00f      	beq.n	800af4c <TIM_OC1_SetConfig+0x88>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a2e      	ldr	r2, [pc, #184]	; (800afe8 <TIM_OC1_SetConfig+0x124>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d00b      	beq.n	800af4c <TIM_OC1_SetConfig+0x88>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a2d      	ldr	r2, [pc, #180]	; (800afec <TIM_OC1_SetConfig+0x128>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d007      	beq.n	800af4c <TIM_OC1_SetConfig+0x88>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a2c      	ldr	r2, [pc, #176]	; (800aff0 <TIM_OC1_SetConfig+0x12c>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d003      	beq.n	800af4c <TIM_OC1_SetConfig+0x88>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a2b      	ldr	r2, [pc, #172]	; (800aff4 <TIM_OC1_SetConfig+0x130>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d10c      	bne.n	800af66 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f023 0308 	bic.w	r3, r3, #8
 800af52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f023 0304 	bic.w	r3, r3, #4
 800af64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a1d      	ldr	r2, [pc, #116]	; (800afe0 <TIM_OC1_SetConfig+0x11c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d013      	beq.n	800af96 <TIM_OC1_SetConfig+0xd2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a1c      	ldr	r2, [pc, #112]	; (800afe4 <TIM_OC1_SetConfig+0x120>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d00f      	beq.n	800af96 <TIM_OC1_SetConfig+0xd2>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a1b      	ldr	r2, [pc, #108]	; (800afe8 <TIM_OC1_SetConfig+0x124>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d00b      	beq.n	800af96 <TIM_OC1_SetConfig+0xd2>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a1a      	ldr	r2, [pc, #104]	; (800afec <TIM_OC1_SetConfig+0x128>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d007      	beq.n	800af96 <TIM_OC1_SetConfig+0xd2>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a19      	ldr	r2, [pc, #100]	; (800aff0 <TIM_OC1_SetConfig+0x12c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d003      	beq.n	800af96 <TIM_OC1_SetConfig+0xd2>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <TIM_OC1_SetConfig+0x130>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d111      	bne.n	800afba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	4313      	orrs	r3, r2
 800afae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	621a      	str	r2, [r3, #32]
}
 800afd4:	bf00      	nop
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	40012c00 	.word	0x40012c00
 800afe4:	40013400 	.word	0x40013400
 800afe8:	40014000 	.word	0x40014000
 800afec:	40014400 	.word	0x40014400
 800aff0:	40014800 	.word	0x40014800
 800aff4:	40015000 	.word	0x40015000

0800aff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f023 0210 	bic.w	r2, r3, #16
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	021b      	lsls	r3, r3, #8
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f023 0320 	bic.w	r3, r3, #32
 800b046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	011b      	lsls	r3, r3, #4
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	4313      	orrs	r3, r2
 800b052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a2c      	ldr	r2, [pc, #176]	; (800b108 <TIM_OC2_SetConfig+0x110>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d007      	beq.n	800b06c <TIM_OC2_SetConfig+0x74>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a2b      	ldr	r2, [pc, #172]	; (800b10c <TIM_OC2_SetConfig+0x114>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_OC2_SetConfig+0x74>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a2a      	ldr	r2, [pc, #168]	; (800b110 <TIM_OC2_SetConfig+0x118>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d10d      	bne.n	800b088 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a1f      	ldr	r2, [pc, #124]	; (800b108 <TIM_OC2_SetConfig+0x110>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d013      	beq.n	800b0b8 <TIM_OC2_SetConfig+0xc0>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a1e      	ldr	r2, [pc, #120]	; (800b10c <TIM_OC2_SetConfig+0x114>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00f      	beq.n	800b0b8 <TIM_OC2_SetConfig+0xc0>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a1e      	ldr	r2, [pc, #120]	; (800b114 <TIM_OC2_SetConfig+0x11c>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00b      	beq.n	800b0b8 <TIM_OC2_SetConfig+0xc0>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <TIM_OC2_SetConfig+0x120>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d007      	beq.n	800b0b8 <TIM_OC2_SetConfig+0xc0>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a1c      	ldr	r2, [pc, #112]	; (800b11c <TIM_OC2_SetConfig+0x124>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d003      	beq.n	800b0b8 <TIM_OC2_SetConfig+0xc0>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a17      	ldr	r2, [pc, #92]	; (800b110 <TIM_OC2_SetConfig+0x118>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d113      	bne.n	800b0e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	621a      	str	r2, [r3, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	371c      	adds	r7, #28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	40012c00 	.word	0x40012c00
 800b10c:	40013400 	.word	0x40013400
 800b110:	40015000 	.word	0x40015000
 800b114:	40014000 	.word	0x40014000
 800b118:	40014400 	.word	0x40014400
 800b11c:	40014800 	.word	0x40014800

0800b120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b120:	b480      	push	{r7}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b16c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	4313      	orrs	r3, r2
 800b178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a2b      	ldr	r2, [pc, #172]	; (800b22c <TIM_OC3_SetConfig+0x10c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d007      	beq.n	800b192 <TIM_OC3_SetConfig+0x72>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a2a      	ldr	r2, [pc, #168]	; (800b230 <TIM_OC3_SetConfig+0x110>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d003      	beq.n	800b192 <TIM_OC3_SetConfig+0x72>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a29      	ldr	r2, [pc, #164]	; (800b234 <TIM_OC3_SetConfig+0x114>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d10d      	bne.n	800b1ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a1e      	ldr	r2, [pc, #120]	; (800b22c <TIM_OC3_SetConfig+0x10c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d013      	beq.n	800b1de <TIM_OC3_SetConfig+0xbe>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a1d      	ldr	r2, [pc, #116]	; (800b230 <TIM_OC3_SetConfig+0x110>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d00f      	beq.n	800b1de <TIM_OC3_SetConfig+0xbe>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a1d      	ldr	r2, [pc, #116]	; (800b238 <TIM_OC3_SetConfig+0x118>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d00b      	beq.n	800b1de <TIM_OC3_SetConfig+0xbe>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a1c      	ldr	r2, [pc, #112]	; (800b23c <TIM_OC3_SetConfig+0x11c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d007      	beq.n	800b1de <TIM_OC3_SetConfig+0xbe>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a1b      	ldr	r2, [pc, #108]	; (800b240 <TIM_OC3_SetConfig+0x120>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d003      	beq.n	800b1de <TIM_OC3_SetConfig+0xbe>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a16      	ldr	r2, [pc, #88]	; (800b234 <TIM_OC3_SetConfig+0x114>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d113      	bne.n	800b206 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	011b      	lsls	r3, r3, #4
 800b1f4:	693a      	ldr	r2, [r7, #16]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	011b      	lsls	r3, r3, #4
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	4313      	orrs	r3, r2
 800b204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	621a      	str	r2, [r3, #32]
}
 800b220:	bf00      	nop
 800b222:	371c      	adds	r7, #28
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	40012c00 	.word	0x40012c00
 800b230:	40013400 	.word	0x40013400
 800b234:	40015000 	.word	0x40015000
 800b238:	40014000 	.word	0x40014000
 800b23c:	40014400 	.word	0x40014400
 800b240:	40014800 	.word	0x40014800

0800b244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	021b      	lsls	r3, r3, #8
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	031b      	lsls	r3, r3, #12
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a2c      	ldr	r2, [pc, #176]	; (800b354 <TIM_OC4_SetConfig+0x110>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d007      	beq.n	800b2b8 <TIM_OC4_SetConfig+0x74>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a2b      	ldr	r2, [pc, #172]	; (800b358 <TIM_OC4_SetConfig+0x114>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d003      	beq.n	800b2b8 <TIM_OC4_SetConfig+0x74>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a2a      	ldr	r2, [pc, #168]	; (800b35c <TIM_OC4_SetConfig+0x118>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d10d      	bne.n	800b2d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	031b      	lsls	r3, r3, #12
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a1f      	ldr	r2, [pc, #124]	; (800b354 <TIM_OC4_SetConfig+0x110>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d013      	beq.n	800b304 <TIM_OC4_SetConfig+0xc0>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a1e      	ldr	r2, [pc, #120]	; (800b358 <TIM_OC4_SetConfig+0x114>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d00f      	beq.n	800b304 <TIM_OC4_SetConfig+0xc0>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a1e      	ldr	r2, [pc, #120]	; (800b360 <TIM_OC4_SetConfig+0x11c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00b      	beq.n	800b304 <TIM_OC4_SetConfig+0xc0>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <TIM_OC4_SetConfig+0x120>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d007      	beq.n	800b304 <TIM_OC4_SetConfig+0xc0>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a1c      	ldr	r2, [pc, #112]	; (800b368 <TIM_OC4_SetConfig+0x124>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d003      	beq.n	800b304 <TIM_OC4_SetConfig+0xc0>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a17      	ldr	r2, [pc, #92]	; (800b35c <TIM_OC4_SetConfig+0x118>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d113      	bne.n	800b32c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b30a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b312:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	019b      	lsls	r3, r3, #6
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	019b      	lsls	r3, r3, #6
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	4313      	orrs	r3, r2
 800b32a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	621a      	str	r2, [r3, #32]
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	40012c00 	.word	0x40012c00
 800b358:	40013400 	.word	0x40013400
 800b35c:	40015000 	.word	0x40015000
 800b360:	40014000 	.word	0x40014000
 800b364:	40014400 	.word	0x40014400
 800b368:	40014800 	.word	0x40014800

0800b36c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b3b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	041b      	lsls	r3, r3, #16
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a19      	ldr	r2, [pc, #100]	; (800b428 <TIM_OC5_SetConfig+0xbc>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d013      	beq.n	800b3ee <TIM_OC5_SetConfig+0x82>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a18      	ldr	r2, [pc, #96]	; (800b42c <TIM_OC5_SetConfig+0xc0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d00f      	beq.n	800b3ee <TIM_OC5_SetConfig+0x82>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a17      	ldr	r2, [pc, #92]	; (800b430 <TIM_OC5_SetConfig+0xc4>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d00b      	beq.n	800b3ee <TIM_OC5_SetConfig+0x82>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a16      	ldr	r2, [pc, #88]	; (800b434 <TIM_OC5_SetConfig+0xc8>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d007      	beq.n	800b3ee <TIM_OC5_SetConfig+0x82>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a15      	ldr	r2, [pc, #84]	; (800b438 <TIM_OC5_SetConfig+0xcc>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d003      	beq.n	800b3ee <TIM_OC5_SetConfig+0x82>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a14      	ldr	r2, [pc, #80]	; (800b43c <TIM_OC5_SetConfig+0xd0>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d109      	bne.n	800b402 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	021b      	lsls	r3, r3, #8
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	621a      	str	r2, [r3, #32]
}
 800b41c:	bf00      	nop
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	40012c00 	.word	0x40012c00
 800b42c:	40013400 	.word	0x40013400
 800b430:	40014000 	.word	0x40014000
 800b434:	40014400 	.word	0x40014400
 800b438:	40014800 	.word	0x40014800
 800b43c:	40015000 	.word	0x40015000

0800b440 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b46e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	021b      	lsls	r3, r3, #8
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	051b      	lsls	r3, r3, #20
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	4313      	orrs	r3, r2
 800b492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a1a      	ldr	r2, [pc, #104]	; (800b500 <TIM_OC6_SetConfig+0xc0>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d013      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x84>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a19      	ldr	r2, [pc, #100]	; (800b504 <TIM_OC6_SetConfig+0xc4>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00f      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x84>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a18      	ldr	r2, [pc, #96]	; (800b508 <TIM_OC6_SetConfig+0xc8>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00b      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x84>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a17      	ldr	r2, [pc, #92]	; (800b50c <TIM_OC6_SetConfig+0xcc>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d007      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x84>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a16      	ldr	r2, [pc, #88]	; (800b510 <TIM_OC6_SetConfig+0xd0>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d003      	beq.n	800b4c4 <TIM_OC6_SetConfig+0x84>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a15      	ldr	r2, [pc, #84]	; (800b514 <TIM_OC6_SetConfig+0xd4>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d109      	bne.n	800b4d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	029b      	lsls	r3, r3, #10
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	621a      	str	r2, [r3, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	371c      	adds	r7, #28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	40012c00 	.word	0x40012c00
 800b504:	40013400 	.word	0x40013400
 800b508:	40014000 	.word	0x40014000
 800b50c:	40014400 	.word	0x40014400
 800b510:	40014800 	.word	0x40014800
 800b514:	40015000 	.word	0x40015000

0800b518 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b538:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	4313      	orrs	r3, r2
 800b542:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b54a:	f023 0307 	bic.w	r3, r3, #7
 800b54e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	4a56      	ldr	r2, [pc, #344]	; (800b6c0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	f000 80a2 	beq.w	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b56e:	4a54      	ldr	r2, [pc, #336]	; (800b6c0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b570:	4293      	cmp	r3, r2
 800b572:	f200 809b 	bhi.w	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b576:	4a53      	ldr	r2, [pc, #332]	; (800b6c4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	f000 809a 	beq.w	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b57e:	4a51      	ldr	r2, [pc, #324]	; (800b6c4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b580:	4293      	cmp	r3, r2
 800b582:	f200 8093 	bhi.w	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b586:	4a50      	ldr	r2, [pc, #320]	; (800b6c8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	f000 8092 	beq.w	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b58e:	4a4e      	ldr	r2, [pc, #312]	; (800b6c8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b590:	4293      	cmp	r3, r2
 800b592:	f200 808b 	bhi.w	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b596:	4a4d      	ldr	r2, [pc, #308]	; (800b6cc <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	f000 808a 	beq.w	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b59e:	4a4b      	ldr	r2, [pc, #300]	; (800b6cc <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	f200 8083 	bhi.w	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5a6:	4a4a      	ldr	r2, [pc, #296]	; (800b6d0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	f000 8082 	beq.w	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b5ae:	4a48      	ldr	r2, [pc, #288]	; (800b6d0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d87b      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5b4:	4a47      	ldr	r2, [pc, #284]	; (800b6d4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d07b      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b5ba:	4a46      	ldr	r2, [pc, #280]	; (800b6d4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d875      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5c4:	d075      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b5c6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5ca:	d86f      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d0:	d06f      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b5d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d6:	d869      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5d8:	2b70      	cmp	r3, #112	; 0x70
 800b5da:	d01a      	beq.n	800b612 <TIM_SlaveTimer_SetConfig+0xfa>
 800b5dc:	2b70      	cmp	r3, #112	; 0x70
 800b5de:	d865      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5e0:	2b60      	cmp	r3, #96	; 0x60
 800b5e2:	d059      	beq.n	800b698 <TIM_SlaveTimer_SetConfig+0x180>
 800b5e4:	2b60      	cmp	r3, #96	; 0x60
 800b5e6:	d861      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5e8:	2b50      	cmp	r3, #80	; 0x50
 800b5ea:	d04b      	beq.n	800b684 <TIM_SlaveTimer_SetConfig+0x16c>
 800b5ec:	2b50      	cmp	r3, #80	; 0x50
 800b5ee:	d85d      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5f0:	2b40      	cmp	r3, #64	; 0x40
 800b5f2:	d019      	beq.n	800b628 <TIM_SlaveTimer_SetConfig+0x110>
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	d859      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b5f8:	2b30      	cmp	r3, #48	; 0x30
 800b5fa:	d05a      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b5fc:	2b30      	cmp	r3, #48	; 0x30
 800b5fe:	d855      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b600:	2b20      	cmp	r3, #32
 800b602:	d056      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b604:	2b20      	cmp	r3, #32
 800b606:	d851      	bhi.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d052      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b60c:	2b10      	cmp	r3, #16
 800b60e:	d050      	beq.n	800b6b2 <TIM_SlaveTimer_SetConfig+0x19a>
 800b610:	e04c      	b.n	800b6ac <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	68d9      	ldr	r1, [r3, #12]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	689a      	ldr	r2, [r3, #8]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f000 f8b8 	bl	800b796 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b626:	e045      	b.n	800b6b4 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b05      	cmp	r3, #5
 800b62e:	d004      	beq.n	800b63a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b634:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b638:	d101      	bne.n	800b63e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e03b      	b.n	800b6b6 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6a1a      	ldr	r2, [r3, #32]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0201 	bic.w	r2, r2, #1
 800b654:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b664:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	621a      	str	r2, [r3, #32]
      break;
 800b682:	e017      	b.n	800b6b4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	6899      	ldr	r1, [r3, #8]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	461a      	mov	r2, r3
 800b692:	f000 f821 	bl	800b6d8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b696:	e00d      	b.n	800b6b4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6818      	ldr	r0, [r3, #0]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	6899      	ldr	r1, [r3, #8]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	f000 f846 	bl	800b736 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b6aa:	e003      	b.n	800b6b4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b6b0:	e000      	b.n	800b6b4 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800b6b2:	bf00      	nop
  }

  return status;
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	00100070 	.word	0x00100070
 800b6c4:	00100060 	.word	0x00100060
 800b6c8:	00100050 	.word	0x00100050
 800b6cc:	00100040 	.word	0x00100040
 800b6d0:	00100030 	.word	0x00100030
 800b6d4:	00100020 	.word	0x00100020

0800b6d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	f023 0201 	bic.w	r2, r3, #1
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f023 030a 	bic.w	r3, r3, #10
 800b714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b736:	b480      	push	{r7}
 800b738:	b087      	sub	sp, #28
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	f023 0210 	bic.w	r2, r3, #16
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	031b      	lsls	r3, r3, #12
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	4313      	orrs	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	011b      	lsls	r3, r3, #4
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b796:	b480      	push	{r7}
 800b798:	b087      	sub	sp, #28
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	021a      	lsls	r2, r3, #8
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	609a      	str	r2, [r3, #8]
}
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b087      	sub	sp, #28
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	60b9      	str	r1, [r7, #8]
 800b7e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f003 031f 	and.w	r3, r3, #31
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a1a      	ldr	r2, [r3, #32]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	43db      	mvns	r3, r3
 800b7f8:	401a      	ands	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6a1a      	ldr	r2, [r3, #32]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f003 031f 	and.w	r3, r3, #31
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	fa01 f303 	lsl.w	r3, r1, r3
 800b80e:	431a      	orrs	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	621a      	str	r2, [r3, #32]
}
 800b814:	bf00      	nop
 800b816:	371c      	adds	r7, #28
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d109      	bne.n	800b844 <HAL_TIMEx_PWMN_Start+0x24>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b01      	cmp	r3, #1
 800b83a:	bf14      	ite	ne
 800b83c:	2301      	movne	r3, #1
 800b83e:	2300      	moveq	r3, #0
 800b840:	b2db      	uxtb	r3, r3
 800b842:	e022      	b.n	800b88a <HAL_TIMEx_PWMN_Start+0x6a>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b04      	cmp	r3, #4
 800b848:	d109      	bne.n	800b85e <HAL_TIMEx_PWMN_Start+0x3e>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b01      	cmp	r3, #1
 800b854:	bf14      	ite	ne
 800b856:	2301      	movne	r3, #1
 800b858:	2300      	moveq	r3, #0
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	e015      	b.n	800b88a <HAL_TIMEx_PWMN_Start+0x6a>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b08      	cmp	r3, #8
 800b862:	d109      	bne.n	800b878 <HAL_TIMEx_PWMN_Start+0x58>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	bf14      	ite	ne
 800b870:	2301      	movne	r3, #1
 800b872:	2300      	moveq	r3, #0
 800b874:	b2db      	uxtb	r3, r3
 800b876:	e008      	b.n	800b88a <HAL_TIMEx_PWMN_Start+0x6a>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b01      	cmp	r3, #1
 800b882:	bf14      	ite	ne
 800b884:	2301      	movne	r3, #1
 800b886:	2300      	moveq	r3, #0
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e073      	b.n	800b97a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d104      	bne.n	800b8a2 <HAL_TIMEx_PWMN_Start+0x82>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8a0:	e013      	b.n	800b8ca <HAL_TIMEx_PWMN_Start+0xaa>
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d104      	bne.n	800b8b2 <HAL_TIMEx_PWMN_Start+0x92>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8b0:	e00b      	b.n	800b8ca <HAL_TIMEx_PWMN_Start+0xaa>
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b08      	cmp	r3, #8
 800b8b6:	d104      	bne.n	800b8c2 <HAL_TIMEx_PWMN_Start+0xa2>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8c0:	e003      	b.n	800b8ca <HAL_TIMEx_PWMN_Start+0xaa>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 fb16 	bl	800bf04 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a25      	ldr	r2, [pc, #148]	; (800b984 <HAL_TIMEx_PWMN_Start+0x164>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d022      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fa:	d01d      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a21      	ldr	r2, [pc, #132]	; (800b988 <HAL_TIMEx_PWMN_Start+0x168>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d018      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a20      	ldr	r2, [pc, #128]	; (800b98c <HAL_TIMEx_PWMN_Start+0x16c>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d013      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a1e      	ldr	r2, [pc, #120]	; (800b990 <HAL_TIMEx_PWMN_Start+0x170>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d00e      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a1d      	ldr	r2, [pc, #116]	; (800b994 <HAL_TIMEx_PWMN_Start+0x174>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d009      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a1b      	ldr	r2, [pc, #108]	; (800b998 <HAL_TIMEx_PWMN_Start+0x178>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d004      	beq.n	800b938 <HAL_TIMEx_PWMN_Start+0x118>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a1a      	ldr	r2, [pc, #104]	; (800b99c <HAL_TIMEx_PWMN_Start+0x17c>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d115      	bne.n	800b964 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	4b18      	ldr	r3, [pc, #96]	; (800b9a0 <HAL_TIMEx_PWMN_Start+0x180>)
 800b940:	4013      	ands	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b06      	cmp	r3, #6
 800b948:	d015      	beq.n	800b976 <HAL_TIMEx_PWMN_Start+0x156>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b950:	d011      	beq.n	800b976 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f042 0201 	orr.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b962:	e008      	b.n	800b976 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 0201 	orr.w	r2, r2, #1
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e000      	b.n	800b978 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	40012c00 	.word	0x40012c00
 800b988:	40000400 	.word	0x40000400
 800b98c:	40000800 	.word	0x40000800
 800b990:	40000c00 	.word	0x40000c00
 800b994:	40013400 	.word	0x40013400
 800b998:	40014000 	.word	0x40014000
 800b99c:	40015000 	.word	0x40015000
 800b9a0:	00010007 	.word	0x00010007

0800b9a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e074      	b.n	800baa6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a34      	ldr	r2, [pc, #208]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d009      	beq.n	800b9fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a33      	ldr	r2, [pc, #204]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d004      	beq.n	800b9fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a31      	ldr	r2, [pc, #196]	; (800babc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d108      	bne.n	800ba0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ba12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d022      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba3c:	d01d      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a1f      	ldr	r2, [pc, #124]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d018      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a1d      	ldr	r2, [pc, #116]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d013      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a1c      	ldr	r2, [pc, #112]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d00e      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d009      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a18      	ldr	r2, [pc, #96]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d004      	beq.n	800ba7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d10c      	bne.n	800ba94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	40012c00 	.word	0x40012c00
 800bab8:	40013400 	.word	0x40013400
 800babc:	40015000 	.word	0x40015000
 800bac0:	40000400 	.word	0x40000400
 800bac4:	40000800 	.word	0x40000800
 800bac8:	40000c00 	.word	0x40000c00
 800bacc:	40014000 	.word	0x40014000

0800bad0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d101      	bne.n	800baec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bae8:	2302      	movs	r3, #2
 800baea:	e096      	b.n	800bc1a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	041b      	lsls	r3, r3, #16
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a2f      	ldr	r2, [pc, #188]	; (800bc28 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d009      	beq.n	800bb84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a2d      	ldr	r2, [pc, #180]	; (800bc2c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d004      	beq.n	800bb84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a2c      	ldr	r2, [pc, #176]	; (800bc30 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d106      	bne.n	800bb92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a24      	ldr	r2, [pc, #144]	; (800bc28 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d009      	beq.n	800bbb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a22      	ldr	r2, [pc, #136]	; (800bc2c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d004      	beq.n	800bbb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a21      	ldr	r2, [pc, #132]	; (800bc30 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d12b      	bne.n	800bc08 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	051b      	lsls	r3, r3, #20
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d009      	beq.n	800bbfa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a10      	ldr	r2, [pc, #64]	; (800bc2c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d004      	beq.n	800bbfa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a0e      	ldr	r2, [pc, #56]	; (800bc30 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d106      	bne.n	800bc08 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	40012c00 	.word	0x40012c00
 800bc2c:	40013400 	.word	0x40013400
 800bc30:	40015000 	.word	0x40015000

0800bc34 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800bc34:	b480      	push	{r7}
 800bc36:	b08b      	sub	sp, #44	; 0x2c
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d101      	bne.n	800bc54 <HAL_TIMEx_ConfigBreakInput+0x20>
 800bc50:	2302      	movs	r3, #2
 800bc52:	e10b      	b.n	800be6c <HAL_TIMEx_ConfigBreakInput+0x238>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b80      	cmp	r3, #128	; 0x80
 800bc62:	f000 8096 	beq.w	800bd92 <HAL_TIMEx_ConfigBreakInput+0x15e>
 800bc66:	2b80      	cmp	r3, #128	; 0x80
 800bc68:	f200 809c 	bhi.w	800bda4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800bc6c:	2b20      	cmp	r3, #32
 800bc6e:	d849      	bhi.n	800bd04 <HAL_TIMEx_ConfigBreakInput+0xd0>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 8097 	beq.w	800bda4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800bc76:	3b01      	subs	r3, #1
 800bc78:	2b1f      	cmp	r3, #31
 800bc7a:	f200 8093 	bhi.w	800bda4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <HAL_TIMEx_ConfigBreakInput+0x50>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bd0b 	.word	0x0800bd0b
 800bc88:	0800bd1f 	.word	0x0800bd1f
 800bc8c:	0800bda5 	.word	0x0800bda5
 800bc90:	0800bd33 	.word	0x0800bd33
 800bc94:	0800bda5 	.word	0x0800bda5
 800bc98:	0800bda5 	.word	0x0800bda5
 800bc9c:	0800bda5 	.word	0x0800bda5
 800bca0:	0800bd47 	.word	0x0800bd47
 800bca4:	0800bda5 	.word	0x0800bda5
 800bca8:	0800bda5 	.word	0x0800bda5
 800bcac:	0800bda5 	.word	0x0800bda5
 800bcb0:	0800bda5 	.word	0x0800bda5
 800bcb4:	0800bda5 	.word	0x0800bda5
 800bcb8:	0800bda5 	.word	0x0800bda5
 800bcbc:	0800bda5 	.word	0x0800bda5
 800bcc0:	0800bd5b 	.word	0x0800bd5b
 800bcc4:	0800bda5 	.word	0x0800bda5
 800bcc8:	0800bda5 	.word	0x0800bda5
 800bccc:	0800bda5 	.word	0x0800bda5
 800bcd0:	0800bda5 	.word	0x0800bda5
 800bcd4:	0800bda5 	.word	0x0800bda5
 800bcd8:	0800bda5 	.word	0x0800bda5
 800bcdc:	0800bda5 	.word	0x0800bda5
 800bce0:	0800bda5 	.word	0x0800bda5
 800bce4:	0800bda5 	.word	0x0800bda5
 800bce8:	0800bda5 	.word	0x0800bda5
 800bcec:	0800bda5 	.word	0x0800bda5
 800bcf0:	0800bda5 	.word	0x0800bda5
 800bcf4:	0800bda5 	.word	0x0800bda5
 800bcf8:	0800bda5 	.word	0x0800bda5
 800bcfc:	0800bda5 	.word	0x0800bda5
 800bd00:	0800bd6f 	.word	0x0800bd6f
 800bd04:	2b40      	cmp	r3, #64	; 0x40
 800bd06:	d03b      	beq.n	800bd80 <HAL_TIMEx_ConfigBreakInput+0x14c>
 800bd08:	e04c      	b.n	800bda4 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800bd12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd16:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800bd18:	2309      	movs	r3, #9
 800bd1a:	617b      	str	r3, [r7, #20]
      break;
 800bd1c:	e04b      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800bd1e:	2302      	movs	r3, #2
 800bd20:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800bd22:	2301      	movs	r3, #1
 800bd24:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800bd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd2a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800bd2c:	230a      	movs	r3, #10
 800bd2e:	617b      	str	r3, [r7, #20]
      break;
 800bd30:	e041      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800bd32:	2304      	movs	r3, #4
 800bd34:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800bd36:	2302      	movs	r3, #2
 800bd38:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800bd3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd3e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800bd40:	230b      	movs	r3, #11
 800bd42:	617b      	str	r3, [r7, #20]
      break;
 800bd44:	e037      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800bd46:	2308      	movs	r3, #8
 800bd48:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800bd4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd52:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800bd54:	230c      	movs	r3, #12
 800bd56:	617b      	str	r3, [r7, #20]
      break;
 800bd58:	e02d      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800bd5a:	2310      	movs	r3, #16
 800bd5c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800bd5e:	2304      	movs	r3, #4
 800bd60:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800bd62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd66:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800bd68:	230d      	movs	r3, #13
 800bd6a:	617b      	str	r3, [r7, #20]
      break;
 800bd6c:	e023      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800bd6e:	2320      	movs	r3, #32
 800bd70:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800bd72:	2305      	movs	r3, #5
 800bd74:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
      break;
 800bd7e:	e01a      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 800bd80:	2340      	movs	r3, #64	; 0x40
 800bd82:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800bd84:	2306      	movs	r3, #6
 800bd86:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]
      break;
 800bd90:	e011      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800bd92:	2380      	movs	r3, #128	; 0x80
 800bd94:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800bd96:	2307      	movs	r3, #7
 800bd98:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]
      break;
 800bda2:	e008      	b.n	800bdb6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	617b      	str	r3, [r7, #20]
      break;
 800bdb4:	bf00      	nop
    }
  }

  switch (BreakInput)
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d003      	beq.n	800bdc4 <HAL_TIMEx_ConfigBreakInput+0x190>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d025      	beq.n	800be0e <HAL_TIMEx_ConfigBreakInput+0x1da>
 800bdc2:	e049      	b.n	800be58 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdca:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	43db      	mvns	r3, r3
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	409a      	lsls	r2, r3
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	4013      	ands	r3, r2
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	43db      	mvns	r3, r3
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	4013      	ands	r3, r2
 800bdf0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689a      	ldr	r2, [r3, #8]
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	409a      	lsls	r2, r3
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800be0c:	e028      	b.n	800be60 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be14:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	43db      	mvns	r3, r3
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	4013      	ands	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	409a      	lsls	r2, r3
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	4013      	ands	r3, r2
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	43db      	mvns	r3, r3
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	4013      	ands	r3, r2
 800be3a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	409a      	lsls	r2, r3
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	4013      	ands	r3, r2
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800be56:	e003      	b.n	800be60 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800be5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	372c      	adds	r7, #44	; 0x2c
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bed0:	bf00      	nop
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f003 031f 	and.w	r3, r3, #31
 800bf16:	2204      	movs	r2, #4
 800bf18:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6a1a      	ldr	r2, [r3, #32]
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	43db      	mvns	r3, r3
 800bf26:	401a      	ands	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6a1a      	ldr	r2, [r3, #32]
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f003 031f 	and.w	r3, r3, #31
 800bf36:	6879      	ldr	r1, [r7, #4]
 800bf38:	fa01 f303 	lsl.w	r3, r1, r3
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	621a      	str	r2, [r3, #32]
}
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e042      	b.n	800bfe6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7f8 fc30 	bl	80047d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2224      	movs	r2, #36	; 0x24
 800bf7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f022 0201 	bic.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fbf7 	bl	800c784 <UART_SetConfig>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d101      	bne.n	800bfa0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e022      	b.n	800bfe6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fee7 	bl	800cd7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f042 0201 	orr.w	r2, r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 ff6e 	bl	800cec0 <UART_CheckIdleState>
 800bfe4:	4603      	mov	r3, r0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08a      	sub	sp, #40	; 0x28
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	4613      	mov	r3, r2
 800bffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing == Убедитесь, что процесс передачи данных еще не продолжается */
  if (huart->gState == HAL_UART_STATE_READY)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c004:	2b20      	cmp	r3, #32
 800c006:	d17a      	bne.n	800c0fe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <HAL_UART_Transmit_DMA+0x24>
 800c00e:	88fb      	ldrh	r3, [r7, #6]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e073      	b.n	800c100 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d101      	bne.n	800c026 <HAL_UART_Transmit_DMA+0x36>
 800c022:	2302      	movs	r3, #2
 800c024:	e06c      	b.n	800c100 <HAL_UART_Transmit_DMA+0x110>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	88fa      	ldrh	r2, [r7, #6]
 800c038:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	88fa      	ldrh	r2, [r7, #6]
 800c040:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2221      	movs	r2, #33	; 0x21
 800c050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d02c      	beq.n	800c0b6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c060:	4a29      	ldr	r2, [pc, #164]	; (800c108 <HAL_UART_Transmit_DMA+0x118>)
 800c062:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c068:	4a28      	ldr	r2, [pc, #160]	; (800c10c <HAL_UART_Transmit_DMA+0x11c>)
 800c06a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c070:	4a27      	ldr	r2, [pc, #156]	; (800c110 <HAL_UART_Transmit_DMA+0x120>)
 800c072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c078:	2200      	movs	r2, #0
 800c07a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c084:	4619      	mov	r1, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3328      	adds	r3, #40	; 0x28
 800c08c:	461a      	mov	r2, r3
 800c08e:	88fb      	ldrh	r3, [r7, #6]
 800c090:	f7fa fddc 	bl	8006c4c <HAL_DMA_Start_IT>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00d      	beq.n	800c0b6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2210      	movs	r2, #16
 800c09e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e024      	b.n	800c100 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2240      	movs	r2, #64	; 0x40
 800c0bc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e6:	623a      	str	r2, [r7, #32]
 800c0e8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	69f9      	ldr	r1, [r7, #28]
 800c0ec:	6a3a      	ldr	r2, [r7, #32]
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e5      	bne.n	800c0c6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e000      	b.n	800c100 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c0fe:	2302      	movs	r3, #2
  }
}
 800c100:	4618      	mov	r0, r3
 800c102:	3728      	adds	r7, #40	; 0x28
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	0800d235 	.word	0x0800d235
 800c10c:	0800d2cf 	.word	0x0800d2cf
 800c110:	0800d2eb 	.word	0x0800d2eb

0800c114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b0ba      	sub	sp, #232	; 0xe8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	69db      	ldr	r3, [r3, #28]
 800c122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c13a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c13e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c142:	4013      	ands	r3, r2
 800c144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d11b      	bne.n	800c188 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c154:	f003 0320 	and.w	r3, r3, #32
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d015      	beq.n	800c188 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b00      	cmp	r3, #0
 800c166:	d105      	bne.n	800c174 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c16c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d009      	beq.n	800c188 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 82d6 	beq.w	800c72a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	4798      	blx	r3
      }
      return;
 800c186:	e2d0      	b.n	800c72a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 811f 	beq.w	800c3d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c192:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c196:	4b8b      	ldr	r3, [pc, #556]	; (800c3c4 <HAL_UART_IRQHandler+0x2b0>)
 800c198:	4013      	ands	r3, r2
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c19e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1a2:	4b89      	ldr	r3, [pc, #548]	; (800c3c8 <HAL_UART_IRQHandler+0x2b4>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 8112 	beq.w	800c3d0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d011      	beq.n	800c1dc <HAL_UART_IRQHandler+0xc8>
 800c1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00b      	beq.n	800c1dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d2:	f043 0201 	orr.w	r2, r3, #1
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e0:	f003 0302 	and.w	r3, r3, #2
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d011      	beq.n	800c20c <HAL_UART_IRQHandler+0xf8>
 800c1e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00b      	beq.n	800c20c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c202:	f043 0204 	orr.w	r2, r3, #4
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c210:	f003 0304 	and.w	r3, r3, #4
 800c214:	2b00      	cmp	r3, #0
 800c216:	d011      	beq.n	800c23c <HAL_UART_IRQHandler+0x128>
 800c218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2204      	movs	r2, #4
 800c22a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c232:	f043 0202 	orr.w	r2, r3, #2
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c240:	f003 0308 	and.w	r3, r3, #8
 800c244:	2b00      	cmp	r3, #0
 800c246:	d017      	beq.n	800c278 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	f003 0320 	and.w	r3, r3, #32
 800c250:	2b00      	cmp	r3, #0
 800c252:	d105      	bne.n	800c260 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c254:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c258:	4b5a      	ldr	r3, [pc, #360]	; (800c3c4 <HAL_UART_IRQHandler+0x2b0>)
 800c25a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00b      	beq.n	800c278 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2208      	movs	r2, #8
 800c266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c26e:	f043 0208 	orr.w	r2, r3, #8
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c27c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c280:	2b00      	cmp	r3, #0
 800c282:	d012      	beq.n	800c2aa <HAL_UART_IRQHandler+0x196>
 800c284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00c      	beq.n	800c2aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a0:	f043 0220 	orr.w	r2, r3, #32
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 823c 	beq.w	800c72e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ba:	f003 0320 	and.w	r3, r3, #32
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d013      	beq.n	800c2ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d105      	bne.n	800c2da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d007      	beq.n	800c2ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d003      	beq.n	800c2ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fe:	2b40      	cmp	r3, #64	; 0x40
 800c300:	d005      	beq.n	800c30e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c306:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d04f      	beq.n	800c3ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 ff2a 	bl	800d168 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31e:	2b40      	cmp	r3, #64	; 0x40
 800c320:	d141      	bne.n	800c3a6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3308      	adds	r3, #8
 800c328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3308      	adds	r3, #8
 800c34a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c34e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c35a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1d9      	bne.n	800c322 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c372:	2b00      	cmp	r3, #0
 800c374:	d013      	beq.n	800c39e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37a:	4a14      	ldr	r2, [pc, #80]	; (800c3cc <HAL_UART_IRQHandler+0x2b8>)
 800c37c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c382:	4618      	mov	r0, r3
 800c384:	f7fa fd36 	bl	8006df4 <HAL_DMA_Abort_IT>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d017      	beq.n	800c3be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c39c:	e00f      	b.n	800c3be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f9da 	bl	800c758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a4:	e00b      	b.n	800c3be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f9d6 	bl	800c758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ac:	e007      	b.n	800c3be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f9d2 	bl	800c758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c3bc:	e1b7      	b.n	800c72e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3be:	bf00      	nop
    return;
 800c3c0:	e1b5      	b.n	800c72e <HAL_UART_IRQHandler+0x61a>
 800c3c2:	bf00      	nop
 800c3c4:	10000001 	.word	0x10000001
 800c3c8:	04000120 	.word	0x04000120
 800c3cc:	0800d36b 	.word	0x0800d36b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	f040 814a 	bne.w	800c66e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3de:	f003 0310 	and.w	r3, r3, #16
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8143 	beq.w	800c66e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ec:	f003 0310 	and.w	r3, r3, #16
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 813c 	beq.w	800c66e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2210      	movs	r2, #16
 800c3fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c408:	2b40      	cmp	r3, #64	; 0x40
 800c40a:	f040 80b5 	bne.w	800c578 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c41a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 8187 	beq.w	800c732 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c42a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c42e:	429a      	cmp	r2, r3
 800c430:	f080 817f 	bcs.w	800c732 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c43a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0320 	and.w	r3, r3, #32
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f040 8086 	bne.w	800c55c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c45c:	e853 3f00 	ldrex	r3, [r3]
 800c460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c46c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c47a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c47e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c48a:	e841 2300 	strex	r3, r2, [r1]
 800c48e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1da      	bne.n	800c450 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4a4:	e853 3f00 	ldrex	r3, [r3]
 800c4a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4ac:	f023 0301 	bic.w	r3, r3, #1
 800c4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3308      	adds	r3, #8
 800c4ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4ca:	e841 2300 	strex	r3, r2, [r1]
 800c4ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e1      	bne.n	800c49a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4e0:	e853 3f00 	ldrex	r3, [r3]
 800c4e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c4fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c502:	e841 2300 	strex	r3, r2, [r1]
 800c506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e3      	bne.n	800c4d6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2220      	movs	r2, #32
 800c512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c524:	e853 3f00 	ldrex	r3, [r3]
 800c528:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52c:	f023 0310 	bic.w	r3, r3, #16
 800c530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c53e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c540:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c542:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c546:	e841 2300 	strex	r3, r2, [r1]
 800c54a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1e4      	bne.n	800c51c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c556:	4618      	mov	r0, r3
 800c558:	f7fa fbf3 	bl	8006d42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c568:	b29b      	uxth	r3, r3
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f8fb 	bl	800c76c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c576:	e0dc      	b.n	800c732 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c584:	b29b      	uxth	r3, r3
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c592:	b29b      	uxth	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 80ce 	beq.w	800c736 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c59a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 80c9 	beq.w	800c736 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c5c6:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e4      	bne.n	800c5a4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3308      	adds	r3, #8
 800c5e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	e853 3f00 	ldrex	r3, [r3]
 800c5e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5f0:	f023 0301 	bic.w	r3, r3, #1
 800c5f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c602:	633a      	str	r2, [r7, #48]	; 0x30
 800c604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c60a:	e841 2300 	strex	r3, r2, [r1]
 800c60e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e1      	bne.n	800c5da <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2220      	movs	r2, #32
 800c61a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	e853 3f00 	ldrex	r3, [r3]
 800c636:	60fb      	str	r3, [r7, #12]
   return(result);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f023 0310 	bic.w	r3, r3, #16
 800c63e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c64c:	61fb      	str	r3, [r7, #28]
 800c64e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c650:	69b9      	ldr	r1, [r7, #24]
 800c652:	69fa      	ldr	r2, [r7, #28]
 800c654:	e841 2300 	strex	r3, r2, [r1]
 800c658:	617b      	str	r3, [r7, #20]
   return(result);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e4      	bne.n	800c62a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f880 	bl	800c76c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c66c:	e063      	b.n	800c736 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00e      	beq.n	800c698 <HAL_UART_IRQHandler+0x584>
 800c67a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c67e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d008      	beq.n	800c698 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c68e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 ff14 	bl	800d4be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c696:	e051      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d014      	beq.n	800c6ce <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d105      	bne.n	800c6bc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c6b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d008      	beq.n	800c6ce <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d03a      	beq.n	800c73a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	4798      	blx	r3
    }
    return;
 800c6cc:	e035      	b.n	800c73a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d009      	beq.n	800c6ee <HAL_UART_IRQHandler+0x5da>
 800c6da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fe55 	bl	800d396 <UART_EndTransmit_IT>
    return;
 800c6ec:	e026      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d009      	beq.n	800c70e <HAL_UART_IRQHandler+0x5fa>
 800c6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 feed 	bl	800d4e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c70c:	e016      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d010      	beq.n	800c73c <HAL_UART_IRQHandler+0x628>
 800c71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	da0c      	bge.n	800c73c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fed5 	bl	800d4d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c728:	e008      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
      return;
 800c72a:	bf00      	nop
 800c72c:	e006      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
    return;
 800c72e:	bf00      	nop
 800c730:	e004      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
      return;
 800c732:	bf00      	nop
 800c734:	e002      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
      return;
 800c736:	bf00      	nop
 800c738:	e000      	b.n	800c73c <HAL_UART_IRQHandler+0x628>
    return;
 800c73a:	bf00      	nop
  }
}
 800c73c:	37e8      	adds	r7, #232	; 0xe8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop

0800c744 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c788:	b08c      	sub	sp, #48	; 0x30
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	689a      	ldr	r2, [r3, #8]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	431a      	orrs	r2, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4baa      	ldr	r3, [pc, #680]	; (800ca5c <UART_SetConfig+0x2d8>)
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7bc:	430b      	orrs	r3, r1
 800c7be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	68da      	ldr	r2, [r3, #12]
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	430a      	orrs	r2, r1
 800c7d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a9f      	ldr	r2, [pc, #636]	; (800ca60 <UART_SetConfig+0x2dc>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d004      	beq.n	800c7f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c7fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	6812      	ldr	r2, [r2, #0]
 800c802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c804:	430b      	orrs	r3, r1
 800c806:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80e:	f023 010f 	bic.w	r1, r3, #15
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	430a      	orrs	r2, r1
 800c81c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a90      	ldr	r2, [pc, #576]	; (800ca64 <UART_SetConfig+0x2e0>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d125      	bne.n	800c874 <UART_SetConfig+0xf0>
 800c828:	4b8f      	ldr	r3, [pc, #572]	; (800ca68 <UART_SetConfig+0x2e4>)
 800c82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c82e:	f003 0303 	and.w	r3, r3, #3
 800c832:	2b03      	cmp	r3, #3
 800c834:	d81a      	bhi.n	800c86c <UART_SetConfig+0xe8>
 800c836:	a201      	add	r2, pc, #4	; (adr r2, 800c83c <UART_SetConfig+0xb8>)
 800c838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83c:	0800c84d 	.word	0x0800c84d
 800c840:	0800c85d 	.word	0x0800c85d
 800c844:	0800c855 	.word	0x0800c855
 800c848:	0800c865 	.word	0x0800c865
 800c84c:	2301      	movs	r3, #1
 800c84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c852:	e116      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c854:	2302      	movs	r3, #2
 800c856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c85a:	e112      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c85c:	2304      	movs	r3, #4
 800c85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c862:	e10e      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c864:	2308      	movs	r3, #8
 800c866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c86a:	e10a      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c86c:	2310      	movs	r3, #16
 800c86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c872:	e106      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a7c      	ldr	r2, [pc, #496]	; (800ca6c <UART_SetConfig+0x2e8>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d138      	bne.n	800c8f0 <UART_SetConfig+0x16c>
 800c87e:	4b7a      	ldr	r3, [pc, #488]	; (800ca68 <UART_SetConfig+0x2e4>)
 800c880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c884:	f003 030c 	and.w	r3, r3, #12
 800c888:	2b0c      	cmp	r3, #12
 800c88a:	d82d      	bhi.n	800c8e8 <UART_SetConfig+0x164>
 800c88c:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <UART_SetConfig+0x110>)
 800c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c892:	bf00      	nop
 800c894:	0800c8c9 	.word	0x0800c8c9
 800c898:	0800c8e9 	.word	0x0800c8e9
 800c89c:	0800c8e9 	.word	0x0800c8e9
 800c8a0:	0800c8e9 	.word	0x0800c8e9
 800c8a4:	0800c8d9 	.word	0x0800c8d9
 800c8a8:	0800c8e9 	.word	0x0800c8e9
 800c8ac:	0800c8e9 	.word	0x0800c8e9
 800c8b0:	0800c8e9 	.word	0x0800c8e9
 800c8b4:	0800c8d1 	.word	0x0800c8d1
 800c8b8:	0800c8e9 	.word	0x0800c8e9
 800c8bc:	0800c8e9 	.word	0x0800c8e9
 800c8c0:	0800c8e9 	.word	0x0800c8e9
 800c8c4:	0800c8e1 	.word	0x0800c8e1
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ce:	e0d8      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8d6:	e0d4      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8de:	e0d0      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8e6:	e0cc      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c8e8:	2310      	movs	r3, #16
 800c8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ee:	e0c8      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a5e      	ldr	r2, [pc, #376]	; (800ca70 <UART_SetConfig+0x2ec>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d125      	bne.n	800c946 <UART_SetConfig+0x1c2>
 800c8fa:	4b5b      	ldr	r3, [pc, #364]	; (800ca68 <UART_SetConfig+0x2e4>)
 800c8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c904:	2b30      	cmp	r3, #48	; 0x30
 800c906:	d016      	beq.n	800c936 <UART_SetConfig+0x1b2>
 800c908:	2b30      	cmp	r3, #48	; 0x30
 800c90a:	d818      	bhi.n	800c93e <UART_SetConfig+0x1ba>
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	d00a      	beq.n	800c926 <UART_SetConfig+0x1a2>
 800c910:	2b20      	cmp	r3, #32
 800c912:	d814      	bhi.n	800c93e <UART_SetConfig+0x1ba>
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <UART_SetConfig+0x19a>
 800c918:	2b10      	cmp	r3, #16
 800c91a:	d008      	beq.n	800c92e <UART_SetConfig+0x1aa>
 800c91c:	e00f      	b.n	800c93e <UART_SetConfig+0x1ba>
 800c91e:	2300      	movs	r3, #0
 800c920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c924:	e0ad      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c926:	2302      	movs	r3, #2
 800c928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c92c:	e0a9      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c92e:	2304      	movs	r3, #4
 800c930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c934:	e0a5      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c936:	2308      	movs	r3, #8
 800c938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c93c:	e0a1      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c93e:	2310      	movs	r3, #16
 800c940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c944:	e09d      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a4a      	ldr	r2, [pc, #296]	; (800ca74 <UART_SetConfig+0x2f0>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d125      	bne.n	800c99c <UART_SetConfig+0x218>
 800c950:	4b45      	ldr	r3, [pc, #276]	; (800ca68 <UART_SetConfig+0x2e4>)
 800c952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c95a:	2bc0      	cmp	r3, #192	; 0xc0
 800c95c:	d016      	beq.n	800c98c <UART_SetConfig+0x208>
 800c95e:	2bc0      	cmp	r3, #192	; 0xc0
 800c960:	d818      	bhi.n	800c994 <UART_SetConfig+0x210>
 800c962:	2b80      	cmp	r3, #128	; 0x80
 800c964:	d00a      	beq.n	800c97c <UART_SetConfig+0x1f8>
 800c966:	2b80      	cmp	r3, #128	; 0x80
 800c968:	d814      	bhi.n	800c994 <UART_SetConfig+0x210>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <UART_SetConfig+0x1f0>
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	d008      	beq.n	800c984 <UART_SetConfig+0x200>
 800c972:	e00f      	b.n	800c994 <UART_SetConfig+0x210>
 800c974:	2300      	movs	r3, #0
 800c976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c97a:	e082      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c97c:	2302      	movs	r3, #2
 800c97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c982:	e07e      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c984:	2304      	movs	r3, #4
 800c986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c98a:	e07a      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c98c:	2308      	movs	r3, #8
 800c98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c992:	e076      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c994:	2310      	movs	r3, #16
 800c996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c99a:	e072      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a35      	ldr	r2, [pc, #212]	; (800ca78 <UART_SetConfig+0x2f4>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d12a      	bne.n	800c9fc <UART_SetConfig+0x278>
 800c9a6:	4b30      	ldr	r3, [pc, #192]	; (800ca68 <UART_SetConfig+0x2e4>)
 800c9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9b4:	d01a      	beq.n	800c9ec <UART_SetConfig+0x268>
 800c9b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9ba:	d81b      	bhi.n	800c9f4 <UART_SetConfig+0x270>
 800c9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9c0:	d00c      	beq.n	800c9dc <UART_SetConfig+0x258>
 800c9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9c6:	d815      	bhi.n	800c9f4 <UART_SetConfig+0x270>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <UART_SetConfig+0x250>
 800c9cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d0:	d008      	beq.n	800c9e4 <UART_SetConfig+0x260>
 800c9d2:	e00f      	b.n	800c9f4 <UART_SetConfig+0x270>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9da:	e052      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c9dc:	2302      	movs	r3, #2
 800c9de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9e2:	e04e      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c9e4:	2304      	movs	r3, #4
 800c9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9ea:	e04a      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c9ec:	2308      	movs	r3, #8
 800c9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9f2:	e046      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9fa:	e042      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a17      	ldr	r2, [pc, #92]	; (800ca60 <UART_SetConfig+0x2dc>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d13a      	bne.n	800ca7c <UART_SetConfig+0x2f8>
 800ca06:	4b18      	ldr	r3, [pc, #96]	; (800ca68 <UART_SetConfig+0x2e4>)
 800ca08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca14:	d01a      	beq.n	800ca4c <UART_SetConfig+0x2c8>
 800ca16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca1a:	d81b      	bhi.n	800ca54 <UART_SetConfig+0x2d0>
 800ca1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca20:	d00c      	beq.n	800ca3c <UART_SetConfig+0x2b8>
 800ca22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca26:	d815      	bhi.n	800ca54 <UART_SetConfig+0x2d0>
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <UART_SetConfig+0x2b0>
 800ca2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca30:	d008      	beq.n	800ca44 <UART_SetConfig+0x2c0>
 800ca32:	e00f      	b.n	800ca54 <UART_SetConfig+0x2d0>
 800ca34:	2300      	movs	r3, #0
 800ca36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca3a:	e022      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca42:	e01e      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800ca44:	2304      	movs	r3, #4
 800ca46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca4a:	e01a      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800ca4c:	2308      	movs	r3, #8
 800ca4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca52:	e016      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800ca54:	2310      	movs	r3, #16
 800ca56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca5a:	e012      	b.n	800ca82 <UART_SetConfig+0x2fe>
 800ca5c:	cfff69f3 	.word	0xcfff69f3
 800ca60:	40008000 	.word	0x40008000
 800ca64:	40013800 	.word	0x40013800
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	40004400 	.word	0x40004400
 800ca70:	40004800 	.word	0x40004800
 800ca74:	40004c00 	.word	0x40004c00
 800ca78:	40005000 	.word	0x40005000
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4aae      	ldr	r2, [pc, #696]	; (800cd40 <UART_SetConfig+0x5bc>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	f040 8097 	bne.w	800cbbc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca92:	2b08      	cmp	r3, #8
 800ca94:	d823      	bhi.n	800cade <UART_SetConfig+0x35a>
 800ca96:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <UART_SetConfig+0x318>)
 800ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9c:	0800cac1 	.word	0x0800cac1
 800caa0:	0800cadf 	.word	0x0800cadf
 800caa4:	0800cac9 	.word	0x0800cac9
 800caa8:	0800cadf 	.word	0x0800cadf
 800caac:	0800cacf 	.word	0x0800cacf
 800cab0:	0800cadf 	.word	0x0800cadf
 800cab4:	0800cadf 	.word	0x0800cadf
 800cab8:	0800cadf 	.word	0x0800cadf
 800cabc:	0800cad7 	.word	0x0800cad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cac0:	f7fd f890 	bl	8009be4 <HAL_RCC_GetPCLK1Freq>
 800cac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cac6:	e010      	b.n	800caea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cac8:	4b9e      	ldr	r3, [pc, #632]	; (800cd44 <UART_SetConfig+0x5c0>)
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cacc:	e00d      	b.n	800caea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cace:	f7fd f81b 	bl	8009b08 <HAL_RCC_GetSysClockFreq>
 800cad2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cad4:	e009      	b.n	800caea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cadc:	e005      	b.n	800caea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cade:	2300      	movs	r3, #0
 800cae0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cae8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 8130 	beq.w	800cd52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf6:	4a94      	ldr	r2, [pc, #592]	; (800cd48 <UART_SetConfig+0x5c4>)
 800caf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cafc:	461a      	mov	r2, r3
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	685a      	ldr	r2, [r3, #4]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4413      	add	r3, r2
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d305      	bcc.n	800cb22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb1c:	69ba      	ldr	r2, [r7, #24]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d903      	bls.n	800cb2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cb28:	e113      	b.n	800cd52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	60bb      	str	r3, [r7, #8]
 800cb30:	60fa      	str	r2, [r7, #12]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb36:	4a84      	ldr	r2, [pc, #528]	; (800cd48 <UART_SetConfig+0x5c4>)
 800cb38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	2200      	movs	r2, #0
 800cb40:	603b      	str	r3, [r7, #0]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb4c:	f7f4 f914 	bl	8000d78 <__aeabi_uldivmod>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4610      	mov	r0, r2
 800cb56:	4619      	mov	r1, r3
 800cb58:	f04f 0200 	mov.w	r2, #0
 800cb5c:	f04f 0300 	mov.w	r3, #0
 800cb60:	020b      	lsls	r3, r1, #8
 800cb62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb66:	0202      	lsls	r2, r0, #8
 800cb68:	6979      	ldr	r1, [r7, #20]
 800cb6a:	6849      	ldr	r1, [r1, #4]
 800cb6c:	0849      	lsrs	r1, r1, #1
 800cb6e:	2000      	movs	r0, #0
 800cb70:	460c      	mov	r4, r1
 800cb72:	4605      	mov	r5, r0
 800cb74:	eb12 0804 	adds.w	r8, r2, r4
 800cb78:	eb43 0905 	adc.w	r9, r3, r5
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	469a      	mov	sl, r3
 800cb84:	4693      	mov	fp, r2
 800cb86:	4652      	mov	r2, sl
 800cb88:	465b      	mov	r3, fp
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	f7f4 f8f3 	bl	8000d78 <__aeabi_uldivmod>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	4613      	mov	r3, r2
 800cb98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cba0:	d308      	bcc.n	800cbb4 <UART_SetConfig+0x430>
 800cba2:	6a3b      	ldr	r3, [r7, #32]
 800cba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cba8:	d204      	bcs.n	800cbb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6a3a      	ldr	r2, [r7, #32]
 800cbb0:	60da      	str	r2, [r3, #12]
 800cbb2:	e0ce      	b.n	800cd52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cbba:	e0ca      	b.n	800cd52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	69db      	ldr	r3, [r3, #28]
 800cbc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbc4:	d166      	bne.n	800cc94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cbc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbca:	2b08      	cmp	r3, #8
 800cbcc:	d827      	bhi.n	800cc1e <UART_SetConfig+0x49a>
 800cbce:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <UART_SetConfig+0x450>)
 800cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd4:	0800cbf9 	.word	0x0800cbf9
 800cbd8:	0800cc01 	.word	0x0800cc01
 800cbdc:	0800cc09 	.word	0x0800cc09
 800cbe0:	0800cc1f 	.word	0x0800cc1f
 800cbe4:	0800cc0f 	.word	0x0800cc0f
 800cbe8:	0800cc1f 	.word	0x0800cc1f
 800cbec:	0800cc1f 	.word	0x0800cc1f
 800cbf0:	0800cc1f 	.word	0x0800cc1f
 800cbf4:	0800cc17 	.word	0x0800cc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbf8:	f7fc fff4 	bl	8009be4 <HAL_RCC_GetPCLK1Freq>
 800cbfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbfe:	e014      	b.n	800cc2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc00:	f7fd f806 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 800cc04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc06:	e010      	b.n	800cc2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc08:	4b4e      	ldr	r3, [pc, #312]	; (800cd44 <UART_SetConfig+0x5c0>)
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc0c:	e00d      	b.n	800cc2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc0e:	f7fc ff7b 	bl	8009b08 <HAL_RCC_GetSysClockFreq>
 800cc12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cc14:	e009      	b.n	800cc2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc1c:	e005      	b.n	800cc2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cc28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 8090 	beq.w	800cd52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	4a44      	ldr	r2, [pc, #272]	; (800cd48 <UART_SetConfig+0x5c4>)
 800cc38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc44:	005a      	lsls	r2, r3, #1
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	085b      	lsrs	r3, r3, #1
 800cc4c:	441a      	add	r2, r3
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	2b0f      	cmp	r3, #15
 800cc5c:	d916      	bls.n	800cc8c <UART_SetConfig+0x508>
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc64:	d212      	bcs.n	800cc8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	f023 030f 	bic.w	r3, r3, #15
 800cc6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	085b      	lsrs	r3, r3, #1
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	8bfb      	ldrh	r3, [r7, #30]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	8bfa      	ldrh	r2, [r7, #30]
 800cc88:	60da      	str	r2, [r3, #12]
 800cc8a:	e062      	b.n	800cd52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc92:	e05e      	b.n	800cd52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc98:	2b08      	cmp	r3, #8
 800cc9a:	d828      	bhi.n	800ccee <UART_SetConfig+0x56a>
 800cc9c:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <UART_SetConfig+0x520>)
 800cc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca2:	bf00      	nop
 800cca4:	0800ccc9 	.word	0x0800ccc9
 800cca8:	0800ccd1 	.word	0x0800ccd1
 800ccac:	0800ccd9 	.word	0x0800ccd9
 800ccb0:	0800ccef 	.word	0x0800ccef
 800ccb4:	0800ccdf 	.word	0x0800ccdf
 800ccb8:	0800ccef 	.word	0x0800ccef
 800ccbc:	0800ccef 	.word	0x0800ccef
 800ccc0:	0800ccef 	.word	0x0800ccef
 800ccc4:	0800cce7 	.word	0x0800cce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccc8:	f7fc ff8c 	bl	8009be4 <HAL_RCC_GetPCLK1Freq>
 800cccc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccce:	e014      	b.n	800ccfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccd0:	f7fc ff9e 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 800ccd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccd6:	e010      	b.n	800ccfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ccd8:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <UART_SetConfig+0x5c0>)
 800ccda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccdc:	e00d      	b.n	800ccfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccde:	f7fc ff13 	bl	8009b08 <HAL_RCC_GetSysClockFreq>
 800cce2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cce4:	e009      	b.n	800ccfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccec:	e005      	b.n	800ccfa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ccf8:	bf00      	nop
    }

    if (pclk != 0U)
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d028      	beq.n	800cd52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd04:	4a10      	ldr	r2, [pc, #64]	; (800cd48 <UART_SetConfig+0x5c4>)
 800cd06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	085b      	lsrs	r3, r3, #1
 800cd18:	441a      	add	r2, r3
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	2b0f      	cmp	r3, #15
 800cd28:	d910      	bls.n	800cd4c <UART_SetConfig+0x5c8>
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd30:	d20c      	bcs.n	800cd4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	60da      	str	r2, [r3, #12]
 800cd3c:	e009      	b.n	800cd52 <UART_SetConfig+0x5ce>
 800cd3e:	bf00      	nop
 800cd40:	40008000 	.word	0x40008000
 800cd44:	00f42400 	.word	0x00f42400
 800cd48:	080153ac 	.word	0x080153ac
      }
      else
      {
        ret = HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2200      	movs	r2, #0
 800cd66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cd6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3730      	adds	r7, #48	; 0x30
 800cd76:	46bd      	mov	sp, r7
 800cd78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cd7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00a      	beq.n	800cda6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdaa:	f003 0302 	and.w	r3, r3, #2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00a      	beq.n	800cdc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	430a      	orrs	r2, r1
 800cdc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdcc:	f003 0304 	and.w	r3, r3, #4
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00a      	beq.n	800cdea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	430a      	orrs	r2, r1
 800cde8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdee:	f003 0308 	and.w	r3, r3, #8
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00a      	beq.n	800ce0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce10:	f003 0310 	and.w	r3, r3, #16
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00a      	beq.n	800ce2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce32:	f003 0320 	and.w	r3, r3, #32
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01a      	beq.n	800ce92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	430a      	orrs	r2, r1
 800ce70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce7a:	d10a      	bne.n	800ce92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	605a      	str	r2, [r3, #4]
  }
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ced0:	f7f7 feba 	bl	8004c48 <HAL_GetTick>
 800ced4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f003 0308 	and.w	r3, r3, #8
 800cee0:	2b08      	cmp	r3, #8
 800cee2:	d10e      	bne.n	800cf02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f82f 	bl	800cf56 <UART_WaitOnFlagUntilTimeout>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	e025      	b.n	800cf4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0304 	and.w	r3, r3, #4
 800cf0c:	2b04      	cmp	r3, #4
 800cf0e:	d10e      	bne.n	800cf2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f819 	bl	800cf56 <UART_WaitOnFlagUntilTimeout>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e00f      	b.n	800cf4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2220      	movs	r2, #32
 800cf32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b09c      	sub	sp, #112	; 0x70
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	60b9      	str	r1, [r7, #8]
 800cf60:	603b      	str	r3, [r7, #0]
 800cf62:	4613      	mov	r3, r2
 800cf64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf66:	e0a9      	b.n	800d0bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6e:	f000 80a5 	beq.w	800d0bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf72:	f7f7 fe69 	bl	8004c48 <HAL_GetTick>
 800cf76:	4602      	mov	r2, r0
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d302      	bcc.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x32>
 800cf82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d140      	bne.n	800d00a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf90:	e853 3f00 	ldrex	r3, [r3]
 800cf94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf9c:	667b      	str	r3, [r7, #100]	; 0x64
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfa8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfae:	e841 2300 	strex	r3, r2, [r1]
 800cfb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cfb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1e6      	bne.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc4:	e853 3f00 	ldrex	r3, [r3]
 800cfc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	f023 0301 	bic.w	r3, r3, #1
 800cfd0:	663b      	str	r3, [r7, #96]	; 0x60
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfda:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe2:	e841 2300 	strex	r3, r2, [r1]
 800cfe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1e5      	bne.n	800cfba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2220      	movs	r2, #32
 800cffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d006:	2303      	movs	r3, #3
 800d008:	e069      	b.n	800d0de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b00      	cmp	r3, #0
 800d016:	d051      	beq.n	800d0bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	69db      	ldr	r3, [r3, #28]
 800d01e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d026:	d149      	bne.n	800d0bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d030:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	e853 3f00 	ldrex	r3, [r3]
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d046:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d050:	637b      	str	r3, [r7, #52]	; 0x34
 800d052:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d058:	e841 2300 	strex	r3, r2, [r1]
 800d05c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e6      	bne.n	800d032 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	e853 3f00 	ldrex	r3, [r3]
 800d072:	613b      	str	r3, [r7, #16]
   return(result);
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	f023 0301 	bic.w	r3, r3, #1
 800d07a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3308      	adds	r3, #8
 800d082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d084:	623a      	str	r2, [r7, #32]
 800d086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d088:	69f9      	ldr	r1, [r7, #28]
 800d08a:	6a3a      	ldr	r2, [r7, #32]
 800d08c:	e841 2300 	strex	r3, r2, [r1]
 800d090:	61bb      	str	r3, [r7, #24]
   return(result);
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e5      	bne.n	800d064 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2220      	movs	r2, #32
 800d09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e010      	b.n	800d0de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	69da      	ldr	r2, [r3, #28]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	bf0c      	ite	eq
 800d0cc:	2301      	moveq	r3, #1
 800d0ce:	2300      	movne	r3, #0
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	79fb      	ldrb	r3, [r7, #7]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	f43f af46 	beq.w	800cf68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3770      	adds	r7, #112	; 0x70
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b08f      	sub	sp, #60	; 0x3c
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	e853 3f00 	ldrex	r3, [r3]
 800d0fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d102:	637b      	str	r3, [r7, #52]	; 0x34
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	461a      	mov	r2, r3
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d10e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d114:	e841 2300 	strex	r3, r2, [r1]
 800d118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1e6      	bne.n	800d0ee <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3308      	adds	r3, #8
 800d126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	e853 3f00 	ldrex	r3, [r3]
 800d12e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d136:	633b      	str	r3, [r7, #48]	; 0x30
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3308      	adds	r3, #8
 800d13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d140:	61ba      	str	r2, [r7, #24]
 800d142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d144:	6979      	ldr	r1, [r7, #20]
 800d146:	69ba      	ldr	r2, [r7, #24]
 800d148:	e841 2300 	strex	r3, r2, [r1]
 800d14c:	613b      	str	r3, [r7, #16]
   return(result);
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1e5      	bne.n	800d120 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2220      	movs	r2, #32
 800d158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d15c:	bf00      	nop
 800d15e:	373c      	adds	r7, #60	; 0x3c
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d168:	b480      	push	{r7}
 800d16a:	b095      	sub	sp, #84	; 0x54
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d178:	e853 3f00 	ldrex	r3, [r3]
 800d17c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d184:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d18e:	643b      	str	r3, [r7, #64]	; 0x40
 800d190:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d196:	e841 2300 	strex	r3, r2, [r1]
 800d19a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1e6      	bne.n	800d170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3308      	adds	r3, #8
 800d1a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	e853 3f00 	ldrex	r3, [r3]
 800d1b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1b8:	f023 0301 	bic.w	r3, r3, #1
 800d1bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ce:	e841 2300 	strex	r3, r2, [r1]
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1e3      	bne.n	800d1a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d118      	bne.n	800d214 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	e853 3f00 	ldrex	r3, [r3]
 800d1ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f023 0310 	bic.w	r3, r3, #16
 800d1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d200:	61bb      	str	r3, [r7, #24]
 800d202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d204:	6979      	ldr	r1, [r7, #20]
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	e841 2300 	strex	r3, r2, [r1]
 800d20c:	613b      	str	r3, [r7, #16]
   return(result);
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1e6      	bne.n	800d1e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2220      	movs	r2, #32
 800d218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d228:	bf00      	nop
 800d22a:	3754      	adds	r7, #84	; 0x54
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b090      	sub	sp, #64	; 0x40
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d240:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 0320 	and.w	r3, r3, #32
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d137      	bne.n	800d2c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d252:	2200      	movs	r2, #0
 800d254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3308      	adds	r3, #8
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	e853 3f00 	ldrex	r3, [r3]
 800d266:	623b      	str	r3, [r7, #32]
   return(result);
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d26e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3308      	adds	r3, #8
 800d276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d278:	633a      	str	r2, [r7, #48]	; 0x30
 800d27a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d280:	e841 2300 	strex	r3, r2, [r1]
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1e5      	bne.n	800d258 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	e853 3f00 	ldrex	r3, [r3]
 800d298:	60fb      	str	r3, [r7, #12]
   return(result);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2aa:	61fb      	str	r3, [r7, #28]
 800d2ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ae:	69b9      	ldr	r1, [r7, #24]
 800d2b0:	69fa      	ldr	r2, [r7, #28]
 800d2b2:	e841 2300 	strex	r3, r2, [r1]
 800d2b6:	617b      	str	r3, [r7, #20]
   return(result);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e6      	bne.n	800d28c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2be:	e002      	b.n	800d2c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d2c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d2c2:	f7f5 ffd5 	bl	8003270 <HAL_UART_TxCpltCallback>
}
 800d2c6:	bf00      	nop
 800d2c8:	3740      	adds	r7, #64	; 0x40
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b084      	sub	sp, #16
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7ff fa31 	bl	800c744 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2e2:	bf00      	nop
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d306:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d312:	2b80      	cmp	r3, #128	; 0x80
 800d314:	d109      	bne.n	800d32a <UART_DMAError+0x40>
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	2b21      	cmp	r3, #33	; 0x21
 800d31a:	d106      	bne.n	800d32a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2200      	movs	r2, #0
 800d320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d324:	6978      	ldr	r0, [r7, #20]
 800d326:	f7ff fede 	bl	800d0e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d334:	2b40      	cmp	r3, #64	; 0x40
 800d336:	d109      	bne.n	800d34c <UART_DMAError+0x62>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b22      	cmp	r3, #34	; 0x22
 800d33c:	d106      	bne.n	800d34c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2200      	movs	r2, #0
 800d342:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d346:	6978      	ldr	r0, [r7, #20]
 800d348:	f7ff ff0e 	bl	800d168 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d352:	f043 0210 	orr.w	r2, r3, #16
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d35c:	6978      	ldr	r0, [r7, #20]
 800d35e:	f7ff f9fb 	bl	800c758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d362:	bf00      	nop
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b084      	sub	sp, #16
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d376:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f7ff f9e5 	bl	800c758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d38e:	bf00      	nop
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b088      	sub	sp, #32
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	e853 3f00 	ldrex	r3, [r3]
 800d3aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	61bb      	str	r3, [r7, #24]
 800d3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6979      	ldr	r1, [r7, #20]
 800d3c2:	69ba      	ldr	r2, [r7, #24]
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e6      	bne.n	800d39e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7f5 ff46 	bl	8003270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3e4:	bf00      	nop
 800d3e6:	3720      	adds	r7, #32
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e058      	b.n	800d4b6 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7f7 f9de 	bl	80047d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2224      	movs	r2, #36	; 0x24
 800d420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f022 0201 	bic.w	r2, r2, #1
 800d432:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7ff f9a5 	bl	800c784 <UART_SetConfig>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d101      	bne.n	800d444 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d440:	2301      	movs	r3, #1
 800d442:	e038      	b.n	800d4b6 <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f7ff fc95 	bl	800cd7c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	689a      	ldr	r2, [r3, #8]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d460:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	430a      	orrs	r2, r1
 800d474:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	055b      	lsls	r3, r3, #21
 800d47a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	041b      	lsls	r3, r3, #16
 800d480:	697a      	ldr	r2, [r7, #20]
 800d482:	4313      	orrs	r3, r2
 800d484:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800d490:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	6812      	ldr	r2, [r2, #0]
 800d498:	6979      	ldr	r1, [r7, #20]
 800d49a:	430b      	orrs	r3, r1
 800d49c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f042 0201 	orr.w	r2, r2, #1
 800d4ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff fd06 	bl	800cec0 <UART_CheckIdleState>
 800d4b4:	4603      	mov	r3, r0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d4da:	bf00      	nop
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b083      	sub	sp, #12
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d4ee:	bf00      	nop
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d101      	bne.n	800d510 <HAL_UARTEx_EnableFifoMode+0x16>
 800d50c:	2302      	movs	r3, #2
 800d50e:	e02b      	b.n	800d568 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2224      	movs	r2, #36	; 0x24
 800d51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0201 	bic.w	r2, r2, #1
 800d536:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d53e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f8c3 	bl	800d6dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2220      	movs	r2, #32
 800d55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d101      	bne.n	800d586 <HAL_UARTEx_DisableFifoMode+0x16>
 800d582:	2302      	movs	r3, #2
 800d584:	e027      	b.n	800d5d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2224      	movs	r2, #36	; 0x24
 800d592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f022 0201 	bic.w	r2, r2, #1
 800d5ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d5b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2220      	movs	r2, #32
 800d5c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b084      	sub	sp, #16
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d101      	bne.n	800d5fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	e02d      	b.n	800d656 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2224      	movs	r2, #36	; 0x24
 800d606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f022 0201 	bic.w	r2, r2, #1
 800d620:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	430a      	orrs	r2, r1
 800d634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f850 	bl	800d6dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2220      	movs	r2, #32
 800d648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d101      	bne.n	800d676 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d672:	2302      	movs	r3, #2
 800d674:	e02d      	b.n	800d6d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2224      	movs	r2, #36	; 0x24
 800d682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f022 0201 	bic.w	r2, r2, #1
 800d69c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f812 	bl	800d6dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d108      	bne.n	800d6fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d6fc:	e031      	b.n	800d762 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d6fe:	2308      	movs	r3, #8
 800d700:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d702:	2308      	movs	r3, #8
 800d704:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	0e5b      	lsrs	r3, r3, #25
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	f003 0307 	and.w	r3, r3, #7
 800d714:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	0f5b      	lsrs	r3, r3, #29
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	f003 0307 	and.w	r3, r3, #7
 800d724:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d726:	7bbb      	ldrb	r3, [r7, #14]
 800d728:	7b3a      	ldrb	r2, [r7, #12]
 800d72a:	4911      	ldr	r1, [pc, #68]	; (800d770 <UARTEx_SetNbDataToProcess+0x94>)
 800d72c:	5c8a      	ldrb	r2, [r1, r2]
 800d72e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d732:	7b3a      	ldrb	r2, [r7, #12]
 800d734:	490f      	ldr	r1, [pc, #60]	; (800d774 <UARTEx_SetNbDataToProcess+0x98>)
 800d736:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d738:	fb93 f3f2 	sdiv	r3, r3, r2
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d744:	7bfb      	ldrb	r3, [r7, #15]
 800d746:	7b7a      	ldrb	r2, [r7, #13]
 800d748:	4909      	ldr	r1, [pc, #36]	; (800d770 <UARTEx_SetNbDataToProcess+0x94>)
 800d74a:	5c8a      	ldrb	r2, [r1, r2]
 800d74c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d750:	7b7a      	ldrb	r2, [r7, #13]
 800d752:	4908      	ldr	r1, [pc, #32]	; (800d774 <UARTEx_SetNbDataToProcess+0x98>)
 800d754:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d756:	fb93 f3f2 	sdiv	r3, r3, r2
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d762:	bf00      	nop
 800d764:	3714      	adds	r7, #20
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop
 800d770:	080153c4 	.word	0x080153c4
 800d774:	080153cc 	.word	0x080153cc

0800d778 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800d782:	2300      	movs	r3, #0
 800d784:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	2b05      	cmp	r3, #5
 800d78c:	d122      	bne.n	800d7d4 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	3301      	adds	r3, #1
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	b29b      	uxth	r3, r3
 800d796:	021b      	lsls	r3, r3, #8
 800d798:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3302      	adds	r3, #2
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	89bb      	ldrh	r3, [r7, #12]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d7a8:	89bb      	ldrh	r3, [r7, #12]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF], usRegAddress, 1, MB_REG_WRITE );
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	1cd8      	adds	r0, r3, #3
 800d7b2:	89b9      	ldrh	r1, [r7, #12]
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f7f5 fc0c 	bl	8002fd4 <eMBRegHoldingCB>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	72fb      	strb	r3, [r7, #11]

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800d7c0:	7afb      	ldrb	r3, [r7, #11]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d008      	beq.n	800d7d8 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800d7c6:	7afb      	ldrb	r3, [r7, #11]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 fa09 	bl	800dbe0 <prveMBError2Exception>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73fb      	strb	r3, [r7, #15]
 800d7d2:	e001      	b.n	800d7d8 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b084      	sub	sp, #16
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	2b05      	cmp	r3, #5
 800d7f6:	d946      	bls.n	800d886 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	021b      	lsls	r3, r3, #8
 800d802:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3302      	adds	r3, #2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	89bb      	ldrh	r3, [r7, #12]
 800d80e:	4313      	orrs	r3, r2
 800d810:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d812:	89bb      	ldrh	r3, [r7, #12]
 800d814:	3301      	adds	r3, #1
 800d816:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	3303      	adds	r3, #3
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	021b      	lsls	r3, r3, #8
 800d822:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	3304      	adds	r3, #4
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	897b      	ldrh	r3, [r7, #10]
 800d82e:	4313      	orrs	r3, r2
 800d830:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	795b      	ldrb	r3, [r3, #5]
 800d836:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800d838:	897b      	ldrh	r3, [r7, #10]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d020      	beq.n	800d880 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 800d83e:	897b      	ldrh	r3, [r7, #10]
 800d840:	2b78      	cmp	r3, #120	; 0x78
 800d842:	d81d      	bhi.n	800d880 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800d844:	897b      	ldrh	r3, [r7, #10]
 800d846:	b2db      	uxtb	r3, r3
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800d84c:	7a7a      	ldrb	r2, [r7, #9]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d116      	bne.n	800d880 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],  usRegAddress, usRegCount, MB_REG_WRITE );
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	1d98      	adds	r0, r3, #6
 800d856:	897a      	ldrh	r2, [r7, #10]
 800d858:	89b9      	ldrh	r1, [r7, #12]
 800d85a:	2301      	movs	r3, #1
 800d85c:	f7f5 fbba 	bl	8002fd4 <eMBRegHoldingCB>
 800d860:	4603      	mov	r3, r0
 800d862:	723b      	strb	r3, [r7, #8]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d864:	7a3b      	ldrb	r3, [r7, #8]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d006      	beq.n	800d878 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d86a:	7a3b      	ldrb	r3, [r7, #8]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 f9b7 	bl	800dbe0 <prveMBError2Exception>
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800d876:	e008      	b.n	800d88a <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2205      	movs	r2, #5
 800d87c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d87e:	e004      	b.n	800d88a <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d880:	2303      	movs	r3, #3
 800d882:	73fb      	strb	r3, [r7, #15]
 800d884:	e001      	b.n	800d88a <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d886:	2303      	movs	r3, #3
 800d888:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	2b05      	cmp	r3, #5
 800d8a8:	d15c      	bne.n	800d964 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	021b      	lsls	r3, r3, #8
 800d8b4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	3302      	adds	r3, #2
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	8abb      	ldrh	r3, [r7, #20]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800d8c4:	8abb      	ldrh	r3, [r7, #20]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	3303      	adds	r3, #3
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	021b      	lsls	r3, r3, #8
 800d8d4:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800d8de:	8a7b      	ldrh	r3, [r7, #18]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d03c      	beq.n	800d95e <eMBFuncReadHoldingRegister+0xca>
 800d8e4:	8a7b      	ldrh	r3, [r7, #18]
 800d8e6:	2b7d      	cmp	r3, #125	; 0x7d
 800d8e8:	d839      	bhi.n	800d95e <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	1c5a      	adds	r2, r3, #1
 800d8f8:	60fa      	str	r2, [r7, #12]
 800d8fa:	2203      	movs	r2, #3
 800d8fc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	3301      	adds	r3, #1
 800d904:	b29a      	uxth	r2, r3
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800d90a:	8a7b      	ldrh	r3, [r7, #18]
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	1c59      	adds	r1, r3, #1
 800d912:	60f9      	str	r1, [r7, #12]
 800d914:	0052      	lsls	r2, r2, #1
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	3301      	adds	r3, #1
 800d920:	b29a      	uxth	r2, r3
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800d926:	8a7a      	ldrh	r2, [r7, #18]
 800d928:	8ab9      	ldrh	r1, [r7, #20]
 800d92a:	2300      	movs	r3, #0
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f7f5 fb51 	bl	8002fd4 <eMBRegHoldingCB>
 800d932:	4603      	mov	r3, r0
 800d934:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d936:	7afb      	ldrb	r3, [r7, #11]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d006      	beq.n	800d94a <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d93c:	7afb      	ldrb	r3, [r7, #11]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 f94e 	bl	800dbe0 <prveMBError2Exception>
 800d944:	4603      	mov	r3, r0
 800d946:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d948:	e00e      	b.n	800d968 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	881a      	ldrh	r2, [r3, #0]
 800d94e:	8a7b      	ldrh	r3, [r7, #18]
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	b29b      	uxth	r3, r3
 800d954:	4413      	add	r3, r2
 800d956:	b29a      	uxth	r2, r3
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d95c:	e004      	b.n	800d968 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d95e:	2303      	movs	r3, #3
 800d960:	75fb      	strb	r3, [r7, #23]
 800d962:	e001      	b.n	800d968 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d964:	2303      	movs	r3, #3
 800d966:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800d968:	7dfb      	ldrb	r3, [r7, #23]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b086      	sub	sp, #24
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d97c:	2300      	movs	r3, #0
 800d97e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	2b09      	cmp	r3, #9
 800d986:	f240 8099 	bls.w	800dabc <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3301      	adds	r3, #1
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	b29b      	uxth	r3, r3
 800d992:	021b      	lsls	r3, r3, #8
 800d994:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	3302      	adds	r3, #2
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	8abb      	ldrh	r3, [r7, #20]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800d9a4:	8abb      	ldrh	r3, [r7, #20]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3303      	adds	r3, #3
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	8a7b      	ldrh	r3, [r7, #18]
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3305      	adds	r3, #5
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	021b      	lsls	r3, r3, #8
 800d9ce:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3306      	adds	r3, #6
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	8a3b      	ldrh	r3, [r7, #16]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800d9de:	8a3b      	ldrh	r3, [r7, #16]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3307      	adds	r3, #7
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	021b      	lsls	r3, r3, #8
 800d9ee:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3308      	adds	r3, #8
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	89fb      	ldrh	r3, [r7, #14]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	7a5b      	ldrb	r3, [r3, #9]
 800da02:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800da04:	8a7b      	ldrh	r3, [r7, #18]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d056      	beq.n	800dab8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800da0a:	8a7b      	ldrh	r3, [r7, #18]
 800da0c:	2b7d      	cmp	r3, #125	; 0x7d
 800da0e:	d853      	bhi.n	800dab8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800da10:	89fb      	ldrh	r3, [r7, #14]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d050      	beq.n	800dab8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800da16:	89fb      	ldrh	r3, [r7, #14]
 800da18:	2b79      	cmp	r3, #121	; 0x79
 800da1a:	d84d      	bhi.n	800dab8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800da1c:	89fb      	ldrh	r3, [r7, #14]
 800da1e:	005a      	lsls	r2, r3, #1
 800da20:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800da22:	429a      	cmp	r2, r3
 800da24:	d148      	bne.n	800dab8 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF], usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f103 000a 	add.w	r0, r3, #10
 800da2c:	89fa      	ldrh	r2, [r7, #14]
 800da2e:	8a39      	ldrh	r1, [r7, #16]
 800da30:	2301      	movs	r3, #1
 800da32:	f7f5 facf 	bl	8002fd4 <eMBRegHoldingCB>
 800da36:	4603      	mov	r3, r0
 800da38:	75bb      	strb	r3, [r7, #22]

            if( eRegStatus == MB_ENOERR )
 800da3a:	7dbb      	ldrb	r3, [r7, #22]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d131      	bne.n	800daa4 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2200      	movs	r2, #0
 800da48:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	1c5a      	adds	r2, r3, #1
 800da4e:	60ba      	str	r2, [r7, #8]
 800da50:	2217      	movs	r2, #23
 800da52:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	881b      	ldrh	r3, [r3, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800da60:	8a7b      	ldrh	r3, [r7, #18]
 800da62:	b2da      	uxtb	r2, r3
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	1c59      	adds	r1, r3, #1
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	0052      	lsls	r2, r2, #1
 800da6c:	b2d2      	uxtb	r2, r2
 800da6e:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	881b      	ldrh	r3, [r3, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	b29a      	uxth	r2, r3
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800da7c:	8a7a      	ldrh	r2, [r7, #18]
 800da7e:	8ab9      	ldrh	r1, [r7, #20]
 800da80:	2300      	movs	r3, #0
 800da82:	68b8      	ldr	r0, [r7, #8]
 800da84:	f7f5 faa6 	bl	8002fd4 <eMBRegHoldingCB>
 800da88:	4603      	mov	r3, r0
 800da8a:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 800da8c:	7dbb      	ldrb	r3, [r7, #22]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d108      	bne.n	800daa4 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	881a      	ldrh	r2, [r3, #0]
 800da96:	8a7b      	ldrh	r3, [r7, #18]
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4413      	add	r3, r2
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800daa4:	7dbb      	ldrb	r3, [r7, #22]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d008      	beq.n	800dabc <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800daaa:	7dbb      	ldrb	r3, [r7, #22]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f897 	bl	800dbe0 <prveMBError2Exception>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800dab6:	e001      	b.n	800dabc <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800dab8:	2303      	movs	r3, #3
 800daba:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b086      	sub	sp, #24
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800dad0:	2300      	movs	r3, #0
 800dad2:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	2b05      	cmp	r3, #5
 800dada:	d15d      	bne.n	800db98 <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	3301      	adds	r3, #1
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	021b      	lsls	r3, r3, #8
 800dae6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	3302      	adds	r3, #2
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	b29a      	uxth	r2, r3
 800daf0:	8abb      	ldrh	r3, [r7, #20]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800daf6:	8abb      	ldrh	r3, [r7, #20]
 800daf8:	3301      	adds	r3, #1
 800dafa:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3303      	adds	r3, #3
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	b29b      	uxth	r3, r3
 800db04:	021b      	lsls	r3, r3, #8
 800db06:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3304      	adds	r3, #4
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	b29a      	uxth	r2, r3
 800db10:	8a7b      	ldrh	r3, [r7, #18]
 800db12:	4313      	orrs	r3, r2
 800db14:	827b      	strh	r3, [r7, #18]

        /* Проверьте, является ли допустимым количество регистров для чтения.
         * Если нет, верните исключение недопустимого значения данных Modbus.
         */
        if( ( usRegCount >= 1 ) && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800db16:	8a7b      	ldrh	r3, [r7, #18]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d03a      	beq.n	800db92 <eMBFuncReadInputRegister+0xcc>
 800db1c:	8a7b      	ldrh	r3, [r7, #18]
 800db1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db22:	d236      	bcs.n	800db92 <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2200      	movs	r2, #0
 800db2c:	801a      	strh	r2, [r3, #0]

            /* Первый байт содержит код функции. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	60fa      	str	r2, [r7, #12]
 800db34:	2204      	movs	r2, #4
 800db36:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	3301      	adds	r3, #1
 800db3e:	b29a      	uxth	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	801a      	strh	r2, [r3, #0]

            /* Второй байт в ответе содержит количество байтов. */
            /////////////////////////////////////////////////////// МОЁ изменение ///////////////
            // *pucFrameCur++ =  ( UCHAR )( usRegCount * 2 );
            // usRegCount =1; // МОЁ изменение, всегда будет 1 пакет данных, пакет состоит из 40_WORD это значит 80 байт
            *pucFrameCur++ = 80; // МОЁ изменение, все коментарии почему , в   main.c => eMBRegInputCB()
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	60fa      	str	r2, [r7, #12]
 800db4a:	2250      	movs	r2, #80	; 0x50
 800db4c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	b29a      	uxth	r2, r3
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	801a      	strh	r2, [r3, #0]

            eRegStatus = eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800db5a:	8a7a      	ldrh	r2, [r7, #18]
 800db5c:	8abb      	ldrh	r3, [r7, #20]
 800db5e:	4619      	mov	r1, r3
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f7f5 f9df 	bl	8002f24 <eMBRegInputCB>
 800db66:	4603      	mov	r3, r0
 800db68:	72fb      	strb	r3, [r7, #11]

            /* Если произошла ошибка, преобразуйте ее в исключение Modbus. */
            if( eRegStatus != MB_ENOERR )
 800db6a:	7afb      	ldrb	r3, [r7, #11]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d006      	beq.n	800db7e <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800db70:	7afb      	ldrb	r3, [r7, #11]
 800db72:	4618      	mov	r0, r3
 800db74:	f000 f834 	bl	800dbe0 <prveMBError2Exception>
 800db78:	4603      	mov	r3, r0
 800db7a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800db7c:	e00e      	b.n	800db9c <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	881a      	ldrh	r2, [r3, #0]
 800db82:	8a7b      	ldrh	r3, [r7, #18]
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	b29b      	uxth	r3, r3
 800db88:	4413      	add	r3, r2
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800db90:	e004      	b.n	800db9c <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800db92:	2303      	movs	r3, #3
 800db94:	75fb      	strb	r3, [r7, #23]
 800db96:	e001      	b.n	800db9c <eMBFuncReadInputRegister+0xd6>
        }
    }
    else
    {
        /* Не может быть допустимым запросом на чтение входного регистра, поскольку длина указана неверно. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800db98:	2303      	movs	r3, #3
 800db9a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800db9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	4a08      	ldr	r2, [pc, #32]	; (800dbd8 <eMBFuncReportSlaveID+0x30>)
 800dbb8:	8812      	ldrh	r2, [r2, #0]
 800dbba:	4908      	ldr	r1, [pc, #32]	; (800dbdc <eMBFuncReportSlaveID+0x34>)
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f001 fc05 	bl	800f3cc <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800dbc2:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <eMBFuncReportSlaveID+0x30>)
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	2001244c 	.word	0x2001244c
 800dbdc:	2001242c 	.word	0x2001242c

0800dbe0 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	2b07      	cmp	r3, #7
 800dbee:	d00c      	beq.n	800dc0a <prveMBError2Exception+0x2a>
 800dbf0:	2b07      	cmp	r3, #7
 800dbf2:	dc0d      	bgt.n	800dc10 <prveMBError2Exception+0x30>
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <prveMBError2Exception+0x1e>
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d003      	beq.n	800dc04 <prveMBError2Exception+0x24>
 800dbfc:	e008      	b.n	800dc10 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]
            break;
 800dc02:	e008      	b.n	800dc16 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800dc04:	2302      	movs	r3, #2
 800dc06:	73fb      	strb	r3, [r7, #15]
            break;
 800dc08:	e005      	b.n	800dc16 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800dc0a:	2306      	movs	r3, #6
 800dc0c:	73fb      	strb	r3, [r7, #15]
            break;
 800dc0e:	e002      	b.n	800dc16 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800dc10:	2304      	movs	r3, #4
 800dc12:	73fb      	strb	r3, [r7, #15]
            break;
 800dc14:	bf00      	nop
    }

    return eStatus;
 800dc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	603b      	str	r3, [r7, #0]
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	71fb      	strb	r3, [r7, #7]
 800dc30:	460b      	mov	r3, r1
 800dc32:	71bb      	strb	r3, [r7, #6]
 800dc34:	4613      	mov	r3, r2
 800dc36:	717b      	strb	r3, [r7, #5]
    /* проверка предварительных условий */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||  ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800dc38:	79bb      	ldrb	r3, [r7, #6]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d005      	beq.n	800dc4a <eMBInit+0x26>
 800dc3e:	79bb      	ldrb	r3, [r7, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <eMBInit+0x26>
 800dc44:	79bb      	ldrb	r3, [r7, #6]
 800dc46:	2bf7      	cmp	r3, #247	; 0xf7
 800dc48:	d901      	bls.n	800dc4e <eMBInit+0x2a>
    	{ ucSlaveAddress = 7;  } // по умолчанию такой адрес будет, а потому что
 800dc4a:	2307      	movs	r3, #7
 800dc4c:	71bb      	strb	r3, [r7, #6]

    ucMBAddress = ucSlaveAddress; // раскинули адрес по этому файлу
 800dc4e:	4a08      	ldr	r2, [pc, #32]	; (800dc70 <eMBInit+0x4c>)
 800dc50:	79bb      	ldrb	r3, [r7, #6]
 800dc52:	7013      	strb	r3, [r2, #0]
    timeout_Tim6_50us = 35; // на нашей скорости здесь будет только такой таймаут //////////eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity ); // здесь остался только инит времени тайаута TIM6
 800dc54:	4b07      	ldr	r3, [pc, #28]	; (800dc74 <eMBInit+0x50>)
 800dc56:	2223      	movs	r2, #35	; 0x23
 800dc58:	801a      	strh	r2, [r3, #0]

    xMBPortEventInit(  ); // сброс очереди событий  ==> в файле portevent.c
 800dc5a:	f000 f8e9 	bl	800de30 <xMBPortEventInit>
    eMBState = STATE_DISABLED;
 800dc5e:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <eMBInit+0x54>)
 800dc60:	2201      	movs	r2, #1
 800dc62:	701a      	strb	r2, [r3, #0]

    return MB_ENOERR;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	2001244e 	.word	0x2001244e
 800dc74:	2000060c 	.word	0x2000060c
 800dc78:	20000058 	.word	0x20000058

0800dc7c <eMBEnable>:



eMBErrorCode
eMBEnable( void )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0
        /* Activate the protocol stack. */
    ENTER_CRITICAL_SECTION(  );
 800dc80:	f7f3 ff28 	bl	8001ad4 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800dc84:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <eMBEnable+0x2c>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE ); // перевод порта в режим приема
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	f000 f911 	bl	800deb4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  ); // старт таймера TIM6 и сброс счетчика в ноль
 800dc92:	f000 f96b 	bl	800df6c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800dc96:	f7f3 ff2d 	bl	8001af4 <__critical_exit>

    eMBState = STATE_ENABLED;
 800dc9a:	4b04      	ldr	r3, [pc, #16]	; (800dcac <eMBEnable+0x30>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	200005e8 	.word	0x200005e8
 800dcac:	20000058 	.word	0x20000058

0800dcb0 <eMBPoll>:


eMBErrorCode
eMBPoll( void )
{
 800dcb0:	b590      	push	{r4, r7, lr}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    BOOL  flag_event = xMBPortEventGet( &eEvent );
 800dcba:	1c7b      	adds	r3, r7, #1
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 f8db 	bl	800de78 <xMBPortEventGet>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	70bb      	strb	r3, [r7, #2]

    /* Проверьте, есть ли доступное событие.
     * Если нет, верните управление вызывающему абоненту.
     * В противном случае мы будем обрабатывать это событие. */

    if( flag_event == TRUE ) // если там в файле portevent.c  кемто чемто сформировано событие, тО сейчас мы его обработаем
 800dcc6:	78bb      	ldrb	r3, [r7, #2]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	f040 8096 	bne.w	800ddfa <eMBPoll+0x14a>
    {
    	count_eMBPool=0;
 800dcce:	4b50      	ldr	r3, [pc, #320]	; (800de10 <eMBPoll+0x160>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	701a      	strb	r2, [r3, #0]
    	//printf("eMBPoll-STARTevent _eMBState=%d, _eEvent=%d \n", eMBState, eEvent);
        switch ( eEvent )
 800dcd4:	787b      	ldrb	r3, [r7, #1]
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	f200 8094 	bhi.w	800de04 <eMBPoll+0x154>
 800dcdc:	a201      	add	r2, pc, #4	; (adr r2, 800dce4 <eMBPoll+0x34>)
 800dcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce2:	bf00      	nop
 800dce4:	0800de05 	.word	0x0800de05
 800dce8:	0800dcf5 	.word	0x0800dcf5
 800dcec:	0800dd25 	.word	0x0800dd25
 800dcf0:	0800de05 	.word	0x0800de05
        case EV_READY:
        	//printf( "eMBPoll eEvent <= EV_READY \n");
            break;

        case EV_FRAME_RECEIVED:
            eStatus = eMBRTUReceive( &ucRcvAddress, &ucMBFrame, &usLength );
 800dcf4:	4a47      	ldr	r2, [pc, #284]	; (800de14 <eMBPoll+0x164>)
 800dcf6:	4948      	ldr	r1, [pc, #288]	; (800de18 <eMBPoll+0x168>)
 800dcf8:	4848      	ldr	r0, [pc, #288]	; (800de1c <eMBPoll+0x16c>)
 800dcfa:	f000 f989 	bl	800e010 <eMBRTUReceive>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800dd02:	78fb      	ldrb	r3, [r7, #3]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d17a      	bne.n	800ddfe <eMBPoll+0x14e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800dd08:	4b44      	ldr	r3, [pc, #272]	; (800de1c <eMBPoll+0x16c>)
 800dd0a:	781a      	ldrb	r2, [r3, #0]
 800dd0c:	4b44      	ldr	r3, [pc, #272]	; (800de20 <eMBPoll+0x170>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d003      	beq.n	800dd1c <eMBPoll+0x6c>
 800dd14:	4b41      	ldr	r3, [pc, #260]	; (800de1c <eMBPoll+0x16c>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d170      	bne.n	800ddfe <eMBPoll+0x14e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );  // значит фрейм принят, адрес норм, формируем событие - начало обработки
 800dd1c:	2002      	movs	r0, #2
 800dd1e:	f000 f895 	bl	800de4c <xMBPortEventPost>
                }
            }
            break;
 800dd22:	e06c      	b.n	800ddfe <eMBPoll+0x14e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800dd24:	4b3c      	ldr	r3, [pc, #240]	; (800de18 <eMBPoll+0x168>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	4b3e      	ldr	r3, [pc, #248]	; (800de24 <eMBPoll+0x174>)
 800dd2c:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800dd2e:	4b3e      	ldr	r3, [pc, #248]	; (800de28 <eMBPoll+0x178>)
 800dd30:	2201      	movs	r2, #1
 800dd32:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800dd34:	2300      	movs	r3, #0
 800dd36:	607b      	str	r3, [r7, #4]
 800dd38:	e01f      	b.n	800dd7a <eMBPoll+0xca>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800dd3a:	4a3c      	ldr	r2, [pc, #240]	; (800de2c <eMBPoll+0x17c>)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d01d      	beq.n	800dd82 <eMBPoll+0xd2>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800dd46:	4a39      	ldr	r2, [pc, #228]	; (800de2c <eMBPoll+0x17c>)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dd4e:	4b35      	ldr	r3, [pc, #212]	; (800de24 <eMBPoll+0x174>)
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d10e      	bne.n	800dd74 <eMBPoll+0xc4>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800dd56:	4a35      	ldr	r2, [pc, #212]	; (800de2c <eMBPoll+0x17c>)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	4413      	add	r3, r2
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	4a2d      	ldr	r2, [pc, #180]	; (800de18 <eMBPoll+0x168>)
 800dd62:	6812      	ldr	r2, [r2, #0]
 800dd64:	492b      	ldr	r1, [pc, #172]	; (800de14 <eMBPoll+0x164>)
 800dd66:	4610      	mov	r0, r2
 800dd68:	4798      	blx	r3
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4b2e      	ldr	r3, [pc, #184]	; (800de28 <eMBPoll+0x178>)
 800dd70:	701a      	strb	r2, [r3, #0]
                    break;
 800dd72:	e007      	b.n	800dd84 <eMBPoll+0xd4>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3301      	adds	r3, #1
 800dd78:	607b      	str	r3, [r7, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b0f      	cmp	r3, #15
 800dd7e:	dddc      	ble.n	800dd3a <eMBPoll+0x8a>
 800dd80:	e000      	b.n	800dd84 <eMBPoll+0xd4>
                    break;
 800dd82:	bf00      	nop
                }
            }
            //printf("eMBPoll eEvent==EV_EXECUTE  ucFunctionCode=%d \n", ucFunctionCode);

            /* Если запрос не был отправлен на широковещательный адрес, мы возвращаем ответ. !!!!!!!! ВОТ ЗДЕСЬ передача !!!!!!!!!!  */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800dd84:	4b25      	ldr	r3, [pc, #148]	; (800de1c <eMBPoll+0x16c>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d03a      	beq.n	800de02 <eMBPoll+0x152>
            {
                if( eException != MB_EX_NONE )
 800dd8c:	4b26      	ldr	r3, [pc, #152]	; (800de28 <eMBPoll+0x178>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d01d      	beq.n	800ddd0 <eMBPoll+0x120>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800dd94:	4b1f      	ldr	r3, [pc, #124]	; (800de14 <eMBPoll+0x164>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800dd9a:	4b22      	ldr	r3, [pc, #136]	; (800de24 <eMBPoll+0x174>)
 800dd9c:	781a      	ldrb	r2, [r3, #0]
 800dd9e:	4b1e      	ldr	r3, [pc, #120]	; (800de18 <eMBPoll+0x168>)
 800dda0:	6819      	ldr	r1, [r3, #0]
 800dda2:	4b1c      	ldr	r3, [pc, #112]	; (800de14 <eMBPoll+0x164>)
 800dda4:	881b      	ldrh	r3, [r3, #0]
 800dda6:	1c58      	adds	r0, r3, #1
 800dda8:	b284      	uxth	r4, r0
 800ddaa:	481a      	ldr	r0, [pc, #104]	; (800de14 <eMBPoll+0x164>)
 800ddac:	8004      	strh	r4, [r0, #0]
 800ddae:	440b      	add	r3, r1
 800ddb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ddb4:	b2d2      	uxtb	r2, r2
 800ddb6:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800ddb8:	4b17      	ldr	r3, [pc, #92]	; (800de18 <eMBPoll+0x168>)
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	4b15      	ldr	r3, [pc, #84]	; (800de14 <eMBPoll+0x164>)
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	1c59      	adds	r1, r3, #1
 800ddc2:	b288      	uxth	r0, r1
 800ddc4:	4913      	ldr	r1, [pc, #76]	; (800de14 <eMBPoll+0x164>)
 800ddc6:	8008      	strh	r0, [r1, #0]
 800ddc8:	4413      	add	r3, r2
 800ddca:	4a17      	ldr	r2, [pc, #92]	; (800de28 <eMBPoll+0x178>)
 800ddcc:	7812      	ldrb	r2, [r2, #0]
 800ddce:	701a      	strb	r2, [r3, #0]
                }

                // МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////
                if (ucMBFrame[MB_PDU_FUNC_OFF] == 4) { usLength =82; }// МОЁ изменение ///////////////// МОЁ изменение ///////////////
 800ddd0:	4b11      	ldr	r3, [pc, #68]	; (800de18 <eMBPoll+0x168>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	d102      	bne.n	800dde0 <eMBPoll+0x130>
 800ddda:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <eMBPoll+0x164>)
 800dddc:	2252      	movs	r2, #82	; 0x52
 800ddde:	801a      	strh	r2, [r3, #0]
                eStatus = eMBRTUSend( ucMBAddress, ucMBFrame, usLength );
 800dde0:	4b0f      	ldr	r3, [pc, #60]	; (800de20 <eMBPoll+0x170>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	4b0c      	ldr	r3, [pc, #48]	; (800de18 <eMBPoll+0x168>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a0a      	ldr	r2, [pc, #40]	; (800de14 <eMBPoll+0x164>)
 800ddec:	8812      	ldrh	r2, [r2, #0]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	f000 f958 	bl	800e0a4 <eMBRTUSend>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800ddf8:	e003      	b.n	800de02 <eMBPoll+0x152>

        case EV_FRAME_SENT:
            break;
        }
    }
 800ddfa:	bf00      	nop
 800ddfc:	e002      	b.n	800de04 <eMBPoll+0x154>
            break;
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <eMBPoll+0x154>
            break;
 800de02:	bf00      	nop
    return MB_ENOERR;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd90      	pop	{r4, r7, pc}
 800de0e:	bf00      	nop
 800de10:	2001244f 	.word	0x2001244f
 800de14:	20012458 	.word	0x20012458
 800de18:	20012454 	.word	0x20012454
 800de1c:	20012450 	.word	0x20012450
 800de20:	2001244e 	.word	0x2001244e
 800de24:	2001245a 	.word	0x2001245a
 800de28:	2001245b 	.word	0x2001245b
 800de2c:	2000005c 	.word	0x2000005c

0800de30 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800de30:	b480      	push	{r7}
 800de32:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800de34:	4b04      	ldr	r3, [pc, #16]	; (800de48 <xMBPortEventInit+0x18>)
 800de36:	2200      	movs	r2, #0
 800de38:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800de3a:	2301      	movs	r3, #1
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	2001245d 	.word	0x2001245d

0800de4c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800de56:	4b06      	ldr	r3, [pc, #24]	; (800de70 <xMBPortEventPost+0x24>)
 800de58:	2201      	movs	r2, #1
 800de5a:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800de5c:	4a05      	ldr	r2, [pc, #20]	; (800de74 <xMBPortEventPost+0x28>)
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800de62:	2301      	movs	r3, #1
}
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	2001245d 	.word	0x2001245d
 800de74:	2001245c 	.word	0x2001245c

0800de78 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800de80:	2300      	movs	r3, #0
 800de82:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 800de84:	4b09      	ldr	r3, [pc, #36]	; (800deac <xMBPortEventGet+0x34>)
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d008      	beq.n	800de9e <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800de8c:	4b08      	ldr	r3, [pc, #32]	; (800deb0 <xMBPortEventGet+0x38>)
 800de8e:	781a      	ldrb	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 800de94:	4b05      	ldr	r3, [pc, #20]	; (800deac <xMBPortEventGet+0x34>)
 800de96:	2200      	movs	r2, #0
 800de98:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800de9a:	2301      	movs	r3, #1
 800de9c:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	2001245d 	.word	0x2001245d
 800deb0:	2001245c 	.word	0x2001245c

0800deb4 <vMBPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/
extern	UART_HandleTypeDef * adr_huart_MB;
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	4603      	mov	r3, r0
 800debc:	460a      	mov	r2, r1
 800debe:	71fb      	strb	r3, [r7, #7]
 800dec0:	4613      	mov	r3, r2
 800dec2:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
    if(xRxEnable)
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00a      	beq.n	800dee0 <vMBPortSerialEnable+0x2c>
  {
    __HAL_UART_ENABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800deca:	4b15      	ldr	r3, [pc, #84]	; (800df20 <vMBPortSerialEnable+0x6c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4b13      	ldr	r3, [pc, #76]	; (800df20 <vMBPortSerialEnable+0x6c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f042 0220 	orr.w	r2, r2, #32
 800dedc:	601a      	str	r2, [r3, #0]
 800dede:	e009      	b.n	800def4 <vMBPortSerialEnable+0x40>
  }
  else
  {
    __HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800dee0:	4b0f      	ldr	r3, [pc, #60]	; (800df20 <vMBPortSerialEnable+0x6c>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	4b0d      	ldr	r3, [pc, #52]	; (800df20 <vMBPortSerialEnable+0x6c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f022 0220 	bic.w	r2, r2, #32
 800def2:	601a      	str	r2, [r3, #0]
  }

  if(xTxEnable)
 800def4:	79bb      	ldrb	r3, [r7, #6]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d007      	beq.n	800df0a <vMBPortSerialEnable+0x56>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800defa:	2201      	movs	r2, #1
 800defc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df04:	f7f9 fb0e 	bl	8007524 <HAL_GPIO_WritePin>
  else
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    //__HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_TXE);
  }
}
 800df08:	e006      	b.n	800df18 <vMBPortSerialEnable+0x64>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800df0a:	2200      	movs	r2, #0
 800df0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df14:	f7f9 fb06 	bl	8007524 <HAL_GPIO_WritePin>
}
 800df18:	bf00      	nop
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	20000610 	.word	0x20000610

0800df24 <xMBPortSerialGetByte>:
      return TRUE;
}

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(adr_huart_MB->Init.Parity == UART_PARITY_NONE)
 800df2c:	4b0e      	ldr	r3, [pc, #56]	; (800df68 <xMBPortSerialGetByte+0x44>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d107      	bne.n	800df46 <xMBPortSerialGetByte+0x22>
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x00FF);
 800df36:	4b0c      	ldr	r3, [pc, #48]	; (800df68 <xMBPortSerialGetByte+0x44>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	701a      	strb	r2, [r3, #0]
 800df44:	e009      	b.n	800df5a <xMBPortSerialGetByte+0x36>
    }
    else
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x007F);
 800df46:	4b08      	ldr	r3, [pc, #32]	; (800df68 <xMBPortSerialGetByte+0x44>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df54:	b2da      	uxtb	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	701a      	strb	r2, [r3, #0]
    }
    return TRUE;
 800df5a:	2301      	movs	r3, #1
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	20000610 	.word	0x20000610

0800df6c <vMBPortTimersEnable>:
extern uint16_t counter_Tim6_MB ;
/* ----------------------- Start implementation -----------------------------*/

inline void
vMBPortTimersEnable(  )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	af00      	add	r7, sp, #0
	/*  Включите таймер с таймаутом, переданным xMBPortTimersInit( )  */
	/*  Если baudrate > 19200, то мы должны использовать фиксированные значения таймера usTim1Timerout50us = 1750 us.
	 *  В противном случае usTim1Timerout50us должно быть в 3,5 раза больше времени символа. */
	counter_Tim6_MB=0;
 800df70:	4b03      	ldr	r3, [pc, #12]	; (800df80 <vMBPortTimersEnable+0x14>)
 800df72:	2200      	movs	r2, #0
 800df74:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800df76:	4803      	ldr	r0, [pc, #12]	; (800df84 <vMBPortTimersEnable+0x18>)
 800df78:	f7fc f9bc 	bl	800a2f4 <HAL_TIM_Base_Start_IT>
}
 800df7c:	bf00      	nop
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	2000060e 	.word	0x2000060e
 800df84:	20012028 	.word	0x20012028

0800df88 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim6);
 800df8c:	4803      	ldr	r0, [pc, #12]	; (800df9c <vMBPortTimersDisable+0x14>)
 800df8e:	f7fc fa29 	bl	800a3e4 <HAL_TIM_Base_Stop_IT>
	counter_Tim6_MB =0;
 800df92:	4b03      	ldr	r3, [pc, #12]	; (800dfa0 <vMBPortTimersDisable+0x18>)
 800df94:	2200      	movs	r2, #0
 800df96:	801a      	strh	r2, [r3, #0]
}
 800df98:	bf00      	nop
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	20012028 	.word	0x20012028
 800dfa0:	2000060e 	.word	0x2000060e

0800dfa4 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	460b      	mov	r3, r1
 800dfae:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800dfb0:	23ff      	movs	r3, #255	; 0xff
 800dfb2:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800dfb4:	23ff      	movs	r3, #255	; 0xff
 800dfb6:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800dfb8:	e013      	b.n	800dfe2 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	607a      	str	r2, [r7, #4]
 800dfc0:	781a      	ldrb	r2, [r3, #0]
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	4053      	eors	r3, r2
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800dfca:	4a0f      	ldr	r2, [pc, #60]	; (800e008 <usMBCRC16+0x64>)
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4413      	add	r3, r2
 800dfd0:	781a      	ldrb	r2, [r3, #0]
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	4053      	eors	r3, r2
 800dfd6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800dfd8:	4a0c      	ldr	r2, [pc, #48]	; (800e00c <usMBCRC16+0x68>)
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	4413      	add	r3, r2
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800dfe2:	887b      	ldrh	r3, [r7, #2]
 800dfe4:	1e5a      	subs	r2, r3, #1
 800dfe6:	807a      	strh	r2, [r7, #2]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1e6      	bne.n	800dfba <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800dfec:	7bfb      	ldrb	r3, [r7, #15]
 800dfee:	021b      	lsls	r3, r3, #8
 800dff0:	b21a      	sxth	r2, r3
 800dff2:	7bbb      	ldrb	r3, [r7, #14]
 800dff4:	b21b      	sxth	r3, r3
 800dff6:	4313      	orrs	r3, r2
 800dff8:	b21b      	sxth	r3, r3
 800dffa:	b29b      	uxth	r3, r3
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	080153d4 	.word	0x080153d4
 800e00c:	080154d4 	.word	0x080154d4

0800e010 <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]

    eMBErrorCode    eStatus = MB_ENOERR;
 800e01c:	2300      	movs	r3, #0
 800e01e:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800e020:	f7f3 fd58 	bl	8001ad4 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800e024:	4b19      	ldr	r3, [pc, #100]	; (800e08c <eMBRTUReceive+0x7c>)
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	b29b      	uxth	r3, r3
 800e02a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e02e:	d305      	bcc.n	800e03c <eMBRTUReceive+0x2c>
 800e030:	4b17      	ldr	r3, [pc, #92]	; (800e090 <eMBRTUReceive+0x80>)
 800e032:	4a18      	ldr	r2, [pc, #96]	; (800e094 <eMBRTUReceive+0x84>)
 800e034:	2163      	movs	r1, #99	; 0x63
 800e036:	4818      	ldr	r0, [pc, #96]	; (800e098 <eMBRTUReceive+0x88>)
 800e038:	f001 f96e 	bl	800f318 <__assert_func>

    /* Length and CRC check */
    //printf("eMBRTUReceive ucRTUBuf %d %d %d %d %d %d \n", ucRTUBuf[0], ucRTUBuf[1], ucRTUBuf[2], ucRTUBuf[3], ucRTUBuf[4], ucRTUBuf[5]);
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN ) && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800e03c:	4b13      	ldr	r3, [pc, #76]	; (800e08c <eMBRTUReceive+0x7c>)
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	2b03      	cmp	r3, #3
 800e044:	d919      	bls.n	800e07a <eMBRTUReceive+0x6a>
 800e046:	4b11      	ldr	r3, [pc, #68]	; (800e08c <eMBRTUReceive+0x7c>)
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	4619      	mov	r1, r3
 800e04e:	4813      	ldr	r0, [pc, #76]	; (800e09c <eMBRTUReceive+0x8c>)
 800e050:	f7ff ffa8 	bl	800dfa4 <usMBCRC16>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10f      	bne.n	800e07a <eMBRTUReceive+0x6a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800e05a:	4b10      	ldr	r3, [pc, #64]	; (800e09c <eMBRTUReceive+0x8c>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800e064:	4b09      	ldr	r3, [pc, #36]	; (800e08c <eMBRTUReceive+0x7c>)
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	3b03      	subs	r3, #3
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	4a0a      	ldr	r2, [pc, #40]	; (800e0a0 <eMBRTUReceive+0x90>)
 800e076:	601a      	str	r2, [r3, #0]
 800e078:	e001      	b.n	800e07e <eMBRTUReceive+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 800e07a:	2305      	movs	r3, #5
 800e07c:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800e07e:	f7f3 fd39 	bl	8001af4 <__critical_exit>
    return eStatus;
 800e082:	7dfb      	ldrb	r3, [r7, #23]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20013466 	.word	0x20013466
 800e090:	080152f4 	.word	0x080152f4
 800e094:	080155d4 	.word	0x080155d4
 800e098:	0801531c 	.word	0x0801531c
 800e09c:	20012460 	.word	0x20012460
 800e0a0:	20012461 	.word	0x20012461

0800e0a4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	6039      	str	r1, [r7, #0]
 800e0ae:	71fb      	strb	r3, [r7, #7]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	73fb      	strb	r3, [r7, #15]
     * Проверьте, находится ли приемник все еще в режиме ожидания. В противном случае мы должны были
		замедлить обработку полученного кадра, и мастер отправил другой кадр по сети.
		Мы должны прервать отправку фрейма.
     */
    //printf("eMBRTUSend_eRcvState = %d \n", eRcvState);
    if( eRcvState == STATE_RX_IDLE )
 800e0b8:	4b2f      	ldr	r3, [pc, #188]	; (800e178 <eMBRTUSend+0xd4>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d152      	bne.n	800e168 <eMBRTUSend+0xc4>
    {
        /* Первый байт перед Modbus-PDU - это адрес SLAVE. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	4a2d      	ldr	r2, [pc, #180]	; (800e17c <eMBRTUSend+0xd8>)
 800e0c8:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800e0ca:	4b2d      	ldr	r3, [pc, #180]	; (800e180 <eMBRTUSend+0xdc>)
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800e0d0:	4b2a      	ldr	r3, [pc, #168]	; (800e17c <eMBRTUSend+0xd8>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	79fa      	ldrb	r2, [r7, #7]
 800e0d6:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800e0d8:	4b29      	ldr	r3, [pc, #164]	; (800e180 <eMBRTUSend+0xdc>)
 800e0da:	881b      	ldrh	r3, [r3, #0]
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	88bb      	ldrh	r3, [r7, #4]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	4b26      	ldr	r3, [pc, #152]	; (800e180 <eMBRTUSend+0xdc>)
 800e0e6:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
		usCRC16 = HAL_CRC_Calculate(&hcrc, ( UCHAR * ) pucSndBufferCur, usSndBufferCount);
 800e0e8:	4b24      	ldr	r3, [pc, #144]	; (800e17c <eMBRTUSend+0xd8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a24      	ldr	r2, [pc, #144]	; (800e180 <eMBRTUSend+0xdc>)
 800e0ee:	8812      	ldrh	r2, [r2, #0]
 800e0f0:	b292      	uxth	r2, r2
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4823      	ldr	r0, [pc, #140]	; (800e184 <eMBRTUSend+0xe0>)
 800e0f6:	f7f8 fb67 	bl	80067c8 <HAL_CRC_Calculate>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	4b22      	ldr	r3, [pc, #136]	; (800e188 <eMBRTUSend+0xe4>)
 800e100:	801a      	strh	r2, [r3, #0]
				//смотрим сколько натикало -цикл usMBCRC16(85char) длится 28.629мкс (4867 тика)
				//usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );

        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800e102:	4b21      	ldr	r3, [pc, #132]	; (800e188 <eMBRTUSend+0xe4>)
 800e104:	8819      	ldrh	r1, [r3, #0]
 800e106:	4b1e      	ldr	r3, [pc, #120]	; (800e180 <eMBRTUSend+0xdc>)
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	1c5a      	adds	r2, r3, #1
 800e10e:	b290      	uxth	r0, r2
 800e110:	4a1b      	ldr	r2, [pc, #108]	; (800e180 <eMBRTUSend+0xdc>)
 800e112:	8010      	strh	r0, [r2, #0]
 800e114:	461a      	mov	r2, r3
 800e116:	b2c9      	uxtb	r1, r1
 800e118:	4b1c      	ldr	r3, [pc, #112]	; (800e18c <eMBRTUSend+0xe8>)
 800e11a:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800e11c:	4b1a      	ldr	r3, [pc, #104]	; (800e188 <eMBRTUSend+0xe4>)
 800e11e:	881b      	ldrh	r3, [r3, #0]
 800e120:	0a1b      	lsrs	r3, r3, #8
 800e122:	b299      	uxth	r1, r3
 800e124:	4b16      	ldr	r3, [pc, #88]	; (800e180 <eMBRTUSend+0xdc>)
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	b290      	uxth	r0, r2
 800e12e:	4a14      	ldr	r2, [pc, #80]	; (800e180 <eMBRTUSend+0xdc>)
 800e130:	8010      	strh	r0, [r2, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	b2c9      	uxtb	r1, r1
 800e136:	4b15      	ldr	r3, [pc, #84]	; (800e18c <eMBRTUSend+0xe8>)
 800e138:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        if( usSndBufferCount != 0 )
 800e13a:	4b11      	ldr	r3, [pc, #68]	; (800e180 <eMBRTUSend+0xdc>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	2b00      	cmp	r3, #0
 800e142:	d013      	beq.n	800e16c <eMBRTUSend+0xc8>
        {
        	eSndState = STATE_TX_XMIT;
 800e144:	4b12      	ldr	r3, [pc, #72]	; (800e190 <eMBRTUSend+0xec>)
 800e146:	2201      	movs	r2, #1
 800e148:	701a      	strb	r2, [r3, #0]
        	vMBPortSerialEnable( FALSE, TRUE );
 800e14a:	2101      	movs	r1, #1
 800e14c:	2000      	movs	r0, #0
 800e14e:	f7ff feb1 	bl	800deb4 <vMBPortSerialEnable>
        	HAL_UART_Transmit_DMA(adr_huart_MB, pucSndBufferCur, usSndBufferCount);
 800e152:	4b10      	ldr	r3, [pc, #64]	; (800e194 <eMBRTUSend+0xf0>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a09      	ldr	r2, [pc, #36]	; (800e17c <eMBRTUSend+0xd8>)
 800e158:	6811      	ldr	r1, [r2, #0]
 800e15a:	4a09      	ldr	r2, [pc, #36]	; (800e180 <eMBRTUSend+0xdc>)
 800e15c:	8812      	ldrh	r2, [r2, #0]
 800e15e:	b292      	uxth	r2, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f7fd ff45 	bl	800bff0 <HAL_UART_Transmit_DMA>
 800e166:	e001      	b.n	800e16c <eMBRTUSend+0xc8>
        	//printf("_transmit_DMA %d_ \n", usSndBufferCount);
        }
    }
    else
    {
        eStatus = MB_EIO;
 800e168:	2305      	movs	r3, #5
 800e16a:	73fb      	strb	r3, [r7, #15]
    }
//    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800e16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	200005e8 	.word	0x200005e8
 800e17c:	20013460 	.word	0x20013460
 800e180:	20013464 	.word	0x20013464
 800e184:	20000468 	.word	0x20000468
 800e188:	20013468 	.word	0x20013468
 800e18c:	20012460 	.word	0x20012460
 800e190:	200005e9 	.word	0x200005e9
 800e194:	20000610 	.word	0x20000610

0800e198 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800e1a2:	4b2b      	ldr	r3, [pc, #172]	; (800e250 <xMBRTUReceiveFSM+0xb8>)
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d005      	beq.n	800e1b8 <xMBRTUReceiveFSM+0x20>
 800e1ac:	4b29      	ldr	r3, [pc, #164]	; (800e254 <xMBRTUReceiveFSM+0xbc>)
 800e1ae:	4a2a      	ldr	r2, [pc, #168]	; (800e258 <xMBRTUReceiveFSM+0xc0>)
 800e1b0:	21b9      	movs	r1, #185	; 0xb9
 800e1b2:	482a      	ldr	r0, [pc, #168]	; (800e25c <xMBRTUReceiveFSM+0xc4>)
 800e1b4:	f001 f8b0 	bl	800f318 <__assert_func>

    /* Всегда читайте  character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800e1b8:	1dbb      	adds	r3, r7, #6
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff feb2 	bl	800df24 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800e1c0:	4b27      	ldr	r3, [pc, #156]	; (800e260 <xMBRTUReceiveFSM+0xc8>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2b03      	cmp	r3, #3
 800e1c8:	d83c      	bhi.n	800e244 <xMBRTUReceiveFSM+0xac>
 800e1ca:	a201      	add	r2, pc, #4	; (adr r2, 800e1d0 <xMBRTUReceiveFSM+0x38>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e1e1 	.word	0x0800e1e1
 800e1d4:	0800e1ed 	.word	0x0800e1ed
 800e1d8:	0800e215 	.word	0x0800e215
 800e1dc:	0800e1e7 	.word	0x0800e1e7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800e1e0:	f7ff fec4 	bl	800df6c <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_INIT\n");
        break;
 800e1e4:	e02e      	b.n	800e244 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800e1e6:	f7ff fec1 	bl	800df6c <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        break;
 800e1ea:	e02b      	b.n	800e244 <xMBRTUReceiveFSM+0xac>
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
    	//printf("xMBRTUReceiveFSM eRcvState =STATE_RX_IDLE\n");
        usRcvBufferPos = 0;
 800e1ec:	4b1d      	ldr	r3, [pc, #116]	; (800e264 <xMBRTUReceiveFSM+0xcc>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800e1f2:	4b1c      	ldr	r3, [pc, #112]	; (800e264 <xMBRTUReceiveFSM+0xcc>)
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	b291      	uxth	r1, r2
 800e1fc:	4a19      	ldr	r2, [pc, #100]	; (800e264 <xMBRTUReceiveFSM+0xcc>)
 800e1fe:	8011      	strh	r1, [r2, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	79b9      	ldrb	r1, [r7, #6]
 800e204:	4b18      	ldr	r3, [pc, #96]	; (800e268 <xMBRTUReceiveFSM+0xd0>)
 800e206:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800e208:	4b15      	ldr	r3, [pc, #84]	; (800e260 <xMBRTUReceiveFSM+0xc8>)
 800e20a:	2202      	movs	r2, #2
 800e20c:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800e20e:	f7ff fead 	bl	800df6c <vMBPortTimersEnable>
        break;
 800e212:	e017      	b.n	800e244 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800e214:	4b13      	ldr	r3, [pc, #76]	; (800e264 <xMBRTUReceiveFSM+0xcc>)
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	b29b      	uxth	r3, r3
 800e21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e21e:	d20b      	bcs.n	800e238 <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800e220:	4b10      	ldr	r3, [pc, #64]	; (800e264 <xMBRTUReceiveFSM+0xcc>)
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	b29b      	uxth	r3, r3
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	b291      	uxth	r1, r2
 800e22a:	4a0e      	ldr	r2, [pc, #56]	; (800e264 <xMBRTUReceiveFSM+0xcc>)
 800e22c:	8011      	strh	r1, [r2, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	79b9      	ldrb	r1, [r7, #6]
 800e232:	4b0d      	ldr	r3, [pc, #52]	; (800e268 <xMBRTUReceiveFSM+0xd0>)
 800e234:	5499      	strb	r1, [r3, r2]
 800e236:	e002      	b.n	800e23e <xMBRTUReceiveFSM+0xa6>
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_RCV\n");
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <xMBRTUReceiveFSM+0xc8>)
 800e23a:	2203      	movs	r2, #3
 800e23c:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        }
        vMBPortTimersEnable(  );
 800e23e:	f7ff fe95 	bl	800df6c <vMBPortTimersEnable>
        break;
 800e242:	bf00      	nop
    }
    // printf("xMBRTUReceiveFSM eRcvState_OUT %d \n", eRcvState);
    return xTaskNeedSwitch;
 800e244:	79fb      	ldrb	r3, [r7, #7]
}
 800e246:	4618      	mov	r0, r3
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	200005e9 	.word	0x200005e9
 800e254:	0801533c 	.word	0x0801533c
 800e258:	080155e4 	.word	0x080155e4
 800e25c:	0801531c 	.word	0x0801531c
 800e260:	200005e8 	.word	0x200005e8
 800e264:	20013466 	.word	0x20013466
 800e268:	20012460 	.word	0x20012460

0800e26c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e272:	2300      	movs	r3, #0
 800e274:	71fb      	strb	r3, [r7, #7]

    // assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 800e276:	4b0f      	ldr	r3, [pc, #60]	; (800e2b4 <xMBRTUTransmitFSM+0x48>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <xMBRTUTransmitFSM+0x1a>
 800e280:	2b01      	cmp	r3, #1
 800e282:	d005      	beq.n	800e290 <xMBRTUTransmitFSM+0x24>
 800e284:	e011      	b.n	800e2aa <xMBRTUTransmitFSM+0x3e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800e286:	2100      	movs	r1, #0
 800e288:	2001      	movs	r0, #1
 800e28a:	f7ff fe13 	bl	800deb4 <vMBPortSerialEnable>
        //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e28e:	e00c      	b.n	800e2aa <xMBRTUTransmitFSM+0x3e>

    case STATE_TX_XMIT:
        /* проверьте, закончили ли мы. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800e290:	2003      	movs	r0, #3
 800e292:	f7ff fddb 	bl	800de4c <xMBPortEventPost>
 800e296:	4603      	mov	r3, r0
 800e298:	71fb      	strb	r3, [r7, #7]
            /* Отключите передатчик.
             * Это предотвращает еще одно прерывание пустого буфера передачи.*/
            vMBPortSerialEnable( TRUE, FALSE );
 800e29a:	2100      	movs	r1, #0
 800e29c:	2001      	movs	r0, #1
 800e29e:	f7ff fe09 	bl	800deb4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800e2a2:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <xMBRTUTransmitFSM+0x48>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e2a8:	bf00      	nop
    }

    return xNeedPoll;
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	200005e9 	.word	0x200005e9

0800e2b8 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )  // вызывается только по 35 событию преполнения TIM6
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800e2c2:	4b1d      	ldr	r3, [pc, #116]	; (800e338 <xMBRTUTimerT35Expired+0x80>)
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b03      	cmp	r3, #3
 800e2ca:	d817      	bhi.n	800e2fc <xMBRTUTimerT35Expired+0x44>
 800e2cc:	a201      	add	r2, pc, #4	; (adr r2, 800e2d4 <xMBRTUTimerT35Expired+0x1c>)
 800e2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d2:	bf00      	nop
 800e2d4:	0800e2e5 	.word	0x0800e2e5
 800e2d8:	0800e323 	.word	0x0800e323
 800e2dc:	0800e2f1 	.word	0x0800e2f1
 800e2e0:	0800e323 	.word	0x0800e323
    {
        /* Timer t35 expired. Startup phase is finished. Таймер t35 истек. Этап запуска завершен.*/
    case STATE_RX_INIT:   // приемник в режиме инициализации
        xNeedPoll = xMBPortEventPost( EV_READY );
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	f7ff fdb1 	bl	800de4c <xMBPortEventPost>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_INIT \n");
        break;
 800e2ee:	e019      	b.n	800e324 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that a new frame was received.
         *  Был получен кадр, и срок действия t35 истек. Уведомите слушателя о том, что был получен новый кадр.*/
    case STATE_RX_RCV:    // приемник в режиме приема
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800e2f0:	2001      	movs	r0, #1
 800e2f2:	f7ff fdab 	bl	800de4c <xMBPortEventPost>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_RCV, _xNeedPoll=%d \n", xNeedPoll);
        break;
 800e2fa:	e013      	b.n	800e324 <xMBRTUTimerT35Expired+0x6c>
    	//printf("xMBRTUTimerT35Expired eRcvState=_RX_IDLE \n");
        break;

        /* Function called in an illegal state. Функция вызывается в illegal состоянии. */
    default:
    	if ( ( eRcvState == STATE_RX_INIT ) ||  ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) )
 800e2fc:	4b0e      	ldr	r3, [pc, #56]	; (800e338 <xMBRTUTimerT35Expired+0x80>)
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d009      	beq.n	800e31a <xMBRTUTimerT35Expired+0x62>
 800e306:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <xMBRTUTimerT35Expired+0x80>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d004      	beq.n	800e31a <xMBRTUTimerT35Expired+0x62>
 800e310:	4b09      	ldr	r3, [pc, #36]	; (800e338 <xMBRTUTimerT35Expired+0x80>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b03      	cmp	r3, #3
 800e318:	d104      	bne.n	800e324 <xMBRTUTimerT35Expired+0x6c>
    	{
    		printf("xMBRTUTimerT35Expired  Function called in an illegal state \n");
 800e31a:	4808      	ldr	r0, [pc, #32]	; (800e33c <xMBRTUTimerT35Expired+0x84>)
 800e31c:	f002 f8ae 	bl	801047c <puts>
 800e320:	e000      	b.n	800e324 <xMBRTUTimerT35Expired+0x6c>
        break;
 800e322:	bf00      	nop
    	}
    }

    vMBPortTimersDisable(  );
 800e324:	f7ff fe30 	bl	800df88 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE; // всегда, при каждом срабатывании TIM6 статус приемника переводится в это состояние
 800e328:	4b03      	ldr	r3, [pc, #12]	; (800e338 <xMBRTUTimerT35Expired+0x80>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800e32e:	79fb      	ldrb	r3, [r7, #7]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	200005e8 	.word	0x200005e8
 800e33c:	08015358 	.word	0x08015358

0800e340 <arm_cfft_radix8by2_f32>:
 800e340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e344:	ed2d 8b08 	vpush	{d8-d11}
 800e348:	4607      	mov	r7, r0
 800e34a:	4608      	mov	r0, r1
 800e34c:	f8b7 c000 	ldrh.w	ip, [r7]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e356:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e35a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e35e:	f000 80b0 	beq.w	800e4c2 <arm_cfft_radix8by2_f32+0x182>
 800e362:	008c      	lsls	r4, r1, #2
 800e364:	3410      	adds	r4, #16
 800e366:	f100 0310 	add.w	r3, r0, #16
 800e36a:	1906      	adds	r6, r0, r4
 800e36c:	3210      	adds	r2, #16
 800e36e:	4444      	add	r4, r8
 800e370:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800e374:	f108 0510 	add.w	r5, r8, #16
 800e378:	ed15 2a04 	vldr	s4, [r5, #-16]
 800e37c:	ed55 2a03 	vldr	s5, [r5, #-12]
 800e380:	ed54 4a04 	vldr	s9, [r4, #-16]
 800e384:	ed14 4a03 	vldr	s8, [r4, #-12]
 800e388:	ed14 6a02 	vldr	s12, [r4, #-8]
 800e38c:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e390:	ed53 3a04 	vldr	s7, [r3, #-16]
 800e394:	ed15 0a02 	vldr	s0, [r5, #-8]
 800e398:	ed55 0a01 	vldr	s1, [r5, #-4]
 800e39c:	ed56 6a04 	vldr	s13, [r6, #-16]
 800e3a0:	ed16 3a03 	vldr	s6, [r6, #-12]
 800e3a4:	ed13 7a03 	vldr	s14, [r3, #-12]
 800e3a8:	ed13 5a02 	vldr	s10, [r3, #-8]
 800e3ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e3b0:	ed16 1a02 	vldr	s2, [r6, #-8]
 800e3b4:	ed56 1a01 	vldr	s3, [r6, #-4]
 800e3b8:	ee73 ba82 	vadd.f32	s23, s7, s4
 800e3bc:	ee37 ba22 	vadd.f32	s22, s14, s5
 800e3c0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800e3c4:	ee33 9a04 	vadd.f32	s18, s6, s8
 800e3c8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800e3cc:	ee75 aa00 	vadd.f32	s21, s10, s0
 800e3d0:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800e3d4:	ee71 8a06 	vadd.f32	s17, s2, s12
 800e3d8:	ed43 ba04 	vstr	s23, [r3, #-16]
 800e3dc:	ed03 ba03 	vstr	s22, [r3, #-12]
 800e3e0:	ed43 aa02 	vstr	s21, [r3, #-8]
 800e3e4:	ed03 aa01 	vstr	s20, [r3, #-4]
 800e3e8:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e3ec:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e3f0:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e3f4:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e3f8:	ee37 7a62 	vsub.f32	s14, s14, s5
 800e3fc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800e400:	ee34 4a43 	vsub.f32	s8, s8, s6
 800e404:	ed52 6a03 	vldr	s13, [r2, #-12]
 800e408:	ed12 3a04 	vldr	s6, [r2, #-16]
 800e40c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e410:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e414:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800e418:	ee23 2a83 	vmul.f32	s4, s7, s6
 800e41c:	ee64 4a83 	vmul.f32	s9, s9, s6
 800e420:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e424:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e428:	ee64 6a26 	vmul.f32	s13, s8, s13
 800e42c:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e430:	ee37 7a63 	vsub.f32	s14, s14, s7
 800e434:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e438:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800e43c:	ee32 3a08 	vadd.f32	s6, s4, s16
 800e440:	ed05 7a03 	vstr	s14, [r5, #-12]
 800e444:	ed05 3a04 	vstr	s6, [r5, #-16]
 800e448:	ed04 4a04 	vstr	s8, [r4, #-16]
 800e44c:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e450:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e454:	ee76 6a41 	vsub.f32	s13, s12, s2
 800e458:	ee35 5a40 	vsub.f32	s10, s10, s0
 800e45c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800e460:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e464:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e468:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e46c:	ee66 4a87 	vmul.f32	s9, s13, s14
 800e470:	ee25 4a25 	vmul.f32	s8, s10, s11
 800e474:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e478:	ee25 5a07 	vmul.f32	s10, s10, s14
 800e47c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e480:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e484:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e488:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e48c:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e490:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800e494:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e498:	3310      	adds	r3, #16
 800e49a:	4563      	cmp	r3, ip
 800e49c:	ed45 5a02 	vstr	s11, [r5, #-8]
 800e4a0:	f106 0610 	add.w	r6, r6, #16
 800e4a4:	ed45 7a01 	vstr	s15, [r5, #-4]
 800e4a8:	f102 0210 	add.w	r2, r2, #16
 800e4ac:	ed04 6a02 	vstr	s12, [r4, #-8]
 800e4b0:	ed04 7a01 	vstr	s14, [r4, #-4]
 800e4b4:	f105 0510 	add.w	r5, r5, #16
 800e4b8:	f104 0410 	add.w	r4, r4, #16
 800e4bc:	f47f af5c 	bne.w	800e378 <arm_cfft_radix8by2_f32+0x38>
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	b28c      	uxth	r4, r1
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	2302      	movs	r3, #2
 800e4c8:	f000 fc66 	bl	800ed98 <arm_radix8_butterfly_f32>
 800e4cc:	ecbd 8b08 	vpop	{d8-d11}
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	4640      	mov	r0, r8
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4dc:	f000 bc5c 	b.w	800ed98 <arm_radix8_butterfly_f32>

0800e4e0 <arm_cfft_radix8by4_f32>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	ed2d 8b0a 	vpush	{d8-d12}
 800e4e8:	b08d      	sub	sp, #52	; 0x34
 800e4ea:	460d      	mov	r5, r1
 800e4ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800e4ee:	8801      	ldrh	r1, [r0, #0]
 800e4f0:	6842      	ldr	r2, [r0, #4]
 800e4f2:	900a      	str	r0, [sp, #40]	; 0x28
 800e4f4:	0849      	lsrs	r1, r1, #1
 800e4f6:	008b      	lsls	r3, r1, #2
 800e4f8:	18ee      	adds	r6, r5, r3
 800e4fa:	18f0      	adds	r0, r6, r3
 800e4fc:	edd0 5a00 	vldr	s11, [r0]
 800e500:	edd5 7a00 	vldr	s15, [r5]
 800e504:	ed96 7a00 	vldr	s14, [r6]
 800e508:	edd0 3a01 	vldr	s7, [r0, #4]
 800e50c:	ed96 4a01 	vldr	s8, [r6, #4]
 800e510:	ed95 5a01 	vldr	s10, [r5, #4]
 800e514:	9008      	str	r0, [sp, #32]
 800e516:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800e51a:	18c7      	adds	r7, r0, r3
 800e51c:	edd7 4a00 	vldr	s9, [r7]
 800e520:	ed97 3a01 	vldr	s6, [r7, #4]
 800e524:	9701      	str	r7, [sp, #4]
 800e526:	ee77 6a06 	vadd.f32	s13, s14, s12
 800e52a:	462c      	mov	r4, r5
 800e52c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e530:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e534:	ee16 ca90 	vmov	ip, s13
 800e538:	f844 cb08 	str.w	ip, [r4], #8
 800e53c:	ee75 6a23 	vadd.f32	s13, s10, s7
 800e540:	edd6 5a01 	vldr	s11, [r6, #4]
 800e544:	edd7 2a01 	vldr	s5, [r7, #4]
 800e548:	9404      	str	r4, [sp, #16]
 800e54a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800e54e:	ee74 3a27 	vadd.f32	s7, s8, s15
 800e552:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e556:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800e55a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e55e:	0849      	lsrs	r1, r1, #1
 800e560:	f102 0e08 	add.w	lr, r2, #8
 800e564:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800e568:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e56c:	9109      	str	r1, [sp, #36]	; 0x24
 800e56e:	ee35 4a47 	vsub.f32	s8, s10, s14
 800e572:	f1a1 0902 	sub.w	r9, r1, #2
 800e576:	f8cd e00c 	str.w	lr, [sp, #12]
 800e57a:	4631      	mov	r1, r6
 800e57c:	ee13 ea90 	vmov	lr, s7
 800e580:	ee36 6a64 	vsub.f32	s12, s12, s9
 800e584:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800e588:	4604      	mov	r4, r0
 800e58a:	edc5 5a01 	vstr	s11, [r5, #4]
 800e58e:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e592:	f841 eb08 	str.w	lr, [r1], #8
 800e596:	ee34 5a24 	vadd.f32	s10, s8, s9
 800e59a:	ee16 ea10 	vmov	lr, s12
 800e59e:	ed86 5a01 	vstr	s10, [r6, #4]
 800e5a2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e5a6:	f844 eb08 	str.w	lr, [r4], #8
 800e5aa:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e5ae:	edc0 6a01 	vstr	s13, [r0, #4]
 800e5b2:	9405      	str	r4, [sp, #20]
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	ee17 0a90 	vmov	r0, s15
 800e5ba:	9106      	str	r1, [sp, #24]
 800e5bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e5c0:	f102 0110 	add.w	r1, r2, #16
 800e5c4:	46bc      	mov	ip, r7
 800e5c6:	9100      	str	r1, [sp, #0]
 800e5c8:	f847 0b08 	str.w	r0, [r7], #8
 800e5cc:	f102 0118 	add.w	r1, r2, #24
 800e5d0:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800e5d4:	9102      	str	r1, [sp, #8]
 800e5d6:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e5da:	9007      	str	r0, [sp, #28]
 800e5dc:	f000 8134 	beq.w	800e848 <arm_cfft_radix8by4_f32+0x368>
 800e5e0:	f102 0920 	add.w	r9, r2, #32
 800e5e4:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800e5e8:	9a01      	ldr	r2, [sp, #4]
 800e5ea:	f8dd a000 	ldr.w	sl, [sp]
 800e5ee:	3b0c      	subs	r3, #12
 800e5f0:	4683      	mov	fp, r0
 800e5f2:	4463      	add	r3, ip
 800e5f4:	f105 0e10 	add.w	lr, r5, #16
 800e5f8:	f1a4 010c 	sub.w	r1, r4, #12
 800e5fc:	f104 0510 	add.w	r5, r4, #16
 800e600:	f1a6 0c0c 	sub.w	ip, r6, #12
 800e604:	f1a2 040c 	sub.w	r4, r2, #12
 800e608:	f106 0010 	add.w	r0, r6, #16
 800e60c:	3210      	adds	r2, #16
 800e60e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800e612:	ed55 5a02 	vldr	s11, [r5, #-8]
 800e616:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e61a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800e61e:	ed55 6a01 	vldr	s13, [r5, #-4]
 800e622:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800e626:	ed12 1a01 	vldr	s2, [r2, #-4]
 800e62a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800e62e:	ee35 4a25 	vadd.f32	s8, s10, s11
 800e632:	ee30 6a26 	vadd.f32	s12, s0, s13
 800e636:	ee37 7a84 	vadd.f32	s14, s15, s8
 800e63a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e63e:	ee37 7a21 	vadd.f32	s14, s14, s3
 800e642:	ee75 5a65 	vsub.f32	s11, s10, s11
 800e646:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800e64a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800e64e:	ed52 6a01 	vldr	s13, [r2, #-4]
 800e652:	ee36 7a07 	vadd.f32	s14, s12, s14
 800e656:	ee78 aa25 	vadd.f32	s21, s16, s11
 800e65a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e65e:	ee70 3a67 	vsub.f32	s7, s0, s15
 800e662:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800e666:	ed94 7a02 	vldr	s14, [r4, #8]
 800e66a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800e66e:	ed91 ba02 	vldr	s22, [r1, #8]
 800e672:	edd3 9a02 	vldr	s19, [r3, #8]
 800e676:	edd4 2a01 	vldr	s5, [r4, #4]
 800e67a:	ed9c 9a01 	vldr	s18, [ip, #4]
 800e67e:	ed93 5a01 	vldr	s10, [r3, #4]
 800e682:	edd1 0a01 	vldr	s1, [r1, #4]
 800e686:	ee72 6a07 	vadd.f32	s13, s4, s14
 800e68a:	ee32 2a47 	vsub.f32	s4, s4, s14
 800e68e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800e692:	ee79 4a22 	vadd.f32	s9, s18, s5
 800e696:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800e69a:	ee79 2a62 	vsub.f32	s5, s18, s5
 800e69e:	ed8c 7a02 	vstr	s14, [ip, #8]
 800e6a2:	ed91 7a01 	vldr	s14, [r1, #4]
 800e6a6:	edd3 8a01 	vldr	s17, [r3, #4]
 800e6aa:	ee34 7a87 	vadd.f32	s14, s9, s14
 800e6ae:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800e6b2:	ee37 7a28 	vadd.f32	s14, s14, s17
 800e6b6:	ee32 9a60 	vsub.f32	s18, s4, s1
 800e6ba:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e6be:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800e6c2:	ed1a aa02 	vldr	s20, [sl, #-8]
 800e6c6:	ee73 8a22 	vadd.f32	s17, s6, s5
 800e6ca:	ee39 9a05 	vadd.f32	s18, s18, s10
 800e6ce:	ee7a aac1 	vsub.f32	s21, s21, s2
 800e6d2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e6d6:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800e6da:	ee69 ba07 	vmul.f32	s23, s18, s14
 800e6de:	ee6a aa87 	vmul.f32	s21, s21, s14
 800e6e2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800e6e6:	ee63 ca87 	vmul.f32	s25, s7, s14
 800e6ea:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800e6ee:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800e6f2:	ee68 8a87 	vmul.f32	s17, s17, s14
 800e6f6:	ee73 3aea 	vsub.f32	s7, s7, s21
 800e6fa:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e6fe:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800e702:	ee3b aaca 	vsub.f32	s20, s23, s20
 800e706:	ee34 4a67 	vsub.f32	s8, s8, s15
 800e70a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800e70e:	ee36 6a48 	vsub.f32	s12, s12, s16
 800e712:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800e716:	ed00 7a02 	vstr	s14, [r0, #-8]
 800e71a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e71e:	edc1 8a01 	vstr	s17, [r1, #4]
 800e722:	ed81 aa02 	vstr	s20, [r1, #8]
 800e726:	ed59 3a04 	vldr	s7, [r9, #-16]
 800e72a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800e72e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800e732:	ed59 6a03 	vldr	s13, [r9, #-12]
 800e736:	ee34 4a61 	vsub.f32	s8, s8, s3
 800e73a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800e73e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800e742:	ee66 9a26 	vmul.f32	s19, s12, s13
 800e746:	ee24 9a23 	vmul.f32	s18, s8, s7
 800e74a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e74e:	ee24 4a26 	vmul.f32	s8, s8, s13
 800e752:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e756:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800e75a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800e75e:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e762:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e766:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800e76a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800e76e:	ee75 6a60 	vsub.f32	s13, s10, s1
 800e772:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800e776:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e77a:	ed45 3a02 	vstr	s7, [r5, #-8]
 800e77e:	ed05 6a01 	vstr	s12, [r5, #-4]
 800e782:	ed84 7a01 	vstr	s14, [r4, #4]
 800e786:	ed84 4a02 	vstr	s8, [r4, #8]
 800e78a:	ee35 6a81 	vadd.f32	s12, s11, s2
 800e78e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800e792:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800e796:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800e79a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e79e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800e7a2:	ee67 2a26 	vmul.f32	s5, s14, s13
 800e7a6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e7aa:	ee26 5a25 	vmul.f32	s10, s12, s11
 800e7ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7b2:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e7b6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e7ba:	ee63 6a26 	vmul.f32	s13, s6, s13
 800e7be:	ee23 3a25 	vmul.f32	s6, s6, s11
 800e7c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e7c6:	ee75 5a24 	vadd.f32	s11, s10, s9
 800e7ca:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800e7ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e7d2:	f1bb 0b01 	subs.w	fp, fp, #1
 800e7d6:	ed42 5a02 	vstr	s11, [r2, #-8]
 800e7da:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e7de:	f10e 0e08 	add.w	lr, lr, #8
 800e7e2:	ed83 3a02 	vstr	s6, [r3, #8]
 800e7e6:	ed83 7a01 	vstr	s14, [r3, #4]
 800e7ea:	f1ac 0c08 	sub.w	ip, ip, #8
 800e7ee:	f10a 0a08 	add.w	sl, sl, #8
 800e7f2:	f100 0008 	add.w	r0, r0, #8
 800e7f6:	f1a1 0108 	sub.w	r1, r1, #8
 800e7fa:	f109 0910 	add.w	r9, r9, #16
 800e7fe:	f105 0508 	add.w	r5, r5, #8
 800e802:	f1a4 0408 	sub.w	r4, r4, #8
 800e806:	f108 0818 	add.w	r8, r8, #24
 800e80a:	f102 0208 	add.w	r2, r2, #8
 800e80e:	f1a3 0308 	sub.w	r3, r3, #8
 800e812:	f47f aefc 	bne.w	800e60e <arm_cfft_radix8by4_f32+0x12e>
 800e816:	9907      	ldr	r1, [sp, #28]
 800e818:	9800      	ldr	r0, [sp, #0]
 800e81a:	00cb      	lsls	r3, r1, #3
 800e81c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800e820:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800e824:	9100      	str	r1, [sp, #0]
 800e826:	9904      	ldr	r1, [sp, #16]
 800e828:	4419      	add	r1, r3
 800e82a:	9104      	str	r1, [sp, #16]
 800e82c:	9903      	ldr	r1, [sp, #12]
 800e82e:	4419      	add	r1, r3
 800e830:	9103      	str	r1, [sp, #12]
 800e832:	9906      	ldr	r1, [sp, #24]
 800e834:	4419      	add	r1, r3
 800e836:	9106      	str	r1, [sp, #24]
 800e838:	9905      	ldr	r1, [sp, #20]
 800e83a:	441f      	add	r7, r3
 800e83c:	4419      	add	r1, r3
 800e83e:	9b02      	ldr	r3, [sp, #8]
 800e840:	9105      	str	r1, [sp, #20]
 800e842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e846:	9302      	str	r3, [sp, #8]
 800e848:	9904      	ldr	r1, [sp, #16]
 800e84a:	9805      	ldr	r0, [sp, #20]
 800e84c:	ed91 4a00 	vldr	s8, [r1]
 800e850:	edd0 6a00 	vldr	s13, [r0]
 800e854:	9b06      	ldr	r3, [sp, #24]
 800e856:	ed97 3a00 	vldr	s6, [r7]
 800e85a:	edd3 7a00 	vldr	s15, [r3]
 800e85e:	edd0 4a01 	vldr	s9, [r0, #4]
 800e862:	edd1 3a01 	vldr	s7, [r1, #4]
 800e866:	ed97 2a01 	vldr	s4, [r7, #4]
 800e86a:	ed93 7a01 	vldr	s14, [r3, #4]
 800e86e:	9a03      	ldr	r2, [sp, #12]
 800e870:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800e874:	ee34 6a26 	vadd.f32	s12, s8, s13
 800e878:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800e87c:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e880:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800e884:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e888:	ee74 6a66 	vsub.f32	s13, s8, s13
 800e88c:	ed81 5a00 	vstr	s10, [r1]
 800e890:	ed93 5a01 	vldr	s10, [r3, #4]
 800e894:	edd7 4a01 	vldr	s9, [r7, #4]
 800e898:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e89c:	ee37 4a26 	vadd.f32	s8, s14, s13
 800e8a0:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e8a4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800e8a8:	ed81 5a01 	vstr	s10, [r1, #4]
 800e8ac:	edd2 1a00 	vldr	s3, [r2]
 800e8b0:	edd2 2a01 	vldr	s5, [r2, #4]
 800e8b4:	ee34 5a83 	vadd.f32	s10, s9, s6
 800e8b8:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e8bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e8c0:	ee64 4a21 	vmul.f32	s9, s8, s3
 800e8c4:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e8c8:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e8cc:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e8d0:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800e8d4:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e8d8:	edc3 2a00 	vstr	s5, [r3]
 800e8dc:	ed83 5a01 	vstr	s10, [r3, #4]
 800e8e0:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800e8e4:	9b00      	ldr	r3, [sp, #0]
 800e8e6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e8ea:	ed93 4a01 	vldr	s8, [r3, #4]
 800e8ee:	ed93 5a00 	vldr	s10, [r3]
 800e8f2:	9b02      	ldr	r3, [sp, #8]
 800e8f4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800e8f8:	ee66 4a05 	vmul.f32	s9, s12, s10
 800e8fc:	ee25 5a85 	vmul.f32	s10, s11, s10
 800e900:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e904:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e908:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e90c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800e910:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e914:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e918:	ed80 6a01 	vstr	s12, [r0, #4]
 800e91c:	edc0 5a00 	vstr	s11, [r0]
 800e920:	edd3 5a01 	vldr	s11, [r3, #4]
 800e924:	edd3 6a00 	vldr	s13, [r3]
 800e928:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e92c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800e930:	ee27 6a26 	vmul.f32	s12, s14, s13
 800e934:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e938:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e93c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e940:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e944:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e948:	ed87 7a01 	vstr	s14, [r7, #4]
 800e94c:	edc7 7a00 	vstr	s15, [r7]
 800e950:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800e954:	4621      	mov	r1, r4
 800e956:	686a      	ldr	r2, [r5, #4]
 800e958:	2304      	movs	r3, #4
 800e95a:	f000 fa1d 	bl	800ed98 <arm_radix8_butterfly_f32>
 800e95e:	4630      	mov	r0, r6
 800e960:	4621      	mov	r1, r4
 800e962:	686a      	ldr	r2, [r5, #4]
 800e964:	2304      	movs	r3, #4
 800e966:	f000 fa17 	bl	800ed98 <arm_radix8_butterfly_f32>
 800e96a:	9808      	ldr	r0, [sp, #32]
 800e96c:	686a      	ldr	r2, [r5, #4]
 800e96e:	4621      	mov	r1, r4
 800e970:	2304      	movs	r3, #4
 800e972:	f000 fa11 	bl	800ed98 <arm_radix8_butterfly_f32>
 800e976:	686a      	ldr	r2, [r5, #4]
 800e978:	9801      	ldr	r0, [sp, #4]
 800e97a:	4621      	mov	r1, r4
 800e97c:	2304      	movs	r3, #4
 800e97e:	b00d      	add	sp, #52	; 0x34
 800e980:	ecbd 8b0a 	vpop	{d8-d12}
 800e984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e988:	f000 ba06 	b.w	800ed98 <arm_radix8_butterfly_f32>

0800e98c <arm_cfft_f32>:
 800e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e990:	2a01      	cmp	r2, #1
 800e992:	4606      	mov	r6, r0
 800e994:	4617      	mov	r7, r2
 800e996:	460c      	mov	r4, r1
 800e998:	4698      	mov	r8, r3
 800e99a:	8805      	ldrh	r5, [r0, #0]
 800e99c:	d056      	beq.n	800ea4c <arm_cfft_f32+0xc0>
 800e99e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e9a2:	d063      	beq.n	800ea6c <arm_cfft_f32+0xe0>
 800e9a4:	d916      	bls.n	800e9d4 <arm_cfft_f32+0x48>
 800e9a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e9aa:	d01a      	beq.n	800e9e2 <arm_cfft_f32+0x56>
 800e9ac:	d947      	bls.n	800ea3e <arm_cfft_f32+0xb2>
 800e9ae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800e9b2:	d05b      	beq.n	800ea6c <arm_cfft_f32+0xe0>
 800e9b4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800e9b8:	d105      	bne.n	800e9c6 <arm_cfft_f32+0x3a>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	6872      	ldr	r2, [r6, #4]
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f000 f9e9 	bl	800ed98 <arm_radix8_butterfly_f32>
 800e9c6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ca:	d111      	bne.n	800e9f0 <arm_cfft_f32+0x64>
 800e9cc:	2f01      	cmp	r7, #1
 800e9ce:	d016      	beq.n	800e9fe <arm_cfft_f32+0x72>
 800e9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d4:	2d20      	cmp	r5, #32
 800e9d6:	d049      	beq.n	800ea6c <arm_cfft_f32+0xe0>
 800e9d8:	d935      	bls.n	800ea46 <arm_cfft_f32+0xba>
 800e9da:	2d40      	cmp	r5, #64	; 0x40
 800e9dc:	d0ed      	beq.n	800e9ba <arm_cfft_f32+0x2e>
 800e9de:	2d80      	cmp	r5, #128	; 0x80
 800e9e0:	d1f1      	bne.n	800e9c6 <arm_cfft_f32+0x3a>
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f7ff fcab 	bl	800e340 <arm_cfft_radix8by2_f32>
 800e9ea:	f1b8 0f00 	cmp.w	r8, #0
 800e9ee:	d0ed      	beq.n	800e9cc <arm_cfft_f32+0x40>
 800e9f0:	68b2      	ldr	r2, [r6, #8]
 800e9f2:	89b1      	ldrh	r1, [r6, #12]
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f000 f841 	bl	800ea7c <arm_bitreversal_32>
 800e9fa:	2f01      	cmp	r7, #1
 800e9fc:	d1e8      	bne.n	800e9d0 <arm_cfft_f32+0x44>
 800e9fe:	ee07 5a90 	vmov	s15, r5
 800ea02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ea0e:	2d00      	cmp	r5, #0
 800ea10:	d0de      	beq.n	800e9d0 <arm_cfft_f32+0x44>
 800ea12:	f104 0108 	add.w	r1, r4, #8
 800ea16:	2300      	movs	r3, #0
 800ea18:	3301      	adds	r3, #1
 800ea1a:	429d      	cmp	r5, r3
 800ea1c:	f101 0108 	add.w	r1, r1, #8
 800ea20:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ea24:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ea28:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ea2c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ea30:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ea34:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ea38:	d1ee      	bne.n	800ea18 <arm_cfft_f32+0x8c>
 800ea3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea3e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ea42:	d0ba      	beq.n	800e9ba <arm_cfft_f32+0x2e>
 800ea44:	e7bf      	b.n	800e9c6 <arm_cfft_f32+0x3a>
 800ea46:	2d10      	cmp	r5, #16
 800ea48:	d0cb      	beq.n	800e9e2 <arm_cfft_f32+0x56>
 800ea4a:	e7bc      	b.n	800e9c6 <arm_cfft_f32+0x3a>
 800ea4c:	b19d      	cbz	r5, 800ea76 <arm_cfft_f32+0xea>
 800ea4e:	f101 030c 	add.w	r3, r1, #12
 800ea52:	2200      	movs	r2, #0
 800ea54:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ea58:	3201      	adds	r2, #1
 800ea5a:	eef1 7a67 	vneg.f32	s15, s15
 800ea5e:	4295      	cmp	r5, r2
 800ea60:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ea64:	f103 0308 	add.w	r3, r3, #8
 800ea68:	d1f4      	bne.n	800ea54 <arm_cfft_f32+0xc8>
 800ea6a:	e798      	b.n	800e99e <arm_cfft_f32+0x12>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f7ff fd36 	bl	800e4e0 <arm_cfft_radix8by4_f32>
 800ea74:	e7a7      	b.n	800e9c6 <arm_cfft_f32+0x3a>
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d0aa      	beq.n	800e9d0 <arm_cfft_f32+0x44>
 800ea7a:	e7b9      	b.n	800e9f0 <arm_cfft_f32+0x64>

0800ea7c <arm_bitreversal_32>:
 800ea7c:	b1e9      	cbz	r1, 800eaba <arm_bitreversal_32+0x3e>
 800ea7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea80:	2500      	movs	r5, #0
 800ea82:	f102 0e02 	add.w	lr, r2, #2
 800ea86:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800ea8a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800ea8e:	08a4      	lsrs	r4, r4, #2
 800ea90:	089b      	lsrs	r3, r3, #2
 800ea92:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800ea96:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800ea9a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800ea9e:	00a6      	lsls	r6, r4, #2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	1d34      	adds	r4, r6, #4
 800eaaa:	3502      	adds	r5, #2
 800eaac:	58c6      	ldr	r6, [r0, r3]
 800eaae:	5907      	ldr	r7, [r0, r4]
 800eab0:	50c7      	str	r7, [r0, r3]
 800eab2:	428d      	cmp	r5, r1
 800eab4:	5106      	str	r6, [r0, r4]
 800eab6:	d3e6      	bcc.n	800ea86 <arm_bitreversal_32+0xa>
 800eab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaba:	4770      	bx	lr

0800eabc <arm_cmplx_mag_f32>:
 800eabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac0:	ed2d 8b02 	vpush	{d8}
 800eac4:	0897      	lsrs	r7, r2, #2
 800eac6:	b084      	sub	sp, #16
 800eac8:	d077      	beq.n	800ebba <arm_cmplx_mag_f32+0xfe>
 800eaca:	f04f 0800 	mov.w	r8, #0
 800eace:	f100 0420 	add.w	r4, r0, #32
 800ead2:	f101 0510 	add.w	r5, r1, #16
 800ead6:	463e      	mov	r6, r7
 800ead8:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800eadc:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800eae0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eae4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eae8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eaec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	f2c0 80c5 	blt.w	800ec82 <arm_cmplx_mag_f32+0x1c6>
 800eaf8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb00:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eb04:	f100 80cb 	bmi.w	800ec9e <arm_cmplx_mag_f32+0x1e2>
 800eb08:	ed05 8a04 	vstr	s16, [r5, #-16]
 800eb0c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800eb10:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800eb14:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb28:	f2c0 80a8 	blt.w	800ec7c <arm_cmplx_mag_f32+0x1c0>
 800eb2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb34:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eb38:	f100 80a8 	bmi.w	800ec8c <arm_cmplx_mag_f32+0x1d0>
 800eb3c:	ed05 8a03 	vstr	s16, [r5, #-12]
 800eb40:	ed14 0a04 	vldr	s0, [r4, #-16]
 800eb44:	ed54 7a03 	vldr	s15, [r4, #-12]
 800eb48:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb50:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5c:	f2c0 808b 	blt.w	800ec76 <arm_cmplx_mag_f32+0x1ba>
 800eb60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb68:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eb6c:	f100 80a9 	bmi.w	800ecc2 <arm_cmplx_mag_f32+0x206>
 800eb70:	ed05 8a02 	vstr	s16, [r5, #-8]
 800eb74:	ed14 0a02 	vldr	s0, [r4, #-8]
 800eb78:	ed54 7a01 	vldr	s15, [r4, #-4]
 800eb7c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb84:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb90:	db6e      	blt.n	800ec70 <arm_cmplx_mag_f32+0x1b4>
 800eb92:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800eb9e:	f100 8087 	bmi.w	800ecb0 <arm_cmplx_mag_f32+0x1f4>
 800eba2:	ed05 8a01 	vstr	s16, [r5, #-4]
 800eba6:	3e01      	subs	r6, #1
 800eba8:	f104 0420 	add.w	r4, r4, #32
 800ebac:	f105 0510 	add.w	r5, r5, #16
 800ebb0:	d192      	bne.n	800ead8 <arm_cmplx_mag_f32+0x1c>
 800ebb2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800ebb6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ebba:	f012 0203 	ands.w	r2, r2, #3
 800ebbe:	d052      	beq.n	800ec66 <arm_cmplx_mag_f32+0x1aa>
 800ebc0:	ed90 0a00 	vldr	s0, [r0]
 800ebc4:	edd0 7a01 	vldr	s15, [r0, #4]
 800ebc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ebcc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ebd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ebda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebde:	bfb8      	it	lt
 800ebe0:	600b      	strlt	r3, [r1, #0]
 800ebe2:	db08      	blt.n	800ebf6 <arm_cmplx_mag_f32+0x13a>
 800ebe4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ebe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ebf0:	d479      	bmi.n	800ece6 <arm_cmplx_mag_f32+0x22a>
 800ebf2:	ed81 8a00 	vstr	s16, [r1]
 800ebf6:	3a01      	subs	r2, #1
 800ebf8:	d035      	beq.n	800ec66 <arm_cmplx_mag_f32+0x1aa>
 800ebfa:	ed90 0a02 	vldr	s0, [r0, #8]
 800ebfe:	edd0 7a03 	vldr	s15, [r0, #12]
 800ec02:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ec10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	bfb8      	it	lt
 800ec1a:	604b      	strlt	r3, [r1, #4]
 800ec1c:	db08      	blt.n	800ec30 <arm_cmplx_mag_f32+0x174>
 800ec1e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ec2a:	d453      	bmi.n	800ecd4 <arm_cmplx_mag_f32+0x218>
 800ec2c:	ed81 8a01 	vstr	s16, [r1, #4]
 800ec30:	2a01      	cmp	r2, #1
 800ec32:	d018      	beq.n	800ec66 <arm_cmplx_mag_f32+0x1aa>
 800ec34:	ed90 0a04 	vldr	s0, [r0, #16]
 800ec38:	edd0 7a05 	vldr	s15, [r0, #20]
 800ec3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec44:	2300      	movs	r3, #0
 800ec46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec52:	db19      	blt.n	800ec88 <arm_cmplx_mag_f32+0x1cc>
 800ec54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ec58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ec60:	d44a      	bmi.n	800ecf8 <arm_cmplx_mag_f32+0x23c>
 800ec62:	ed81 8a02 	vstr	s16, [r1, #8]
 800ec66:	b004      	add	sp, #16
 800ec68:	ecbd 8b02 	vpop	{d8}
 800ec6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec70:	f845 8c04 	str.w	r8, [r5, #-4]
 800ec74:	e797      	b.n	800eba6 <arm_cmplx_mag_f32+0xea>
 800ec76:	f845 8c08 	str.w	r8, [r5, #-8]
 800ec7a:	e77b      	b.n	800eb74 <arm_cmplx_mag_f32+0xb8>
 800ec7c:	f845 8c0c 	str.w	r8, [r5, #-12]
 800ec80:	e75e      	b.n	800eb40 <arm_cmplx_mag_f32+0x84>
 800ec82:	f845 8c10 	str.w	r8, [r5, #-16]
 800ec86:	e741      	b.n	800eb0c <arm_cmplx_mag_f32+0x50>
 800ec88:	608b      	str	r3, [r1, #8]
 800ec8a:	e7ec      	b.n	800ec66 <arm_cmplx_mag_f32+0x1aa>
 800ec8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ec90:	9001      	str	r0, [sp, #4]
 800ec92:	f005 fa05 	bl	80140a0 <sqrtf>
 800ec96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ec9a:	9801      	ldr	r0, [sp, #4]
 800ec9c:	e74e      	b.n	800eb3c <arm_cmplx_mag_f32+0x80>
 800ec9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eca2:	9001      	str	r0, [sp, #4]
 800eca4:	f005 f9fc 	bl	80140a0 <sqrtf>
 800eca8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ecac:	9801      	ldr	r0, [sp, #4]
 800ecae:	e72b      	b.n	800eb08 <arm_cmplx_mag_f32+0x4c>
 800ecb0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ecb4:	9001      	str	r0, [sp, #4]
 800ecb6:	f005 f9f3 	bl	80140a0 <sqrtf>
 800ecba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ecbe:	9801      	ldr	r0, [sp, #4]
 800ecc0:	e76f      	b.n	800eba2 <arm_cmplx_mag_f32+0xe6>
 800ecc2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ecc6:	9001      	str	r0, [sp, #4]
 800ecc8:	f005 f9ea 	bl	80140a0 <sqrtf>
 800eccc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ecd0:	9801      	ldr	r0, [sp, #4]
 800ecd2:	e74d      	b.n	800eb70 <arm_cmplx_mag_f32+0xb4>
 800ecd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecd8:	9201      	str	r2, [sp, #4]
 800ecda:	f005 f9e1 	bl	80140a0 <sqrtf>
 800ecde:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ece2:	9903      	ldr	r1, [sp, #12]
 800ece4:	e7a2      	b.n	800ec2c <arm_cmplx_mag_f32+0x170>
 800ece6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecea:	9201      	str	r2, [sp, #4]
 800ecec:	f005 f9d8 	bl	80140a0 <sqrtf>
 800ecf0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ecf4:	9903      	ldr	r1, [sp, #12]
 800ecf6:	e77c      	b.n	800ebf2 <arm_cmplx_mag_f32+0x136>
 800ecf8:	9101      	str	r1, [sp, #4]
 800ecfa:	f005 f9d1 	bl	80140a0 <sqrtf>
 800ecfe:	9901      	ldr	r1, [sp, #4]
 800ed00:	e7af      	b.n	800ec62 <arm_cmplx_mag_f32+0x1a6>
 800ed02:	bf00      	nop

0800ed04 <arm_cos_f32>:
 800ed04:	eddf 7a21 	vldr	s15, [pc, #132]	; 800ed8c <arm_cos_f32+0x88>
 800ed08:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed0c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ed10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ed20:	d504      	bpl.n	800ed2c <arm_cos_f32+0x28>
 800ed22:	ee17 3a90 	vmov	r3, s15
 800ed26:	3b01      	subs	r3, #1
 800ed28:	ee07 3a90 	vmov	s15, r3
 800ed2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed30:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800ed90 <arm_cos_f32+0x8c>
 800ed34:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed38:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ed3c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ed40:	ee17 3a90 	vmov	r3, s15
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed4a:	d21a      	bcs.n	800ed82 <arm_cos_f32+0x7e>
 800ed4c:	ee07 3a90 	vmov	s15, r3
 800ed50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed54:	1c59      	adds	r1, r3, #1
 800ed56:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed5a:	4a0e      	ldr	r2, [pc, #56]	; (800ed94 <arm_cos_f32+0x90>)
 800ed5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ed68:	ed93 7a00 	vldr	s14, [r3]
 800ed6c:	edd2 6a00 	vldr	s13, [r2]
 800ed70:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ed74:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ed78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed7c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ed80:	4770      	bx	lr
 800ed82:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ed86:	2101      	movs	r1, #1
 800ed88:	2300      	movs	r3, #0
 800ed8a:	e7e6      	b.n	800ed5a <arm_cos_f32+0x56>
 800ed8c:	3e22f983 	.word	0x3e22f983
 800ed90:	44000000 	.word	0x44000000
 800ed94:	0801a888 	.word	0x0801a888

0800ed98 <arm_radix8_butterfly_f32>:
 800ed98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	ed2d 8b10 	vpush	{d8-d15}
 800eda0:	b095      	sub	sp, #84	; 0x54
 800eda2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800eda6:	4603      	mov	r3, r0
 800eda8:	3304      	adds	r3, #4
 800edaa:	ed9f bab9 	vldr	s22, [pc, #740]	; 800f090 <arm_radix8_butterfly_f32+0x2f8>
 800edae:	9012      	str	r0, [sp, #72]	; 0x48
 800edb0:	468b      	mov	fp, r1
 800edb2:	9313      	str	r3, [sp, #76]	; 0x4c
 800edb4:	4689      	mov	r9, r1
 800edb6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800edba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edbc:	960f      	str	r6, [sp, #60]	; 0x3c
 800edbe:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800edc2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800edc6:	eb03 0508 	add.w	r5, r3, r8
 800edca:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800edce:	eb05 040e 	add.w	r4, r5, lr
 800edd2:	0137      	lsls	r7, r6, #4
 800edd4:	eba6 030a 	sub.w	r3, r6, sl
 800edd8:	eb04 000e 	add.w	r0, r4, lr
 800eddc:	44b2      	add	sl, r6
 800edde:	1d3a      	adds	r2, r7, #4
 800ede0:	9702      	str	r7, [sp, #8]
 800ede2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ede6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800edea:	ebae 0c06 	sub.w	ip, lr, r6
 800edee:	9703      	str	r7, [sp, #12]
 800edf0:	eb03 0708 	add.w	r7, r3, r8
 800edf4:	9701      	str	r7, [sp, #4]
 800edf6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800edfa:	9706      	str	r7, [sp, #24]
 800edfc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800edfe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800ee02:	f10e 0104 	add.w	r1, lr, #4
 800ee06:	4439      	add	r1, r7
 800ee08:	443a      	add	r2, r7
 800ee0a:	0137      	lsls	r7, r6, #4
 800ee0c:	00f6      	lsls	r6, r6, #3
 800ee0e:	9704      	str	r7, [sp, #16]
 800ee10:	9605      	str	r6, [sp, #20]
 800ee12:	9f01      	ldr	r7, [sp, #4]
 800ee14:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ee16:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ee1a:	f04f 0c00 	mov.w	ip, #0
 800ee1e:	edd4 6a00 	vldr	s13, [r4]
 800ee22:	edd7 1a00 	vldr	s3, [r7]
 800ee26:	ed16 aa01 	vldr	s20, [r6, #-4]
 800ee2a:	edd5 5a00 	vldr	s11, [r5]
 800ee2e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800ee32:	ed90 6a00 	vldr	s12, [r0]
 800ee36:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ee3a:	ed93 3a00 	vldr	s6, [r3]
 800ee3e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ee42:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ee46:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ee4a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ee4e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ee52:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ee56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee5a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ee5e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ee62:	ed46 6a01 	vstr	s13, [r6, #-4]
 800ee66:	ed85 4a00 	vstr	s8, [r5]
 800ee6a:	edd1 6a00 	vldr	s13, [r1]
 800ee6e:	ed94 9a01 	vldr	s18, [r4, #4]
 800ee72:	edd3 2a01 	vldr	s5, [r3, #4]
 800ee76:	edd7 8a01 	vldr	s17, [r7, #4]
 800ee7a:	edd6 0a00 	vldr	s1, [r6]
 800ee7e:	edd5 3a01 	vldr	s7, [r5, #4]
 800ee82:	ed90 8a01 	vldr	s16, [r0, #4]
 800ee86:	ed92 7a00 	vldr	s14, [r2]
 800ee8a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ee8e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800ee92:	ee72 aae8 	vsub.f32	s21, s5, s17
 800ee96:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800ee9a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800ee9e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800eea2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800eea6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800eeaa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800eeae:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800eeb2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800eeb6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800eeba:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800eebe:	ee37 7a48 	vsub.f32	s14, s14, s16
 800eec2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800eec6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800eeca:	ee76 6a89 	vadd.f32	s13, s13, s18
 800eece:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800eed2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800eed6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800eeda:	ee35 5a42 	vsub.f32	s10, s10, s4
 800eede:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800eee2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800eee6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800eeea:	ee33 3a60 	vsub.f32	s6, s6, s1
 800eeee:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800eef2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800eef6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800eefa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800eefe:	ee73 1a84 	vadd.f32	s3, s7, s8
 800ef02:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ef06:	ee76 3a27 	vadd.f32	s7, s12, s15
 800ef0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ef0e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800ef12:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ef16:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ef1a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ef1e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ef22:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800ef26:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800ef2a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800ef2e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800ef32:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800ef36:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ef3a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ef3e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800ef42:	44dc      	add	ip, fp
 800ef44:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ef48:	45e1      	cmp	r9, ip
 800ef4a:	ed86 8a00 	vstr	s16, [r6]
 800ef4e:	ed85 2a01 	vstr	s4, [r5, #4]
 800ef52:	4456      	add	r6, sl
 800ef54:	ed02 0a01 	vstr	s0, [r2, #-4]
 800ef58:	4455      	add	r5, sl
 800ef5a:	edc0 6a00 	vstr	s13, [r0]
 800ef5e:	ed82 1a00 	vstr	s2, [r2]
 800ef62:	ed80 5a01 	vstr	s10, [r0, #4]
 800ef66:	4452      	add	r2, sl
 800ef68:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ef6c:	4450      	add	r0, sl
 800ef6e:	edc7 2a00 	vstr	s5, [r7]
 800ef72:	edc4 4a00 	vstr	s9, [r4]
 800ef76:	ed83 7a00 	vstr	s14, [r3]
 800ef7a:	edc1 5a00 	vstr	s11, [r1]
 800ef7e:	edc7 3a01 	vstr	s7, [r7, #4]
 800ef82:	4451      	add	r1, sl
 800ef84:	ed84 6a01 	vstr	s12, [r4, #4]
 800ef88:	4457      	add	r7, sl
 800ef8a:	edc3 7a01 	vstr	s15, [r3, #4]
 800ef8e:	4454      	add	r4, sl
 800ef90:	4453      	add	r3, sl
 800ef92:	f63f af44 	bhi.w	800ee1e <arm_radix8_butterfly_f32+0x86>
 800ef96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef98:	2b07      	cmp	r3, #7
 800ef9a:	f240 81b7 	bls.w	800f30c <arm_radix8_butterfly_f32+0x574>
 800ef9e:	9b06      	ldr	r3, [sp, #24]
 800efa0:	9903      	ldr	r1, [sp, #12]
 800efa2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800efa4:	9e05      	ldr	r6, [sp, #20]
 800efa6:	9a04      	ldr	r2, [sp, #16]
 800efa8:	f103 0c08 	add.w	ip, r3, #8
 800efac:	9b02      	ldr	r3, [sp, #8]
 800efae:	3108      	adds	r1, #8
 800efb0:	f108 0808 	add.w	r8, r8, #8
 800efb4:	1841      	adds	r1, r0, r1
 800efb6:	3608      	adds	r6, #8
 800efb8:	330c      	adds	r3, #12
 800efba:	4604      	mov	r4, r0
 800efbc:	4444      	add	r4, r8
 800efbe:	18c3      	adds	r3, r0, r3
 800efc0:	9109      	str	r1, [sp, #36]	; 0x24
 800efc2:	1981      	adds	r1, r0, r6
 800efc4:	f10e 0e08 	add.w	lr, lr, #8
 800efc8:	3208      	adds	r2, #8
 800efca:	940b      	str	r4, [sp, #44]	; 0x2c
 800efcc:	9107      	str	r1, [sp, #28]
 800efce:	4604      	mov	r4, r0
 800efd0:	4601      	mov	r1, r0
 800efd2:	9304      	str	r3, [sp, #16]
 800efd4:	f100 030c 	add.w	r3, r0, #12
 800efd8:	4474      	add	r4, lr
 800efda:	f04f 0801 	mov.w	r8, #1
 800efde:	1882      	adds	r2, r0, r2
 800efe0:	4461      	add	r1, ip
 800efe2:	9305      	str	r3, [sp, #20]
 800efe4:	464b      	mov	r3, r9
 800efe6:	940a      	str	r4, [sp, #40]	; 0x28
 800efe8:	46c1      	mov	r9, r8
 800efea:	9208      	str	r2, [sp, #32]
 800efec:	46d8      	mov	r8, fp
 800efee:	9106      	str	r1, [sp, #24]
 800eff0:	f04f 0e00 	mov.w	lr, #0
 800eff4:	469b      	mov	fp, r3
 800eff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800effa:	449e      	add	lr, r3
 800effc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800f000:	441a      	add	r2, r3
 800f002:	920e      	str	r2, [sp, #56]	; 0x38
 800f004:	441a      	add	r2, r3
 800f006:	18d4      	adds	r4, r2, r3
 800f008:	18e5      	adds	r5, r4, r3
 800f00a:	18ee      	adds	r6, r5, r3
 800f00c:	18f7      	adds	r7, r6, r3
 800f00e:	eb07 0c03 	add.w	ip, r7, r3
 800f012:	920d      	str	r2, [sp, #52]	; 0x34
 800f014:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800f018:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800f01c:	910c      	str	r1, [sp, #48]	; 0x30
 800f01e:	4419      	add	r1, r3
 800f020:	9103      	str	r1, [sp, #12]
 800f022:	4419      	add	r1, r3
 800f024:	18ca      	adds	r2, r1, r3
 800f026:	9202      	str	r2, [sp, #8]
 800f028:	441a      	add	r2, r3
 800f02a:	18d0      	adds	r0, r2, r3
 800f02c:	ed92 ea01 	vldr	s28, [r2, #4]
 800f030:	9a02      	ldr	r2, [sp, #8]
 800f032:	edd4 7a00 	vldr	s15, [r4]
 800f036:	edd2 da01 	vldr	s27, [r2, #4]
 800f03a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f03c:	ed91 da01 	vldr	s26, [r1, #4]
 800f040:	ed92 ca01 	vldr	s24, [r2, #4]
 800f044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f046:	9903      	ldr	r1, [sp, #12]
 800f048:	edcd 7a03 	vstr	s15, [sp, #12]
 800f04c:	edd2 7a00 	vldr	s15, [r2]
 800f050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f052:	edcd 7a02 	vstr	s15, [sp, #8]
 800f056:	edd2 7a00 	vldr	s15, [r2]
 800f05a:	edd0 ea01 	vldr	s29, [r0, #4]
 800f05e:	edd1 ca01 	vldr	s25, [r1, #4]
 800f062:	eddc ba00 	vldr	s23, [ip]
 800f066:	edd7 aa00 	vldr	s21, [r7]
 800f06a:	ed96 aa00 	vldr	s20, [r6]
 800f06e:	edd5 9a00 	vldr	s19, [r5]
 800f072:	edcd 7a01 	vstr	s15, [sp, #4]
 800f076:	4403      	add	r3, r0
 800f078:	ed93 fa01 	vldr	s30, [r3, #4]
 800f07c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800f080:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800f084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f088:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f08c:	46cc      	mov	ip, r9
 800f08e:	e001      	b.n	800f094 <arm_radix8_butterfly_f32+0x2fc>
 800f090:	3f3504f3 	.word	0x3f3504f3
 800f094:	ed91 6a00 	vldr	s12, [r1]
 800f098:	ed93 5a00 	vldr	s10, [r3]
 800f09c:	edd0 fa00 	vldr	s31, [r0]
 800f0a0:	edd4 7a00 	vldr	s15, [r4]
 800f0a4:	ed95 7a00 	vldr	s14, [r5]
 800f0a8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800f0ac:	ed17 3a01 	vldr	s6, [r7, #-4]
 800f0b0:	ed92 2a00 	vldr	s4, [r2]
 800f0b4:	ed96 0a00 	vldr	s0, [r6]
 800f0b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f0bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f0c0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800f0c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f0c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f0cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f0d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f0d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f0d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0dc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800f0e0:	edd4 8a01 	vldr	s17, [r4, #4]
 800f0e4:	ed92 9a01 	vldr	s18, [r2, #4]
 800f0e8:	edd7 0a00 	vldr	s1, [r7]
 800f0ec:	edd1 2a01 	vldr	s5, [r1, #4]
 800f0f0:	ed95 7a01 	vldr	s14, [r5, #4]
 800f0f4:	ed93 6a01 	vldr	s12, [r3, #4]
 800f0f8:	edd0 5a01 	vldr	s11, [r0, #4]
 800f0fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f100:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800f104:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f108:	ee78 fac7 	vsub.f32	s31, s17, s14
 800f10c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f110:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f114:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f118:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f11c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f120:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f124:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f128:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800f12c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f130:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800f134:	ee32 1a08 	vadd.f32	s2, s4, s16
 800f138:	ee72 fa87 	vadd.f32	s31, s5, s14
 800f13c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f140:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f144:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f148:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f14c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f150:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f154:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800f158:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800f15c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f160:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f164:	ee74 0a22 	vadd.f32	s1, s8, s5
 800f168:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f16c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f170:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f174:	ee32 4a64 	vsub.f32	s8, s4, s9
 800f178:	ee73 8a09 	vadd.f32	s17, s6, s18
 800f17c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800f180:	ee33 9a49 	vsub.f32	s18, s6, s18
 800f184:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800f188:	ee35 3a85 	vadd.f32	s6, s11, s10
 800f18c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f190:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800f194:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f198:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800f19c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800f1a0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800f1a4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800f1a8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800f1ac:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800f1b0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800f1b4:	eddd 1a02 	vldr	s3, [sp, #8]
 800f1b8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800f1bc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800f1c0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800f1c4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800f1c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f1cc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800f1d0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800f1d4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800f1d8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800f1dc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800f1e0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800f1e4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800f1e8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800f1ec:	ee22 2a08 	vmul.f32	s4, s4, s16
 800f1f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f1f4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800f1f8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800f1fc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800f200:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800f204:	ee74 0a60 	vsub.f32	s1, s8, s1
 800f208:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f20c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800f210:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800f214:	ee72 1a21 	vadd.f32	s3, s4, s3
 800f218:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800f21c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800f220:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800f224:	ee38 8a04 	vadd.f32	s16, s16, s8
 800f228:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800f22c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800f230:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800f234:	eddd 5a03 	vldr	s11, [sp, #12]
 800f238:	edc6 fa00 	vstr	s31, [r6]
 800f23c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800f240:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f244:	ee30 0a45 	vsub.f32	s0, s0, s10
 800f248:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800f24c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800f250:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800f254:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800f258:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800f25c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f260:	ee74 4a89 	vadd.f32	s9, s9, s18
 800f264:	ee34 3a43 	vsub.f32	s6, s8, s6
 800f268:	ee78 8a85 	vadd.f32	s17, s17, s10
 800f26c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f270:	44c4      	add	ip, r8
 800f272:	45e3      	cmp	fp, ip
 800f274:	edc3 3a00 	vstr	s7, [r3]
 800f278:	edc3 6a01 	vstr	s13, [r3, #4]
 800f27c:	4456      	add	r6, sl
 800f27e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800f282:	edc7 0a00 	vstr	s1, [r7]
 800f286:	4453      	add	r3, sl
 800f288:	ed80 2a00 	vstr	s4, [r0]
 800f28c:	edc0 2a01 	vstr	s5, [r0, #4]
 800f290:	4457      	add	r7, sl
 800f292:	edc2 1a00 	vstr	s3, [r2]
 800f296:	ed82 7a01 	vstr	s14, [r2, #4]
 800f29a:	4450      	add	r0, sl
 800f29c:	ed85 8a00 	vstr	s16, [r5]
 800f2a0:	ed85 0a01 	vstr	s0, [r5, #4]
 800f2a4:	4452      	add	r2, sl
 800f2a6:	edc1 4a00 	vstr	s9, [r1]
 800f2aa:	4455      	add	r5, sl
 800f2ac:	ed81 3a01 	vstr	s6, [r1, #4]
 800f2b0:	edc4 8a00 	vstr	s17, [r4]
 800f2b4:	ed84 6a01 	vstr	s12, [r4, #4]
 800f2b8:	4451      	add	r1, sl
 800f2ba:	4454      	add	r4, sl
 800f2bc:	f63f aeea 	bhi.w	800f094 <arm_radix8_butterfly_f32+0x2fc>
 800f2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c2:	3308      	adds	r3, #8
 800f2c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c8:	3308      	adds	r3, #8
 800f2ca:	930a      	str	r3, [sp, #40]	; 0x28
 800f2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f2d2:	9b08      	ldr	r3, [sp, #32]
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	9308      	str	r3, [sp, #32]
 800f2d8:	9b07      	ldr	r3, [sp, #28]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	9307      	str	r3, [sp, #28]
 800f2de:	9b06      	ldr	r3, [sp, #24]
 800f2e0:	3308      	adds	r3, #8
 800f2e2:	9306      	str	r3, [sp, #24]
 800f2e4:	9b05      	ldr	r3, [sp, #20]
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	9305      	str	r3, [sp, #20]
 800f2ea:	9b04      	ldr	r3, [sp, #16]
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	9304      	str	r3, [sp, #16]
 800f2f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2f2:	f109 0901 	add.w	r9, r9, #1
 800f2f6:	454b      	cmp	r3, r9
 800f2f8:	f47f ae7d 	bne.w	800eff6 <arm_radix8_butterfly_f32+0x25e>
 800f2fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2fe:	00db      	lsls	r3, r3, #3
 800f300:	b29b      	uxth	r3, r3
 800f302:	46d9      	mov	r9, fp
 800f304:	9310      	str	r3, [sp, #64]	; 0x40
 800f306:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800f30a:	e554      	b.n	800edb6 <arm_radix8_butterfly_f32+0x1e>
 800f30c:	b015      	add	sp, #84	; 0x54
 800f30e:	ecbd 8b10 	vpop	{d8-d15}
 800f312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f316:	bf00      	nop

0800f318 <__assert_func>:
 800f318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f31a:	4614      	mov	r4, r2
 800f31c:	461a      	mov	r2, r3
 800f31e:	4b09      	ldr	r3, [pc, #36]	; (800f344 <__assert_func+0x2c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4605      	mov	r5, r0
 800f324:	68d8      	ldr	r0, [r3, #12]
 800f326:	b14c      	cbz	r4, 800f33c <__assert_func+0x24>
 800f328:	4b07      	ldr	r3, [pc, #28]	; (800f348 <__assert_func+0x30>)
 800f32a:	9100      	str	r1, [sp, #0]
 800f32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f330:	4906      	ldr	r1, [pc, #24]	; (800f34c <__assert_func+0x34>)
 800f332:	462b      	mov	r3, r5
 800f334:	f000 f814 	bl	800f360 <fiprintf>
 800f338:	f002 f83a 	bl	80113b0 <abort>
 800f33c:	4b04      	ldr	r3, [pc, #16]	; (800f350 <__assert_func+0x38>)
 800f33e:	461c      	mov	r4, r3
 800f340:	e7f3      	b.n	800f32a <__assert_func+0x12>
 800f342:	bf00      	nop
 800f344:	200000dc 	.word	0x200000dc
 800f348:	0802a88c 	.word	0x0802a88c
 800f34c:	0802a899 	.word	0x0802a899
 800f350:	0802a8c7 	.word	0x0802a8c7

0800f354 <__errno>:
 800f354:	4b01      	ldr	r3, [pc, #4]	; (800f35c <__errno+0x8>)
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	200000dc 	.word	0x200000dc

0800f360 <fiprintf>:
 800f360:	b40e      	push	{r1, r2, r3}
 800f362:	b503      	push	{r0, r1, lr}
 800f364:	4601      	mov	r1, r0
 800f366:	ab03      	add	r3, sp, #12
 800f368:	4805      	ldr	r0, [pc, #20]	; (800f380 <fiprintf+0x20>)
 800f36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f36e:	6800      	ldr	r0, [r0, #0]
 800f370:	9301      	str	r3, [sp, #4]
 800f372:	f000 f86b 	bl	800f44c <_vfiprintf_r>
 800f376:	b002      	add	sp, #8
 800f378:	f85d eb04 	ldr.w	lr, [sp], #4
 800f37c:	b003      	add	sp, #12
 800f37e:	4770      	bx	lr
 800f380:	200000dc 	.word	0x200000dc

0800f384 <__libc_init_array>:
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	4d0d      	ldr	r5, [pc, #52]	; (800f3bc <__libc_init_array+0x38>)
 800f388:	4c0d      	ldr	r4, [pc, #52]	; (800f3c0 <__libc_init_array+0x3c>)
 800f38a:	1b64      	subs	r4, r4, r5
 800f38c:	10a4      	asrs	r4, r4, #2
 800f38e:	2600      	movs	r6, #0
 800f390:	42a6      	cmp	r6, r4
 800f392:	d109      	bne.n	800f3a8 <__libc_init_array+0x24>
 800f394:	4d0b      	ldr	r5, [pc, #44]	; (800f3c4 <__libc_init_array+0x40>)
 800f396:	4c0c      	ldr	r4, [pc, #48]	; (800f3c8 <__libc_init_array+0x44>)
 800f398:	f005 ff1e 	bl	80151d8 <_init>
 800f39c:	1b64      	subs	r4, r4, r5
 800f39e:	10a4      	asrs	r4, r4, #2
 800f3a0:	2600      	movs	r6, #0
 800f3a2:	42a6      	cmp	r6, r4
 800f3a4:	d105      	bne.n	800f3b2 <__libc_init_array+0x2e>
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
 800f3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ac:	4798      	blx	r3
 800f3ae:	3601      	adds	r6, #1
 800f3b0:	e7ee      	b.n	800f390 <__libc_init_array+0xc>
 800f3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3b6:	4798      	blx	r3
 800f3b8:	3601      	adds	r6, #1
 800f3ba:	e7f2      	b.n	800f3a2 <__libc_init_array+0x1e>
 800f3bc:	0802b1a8 	.word	0x0802b1a8
 800f3c0:	0802b1a8 	.word	0x0802b1a8
 800f3c4:	0802b1a8 	.word	0x0802b1a8
 800f3c8:	0802b1ac 	.word	0x0802b1ac

0800f3cc <memcpy>:
 800f3cc:	440a      	add	r2, r1
 800f3ce:	4291      	cmp	r1, r2
 800f3d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3d4:	d100      	bne.n	800f3d8 <memcpy+0xc>
 800f3d6:	4770      	bx	lr
 800f3d8:	b510      	push	{r4, lr}
 800f3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e2:	4291      	cmp	r1, r2
 800f3e4:	d1f9      	bne.n	800f3da <memcpy+0xe>
 800f3e6:	bd10      	pop	{r4, pc}

0800f3e8 <memset>:
 800f3e8:	4402      	add	r2, r0
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d100      	bne.n	800f3f2 <memset+0xa>
 800f3f0:	4770      	bx	lr
 800f3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f3f6:	e7f9      	b.n	800f3ec <memset+0x4>

0800f3f8 <__sfputc_r>:
 800f3f8:	6893      	ldr	r3, [r2, #8]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	b410      	push	{r4}
 800f400:	6093      	str	r3, [r2, #8]
 800f402:	da08      	bge.n	800f416 <__sfputc_r+0x1e>
 800f404:	6994      	ldr	r4, [r2, #24]
 800f406:	42a3      	cmp	r3, r4
 800f408:	db01      	blt.n	800f40e <__sfputc_r+0x16>
 800f40a:	290a      	cmp	r1, #10
 800f40c:	d103      	bne.n	800f416 <__sfputc_r+0x1e>
 800f40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f412:	f001 bf0d 	b.w	8011230 <__swbuf_r>
 800f416:	6813      	ldr	r3, [r2, #0]
 800f418:	1c58      	adds	r0, r3, #1
 800f41a:	6010      	str	r0, [r2, #0]
 800f41c:	7019      	strb	r1, [r3, #0]
 800f41e:	4608      	mov	r0, r1
 800f420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <__sfputs_r>:
 800f426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f428:	4606      	mov	r6, r0
 800f42a:	460f      	mov	r7, r1
 800f42c:	4614      	mov	r4, r2
 800f42e:	18d5      	adds	r5, r2, r3
 800f430:	42ac      	cmp	r4, r5
 800f432:	d101      	bne.n	800f438 <__sfputs_r+0x12>
 800f434:	2000      	movs	r0, #0
 800f436:	e007      	b.n	800f448 <__sfputs_r+0x22>
 800f438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f43c:	463a      	mov	r2, r7
 800f43e:	4630      	mov	r0, r6
 800f440:	f7ff ffda 	bl	800f3f8 <__sfputc_r>
 800f444:	1c43      	adds	r3, r0, #1
 800f446:	d1f3      	bne.n	800f430 <__sfputs_r+0xa>
 800f448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f44c <_vfiprintf_r>:
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	460d      	mov	r5, r1
 800f452:	b09d      	sub	sp, #116	; 0x74
 800f454:	4614      	mov	r4, r2
 800f456:	4698      	mov	r8, r3
 800f458:	4606      	mov	r6, r0
 800f45a:	b118      	cbz	r0, 800f464 <_vfiprintf_r+0x18>
 800f45c:	6983      	ldr	r3, [r0, #24]
 800f45e:	b90b      	cbnz	r3, 800f464 <_vfiprintf_r+0x18>
 800f460:	f002 ff42 	bl	80122e8 <__sinit>
 800f464:	4b89      	ldr	r3, [pc, #548]	; (800f68c <_vfiprintf_r+0x240>)
 800f466:	429d      	cmp	r5, r3
 800f468:	d11b      	bne.n	800f4a2 <_vfiprintf_r+0x56>
 800f46a:	6875      	ldr	r5, [r6, #4]
 800f46c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f46e:	07d9      	lsls	r1, r3, #31
 800f470:	d405      	bmi.n	800f47e <_vfiprintf_r+0x32>
 800f472:	89ab      	ldrh	r3, [r5, #12]
 800f474:	059a      	lsls	r2, r3, #22
 800f476:	d402      	bmi.n	800f47e <_vfiprintf_r+0x32>
 800f478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f47a:	f003 fb46 	bl	8012b0a <__retarget_lock_acquire_recursive>
 800f47e:	89ab      	ldrh	r3, [r5, #12]
 800f480:	071b      	lsls	r3, r3, #28
 800f482:	d501      	bpl.n	800f488 <_vfiprintf_r+0x3c>
 800f484:	692b      	ldr	r3, [r5, #16]
 800f486:	b9eb      	cbnz	r3, 800f4c4 <_vfiprintf_r+0x78>
 800f488:	4629      	mov	r1, r5
 800f48a:	4630      	mov	r0, r6
 800f48c:	f001 ff22 	bl	80112d4 <__swsetup_r>
 800f490:	b1c0      	cbz	r0, 800f4c4 <_vfiprintf_r+0x78>
 800f492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f494:	07dc      	lsls	r4, r3, #31
 800f496:	d50e      	bpl.n	800f4b6 <_vfiprintf_r+0x6a>
 800f498:	f04f 30ff 	mov.w	r0, #4294967295
 800f49c:	b01d      	add	sp, #116	; 0x74
 800f49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4a2:	4b7b      	ldr	r3, [pc, #492]	; (800f690 <_vfiprintf_r+0x244>)
 800f4a4:	429d      	cmp	r5, r3
 800f4a6:	d101      	bne.n	800f4ac <_vfiprintf_r+0x60>
 800f4a8:	68b5      	ldr	r5, [r6, #8]
 800f4aa:	e7df      	b.n	800f46c <_vfiprintf_r+0x20>
 800f4ac:	4b79      	ldr	r3, [pc, #484]	; (800f694 <_vfiprintf_r+0x248>)
 800f4ae:	429d      	cmp	r5, r3
 800f4b0:	bf08      	it	eq
 800f4b2:	68f5      	ldreq	r5, [r6, #12]
 800f4b4:	e7da      	b.n	800f46c <_vfiprintf_r+0x20>
 800f4b6:	89ab      	ldrh	r3, [r5, #12]
 800f4b8:	0598      	lsls	r0, r3, #22
 800f4ba:	d4ed      	bmi.n	800f498 <_vfiprintf_r+0x4c>
 800f4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4be:	f003 fb25 	bl	8012b0c <__retarget_lock_release_recursive>
 800f4c2:	e7e9      	b.n	800f498 <_vfiprintf_r+0x4c>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c8:	2320      	movs	r3, #32
 800f4ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4d2:	2330      	movs	r3, #48	; 0x30
 800f4d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f698 <_vfiprintf_r+0x24c>
 800f4d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4dc:	f04f 0901 	mov.w	r9, #1
 800f4e0:	4623      	mov	r3, r4
 800f4e2:	469a      	mov	sl, r3
 800f4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4e8:	b10a      	cbz	r2, 800f4ee <_vfiprintf_r+0xa2>
 800f4ea:	2a25      	cmp	r2, #37	; 0x25
 800f4ec:	d1f9      	bne.n	800f4e2 <_vfiprintf_r+0x96>
 800f4ee:	ebba 0b04 	subs.w	fp, sl, r4
 800f4f2:	d00b      	beq.n	800f50c <_vfiprintf_r+0xc0>
 800f4f4:	465b      	mov	r3, fp
 800f4f6:	4622      	mov	r2, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f7ff ff93 	bl	800f426 <__sfputs_r>
 800f500:	3001      	adds	r0, #1
 800f502:	f000 80aa 	beq.w	800f65a <_vfiprintf_r+0x20e>
 800f506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f508:	445a      	add	r2, fp
 800f50a:	9209      	str	r2, [sp, #36]	; 0x24
 800f50c:	f89a 3000 	ldrb.w	r3, [sl]
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 80a2 	beq.w	800f65a <_vfiprintf_r+0x20e>
 800f516:	2300      	movs	r3, #0
 800f518:	f04f 32ff 	mov.w	r2, #4294967295
 800f51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f520:	f10a 0a01 	add.w	sl, sl, #1
 800f524:	9304      	str	r3, [sp, #16]
 800f526:	9307      	str	r3, [sp, #28]
 800f528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f52c:	931a      	str	r3, [sp, #104]	; 0x68
 800f52e:	4654      	mov	r4, sl
 800f530:	2205      	movs	r2, #5
 800f532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f536:	4858      	ldr	r0, [pc, #352]	; (800f698 <_vfiprintf_r+0x24c>)
 800f538:	f7f0 fe7a 	bl	8000230 <memchr>
 800f53c:	9a04      	ldr	r2, [sp, #16]
 800f53e:	b9d8      	cbnz	r0, 800f578 <_vfiprintf_r+0x12c>
 800f540:	06d1      	lsls	r1, r2, #27
 800f542:	bf44      	itt	mi
 800f544:	2320      	movmi	r3, #32
 800f546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f54a:	0713      	lsls	r3, r2, #28
 800f54c:	bf44      	itt	mi
 800f54e:	232b      	movmi	r3, #43	; 0x2b
 800f550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f554:	f89a 3000 	ldrb.w	r3, [sl]
 800f558:	2b2a      	cmp	r3, #42	; 0x2a
 800f55a:	d015      	beq.n	800f588 <_vfiprintf_r+0x13c>
 800f55c:	9a07      	ldr	r2, [sp, #28]
 800f55e:	4654      	mov	r4, sl
 800f560:	2000      	movs	r0, #0
 800f562:	f04f 0c0a 	mov.w	ip, #10
 800f566:	4621      	mov	r1, r4
 800f568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f56c:	3b30      	subs	r3, #48	; 0x30
 800f56e:	2b09      	cmp	r3, #9
 800f570:	d94e      	bls.n	800f610 <_vfiprintf_r+0x1c4>
 800f572:	b1b0      	cbz	r0, 800f5a2 <_vfiprintf_r+0x156>
 800f574:	9207      	str	r2, [sp, #28]
 800f576:	e014      	b.n	800f5a2 <_vfiprintf_r+0x156>
 800f578:	eba0 0308 	sub.w	r3, r0, r8
 800f57c:	fa09 f303 	lsl.w	r3, r9, r3
 800f580:	4313      	orrs	r3, r2
 800f582:	9304      	str	r3, [sp, #16]
 800f584:	46a2      	mov	sl, r4
 800f586:	e7d2      	b.n	800f52e <_vfiprintf_r+0xe2>
 800f588:	9b03      	ldr	r3, [sp, #12]
 800f58a:	1d19      	adds	r1, r3, #4
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	9103      	str	r1, [sp, #12]
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfbb      	ittet	lt
 800f594:	425b      	neglt	r3, r3
 800f596:	f042 0202 	orrlt.w	r2, r2, #2
 800f59a:	9307      	strge	r3, [sp, #28]
 800f59c:	9307      	strlt	r3, [sp, #28]
 800f59e:	bfb8      	it	lt
 800f5a0:	9204      	strlt	r2, [sp, #16]
 800f5a2:	7823      	ldrb	r3, [r4, #0]
 800f5a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f5a6:	d10c      	bne.n	800f5c2 <_vfiprintf_r+0x176>
 800f5a8:	7863      	ldrb	r3, [r4, #1]
 800f5aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f5ac:	d135      	bne.n	800f61a <_vfiprintf_r+0x1ce>
 800f5ae:	9b03      	ldr	r3, [sp, #12]
 800f5b0:	1d1a      	adds	r2, r3, #4
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	9203      	str	r2, [sp, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bfb8      	it	lt
 800f5ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5be:	3402      	adds	r4, #2
 800f5c0:	9305      	str	r3, [sp, #20]
 800f5c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6a8 <_vfiprintf_r+0x25c>
 800f5c6:	7821      	ldrb	r1, [r4, #0]
 800f5c8:	2203      	movs	r2, #3
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	f7f0 fe30 	bl	8000230 <memchr>
 800f5d0:	b140      	cbz	r0, 800f5e4 <_vfiprintf_r+0x198>
 800f5d2:	2340      	movs	r3, #64	; 0x40
 800f5d4:	eba0 000a 	sub.w	r0, r0, sl
 800f5d8:	fa03 f000 	lsl.w	r0, r3, r0
 800f5dc:	9b04      	ldr	r3, [sp, #16]
 800f5de:	4303      	orrs	r3, r0
 800f5e0:	3401      	adds	r4, #1
 800f5e2:	9304      	str	r3, [sp, #16]
 800f5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5e8:	482c      	ldr	r0, [pc, #176]	; (800f69c <_vfiprintf_r+0x250>)
 800f5ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ee:	2206      	movs	r2, #6
 800f5f0:	f7f0 fe1e 	bl	8000230 <memchr>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d03f      	beq.n	800f678 <_vfiprintf_r+0x22c>
 800f5f8:	4b29      	ldr	r3, [pc, #164]	; (800f6a0 <_vfiprintf_r+0x254>)
 800f5fa:	bb1b      	cbnz	r3, 800f644 <_vfiprintf_r+0x1f8>
 800f5fc:	9b03      	ldr	r3, [sp, #12]
 800f5fe:	3307      	adds	r3, #7
 800f600:	f023 0307 	bic.w	r3, r3, #7
 800f604:	3308      	adds	r3, #8
 800f606:	9303      	str	r3, [sp, #12]
 800f608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f60a:	443b      	add	r3, r7
 800f60c:	9309      	str	r3, [sp, #36]	; 0x24
 800f60e:	e767      	b.n	800f4e0 <_vfiprintf_r+0x94>
 800f610:	fb0c 3202 	mla	r2, ip, r2, r3
 800f614:	460c      	mov	r4, r1
 800f616:	2001      	movs	r0, #1
 800f618:	e7a5      	b.n	800f566 <_vfiprintf_r+0x11a>
 800f61a:	2300      	movs	r3, #0
 800f61c:	3401      	adds	r4, #1
 800f61e:	9305      	str	r3, [sp, #20]
 800f620:	4619      	mov	r1, r3
 800f622:	f04f 0c0a 	mov.w	ip, #10
 800f626:	4620      	mov	r0, r4
 800f628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f62c:	3a30      	subs	r2, #48	; 0x30
 800f62e:	2a09      	cmp	r2, #9
 800f630:	d903      	bls.n	800f63a <_vfiprintf_r+0x1ee>
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0c5      	beq.n	800f5c2 <_vfiprintf_r+0x176>
 800f636:	9105      	str	r1, [sp, #20]
 800f638:	e7c3      	b.n	800f5c2 <_vfiprintf_r+0x176>
 800f63a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f63e:	4604      	mov	r4, r0
 800f640:	2301      	movs	r3, #1
 800f642:	e7f0      	b.n	800f626 <_vfiprintf_r+0x1da>
 800f644:	ab03      	add	r3, sp, #12
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	462a      	mov	r2, r5
 800f64a:	4b16      	ldr	r3, [pc, #88]	; (800f6a4 <_vfiprintf_r+0x258>)
 800f64c:	a904      	add	r1, sp, #16
 800f64e:	4630      	mov	r0, r6
 800f650:	f000 f8cc 	bl	800f7ec <_printf_float>
 800f654:	4607      	mov	r7, r0
 800f656:	1c78      	adds	r0, r7, #1
 800f658:	d1d6      	bne.n	800f608 <_vfiprintf_r+0x1bc>
 800f65a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f65c:	07d9      	lsls	r1, r3, #31
 800f65e:	d405      	bmi.n	800f66c <_vfiprintf_r+0x220>
 800f660:	89ab      	ldrh	r3, [r5, #12]
 800f662:	059a      	lsls	r2, r3, #22
 800f664:	d402      	bmi.n	800f66c <_vfiprintf_r+0x220>
 800f666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f668:	f003 fa50 	bl	8012b0c <__retarget_lock_release_recursive>
 800f66c:	89ab      	ldrh	r3, [r5, #12]
 800f66e:	065b      	lsls	r3, r3, #25
 800f670:	f53f af12 	bmi.w	800f498 <_vfiprintf_r+0x4c>
 800f674:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f676:	e711      	b.n	800f49c <_vfiprintf_r+0x50>
 800f678:	ab03      	add	r3, sp, #12
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	462a      	mov	r2, r5
 800f67e:	4b09      	ldr	r3, [pc, #36]	; (800f6a4 <_vfiprintf_r+0x258>)
 800f680:	a904      	add	r1, sp, #16
 800f682:	4630      	mov	r0, r6
 800f684:	f000 fb56 	bl	800fd34 <_printf_i>
 800f688:	e7e4      	b.n	800f654 <_vfiprintf_r+0x208>
 800f68a:	bf00      	nop
 800f68c:	0802ab3c 	.word	0x0802ab3c
 800f690:	0802ab5c 	.word	0x0802ab5c
 800f694:	0802ab1c 	.word	0x0802ab1c
 800f698:	0802a8cc 	.word	0x0802a8cc
 800f69c:	0802a8d6 	.word	0x0802a8d6
 800f6a0:	0800f7ed 	.word	0x0800f7ed
 800f6a4:	0800f427 	.word	0x0800f427
 800f6a8:	0802a8d2 	.word	0x0802a8d2

0800f6ac <__cvt>:
 800f6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b0:	ec55 4b10 	vmov	r4, r5, d0
 800f6b4:	2d00      	cmp	r5, #0
 800f6b6:	460e      	mov	r6, r1
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	462b      	mov	r3, r5
 800f6bc:	bfbb      	ittet	lt
 800f6be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f6c2:	461d      	movlt	r5, r3
 800f6c4:	2300      	movge	r3, #0
 800f6c6:	232d      	movlt	r3, #45	; 0x2d
 800f6c8:	700b      	strb	r3, [r1, #0]
 800f6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f6d0:	4691      	mov	r9, r2
 800f6d2:	f023 0820 	bic.w	r8, r3, #32
 800f6d6:	bfbc      	itt	lt
 800f6d8:	4622      	movlt	r2, r4
 800f6da:	4614      	movlt	r4, r2
 800f6dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f6e0:	d005      	beq.n	800f6ee <__cvt+0x42>
 800f6e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f6e6:	d100      	bne.n	800f6ea <__cvt+0x3e>
 800f6e8:	3601      	adds	r6, #1
 800f6ea:	2102      	movs	r1, #2
 800f6ec:	e000      	b.n	800f6f0 <__cvt+0x44>
 800f6ee:	2103      	movs	r1, #3
 800f6f0:	ab03      	add	r3, sp, #12
 800f6f2:	9301      	str	r3, [sp, #4]
 800f6f4:	ab02      	add	r3, sp, #8
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	ec45 4b10 	vmov	d0, r4, r5
 800f6fc:	4653      	mov	r3, sl
 800f6fe:	4632      	mov	r2, r6
 800f700:	f001 feea 	bl	80114d8 <_dtoa_r>
 800f704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f708:	4607      	mov	r7, r0
 800f70a:	d102      	bne.n	800f712 <__cvt+0x66>
 800f70c:	f019 0f01 	tst.w	r9, #1
 800f710:	d022      	beq.n	800f758 <__cvt+0xac>
 800f712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f716:	eb07 0906 	add.w	r9, r7, r6
 800f71a:	d110      	bne.n	800f73e <__cvt+0x92>
 800f71c:	783b      	ldrb	r3, [r7, #0]
 800f71e:	2b30      	cmp	r3, #48	; 0x30
 800f720:	d10a      	bne.n	800f738 <__cvt+0x8c>
 800f722:	2200      	movs	r2, #0
 800f724:	2300      	movs	r3, #0
 800f726:	4620      	mov	r0, r4
 800f728:	4629      	mov	r1, r5
 800f72a:	f7f1 f9f5 	bl	8000b18 <__aeabi_dcmpeq>
 800f72e:	b918      	cbnz	r0, 800f738 <__cvt+0x8c>
 800f730:	f1c6 0601 	rsb	r6, r6, #1
 800f734:	f8ca 6000 	str.w	r6, [sl]
 800f738:	f8da 3000 	ldr.w	r3, [sl]
 800f73c:	4499      	add	r9, r3
 800f73e:	2200      	movs	r2, #0
 800f740:	2300      	movs	r3, #0
 800f742:	4620      	mov	r0, r4
 800f744:	4629      	mov	r1, r5
 800f746:	f7f1 f9e7 	bl	8000b18 <__aeabi_dcmpeq>
 800f74a:	b108      	cbz	r0, 800f750 <__cvt+0xa4>
 800f74c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f750:	2230      	movs	r2, #48	; 0x30
 800f752:	9b03      	ldr	r3, [sp, #12]
 800f754:	454b      	cmp	r3, r9
 800f756:	d307      	bcc.n	800f768 <__cvt+0xbc>
 800f758:	9b03      	ldr	r3, [sp, #12]
 800f75a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f75c:	1bdb      	subs	r3, r3, r7
 800f75e:	4638      	mov	r0, r7
 800f760:	6013      	str	r3, [r2, #0]
 800f762:	b004      	add	sp, #16
 800f764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f768:	1c59      	adds	r1, r3, #1
 800f76a:	9103      	str	r1, [sp, #12]
 800f76c:	701a      	strb	r2, [r3, #0]
 800f76e:	e7f0      	b.n	800f752 <__cvt+0xa6>

0800f770 <__exponent>:
 800f770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f772:	4603      	mov	r3, r0
 800f774:	2900      	cmp	r1, #0
 800f776:	bfb8      	it	lt
 800f778:	4249      	neglt	r1, r1
 800f77a:	f803 2b02 	strb.w	r2, [r3], #2
 800f77e:	bfb4      	ite	lt
 800f780:	222d      	movlt	r2, #45	; 0x2d
 800f782:	222b      	movge	r2, #43	; 0x2b
 800f784:	2909      	cmp	r1, #9
 800f786:	7042      	strb	r2, [r0, #1]
 800f788:	dd2a      	ble.n	800f7e0 <__exponent+0x70>
 800f78a:	f10d 0407 	add.w	r4, sp, #7
 800f78e:	46a4      	mov	ip, r4
 800f790:	270a      	movs	r7, #10
 800f792:	46a6      	mov	lr, r4
 800f794:	460a      	mov	r2, r1
 800f796:	fb91 f6f7 	sdiv	r6, r1, r7
 800f79a:	fb07 1516 	mls	r5, r7, r6, r1
 800f79e:	3530      	adds	r5, #48	; 0x30
 800f7a0:	2a63      	cmp	r2, #99	; 0x63
 800f7a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f7a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	dcf1      	bgt.n	800f792 <__exponent+0x22>
 800f7ae:	3130      	adds	r1, #48	; 0x30
 800f7b0:	f1ae 0502 	sub.w	r5, lr, #2
 800f7b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f7b8:	1c44      	adds	r4, r0, #1
 800f7ba:	4629      	mov	r1, r5
 800f7bc:	4561      	cmp	r1, ip
 800f7be:	d30a      	bcc.n	800f7d6 <__exponent+0x66>
 800f7c0:	f10d 0209 	add.w	r2, sp, #9
 800f7c4:	eba2 020e 	sub.w	r2, r2, lr
 800f7c8:	4565      	cmp	r5, ip
 800f7ca:	bf88      	it	hi
 800f7cc:	2200      	movhi	r2, #0
 800f7ce:	4413      	add	r3, r2
 800f7d0:	1a18      	subs	r0, r3, r0
 800f7d2:	b003      	add	sp, #12
 800f7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f7de:	e7ed      	b.n	800f7bc <__exponent+0x4c>
 800f7e0:	2330      	movs	r3, #48	; 0x30
 800f7e2:	3130      	adds	r1, #48	; 0x30
 800f7e4:	7083      	strb	r3, [r0, #2]
 800f7e6:	70c1      	strb	r1, [r0, #3]
 800f7e8:	1d03      	adds	r3, r0, #4
 800f7ea:	e7f1      	b.n	800f7d0 <__exponent+0x60>

0800f7ec <_printf_float>:
 800f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f0:	ed2d 8b02 	vpush	{d8}
 800f7f4:	b08d      	sub	sp, #52	; 0x34
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f7fc:	4616      	mov	r6, r2
 800f7fe:	461f      	mov	r7, r3
 800f800:	4605      	mov	r5, r0
 800f802:	f003 f97d 	bl	8012b00 <_localeconv_r>
 800f806:	f8d0 a000 	ldr.w	sl, [r0]
 800f80a:	4650      	mov	r0, sl
 800f80c:	f7f0 fd08 	bl	8000220 <strlen>
 800f810:	2300      	movs	r3, #0
 800f812:	930a      	str	r3, [sp, #40]	; 0x28
 800f814:	6823      	ldr	r3, [r4, #0]
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	f8d8 3000 	ldr.w	r3, [r8]
 800f81c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f820:	3307      	adds	r3, #7
 800f822:	f023 0307 	bic.w	r3, r3, #7
 800f826:	f103 0208 	add.w	r2, r3, #8
 800f82a:	f8c8 2000 	str.w	r2, [r8]
 800f82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f83a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f83e:	9307      	str	r3, [sp, #28]
 800f840:	f8cd 8018 	str.w	r8, [sp, #24]
 800f844:	ee08 0a10 	vmov	s16, r0
 800f848:	4b9f      	ldr	r3, [pc, #636]	; (800fac8 <_printf_float+0x2dc>)
 800f84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f84e:	f04f 32ff 	mov.w	r2, #4294967295
 800f852:	f7f1 f993 	bl	8000b7c <__aeabi_dcmpun>
 800f856:	bb88      	cbnz	r0, 800f8bc <_printf_float+0xd0>
 800f858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f85c:	4b9a      	ldr	r3, [pc, #616]	; (800fac8 <_printf_float+0x2dc>)
 800f85e:	f04f 32ff 	mov.w	r2, #4294967295
 800f862:	f7f1 f96d 	bl	8000b40 <__aeabi_dcmple>
 800f866:	bb48      	cbnz	r0, 800f8bc <_printf_float+0xd0>
 800f868:	2200      	movs	r2, #0
 800f86a:	2300      	movs	r3, #0
 800f86c:	4640      	mov	r0, r8
 800f86e:	4649      	mov	r1, r9
 800f870:	f7f1 f95c 	bl	8000b2c <__aeabi_dcmplt>
 800f874:	b110      	cbz	r0, 800f87c <_printf_float+0x90>
 800f876:	232d      	movs	r3, #45	; 0x2d
 800f878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f87c:	4b93      	ldr	r3, [pc, #588]	; (800facc <_printf_float+0x2e0>)
 800f87e:	4894      	ldr	r0, [pc, #592]	; (800fad0 <_printf_float+0x2e4>)
 800f880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f884:	bf94      	ite	ls
 800f886:	4698      	movls	r8, r3
 800f888:	4680      	movhi	r8, r0
 800f88a:	2303      	movs	r3, #3
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	9b05      	ldr	r3, [sp, #20]
 800f890:	f023 0204 	bic.w	r2, r3, #4
 800f894:	6022      	str	r2, [r4, #0]
 800f896:	f04f 0900 	mov.w	r9, #0
 800f89a:	9700      	str	r7, [sp, #0]
 800f89c:	4633      	mov	r3, r6
 800f89e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f000 f9d8 	bl	800fc58 <_printf_common>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	f040 8090 	bne.w	800f9ce <_printf_float+0x1e2>
 800f8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b2:	b00d      	add	sp, #52	; 0x34
 800f8b4:	ecbd 8b02 	vpop	{d8}
 800f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8bc:	4642      	mov	r2, r8
 800f8be:	464b      	mov	r3, r9
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	4649      	mov	r1, r9
 800f8c4:	f7f1 f95a 	bl	8000b7c <__aeabi_dcmpun>
 800f8c8:	b140      	cbz	r0, 800f8dc <_printf_float+0xf0>
 800f8ca:	464b      	mov	r3, r9
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	bfbc      	itt	lt
 800f8d0:	232d      	movlt	r3, #45	; 0x2d
 800f8d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f8d6:	487f      	ldr	r0, [pc, #508]	; (800fad4 <_printf_float+0x2e8>)
 800f8d8:	4b7f      	ldr	r3, [pc, #508]	; (800fad8 <_printf_float+0x2ec>)
 800f8da:	e7d1      	b.n	800f880 <_printf_float+0x94>
 800f8dc:	6863      	ldr	r3, [r4, #4]
 800f8de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f8e2:	9206      	str	r2, [sp, #24]
 800f8e4:	1c5a      	adds	r2, r3, #1
 800f8e6:	d13f      	bne.n	800f968 <_printf_float+0x17c>
 800f8e8:	2306      	movs	r3, #6
 800f8ea:	6063      	str	r3, [r4, #4]
 800f8ec:	9b05      	ldr	r3, [sp, #20]
 800f8ee:	6861      	ldr	r1, [r4, #4]
 800f8f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	9303      	str	r3, [sp, #12]
 800f8f8:	ab0a      	add	r3, sp, #40	; 0x28
 800f8fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f8fe:	ab09      	add	r3, sp, #36	; 0x24
 800f900:	ec49 8b10 	vmov	d0, r8, r9
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	6022      	str	r2, [r4, #0]
 800f908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f90c:	4628      	mov	r0, r5
 800f90e:	f7ff fecd 	bl	800f6ac <__cvt>
 800f912:	9b06      	ldr	r3, [sp, #24]
 800f914:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f916:	2b47      	cmp	r3, #71	; 0x47
 800f918:	4680      	mov	r8, r0
 800f91a:	d108      	bne.n	800f92e <_printf_float+0x142>
 800f91c:	1cc8      	adds	r0, r1, #3
 800f91e:	db02      	blt.n	800f926 <_printf_float+0x13a>
 800f920:	6863      	ldr	r3, [r4, #4]
 800f922:	4299      	cmp	r1, r3
 800f924:	dd41      	ble.n	800f9aa <_printf_float+0x1be>
 800f926:	f1ab 0b02 	sub.w	fp, fp, #2
 800f92a:	fa5f fb8b 	uxtb.w	fp, fp
 800f92e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f932:	d820      	bhi.n	800f976 <_printf_float+0x18a>
 800f934:	3901      	subs	r1, #1
 800f936:	465a      	mov	r2, fp
 800f938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f93c:	9109      	str	r1, [sp, #36]	; 0x24
 800f93e:	f7ff ff17 	bl	800f770 <__exponent>
 800f942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f944:	1813      	adds	r3, r2, r0
 800f946:	2a01      	cmp	r2, #1
 800f948:	4681      	mov	r9, r0
 800f94a:	6123      	str	r3, [r4, #16]
 800f94c:	dc02      	bgt.n	800f954 <_printf_float+0x168>
 800f94e:	6822      	ldr	r2, [r4, #0]
 800f950:	07d2      	lsls	r2, r2, #31
 800f952:	d501      	bpl.n	800f958 <_printf_float+0x16c>
 800f954:	3301      	adds	r3, #1
 800f956:	6123      	str	r3, [r4, #16]
 800f958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d09c      	beq.n	800f89a <_printf_float+0xae>
 800f960:	232d      	movs	r3, #45	; 0x2d
 800f962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f966:	e798      	b.n	800f89a <_printf_float+0xae>
 800f968:	9a06      	ldr	r2, [sp, #24]
 800f96a:	2a47      	cmp	r2, #71	; 0x47
 800f96c:	d1be      	bne.n	800f8ec <_printf_float+0x100>
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1bc      	bne.n	800f8ec <_printf_float+0x100>
 800f972:	2301      	movs	r3, #1
 800f974:	e7b9      	b.n	800f8ea <_printf_float+0xfe>
 800f976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f97a:	d118      	bne.n	800f9ae <_printf_float+0x1c2>
 800f97c:	2900      	cmp	r1, #0
 800f97e:	6863      	ldr	r3, [r4, #4]
 800f980:	dd0b      	ble.n	800f99a <_printf_float+0x1ae>
 800f982:	6121      	str	r1, [r4, #16]
 800f984:	b913      	cbnz	r3, 800f98c <_printf_float+0x1a0>
 800f986:	6822      	ldr	r2, [r4, #0]
 800f988:	07d0      	lsls	r0, r2, #31
 800f98a:	d502      	bpl.n	800f992 <_printf_float+0x1a6>
 800f98c:	3301      	adds	r3, #1
 800f98e:	440b      	add	r3, r1
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	65a1      	str	r1, [r4, #88]	; 0x58
 800f994:	f04f 0900 	mov.w	r9, #0
 800f998:	e7de      	b.n	800f958 <_printf_float+0x16c>
 800f99a:	b913      	cbnz	r3, 800f9a2 <_printf_float+0x1b6>
 800f99c:	6822      	ldr	r2, [r4, #0]
 800f99e:	07d2      	lsls	r2, r2, #31
 800f9a0:	d501      	bpl.n	800f9a6 <_printf_float+0x1ba>
 800f9a2:	3302      	adds	r3, #2
 800f9a4:	e7f4      	b.n	800f990 <_printf_float+0x1a4>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e7f2      	b.n	800f990 <_printf_float+0x1a4>
 800f9aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	db05      	blt.n	800f9c0 <_printf_float+0x1d4>
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	6121      	str	r1, [r4, #16]
 800f9b8:	07d8      	lsls	r0, r3, #31
 800f9ba:	d5ea      	bpl.n	800f992 <_printf_float+0x1a6>
 800f9bc:	1c4b      	adds	r3, r1, #1
 800f9be:	e7e7      	b.n	800f990 <_printf_float+0x1a4>
 800f9c0:	2900      	cmp	r1, #0
 800f9c2:	bfd4      	ite	le
 800f9c4:	f1c1 0202 	rsble	r2, r1, #2
 800f9c8:	2201      	movgt	r2, #1
 800f9ca:	4413      	add	r3, r2
 800f9cc:	e7e0      	b.n	800f990 <_printf_float+0x1a4>
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	055a      	lsls	r2, r3, #21
 800f9d2:	d407      	bmi.n	800f9e4 <_printf_float+0x1f8>
 800f9d4:	6923      	ldr	r3, [r4, #16]
 800f9d6:	4642      	mov	r2, r8
 800f9d8:	4631      	mov	r1, r6
 800f9da:	4628      	mov	r0, r5
 800f9dc:	47b8      	blx	r7
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d12c      	bne.n	800fa3c <_printf_float+0x250>
 800f9e2:	e764      	b.n	800f8ae <_printf_float+0xc2>
 800f9e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f9e8:	f240 80e0 	bls.w	800fbac <_printf_float+0x3c0>
 800f9ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	f7f1 f890 	bl	8000b18 <__aeabi_dcmpeq>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d034      	beq.n	800fa66 <_printf_float+0x27a>
 800f9fc:	4a37      	ldr	r2, [pc, #220]	; (800fadc <_printf_float+0x2f0>)
 800f9fe:	2301      	movs	r3, #1
 800fa00:	4631      	mov	r1, r6
 800fa02:	4628      	mov	r0, r5
 800fa04:	47b8      	blx	r7
 800fa06:	3001      	adds	r0, #1
 800fa08:	f43f af51 	beq.w	800f8ae <_printf_float+0xc2>
 800fa0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa10:	429a      	cmp	r2, r3
 800fa12:	db02      	blt.n	800fa1a <_printf_float+0x22e>
 800fa14:	6823      	ldr	r3, [r4, #0]
 800fa16:	07d8      	lsls	r0, r3, #31
 800fa18:	d510      	bpl.n	800fa3c <_printf_float+0x250>
 800fa1a:	ee18 3a10 	vmov	r3, s16
 800fa1e:	4652      	mov	r2, sl
 800fa20:	4631      	mov	r1, r6
 800fa22:	4628      	mov	r0, r5
 800fa24:	47b8      	blx	r7
 800fa26:	3001      	adds	r0, #1
 800fa28:	f43f af41 	beq.w	800f8ae <_printf_float+0xc2>
 800fa2c:	f04f 0800 	mov.w	r8, #0
 800fa30:	f104 091a 	add.w	r9, r4, #26
 800fa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa36:	3b01      	subs	r3, #1
 800fa38:	4543      	cmp	r3, r8
 800fa3a:	dc09      	bgt.n	800fa50 <_printf_float+0x264>
 800fa3c:	6823      	ldr	r3, [r4, #0]
 800fa3e:	079b      	lsls	r3, r3, #30
 800fa40:	f100 8105 	bmi.w	800fc4e <_printf_float+0x462>
 800fa44:	68e0      	ldr	r0, [r4, #12]
 800fa46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa48:	4298      	cmp	r0, r3
 800fa4a:	bfb8      	it	lt
 800fa4c:	4618      	movlt	r0, r3
 800fa4e:	e730      	b.n	800f8b2 <_printf_float+0xc6>
 800fa50:	2301      	movs	r3, #1
 800fa52:	464a      	mov	r2, r9
 800fa54:	4631      	mov	r1, r6
 800fa56:	4628      	mov	r0, r5
 800fa58:	47b8      	blx	r7
 800fa5a:	3001      	adds	r0, #1
 800fa5c:	f43f af27 	beq.w	800f8ae <_printf_float+0xc2>
 800fa60:	f108 0801 	add.w	r8, r8, #1
 800fa64:	e7e6      	b.n	800fa34 <_printf_float+0x248>
 800fa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	dc39      	bgt.n	800fae0 <_printf_float+0x2f4>
 800fa6c:	4a1b      	ldr	r2, [pc, #108]	; (800fadc <_printf_float+0x2f0>)
 800fa6e:	2301      	movs	r3, #1
 800fa70:	4631      	mov	r1, r6
 800fa72:	4628      	mov	r0, r5
 800fa74:	47b8      	blx	r7
 800fa76:	3001      	adds	r0, #1
 800fa78:	f43f af19 	beq.w	800f8ae <_printf_float+0xc2>
 800fa7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa80:	4313      	orrs	r3, r2
 800fa82:	d102      	bne.n	800fa8a <_printf_float+0x29e>
 800fa84:	6823      	ldr	r3, [r4, #0]
 800fa86:	07d9      	lsls	r1, r3, #31
 800fa88:	d5d8      	bpl.n	800fa3c <_printf_float+0x250>
 800fa8a:	ee18 3a10 	vmov	r3, s16
 800fa8e:	4652      	mov	r2, sl
 800fa90:	4631      	mov	r1, r6
 800fa92:	4628      	mov	r0, r5
 800fa94:	47b8      	blx	r7
 800fa96:	3001      	adds	r0, #1
 800fa98:	f43f af09 	beq.w	800f8ae <_printf_float+0xc2>
 800fa9c:	f04f 0900 	mov.w	r9, #0
 800faa0:	f104 0a1a 	add.w	sl, r4, #26
 800faa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa6:	425b      	negs	r3, r3
 800faa8:	454b      	cmp	r3, r9
 800faaa:	dc01      	bgt.n	800fab0 <_printf_float+0x2c4>
 800faac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faae:	e792      	b.n	800f9d6 <_printf_float+0x1ea>
 800fab0:	2301      	movs	r3, #1
 800fab2:	4652      	mov	r2, sl
 800fab4:	4631      	mov	r1, r6
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b8      	blx	r7
 800faba:	3001      	adds	r0, #1
 800fabc:	f43f aef7 	beq.w	800f8ae <_printf_float+0xc2>
 800fac0:	f109 0901 	add.w	r9, r9, #1
 800fac4:	e7ee      	b.n	800faa4 <_printf_float+0x2b8>
 800fac6:	bf00      	nop
 800fac8:	7fefffff 	.word	0x7fefffff
 800facc:	0802a8dd 	.word	0x0802a8dd
 800fad0:	0802a8e1 	.word	0x0802a8e1
 800fad4:	0802a8e9 	.word	0x0802a8e9
 800fad8:	0802a8e5 	.word	0x0802a8e5
 800fadc:	0802a8ed 	.word	0x0802a8ed
 800fae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fae4:	429a      	cmp	r2, r3
 800fae6:	bfa8      	it	ge
 800fae8:	461a      	movge	r2, r3
 800faea:	2a00      	cmp	r2, #0
 800faec:	4691      	mov	r9, r2
 800faee:	dc37      	bgt.n	800fb60 <_printf_float+0x374>
 800faf0:	f04f 0b00 	mov.w	fp, #0
 800faf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800faf8:	f104 021a 	add.w	r2, r4, #26
 800fafc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	eba3 0309 	sub.w	r3, r3, r9
 800fb04:	455b      	cmp	r3, fp
 800fb06:	dc33      	bgt.n	800fb70 <_printf_float+0x384>
 800fb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	db3b      	blt.n	800fb88 <_printf_float+0x39c>
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	07da      	lsls	r2, r3, #31
 800fb14:	d438      	bmi.n	800fb88 <_printf_float+0x39c>
 800fb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb18:	9a05      	ldr	r2, [sp, #20]
 800fb1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb1c:	1a9a      	subs	r2, r3, r2
 800fb1e:	eba3 0901 	sub.w	r9, r3, r1
 800fb22:	4591      	cmp	r9, r2
 800fb24:	bfa8      	it	ge
 800fb26:	4691      	movge	r9, r2
 800fb28:	f1b9 0f00 	cmp.w	r9, #0
 800fb2c:	dc35      	bgt.n	800fb9a <_printf_float+0x3ae>
 800fb2e:	f04f 0800 	mov.w	r8, #0
 800fb32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb36:	f104 0a1a 	add.w	sl, r4, #26
 800fb3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb3e:	1a9b      	subs	r3, r3, r2
 800fb40:	eba3 0309 	sub.w	r3, r3, r9
 800fb44:	4543      	cmp	r3, r8
 800fb46:	f77f af79 	ble.w	800fa3c <_printf_float+0x250>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	4631      	mov	r1, r6
 800fb50:	4628      	mov	r0, r5
 800fb52:	47b8      	blx	r7
 800fb54:	3001      	adds	r0, #1
 800fb56:	f43f aeaa 	beq.w	800f8ae <_printf_float+0xc2>
 800fb5a:	f108 0801 	add.w	r8, r8, #1
 800fb5e:	e7ec      	b.n	800fb3a <_printf_float+0x34e>
 800fb60:	4613      	mov	r3, r2
 800fb62:	4631      	mov	r1, r6
 800fb64:	4642      	mov	r2, r8
 800fb66:	4628      	mov	r0, r5
 800fb68:	47b8      	blx	r7
 800fb6a:	3001      	adds	r0, #1
 800fb6c:	d1c0      	bne.n	800faf0 <_printf_float+0x304>
 800fb6e:	e69e      	b.n	800f8ae <_printf_float+0xc2>
 800fb70:	2301      	movs	r3, #1
 800fb72:	4631      	mov	r1, r6
 800fb74:	4628      	mov	r0, r5
 800fb76:	9205      	str	r2, [sp, #20]
 800fb78:	47b8      	blx	r7
 800fb7a:	3001      	adds	r0, #1
 800fb7c:	f43f ae97 	beq.w	800f8ae <_printf_float+0xc2>
 800fb80:	9a05      	ldr	r2, [sp, #20]
 800fb82:	f10b 0b01 	add.w	fp, fp, #1
 800fb86:	e7b9      	b.n	800fafc <_printf_float+0x310>
 800fb88:	ee18 3a10 	vmov	r3, s16
 800fb8c:	4652      	mov	r2, sl
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4628      	mov	r0, r5
 800fb92:	47b8      	blx	r7
 800fb94:	3001      	adds	r0, #1
 800fb96:	d1be      	bne.n	800fb16 <_printf_float+0x32a>
 800fb98:	e689      	b.n	800f8ae <_printf_float+0xc2>
 800fb9a:	9a05      	ldr	r2, [sp, #20]
 800fb9c:	464b      	mov	r3, r9
 800fb9e:	4442      	add	r2, r8
 800fba0:	4631      	mov	r1, r6
 800fba2:	4628      	mov	r0, r5
 800fba4:	47b8      	blx	r7
 800fba6:	3001      	adds	r0, #1
 800fba8:	d1c1      	bne.n	800fb2e <_printf_float+0x342>
 800fbaa:	e680      	b.n	800f8ae <_printf_float+0xc2>
 800fbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbae:	2a01      	cmp	r2, #1
 800fbb0:	dc01      	bgt.n	800fbb6 <_printf_float+0x3ca>
 800fbb2:	07db      	lsls	r3, r3, #31
 800fbb4:	d538      	bpl.n	800fc28 <_printf_float+0x43c>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	4642      	mov	r2, r8
 800fbba:	4631      	mov	r1, r6
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	47b8      	blx	r7
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	f43f ae74 	beq.w	800f8ae <_printf_float+0xc2>
 800fbc6:	ee18 3a10 	vmov	r3, s16
 800fbca:	4652      	mov	r2, sl
 800fbcc:	4631      	mov	r1, r6
 800fbce:	4628      	mov	r0, r5
 800fbd0:	47b8      	blx	r7
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	f43f ae6b 	beq.w	800f8ae <_printf_float+0xc2>
 800fbd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fbdc:	2200      	movs	r2, #0
 800fbde:	2300      	movs	r3, #0
 800fbe0:	f7f0 ff9a 	bl	8000b18 <__aeabi_dcmpeq>
 800fbe4:	b9d8      	cbnz	r0, 800fc1e <_printf_float+0x432>
 800fbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbe8:	f108 0201 	add.w	r2, r8, #1
 800fbec:	3b01      	subs	r3, #1
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	47b8      	blx	r7
 800fbf4:	3001      	adds	r0, #1
 800fbf6:	d10e      	bne.n	800fc16 <_printf_float+0x42a>
 800fbf8:	e659      	b.n	800f8ae <_printf_float+0xc2>
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	4652      	mov	r2, sl
 800fbfe:	4631      	mov	r1, r6
 800fc00:	4628      	mov	r0, r5
 800fc02:	47b8      	blx	r7
 800fc04:	3001      	adds	r0, #1
 800fc06:	f43f ae52 	beq.w	800f8ae <_printf_float+0xc2>
 800fc0a:	f108 0801 	add.w	r8, r8, #1
 800fc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc10:	3b01      	subs	r3, #1
 800fc12:	4543      	cmp	r3, r8
 800fc14:	dcf1      	bgt.n	800fbfa <_printf_float+0x40e>
 800fc16:	464b      	mov	r3, r9
 800fc18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fc1c:	e6dc      	b.n	800f9d8 <_printf_float+0x1ec>
 800fc1e:	f04f 0800 	mov.w	r8, #0
 800fc22:	f104 0a1a 	add.w	sl, r4, #26
 800fc26:	e7f2      	b.n	800fc0e <_printf_float+0x422>
 800fc28:	2301      	movs	r3, #1
 800fc2a:	4642      	mov	r2, r8
 800fc2c:	e7df      	b.n	800fbee <_printf_float+0x402>
 800fc2e:	2301      	movs	r3, #1
 800fc30:	464a      	mov	r2, r9
 800fc32:	4631      	mov	r1, r6
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b8      	blx	r7
 800fc38:	3001      	adds	r0, #1
 800fc3a:	f43f ae38 	beq.w	800f8ae <_printf_float+0xc2>
 800fc3e:	f108 0801 	add.w	r8, r8, #1
 800fc42:	68e3      	ldr	r3, [r4, #12]
 800fc44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc46:	1a5b      	subs	r3, r3, r1
 800fc48:	4543      	cmp	r3, r8
 800fc4a:	dcf0      	bgt.n	800fc2e <_printf_float+0x442>
 800fc4c:	e6fa      	b.n	800fa44 <_printf_float+0x258>
 800fc4e:	f04f 0800 	mov.w	r8, #0
 800fc52:	f104 0919 	add.w	r9, r4, #25
 800fc56:	e7f4      	b.n	800fc42 <_printf_float+0x456>

0800fc58 <_printf_common>:
 800fc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc5c:	4616      	mov	r6, r2
 800fc5e:	4699      	mov	r9, r3
 800fc60:	688a      	ldr	r2, [r1, #8]
 800fc62:	690b      	ldr	r3, [r1, #16]
 800fc64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	bfb8      	it	lt
 800fc6c:	4613      	movlt	r3, r2
 800fc6e:	6033      	str	r3, [r6, #0]
 800fc70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc74:	4607      	mov	r7, r0
 800fc76:	460c      	mov	r4, r1
 800fc78:	b10a      	cbz	r2, 800fc7e <_printf_common+0x26>
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	6033      	str	r3, [r6, #0]
 800fc7e:	6823      	ldr	r3, [r4, #0]
 800fc80:	0699      	lsls	r1, r3, #26
 800fc82:	bf42      	ittt	mi
 800fc84:	6833      	ldrmi	r3, [r6, #0]
 800fc86:	3302      	addmi	r3, #2
 800fc88:	6033      	strmi	r3, [r6, #0]
 800fc8a:	6825      	ldr	r5, [r4, #0]
 800fc8c:	f015 0506 	ands.w	r5, r5, #6
 800fc90:	d106      	bne.n	800fca0 <_printf_common+0x48>
 800fc92:	f104 0a19 	add.w	sl, r4, #25
 800fc96:	68e3      	ldr	r3, [r4, #12]
 800fc98:	6832      	ldr	r2, [r6, #0]
 800fc9a:	1a9b      	subs	r3, r3, r2
 800fc9c:	42ab      	cmp	r3, r5
 800fc9e:	dc26      	bgt.n	800fcee <_printf_common+0x96>
 800fca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fca4:	1e13      	subs	r3, r2, #0
 800fca6:	6822      	ldr	r2, [r4, #0]
 800fca8:	bf18      	it	ne
 800fcaa:	2301      	movne	r3, #1
 800fcac:	0692      	lsls	r2, r2, #26
 800fcae:	d42b      	bmi.n	800fd08 <_printf_common+0xb0>
 800fcb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcb4:	4649      	mov	r1, r9
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	47c0      	blx	r8
 800fcba:	3001      	adds	r0, #1
 800fcbc:	d01e      	beq.n	800fcfc <_printf_common+0xa4>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	68e5      	ldr	r5, [r4, #12]
 800fcc2:	6832      	ldr	r2, [r6, #0]
 800fcc4:	f003 0306 	and.w	r3, r3, #6
 800fcc8:	2b04      	cmp	r3, #4
 800fcca:	bf08      	it	eq
 800fccc:	1aad      	subeq	r5, r5, r2
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	6922      	ldr	r2, [r4, #16]
 800fcd2:	bf0c      	ite	eq
 800fcd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcd8:	2500      	movne	r5, #0
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	bfc4      	itt	gt
 800fcde:	1a9b      	subgt	r3, r3, r2
 800fce0:	18ed      	addgt	r5, r5, r3
 800fce2:	2600      	movs	r6, #0
 800fce4:	341a      	adds	r4, #26
 800fce6:	42b5      	cmp	r5, r6
 800fce8:	d11a      	bne.n	800fd20 <_printf_common+0xc8>
 800fcea:	2000      	movs	r0, #0
 800fcec:	e008      	b.n	800fd00 <_printf_common+0xa8>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	4652      	mov	r2, sl
 800fcf2:	4649      	mov	r1, r9
 800fcf4:	4638      	mov	r0, r7
 800fcf6:	47c0      	blx	r8
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d103      	bne.n	800fd04 <_printf_common+0xac>
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd04:	3501      	adds	r5, #1
 800fd06:	e7c6      	b.n	800fc96 <_printf_common+0x3e>
 800fd08:	18e1      	adds	r1, r4, r3
 800fd0a:	1c5a      	adds	r2, r3, #1
 800fd0c:	2030      	movs	r0, #48	; 0x30
 800fd0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd12:	4422      	add	r2, r4
 800fd14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd1c:	3302      	adds	r3, #2
 800fd1e:	e7c7      	b.n	800fcb0 <_printf_common+0x58>
 800fd20:	2301      	movs	r3, #1
 800fd22:	4622      	mov	r2, r4
 800fd24:	4649      	mov	r1, r9
 800fd26:	4638      	mov	r0, r7
 800fd28:	47c0      	blx	r8
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	d0e6      	beq.n	800fcfc <_printf_common+0xa4>
 800fd2e:	3601      	adds	r6, #1
 800fd30:	e7d9      	b.n	800fce6 <_printf_common+0x8e>
	...

0800fd34 <_printf_i>:
 800fd34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd38:	7e0f      	ldrb	r7, [r1, #24]
 800fd3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd3c:	2f78      	cmp	r7, #120	; 0x78
 800fd3e:	4691      	mov	r9, r2
 800fd40:	4680      	mov	r8, r0
 800fd42:	460c      	mov	r4, r1
 800fd44:	469a      	mov	sl, r3
 800fd46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd4a:	d807      	bhi.n	800fd5c <_printf_i+0x28>
 800fd4c:	2f62      	cmp	r7, #98	; 0x62
 800fd4e:	d80a      	bhi.n	800fd66 <_printf_i+0x32>
 800fd50:	2f00      	cmp	r7, #0
 800fd52:	f000 80d8 	beq.w	800ff06 <_printf_i+0x1d2>
 800fd56:	2f58      	cmp	r7, #88	; 0x58
 800fd58:	f000 80a3 	beq.w	800fea2 <_printf_i+0x16e>
 800fd5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd64:	e03a      	b.n	800fddc <_printf_i+0xa8>
 800fd66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd6a:	2b15      	cmp	r3, #21
 800fd6c:	d8f6      	bhi.n	800fd5c <_printf_i+0x28>
 800fd6e:	a101      	add	r1, pc, #4	; (adr r1, 800fd74 <_printf_i+0x40>)
 800fd70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd74:	0800fdcd 	.word	0x0800fdcd
 800fd78:	0800fde1 	.word	0x0800fde1
 800fd7c:	0800fd5d 	.word	0x0800fd5d
 800fd80:	0800fd5d 	.word	0x0800fd5d
 800fd84:	0800fd5d 	.word	0x0800fd5d
 800fd88:	0800fd5d 	.word	0x0800fd5d
 800fd8c:	0800fde1 	.word	0x0800fde1
 800fd90:	0800fd5d 	.word	0x0800fd5d
 800fd94:	0800fd5d 	.word	0x0800fd5d
 800fd98:	0800fd5d 	.word	0x0800fd5d
 800fd9c:	0800fd5d 	.word	0x0800fd5d
 800fda0:	0800feed 	.word	0x0800feed
 800fda4:	0800fe11 	.word	0x0800fe11
 800fda8:	0800fecf 	.word	0x0800fecf
 800fdac:	0800fd5d 	.word	0x0800fd5d
 800fdb0:	0800fd5d 	.word	0x0800fd5d
 800fdb4:	0800ff0f 	.word	0x0800ff0f
 800fdb8:	0800fd5d 	.word	0x0800fd5d
 800fdbc:	0800fe11 	.word	0x0800fe11
 800fdc0:	0800fd5d 	.word	0x0800fd5d
 800fdc4:	0800fd5d 	.word	0x0800fd5d
 800fdc8:	0800fed7 	.word	0x0800fed7
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	1d1a      	adds	r2, r3, #4
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	602a      	str	r2, [r5, #0]
 800fdd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fddc:	2301      	movs	r3, #1
 800fdde:	e0a3      	b.n	800ff28 <_printf_i+0x1f4>
 800fde0:	6820      	ldr	r0, [r4, #0]
 800fde2:	6829      	ldr	r1, [r5, #0]
 800fde4:	0606      	lsls	r6, r0, #24
 800fde6:	f101 0304 	add.w	r3, r1, #4
 800fdea:	d50a      	bpl.n	800fe02 <_printf_i+0xce>
 800fdec:	680e      	ldr	r6, [r1, #0]
 800fdee:	602b      	str	r3, [r5, #0]
 800fdf0:	2e00      	cmp	r6, #0
 800fdf2:	da03      	bge.n	800fdfc <_printf_i+0xc8>
 800fdf4:	232d      	movs	r3, #45	; 0x2d
 800fdf6:	4276      	negs	r6, r6
 800fdf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdfc:	485e      	ldr	r0, [pc, #376]	; (800ff78 <_printf_i+0x244>)
 800fdfe:	230a      	movs	r3, #10
 800fe00:	e019      	b.n	800fe36 <_printf_i+0x102>
 800fe02:	680e      	ldr	r6, [r1, #0]
 800fe04:	602b      	str	r3, [r5, #0]
 800fe06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe0a:	bf18      	it	ne
 800fe0c:	b236      	sxthne	r6, r6
 800fe0e:	e7ef      	b.n	800fdf0 <_printf_i+0xbc>
 800fe10:	682b      	ldr	r3, [r5, #0]
 800fe12:	6820      	ldr	r0, [r4, #0]
 800fe14:	1d19      	adds	r1, r3, #4
 800fe16:	6029      	str	r1, [r5, #0]
 800fe18:	0601      	lsls	r1, r0, #24
 800fe1a:	d501      	bpl.n	800fe20 <_printf_i+0xec>
 800fe1c:	681e      	ldr	r6, [r3, #0]
 800fe1e:	e002      	b.n	800fe26 <_printf_i+0xf2>
 800fe20:	0646      	lsls	r6, r0, #25
 800fe22:	d5fb      	bpl.n	800fe1c <_printf_i+0xe8>
 800fe24:	881e      	ldrh	r6, [r3, #0]
 800fe26:	4854      	ldr	r0, [pc, #336]	; (800ff78 <_printf_i+0x244>)
 800fe28:	2f6f      	cmp	r7, #111	; 0x6f
 800fe2a:	bf0c      	ite	eq
 800fe2c:	2308      	moveq	r3, #8
 800fe2e:	230a      	movne	r3, #10
 800fe30:	2100      	movs	r1, #0
 800fe32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe36:	6865      	ldr	r5, [r4, #4]
 800fe38:	60a5      	str	r5, [r4, #8]
 800fe3a:	2d00      	cmp	r5, #0
 800fe3c:	bfa2      	ittt	ge
 800fe3e:	6821      	ldrge	r1, [r4, #0]
 800fe40:	f021 0104 	bicge.w	r1, r1, #4
 800fe44:	6021      	strge	r1, [r4, #0]
 800fe46:	b90e      	cbnz	r6, 800fe4c <_printf_i+0x118>
 800fe48:	2d00      	cmp	r5, #0
 800fe4a:	d04d      	beq.n	800fee8 <_printf_i+0x1b4>
 800fe4c:	4615      	mov	r5, r2
 800fe4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe52:	fb03 6711 	mls	r7, r3, r1, r6
 800fe56:	5dc7      	ldrb	r7, [r0, r7]
 800fe58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe5c:	4637      	mov	r7, r6
 800fe5e:	42bb      	cmp	r3, r7
 800fe60:	460e      	mov	r6, r1
 800fe62:	d9f4      	bls.n	800fe4e <_printf_i+0x11a>
 800fe64:	2b08      	cmp	r3, #8
 800fe66:	d10b      	bne.n	800fe80 <_printf_i+0x14c>
 800fe68:	6823      	ldr	r3, [r4, #0]
 800fe6a:	07de      	lsls	r6, r3, #31
 800fe6c:	d508      	bpl.n	800fe80 <_printf_i+0x14c>
 800fe6e:	6923      	ldr	r3, [r4, #16]
 800fe70:	6861      	ldr	r1, [r4, #4]
 800fe72:	4299      	cmp	r1, r3
 800fe74:	bfde      	ittt	le
 800fe76:	2330      	movle	r3, #48	; 0x30
 800fe78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe80:	1b52      	subs	r2, r2, r5
 800fe82:	6122      	str	r2, [r4, #16]
 800fe84:	f8cd a000 	str.w	sl, [sp]
 800fe88:	464b      	mov	r3, r9
 800fe8a:	aa03      	add	r2, sp, #12
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4640      	mov	r0, r8
 800fe90:	f7ff fee2 	bl	800fc58 <_printf_common>
 800fe94:	3001      	adds	r0, #1
 800fe96:	d14c      	bne.n	800ff32 <_printf_i+0x1fe>
 800fe98:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9c:	b004      	add	sp, #16
 800fe9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fea2:	4835      	ldr	r0, [pc, #212]	; (800ff78 <_printf_i+0x244>)
 800fea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fea8:	6829      	ldr	r1, [r5, #0]
 800feaa:	6823      	ldr	r3, [r4, #0]
 800feac:	f851 6b04 	ldr.w	r6, [r1], #4
 800feb0:	6029      	str	r1, [r5, #0]
 800feb2:	061d      	lsls	r5, r3, #24
 800feb4:	d514      	bpl.n	800fee0 <_printf_i+0x1ac>
 800feb6:	07df      	lsls	r7, r3, #31
 800feb8:	bf44      	itt	mi
 800feba:	f043 0320 	orrmi.w	r3, r3, #32
 800febe:	6023      	strmi	r3, [r4, #0]
 800fec0:	b91e      	cbnz	r6, 800feca <_printf_i+0x196>
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	f023 0320 	bic.w	r3, r3, #32
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	2310      	movs	r3, #16
 800fecc:	e7b0      	b.n	800fe30 <_printf_i+0xfc>
 800fece:	6823      	ldr	r3, [r4, #0]
 800fed0:	f043 0320 	orr.w	r3, r3, #32
 800fed4:	6023      	str	r3, [r4, #0]
 800fed6:	2378      	movs	r3, #120	; 0x78
 800fed8:	4828      	ldr	r0, [pc, #160]	; (800ff7c <_printf_i+0x248>)
 800feda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fede:	e7e3      	b.n	800fea8 <_printf_i+0x174>
 800fee0:	0659      	lsls	r1, r3, #25
 800fee2:	bf48      	it	mi
 800fee4:	b2b6      	uxthmi	r6, r6
 800fee6:	e7e6      	b.n	800feb6 <_printf_i+0x182>
 800fee8:	4615      	mov	r5, r2
 800feea:	e7bb      	b.n	800fe64 <_printf_i+0x130>
 800feec:	682b      	ldr	r3, [r5, #0]
 800feee:	6826      	ldr	r6, [r4, #0]
 800fef0:	6961      	ldr	r1, [r4, #20]
 800fef2:	1d18      	adds	r0, r3, #4
 800fef4:	6028      	str	r0, [r5, #0]
 800fef6:	0635      	lsls	r5, r6, #24
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	d501      	bpl.n	800ff00 <_printf_i+0x1cc>
 800fefc:	6019      	str	r1, [r3, #0]
 800fefe:	e002      	b.n	800ff06 <_printf_i+0x1d2>
 800ff00:	0670      	lsls	r0, r6, #25
 800ff02:	d5fb      	bpl.n	800fefc <_printf_i+0x1c8>
 800ff04:	8019      	strh	r1, [r3, #0]
 800ff06:	2300      	movs	r3, #0
 800ff08:	6123      	str	r3, [r4, #16]
 800ff0a:	4615      	mov	r5, r2
 800ff0c:	e7ba      	b.n	800fe84 <_printf_i+0x150>
 800ff0e:	682b      	ldr	r3, [r5, #0]
 800ff10:	1d1a      	adds	r2, r3, #4
 800ff12:	602a      	str	r2, [r5, #0]
 800ff14:	681d      	ldr	r5, [r3, #0]
 800ff16:	6862      	ldr	r2, [r4, #4]
 800ff18:	2100      	movs	r1, #0
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	f7f0 f988 	bl	8000230 <memchr>
 800ff20:	b108      	cbz	r0, 800ff26 <_printf_i+0x1f2>
 800ff22:	1b40      	subs	r0, r0, r5
 800ff24:	6060      	str	r0, [r4, #4]
 800ff26:	6863      	ldr	r3, [r4, #4]
 800ff28:	6123      	str	r3, [r4, #16]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff30:	e7a8      	b.n	800fe84 <_printf_i+0x150>
 800ff32:	6923      	ldr	r3, [r4, #16]
 800ff34:	462a      	mov	r2, r5
 800ff36:	4649      	mov	r1, r9
 800ff38:	4640      	mov	r0, r8
 800ff3a:	47d0      	blx	sl
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	d0ab      	beq.n	800fe98 <_printf_i+0x164>
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	079b      	lsls	r3, r3, #30
 800ff44:	d413      	bmi.n	800ff6e <_printf_i+0x23a>
 800ff46:	68e0      	ldr	r0, [r4, #12]
 800ff48:	9b03      	ldr	r3, [sp, #12]
 800ff4a:	4298      	cmp	r0, r3
 800ff4c:	bfb8      	it	lt
 800ff4e:	4618      	movlt	r0, r3
 800ff50:	e7a4      	b.n	800fe9c <_printf_i+0x168>
 800ff52:	2301      	movs	r3, #1
 800ff54:	4632      	mov	r2, r6
 800ff56:	4649      	mov	r1, r9
 800ff58:	4640      	mov	r0, r8
 800ff5a:	47d0      	blx	sl
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d09b      	beq.n	800fe98 <_printf_i+0x164>
 800ff60:	3501      	adds	r5, #1
 800ff62:	68e3      	ldr	r3, [r4, #12]
 800ff64:	9903      	ldr	r1, [sp, #12]
 800ff66:	1a5b      	subs	r3, r3, r1
 800ff68:	42ab      	cmp	r3, r5
 800ff6a:	dcf2      	bgt.n	800ff52 <_printf_i+0x21e>
 800ff6c:	e7eb      	b.n	800ff46 <_printf_i+0x212>
 800ff6e:	2500      	movs	r5, #0
 800ff70:	f104 0619 	add.w	r6, r4, #25
 800ff74:	e7f5      	b.n	800ff62 <_printf_i+0x22e>
 800ff76:	bf00      	nop
 800ff78:	0802a8ef 	.word	0x0802a8ef
 800ff7c:	0802a900 	.word	0x0802a900

0800ff80 <_scanf_float>:
 800ff80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff84:	b087      	sub	sp, #28
 800ff86:	4617      	mov	r7, r2
 800ff88:	9303      	str	r3, [sp, #12]
 800ff8a:	688b      	ldr	r3, [r1, #8]
 800ff8c:	1e5a      	subs	r2, r3, #1
 800ff8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ff92:	bf83      	ittte	hi
 800ff94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ff98:	195b      	addhi	r3, r3, r5
 800ff9a:	9302      	strhi	r3, [sp, #8]
 800ff9c:	2300      	movls	r3, #0
 800ff9e:	bf86      	itte	hi
 800ffa0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ffa4:	608b      	strhi	r3, [r1, #8]
 800ffa6:	9302      	strls	r3, [sp, #8]
 800ffa8:	680b      	ldr	r3, [r1, #0]
 800ffaa:	468b      	mov	fp, r1
 800ffac:	2500      	movs	r5, #0
 800ffae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ffb2:	f84b 3b1c 	str.w	r3, [fp], #28
 800ffb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ffba:	4680      	mov	r8, r0
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	465e      	mov	r6, fp
 800ffc0:	46aa      	mov	sl, r5
 800ffc2:	46a9      	mov	r9, r5
 800ffc4:	9501      	str	r5, [sp, #4]
 800ffc6:	68a2      	ldr	r2, [r4, #8]
 800ffc8:	b152      	cbz	r2, 800ffe0 <_scanf_float+0x60>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b4e      	cmp	r3, #78	; 0x4e
 800ffd0:	d864      	bhi.n	801009c <_scanf_float+0x11c>
 800ffd2:	2b40      	cmp	r3, #64	; 0x40
 800ffd4:	d83c      	bhi.n	8010050 <_scanf_float+0xd0>
 800ffd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ffda:	b2c8      	uxtb	r0, r1
 800ffdc:	280e      	cmp	r0, #14
 800ffde:	d93a      	bls.n	8010056 <_scanf_float+0xd6>
 800ffe0:	f1b9 0f00 	cmp.w	r9, #0
 800ffe4:	d003      	beq.n	800ffee <_scanf_float+0x6e>
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fff2:	f1ba 0f01 	cmp.w	sl, #1
 800fff6:	f200 8113 	bhi.w	8010220 <_scanf_float+0x2a0>
 800fffa:	455e      	cmp	r6, fp
 800fffc:	f200 8105 	bhi.w	801020a <_scanf_float+0x28a>
 8010000:	2501      	movs	r5, #1
 8010002:	4628      	mov	r0, r5
 8010004:	b007      	add	sp, #28
 8010006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801000e:	2a0d      	cmp	r2, #13
 8010010:	d8e6      	bhi.n	800ffe0 <_scanf_float+0x60>
 8010012:	a101      	add	r1, pc, #4	; (adr r1, 8010018 <_scanf_float+0x98>)
 8010014:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010018:	08010157 	.word	0x08010157
 801001c:	0800ffe1 	.word	0x0800ffe1
 8010020:	0800ffe1 	.word	0x0800ffe1
 8010024:	0800ffe1 	.word	0x0800ffe1
 8010028:	080101b7 	.word	0x080101b7
 801002c:	0801018f 	.word	0x0801018f
 8010030:	0800ffe1 	.word	0x0800ffe1
 8010034:	0800ffe1 	.word	0x0800ffe1
 8010038:	08010165 	.word	0x08010165
 801003c:	0800ffe1 	.word	0x0800ffe1
 8010040:	0800ffe1 	.word	0x0800ffe1
 8010044:	0800ffe1 	.word	0x0800ffe1
 8010048:	0800ffe1 	.word	0x0800ffe1
 801004c:	0801011d 	.word	0x0801011d
 8010050:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010054:	e7db      	b.n	801000e <_scanf_float+0x8e>
 8010056:	290e      	cmp	r1, #14
 8010058:	d8c2      	bhi.n	800ffe0 <_scanf_float+0x60>
 801005a:	a001      	add	r0, pc, #4	; (adr r0, 8010060 <_scanf_float+0xe0>)
 801005c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010060:	0801010f 	.word	0x0801010f
 8010064:	0800ffe1 	.word	0x0800ffe1
 8010068:	0801010f 	.word	0x0801010f
 801006c:	080101a3 	.word	0x080101a3
 8010070:	0800ffe1 	.word	0x0800ffe1
 8010074:	080100bd 	.word	0x080100bd
 8010078:	080100f9 	.word	0x080100f9
 801007c:	080100f9 	.word	0x080100f9
 8010080:	080100f9 	.word	0x080100f9
 8010084:	080100f9 	.word	0x080100f9
 8010088:	080100f9 	.word	0x080100f9
 801008c:	080100f9 	.word	0x080100f9
 8010090:	080100f9 	.word	0x080100f9
 8010094:	080100f9 	.word	0x080100f9
 8010098:	080100f9 	.word	0x080100f9
 801009c:	2b6e      	cmp	r3, #110	; 0x6e
 801009e:	d809      	bhi.n	80100b4 <_scanf_float+0x134>
 80100a0:	2b60      	cmp	r3, #96	; 0x60
 80100a2:	d8b2      	bhi.n	801000a <_scanf_float+0x8a>
 80100a4:	2b54      	cmp	r3, #84	; 0x54
 80100a6:	d077      	beq.n	8010198 <_scanf_float+0x218>
 80100a8:	2b59      	cmp	r3, #89	; 0x59
 80100aa:	d199      	bne.n	800ffe0 <_scanf_float+0x60>
 80100ac:	2d07      	cmp	r5, #7
 80100ae:	d197      	bne.n	800ffe0 <_scanf_float+0x60>
 80100b0:	2508      	movs	r5, #8
 80100b2:	e029      	b.n	8010108 <_scanf_float+0x188>
 80100b4:	2b74      	cmp	r3, #116	; 0x74
 80100b6:	d06f      	beq.n	8010198 <_scanf_float+0x218>
 80100b8:	2b79      	cmp	r3, #121	; 0x79
 80100ba:	e7f6      	b.n	80100aa <_scanf_float+0x12a>
 80100bc:	6821      	ldr	r1, [r4, #0]
 80100be:	05c8      	lsls	r0, r1, #23
 80100c0:	d51a      	bpl.n	80100f8 <_scanf_float+0x178>
 80100c2:	9b02      	ldr	r3, [sp, #8]
 80100c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80100c8:	6021      	str	r1, [r4, #0]
 80100ca:	f109 0901 	add.w	r9, r9, #1
 80100ce:	b11b      	cbz	r3, 80100d8 <_scanf_float+0x158>
 80100d0:	3b01      	subs	r3, #1
 80100d2:	3201      	adds	r2, #1
 80100d4:	9302      	str	r3, [sp, #8]
 80100d6:	60a2      	str	r2, [r4, #8]
 80100d8:	68a3      	ldr	r3, [r4, #8]
 80100da:	3b01      	subs	r3, #1
 80100dc:	60a3      	str	r3, [r4, #8]
 80100de:	6923      	ldr	r3, [r4, #16]
 80100e0:	3301      	adds	r3, #1
 80100e2:	6123      	str	r3, [r4, #16]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3b01      	subs	r3, #1
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	607b      	str	r3, [r7, #4]
 80100ec:	f340 8084 	ble.w	80101f8 <_scanf_float+0x278>
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	3301      	adds	r3, #1
 80100f4:	603b      	str	r3, [r7, #0]
 80100f6:	e766      	b.n	800ffc6 <_scanf_float+0x46>
 80100f8:	eb1a 0f05 	cmn.w	sl, r5
 80100fc:	f47f af70 	bne.w	800ffe0 <_scanf_float+0x60>
 8010100:	6822      	ldr	r2, [r4, #0]
 8010102:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010106:	6022      	str	r2, [r4, #0]
 8010108:	f806 3b01 	strb.w	r3, [r6], #1
 801010c:	e7e4      	b.n	80100d8 <_scanf_float+0x158>
 801010e:	6822      	ldr	r2, [r4, #0]
 8010110:	0610      	lsls	r0, r2, #24
 8010112:	f57f af65 	bpl.w	800ffe0 <_scanf_float+0x60>
 8010116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801011a:	e7f4      	b.n	8010106 <_scanf_float+0x186>
 801011c:	f1ba 0f00 	cmp.w	sl, #0
 8010120:	d10e      	bne.n	8010140 <_scanf_float+0x1c0>
 8010122:	f1b9 0f00 	cmp.w	r9, #0
 8010126:	d10e      	bne.n	8010146 <_scanf_float+0x1c6>
 8010128:	6822      	ldr	r2, [r4, #0]
 801012a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801012e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010132:	d108      	bne.n	8010146 <_scanf_float+0x1c6>
 8010134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010138:	6022      	str	r2, [r4, #0]
 801013a:	f04f 0a01 	mov.w	sl, #1
 801013e:	e7e3      	b.n	8010108 <_scanf_float+0x188>
 8010140:	f1ba 0f02 	cmp.w	sl, #2
 8010144:	d055      	beq.n	80101f2 <_scanf_float+0x272>
 8010146:	2d01      	cmp	r5, #1
 8010148:	d002      	beq.n	8010150 <_scanf_float+0x1d0>
 801014a:	2d04      	cmp	r5, #4
 801014c:	f47f af48 	bne.w	800ffe0 <_scanf_float+0x60>
 8010150:	3501      	adds	r5, #1
 8010152:	b2ed      	uxtb	r5, r5
 8010154:	e7d8      	b.n	8010108 <_scanf_float+0x188>
 8010156:	f1ba 0f01 	cmp.w	sl, #1
 801015a:	f47f af41 	bne.w	800ffe0 <_scanf_float+0x60>
 801015e:	f04f 0a02 	mov.w	sl, #2
 8010162:	e7d1      	b.n	8010108 <_scanf_float+0x188>
 8010164:	b97d      	cbnz	r5, 8010186 <_scanf_float+0x206>
 8010166:	f1b9 0f00 	cmp.w	r9, #0
 801016a:	f47f af3c 	bne.w	800ffe6 <_scanf_float+0x66>
 801016e:	6822      	ldr	r2, [r4, #0]
 8010170:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010174:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010178:	f47f af39 	bne.w	800ffee <_scanf_float+0x6e>
 801017c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010180:	6022      	str	r2, [r4, #0]
 8010182:	2501      	movs	r5, #1
 8010184:	e7c0      	b.n	8010108 <_scanf_float+0x188>
 8010186:	2d03      	cmp	r5, #3
 8010188:	d0e2      	beq.n	8010150 <_scanf_float+0x1d0>
 801018a:	2d05      	cmp	r5, #5
 801018c:	e7de      	b.n	801014c <_scanf_float+0x1cc>
 801018e:	2d02      	cmp	r5, #2
 8010190:	f47f af26 	bne.w	800ffe0 <_scanf_float+0x60>
 8010194:	2503      	movs	r5, #3
 8010196:	e7b7      	b.n	8010108 <_scanf_float+0x188>
 8010198:	2d06      	cmp	r5, #6
 801019a:	f47f af21 	bne.w	800ffe0 <_scanf_float+0x60>
 801019e:	2507      	movs	r5, #7
 80101a0:	e7b2      	b.n	8010108 <_scanf_float+0x188>
 80101a2:	6822      	ldr	r2, [r4, #0]
 80101a4:	0591      	lsls	r1, r2, #22
 80101a6:	f57f af1b 	bpl.w	800ffe0 <_scanf_float+0x60>
 80101aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80101ae:	6022      	str	r2, [r4, #0]
 80101b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80101b4:	e7a8      	b.n	8010108 <_scanf_float+0x188>
 80101b6:	6822      	ldr	r2, [r4, #0]
 80101b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80101bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80101c0:	d006      	beq.n	80101d0 <_scanf_float+0x250>
 80101c2:	0550      	lsls	r0, r2, #21
 80101c4:	f57f af0c 	bpl.w	800ffe0 <_scanf_float+0x60>
 80101c8:	f1b9 0f00 	cmp.w	r9, #0
 80101cc:	f43f af0f 	beq.w	800ffee <_scanf_float+0x6e>
 80101d0:	0591      	lsls	r1, r2, #22
 80101d2:	bf58      	it	pl
 80101d4:	9901      	ldrpl	r1, [sp, #4]
 80101d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80101da:	bf58      	it	pl
 80101dc:	eba9 0101 	subpl.w	r1, r9, r1
 80101e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80101e4:	bf58      	it	pl
 80101e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80101ea:	6022      	str	r2, [r4, #0]
 80101ec:	f04f 0900 	mov.w	r9, #0
 80101f0:	e78a      	b.n	8010108 <_scanf_float+0x188>
 80101f2:	f04f 0a03 	mov.w	sl, #3
 80101f6:	e787      	b.n	8010108 <_scanf_float+0x188>
 80101f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80101fc:	4639      	mov	r1, r7
 80101fe:	4640      	mov	r0, r8
 8010200:	4798      	blx	r3
 8010202:	2800      	cmp	r0, #0
 8010204:	f43f aedf 	beq.w	800ffc6 <_scanf_float+0x46>
 8010208:	e6ea      	b.n	800ffe0 <_scanf_float+0x60>
 801020a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801020e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010212:	463a      	mov	r2, r7
 8010214:	4640      	mov	r0, r8
 8010216:	4798      	blx	r3
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	3b01      	subs	r3, #1
 801021c:	6123      	str	r3, [r4, #16]
 801021e:	e6ec      	b.n	800fffa <_scanf_float+0x7a>
 8010220:	1e6b      	subs	r3, r5, #1
 8010222:	2b06      	cmp	r3, #6
 8010224:	d825      	bhi.n	8010272 <_scanf_float+0x2f2>
 8010226:	2d02      	cmp	r5, #2
 8010228:	d836      	bhi.n	8010298 <_scanf_float+0x318>
 801022a:	455e      	cmp	r6, fp
 801022c:	f67f aee8 	bls.w	8010000 <_scanf_float+0x80>
 8010230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010234:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010238:	463a      	mov	r2, r7
 801023a:	4640      	mov	r0, r8
 801023c:	4798      	blx	r3
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	3b01      	subs	r3, #1
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	e7f1      	b.n	801022a <_scanf_float+0x2aa>
 8010246:	9802      	ldr	r0, [sp, #8]
 8010248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801024c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010250:	9002      	str	r0, [sp, #8]
 8010252:	463a      	mov	r2, r7
 8010254:	4640      	mov	r0, r8
 8010256:	4798      	blx	r3
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	3b01      	subs	r3, #1
 801025c:	6123      	str	r3, [r4, #16]
 801025e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010262:	fa5f fa8a 	uxtb.w	sl, sl
 8010266:	f1ba 0f02 	cmp.w	sl, #2
 801026a:	d1ec      	bne.n	8010246 <_scanf_float+0x2c6>
 801026c:	3d03      	subs	r5, #3
 801026e:	b2ed      	uxtb	r5, r5
 8010270:	1b76      	subs	r6, r6, r5
 8010272:	6823      	ldr	r3, [r4, #0]
 8010274:	05da      	lsls	r2, r3, #23
 8010276:	d52f      	bpl.n	80102d8 <_scanf_float+0x358>
 8010278:	055b      	lsls	r3, r3, #21
 801027a:	d510      	bpl.n	801029e <_scanf_float+0x31e>
 801027c:	455e      	cmp	r6, fp
 801027e:	f67f aebf 	bls.w	8010000 <_scanf_float+0x80>
 8010282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801028a:	463a      	mov	r2, r7
 801028c:	4640      	mov	r0, r8
 801028e:	4798      	blx	r3
 8010290:	6923      	ldr	r3, [r4, #16]
 8010292:	3b01      	subs	r3, #1
 8010294:	6123      	str	r3, [r4, #16]
 8010296:	e7f1      	b.n	801027c <_scanf_float+0x2fc>
 8010298:	46aa      	mov	sl, r5
 801029a:	9602      	str	r6, [sp, #8]
 801029c:	e7df      	b.n	801025e <_scanf_float+0x2de>
 801029e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80102a2:	6923      	ldr	r3, [r4, #16]
 80102a4:	2965      	cmp	r1, #101	; 0x65
 80102a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80102aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80102ae:	6123      	str	r3, [r4, #16]
 80102b0:	d00c      	beq.n	80102cc <_scanf_float+0x34c>
 80102b2:	2945      	cmp	r1, #69	; 0x45
 80102b4:	d00a      	beq.n	80102cc <_scanf_float+0x34c>
 80102b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102ba:	463a      	mov	r2, r7
 80102bc:	4640      	mov	r0, r8
 80102be:	4798      	blx	r3
 80102c0:	6923      	ldr	r3, [r4, #16]
 80102c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80102c6:	3b01      	subs	r3, #1
 80102c8:	1eb5      	subs	r5, r6, #2
 80102ca:	6123      	str	r3, [r4, #16]
 80102cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102d0:	463a      	mov	r2, r7
 80102d2:	4640      	mov	r0, r8
 80102d4:	4798      	blx	r3
 80102d6:	462e      	mov	r6, r5
 80102d8:	6825      	ldr	r5, [r4, #0]
 80102da:	f015 0510 	ands.w	r5, r5, #16
 80102de:	d159      	bne.n	8010394 <_scanf_float+0x414>
 80102e0:	7035      	strb	r5, [r6, #0]
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80102e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102ec:	d11b      	bne.n	8010326 <_scanf_float+0x3a6>
 80102ee:	9b01      	ldr	r3, [sp, #4]
 80102f0:	454b      	cmp	r3, r9
 80102f2:	eba3 0209 	sub.w	r2, r3, r9
 80102f6:	d123      	bne.n	8010340 <_scanf_float+0x3c0>
 80102f8:	2200      	movs	r2, #0
 80102fa:	4659      	mov	r1, fp
 80102fc:	4640      	mov	r0, r8
 80102fe:	f000 ff0d 	bl	801111c <_strtod_r>
 8010302:	6822      	ldr	r2, [r4, #0]
 8010304:	9b03      	ldr	r3, [sp, #12]
 8010306:	f012 0f02 	tst.w	r2, #2
 801030a:	ec57 6b10 	vmov	r6, r7, d0
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	d021      	beq.n	8010356 <_scanf_float+0x3d6>
 8010312:	9903      	ldr	r1, [sp, #12]
 8010314:	1d1a      	adds	r2, r3, #4
 8010316:	600a      	str	r2, [r1, #0]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	e9c3 6700 	strd	r6, r7, [r3]
 801031e:	68e3      	ldr	r3, [r4, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	60e3      	str	r3, [r4, #12]
 8010324:	e66d      	b.n	8010002 <_scanf_float+0x82>
 8010326:	9b04      	ldr	r3, [sp, #16]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d0e5      	beq.n	80102f8 <_scanf_float+0x378>
 801032c:	9905      	ldr	r1, [sp, #20]
 801032e:	230a      	movs	r3, #10
 8010330:	462a      	mov	r2, r5
 8010332:	3101      	adds	r1, #1
 8010334:	4640      	mov	r0, r8
 8010336:	f000 ff79 	bl	801122c <_strtol_r>
 801033a:	9b04      	ldr	r3, [sp, #16]
 801033c:	9e05      	ldr	r6, [sp, #20]
 801033e:	1ac2      	subs	r2, r0, r3
 8010340:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010344:	429e      	cmp	r6, r3
 8010346:	bf28      	it	cs
 8010348:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801034c:	4912      	ldr	r1, [pc, #72]	; (8010398 <_scanf_float+0x418>)
 801034e:	4630      	mov	r0, r6
 8010350:	f000 f8a2 	bl	8010498 <siprintf>
 8010354:	e7d0      	b.n	80102f8 <_scanf_float+0x378>
 8010356:	9903      	ldr	r1, [sp, #12]
 8010358:	f012 0f04 	tst.w	r2, #4
 801035c:	f103 0204 	add.w	r2, r3, #4
 8010360:	600a      	str	r2, [r1, #0]
 8010362:	d1d9      	bne.n	8010318 <_scanf_float+0x398>
 8010364:	f8d3 8000 	ldr.w	r8, [r3]
 8010368:	ee10 2a10 	vmov	r2, s0
 801036c:	ee10 0a10 	vmov	r0, s0
 8010370:	463b      	mov	r3, r7
 8010372:	4639      	mov	r1, r7
 8010374:	f7f0 fc02 	bl	8000b7c <__aeabi_dcmpun>
 8010378:	b128      	cbz	r0, 8010386 <_scanf_float+0x406>
 801037a:	4808      	ldr	r0, [pc, #32]	; (801039c <_scanf_float+0x41c>)
 801037c:	f000 f886 	bl	801048c <nanf>
 8010380:	ed88 0a00 	vstr	s0, [r8]
 8010384:	e7cb      	b.n	801031e <_scanf_float+0x39e>
 8010386:	4630      	mov	r0, r6
 8010388:	4639      	mov	r1, r7
 801038a:	f7f0 fc55 	bl	8000c38 <__aeabi_d2f>
 801038e:	f8c8 0000 	str.w	r0, [r8]
 8010392:	e7c4      	b.n	801031e <_scanf_float+0x39e>
 8010394:	2500      	movs	r5, #0
 8010396:	e634      	b.n	8010002 <_scanf_float+0x82>
 8010398:	0802a911 	.word	0x0802a911
 801039c:	0802a8c7 	.word	0x0802a8c7

080103a0 <_puts_r>:
 80103a0:	b570      	push	{r4, r5, r6, lr}
 80103a2:	460e      	mov	r6, r1
 80103a4:	4605      	mov	r5, r0
 80103a6:	b118      	cbz	r0, 80103b0 <_puts_r+0x10>
 80103a8:	6983      	ldr	r3, [r0, #24]
 80103aa:	b90b      	cbnz	r3, 80103b0 <_puts_r+0x10>
 80103ac:	f001 ff9c 	bl	80122e8 <__sinit>
 80103b0:	69ab      	ldr	r3, [r5, #24]
 80103b2:	68ac      	ldr	r4, [r5, #8]
 80103b4:	b913      	cbnz	r3, 80103bc <_puts_r+0x1c>
 80103b6:	4628      	mov	r0, r5
 80103b8:	f001 ff96 	bl	80122e8 <__sinit>
 80103bc:	4b2c      	ldr	r3, [pc, #176]	; (8010470 <_puts_r+0xd0>)
 80103be:	429c      	cmp	r4, r3
 80103c0:	d120      	bne.n	8010404 <_puts_r+0x64>
 80103c2:	686c      	ldr	r4, [r5, #4]
 80103c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103c6:	07db      	lsls	r3, r3, #31
 80103c8:	d405      	bmi.n	80103d6 <_puts_r+0x36>
 80103ca:	89a3      	ldrh	r3, [r4, #12]
 80103cc:	0598      	lsls	r0, r3, #22
 80103ce:	d402      	bmi.n	80103d6 <_puts_r+0x36>
 80103d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103d2:	f002 fb9a 	bl	8012b0a <__retarget_lock_acquire_recursive>
 80103d6:	89a3      	ldrh	r3, [r4, #12]
 80103d8:	0719      	lsls	r1, r3, #28
 80103da:	d51d      	bpl.n	8010418 <_puts_r+0x78>
 80103dc:	6923      	ldr	r3, [r4, #16]
 80103de:	b1db      	cbz	r3, 8010418 <_puts_r+0x78>
 80103e0:	3e01      	subs	r6, #1
 80103e2:	68a3      	ldr	r3, [r4, #8]
 80103e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80103e8:	3b01      	subs	r3, #1
 80103ea:	60a3      	str	r3, [r4, #8]
 80103ec:	bb39      	cbnz	r1, 801043e <_puts_r+0x9e>
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	da38      	bge.n	8010464 <_puts_r+0xc4>
 80103f2:	4622      	mov	r2, r4
 80103f4:	210a      	movs	r1, #10
 80103f6:	4628      	mov	r0, r5
 80103f8:	f000 ff1a 	bl	8011230 <__swbuf_r>
 80103fc:	3001      	adds	r0, #1
 80103fe:	d011      	beq.n	8010424 <_puts_r+0x84>
 8010400:	250a      	movs	r5, #10
 8010402:	e011      	b.n	8010428 <_puts_r+0x88>
 8010404:	4b1b      	ldr	r3, [pc, #108]	; (8010474 <_puts_r+0xd4>)
 8010406:	429c      	cmp	r4, r3
 8010408:	d101      	bne.n	801040e <_puts_r+0x6e>
 801040a:	68ac      	ldr	r4, [r5, #8]
 801040c:	e7da      	b.n	80103c4 <_puts_r+0x24>
 801040e:	4b1a      	ldr	r3, [pc, #104]	; (8010478 <_puts_r+0xd8>)
 8010410:	429c      	cmp	r4, r3
 8010412:	bf08      	it	eq
 8010414:	68ec      	ldreq	r4, [r5, #12]
 8010416:	e7d5      	b.n	80103c4 <_puts_r+0x24>
 8010418:	4621      	mov	r1, r4
 801041a:	4628      	mov	r0, r5
 801041c:	f000 ff5a 	bl	80112d4 <__swsetup_r>
 8010420:	2800      	cmp	r0, #0
 8010422:	d0dd      	beq.n	80103e0 <_puts_r+0x40>
 8010424:	f04f 35ff 	mov.w	r5, #4294967295
 8010428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801042a:	07da      	lsls	r2, r3, #31
 801042c:	d405      	bmi.n	801043a <_puts_r+0x9a>
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	059b      	lsls	r3, r3, #22
 8010432:	d402      	bmi.n	801043a <_puts_r+0x9a>
 8010434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010436:	f002 fb69 	bl	8012b0c <__retarget_lock_release_recursive>
 801043a:	4628      	mov	r0, r5
 801043c:	bd70      	pop	{r4, r5, r6, pc}
 801043e:	2b00      	cmp	r3, #0
 8010440:	da04      	bge.n	801044c <_puts_r+0xac>
 8010442:	69a2      	ldr	r2, [r4, #24]
 8010444:	429a      	cmp	r2, r3
 8010446:	dc06      	bgt.n	8010456 <_puts_r+0xb6>
 8010448:	290a      	cmp	r1, #10
 801044a:	d004      	beq.n	8010456 <_puts_r+0xb6>
 801044c:	6823      	ldr	r3, [r4, #0]
 801044e:	1c5a      	adds	r2, r3, #1
 8010450:	6022      	str	r2, [r4, #0]
 8010452:	7019      	strb	r1, [r3, #0]
 8010454:	e7c5      	b.n	80103e2 <_puts_r+0x42>
 8010456:	4622      	mov	r2, r4
 8010458:	4628      	mov	r0, r5
 801045a:	f000 fee9 	bl	8011230 <__swbuf_r>
 801045e:	3001      	adds	r0, #1
 8010460:	d1bf      	bne.n	80103e2 <_puts_r+0x42>
 8010462:	e7df      	b.n	8010424 <_puts_r+0x84>
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	250a      	movs	r5, #10
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	6022      	str	r2, [r4, #0]
 801046c:	701d      	strb	r5, [r3, #0]
 801046e:	e7db      	b.n	8010428 <_puts_r+0x88>
 8010470:	0802ab3c 	.word	0x0802ab3c
 8010474:	0802ab5c 	.word	0x0802ab5c
 8010478:	0802ab1c 	.word	0x0802ab1c

0801047c <puts>:
 801047c:	4b02      	ldr	r3, [pc, #8]	; (8010488 <puts+0xc>)
 801047e:	4601      	mov	r1, r0
 8010480:	6818      	ldr	r0, [r3, #0]
 8010482:	f7ff bf8d 	b.w	80103a0 <_puts_r>
 8010486:	bf00      	nop
 8010488:	200000dc 	.word	0x200000dc

0801048c <nanf>:
 801048c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010494 <nanf+0x8>
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop
 8010494:	7fc00000 	.word	0x7fc00000

08010498 <siprintf>:
 8010498:	b40e      	push	{r1, r2, r3}
 801049a:	b500      	push	{lr}
 801049c:	b09c      	sub	sp, #112	; 0x70
 801049e:	ab1d      	add	r3, sp, #116	; 0x74
 80104a0:	9002      	str	r0, [sp, #8]
 80104a2:	9006      	str	r0, [sp, #24]
 80104a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104a8:	4809      	ldr	r0, [pc, #36]	; (80104d0 <siprintf+0x38>)
 80104aa:	9107      	str	r1, [sp, #28]
 80104ac:	9104      	str	r1, [sp, #16]
 80104ae:	4909      	ldr	r1, [pc, #36]	; (80104d4 <siprintf+0x3c>)
 80104b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104b4:	9105      	str	r1, [sp, #20]
 80104b6:	6800      	ldr	r0, [r0, #0]
 80104b8:	9301      	str	r3, [sp, #4]
 80104ba:	a902      	add	r1, sp, #8
 80104bc:	f003 fa02 	bl	80138c4 <_svfiprintf_r>
 80104c0:	9b02      	ldr	r3, [sp, #8]
 80104c2:	2200      	movs	r2, #0
 80104c4:	701a      	strb	r2, [r3, #0]
 80104c6:	b01c      	add	sp, #112	; 0x70
 80104c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104cc:	b003      	add	sp, #12
 80104ce:	4770      	bx	lr
 80104d0:	200000dc 	.word	0x200000dc
 80104d4:	ffff0208 	.word	0xffff0208

080104d8 <sulp>:
 80104d8:	b570      	push	{r4, r5, r6, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	460d      	mov	r5, r1
 80104de:	ec45 4b10 	vmov	d0, r4, r5
 80104e2:	4616      	mov	r6, r2
 80104e4:	f002 ff1e 	bl	8013324 <__ulp>
 80104e8:	ec51 0b10 	vmov	r0, r1, d0
 80104ec:	b17e      	cbz	r6, 801050e <sulp+0x36>
 80104ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80104f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	dd09      	ble.n	801050e <sulp+0x36>
 80104fa:	051b      	lsls	r3, r3, #20
 80104fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010500:	2400      	movs	r4, #0
 8010502:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010506:	4622      	mov	r2, r4
 8010508:	462b      	mov	r3, r5
 801050a:	f7f0 f89d 	bl	8000648 <__aeabi_dmul>
 801050e:	bd70      	pop	{r4, r5, r6, pc}

08010510 <_strtod_l>:
 8010510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	ed2d 8b02 	vpush	{d8}
 8010518:	b09d      	sub	sp, #116	; 0x74
 801051a:	461f      	mov	r7, r3
 801051c:	2300      	movs	r3, #0
 801051e:	9318      	str	r3, [sp, #96]	; 0x60
 8010520:	4ba2      	ldr	r3, [pc, #648]	; (80107ac <_strtod_l+0x29c>)
 8010522:	9213      	str	r2, [sp, #76]	; 0x4c
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	9305      	str	r3, [sp, #20]
 8010528:	4604      	mov	r4, r0
 801052a:	4618      	mov	r0, r3
 801052c:	4688      	mov	r8, r1
 801052e:	f7ef fe77 	bl	8000220 <strlen>
 8010532:	f04f 0a00 	mov.w	sl, #0
 8010536:	4605      	mov	r5, r0
 8010538:	f04f 0b00 	mov.w	fp, #0
 801053c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010542:	781a      	ldrb	r2, [r3, #0]
 8010544:	2a2b      	cmp	r2, #43	; 0x2b
 8010546:	d04e      	beq.n	80105e6 <_strtod_l+0xd6>
 8010548:	d83b      	bhi.n	80105c2 <_strtod_l+0xb2>
 801054a:	2a0d      	cmp	r2, #13
 801054c:	d834      	bhi.n	80105b8 <_strtod_l+0xa8>
 801054e:	2a08      	cmp	r2, #8
 8010550:	d834      	bhi.n	80105bc <_strtod_l+0xac>
 8010552:	2a00      	cmp	r2, #0
 8010554:	d03e      	beq.n	80105d4 <_strtod_l+0xc4>
 8010556:	2300      	movs	r3, #0
 8010558:	930a      	str	r3, [sp, #40]	; 0x28
 801055a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801055c:	7833      	ldrb	r3, [r6, #0]
 801055e:	2b30      	cmp	r3, #48	; 0x30
 8010560:	f040 80b0 	bne.w	80106c4 <_strtod_l+0x1b4>
 8010564:	7873      	ldrb	r3, [r6, #1]
 8010566:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801056a:	2b58      	cmp	r3, #88	; 0x58
 801056c:	d168      	bne.n	8010640 <_strtod_l+0x130>
 801056e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010570:	9301      	str	r3, [sp, #4]
 8010572:	ab18      	add	r3, sp, #96	; 0x60
 8010574:	9702      	str	r7, [sp, #8]
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	4a8d      	ldr	r2, [pc, #564]	; (80107b0 <_strtod_l+0x2a0>)
 801057a:	ab19      	add	r3, sp, #100	; 0x64
 801057c:	a917      	add	r1, sp, #92	; 0x5c
 801057e:	4620      	mov	r0, r4
 8010580:	f001 ffb6 	bl	80124f0 <__gethex>
 8010584:	f010 0707 	ands.w	r7, r0, #7
 8010588:	4605      	mov	r5, r0
 801058a:	d005      	beq.n	8010598 <_strtod_l+0x88>
 801058c:	2f06      	cmp	r7, #6
 801058e:	d12c      	bne.n	80105ea <_strtod_l+0xda>
 8010590:	3601      	adds	r6, #1
 8010592:	2300      	movs	r3, #0
 8010594:	9617      	str	r6, [sp, #92]	; 0x5c
 8010596:	930a      	str	r3, [sp, #40]	; 0x28
 8010598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801059a:	2b00      	cmp	r3, #0
 801059c:	f040 8590 	bne.w	80110c0 <_strtod_l+0xbb0>
 80105a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a2:	b1eb      	cbz	r3, 80105e0 <_strtod_l+0xd0>
 80105a4:	4652      	mov	r2, sl
 80105a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80105aa:	ec43 2b10 	vmov	d0, r2, r3
 80105ae:	b01d      	add	sp, #116	; 0x74
 80105b0:	ecbd 8b02 	vpop	{d8}
 80105b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b8:	2a20      	cmp	r2, #32
 80105ba:	d1cc      	bne.n	8010556 <_strtod_l+0x46>
 80105bc:	3301      	adds	r3, #1
 80105be:	9317      	str	r3, [sp, #92]	; 0x5c
 80105c0:	e7be      	b.n	8010540 <_strtod_l+0x30>
 80105c2:	2a2d      	cmp	r2, #45	; 0x2d
 80105c4:	d1c7      	bne.n	8010556 <_strtod_l+0x46>
 80105c6:	2201      	movs	r2, #1
 80105c8:	920a      	str	r2, [sp, #40]	; 0x28
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80105ce:	785b      	ldrb	r3, [r3, #1]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d1c2      	bne.n	801055a <_strtod_l+0x4a>
 80105d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80105d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f040 856e 	bne.w	80110bc <_strtod_l+0xbac>
 80105e0:	4652      	mov	r2, sl
 80105e2:	465b      	mov	r3, fp
 80105e4:	e7e1      	b.n	80105aa <_strtod_l+0x9a>
 80105e6:	2200      	movs	r2, #0
 80105e8:	e7ee      	b.n	80105c8 <_strtod_l+0xb8>
 80105ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80105ec:	b13a      	cbz	r2, 80105fe <_strtod_l+0xee>
 80105ee:	2135      	movs	r1, #53	; 0x35
 80105f0:	a81a      	add	r0, sp, #104	; 0x68
 80105f2:	f002 ffa2 	bl	801353a <__copybits>
 80105f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80105f8:	4620      	mov	r0, r4
 80105fa:	f002 fb61 	bl	8012cc0 <_Bfree>
 80105fe:	3f01      	subs	r7, #1
 8010600:	2f04      	cmp	r7, #4
 8010602:	d806      	bhi.n	8010612 <_strtod_l+0x102>
 8010604:	e8df f007 	tbb	[pc, r7]
 8010608:	1714030a 	.word	0x1714030a
 801060c:	0a          	.byte	0x0a
 801060d:	00          	.byte	0x00
 801060e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010612:	0728      	lsls	r0, r5, #28
 8010614:	d5c0      	bpl.n	8010598 <_strtod_l+0x88>
 8010616:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801061a:	e7bd      	b.n	8010598 <_strtod_l+0x88>
 801061c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010620:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010626:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801062a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801062e:	e7f0      	b.n	8010612 <_strtod_l+0x102>
 8010630:	f8df b180 	ldr.w	fp, [pc, #384]	; 80107b4 <_strtod_l+0x2a4>
 8010634:	e7ed      	b.n	8010612 <_strtod_l+0x102>
 8010636:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801063a:	f04f 3aff 	mov.w	sl, #4294967295
 801063e:	e7e8      	b.n	8010612 <_strtod_l+0x102>
 8010640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	9217      	str	r2, [sp, #92]	; 0x5c
 8010646:	785b      	ldrb	r3, [r3, #1]
 8010648:	2b30      	cmp	r3, #48	; 0x30
 801064a:	d0f9      	beq.n	8010640 <_strtod_l+0x130>
 801064c:	2b00      	cmp	r3, #0
 801064e:	d0a3      	beq.n	8010598 <_strtod_l+0x88>
 8010650:	2301      	movs	r3, #1
 8010652:	f04f 0900 	mov.w	r9, #0
 8010656:	9304      	str	r3, [sp, #16]
 8010658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801065a:	9308      	str	r3, [sp, #32]
 801065c:	f8cd 901c 	str.w	r9, [sp, #28]
 8010660:	464f      	mov	r7, r9
 8010662:	220a      	movs	r2, #10
 8010664:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010666:	7806      	ldrb	r6, [r0, #0]
 8010668:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801066c:	b2d9      	uxtb	r1, r3
 801066e:	2909      	cmp	r1, #9
 8010670:	d92a      	bls.n	80106c8 <_strtod_l+0x1b8>
 8010672:	9905      	ldr	r1, [sp, #20]
 8010674:	462a      	mov	r2, r5
 8010676:	f003 fac6 	bl	8013c06 <strncmp>
 801067a:	b398      	cbz	r0, 80106e4 <_strtod_l+0x1d4>
 801067c:	2000      	movs	r0, #0
 801067e:	4632      	mov	r2, r6
 8010680:	463d      	mov	r5, r7
 8010682:	9005      	str	r0, [sp, #20]
 8010684:	4603      	mov	r3, r0
 8010686:	2a65      	cmp	r2, #101	; 0x65
 8010688:	d001      	beq.n	801068e <_strtod_l+0x17e>
 801068a:	2a45      	cmp	r2, #69	; 0x45
 801068c:	d118      	bne.n	80106c0 <_strtod_l+0x1b0>
 801068e:	b91d      	cbnz	r5, 8010698 <_strtod_l+0x188>
 8010690:	9a04      	ldr	r2, [sp, #16]
 8010692:	4302      	orrs	r2, r0
 8010694:	d09e      	beq.n	80105d4 <_strtod_l+0xc4>
 8010696:	2500      	movs	r5, #0
 8010698:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801069c:	f108 0201 	add.w	r2, r8, #1
 80106a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80106a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80106a6:	2a2b      	cmp	r2, #43	; 0x2b
 80106a8:	d075      	beq.n	8010796 <_strtod_l+0x286>
 80106aa:	2a2d      	cmp	r2, #45	; 0x2d
 80106ac:	d07b      	beq.n	80107a6 <_strtod_l+0x296>
 80106ae:	f04f 0c00 	mov.w	ip, #0
 80106b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80106b6:	2909      	cmp	r1, #9
 80106b8:	f240 8082 	bls.w	80107c0 <_strtod_l+0x2b0>
 80106bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80106c0:	2600      	movs	r6, #0
 80106c2:	e09d      	b.n	8010800 <_strtod_l+0x2f0>
 80106c4:	2300      	movs	r3, #0
 80106c6:	e7c4      	b.n	8010652 <_strtod_l+0x142>
 80106c8:	2f08      	cmp	r7, #8
 80106ca:	bfd8      	it	le
 80106cc:	9907      	ldrle	r1, [sp, #28]
 80106ce:	f100 0001 	add.w	r0, r0, #1
 80106d2:	bfda      	itte	le
 80106d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80106d8:	9307      	strle	r3, [sp, #28]
 80106da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80106de:	3701      	adds	r7, #1
 80106e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80106e2:	e7bf      	b.n	8010664 <_strtod_l+0x154>
 80106e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106e6:	195a      	adds	r2, r3, r5
 80106e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80106ea:	5d5a      	ldrb	r2, [r3, r5]
 80106ec:	2f00      	cmp	r7, #0
 80106ee:	d037      	beq.n	8010760 <_strtod_l+0x250>
 80106f0:	9005      	str	r0, [sp, #20]
 80106f2:	463d      	mov	r5, r7
 80106f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80106f8:	2b09      	cmp	r3, #9
 80106fa:	d912      	bls.n	8010722 <_strtod_l+0x212>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e7c2      	b.n	8010686 <_strtod_l+0x176>
 8010700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	9217      	str	r2, [sp, #92]	; 0x5c
 8010706:	785a      	ldrb	r2, [r3, #1]
 8010708:	3001      	adds	r0, #1
 801070a:	2a30      	cmp	r2, #48	; 0x30
 801070c:	d0f8      	beq.n	8010700 <_strtod_l+0x1f0>
 801070e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010712:	2b08      	cmp	r3, #8
 8010714:	f200 84d9 	bhi.w	80110ca <_strtod_l+0xbba>
 8010718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801071a:	9005      	str	r0, [sp, #20]
 801071c:	2000      	movs	r0, #0
 801071e:	9308      	str	r3, [sp, #32]
 8010720:	4605      	mov	r5, r0
 8010722:	3a30      	subs	r2, #48	; 0x30
 8010724:	f100 0301 	add.w	r3, r0, #1
 8010728:	d014      	beq.n	8010754 <_strtod_l+0x244>
 801072a:	9905      	ldr	r1, [sp, #20]
 801072c:	4419      	add	r1, r3
 801072e:	9105      	str	r1, [sp, #20]
 8010730:	462b      	mov	r3, r5
 8010732:	eb00 0e05 	add.w	lr, r0, r5
 8010736:	210a      	movs	r1, #10
 8010738:	4573      	cmp	r3, lr
 801073a:	d113      	bne.n	8010764 <_strtod_l+0x254>
 801073c:	182b      	adds	r3, r5, r0
 801073e:	2b08      	cmp	r3, #8
 8010740:	f105 0501 	add.w	r5, r5, #1
 8010744:	4405      	add	r5, r0
 8010746:	dc1c      	bgt.n	8010782 <_strtod_l+0x272>
 8010748:	9907      	ldr	r1, [sp, #28]
 801074a:	230a      	movs	r3, #10
 801074c:	fb03 2301 	mla	r3, r3, r1, r2
 8010750:	9307      	str	r3, [sp, #28]
 8010752:	2300      	movs	r3, #0
 8010754:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010756:	1c51      	adds	r1, r2, #1
 8010758:	9117      	str	r1, [sp, #92]	; 0x5c
 801075a:	7852      	ldrb	r2, [r2, #1]
 801075c:	4618      	mov	r0, r3
 801075e:	e7c9      	b.n	80106f4 <_strtod_l+0x1e4>
 8010760:	4638      	mov	r0, r7
 8010762:	e7d2      	b.n	801070a <_strtod_l+0x1fa>
 8010764:	2b08      	cmp	r3, #8
 8010766:	dc04      	bgt.n	8010772 <_strtod_l+0x262>
 8010768:	9e07      	ldr	r6, [sp, #28]
 801076a:	434e      	muls	r6, r1
 801076c:	9607      	str	r6, [sp, #28]
 801076e:	3301      	adds	r3, #1
 8010770:	e7e2      	b.n	8010738 <_strtod_l+0x228>
 8010772:	f103 0c01 	add.w	ip, r3, #1
 8010776:	f1bc 0f10 	cmp.w	ip, #16
 801077a:	bfd8      	it	le
 801077c:	fb01 f909 	mulle.w	r9, r1, r9
 8010780:	e7f5      	b.n	801076e <_strtod_l+0x25e>
 8010782:	2d10      	cmp	r5, #16
 8010784:	bfdc      	itt	le
 8010786:	230a      	movle	r3, #10
 8010788:	fb03 2909 	mlale	r9, r3, r9, r2
 801078c:	e7e1      	b.n	8010752 <_strtod_l+0x242>
 801078e:	2300      	movs	r3, #0
 8010790:	9305      	str	r3, [sp, #20]
 8010792:	2301      	movs	r3, #1
 8010794:	e77c      	b.n	8010690 <_strtod_l+0x180>
 8010796:	f04f 0c00 	mov.w	ip, #0
 801079a:	f108 0202 	add.w	r2, r8, #2
 801079e:	9217      	str	r2, [sp, #92]	; 0x5c
 80107a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80107a4:	e785      	b.n	80106b2 <_strtod_l+0x1a2>
 80107a6:	f04f 0c01 	mov.w	ip, #1
 80107aa:	e7f6      	b.n	801079a <_strtod_l+0x28a>
 80107ac:	0802ac04 	.word	0x0802ac04
 80107b0:	0802a918 	.word	0x0802a918
 80107b4:	7ff00000 	.word	0x7ff00000
 80107b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107ba:	1c51      	adds	r1, r2, #1
 80107bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80107be:	7852      	ldrb	r2, [r2, #1]
 80107c0:	2a30      	cmp	r2, #48	; 0x30
 80107c2:	d0f9      	beq.n	80107b8 <_strtod_l+0x2a8>
 80107c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80107c8:	2908      	cmp	r1, #8
 80107ca:	f63f af79 	bhi.w	80106c0 <_strtod_l+0x1b0>
 80107ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80107d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107d4:	9206      	str	r2, [sp, #24]
 80107d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107d8:	1c51      	adds	r1, r2, #1
 80107da:	9117      	str	r1, [sp, #92]	; 0x5c
 80107dc:	7852      	ldrb	r2, [r2, #1]
 80107de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80107e2:	2e09      	cmp	r6, #9
 80107e4:	d937      	bls.n	8010856 <_strtod_l+0x346>
 80107e6:	9e06      	ldr	r6, [sp, #24]
 80107e8:	1b89      	subs	r1, r1, r6
 80107ea:	2908      	cmp	r1, #8
 80107ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80107f0:	dc02      	bgt.n	80107f8 <_strtod_l+0x2e8>
 80107f2:	4576      	cmp	r6, lr
 80107f4:	bfa8      	it	ge
 80107f6:	4676      	movge	r6, lr
 80107f8:	f1bc 0f00 	cmp.w	ip, #0
 80107fc:	d000      	beq.n	8010800 <_strtod_l+0x2f0>
 80107fe:	4276      	negs	r6, r6
 8010800:	2d00      	cmp	r5, #0
 8010802:	d14d      	bne.n	80108a0 <_strtod_l+0x390>
 8010804:	9904      	ldr	r1, [sp, #16]
 8010806:	4301      	orrs	r1, r0
 8010808:	f47f aec6 	bne.w	8010598 <_strtod_l+0x88>
 801080c:	2b00      	cmp	r3, #0
 801080e:	f47f aee1 	bne.w	80105d4 <_strtod_l+0xc4>
 8010812:	2a69      	cmp	r2, #105	; 0x69
 8010814:	d027      	beq.n	8010866 <_strtod_l+0x356>
 8010816:	dc24      	bgt.n	8010862 <_strtod_l+0x352>
 8010818:	2a49      	cmp	r2, #73	; 0x49
 801081a:	d024      	beq.n	8010866 <_strtod_l+0x356>
 801081c:	2a4e      	cmp	r2, #78	; 0x4e
 801081e:	f47f aed9 	bne.w	80105d4 <_strtod_l+0xc4>
 8010822:	499f      	ldr	r1, [pc, #636]	; (8010aa0 <_strtod_l+0x590>)
 8010824:	a817      	add	r0, sp, #92	; 0x5c
 8010826:	f002 f8bb 	bl	80129a0 <__match>
 801082a:	2800      	cmp	r0, #0
 801082c:	f43f aed2 	beq.w	80105d4 <_strtod_l+0xc4>
 8010830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	2b28      	cmp	r3, #40	; 0x28
 8010836:	d12d      	bne.n	8010894 <_strtod_l+0x384>
 8010838:	499a      	ldr	r1, [pc, #616]	; (8010aa4 <_strtod_l+0x594>)
 801083a:	aa1a      	add	r2, sp, #104	; 0x68
 801083c:	a817      	add	r0, sp, #92	; 0x5c
 801083e:	f002 f8c3 	bl	80129c8 <__hexnan>
 8010842:	2805      	cmp	r0, #5
 8010844:	d126      	bne.n	8010894 <_strtod_l+0x384>
 8010846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010848:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801084c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010850:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010854:	e6a0      	b.n	8010598 <_strtod_l+0x88>
 8010856:	210a      	movs	r1, #10
 8010858:	fb01 2e0e 	mla	lr, r1, lr, r2
 801085c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010860:	e7b9      	b.n	80107d6 <_strtod_l+0x2c6>
 8010862:	2a6e      	cmp	r2, #110	; 0x6e
 8010864:	e7db      	b.n	801081e <_strtod_l+0x30e>
 8010866:	4990      	ldr	r1, [pc, #576]	; (8010aa8 <_strtod_l+0x598>)
 8010868:	a817      	add	r0, sp, #92	; 0x5c
 801086a:	f002 f899 	bl	80129a0 <__match>
 801086e:	2800      	cmp	r0, #0
 8010870:	f43f aeb0 	beq.w	80105d4 <_strtod_l+0xc4>
 8010874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010876:	498d      	ldr	r1, [pc, #564]	; (8010aac <_strtod_l+0x59c>)
 8010878:	3b01      	subs	r3, #1
 801087a:	a817      	add	r0, sp, #92	; 0x5c
 801087c:	9317      	str	r3, [sp, #92]	; 0x5c
 801087e:	f002 f88f 	bl	80129a0 <__match>
 8010882:	b910      	cbnz	r0, 801088a <_strtod_l+0x37a>
 8010884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010886:	3301      	adds	r3, #1
 8010888:	9317      	str	r3, [sp, #92]	; 0x5c
 801088a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010abc <_strtod_l+0x5ac>
 801088e:	f04f 0a00 	mov.w	sl, #0
 8010892:	e681      	b.n	8010598 <_strtod_l+0x88>
 8010894:	4886      	ldr	r0, [pc, #536]	; (8010ab0 <_strtod_l+0x5a0>)
 8010896:	f003 f917 	bl	8013ac8 <nan>
 801089a:	ec5b ab10 	vmov	sl, fp, d0
 801089e:	e67b      	b.n	8010598 <_strtod_l+0x88>
 80108a0:	9b05      	ldr	r3, [sp, #20]
 80108a2:	9807      	ldr	r0, [sp, #28]
 80108a4:	1af3      	subs	r3, r6, r3
 80108a6:	2f00      	cmp	r7, #0
 80108a8:	bf08      	it	eq
 80108aa:	462f      	moveq	r7, r5
 80108ac:	2d10      	cmp	r5, #16
 80108ae:	9306      	str	r3, [sp, #24]
 80108b0:	46a8      	mov	r8, r5
 80108b2:	bfa8      	it	ge
 80108b4:	f04f 0810 	movge.w	r8, #16
 80108b8:	f7ef fe4c 	bl	8000554 <__aeabi_ui2d>
 80108bc:	2d09      	cmp	r5, #9
 80108be:	4682      	mov	sl, r0
 80108c0:	468b      	mov	fp, r1
 80108c2:	dd13      	ble.n	80108ec <_strtod_l+0x3dc>
 80108c4:	4b7b      	ldr	r3, [pc, #492]	; (8010ab4 <_strtod_l+0x5a4>)
 80108c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80108ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80108ce:	f7ef febb 	bl	8000648 <__aeabi_dmul>
 80108d2:	4682      	mov	sl, r0
 80108d4:	4648      	mov	r0, r9
 80108d6:	468b      	mov	fp, r1
 80108d8:	f7ef fe3c 	bl	8000554 <__aeabi_ui2d>
 80108dc:	4602      	mov	r2, r0
 80108de:	460b      	mov	r3, r1
 80108e0:	4650      	mov	r0, sl
 80108e2:	4659      	mov	r1, fp
 80108e4:	f7ef fcfa 	bl	80002dc <__adddf3>
 80108e8:	4682      	mov	sl, r0
 80108ea:	468b      	mov	fp, r1
 80108ec:	2d0f      	cmp	r5, #15
 80108ee:	dc38      	bgt.n	8010962 <_strtod_l+0x452>
 80108f0:	9b06      	ldr	r3, [sp, #24]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	f43f ae50 	beq.w	8010598 <_strtod_l+0x88>
 80108f8:	dd24      	ble.n	8010944 <_strtod_l+0x434>
 80108fa:	2b16      	cmp	r3, #22
 80108fc:	dc0b      	bgt.n	8010916 <_strtod_l+0x406>
 80108fe:	496d      	ldr	r1, [pc, #436]	; (8010ab4 <_strtod_l+0x5a4>)
 8010900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010908:	4652      	mov	r2, sl
 801090a:	465b      	mov	r3, fp
 801090c:	f7ef fe9c 	bl	8000648 <__aeabi_dmul>
 8010910:	4682      	mov	sl, r0
 8010912:	468b      	mov	fp, r1
 8010914:	e640      	b.n	8010598 <_strtod_l+0x88>
 8010916:	9a06      	ldr	r2, [sp, #24]
 8010918:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801091c:	4293      	cmp	r3, r2
 801091e:	db20      	blt.n	8010962 <_strtod_l+0x452>
 8010920:	4c64      	ldr	r4, [pc, #400]	; (8010ab4 <_strtod_l+0x5a4>)
 8010922:	f1c5 050f 	rsb	r5, r5, #15
 8010926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801092a:	4652      	mov	r2, sl
 801092c:	465b      	mov	r3, fp
 801092e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010932:	f7ef fe89 	bl	8000648 <__aeabi_dmul>
 8010936:	9b06      	ldr	r3, [sp, #24]
 8010938:	1b5d      	subs	r5, r3, r5
 801093a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801093e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010942:	e7e3      	b.n	801090c <_strtod_l+0x3fc>
 8010944:	9b06      	ldr	r3, [sp, #24]
 8010946:	3316      	adds	r3, #22
 8010948:	db0b      	blt.n	8010962 <_strtod_l+0x452>
 801094a:	9b05      	ldr	r3, [sp, #20]
 801094c:	1b9e      	subs	r6, r3, r6
 801094e:	4b59      	ldr	r3, [pc, #356]	; (8010ab4 <_strtod_l+0x5a4>)
 8010950:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010954:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010958:	4650      	mov	r0, sl
 801095a:	4659      	mov	r1, fp
 801095c:	f7ef ff9e 	bl	800089c <__aeabi_ddiv>
 8010960:	e7d6      	b.n	8010910 <_strtod_l+0x400>
 8010962:	9b06      	ldr	r3, [sp, #24]
 8010964:	eba5 0808 	sub.w	r8, r5, r8
 8010968:	4498      	add	r8, r3
 801096a:	f1b8 0f00 	cmp.w	r8, #0
 801096e:	dd74      	ble.n	8010a5a <_strtod_l+0x54a>
 8010970:	f018 030f 	ands.w	r3, r8, #15
 8010974:	d00a      	beq.n	801098c <_strtod_l+0x47c>
 8010976:	494f      	ldr	r1, [pc, #316]	; (8010ab4 <_strtod_l+0x5a4>)
 8010978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801097c:	4652      	mov	r2, sl
 801097e:	465b      	mov	r3, fp
 8010980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010984:	f7ef fe60 	bl	8000648 <__aeabi_dmul>
 8010988:	4682      	mov	sl, r0
 801098a:	468b      	mov	fp, r1
 801098c:	f038 080f 	bics.w	r8, r8, #15
 8010990:	d04f      	beq.n	8010a32 <_strtod_l+0x522>
 8010992:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010996:	dd22      	ble.n	80109de <_strtod_l+0x4ce>
 8010998:	2500      	movs	r5, #0
 801099a:	462e      	mov	r6, r5
 801099c:	9507      	str	r5, [sp, #28]
 801099e:	9505      	str	r5, [sp, #20]
 80109a0:	2322      	movs	r3, #34	; 0x22
 80109a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010abc <_strtod_l+0x5ac>
 80109a6:	6023      	str	r3, [r4, #0]
 80109a8:	f04f 0a00 	mov.w	sl, #0
 80109ac:	9b07      	ldr	r3, [sp, #28]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f43f adf2 	beq.w	8010598 <_strtod_l+0x88>
 80109b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80109b6:	4620      	mov	r0, r4
 80109b8:	f002 f982 	bl	8012cc0 <_Bfree>
 80109bc:	9905      	ldr	r1, [sp, #20]
 80109be:	4620      	mov	r0, r4
 80109c0:	f002 f97e 	bl	8012cc0 <_Bfree>
 80109c4:	4631      	mov	r1, r6
 80109c6:	4620      	mov	r0, r4
 80109c8:	f002 f97a 	bl	8012cc0 <_Bfree>
 80109cc:	9907      	ldr	r1, [sp, #28]
 80109ce:	4620      	mov	r0, r4
 80109d0:	f002 f976 	bl	8012cc0 <_Bfree>
 80109d4:	4629      	mov	r1, r5
 80109d6:	4620      	mov	r0, r4
 80109d8:	f002 f972 	bl	8012cc0 <_Bfree>
 80109dc:	e5dc      	b.n	8010598 <_strtod_l+0x88>
 80109de:	4b36      	ldr	r3, [pc, #216]	; (8010ab8 <_strtod_l+0x5a8>)
 80109e0:	9304      	str	r3, [sp, #16]
 80109e2:	2300      	movs	r3, #0
 80109e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80109e8:	4650      	mov	r0, sl
 80109ea:	4659      	mov	r1, fp
 80109ec:	4699      	mov	r9, r3
 80109ee:	f1b8 0f01 	cmp.w	r8, #1
 80109f2:	dc21      	bgt.n	8010a38 <_strtod_l+0x528>
 80109f4:	b10b      	cbz	r3, 80109fa <_strtod_l+0x4ea>
 80109f6:	4682      	mov	sl, r0
 80109f8:	468b      	mov	fp, r1
 80109fa:	4b2f      	ldr	r3, [pc, #188]	; (8010ab8 <_strtod_l+0x5a8>)
 80109fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010a00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010a04:	4652      	mov	r2, sl
 8010a06:	465b      	mov	r3, fp
 8010a08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010a0c:	f7ef fe1c 	bl	8000648 <__aeabi_dmul>
 8010a10:	4b2a      	ldr	r3, [pc, #168]	; (8010abc <_strtod_l+0x5ac>)
 8010a12:	460a      	mov	r2, r1
 8010a14:	400b      	ands	r3, r1
 8010a16:	492a      	ldr	r1, [pc, #168]	; (8010ac0 <_strtod_l+0x5b0>)
 8010a18:	428b      	cmp	r3, r1
 8010a1a:	4682      	mov	sl, r0
 8010a1c:	d8bc      	bhi.n	8010998 <_strtod_l+0x488>
 8010a1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010a22:	428b      	cmp	r3, r1
 8010a24:	bf86      	itte	hi
 8010a26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010ac4 <_strtod_l+0x5b4>
 8010a2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8010a2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010a32:	2300      	movs	r3, #0
 8010a34:	9304      	str	r3, [sp, #16]
 8010a36:	e084      	b.n	8010b42 <_strtod_l+0x632>
 8010a38:	f018 0f01 	tst.w	r8, #1
 8010a3c:	d005      	beq.n	8010a4a <_strtod_l+0x53a>
 8010a3e:	9b04      	ldr	r3, [sp, #16]
 8010a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a44:	f7ef fe00 	bl	8000648 <__aeabi_dmul>
 8010a48:	2301      	movs	r3, #1
 8010a4a:	9a04      	ldr	r2, [sp, #16]
 8010a4c:	3208      	adds	r2, #8
 8010a4e:	f109 0901 	add.w	r9, r9, #1
 8010a52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a56:	9204      	str	r2, [sp, #16]
 8010a58:	e7c9      	b.n	80109ee <_strtod_l+0x4de>
 8010a5a:	d0ea      	beq.n	8010a32 <_strtod_l+0x522>
 8010a5c:	f1c8 0800 	rsb	r8, r8, #0
 8010a60:	f018 020f 	ands.w	r2, r8, #15
 8010a64:	d00a      	beq.n	8010a7c <_strtod_l+0x56c>
 8010a66:	4b13      	ldr	r3, [pc, #76]	; (8010ab4 <_strtod_l+0x5a4>)
 8010a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a6c:	4650      	mov	r0, sl
 8010a6e:	4659      	mov	r1, fp
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	f7ef ff12 	bl	800089c <__aeabi_ddiv>
 8010a78:	4682      	mov	sl, r0
 8010a7a:	468b      	mov	fp, r1
 8010a7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010a80:	d0d7      	beq.n	8010a32 <_strtod_l+0x522>
 8010a82:	f1b8 0f1f 	cmp.w	r8, #31
 8010a86:	dd1f      	ble.n	8010ac8 <_strtod_l+0x5b8>
 8010a88:	2500      	movs	r5, #0
 8010a8a:	462e      	mov	r6, r5
 8010a8c:	9507      	str	r5, [sp, #28]
 8010a8e:	9505      	str	r5, [sp, #20]
 8010a90:	2322      	movs	r3, #34	; 0x22
 8010a92:	f04f 0a00 	mov.w	sl, #0
 8010a96:	f04f 0b00 	mov.w	fp, #0
 8010a9a:	6023      	str	r3, [r4, #0]
 8010a9c:	e786      	b.n	80109ac <_strtod_l+0x49c>
 8010a9e:	bf00      	nop
 8010aa0:	0802a8ea 	.word	0x0802a8ea
 8010aa4:	0802a92c 	.word	0x0802a92c
 8010aa8:	0802a8e2 	.word	0x0802a8e2
 8010aac:	0802aa6c 	.word	0x0802aa6c
 8010ab0:	0802a8c7 	.word	0x0802a8c7
 8010ab4:	0802acc0 	.word	0x0802acc0
 8010ab8:	0802ac98 	.word	0x0802ac98
 8010abc:	7ff00000 	.word	0x7ff00000
 8010ac0:	7ca00000 	.word	0x7ca00000
 8010ac4:	7fefffff 	.word	0x7fefffff
 8010ac8:	f018 0310 	ands.w	r3, r8, #16
 8010acc:	bf18      	it	ne
 8010ace:	236a      	movne	r3, #106	; 0x6a
 8010ad0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010e80 <_strtod_l+0x970>
 8010ad4:	9304      	str	r3, [sp, #16]
 8010ad6:	4650      	mov	r0, sl
 8010ad8:	4659      	mov	r1, fp
 8010ada:	2300      	movs	r3, #0
 8010adc:	f018 0f01 	tst.w	r8, #1
 8010ae0:	d004      	beq.n	8010aec <_strtod_l+0x5dc>
 8010ae2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010ae6:	f7ef fdaf 	bl	8000648 <__aeabi_dmul>
 8010aea:	2301      	movs	r3, #1
 8010aec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010af0:	f109 0908 	add.w	r9, r9, #8
 8010af4:	d1f2      	bne.n	8010adc <_strtod_l+0x5cc>
 8010af6:	b10b      	cbz	r3, 8010afc <_strtod_l+0x5ec>
 8010af8:	4682      	mov	sl, r0
 8010afa:	468b      	mov	fp, r1
 8010afc:	9b04      	ldr	r3, [sp, #16]
 8010afe:	b1c3      	cbz	r3, 8010b32 <_strtod_l+0x622>
 8010b00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010b04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	4659      	mov	r1, fp
 8010b0c:	dd11      	ble.n	8010b32 <_strtod_l+0x622>
 8010b0e:	2b1f      	cmp	r3, #31
 8010b10:	f340 8124 	ble.w	8010d5c <_strtod_l+0x84c>
 8010b14:	2b34      	cmp	r3, #52	; 0x34
 8010b16:	bfde      	ittt	le
 8010b18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010b1c:	f04f 33ff 	movle.w	r3, #4294967295
 8010b20:	fa03 f202 	lslle.w	r2, r3, r2
 8010b24:	f04f 0a00 	mov.w	sl, #0
 8010b28:	bfcc      	ite	gt
 8010b2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010b2e:	ea02 0b01 	andle.w	fp, r2, r1
 8010b32:	2200      	movs	r2, #0
 8010b34:	2300      	movs	r3, #0
 8010b36:	4650      	mov	r0, sl
 8010b38:	4659      	mov	r1, fp
 8010b3a:	f7ef ffed 	bl	8000b18 <__aeabi_dcmpeq>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d1a2      	bne.n	8010a88 <_strtod_l+0x578>
 8010b42:	9b07      	ldr	r3, [sp, #28]
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	9908      	ldr	r1, [sp, #32]
 8010b48:	462b      	mov	r3, r5
 8010b4a:	463a      	mov	r2, r7
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f002 f91f 	bl	8012d90 <__s2b>
 8010b52:	9007      	str	r0, [sp, #28]
 8010b54:	2800      	cmp	r0, #0
 8010b56:	f43f af1f 	beq.w	8010998 <_strtod_l+0x488>
 8010b5a:	9b05      	ldr	r3, [sp, #20]
 8010b5c:	1b9e      	subs	r6, r3, r6
 8010b5e:	9b06      	ldr	r3, [sp, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	bfb4      	ite	lt
 8010b64:	4633      	movlt	r3, r6
 8010b66:	2300      	movge	r3, #0
 8010b68:	930c      	str	r3, [sp, #48]	; 0x30
 8010b6a:	9b06      	ldr	r3, [sp, #24]
 8010b6c:	2500      	movs	r5, #0
 8010b6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b72:	9312      	str	r3, [sp, #72]	; 0x48
 8010b74:	462e      	mov	r6, r5
 8010b76:	9b07      	ldr	r3, [sp, #28]
 8010b78:	4620      	mov	r0, r4
 8010b7a:	6859      	ldr	r1, [r3, #4]
 8010b7c:	f002 f860 	bl	8012c40 <_Balloc>
 8010b80:	9005      	str	r0, [sp, #20]
 8010b82:	2800      	cmp	r0, #0
 8010b84:	f43f af0c 	beq.w	80109a0 <_strtod_l+0x490>
 8010b88:	9b07      	ldr	r3, [sp, #28]
 8010b8a:	691a      	ldr	r2, [r3, #16]
 8010b8c:	3202      	adds	r2, #2
 8010b8e:	f103 010c 	add.w	r1, r3, #12
 8010b92:	0092      	lsls	r2, r2, #2
 8010b94:	300c      	adds	r0, #12
 8010b96:	f7fe fc19 	bl	800f3cc <memcpy>
 8010b9a:	ec4b ab10 	vmov	d0, sl, fp
 8010b9e:	aa1a      	add	r2, sp, #104	; 0x68
 8010ba0:	a919      	add	r1, sp, #100	; 0x64
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f002 fc3a 	bl	801341c <__d2b>
 8010ba8:	ec4b ab18 	vmov	d8, sl, fp
 8010bac:	9018      	str	r0, [sp, #96]	; 0x60
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	f43f aef6 	beq.w	80109a0 <_strtod_l+0x490>
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	f002 f984 	bl	8012ec4 <__i2b>
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	f43f aeee 	beq.w	80109a0 <_strtod_l+0x490>
 8010bc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010bc6:	9904      	ldr	r1, [sp, #16]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	bfab      	itete	ge
 8010bcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010bce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010bd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010bd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010bd6:	bfac      	ite	ge
 8010bd8:	eb03 0902 	addge.w	r9, r3, r2
 8010bdc:	1ad7      	sublt	r7, r2, r3
 8010bde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010be0:	eba3 0801 	sub.w	r8, r3, r1
 8010be4:	4490      	add	r8, r2
 8010be6:	4ba1      	ldr	r3, [pc, #644]	; (8010e6c <_strtod_l+0x95c>)
 8010be8:	f108 38ff 	add.w	r8, r8, #4294967295
 8010bec:	4598      	cmp	r8, r3
 8010bee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010bf2:	f280 80c7 	bge.w	8010d84 <_strtod_l+0x874>
 8010bf6:	eba3 0308 	sub.w	r3, r3, r8
 8010bfa:	2b1f      	cmp	r3, #31
 8010bfc:	eba2 0203 	sub.w	r2, r2, r3
 8010c00:	f04f 0101 	mov.w	r1, #1
 8010c04:	f300 80b1 	bgt.w	8010d6a <_strtod_l+0x85a>
 8010c08:	fa01 f303 	lsl.w	r3, r1, r3
 8010c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8010c0e:	2300      	movs	r3, #0
 8010c10:	9308      	str	r3, [sp, #32]
 8010c12:	eb09 0802 	add.w	r8, r9, r2
 8010c16:	9b04      	ldr	r3, [sp, #16]
 8010c18:	45c1      	cmp	r9, r8
 8010c1a:	4417      	add	r7, r2
 8010c1c:	441f      	add	r7, r3
 8010c1e:	464b      	mov	r3, r9
 8010c20:	bfa8      	it	ge
 8010c22:	4643      	movge	r3, r8
 8010c24:	42bb      	cmp	r3, r7
 8010c26:	bfa8      	it	ge
 8010c28:	463b      	movge	r3, r7
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	bfc2      	ittt	gt
 8010c2e:	eba8 0803 	subgt.w	r8, r8, r3
 8010c32:	1aff      	subgt	r7, r7, r3
 8010c34:	eba9 0903 	subgt.w	r9, r9, r3
 8010c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	dd17      	ble.n	8010c6e <_strtod_l+0x75e>
 8010c3e:	4631      	mov	r1, r6
 8010c40:	461a      	mov	r2, r3
 8010c42:	4620      	mov	r0, r4
 8010c44:	f002 f9fe 	bl	8013044 <__pow5mult>
 8010c48:	4606      	mov	r6, r0
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	f43f aea8 	beq.w	80109a0 <_strtod_l+0x490>
 8010c50:	4601      	mov	r1, r0
 8010c52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010c54:	4620      	mov	r0, r4
 8010c56:	f002 f94b 	bl	8012ef0 <__multiply>
 8010c5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	f43f ae9f 	beq.w	80109a0 <_strtod_l+0x490>
 8010c62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010c64:	4620      	mov	r0, r4
 8010c66:	f002 f82b 	bl	8012cc0 <_Bfree>
 8010c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c6c:	9318      	str	r3, [sp, #96]	; 0x60
 8010c6e:	f1b8 0f00 	cmp.w	r8, #0
 8010c72:	f300 808c 	bgt.w	8010d8e <_strtod_l+0x87e>
 8010c76:	9b06      	ldr	r3, [sp, #24]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	dd08      	ble.n	8010c8e <_strtod_l+0x77e>
 8010c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010c7e:	9905      	ldr	r1, [sp, #20]
 8010c80:	4620      	mov	r0, r4
 8010c82:	f002 f9df 	bl	8013044 <__pow5mult>
 8010c86:	9005      	str	r0, [sp, #20]
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	f43f ae89 	beq.w	80109a0 <_strtod_l+0x490>
 8010c8e:	2f00      	cmp	r7, #0
 8010c90:	dd08      	ble.n	8010ca4 <_strtod_l+0x794>
 8010c92:	9905      	ldr	r1, [sp, #20]
 8010c94:	463a      	mov	r2, r7
 8010c96:	4620      	mov	r0, r4
 8010c98:	f002 fa2e 	bl	80130f8 <__lshift>
 8010c9c:	9005      	str	r0, [sp, #20]
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	f43f ae7e 	beq.w	80109a0 <_strtod_l+0x490>
 8010ca4:	f1b9 0f00 	cmp.w	r9, #0
 8010ca8:	dd08      	ble.n	8010cbc <_strtod_l+0x7ac>
 8010caa:	4631      	mov	r1, r6
 8010cac:	464a      	mov	r2, r9
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f002 fa22 	bl	80130f8 <__lshift>
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f43f ae72 	beq.w	80109a0 <_strtod_l+0x490>
 8010cbc:	9a05      	ldr	r2, [sp, #20]
 8010cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f002 faa5 	bl	8013210 <__mdiff>
 8010cc6:	4605      	mov	r5, r0
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	f43f ae69 	beq.w	80109a0 <_strtod_l+0x490>
 8010cce:	68c3      	ldr	r3, [r0, #12]
 8010cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60c3      	str	r3, [r0, #12]
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	f002 fa7e 	bl	80131d8 <__mcmp>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	da60      	bge.n	8010da2 <_strtod_l+0x892>
 8010ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ce2:	ea53 030a 	orrs.w	r3, r3, sl
 8010ce6:	f040 8082 	bne.w	8010dee <_strtod_l+0x8de>
 8010cea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d17d      	bne.n	8010dee <_strtod_l+0x8de>
 8010cf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010cf6:	0d1b      	lsrs	r3, r3, #20
 8010cf8:	051b      	lsls	r3, r3, #20
 8010cfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010cfe:	d976      	bls.n	8010dee <_strtod_l+0x8de>
 8010d00:	696b      	ldr	r3, [r5, #20]
 8010d02:	b913      	cbnz	r3, 8010d0a <_strtod_l+0x7fa>
 8010d04:	692b      	ldr	r3, [r5, #16]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	dd71      	ble.n	8010dee <_strtod_l+0x8de>
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f002 f9f2 	bl	80130f8 <__lshift>
 8010d14:	4631      	mov	r1, r6
 8010d16:	4605      	mov	r5, r0
 8010d18:	f002 fa5e 	bl	80131d8 <__mcmp>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	dd66      	ble.n	8010dee <_strtod_l+0x8de>
 8010d20:	9904      	ldr	r1, [sp, #16]
 8010d22:	4a53      	ldr	r2, [pc, #332]	; (8010e70 <_strtod_l+0x960>)
 8010d24:	465b      	mov	r3, fp
 8010d26:	2900      	cmp	r1, #0
 8010d28:	f000 8081 	beq.w	8010e2e <_strtod_l+0x91e>
 8010d2c:	ea02 010b 	and.w	r1, r2, fp
 8010d30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010d34:	dc7b      	bgt.n	8010e2e <_strtod_l+0x91e>
 8010d36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010d3a:	f77f aea9 	ble.w	8010a90 <_strtod_l+0x580>
 8010d3e:	4b4d      	ldr	r3, [pc, #308]	; (8010e74 <_strtod_l+0x964>)
 8010d40:	4650      	mov	r0, sl
 8010d42:	4659      	mov	r1, fp
 8010d44:	2200      	movs	r2, #0
 8010d46:	f7ef fc7f 	bl	8000648 <__aeabi_dmul>
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	4303      	orrs	r3, r0
 8010d4e:	bf08      	it	eq
 8010d50:	2322      	moveq	r3, #34	; 0x22
 8010d52:	4682      	mov	sl, r0
 8010d54:	468b      	mov	fp, r1
 8010d56:	bf08      	it	eq
 8010d58:	6023      	streq	r3, [r4, #0]
 8010d5a:	e62b      	b.n	80109b4 <_strtod_l+0x4a4>
 8010d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d60:	fa02 f303 	lsl.w	r3, r2, r3
 8010d64:	ea03 0a0a 	and.w	sl, r3, sl
 8010d68:	e6e3      	b.n	8010b32 <_strtod_l+0x622>
 8010d6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010d6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010d72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010d76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010d7a:	fa01 f308 	lsl.w	r3, r1, r8
 8010d7e:	9308      	str	r3, [sp, #32]
 8010d80:	910d      	str	r1, [sp, #52]	; 0x34
 8010d82:	e746      	b.n	8010c12 <_strtod_l+0x702>
 8010d84:	2300      	movs	r3, #0
 8010d86:	9308      	str	r3, [sp, #32]
 8010d88:	2301      	movs	r3, #1
 8010d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8010d8c:	e741      	b.n	8010c12 <_strtod_l+0x702>
 8010d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010d90:	4642      	mov	r2, r8
 8010d92:	4620      	mov	r0, r4
 8010d94:	f002 f9b0 	bl	80130f8 <__lshift>
 8010d98:	9018      	str	r0, [sp, #96]	; 0x60
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f47f af6b 	bne.w	8010c76 <_strtod_l+0x766>
 8010da0:	e5fe      	b.n	80109a0 <_strtod_l+0x490>
 8010da2:	465f      	mov	r7, fp
 8010da4:	d16e      	bne.n	8010e84 <_strtod_l+0x974>
 8010da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010da8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010dac:	b342      	cbz	r2, 8010e00 <_strtod_l+0x8f0>
 8010dae:	4a32      	ldr	r2, [pc, #200]	; (8010e78 <_strtod_l+0x968>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d128      	bne.n	8010e06 <_strtod_l+0x8f6>
 8010db4:	9b04      	ldr	r3, [sp, #16]
 8010db6:	4651      	mov	r1, sl
 8010db8:	b1eb      	cbz	r3, 8010df6 <_strtod_l+0x8e6>
 8010dba:	4b2d      	ldr	r3, [pc, #180]	; (8010e70 <_strtod_l+0x960>)
 8010dbc:	403b      	ands	r3, r7
 8010dbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc6:	d819      	bhi.n	8010dfc <_strtod_l+0x8ec>
 8010dc8:	0d1b      	lsrs	r3, r3, #20
 8010dca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010dce:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd2:	4299      	cmp	r1, r3
 8010dd4:	d117      	bne.n	8010e06 <_strtod_l+0x8f6>
 8010dd6:	4b29      	ldr	r3, [pc, #164]	; (8010e7c <_strtod_l+0x96c>)
 8010dd8:	429f      	cmp	r7, r3
 8010dda:	d102      	bne.n	8010de2 <_strtod_l+0x8d2>
 8010ddc:	3101      	adds	r1, #1
 8010dde:	f43f addf 	beq.w	80109a0 <_strtod_l+0x490>
 8010de2:	4b23      	ldr	r3, [pc, #140]	; (8010e70 <_strtod_l+0x960>)
 8010de4:	403b      	ands	r3, r7
 8010de6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010dea:	f04f 0a00 	mov.w	sl, #0
 8010dee:	9b04      	ldr	r3, [sp, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1a4      	bne.n	8010d3e <_strtod_l+0x82e>
 8010df4:	e5de      	b.n	80109b4 <_strtod_l+0x4a4>
 8010df6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dfa:	e7ea      	b.n	8010dd2 <_strtod_l+0x8c2>
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	e7e8      	b.n	8010dd2 <_strtod_l+0x8c2>
 8010e00:	ea53 030a 	orrs.w	r3, r3, sl
 8010e04:	d08c      	beq.n	8010d20 <_strtod_l+0x810>
 8010e06:	9b08      	ldr	r3, [sp, #32]
 8010e08:	b1db      	cbz	r3, 8010e42 <_strtod_l+0x932>
 8010e0a:	423b      	tst	r3, r7
 8010e0c:	d0ef      	beq.n	8010dee <_strtod_l+0x8de>
 8010e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e10:	9a04      	ldr	r2, [sp, #16]
 8010e12:	4650      	mov	r0, sl
 8010e14:	4659      	mov	r1, fp
 8010e16:	b1c3      	cbz	r3, 8010e4a <_strtod_l+0x93a>
 8010e18:	f7ff fb5e 	bl	80104d8 <sulp>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	ec51 0b18 	vmov	r0, r1, d8
 8010e24:	f7ef fa5a 	bl	80002dc <__adddf3>
 8010e28:	4682      	mov	sl, r0
 8010e2a:	468b      	mov	fp, r1
 8010e2c:	e7df      	b.n	8010dee <_strtod_l+0x8de>
 8010e2e:	4013      	ands	r3, r2
 8010e30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010e34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8010e40:	e7d5      	b.n	8010dee <_strtod_l+0x8de>
 8010e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e44:	ea13 0f0a 	tst.w	r3, sl
 8010e48:	e7e0      	b.n	8010e0c <_strtod_l+0x8fc>
 8010e4a:	f7ff fb45 	bl	80104d8 <sulp>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	ec51 0b18 	vmov	r0, r1, d8
 8010e56:	f7ef fa3f 	bl	80002d8 <__aeabi_dsub>
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	4682      	mov	sl, r0
 8010e60:	468b      	mov	fp, r1
 8010e62:	f7ef fe59 	bl	8000b18 <__aeabi_dcmpeq>
 8010e66:	2800      	cmp	r0, #0
 8010e68:	d0c1      	beq.n	8010dee <_strtod_l+0x8de>
 8010e6a:	e611      	b.n	8010a90 <_strtod_l+0x580>
 8010e6c:	fffffc02 	.word	0xfffffc02
 8010e70:	7ff00000 	.word	0x7ff00000
 8010e74:	39500000 	.word	0x39500000
 8010e78:	000fffff 	.word	0x000fffff
 8010e7c:	7fefffff 	.word	0x7fefffff
 8010e80:	0802a940 	.word	0x0802a940
 8010e84:	4631      	mov	r1, r6
 8010e86:	4628      	mov	r0, r5
 8010e88:	f002 fb24 	bl	80134d4 <__ratio>
 8010e8c:	ec59 8b10 	vmov	r8, r9, d0
 8010e90:	ee10 0a10 	vmov	r0, s0
 8010e94:	2200      	movs	r2, #0
 8010e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e9a:	4649      	mov	r1, r9
 8010e9c:	f7ef fe50 	bl	8000b40 <__aeabi_dcmple>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d07a      	beq.n	8010f9a <_strtod_l+0xa8a>
 8010ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d04a      	beq.n	8010f40 <_strtod_l+0xa30>
 8010eaa:	4b95      	ldr	r3, [pc, #596]	; (8011100 <_strtod_l+0xbf0>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010eb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011100 <_strtod_l+0xbf0>
 8010eb6:	f04f 0800 	mov.w	r8, #0
 8010eba:	4b92      	ldr	r3, [pc, #584]	; (8011104 <_strtod_l+0xbf4>)
 8010ebc:	403b      	ands	r3, r7
 8010ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8010ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ec2:	4b91      	ldr	r3, [pc, #580]	; (8011108 <_strtod_l+0xbf8>)
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	f040 80b0 	bne.w	801102a <_strtod_l+0xb1a>
 8010eca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ece:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010ed2:	ec4b ab10 	vmov	d0, sl, fp
 8010ed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010eda:	f002 fa23 	bl	8013324 <__ulp>
 8010ede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ee2:	ec53 2b10 	vmov	r2, r3, d0
 8010ee6:	f7ef fbaf 	bl	8000648 <__aeabi_dmul>
 8010eea:	4652      	mov	r2, sl
 8010eec:	465b      	mov	r3, fp
 8010eee:	f7ef f9f5 	bl	80002dc <__adddf3>
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	4983      	ldr	r1, [pc, #524]	; (8011104 <_strtod_l+0xbf4>)
 8010ef6:	4a85      	ldr	r2, [pc, #532]	; (801110c <_strtod_l+0xbfc>)
 8010ef8:	4019      	ands	r1, r3
 8010efa:	4291      	cmp	r1, r2
 8010efc:	4682      	mov	sl, r0
 8010efe:	d960      	bls.n	8010fc2 <_strtod_l+0xab2>
 8010f00:	ee18 3a90 	vmov	r3, s17
 8010f04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d104      	bne.n	8010f16 <_strtod_l+0xa06>
 8010f0c:	ee18 3a10 	vmov	r3, s16
 8010f10:	3301      	adds	r3, #1
 8010f12:	f43f ad45 	beq.w	80109a0 <_strtod_l+0x490>
 8010f16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011118 <_strtod_l+0xc08>
 8010f1a:	f04f 3aff 	mov.w	sl, #4294967295
 8010f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f20:	4620      	mov	r0, r4
 8010f22:	f001 fecd 	bl	8012cc0 <_Bfree>
 8010f26:	9905      	ldr	r1, [sp, #20]
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f001 fec9 	bl	8012cc0 <_Bfree>
 8010f2e:	4631      	mov	r1, r6
 8010f30:	4620      	mov	r0, r4
 8010f32:	f001 fec5 	bl	8012cc0 <_Bfree>
 8010f36:	4629      	mov	r1, r5
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f001 fec1 	bl	8012cc0 <_Bfree>
 8010f3e:	e61a      	b.n	8010b76 <_strtod_l+0x666>
 8010f40:	f1ba 0f00 	cmp.w	sl, #0
 8010f44:	d11b      	bne.n	8010f7e <_strtod_l+0xa6e>
 8010f46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f4a:	b9f3      	cbnz	r3, 8010f8a <_strtod_l+0xa7a>
 8010f4c:	4b6c      	ldr	r3, [pc, #432]	; (8011100 <_strtod_l+0xbf0>)
 8010f4e:	2200      	movs	r2, #0
 8010f50:	4640      	mov	r0, r8
 8010f52:	4649      	mov	r1, r9
 8010f54:	f7ef fdea 	bl	8000b2c <__aeabi_dcmplt>
 8010f58:	b9d0      	cbnz	r0, 8010f90 <_strtod_l+0xa80>
 8010f5a:	4640      	mov	r0, r8
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	4b6c      	ldr	r3, [pc, #432]	; (8011110 <_strtod_l+0xc00>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	f7ef fb71 	bl	8000648 <__aeabi_dmul>
 8010f66:	4680      	mov	r8, r0
 8010f68:	4689      	mov	r9, r1
 8010f6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010f6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010f72:	9315      	str	r3, [sp, #84]	; 0x54
 8010f74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010f78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f7c:	e79d      	b.n	8010eba <_strtod_l+0x9aa>
 8010f7e:	f1ba 0f01 	cmp.w	sl, #1
 8010f82:	d102      	bne.n	8010f8a <_strtod_l+0xa7a>
 8010f84:	2f00      	cmp	r7, #0
 8010f86:	f43f ad83 	beq.w	8010a90 <_strtod_l+0x580>
 8010f8a:	4b62      	ldr	r3, [pc, #392]	; (8011114 <_strtod_l+0xc04>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	e78e      	b.n	8010eae <_strtod_l+0x99e>
 8010f90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011110 <_strtod_l+0xc00>
 8010f94:	f04f 0800 	mov.w	r8, #0
 8010f98:	e7e7      	b.n	8010f6a <_strtod_l+0xa5a>
 8010f9a:	4b5d      	ldr	r3, [pc, #372]	; (8011110 <_strtod_l+0xc00>)
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	4649      	mov	r1, r9
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f7ef fb51 	bl	8000648 <__aeabi_dmul>
 8010fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fa8:	4680      	mov	r8, r0
 8010faa:	4689      	mov	r9, r1
 8010fac:	b933      	cbnz	r3, 8010fbc <_strtod_l+0xaac>
 8010fae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8010fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010fba:	e7dd      	b.n	8010f78 <_strtod_l+0xa68>
 8010fbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010fc0:	e7f9      	b.n	8010fb6 <_strtod_l+0xaa6>
 8010fc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010fc6:	9b04      	ldr	r3, [sp, #16]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1a8      	bne.n	8010f1e <_strtod_l+0xa0e>
 8010fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010fd2:	0d1b      	lsrs	r3, r3, #20
 8010fd4:	051b      	lsls	r3, r3, #20
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d1a1      	bne.n	8010f1e <_strtod_l+0xa0e>
 8010fda:	4640      	mov	r0, r8
 8010fdc:	4649      	mov	r1, r9
 8010fde:	f7ef fee3 	bl	8000da8 <__aeabi_d2lz>
 8010fe2:	f7ef fb03 	bl	80005ec <__aeabi_l2d>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4640      	mov	r0, r8
 8010fec:	4649      	mov	r1, r9
 8010fee:	f7ef f973 	bl	80002d8 <__aeabi_dsub>
 8010ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ff8:	ea43 030a 	orr.w	r3, r3, sl
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	4680      	mov	r8, r0
 8011000:	4689      	mov	r9, r1
 8011002:	d055      	beq.n	80110b0 <_strtod_l+0xba0>
 8011004:	a336      	add	r3, pc, #216	; (adr r3, 80110e0 <_strtod_l+0xbd0>)
 8011006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100a:	f7ef fd8f 	bl	8000b2c <__aeabi_dcmplt>
 801100e:	2800      	cmp	r0, #0
 8011010:	f47f acd0 	bne.w	80109b4 <_strtod_l+0x4a4>
 8011014:	a334      	add	r3, pc, #208	; (adr r3, 80110e8 <_strtod_l+0xbd8>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	4640      	mov	r0, r8
 801101c:	4649      	mov	r1, r9
 801101e:	f7ef fda3 	bl	8000b68 <__aeabi_dcmpgt>
 8011022:	2800      	cmp	r0, #0
 8011024:	f43f af7b 	beq.w	8010f1e <_strtod_l+0xa0e>
 8011028:	e4c4      	b.n	80109b4 <_strtod_l+0x4a4>
 801102a:	9b04      	ldr	r3, [sp, #16]
 801102c:	b333      	cbz	r3, 801107c <_strtod_l+0xb6c>
 801102e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011030:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011034:	d822      	bhi.n	801107c <_strtod_l+0xb6c>
 8011036:	a32e      	add	r3, pc, #184	; (adr r3, 80110f0 <_strtod_l+0xbe0>)
 8011038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103c:	4640      	mov	r0, r8
 801103e:	4649      	mov	r1, r9
 8011040:	f7ef fd7e 	bl	8000b40 <__aeabi_dcmple>
 8011044:	b1a0      	cbz	r0, 8011070 <_strtod_l+0xb60>
 8011046:	4649      	mov	r1, r9
 8011048:	4640      	mov	r0, r8
 801104a:	f7ef fdd5 	bl	8000bf8 <__aeabi_d2uiz>
 801104e:	2801      	cmp	r0, #1
 8011050:	bf38      	it	cc
 8011052:	2001      	movcc	r0, #1
 8011054:	f7ef fa7e 	bl	8000554 <__aeabi_ui2d>
 8011058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801105a:	4680      	mov	r8, r0
 801105c:	4689      	mov	r9, r1
 801105e:	bb23      	cbnz	r3, 80110aa <_strtod_l+0xb9a>
 8011060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011064:	9010      	str	r0, [sp, #64]	; 0x40
 8011066:	9311      	str	r3, [sp, #68]	; 0x44
 8011068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801106c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011074:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011078:	1a9b      	subs	r3, r3, r2
 801107a:	9309      	str	r3, [sp, #36]	; 0x24
 801107c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011080:	eeb0 0a48 	vmov.f32	s0, s16
 8011084:	eef0 0a68 	vmov.f32	s1, s17
 8011088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801108c:	f002 f94a 	bl	8013324 <__ulp>
 8011090:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011094:	ec53 2b10 	vmov	r2, r3, d0
 8011098:	f7ef fad6 	bl	8000648 <__aeabi_dmul>
 801109c:	ec53 2b18 	vmov	r2, r3, d8
 80110a0:	f7ef f91c 	bl	80002dc <__adddf3>
 80110a4:	4682      	mov	sl, r0
 80110a6:	468b      	mov	fp, r1
 80110a8:	e78d      	b.n	8010fc6 <_strtod_l+0xab6>
 80110aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80110ae:	e7db      	b.n	8011068 <_strtod_l+0xb58>
 80110b0:	a311      	add	r3, pc, #68	; (adr r3, 80110f8 <_strtod_l+0xbe8>)
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	f7ef fd39 	bl	8000b2c <__aeabi_dcmplt>
 80110ba:	e7b2      	b.n	8011022 <_strtod_l+0xb12>
 80110bc:	2300      	movs	r3, #0
 80110be:	930a      	str	r3, [sp, #40]	; 0x28
 80110c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80110c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110c4:	6013      	str	r3, [r2, #0]
 80110c6:	f7ff ba6b 	b.w	80105a0 <_strtod_l+0x90>
 80110ca:	2a65      	cmp	r2, #101	; 0x65
 80110cc:	f43f ab5f 	beq.w	801078e <_strtod_l+0x27e>
 80110d0:	2a45      	cmp	r2, #69	; 0x45
 80110d2:	f43f ab5c 	beq.w	801078e <_strtod_l+0x27e>
 80110d6:	2301      	movs	r3, #1
 80110d8:	f7ff bb94 	b.w	8010804 <_strtod_l+0x2f4>
 80110dc:	f3af 8000 	nop.w
 80110e0:	94a03595 	.word	0x94a03595
 80110e4:	3fdfffff 	.word	0x3fdfffff
 80110e8:	35afe535 	.word	0x35afe535
 80110ec:	3fe00000 	.word	0x3fe00000
 80110f0:	ffc00000 	.word	0xffc00000
 80110f4:	41dfffff 	.word	0x41dfffff
 80110f8:	94a03595 	.word	0x94a03595
 80110fc:	3fcfffff 	.word	0x3fcfffff
 8011100:	3ff00000 	.word	0x3ff00000
 8011104:	7ff00000 	.word	0x7ff00000
 8011108:	7fe00000 	.word	0x7fe00000
 801110c:	7c9fffff 	.word	0x7c9fffff
 8011110:	3fe00000 	.word	0x3fe00000
 8011114:	bff00000 	.word	0xbff00000
 8011118:	7fefffff 	.word	0x7fefffff

0801111c <_strtod_r>:
 801111c:	4b01      	ldr	r3, [pc, #4]	; (8011124 <_strtod_r+0x8>)
 801111e:	f7ff b9f7 	b.w	8010510 <_strtod_l>
 8011122:	bf00      	nop
 8011124:	20000144 	.word	0x20000144

08011128 <_strtol_l.constprop.0>:
 8011128:	2b01      	cmp	r3, #1
 801112a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801112e:	d001      	beq.n	8011134 <_strtol_l.constprop.0+0xc>
 8011130:	2b24      	cmp	r3, #36	; 0x24
 8011132:	d906      	bls.n	8011142 <_strtol_l.constprop.0+0x1a>
 8011134:	f7fe f90e 	bl	800f354 <__errno>
 8011138:	2316      	movs	r3, #22
 801113a:	6003      	str	r3, [r0, #0]
 801113c:	2000      	movs	r0, #0
 801113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011142:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011228 <_strtol_l.constprop.0+0x100>
 8011146:	460d      	mov	r5, r1
 8011148:	462e      	mov	r6, r5
 801114a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801114e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011152:	f017 0708 	ands.w	r7, r7, #8
 8011156:	d1f7      	bne.n	8011148 <_strtol_l.constprop.0+0x20>
 8011158:	2c2d      	cmp	r4, #45	; 0x2d
 801115a:	d132      	bne.n	80111c2 <_strtol_l.constprop.0+0x9a>
 801115c:	782c      	ldrb	r4, [r5, #0]
 801115e:	2701      	movs	r7, #1
 8011160:	1cb5      	adds	r5, r6, #2
 8011162:	2b00      	cmp	r3, #0
 8011164:	d05b      	beq.n	801121e <_strtol_l.constprop.0+0xf6>
 8011166:	2b10      	cmp	r3, #16
 8011168:	d109      	bne.n	801117e <_strtol_l.constprop.0+0x56>
 801116a:	2c30      	cmp	r4, #48	; 0x30
 801116c:	d107      	bne.n	801117e <_strtol_l.constprop.0+0x56>
 801116e:	782c      	ldrb	r4, [r5, #0]
 8011170:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011174:	2c58      	cmp	r4, #88	; 0x58
 8011176:	d14d      	bne.n	8011214 <_strtol_l.constprop.0+0xec>
 8011178:	786c      	ldrb	r4, [r5, #1]
 801117a:	2310      	movs	r3, #16
 801117c:	3502      	adds	r5, #2
 801117e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011182:	f108 38ff 	add.w	r8, r8, #4294967295
 8011186:	f04f 0c00 	mov.w	ip, #0
 801118a:	fbb8 f9f3 	udiv	r9, r8, r3
 801118e:	4666      	mov	r6, ip
 8011190:	fb03 8a19 	mls	sl, r3, r9, r8
 8011194:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011198:	f1be 0f09 	cmp.w	lr, #9
 801119c:	d816      	bhi.n	80111cc <_strtol_l.constprop.0+0xa4>
 801119e:	4674      	mov	r4, lr
 80111a0:	42a3      	cmp	r3, r4
 80111a2:	dd24      	ble.n	80111ee <_strtol_l.constprop.0+0xc6>
 80111a4:	f1bc 0f00 	cmp.w	ip, #0
 80111a8:	db1e      	blt.n	80111e8 <_strtol_l.constprop.0+0xc0>
 80111aa:	45b1      	cmp	r9, r6
 80111ac:	d31c      	bcc.n	80111e8 <_strtol_l.constprop.0+0xc0>
 80111ae:	d101      	bne.n	80111b4 <_strtol_l.constprop.0+0x8c>
 80111b0:	45a2      	cmp	sl, r4
 80111b2:	db19      	blt.n	80111e8 <_strtol_l.constprop.0+0xc0>
 80111b4:	fb06 4603 	mla	r6, r6, r3, r4
 80111b8:	f04f 0c01 	mov.w	ip, #1
 80111bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111c0:	e7e8      	b.n	8011194 <_strtol_l.constprop.0+0x6c>
 80111c2:	2c2b      	cmp	r4, #43	; 0x2b
 80111c4:	bf04      	itt	eq
 80111c6:	782c      	ldrbeq	r4, [r5, #0]
 80111c8:	1cb5      	addeq	r5, r6, #2
 80111ca:	e7ca      	b.n	8011162 <_strtol_l.constprop.0+0x3a>
 80111cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80111d0:	f1be 0f19 	cmp.w	lr, #25
 80111d4:	d801      	bhi.n	80111da <_strtol_l.constprop.0+0xb2>
 80111d6:	3c37      	subs	r4, #55	; 0x37
 80111d8:	e7e2      	b.n	80111a0 <_strtol_l.constprop.0+0x78>
 80111da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80111de:	f1be 0f19 	cmp.w	lr, #25
 80111e2:	d804      	bhi.n	80111ee <_strtol_l.constprop.0+0xc6>
 80111e4:	3c57      	subs	r4, #87	; 0x57
 80111e6:	e7db      	b.n	80111a0 <_strtol_l.constprop.0+0x78>
 80111e8:	f04f 3cff 	mov.w	ip, #4294967295
 80111ec:	e7e6      	b.n	80111bc <_strtol_l.constprop.0+0x94>
 80111ee:	f1bc 0f00 	cmp.w	ip, #0
 80111f2:	da05      	bge.n	8011200 <_strtol_l.constprop.0+0xd8>
 80111f4:	2322      	movs	r3, #34	; 0x22
 80111f6:	6003      	str	r3, [r0, #0]
 80111f8:	4646      	mov	r6, r8
 80111fa:	b942      	cbnz	r2, 801120e <_strtol_l.constprop.0+0xe6>
 80111fc:	4630      	mov	r0, r6
 80111fe:	e79e      	b.n	801113e <_strtol_l.constprop.0+0x16>
 8011200:	b107      	cbz	r7, 8011204 <_strtol_l.constprop.0+0xdc>
 8011202:	4276      	negs	r6, r6
 8011204:	2a00      	cmp	r2, #0
 8011206:	d0f9      	beq.n	80111fc <_strtol_l.constprop.0+0xd4>
 8011208:	f1bc 0f00 	cmp.w	ip, #0
 801120c:	d000      	beq.n	8011210 <_strtol_l.constprop.0+0xe8>
 801120e:	1e69      	subs	r1, r5, #1
 8011210:	6011      	str	r1, [r2, #0]
 8011212:	e7f3      	b.n	80111fc <_strtol_l.constprop.0+0xd4>
 8011214:	2430      	movs	r4, #48	; 0x30
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1b1      	bne.n	801117e <_strtol_l.constprop.0+0x56>
 801121a:	2308      	movs	r3, #8
 801121c:	e7af      	b.n	801117e <_strtol_l.constprop.0+0x56>
 801121e:	2c30      	cmp	r4, #48	; 0x30
 8011220:	d0a5      	beq.n	801116e <_strtol_l.constprop.0+0x46>
 8011222:	230a      	movs	r3, #10
 8011224:	e7ab      	b.n	801117e <_strtol_l.constprop.0+0x56>
 8011226:	bf00      	nop
 8011228:	0802a969 	.word	0x0802a969

0801122c <_strtol_r>:
 801122c:	f7ff bf7c 	b.w	8011128 <_strtol_l.constprop.0>

08011230 <__swbuf_r>:
 8011230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011232:	460e      	mov	r6, r1
 8011234:	4614      	mov	r4, r2
 8011236:	4605      	mov	r5, r0
 8011238:	b118      	cbz	r0, 8011242 <__swbuf_r+0x12>
 801123a:	6983      	ldr	r3, [r0, #24]
 801123c:	b90b      	cbnz	r3, 8011242 <__swbuf_r+0x12>
 801123e:	f001 f853 	bl	80122e8 <__sinit>
 8011242:	4b21      	ldr	r3, [pc, #132]	; (80112c8 <__swbuf_r+0x98>)
 8011244:	429c      	cmp	r4, r3
 8011246:	d12b      	bne.n	80112a0 <__swbuf_r+0x70>
 8011248:	686c      	ldr	r4, [r5, #4]
 801124a:	69a3      	ldr	r3, [r4, #24]
 801124c:	60a3      	str	r3, [r4, #8]
 801124e:	89a3      	ldrh	r3, [r4, #12]
 8011250:	071a      	lsls	r2, r3, #28
 8011252:	d52f      	bpl.n	80112b4 <__swbuf_r+0x84>
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	b36b      	cbz	r3, 80112b4 <__swbuf_r+0x84>
 8011258:	6923      	ldr	r3, [r4, #16]
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	1ac0      	subs	r0, r0, r3
 801125e:	6963      	ldr	r3, [r4, #20]
 8011260:	b2f6      	uxtb	r6, r6
 8011262:	4283      	cmp	r3, r0
 8011264:	4637      	mov	r7, r6
 8011266:	dc04      	bgt.n	8011272 <__swbuf_r+0x42>
 8011268:	4621      	mov	r1, r4
 801126a:	4628      	mov	r0, r5
 801126c:	f000 ffa8 	bl	80121c0 <_fflush_r>
 8011270:	bb30      	cbnz	r0, 80112c0 <__swbuf_r+0x90>
 8011272:	68a3      	ldr	r3, [r4, #8]
 8011274:	3b01      	subs	r3, #1
 8011276:	60a3      	str	r3, [r4, #8]
 8011278:	6823      	ldr	r3, [r4, #0]
 801127a:	1c5a      	adds	r2, r3, #1
 801127c:	6022      	str	r2, [r4, #0]
 801127e:	701e      	strb	r6, [r3, #0]
 8011280:	6963      	ldr	r3, [r4, #20]
 8011282:	3001      	adds	r0, #1
 8011284:	4283      	cmp	r3, r0
 8011286:	d004      	beq.n	8011292 <__swbuf_r+0x62>
 8011288:	89a3      	ldrh	r3, [r4, #12]
 801128a:	07db      	lsls	r3, r3, #31
 801128c:	d506      	bpl.n	801129c <__swbuf_r+0x6c>
 801128e:	2e0a      	cmp	r6, #10
 8011290:	d104      	bne.n	801129c <__swbuf_r+0x6c>
 8011292:	4621      	mov	r1, r4
 8011294:	4628      	mov	r0, r5
 8011296:	f000 ff93 	bl	80121c0 <_fflush_r>
 801129a:	b988      	cbnz	r0, 80112c0 <__swbuf_r+0x90>
 801129c:	4638      	mov	r0, r7
 801129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112a0:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <__swbuf_r+0x9c>)
 80112a2:	429c      	cmp	r4, r3
 80112a4:	d101      	bne.n	80112aa <__swbuf_r+0x7a>
 80112a6:	68ac      	ldr	r4, [r5, #8]
 80112a8:	e7cf      	b.n	801124a <__swbuf_r+0x1a>
 80112aa:	4b09      	ldr	r3, [pc, #36]	; (80112d0 <__swbuf_r+0xa0>)
 80112ac:	429c      	cmp	r4, r3
 80112ae:	bf08      	it	eq
 80112b0:	68ec      	ldreq	r4, [r5, #12]
 80112b2:	e7ca      	b.n	801124a <__swbuf_r+0x1a>
 80112b4:	4621      	mov	r1, r4
 80112b6:	4628      	mov	r0, r5
 80112b8:	f000 f80c 	bl	80112d4 <__swsetup_r>
 80112bc:	2800      	cmp	r0, #0
 80112be:	d0cb      	beq.n	8011258 <__swbuf_r+0x28>
 80112c0:	f04f 37ff 	mov.w	r7, #4294967295
 80112c4:	e7ea      	b.n	801129c <__swbuf_r+0x6c>
 80112c6:	bf00      	nop
 80112c8:	0802ab3c 	.word	0x0802ab3c
 80112cc:	0802ab5c 	.word	0x0802ab5c
 80112d0:	0802ab1c 	.word	0x0802ab1c

080112d4 <__swsetup_r>:
 80112d4:	4b32      	ldr	r3, [pc, #200]	; (80113a0 <__swsetup_r+0xcc>)
 80112d6:	b570      	push	{r4, r5, r6, lr}
 80112d8:	681d      	ldr	r5, [r3, #0]
 80112da:	4606      	mov	r6, r0
 80112dc:	460c      	mov	r4, r1
 80112de:	b125      	cbz	r5, 80112ea <__swsetup_r+0x16>
 80112e0:	69ab      	ldr	r3, [r5, #24]
 80112e2:	b913      	cbnz	r3, 80112ea <__swsetup_r+0x16>
 80112e4:	4628      	mov	r0, r5
 80112e6:	f000 ffff 	bl	80122e8 <__sinit>
 80112ea:	4b2e      	ldr	r3, [pc, #184]	; (80113a4 <__swsetup_r+0xd0>)
 80112ec:	429c      	cmp	r4, r3
 80112ee:	d10f      	bne.n	8011310 <__swsetup_r+0x3c>
 80112f0:	686c      	ldr	r4, [r5, #4]
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112f8:	0719      	lsls	r1, r3, #28
 80112fa:	d42c      	bmi.n	8011356 <__swsetup_r+0x82>
 80112fc:	06dd      	lsls	r5, r3, #27
 80112fe:	d411      	bmi.n	8011324 <__swsetup_r+0x50>
 8011300:	2309      	movs	r3, #9
 8011302:	6033      	str	r3, [r6, #0]
 8011304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011308:	81a3      	strh	r3, [r4, #12]
 801130a:	f04f 30ff 	mov.w	r0, #4294967295
 801130e:	e03e      	b.n	801138e <__swsetup_r+0xba>
 8011310:	4b25      	ldr	r3, [pc, #148]	; (80113a8 <__swsetup_r+0xd4>)
 8011312:	429c      	cmp	r4, r3
 8011314:	d101      	bne.n	801131a <__swsetup_r+0x46>
 8011316:	68ac      	ldr	r4, [r5, #8]
 8011318:	e7eb      	b.n	80112f2 <__swsetup_r+0x1e>
 801131a:	4b24      	ldr	r3, [pc, #144]	; (80113ac <__swsetup_r+0xd8>)
 801131c:	429c      	cmp	r4, r3
 801131e:	bf08      	it	eq
 8011320:	68ec      	ldreq	r4, [r5, #12]
 8011322:	e7e6      	b.n	80112f2 <__swsetup_r+0x1e>
 8011324:	0758      	lsls	r0, r3, #29
 8011326:	d512      	bpl.n	801134e <__swsetup_r+0x7a>
 8011328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801132a:	b141      	cbz	r1, 801133e <__swsetup_r+0x6a>
 801132c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011330:	4299      	cmp	r1, r3
 8011332:	d002      	beq.n	801133a <__swsetup_r+0x66>
 8011334:	4630      	mov	r0, r6
 8011336:	f002 f95b 	bl	80135f0 <_free_r>
 801133a:	2300      	movs	r3, #0
 801133c:	6363      	str	r3, [r4, #52]	; 0x34
 801133e:	89a3      	ldrh	r3, [r4, #12]
 8011340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011344:	81a3      	strh	r3, [r4, #12]
 8011346:	2300      	movs	r3, #0
 8011348:	6063      	str	r3, [r4, #4]
 801134a:	6923      	ldr	r3, [r4, #16]
 801134c:	6023      	str	r3, [r4, #0]
 801134e:	89a3      	ldrh	r3, [r4, #12]
 8011350:	f043 0308 	orr.w	r3, r3, #8
 8011354:	81a3      	strh	r3, [r4, #12]
 8011356:	6923      	ldr	r3, [r4, #16]
 8011358:	b94b      	cbnz	r3, 801136e <__swsetup_r+0x9a>
 801135a:	89a3      	ldrh	r3, [r4, #12]
 801135c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011364:	d003      	beq.n	801136e <__swsetup_r+0x9a>
 8011366:	4621      	mov	r1, r4
 8011368:	4630      	mov	r0, r6
 801136a:	f001 fbf5 	bl	8012b58 <__smakebuf_r>
 801136e:	89a0      	ldrh	r0, [r4, #12]
 8011370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011374:	f010 0301 	ands.w	r3, r0, #1
 8011378:	d00a      	beq.n	8011390 <__swsetup_r+0xbc>
 801137a:	2300      	movs	r3, #0
 801137c:	60a3      	str	r3, [r4, #8]
 801137e:	6963      	ldr	r3, [r4, #20]
 8011380:	425b      	negs	r3, r3
 8011382:	61a3      	str	r3, [r4, #24]
 8011384:	6923      	ldr	r3, [r4, #16]
 8011386:	b943      	cbnz	r3, 801139a <__swsetup_r+0xc6>
 8011388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801138c:	d1ba      	bne.n	8011304 <__swsetup_r+0x30>
 801138e:	bd70      	pop	{r4, r5, r6, pc}
 8011390:	0781      	lsls	r1, r0, #30
 8011392:	bf58      	it	pl
 8011394:	6963      	ldrpl	r3, [r4, #20]
 8011396:	60a3      	str	r3, [r4, #8]
 8011398:	e7f4      	b.n	8011384 <__swsetup_r+0xb0>
 801139a:	2000      	movs	r0, #0
 801139c:	e7f7      	b.n	801138e <__swsetup_r+0xba>
 801139e:	bf00      	nop
 80113a0:	200000dc 	.word	0x200000dc
 80113a4:	0802ab3c 	.word	0x0802ab3c
 80113a8:	0802ab5c 	.word	0x0802ab5c
 80113ac:	0802ab1c 	.word	0x0802ab1c

080113b0 <abort>:
 80113b0:	b508      	push	{r3, lr}
 80113b2:	2006      	movs	r0, #6
 80113b4:	f002 fbc8 	bl	8013b48 <raise>
 80113b8:	2001      	movs	r0, #1
 80113ba:	f7f2 fc2d 	bl	8003c18 <_exit>

080113be <quorem>:
 80113be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c2:	6903      	ldr	r3, [r0, #16]
 80113c4:	690c      	ldr	r4, [r1, #16]
 80113c6:	42a3      	cmp	r3, r4
 80113c8:	4607      	mov	r7, r0
 80113ca:	f2c0 8081 	blt.w	80114d0 <quorem+0x112>
 80113ce:	3c01      	subs	r4, #1
 80113d0:	f101 0814 	add.w	r8, r1, #20
 80113d4:	f100 0514 	add.w	r5, r0, #20
 80113d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113dc:	9301      	str	r3, [sp, #4]
 80113de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113e6:	3301      	adds	r3, #1
 80113e8:	429a      	cmp	r2, r3
 80113ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80113ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80113f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80113f6:	d331      	bcc.n	801145c <quorem+0x9e>
 80113f8:	f04f 0e00 	mov.w	lr, #0
 80113fc:	4640      	mov	r0, r8
 80113fe:	46ac      	mov	ip, r5
 8011400:	46f2      	mov	sl, lr
 8011402:	f850 2b04 	ldr.w	r2, [r0], #4
 8011406:	b293      	uxth	r3, r2
 8011408:	fb06 e303 	mla	r3, r6, r3, lr
 801140c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011410:	b29b      	uxth	r3, r3
 8011412:	ebaa 0303 	sub.w	r3, sl, r3
 8011416:	f8dc a000 	ldr.w	sl, [ip]
 801141a:	0c12      	lsrs	r2, r2, #16
 801141c:	fa13 f38a 	uxtah	r3, r3, sl
 8011420:	fb06 e202 	mla	r2, r6, r2, lr
 8011424:	9300      	str	r3, [sp, #0]
 8011426:	9b00      	ldr	r3, [sp, #0]
 8011428:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801142c:	b292      	uxth	r2, r2
 801142e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011432:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011436:	f8bd 3000 	ldrh.w	r3, [sp]
 801143a:	4581      	cmp	r9, r0
 801143c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011440:	f84c 3b04 	str.w	r3, [ip], #4
 8011444:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011448:	d2db      	bcs.n	8011402 <quorem+0x44>
 801144a:	f855 300b 	ldr.w	r3, [r5, fp]
 801144e:	b92b      	cbnz	r3, 801145c <quorem+0x9e>
 8011450:	9b01      	ldr	r3, [sp, #4]
 8011452:	3b04      	subs	r3, #4
 8011454:	429d      	cmp	r5, r3
 8011456:	461a      	mov	r2, r3
 8011458:	d32e      	bcc.n	80114b8 <quorem+0xfa>
 801145a:	613c      	str	r4, [r7, #16]
 801145c:	4638      	mov	r0, r7
 801145e:	f001 febb 	bl	80131d8 <__mcmp>
 8011462:	2800      	cmp	r0, #0
 8011464:	db24      	blt.n	80114b0 <quorem+0xf2>
 8011466:	3601      	adds	r6, #1
 8011468:	4628      	mov	r0, r5
 801146a:	f04f 0c00 	mov.w	ip, #0
 801146e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011472:	f8d0 e000 	ldr.w	lr, [r0]
 8011476:	b293      	uxth	r3, r2
 8011478:	ebac 0303 	sub.w	r3, ip, r3
 801147c:	0c12      	lsrs	r2, r2, #16
 801147e:	fa13 f38e 	uxtah	r3, r3, lr
 8011482:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011486:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801148a:	b29b      	uxth	r3, r3
 801148c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011490:	45c1      	cmp	r9, r8
 8011492:	f840 3b04 	str.w	r3, [r0], #4
 8011496:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801149a:	d2e8      	bcs.n	801146e <quorem+0xb0>
 801149c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114a4:	b922      	cbnz	r2, 80114b0 <quorem+0xf2>
 80114a6:	3b04      	subs	r3, #4
 80114a8:	429d      	cmp	r5, r3
 80114aa:	461a      	mov	r2, r3
 80114ac:	d30a      	bcc.n	80114c4 <quorem+0x106>
 80114ae:	613c      	str	r4, [r7, #16]
 80114b0:	4630      	mov	r0, r6
 80114b2:	b003      	add	sp, #12
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	6812      	ldr	r2, [r2, #0]
 80114ba:	3b04      	subs	r3, #4
 80114bc:	2a00      	cmp	r2, #0
 80114be:	d1cc      	bne.n	801145a <quorem+0x9c>
 80114c0:	3c01      	subs	r4, #1
 80114c2:	e7c7      	b.n	8011454 <quorem+0x96>
 80114c4:	6812      	ldr	r2, [r2, #0]
 80114c6:	3b04      	subs	r3, #4
 80114c8:	2a00      	cmp	r2, #0
 80114ca:	d1f0      	bne.n	80114ae <quorem+0xf0>
 80114cc:	3c01      	subs	r4, #1
 80114ce:	e7eb      	b.n	80114a8 <quorem+0xea>
 80114d0:	2000      	movs	r0, #0
 80114d2:	e7ee      	b.n	80114b2 <quorem+0xf4>
 80114d4:	0000      	movs	r0, r0
	...

080114d8 <_dtoa_r>:
 80114d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	ed2d 8b04 	vpush	{d8-d9}
 80114e0:	ec57 6b10 	vmov	r6, r7, d0
 80114e4:	b093      	sub	sp, #76	; 0x4c
 80114e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80114e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80114ec:	9106      	str	r1, [sp, #24]
 80114ee:	ee10 aa10 	vmov	sl, s0
 80114f2:	4604      	mov	r4, r0
 80114f4:	9209      	str	r2, [sp, #36]	; 0x24
 80114f6:	930c      	str	r3, [sp, #48]	; 0x30
 80114f8:	46bb      	mov	fp, r7
 80114fa:	b975      	cbnz	r5, 801151a <_dtoa_r+0x42>
 80114fc:	2010      	movs	r0, #16
 80114fe:	f001 fb6b 	bl	8012bd8 <malloc>
 8011502:	4602      	mov	r2, r0
 8011504:	6260      	str	r0, [r4, #36]	; 0x24
 8011506:	b920      	cbnz	r0, 8011512 <_dtoa_r+0x3a>
 8011508:	4ba7      	ldr	r3, [pc, #668]	; (80117a8 <_dtoa_r+0x2d0>)
 801150a:	21ea      	movs	r1, #234	; 0xea
 801150c:	48a7      	ldr	r0, [pc, #668]	; (80117ac <_dtoa_r+0x2d4>)
 801150e:	f7fd ff03 	bl	800f318 <__assert_func>
 8011512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011516:	6005      	str	r5, [r0, #0]
 8011518:	60c5      	str	r5, [r0, #12]
 801151a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801151c:	6819      	ldr	r1, [r3, #0]
 801151e:	b151      	cbz	r1, 8011536 <_dtoa_r+0x5e>
 8011520:	685a      	ldr	r2, [r3, #4]
 8011522:	604a      	str	r2, [r1, #4]
 8011524:	2301      	movs	r3, #1
 8011526:	4093      	lsls	r3, r2
 8011528:	608b      	str	r3, [r1, #8]
 801152a:	4620      	mov	r0, r4
 801152c:	f001 fbc8 	bl	8012cc0 <_Bfree>
 8011530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011532:	2200      	movs	r2, #0
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	1e3b      	subs	r3, r7, #0
 8011538:	bfaa      	itet	ge
 801153a:	2300      	movge	r3, #0
 801153c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011540:	f8c8 3000 	strge.w	r3, [r8]
 8011544:	4b9a      	ldr	r3, [pc, #616]	; (80117b0 <_dtoa_r+0x2d8>)
 8011546:	bfbc      	itt	lt
 8011548:	2201      	movlt	r2, #1
 801154a:	f8c8 2000 	strlt.w	r2, [r8]
 801154e:	ea33 030b 	bics.w	r3, r3, fp
 8011552:	d11b      	bne.n	801158c <_dtoa_r+0xb4>
 8011554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011556:	f242 730f 	movw	r3, #9999	; 0x270f
 801155a:	6013      	str	r3, [r2, #0]
 801155c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011560:	4333      	orrs	r3, r6
 8011562:	f000 8592 	beq.w	801208a <_dtoa_r+0xbb2>
 8011566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011568:	b963      	cbnz	r3, 8011584 <_dtoa_r+0xac>
 801156a:	4b92      	ldr	r3, [pc, #584]	; (80117b4 <_dtoa_r+0x2dc>)
 801156c:	e022      	b.n	80115b4 <_dtoa_r+0xdc>
 801156e:	4b92      	ldr	r3, [pc, #584]	; (80117b8 <_dtoa_r+0x2e0>)
 8011570:	9301      	str	r3, [sp, #4]
 8011572:	3308      	adds	r3, #8
 8011574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011576:	6013      	str	r3, [r2, #0]
 8011578:	9801      	ldr	r0, [sp, #4]
 801157a:	b013      	add	sp, #76	; 0x4c
 801157c:	ecbd 8b04 	vpop	{d8-d9}
 8011580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011584:	4b8b      	ldr	r3, [pc, #556]	; (80117b4 <_dtoa_r+0x2dc>)
 8011586:	9301      	str	r3, [sp, #4]
 8011588:	3303      	adds	r3, #3
 801158a:	e7f3      	b.n	8011574 <_dtoa_r+0x9c>
 801158c:	2200      	movs	r2, #0
 801158e:	2300      	movs	r3, #0
 8011590:	4650      	mov	r0, sl
 8011592:	4659      	mov	r1, fp
 8011594:	f7ef fac0 	bl	8000b18 <__aeabi_dcmpeq>
 8011598:	ec4b ab19 	vmov	d9, sl, fp
 801159c:	4680      	mov	r8, r0
 801159e:	b158      	cbz	r0, 80115b8 <_dtoa_r+0xe0>
 80115a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115a2:	2301      	movs	r3, #1
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 856b 	beq.w	8012084 <_dtoa_r+0xbac>
 80115ae:	4883      	ldr	r0, [pc, #524]	; (80117bc <_dtoa_r+0x2e4>)
 80115b0:	6018      	str	r0, [r3, #0]
 80115b2:	1e43      	subs	r3, r0, #1
 80115b4:	9301      	str	r3, [sp, #4]
 80115b6:	e7df      	b.n	8011578 <_dtoa_r+0xa0>
 80115b8:	ec4b ab10 	vmov	d0, sl, fp
 80115bc:	aa10      	add	r2, sp, #64	; 0x40
 80115be:	a911      	add	r1, sp, #68	; 0x44
 80115c0:	4620      	mov	r0, r4
 80115c2:	f001 ff2b 	bl	801341c <__d2b>
 80115c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80115ca:	ee08 0a10 	vmov	s16, r0
 80115ce:	2d00      	cmp	r5, #0
 80115d0:	f000 8084 	beq.w	80116dc <_dtoa_r+0x204>
 80115d4:	ee19 3a90 	vmov	r3, s19
 80115d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80115e0:	4656      	mov	r6, sl
 80115e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80115e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80115ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80115ee:	4b74      	ldr	r3, [pc, #464]	; (80117c0 <_dtoa_r+0x2e8>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	4630      	mov	r0, r6
 80115f4:	4639      	mov	r1, r7
 80115f6:	f7ee fe6f 	bl	80002d8 <__aeabi_dsub>
 80115fa:	a365      	add	r3, pc, #404	; (adr r3, 8011790 <_dtoa_r+0x2b8>)
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	f7ef f822 	bl	8000648 <__aeabi_dmul>
 8011604:	a364      	add	r3, pc, #400	; (adr r3, 8011798 <_dtoa_r+0x2c0>)
 8011606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160a:	f7ee fe67 	bl	80002dc <__adddf3>
 801160e:	4606      	mov	r6, r0
 8011610:	4628      	mov	r0, r5
 8011612:	460f      	mov	r7, r1
 8011614:	f7ee ffae 	bl	8000574 <__aeabi_i2d>
 8011618:	a361      	add	r3, pc, #388	; (adr r3, 80117a0 <_dtoa_r+0x2c8>)
 801161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161e:	f7ef f813 	bl	8000648 <__aeabi_dmul>
 8011622:	4602      	mov	r2, r0
 8011624:	460b      	mov	r3, r1
 8011626:	4630      	mov	r0, r6
 8011628:	4639      	mov	r1, r7
 801162a:	f7ee fe57 	bl	80002dc <__adddf3>
 801162e:	4606      	mov	r6, r0
 8011630:	460f      	mov	r7, r1
 8011632:	f7ef fab9 	bl	8000ba8 <__aeabi_d2iz>
 8011636:	2200      	movs	r2, #0
 8011638:	9000      	str	r0, [sp, #0]
 801163a:	2300      	movs	r3, #0
 801163c:	4630      	mov	r0, r6
 801163e:	4639      	mov	r1, r7
 8011640:	f7ef fa74 	bl	8000b2c <__aeabi_dcmplt>
 8011644:	b150      	cbz	r0, 801165c <_dtoa_r+0x184>
 8011646:	9800      	ldr	r0, [sp, #0]
 8011648:	f7ee ff94 	bl	8000574 <__aeabi_i2d>
 801164c:	4632      	mov	r2, r6
 801164e:	463b      	mov	r3, r7
 8011650:	f7ef fa62 	bl	8000b18 <__aeabi_dcmpeq>
 8011654:	b910      	cbnz	r0, 801165c <_dtoa_r+0x184>
 8011656:	9b00      	ldr	r3, [sp, #0]
 8011658:	3b01      	subs	r3, #1
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	9b00      	ldr	r3, [sp, #0]
 801165e:	2b16      	cmp	r3, #22
 8011660:	d85a      	bhi.n	8011718 <_dtoa_r+0x240>
 8011662:	9a00      	ldr	r2, [sp, #0]
 8011664:	4b57      	ldr	r3, [pc, #348]	; (80117c4 <_dtoa_r+0x2ec>)
 8011666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	ec51 0b19 	vmov	r0, r1, d9
 8011672:	f7ef fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8011676:	2800      	cmp	r0, #0
 8011678:	d050      	beq.n	801171c <_dtoa_r+0x244>
 801167a:	9b00      	ldr	r3, [sp, #0]
 801167c:	3b01      	subs	r3, #1
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	2300      	movs	r3, #0
 8011682:	930b      	str	r3, [sp, #44]	; 0x2c
 8011684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011686:	1b5d      	subs	r5, r3, r5
 8011688:	1e6b      	subs	r3, r5, #1
 801168a:	9305      	str	r3, [sp, #20]
 801168c:	bf45      	ittet	mi
 801168e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011692:	9304      	strmi	r3, [sp, #16]
 8011694:	2300      	movpl	r3, #0
 8011696:	2300      	movmi	r3, #0
 8011698:	bf4c      	ite	mi
 801169a:	9305      	strmi	r3, [sp, #20]
 801169c:	9304      	strpl	r3, [sp, #16]
 801169e:	9b00      	ldr	r3, [sp, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	db3d      	blt.n	8011720 <_dtoa_r+0x248>
 80116a4:	9b05      	ldr	r3, [sp, #20]
 80116a6:	9a00      	ldr	r2, [sp, #0]
 80116a8:	920a      	str	r2, [sp, #40]	; 0x28
 80116aa:	4413      	add	r3, r2
 80116ac:	9305      	str	r3, [sp, #20]
 80116ae:	2300      	movs	r3, #0
 80116b0:	9307      	str	r3, [sp, #28]
 80116b2:	9b06      	ldr	r3, [sp, #24]
 80116b4:	2b09      	cmp	r3, #9
 80116b6:	f200 8089 	bhi.w	80117cc <_dtoa_r+0x2f4>
 80116ba:	2b05      	cmp	r3, #5
 80116bc:	bfc4      	itt	gt
 80116be:	3b04      	subgt	r3, #4
 80116c0:	9306      	strgt	r3, [sp, #24]
 80116c2:	9b06      	ldr	r3, [sp, #24]
 80116c4:	f1a3 0302 	sub.w	r3, r3, #2
 80116c8:	bfcc      	ite	gt
 80116ca:	2500      	movgt	r5, #0
 80116cc:	2501      	movle	r5, #1
 80116ce:	2b03      	cmp	r3, #3
 80116d0:	f200 8087 	bhi.w	80117e2 <_dtoa_r+0x30a>
 80116d4:	e8df f003 	tbb	[pc, r3]
 80116d8:	59383a2d 	.word	0x59383a2d
 80116dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80116e0:	441d      	add	r5, r3
 80116e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80116e6:	2b20      	cmp	r3, #32
 80116e8:	bfc1      	itttt	gt
 80116ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80116ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80116f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80116f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80116fa:	bfda      	itte	le
 80116fc:	f1c3 0320 	rsble	r3, r3, #32
 8011700:	fa06 f003 	lslle.w	r0, r6, r3
 8011704:	4318      	orrgt	r0, r3
 8011706:	f7ee ff25 	bl	8000554 <__aeabi_ui2d>
 801170a:	2301      	movs	r3, #1
 801170c:	4606      	mov	r6, r0
 801170e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011712:	3d01      	subs	r5, #1
 8011714:	930e      	str	r3, [sp, #56]	; 0x38
 8011716:	e76a      	b.n	80115ee <_dtoa_r+0x116>
 8011718:	2301      	movs	r3, #1
 801171a:	e7b2      	b.n	8011682 <_dtoa_r+0x1aa>
 801171c:	900b      	str	r0, [sp, #44]	; 0x2c
 801171e:	e7b1      	b.n	8011684 <_dtoa_r+0x1ac>
 8011720:	9b04      	ldr	r3, [sp, #16]
 8011722:	9a00      	ldr	r2, [sp, #0]
 8011724:	1a9b      	subs	r3, r3, r2
 8011726:	9304      	str	r3, [sp, #16]
 8011728:	4253      	negs	r3, r2
 801172a:	9307      	str	r3, [sp, #28]
 801172c:	2300      	movs	r3, #0
 801172e:	930a      	str	r3, [sp, #40]	; 0x28
 8011730:	e7bf      	b.n	80116b2 <_dtoa_r+0x1da>
 8011732:	2300      	movs	r3, #0
 8011734:	9308      	str	r3, [sp, #32]
 8011736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011738:	2b00      	cmp	r3, #0
 801173a:	dc55      	bgt.n	80117e8 <_dtoa_r+0x310>
 801173c:	2301      	movs	r3, #1
 801173e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011742:	461a      	mov	r2, r3
 8011744:	9209      	str	r2, [sp, #36]	; 0x24
 8011746:	e00c      	b.n	8011762 <_dtoa_r+0x28a>
 8011748:	2301      	movs	r3, #1
 801174a:	e7f3      	b.n	8011734 <_dtoa_r+0x25c>
 801174c:	2300      	movs	r3, #0
 801174e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011750:	9308      	str	r3, [sp, #32]
 8011752:	9b00      	ldr	r3, [sp, #0]
 8011754:	4413      	add	r3, r2
 8011756:	9302      	str	r3, [sp, #8]
 8011758:	3301      	adds	r3, #1
 801175a:	2b01      	cmp	r3, #1
 801175c:	9303      	str	r3, [sp, #12]
 801175e:	bfb8      	it	lt
 8011760:	2301      	movlt	r3, #1
 8011762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011764:	2200      	movs	r2, #0
 8011766:	6042      	str	r2, [r0, #4]
 8011768:	2204      	movs	r2, #4
 801176a:	f102 0614 	add.w	r6, r2, #20
 801176e:	429e      	cmp	r6, r3
 8011770:	6841      	ldr	r1, [r0, #4]
 8011772:	d93d      	bls.n	80117f0 <_dtoa_r+0x318>
 8011774:	4620      	mov	r0, r4
 8011776:	f001 fa63 	bl	8012c40 <_Balloc>
 801177a:	9001      	str	r0, [sp, #4]
 801177c:	2800      	cmp	r0, #0
 801177e:	d13b      	bne.n	80117f8 <_dtoa_r+0x320>
 8011780:	4b11      	ldr	r3, [pc, #68]	; (80117c8 <_dtoa_r+0x2f0>)
 8011782:	4602      	mov	r2, r0
 8011784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011788:	e6c0      	b.n	801150c <_dtoa_r+0x34>
 801178a:	2301      	movs	r3, #1
 801178c:	e7df      	b.n	801174e <_dtoa_r+0x276>
 801178e:	bf00      	nop
 8011790:	636f4361 	.word	0x636f4361
 8011794:	3fd287a7 	.word	0x3fd287a7
 8011798:	8b60c8b3 	.word	0x8b60c8b3
 801179c:	3fc68a28 	.word	0x3fc68a28
 80117a0:	509f79fb 	.word	0x509f79fb
 80117a4:	3fd34413 	.word	0x3fd34413
 80117a8:	0802aa76 	.word	0x0802aa76
 80117ac:	0802aa8d 	.word	0x0802aa8d
 80117b0:	7ff00000 	.word	0x7ff00000
 80117b4:	0802aa72 	.word	0x0802aa72
 80117b8:	0802aa69 	.word	0x0802aa69
 80117bc:	0802a8ee 	.word	0x0802a8ee
 80117c0:	3ff80000 	.word	0x3ff80000
 80117c4:	0802acc0 	.word	0x0802acc0
 80117c8:	0802ab0b 	.word	0x0802ab0b
 80117cc:	2501      	movs	r5, #1
 80117ce:	2300      	movs	r3, #0
 80117d0:	9306      	str	r3, [sp, #24]
 80117d2:	9508      	str	r5, [sp, #32]
 80117d4:	f04f 33ff 	mov.w	r3, #4294967295
 80117d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117dc:	2200      	movs	r2, #0
 80117de:	2312      	movs	r3, #18
 80117e0:	e7b0      	b.n	8011744 <_dtoa_r+0x26c>
 80117e2:	2301      	movs	r3, #1
 80117e4:	9308      	str	r3, [sp, #32]
 80117e6:	e7f5      	b.n	80117d4 <_dtoa_r+0x2fc>
 80117e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117ee:	e7b8      	b.n	8011762 <_dtoa_r+0x28a>
 80117f0:	3101      	adds	r1, #1
 80117f2:	6041      	str	r1, [r0, #4]
 80117f4:	0052      	lsls	r2, r2, #1
 80117f6:	e7b8      	b.n	801176a <_dtoa_r+0x292>
 80117f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117fa:	9a01      	ldr	r2, [sp, #4]
 80117fc:	601a      	str	r2, [r3, #0]
 80117fe:	9b03      	ldr	r3, [sp, #12]
 8011800:	2b0e      	cmp	r3, #14
 8011802:	f200 809d 	bhi.w	8011940 <_dtoa_r+0x468>
 8011806:	2d00      	cmp	r5, #0
 8011808:	f000 809a 	beq.w	8011940 <_dtoa_r+0x468>
 801180c:	9b00      	ldr	r3, [sp, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	dd32      	ble.n	8011878 <_dtoa_r+0x3a0>
 8011812:	4ab7      	ldr	r2, [pc, #732]	; (8011af0 <_dtoa_r+0x618>)
 8011814:	f003 030f 	and.w	r3, r3, #15
 8011818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801181c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011820:	9b00      	ldr	r3, [sp, #0]
 8011822:	05d8      	lsls	r0, r3, #23
 8011824:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011828:	d516      	bpl.n	8011858 <_dtoa_r+0x380>
 801182a:	4bb2      	ldr	r3, [pc, #712]	; (8011af4 <_dtoa_r+0x61c>)
 801182c:	ec51 0b19 	vmov	r0, r1, d9
 8011830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011834:	f7ef f832 	bl	800089c <__aeabi_ddiv>
 8011838:	f007 070f 	and.w	r7, r7, #15
 801183c:	4682      	mov	sl, r0
 801183e:	468b      	mov	fp, r1
 8011840:	2503      	movs	r5, #3
 8011842:	4eac      	ldr	r6, [pc, #688]	; (8011af4 <_dtoa_r+0x61c>)
 8011844:	b957      	cbnz	r7, 801185c <_dtoa_r+0x384>
 8011846:	4642      	mov	r2, r8
 8011848:	464b      	mov	r3, r9
 801184a:	4650      	mov	r0, sl
 801184c:	4659      	mov	r1, fp
 801184e:	f7ef f825 	bl	800089c <__aeabi_ddiv>
 8011852:	4682      	mov	sl, r0
 8011854:	468b      	mov	fp, r1
 8011856:	e028      	b.n	80118aa <_dtoa_r+0x3d2>
 8011858:	2502      	movs	r5, #2
 801185a:	e7f2      	b.n	8011842 <_dtoa_r+0x36a>
 801185c:	07f9      	lsls	r1, r7, #31
 801185e:	d508      	bpl.n	8011872 <_dtoa_r+0x39a>
 8011860:	4640      	mov	r0, r8
 8011862:	4649      	mov	r1, r9
 8011864:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011868:	f7ee feee 	bl	8000648 <__aeabi_dmul>
 801186c:	3501      	adds	r5, #1
 801186e:	4680      	mov	r8, r0
 8011870:	4689      	mov	r9, r1
 8011872:	107f      	asrs	r7, r7, #1
 8011874:	3608      	adds	r6, #8
 8011876:	e7e5      	b.n	8011844 <_dtoa_r+0x36c>
 8011878:	f000 809b 	beq.w	80119b2 <_dtoa_r+0x4da>
 801187c:	9b00      	ldr	r3, [sp, #0]
 801187e:	4f9d      	ldr	r7, [pc, #628]	; (8011af4 <_dtoa_r+0x61c>)
 8011880:	425e      	negs	r6, r3
 8011882:	4b9b      	ldr	r3, [pc, #620]	; (8011af0 <_dtoa_r+0x618>)
 8011884:	f006 020f 	and.w	r2, r6, #15
 8011888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011890:	ec51 0b19 	vmov	r0, r1, d9
 8011894:	f7ee fed8 	bl	8000648 <__aeabi_dmul>
 8011898:	1136      	asrs	r6, r6, #4
 801189a:	4682      	mov	sl, r0
 801189c:	468b      	mov	fp, r1
 801189e:	2300      	movs	r3, #0
 80118a0:	2502      	movs	r5, #2
 80118a2:	2e00      	cmp	r6, #0
 80118a4:	d17a      	bne.n	801199c <_dtoa_r+0x4c4>
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1d3      	bne.n	8011852 <_dtoa_r+0x37a>
 80118aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f000 8082 	beq.w	80119b6 <_dtoa_r+0x4de>
 80118b2:	4b91      	ldr	r3, [pc, #580]	; (8011af8 <_dtoa_r+0x620>)
 80118b4:	2200      	movs	r2, #0
 80118b6:	4650      	mov	r0, sl
 80118b8:	4659      	mov	r1, fp
 80118ba:	f7ef f937 	bl	8000b2c <__aeabi_dcmplt>
 80118be:	2800      	cmp	r0, #0
 80118c0:	d079      	beq.n	80119b6 <_dtoa_r+0x4de>
 80118c2:	9b03      	ldr	r3, [sp, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d076      	beq.n	80119b6 <_dtoa_r+0x4de>
 80118c8:	9b02      	ldr	r3, [sp, #8]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	dd36      	ble.n	801193c <_dtoa_r+0x464>
 80118ce:	9b00      	ldr	r3, [sp, #0]
 80118d0:	4650      	mov	r0, sl
 80118d2:	4659      	mov	r1, fp
 80118d4:	1e5f      	subs	r7, r3, #1
 80118d6:	2200      	movs	r2, #0
 80118d8:	4b88      	ldr	r3, [pc, #544]	; (8011afc <_dtoa_r+0x624>)
 80118da:	f7ee feb5 	bl	8000648 <__aeabi_dmul>
 80118de:	9e02      	ldr	r6, [sp, #8]
 80118e0:	4682      	mov	sl, r0
 80118e2:	468b      	mov	fp, r1
 80118e4:	3501      	adds	r5, #1
 80118e6:	4628      	mov	r0, r5
 80118e8:	f7ee fe44 	bl	8000574 <__aeabi_i2d>
 80118ec:	4652      	mov	r2, sl
 80118ee:	465b      	mov	r3, fp
 80118f0:	f7ee feaa 	bl	8000648 <__aeabi_dmul>
 80118f4:	4b82      	ldr	r3, [pc, #520]	; (8011b00 <_dtoa_r+0x628>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	f7ee fcf0 	bl	80002dc <__adddf3>
 80118fc:	46d0      	mov	r8, sl
 80118fe:	46d9      	mov	r9, fp
 8011900:	4682      	mov	sl, r0
 8011902:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011906:	2e00      	cmp	r6, #0
 8011908:	d158      	bne.n	80119bc <_dtoa_r+0x4e4>
 801190a:	4b7e      	ldr	r3, [pc, #504]	; (8011b04 <_dtoa_r+0x62c>)
 801190c:	2200      	movs	r2, #0
 801190e:	4640      	mov	r0, r8
 8011910:	4649      	mov	r1, r9
 8011912:	f7ee fce1 	bl	80002d8 <__aeabi_dsub>
 8011916:	4652      	mov	r2, sl
 8011918:	465b      	mov	r3, fp
 801191a:	4680      	mov	r8, r0
 801191c:	4689      	mov	r9, r1
 801191e:	f7ef f923 	bl	8000b68 <__aeabi_dcmpgt>
 8011922:	2800      	cmp	r0, #0
 8011924:	f040 8295 	bne.w	8011e52 <_dtoa_r+0x97a>
 8011928:	4652      	mov	r2, sl
 801192a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801192e:	4640      	mov	r0, r8
 8011930:	4649      	mov	r1, r9
 8011932:	f7ef f8fb 	bl	8000b2c <__aeabi_dcmplt>
 8011936:	2800      	cmp	r0, #0
 8011938:	f040 8289 	bne.w	8011e4e <_dtoa_r+0x976>
 801193c:	ec5b ab19 	vmov	sl, fp, d9
 8011940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011942:	2b00      	cmp	r3, #0
 8011944:	f2c0 8148 	blt.w	8011bd8 <_dtoa_r+0x700>
 8011948:	9a00      	ldr	r2, [sp, #0]
 801194a:	2a0e      	cmp	r2, #14
 801194c:	f300 8144 	bgt.w	8011bd8 <_dtoa_r+0x700>
 8011950:	4b67      	ldr	r3, [pc, #412]	; (8011af0 <_dtoa_r+0x618>)
 8011952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011956:	e9d3 8900 	ldrd	r8, r9, [r3]
 801195a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801195c:	2b00      	cmp	r3, #0
 801195e:	f280 80d5 	bge.w	8011b0c <_dtoa_r+0x634>
 8011962:	9b03      	ldr	r3, [sp, #12]
 8011964:	2b00      	cmp	r3, #0
 8011966:	f300 80d1 	bgt.w	8011b0c <_dtoa_r+0x634>
 801196a:	f040 826f 	bne.w	8011e4c <_dtoa_r+0x974>
 801196e:	4b65      	ldr	r3, [pc, #404]	; (8011b04 <_dtoa_r+0x62c>)
 8011970:	2200      	movs	r2, #0
 8011972:	4640      	mov	r0, r8
 8011974:	4649      	mov	r1, r9
 8011976:	f7ee fe67 	bl	8000648 <__aeabi_dmul>
 801197a:	4652      	mov	r2, sl
 801197c:	465b      	mov	r3, fp
 801197e:	f7ef f8e9 	bl	8000b54 <__aeabi_dcmpge>
 8011982:	9e03      	ldr	r6, [sp, #12]
 8011984:	4637      	mov	r7, r6
 8011986:	2800      	cmp	r0, #0
 8011988:	f040 8245 	bne.w	8011e16 <_dtoa_r+0x93e>
 801198c:	9d01      	ldr	r5, [sp, #4]
 801198e:	2331      	movs	r3, #49	; 0x31
 8011990:	f805 3b01 	strb.w	r3, [r5], #1
 8011994:	9b00      	ldr	r3, [sp, #0]
 8011996:	3301      	adds	r3, #1
 8011998:	9300      	str	r3, [sp, #0]
 801199a:	e240      	b.n	8011e1e <_dtoa_r+0x946>
 801199c:	07f2      	lsls	r2, r6, #31
 801199e:	d505      	bpl.n	80119ac <_dtoa_r+0x4d4>
 80119a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119a4:	f7ee fe50 	bl	8000648 <__aeabi_dmul>
 80119a8:	3501      	adds	r5, #1
 80119aa:	2301      	movs	r3, #1
 80119ac:	1076      	asrs	r6, r6, #1
 80119ae:	3708      	adds	r7, #8
 80119b0:	e777      	b.n	80118a2 <_dtoa_r+0x3ca>
 80119b2:	2502      	movs	r5, #2
 80119b4:	e779      	b.n	80118aa <_dtoa_r+0x3d2>
 80119b6:	9f00      	ldr	r7, [sp, #0]
 80119b8:	9e03      	ldr	r6, [sp, #12]
 80119ba:	e794      	b.n	80118e6 <_dtoa_r+0x40e>
 80119bc:	9901      	ldr	r1, [sp, #4]
 80119be:	4b4c      	ldr	r3, [pc, #304]	; (8011af0 <_dtoa_r+0x618>)
 80119c0:	4431      	add	r1, r6
 80119c2:	910d      	str	r1, [sp, #52]	; 0x34
 80119c4:	9908      	ldr	r1, [sp, #32]
 80119c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80119ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80119ce:	2900      	cmp	r1, #0
 80119d0:	d043      	beq.n	8011a5a <_dtoa_r+0x582>
 80119d2:	494d      	ldr	r1, [pc, #308]	; (8011b08 <_dtoa_r+0x630>)
 80119d4:	2000      	movs	r0, #0
 80119d6:	f7ee ff61 	bl	800089c <__aeabi_ddiv>
 80119da:	4652      	mov	r2, sl
 80119dc:	465b      	mov	r3, fp
 80119de:	f7ee fc7b 	bl	80002d8 <__aeabi_dsub>
 80119e2:	9d01      	ldr	r5, [sp, #4]
 80119e4:	4682      	mov	sl, r0
 80119e6:	468b      	mov	fp, r1
 80119e8:	4649      	mov	r1, r9
 80119ea:	4640      	mov	r0, r8
 80119ec:	f7ef f8dc 	bl	8000ba8 <__aeabi_d2iz>
 80119f0:	4606      	mov	r6, r0
 80119f2:	f7ee fdbf 	bl	8000574 <__aeabi_i2d>
 80119f6:	4602      	mov	r2, r0
 80119f8:	460b      	mov	r3, r1
 80119fa:	4640      	mov	r0, r8
 80119fc:	4649      	mov	r1, r9
 80119fe:	f7ee fc6b 	bl	80002d8 <__aeabi_dsub>
 8011a02:	3630      	adds	r6, #48	; 0x30
 8011a04:	f805 6b01 	strb.w	r6, [r5], #1
 8011a08:	4652      	mov	r2, sl
 8011a0a:	465b      	mov	r3, fp
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	4689      	mov	r9, r1
 8011a10:	f7ef f88c 	bl	8000b2c <__aeabi_dcmplt>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d163      	bne.n	8011ae0 <_dtoa_r+0x608>
 8011a18:	4642      	mov	r2, r8
 8011a1a:	464b      	mov	r3, r9
 8011a1c:	4936      	ldr	r1, [pc, #216]	; (8011af8 <_dtoa_r+0x620>)
 8011a1e:	2000      	movs	r0, #0
 8011a20:	f7ee fc5a 	bl	80002d8 <__aeabi_dsub>
 8011a24:	4652      	mov	r2, sl
 8011a26:	465b      	mov	r3, fp
 8011a28:	f7ef f880 	bl	8000b2c <__aeabi_dcmplt>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	f040 80b5 	bne.w	8011b9c <_dtoa_r+0x6c4>
 8011a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a34:	429d      	cmp	r5, r3
 8011a36:	d081      	beq.n	801193c <_dtoa_r+0x464>
 8011a38:	4b30      	ldr	r3, [pc, #192]	; (8011afc <_dtoa_r+0x624>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	4650      	mov	r0, sl
 8011a3e:	4659      	mov	r1, fp
 8011a40:	f7ee fe02 	bl	8000648 <__aeabi_dmul>
 8011a44:	4b2d      	ldr	r3, [pc, #180]	; (8011afc <_dtoa_r+0x624>)
 8011a46:	4682      	mov	sl, r0
 8011a48:	468b      	mov	fp, r1
 8011a4a:	4640      	mov	r0, r8
 8011a4c:	4649      	mov	r1, r9
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f7ee fdfa 	bl	8000648 <__aeabi_dmul>
 8011a54:	4680      	mov	r8, r0
 8011a56:	4689      	mov	r9, r1
 8011a58:	e7c6      	b.n	80119e8 <_dtoa_r+0x510>
 8011a5a:	4650      	mov	r0, sl
 8011a5c:	4659      	mov	r1, fp
 8011a5e:	f7ee fdf3 	bl	8000648 <__aeabi_dmul>
 8011a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a64:	9d01      	ldr	r5, [sp, #4]
 8011a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a68:	4682      	mov	sl, r0
 8011a6a:	468b      	mov	fp, r1
 8011a6c:	4649      	mov	r1, r9
 8011a6e:	4640      	mov	r0, r8
 8011a70:	f7ef f89a 	bl	8000ba8 <__aeabi_d2iz>
 8011a74:	4606      	mov	r6, r0
 8011a76:	f7ee fd7d 	bl	8000574 <__aeabi_i2d>
 8011a7a:	3630      	adds	r6, #48	; 0x30
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	460b      	mov	r3, r1
 8011a80:	4640      	mov	r0, r8
 8011a82:	4649      	mov	r1, r9
 8011a84:	f7ee fc28 	bl	80002d8 <__aeabi_dsub>
 8011a88:	f805 6b01 	strb.w	r6, [r5], #1
 8011a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a8e:	429d      	cmp	r5, r3
 8011a90:	4680      	mov	r8, r0
 8011a92:	4689      	mov	r9, r1
 8011a94:	f04f 0200 	mov.w	r2, #0
 8011a98:	d124      	bne.n	8011ae4 <_dtoa_r+0x60c>
 8011a9a:	4b1b      	ldr	r3, [pc, #108]	; (8011b08 <_dtoa_r+0x630>)
 8011a9c:	4650      	mov	r0, sl
 8011a9e:	4659      	mov	r1, fp
 8011aa0:	f7ee fc1c 	bl	80002dc <__adddf3>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	4649      	mov	r1, r9
 8011aac:	f7ef f85c 	bl	8000b68 <__aeabi_dcmpgt>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d173      	bne.n	8011b9c <_dtoa_r+0x6c4>
 8011ab4:	4652      	mov	r2, sl
 8011ab6:	465b      	mov	r3, fp
 8011ab8:	4913      	ldr	r1, [pc, #76]	; (8011b08 <_dtoa_r+0x630>)
 8011aba:	2000      	movs	r0, #0
 8011abc:	f7ee fc0c 	bl	80002d8 <__aeabi_dsub>
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	4640      	mov	r0, r8
 8011ac6:	4649      	mov	r1, r9
 8011ac8:	f7ef f830 	bl	8000b2c <__aeabi_dcmplt>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	f43f af35 	beq.w	801193c <_dtoa_r+0x464>
 8011ad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011ad4:	1e6b      	subs	r3, r5, #1
 8011ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011adc:	2b30      	cmp	r3, #48	; 0x30
 8011ade:	d0f8      	beq.n	8011ad2 <_dtoa_r+0x5fa>
 8011ae0:	9700      	str	r7, [sp, #0]
 8011ae2:	e049      	b.n	8011b78 <_dtoa_r+0x6a0>
 8011ae4:	4b05      	ldr	r3, [pc, #20]	; (8011afc <_dtoa_r+0x624>)
 8011ae6:	f7ee fdaf 	bl	8000648 <__aeabi_dmul>
 8011aea:	4680      	mov	r8, r0
 8011aec:	4689      	mov	r9, r1
 8011aee:	e7bd      	b.n	8011a6c <_dtoa_r+0x594>
 8011af0:	0802acc0 	.word	0x0802acc0
 8011af4:	0802ac98 	.word	0x0802ac98
 8011af8:	3ff00000 	.word	0x3ff00000
 8011afc:	40240000 	.word	0x40240000
 8011b00:	401c0000 	.word	0x401c0000
 8011b04:	40140000 	.word	0x40140000
 8011b08:	3fe00000 	.word	0x3fe00000
 8011b0c:	9d01      	ldr	r5, [sp, #4]
 8011b0e:	4656      	mov	r6, sl
 8011b10:	465f      	mov	r7, fp
 8011b12:	4642      	mov	r2, r8
 8011b14:	464b      	mov	r3, r9
 8011b16:	4630      	mov	r0, r6
 8011b18:	4639      	mov	r1, r7
 8011b1a:	f7ee febf 	bl	800089c <__aeabi_ddiv>
 8011b1e:	f7ef f843 	bl	8000ba8 <__aeabi_d2iz>
 8011b22:	4682      	mov	sl, r0
 8011b24:	f7ee fd26 	bl	8000574 <__aeabi_i2d>
 8011b28:	4642      	mov	r2, r8
 8011b2a:	464b      	mov	r3, r9
 8011b2c:	f7ee fd8c 	bl	8000648 <__aeabi_dmul>
 8011b30:	4602      	mov	r2, r0
 8011b32:	460b      	mov	r3, r1
 8011b34:	4630      	mov	r0, r6
 8011b36:	4639      	mov	r1, r7
 8011b38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011b3c:	f7ee fbcc 	bl	80002d8 <__aeabi_dsub>
 8011b40:	f805 6b01 	strb.w	r6, [r5], #1
 8011b44:	9e01      	ldr	r6, [sp, #4]
 8011b46:	9f03      	ldr	r7, [sp, #12]
 8011b48:	1bae      	subs	r6, r5, r6
 8011b4a:	42b7      	cmp	r7, r6
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	d135      	bne.n	8011bbe <_dtoa_r+0x6e6>
 8011b52:	f7ee fbc3 	bl	80002dc <__adddf3>
 8011b56:	4642      	mov	r2, r8
 8011b58:	464b      	mov	r3, r9
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	460f      	mov	r7, r1
 8011b5e:	f7ef f803 	bl	8000b68 <__aeabi_dcmpgt>
 8011b62:	b9d0      	cbnz	r0, 8011b9a <_dtoa_r+0x6c2>
 8011b64:	4642      	mov	r2, r8
 8011b66:	464b      	mov	r3, r9
 8011b68:	4630      	mov	r0, r6
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	f7ee ffd4 	bl	8000b18 <__aeabi_dcmpeq>
 8011b70:	b110      	cbz	r0, 8011b78 <_dtoa_r+0x6a0>
 8011b72:	f01a 0f01 	tst.w	sl, #1
 8011b76:	d110      	bne.n	8011b9a <_dtoa_r+0x6c2>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	ee18 1a10 	vmov	r1, s16
 8011b7e:	f001 f89f 	bl	8012cc0 <_Bfree>
 8011b82:	2300      	movs	r3, #0
 8011b84:	9800      	ldr	r0, [sp, #0]
 8011b86:	702b      	strb	r3, [r5, #0]
 8011b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b8a:	3001      	adds	r0, #1
 8011b8c:	6018      	str	r0, [r3, #0]
 8011b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f43f acf1 	beq.w	8011578 <_dtoa_r+0xa0>
 8011b96:	601d      	str	r5, [r3, #0]
 8011b98:	e4ee      	b.n	8011578 <_dtoa_r+0xa0>
 8011b9a:	9f00      	ldr	r7, [sp, #0]
 8011b9c:	462b      	mov	r3, r5
 8011b9e:	461d      	mov	r5, r3
 8011ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ba4:	2a39      	cmp	r2, #57	; 0x39
 8011ba6:	d106      	bne.n	8011bb6 <_dtoa_r+0x6de>
 8011ba8:	9a01      	ldr	r2, [sp, #4]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d1f7      	bne.n	8011b9e <_dtoa_r+0x6c6>
 8011bae:	9901      	ldr	r1, [sp, #4]
 8011bb0:	2230      	movs	r2, #48	; 0x30
 8011bb2:	3701      	adds	r7, #1
 8011bb4:	700a      	strb	r2, [r1, #0]
 8011bb6:	781a      	ldrb	r2, [r3, #0]
 8011bb8:	3201      	adds	r2, #1
 8011bba:	701a      	strb	r2, [r3, #0]
 8011bbc:	e790      	b.n	8011ae0 <_dtoa_r+0x608>
 8011bbe:	4ba6      	ldr	r3, [pc, #664]	; (8011e58 <_dtoa_r+0x980>)
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	f7ee fd41 	bl	8000648 <__aeabi_dmul>
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	2300      	movs	r3, #0
 8011bca:	4606      	mov	r6, r0
 8011bcc:	460f      	mov	r7, r1
 8011bce:	f7ee ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d09d      	beq.n	8011b12 <_dtoa_r+0x63a>
 8011bd6:	e7cf      	b.n	8011b78 <_dtoa_r+0x6a0>
 8011bd8:	9a08      	ldr	r2, [sp, #32]
 8011bda:	2a00      	cmp	r2, #0
 8011bdc:	f000 80d7 	beq.w	8011d8e <_dtoa_r+0x8b6>
 8011be0:	9a06      	ldr	r2, [sp, #24]
 8011be2:	2a01      	cmp	r2, #1
 8011be4:	f300 80ba 	bgt.w	8011d5c <_dtoa_r+0x884>
 8011be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bea:	2a00      	cmp	r2, #0
 8011bec:	f000 80b2 	beq.w	8011d54 <_dtoa_r+0x87c>
 8011bf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011bf4:	9e07      	ldr	r6, [sp, #28]
 8011bf6:	9d04      	ldr	r5, [sp, #16]
 8011bf8:	9a04      	ldr	r2, [sp, #16]
 8011bfa:	441a      	add	r2, r3
 8011bfc:	9204      	str	r2, [sp, #16]
 8011bfe:	9a05      	ldr	r2, [sp, #20]
 8011c00:	2101      	movs	r1, #1
 8011c02:	441a      	add	r2, r3
 8011c04:	4620      	mov	r0, r4
 8011c06:	9205      	str	r2, [sp, #20]
 8011c08:	f001 f95c 	bl	8012ec4 <__i2b>
 8011c0c:	4607      	mov	r7, r0
 8011c0e:	2d00      	cmp	r5, #0
 8011c10:	dd0c      	ble.n	8011c2c <_dtoa_r+0x754>
 8011c12:	9b05      	ldr	r3, [sp, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	dd09      	ble.n	8011c2c <_dtoa_r+0x754>
 8011c18:	42ab      	cmp	r3, r5
 8011c1a:	9a04      	ldr	r2, [sp, #16]
 8011c1c:	bfa8      	it	ge
 8011c1e:	462b      	movge	r3, r5
 8011c20:	1ad2      	subs	r2, r2, r3
 8011c22:	9204      	str	r2, [sp, #16]
 8011c24:	9a05      	ldr	r2, [sp, #20]
 8011c26:	1aed      	subs	r5, r5, r3
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	9305      	str	r3, [sp, #20]
 8011c2c:	9b07      	ldr	r3, [sp, #28]
 8011c2e:	b31b      	cbz	r3, 8011c78 <_dtoa_r+0x7a0>
 8011c30:	9b08      	ldr	r3, [sp, #32]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80af 	beq.w	8011d96 <_dtoa_r+0x8be>
 8011c38:	2e00      	cmp	r6, #0
 8011c3a:	dd13      	ble.n	8011c64 <_dtoa_r+0x78c>
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	4632      	mov	r2, r6
 8011c40:	4620      	mov	r0, r4
 8011c42:	f001 f9ff 	bl	8013044 <__pow5mult>
 8011c46:	ee18 2a10 	vmov	r2, s16
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	4607      	mov	r7, r0
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f001 f94e 	bl	8012ef0 <__multiply>
 8011c54:	ee18 1a10 	vmov	r1, s16
 8011c58:	4680      	mov	r8, r0
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f001 f830 	bl	8012cc0 <_Bfree>
 8011c60:	ee08 8a10 	vmov	s16, r8
 8011c64:	9b07      	ldr	r3, [sp, #28]
 8011c66:	1b9a      	subs	r2, r3, r6
 8011c68:	d006      	beq.n	8011c78 <_dtoa_r+0x7a0>
 8011c6a:	ee18 1a10 	vmov	r1, s16
 8011c6e:	4620      	mov	r0, r4
 8011c70:	f001 f9e8 	bl	8013044 <__pow5mult>
 8011c74:	ee08 0a10 	vmov	s16, r0
 8011c78:	2101      	movs	r1, #1
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f001 f922 	bl	8012ec4 <__i2b>
 8011c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	4606      	mov	r6, r0
 8011c86:	f340 8088 	ble.w	8011d9a <_dtoa_r+0x8c2>
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f001 f9d8 	bl	8013044 <__pow5mult>
 8011c94:	9b06      	ldr	r3, [sp, #24]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	4606      	mov	r6, r0
 8011c9a:	f340 8081 	ble.w	8011da0 <_dtoa_r+0x8c8>
 8011c9e:	f04f 0800 	mov.w	r8, #0
 8011ca2:	6933      	ldr	r3, [r6, #16]
 8011ca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011ca8:	6918      	ldr	r0, [r3, #16]
 8011caa:	f001 f8bb 	bl	8012e24 <__hi0bits>
 8011cae:	f1c0 0020 	rsb	r0, r0, #32
 8011cb2:	9b05      	ldr	r3, [sp, #20]
 8011cb4:	4418      	add	r0, r3
 8011cb6:	f010 001f 	ands.w	r0, r0, #31
 8011cba:	f000 8092 	beq.w	8011de2 <_dtoa_r+0x90a>
 8011cbe:	f1c0 0320 	rsb	r3, r0, #32
 8011cc2:	2b04      	cmp	r3, #4
 8011cc4:	f340 808a 	ble.w	8011ddc <_dtoa_r+0x904>
 8011cc8:	f1c0 001c 	rsb	r0, r0, #28
 8011ccc:	9b04      	ldr	r3, [sp, #16]
 8011cce:	4403      	add	r3, r0
 8011cd0:	9304      	str	r3, [sp, #16]
 8011cd2:	9b05      	ldr	r3, [sp, #20]
 8011cd4:	4403      	add	r3, r0
 8011cd6:	4405      	add	r5, r0
 8011cd8:	9305      	str	r3, [sp, #20]
 8011cda:	9b04      	ldr	r3, [sp, #16]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	dd07      	ble.n	8011cf0 <_dtoa_r+0x818>
 8011ce0:	ee18 1a10 	vmov	r1, s16
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f001 fa06 	bl	80130f8 <__lshift>
 8011cec:	ee08 0a10 	vmov	s16, r0
 8011cf0:	9b05      	ldr	r3, [sp, #20]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	dd05      	ble.n	8011d02 <_dtoa_r+0x82a>
 8011cf6:	4631      	mov	r1, r6
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f001 f9fc 	bl	80130f8 <__lshift>
 8011d00:	4606      	mov	r6, r0
 8011d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d06e      	beq.n	8011de6 <_dtoa_r+0x90e>
 8011d08:	ee18 0a10 	vmov	r0, s16
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	f001 fa63 	bl	80131d8 <__mcmp>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	da67      	bge.n	8011de6 <_dtoa_r+0x90e>
 8011d16:	9b00      	ldr	r3, [sp, #0]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	ee18 1a10 	vmov	r1, s16
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	220a      	movs	r2, #10
 8011d22:	2300      	movs	r3, #0
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 ffed 	bl	8012d04 <__multadd>
 8011d2a:	9b08      	ldr	r3, [sp, #32]
 8011d2c:	ee08 0a10 	vmov	s16, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f000 81b1 	beq.w	8012098 <_dtoa_r+0xbc0>
 8011d36:	2300      	movs	r3, #0
 8011d38:	4639      	mov	r1, r7
 8011d3a:	220a      	movs	r2, #10
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f000 ffe1 	bl	8012d04 <__multadd>
 8011d42:	9b02      	ldr	r3, [sp, #8]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	4607      	mov	r7, r0
 8011d48:	f300 808e 	bgt.w	8011e68 <_dtoa_r+0x990>
 8011d4c:	9b06      	ldr	r3, [sp, #24]
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	dc51      	bgt.n	8011df6 <_dtoa_r+0x91e>
 8011d52:	e089      	b.n	8011e68 <_dtoa_r+0x990>
 8011d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d5a:	e74b      	b.n	8011bf4 <_dtoa_r+0x71c>
 8011d5c:	9b03      	ldr	r3, [sp, #12]
 8011d5e:	1e5e      	subs	r6, r3, #1
 8011d60:	9b07      	ldr	r3, [sp, #28]
 8011d62:	42b3      	cmp	r3, r6
 8011d64:	bfbf      	itttt	lt
 8011d66:	9b07      	ldrlt	r3, [sp, #28]
 8011d68:	9607      	strlt	r6, [sp, #28]
 8011d6a:	1af2      	sublt	r2, r6, r3
 8011d6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011d6e:	bfb6      	itet	lt
 8011d70:	189b      	addlt	r3, r3, r2
 8011d72:	1b9e      	subge	r6, r3, r6
 8011d74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011d76:	9b03      	ldr	r3, [sp, #12]
 8011d78:	bfb8      	it	lt
 8011d7a:	2600      	movlt	r6, #0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	bfb7      	itett	lt
 8011d80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011d84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011d88:	1a9d      	sublt	r5, r3, r2
 8011d8a:	2300      	movlt	r3, #0
 8011d8c:	e734      	b.n	8011bf8 <_dtoa_r+0x720>
 8011d8e:	9e07      	ldr	r6, [sp, #28]
 8011d90:	9d04      	ldr	r5, [sp, #16]
 8011d92:	9f08      	ldr	r7, [sp, #32]
 8011d94:	e73b      	b.n	8011c0e <_dtoa_r+0x736>
 8011d96:	9a07      	ldr	r2, [sp, #28]
 8011d98:	e767      	b.n	8011c6a <_dtoa_r+0x792>
 8011d9a:	9b06      	ldr	r3, [sp, #24]
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	dc18      	bgt.n	8011dd2 <_dtoa_r+0x8fa>
 8011da0:	f1ba 0f00 	cmp.w	sl, #0
 8011da4:	d115      	bne.n	8011dd2 <_dtoa_r+0x8fa>
 8011da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011daa:	b993      	cbnz	r3, 8011dd2 <_dtoa_r+0x8fa>
 8011dac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011db0:	0d1b      	lsrs	r3, r3, #20
 8011db2:	051b      	lsls	r3, r3, #20
 8011db4:	b183      	cbz	r3, 8011dd8 <_dtoa_r+0x900>
 8011db6:	9b04      	ldr	r3, [sp, #16]
 8011db8:	3301      	adds	r3, #1
 8011dba:	9304      	str	r3, [sp, #16]
 8011dbc:	9b05      	ldr	r3, [sp, #20]
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	9305      	str	r3, [sp, #20]
 8011dc2:	f04f 0801 	mov.w	r8, #1
 8011dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f47f af6a 	bne.w	8011ca2 <_dtoa_r+0x7ca>
 8011dce:	2001      	movs	r0, #1
 8011dd0:	e76f      	b.n	8011cb2 <_dtoa_r+0x7da>
 8011dd2:	f04f 0800 	mov.w	r8, #0
 8011dd6:	e7f6      	b.n	8011dc6 <_dtoa_r+0x8ee>
 8011dd8:	4698      	mov	r8, r3
 8011dda:	e7f4      	b.n	8011dc6 <_dtoa_r+0x8ee>
 8011ddc:	f43f af7d 	beq.w	8011cda <_dtoa_r+0x802>
 8011de0:	4618      	mov	r0, r3
 8011de2:	301c      	adds	r0, #28
 8011de4:	e772      	b.n	8011ccc <_dtoa_r+0x7f4>
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	dc37      	bgt.n	8011e5c <_dtoa_r+0x984>
 8011dec:	9b06      	ldr	r3, [sp, #24]
 8011dee:	2b02      	cmp	r3, #2
 8011df0:	dd34      	ble.n	8011e5c <_dtoa_r+0x984>
 8011df2:	9b03      	ldr	r3, [sp, #12]
 8011df4:	9302      	str	r3, [sp, #8]
 8011df6:	9b02      	ldr	r3, [sp, #8]
 8011df8:	b96b      	cbnz	r3, 8011e16 <_dtoa_r+0x93e>
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	2205      	movs	r2, #5
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 ff80 	bl	8012d04 <__multadd>
 8011e04:	4601      	mov	r1, r0
 8011e06:	4606      	mov	r6, r0
 8011e08:	ee18 0a10 	vmov	r0, s16
 8011e0c:	f001 f9e4 	bl	80131d8 <__mcmp>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	f73f adbb 	bgt.w	801198c <_dtoa_r+0x4b4>
 8011e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e18:	9d01      	ldr	r5, [sp, #4]
 8011e1a:	43db      	mvns	r3, r3
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	f04f 0800 	mov.w	r8, #0
 8011e22:	4631      	mov	r1, r6
 8011e24:	4620      	mov	r0, r4
 8011e26:	f000 ff4b 	bl	8012cc0 <_Bfree>
 8011e2a:	2f00      	cmp	r7, #0
 8011e2c:	f43f aea4 	beq.w	8011b78 <_dtoa_r+0x6a0>
 8011e30:	f1b8 0f00 	cmp.w	r8, #0
 8011e34:	d005      	beq.n	8011e42 <_dtoa_r+0x96a>
 8011e36:	45b8      	cmp	r8, r7
 8011e38:	d003      	beq.n	8011e42 <_dtoa_r+0x96a>
 8011e3a:	4641      	mov	r1, r8
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f000 ff3f 	bl	8012cc0 <_Bfree>
 8011e42:	4639      	mov	r1, r7
 8011e44:	4620      	mov	r0, r4
 8011e46:	f000 ff3b 	bl	8012cc0 <_Bfree>
 8011e4a:	e695      	b.n	8011b78 <_dtoa_r+0x6a0>
 8011e4c:	2600      	movs	r6, #0
 8011e4e:	4637      	mov	r7, r6
 8011e50:	e7e1      	b.n	8011e16 <_dtoa_r+0x93e>
 8011e52:	9700      	str	r7, [sp, #0]
 8011e54:	4637      	mov	r7, r6
 8011e56:	e599      	b.n	801198c <_dtoa_r+0x4b4>
 8011e58:	40240000 	.word	0x40240000
 8011e5c:	9b08      	ldr	r3, [sp, #32]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f000 80ca 	beq.w	8011ff8 <_dtoa_r+0xb20>
 8011e64:	9b03      	ldr	r3, [sp, #12]
 8011e66:	9302      	str	r3, [sp, #8]
 8011e68:	2d00      	cmp	r5, #0
 8011e6a:	dd05      	ble.n	8011e78 <_dtoa_r+0x9a0>
 8011e6c:	4639      	mov	r1, r7
 8011e6e:	462a      	mov	r2, r5
 8011e70:	4620      	mov	r0, r4
 8011e72:	f001 f941 	bl	80130f8 <__lshift>
 8011e76:	4607      	mov	r7, r0
 8011e78:	f1b8 0f00 	cmp.w	r8, #0
 8011e7c:	d05b      	beq.n	8011f36 <_dtoa_r+0xa5e>
 8011e7e:	6879      	ldr	r1, [r7, #4]
 8011e80:	4620      	mov	r0, r4
 8011e82:	f000 fedd 	bl	8012c40 <_Balloc>
 8011e86:	4605      	mov	r5, r0
 8011e88:	b928      	cbnz	r0, 8011e96 <_dtoa_r+0x9be>
 8011e8a:	4b87      	ldr	r3, [pc, #540]	; (80120a8 <_dtoa_r+0xbd0>)
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011e92:	f7ff bb3b 	b.w	801150c <_dtoa_r+0x34>
 8011e96:	693a      	ldr	r2, [r7, #16]
 8011e98:	3202      	adds	r2, #2
 8011e9a:	0092      	lsls	r2, r2, #2
 8011e9c:	f107 010c 	add.w	r1, r7, #12
 8011ea0:	300c      	adds	r0, #12
 8011ea2:	f7fd fa93 	bl	800f3cc <memcpy>
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f001 f924 	bl	80130f8 <__lshift>
 8011eb0:	9b01      	ldr	r3, [sp, #4]
 8011eb2:	f103 0901 	add.w	r9, r3, #1
 8011eb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011eba:	4413      	add	r3, r2
 8011ebc:	9305      	str	r3, [sp, #20]
 8011ebe:	f00a 0301 	and.w	r3, sl, #1
 8011ec2:	46b8      	mov	r8, r7
 8011ec4:	9304      	str	r3, [sp, #16]
 8011ec6:	4607      	mov	r7, r0
 8011ec8:	4631      	mov	r1, r6
 8011eca:	ee18 0a10 	vmov	r0, s16
 8011ece:	f7ff fa76 	bl	80113be <quorem>
 8011ed2:	4641      	mov	r1, r8
 8011ed4:	9002      	str	r0, [sp, #8]
 8011ed6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011eda:	ee18 0a10 	vmov	r0, s16
 8011ede:	f001 f97b 	bl	80131d8 <__mcmp>
 8011ee2:	463a      	mov	r2, r7
 8011ee4:	9003      	str	r0, [sp, #12]
 8011ee6:	4631      	mov	r1, r6
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f001 f991 	bl	8013210 <__mdiff>
 8011eee:	68c2      	ldr	r2, [r0, #12]
 8011ef0:	f109 3bff 	add.w	fp, r9, #4294967295
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	bb02      	cbnz	r2, 8011f3a <_dtoa_r+0xa62>
 8011ef8:	4601      	mov	r1, r0
 8011efa:	ee18 0a10 	vmov	r0, s16
 8011efe:	f001 f96b 	bl	80131d8 <__mcmp>
 8011f02:	4602      	mov	r2, r0
 8011f04:	4629      	mov	r1, r5
 8011f06:	4620      	mov	r0, r4
 8011f08:	9207      	str	r2, [sp, #28]
 8011f0a:	f000 fed9 	bl	8012cc0 <_Bfree>
 8011f0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f12:	ea43 0102 	orr.w	r1, r3, r2
 8011f16:	9b04      	ldr	r3, [sp, #16]
 8011f18:	430b      	orrs	r3, r1
 8011f1a:	464d      	mov	r5, r9
 8011f1c:	d10f      	bne.n	8011f3e <_dtoa_r+0xa66>
 8011f1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f22:	d02a      	beq.n	8011f7a <_dtoa_r+0xaa2>
 8011f24:	9b03      	ldr	r3, [sp, #12]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	dd02      	ble.n	8011f30 <_dtoa_r+0xa58>
 8011f2a:	9b02      	ldr	r3, [sp, #8]
 8011f2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011f30:	f88b a000 	strb.w	sl, [fp]
 8011f34:	e775      	b.n	8011e22 <_dtoa_r+0x94a>
 8011f36:	4638      	mov	r0, r7
 8011f38:	e7ba      	b.n	8011eb0 <_dtoa_r+0x9d8>
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	e7e2      	b.n	8011f04 <_dtoa_r+0xa2c>
 8011f3e:	9b03      	ldr	r3, [sp, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	db04      	blt.n	8011f4e <_dtoa_r+0xa76>
 8011f44:	9906      	ldr	r1, [sp, #24]
 8011f46:	430b      	orrs	r3, r1
 8011f48:	9904      	ldr	r1, [sp, #16]
 8011f4a:	430b      	orrs	r3, r1
 8011f4c:	d122      	bne.n	8011f94 <_dtoa_r+0xabc>
 8011f4e:	2a00      	cmp	r2, #0
 8011f50:	ddee      	ble.n	8011f30 <_dtoa_r+0xa58>
 8011f52:	ee18 1a10 	vmov	r1, s16
 8011f56:	2201      	movs	r2, #1
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f001 f8cd 	bl	80130f8 <__lshift>
 8011f5e:	4631      	mov	r1, r6
 8011f60:	ee08 0a10 	vmov	s16, r0
 8011f64:	f001 f938 	bl	80131d8 <__mcmp>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	dc03      	bgt.n	8011f74 <_dtoa_r+0xa9c>
 8011f6c:	d1e0      	bne.n	8011f30 <_dtoa_r+0xa58>
 8011f6e:	f01a 0f01 	tst.w	sl, #1
 8011f72:	d0dd      	beq.n	8011f30 <_dtoa_r+0xa58>
 8011f74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f78:	d1d7      	bne.n	8011f2a <_dtoa_r+0xa52>
 8011f7a:	2339      	movs	r3, #57	; 0x39
 8011f7c:	f88b 3000 	strb.w	r3, [fp]
 8011f80:	462b      	mov	r3, r5
 8011f82:	461d      	mov	r5, r3
 8011f84:	3b01      	subs	r3, #1
 8011f86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011f8a:	2a39      	cmp	r2, #57	; 0x39
 8011f8c:	d071      	beq.n	8012072 <_dtoa_r+0xb9a>
 8011f8e:	3201      	adds	r2, #1
 8011f90:	701a      	strb	r2, [r3, #0]
 8011f92:	e746      	b.n	8011e22 <_dtoa_r+0x94a>
 8011f94:	2a00      	cmp	r2, #0
 8011f96:	dd07      	ble.n	8011fa8 <_dtoa_r+0xad0>
 8011f98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f9c:	d0ed      	beq.n	8011f7a <_dtoa_r+0xaa2>
 8011f9e:	f10a 0301 	add.w	r3, sl, #1
 8011fa2:	f88b 3000 	strb.w	r3, [fp]
 8011fa6:	e73c      	b.n	8011e22 <_dtoa_r+0x94a>
 8011fa8:	9b05      	ldr	r3, [sp, #20]
 8011faa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011fae:	4599      	cmp	r9, r3
 8011fb0:	d047      	beq.n	8012042 <_dtoa_r+0xb6a>
 8011fb2:	ee18 1a10 	vmov	r1, s16
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	220a      	movs	r2, #10
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f000 fea2 	bl	8012d04 <__multadd>
 8011fc0:	45b8      	cmp	r8, r7
 8011fc2:	ee08 0a10 	vmov	s16, r0
 8011fc6:	f04f 0300 	mov.w	r3, #0
 8011fca:	f04f 020a 	mov.w	r2, #10
 8011fce:	4641      	mov	r1, r8
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	d106      	bne.n	8011fe2 <_dtoa_r+0xb0a>
 8011fd4:	f000 fe96 	bl	8012d04 <__multadd>
 8011fd8:	4680      	mov	r8, r0
 8011fda:	4607      	mov	r7, r0
 8011fdc:	f109 0901 	add.w	r9, r9, #1
 8011fe0:	e772      	b.n	8011ec8 <_dtoa_r+0x9f0>
 8011fe2:	f000 fe8f 	bl	8012d04 <__multadd>
 8011fe6:	4639      	mov	r1, r7
 8011fe8:	4680      	mov	r8, r0
 8011fea:	2300      	movs	r3, #0
 8011fec:	220a      	movs	r2, #10
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f000 fe88 	bl	8012d04 <__multadd>
 8011ff4:	4607      	mov	r7, r0
 8011ff6:	e7f1      	b.n	8011fdc <_dtoa_r+0xb04>
 8011ff8:	9b03      	ldr	r3, [sp, #12]
 8011ffa:	9302      	str	r3, [sp, #8]
 8011ffc:	9d01      	ldr	r5, [sp, #4]
 8011ffe:	ee18 0a10 	vmov	r0, s16
 8012002:	4631      	mov	r1, r6
 8012004:	f7ff f9db 	bl	80113be <quorem>
 8012008:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801200c:	9b01      	ldr	r3, [sp, #4]
 801200e:	f805 ab01 	strb.w	sl, [r5], #1
 8012012:	1aea      	subs	r2, r5, r3
 8012014:	9b02      	ldr	r3, [sp, #8]
 8012016:	4293      	cmp	r3, r2
 8012018:	dd09      	ble.n	801202e <_dtoa_r+0xb56>
 801201a:	ee18 1a10 	vmov	r1, s16
 801201e:	2300      	movs	r3, #0
 8012020:	220a      	movs	r2, #10
 8012022:	4620      	mov	r0, r4
 8012024:	f000 fe6e 	bl	8012d04 <__multadd>
 8012028:	ee08 0a10 	vmov	s16, r0
 801202c:	e7e7      	b.n	8011ffe <_dtoa_r+0xb26>
 801202e:	9b02      	ldr	r3, [sp, #8]
 8012030:	2b00      	cmp	r3, #0
 8012032:	bfc8      	it	gt
 8012034:	461d      	movgt	r5, r3
 8012036:	9b01      	ldr	r3, [sp, #4]
 8012038:	bfd8      	it	le
 801203a:	2501      	movle	r5, #1
 801203c:	441d      	add	r5, r3
 801203e:	f04f 0800 	mov.w	r8, #0
 8012042:	ee18 1a10 	vmov	r1, s16
 8012046:	2201      	movs	r2, #1
 8012048:	4620      	mov	r0, r4
 801204a:	f001 f855 	bl	80130f8 <__lshift>
 801204e:	4631      	mov	r1, r6
 8012050:	ee08 0a10 	vmov	s16, r0
 8012054:	f001 f8c0 	bl	80131d8 <__mcmp>
 8012058:	2800      	cmp	r0, #0
 801205a:	dc91      	bgt.n	8011f80 <_dtoa_r+0xaa8>
 801205c:	d102      	bne.n	8012064 <_dtoa_r+0xb8c>
 801205e:	f01a 0f01 	tst.w	sl, #1
 8012062:	d18d      	bne.n	8011f80 <_dtoa_r+0xaa8>
 8012064:	462b      	mov	r3, r5
 8012066:	461d      	mov	r5, r3
 8012068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801206c:	2a30      	cmp	r2, #48	; 0x30
 801206e:	d0fa      	beq.n	8012066 <_dtoa_r+0xb8e>
 8012070:	e6d7      	b.n	8011e22 <_dtoa_r+0x94a>
 8012072:	9a01      	ldr	r2, [sp, #4]
 8012074:	429a      	cmp	r2, r3
 8012076:	d184      	bne.n	8011f82 <_dtoa_r+0xaaa>
 8012078:	9b00      	ldr	r3, [sp, #0]
 801207a:	3301      	adds	r3, #1
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	2331      	movs	r3, #49	; 0x31
 8012080:	7013      	strb	r3, [r2, #0]
 8012082:	e6ce      	b.n	8011e22 <_dtoa_r+0x94a>
 8012084:	4b09      	ldr	r3, [pc, #36]	; (80120ac <_dtoa_r+0xbd4>)
 8012086:	f7ff ba95 	b.w	80115b4 <_dtoa_r+0xdc>
 801208a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801208c:	2b00      	cmp	r3, #0
 801208e:	f47f aa6e 	bne.w	801156e <_dtoa_r+0x96>
 8012092:	4b07      	ldr	r3, [pc, #28]	; (80120b0 <_dtoa_r+0xbd8>)
 8012094:	f7ff ba8e 	b.w	80115b4 <_dtoa_r+0xdc>
 8012098:	9b02      	ldr	r3, [sp, #8]
 801209a:	2b00      	cmp	r3, #0
 801209c:	dcae      	bgt.n	8011ffc <_dtoa_r+0xb24>
 801209e:	9b06      	ldr	r3, [sp, #24]
 80120a0:	2b02      	cmp	r3, #2
 80120a2:	f73f aea8 	bgt.w	8011df6 <_dtoa_r+0x91e>
 80120a6:	e7a9      	b.n	8011ffc <_dtoa_r+0xb24>
 80120a8:	0802ab0b 	.word	0x0802ab0b
 80120ac:	0802a8ed 	.word	0x0802a8ed
 80120b0:	0802aa69 	.word	0x0802aa69

080120b4 <__sflush_r>:
 80120b4:	898a      	ldrh	r2, [r1, #12]
 80120b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ba:	4605      	mov	r5, r0
 80120bc:	0710      	lsls	r0, r2, #28
 80120be:	460c      	mov	r4, r1
 80120c0:	d458      	bmi.n	8012174 <__sflush_r+0xc0>
 80120c2:	684b      	ldr	r3, [r1, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	dc05      	bgt.n	80120d4 <__sflush_r+0x20>
 80120c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	dc02      	bgt.n	80120d4 <__sflush_r+0x20>
 80120ce:	2000      	movs	r0, #0
 80120d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120d6:	2e00      	cmp	r6, #0
 80120d8:	d0f9      	beq.n	80120ce <__sflush_r+0x1a>
 80120da:	2300      	movs	r3, #0
 80120dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80120e0:	682f      	ldr	r7, [r5, #0]
 80120e2:	602b      	str	r3, [r5, #0]
 80120e4:	d032      	beq.n	801214c <__sflush_r+0x98>
 80120e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80120e8:	89a3      	ldrh	r3, [r4, #12]
 80120ea:	075a      	lsls	r2, r3, #29
 80120ec:	d505      	bpl.n	80120fa <__sflush_r+0x46>
 80120ee:	6863      	ldr	r3, [r4, #4]
 80120f0:	1ac0      	subs	r0, r0, r3
 80120f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120f4:	b10b      	cbz	r3, 80120fa <__sflush_r+0x46>
 80120f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120f8:	1ac0      	subs	r0, r0, r3
 80120fa:	2300      	movs	r3, #0
 80120fc:	4602      	mov	r2, r0
 80120fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012100:	6a21      	ldr	r1, [r4, #32]
 8012102:	4628      	mov	r0, r5
 8012104:	47b0      	blx	r6
 8012106:	1c43      	adds	r3, r0, #1
 8012108:	89a3      	ldrh	r3, [r4, #12]
 801210a:	d106      	bne.n	801211a <__sflush_r+0x66>
 801210c:	6829      	ldr	r1, [r5, #0]
 801210e:	291d      	cmp	r1, #29
 8012110:	d82c      	bhi.n	801216c <__sflush_r+0xb8>
 8012112:	4a2a      	ldr	r2, [pc, #168]	; (80121bc <__sflush_r+0x108>)
 8012114:	40ca      	lsrs	r2, r1
 8012116:	07d6      	lsls	r6, r2, #31
 8012118:	d528      	bpl.n	801216c <__sflush_r+0xb8>
 801211a:	2200      	movs	r2, #0
 801211c:	6062      	str	r2, [r4, #4]
 801211e:	04d9      	lsls	r1, r3, #19
 8012120:	6922      	ldr	r2, [r4, #16]
 8012122:	6022      	str	r2, [r4, #0]
 8012124:	d504      	bpl.n	8012130 <__sflush_r+0x7c>
 8012126:	1c42      	adds	r2, r0, #1
 8012128:	d101      	bne.n	801212e <__sflush_r+0x7a>
 801212a:	682b      	ldr	r3, [r5, #0]
 801212c:	b903      	cbnz	r3, 8012130 <__sflush_r+0x7c>
 801212e:	6560      	str	r0, [r4, #84]	; 0x54
 8012130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012132:	602f      	str	r7, [r5, #0]
 8012134:	2900      	cmp	r1, #0
 8012136:	d0ca      	beq.n	80120ce <__sflush_r+0x1a>
 8012138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801213c:	4299      	cmp	r1, r3
 801213e:	d002      	beq.n	8012146 <__sflush_r+0x92>
 8012140:	4628      	mov	r0, r5
 8012142:	f001 fa55 	bl	80135f0 <_free_r>
 8012146:	2000      	movs	r0, #0
 8012148:	6360      	str	r0, [r4, #52]	; 0x34
 801214a:	e7c1      	b.n	80120d0 <__sflush_r+0x1c>
 801214c:	6a21      	ldr	r1, [r4, #32]
 801214e:	2301      	movs	r3, #1
 8012150:	4628      	mov	r0, r5
 8012152:	47b0      	blx	r6
 8012154:	1c41      	adds	r1, r0, #1
 8012156:	d1c7      	bne.n	80120e8 <__sflush_r+0x34>
 8012158:	682b      	ldr	r3, [r5, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d0c4      	beq.n	80120e8 <__sflush_r+0x34>
 801215e:	2b1d      	cmp	r3, #29
 8012160:	d001      	beq.n	8012166 <__sflush_r+0xb2>
 8012162:	2b16      	cmp	r3, #22
 8012164:	d101      	bne.n	801216a <__sflush_r+0xb6>
 8012166:	602f      	str	r7, [r5, #0]
 8012168:	e7b1      	b.n	80120ce <__sflush_r+0x1a>
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012170:	81a3      	strh	r3, [r4, #12]
 8012172:	e7ad      	b.n	80120d0 <__sflush_r+0x1c>
 8012174:	690f      	ldr	r7, [r1, #16]
 8012176:	2f00      	cmp	r7, #0
 8012178:	d0a9      	beq.n	80120ce <__sflush_r+0x1a>
 801217a:	0793      	lsls	r3, r2, #30
 801217c:	680e      	ldr	r6, [r1, #0]
 801217e:	bf08      	it	eq
 8012180:	694b      	ldreq	r3, [r1, #20]
 8012182:	600f      	str	r7, [r1, #0]
 8012184:	bf18      	it	ne
 8012186:	2300      	movne	r3, #0
 8012188:	eba6 0807 	sub.w	r8, r6, r7
 801218c:	608b      	str	r3, [r1, #8]
 801218e:	f1b8 0f00 	cmp.w	r8, #0
 8012192:	dd9c      	ble.n	80120ce <__sflush_r+0x1a>
 8012194:	6a21      	ldr	r1, [r4, #32]
 8012196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012198:	4643      	mov	r3, r8
 801219a:	463a      	mov	r2, r7
 801219c:	4628      	mov	r0, r5
 801219e:	47b0      	blx	r6
 80121a0:	2800      	cmp	r0, #0
 80121a2:	dc06      	bgt.n	80121b2 <__sflush_r+0xfe>
 80121a4:	89a3      	ldrh	r3, [r4, #12]
 80121a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121aa:	81a3      	strh	r3, [r4, #12]
 80121ac:	f04f 30ff 	mov.w	r0, #4294967295
 80121b0:	e78e      	b.n	80120d0 <__sflush_r+0x1c>
 80121b2:	4407      	add	r7, r0
 80121b4:	eba8 0800 	sub.w	r8, r8, r0
 80121b8:	e7e9      	b.n	801218e <__sflush_r+0xda>
 80121ba:	bf00      	nop
 80121bc:	20400001 	.word	0x20400001

080121c0 <_fflush_r>:
 80121c0:	b538      	push	{r3, r4, r5, lr}
 80121c2:	690b      	ldr	r3, [r1, #16]
 80121c4:	4605      	mov	r5, r0
 80121c6:	460c      	mov	r4, r1
 80121c8:	b913      	cbnz	r3, 80121d0 <_fflush_r+0x10>
 80121ca:	2500      	movs	r5, #0
 80121cc:	4628      	mov	r0, r5
 80121ce:	bd38      	pop	{r3, r4, r5, pc}
 80121d0:	b118      	cbz	r0, 80121da <_fflush_r+0x1a>
 80121d2:	6983      	ldr	r3, [r0, #24]
 80121d4:	b90b      	cbnz	r3, 80121da <_fflush_r+0x1a>
 80121d6:	f000 f887 	bl	80122e8 <__sinit>
 80121da:	4b14      	ldr	r3, [pc, #80]	; (801222c <_fflush_r+0x6c>)
 80121dc:	429c      	cmp	r4, r3
 80121de:	d11b      	bne.n	8012218 <_fflush_r+0x58>
 80121e0:	686c      	ldr	r4, [r5, #4]
 80121e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d0ef      	beq.n	80121ca <_fflush_r+0xa>
 80121ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121ec:	07d0      	lsls	r0, r2, #31
 80121ee:	d404      	bmi.n	80121fa <_fflush_r+0x3a>
 80121f0:	0599      	lsls	r1, r3, #22
 80121f2:	d402      	bmi.n	80121fa <_fflush_r+0x3a>
 80121f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121f6:	f000 fc88 	bl	8012b0a <__retarget_lock_acquire_recursive>
 80121fa:	4628      	mov	r0, r5
 80121fc:	4621      	mov	r1, r4
 80121fe:	f7ff ff59 	bl	80120b4 <__sflush_r>
 8012202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012204:	07da      	lsls	r2, r3, #31
 8012206:	4605      	mov	r5, r0
 8012208:	d4e0      	bmi.n	80121cc <_fflush_r+0xc>
 801220a:	89a3      	ldrh	r3, [r4, #12]
 801220c:	059b      	lsls	r3, r3, #22
 801220e:	d4dd      	bmi.n	80121cc <_fflush_r+0xc>
 8012210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012212:	f000 fc7b 	bl	8012b0c <__retarget_lock_release_recursive>
 8012216:	e7d9      	b.n	80121cc <_fflush_r+0xc>
 8012218:	4b05      	ldr	r3, [pc, #20]	; (8012230 <_fflush_r+0x70>)
 801221a:	429c      	cmp	r4, r3
 801221c:	d101      	bne.n	8012222 <_fflush_r+0x62>
 801221e:	68ac      	ldr	r4, [r5, #8]
 8012220:	e7df      	b.n	80121e2 <_fflush_r+0x22>
 8012222:	4b04      	ldr	r3, [pc, #16]	; (8012234 <_fflush_r+0x74>)
 8012224:	429c      	cmp	r4, r3
 8012226:	bf08      	it	eq
 8012228:	68ec      	ldreq	r4, [r5, #12]
 801222a:	e7da      	b.n	80121e2 <_fflush_r+0x22>
 801222c:	0802ab3c 	.word	0x0802ab3c
 8012230:	0802ab5c 	.word	0x0802ab5c
 8012234:	0802ab1c 	.word	0x0802ab1c

08012238 <std>:
 8012238:	2300      	movs	r3, #0
 801223a:	b510      	push	{r4, lr}
 801223c:	4604      	mov	r4, r0
 801223e:	e9c0 3300 	strd	r3, r3, [r0]
 8012242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012246:	6083      	str	r3, [r0, #8]
 8012248:	8181      	strh	r1, [r0, #12]
 801224a:	6643      	str	r3, [r0, #100]	; 0x64
 801224c:	81c2      	strh	r2, [r0, #14]
 801224e:	6183      	str	r3, [r0, #24]
 8012250:	4619      	mov	r1, r3
 8012252:	2208      	movs	r2, #8
 8012254:	305c      	adds	r0, #92	; 0x5c
 8012256:	f7fd f8c7 	bl	800f3e8 <memset>
 801225a:	4b05      	ldr	r3, [pc, #20]	; (8012270 <std+0x38>)
 801225c:	6263      	str	r3, [r4, #36]	; 0x24
 801225e:	4b05      	ldr	r3, [pc, #20]	; (8012274 <std+0x3c>)
 8012260:	62a3      	str	r3, [r4, #40]	; 0x28
 8012262:	4b05      	ldr	r3, [pc, #20]	; (8012278 <std+0x40>)
 8012264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012266:	4b05      	ldr	r3, [pc, #20]	; (801227c <std+0x44>)
 8012268:	6224      	str	r4, [r4, #32]
 801226a:	6323      	str	r3, [r4, #48]	; 0x30
 801226c:	bd10      	pop	{r4, pc}
 801226e:	bf00      	nop
 8012270:	08013b81 	.word	0x08013b81
 8012274:	08013ba3 	.word	0x08013ba3
 8012278:	08013bdb 	.word	0x08013bdb
 801227c:	08013bff 	.word	0x08013bff

08012280 <_cleanup_r>:
 8012280:	4901      	ldr	r1, [pc, #4]	; (8012288 <_cleanup_r+0x8>)
 8012282:	f000 b8af 	b.w	80123e4 <_fwalk_reent>
 8012286:	bf00      	nop
 8012288:	080121c1 	.word	0x080121c1

0801228c <__sfmoreglue>:
 801228c:	b570      	push	{r4, r5, r6, lr}
 801228e:	2268      	movs	r2, #104	; 0x68
 8012290:	1e4d      	subs	r5, r1, #1
 8012292:	4355      	muls	r5, r2
 8012294:	460e      	mov	r6, r1
 8012296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801229a:	f001 fa15 	bl	80136c8 <_malloc_r>
 801229e:	4604      	mov	r4, r0
 80122a0:	b140      	cbz	r0, 80122b4 <__sfmoreglue+0x28>
 80122a2:	2100      	movs	r1, #0
 80122a4:	e9c0 1600 	strd	r1, r6, [r0]
 80122a8:	300c      	adds	r0, #12
 80122aa:	60a0      	str	r0, [r4, #8]
 80122ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80122b0:	f7fd f89a 	bl	800f3e8 <memset>
 80122b4:	4620      	mov	r0, r4
 80122b6:	bd70      	pop	{r4, r5, r6, pc}

080122b8 <__sfp_lock_acquire>:
 80122b8:	4801      	ldr	r0, [pc, #4]	; (80122c0 <__sfp_lock_acquire+0x8>)
 80122ba:	f000 bc26 	b.w	8012b0a <__retarget_lock_acquire_recursive>
 80122be:	bf00      	nop
 80122c0:	2001346b 	.word	0x2001346b

080122c4 <__sfp_lock_release>:
 80122c4:	4801      	ldr	r0, [pc, #4]	; (80122cc <__sfp_lock_release+0x8>)
 80122c6:	f000 bc21 	b.w	8012b0c <__retarget_lock_release_recursive>
 80122ca:	bf00      	nop
 80122cc:	2001346b 	.word	0x2001346b

080122d0 <__sinit_lock_acquire>:
 80122d0:	4801      	ldr	r0, [pc, #4]	; (80122d8 <__sinit_lock_acquire+0x8>)
 80122d2:	f000 bc1a 	b.w	8012b0a <__retarget_lock_acquire_recursive>
 80122d6:	bf00      	nop
 80122d8:	2001346c 	.word	0x2001346c

080122dc <__sinit_lock_release>:
 80122dc:	4801      	ldr	r0, [pc, #4]	; (80122e4 <__sinit_lock_release+0x8>)
 80122de:	f000 bc15 	b.w	8012b0c <__retarget_lock_release_recursive>
 80122e2:	bf00      	nop
 80122e4:	2001346c 	.word	0x2001346c

080122e8 <__sinit>:
 80122e8:	b510      	push	{r4, lr}
 80122ea:	4604      	mov	r4, r0
 80122ec:	f7ff fff0 	bl	80122d0 <__sinit_lock_acquire>
 80122f0:	69a3      	ldr	r3, [r4, #24]
 80122f2:	b11b      	cbz	r3, 80122fc <__sinit+0x14>
 80122f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122f8:	f7ff bff0 	b.w	80122dc <__sinit_lock_release>
 80122fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012300:	6523      	str	r3, [r4, #80]	; 0x50
 8012302:	4b13      	ldr	r3, [pc, #76]	; (8012350 <__sinit+0x68>)
 8012304:	4a13      	ldr	r2, [pc, #76]	; (8012354 <__sinit+0x6c>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	62a2      	str	r2, [r4, #40]	; 0x28
 801230a:	42a3      	cmp	r3, r4
 801230c:	bf04      	itt	eq
 801230e:	2301      	moveq	r3, #1
 8012310:	61a3      	streq	r3, [r4, #24]
 8012312:	4620      	mov	r0, r4
 8012314:	f000 f820 	bl	8012358 <__sfp>
 8012318:	6060      	str	r0, [r4, #4]
 801231a:	4620      	mov	r0, r4
 801231c:	f000 f81c 	bl	8012358 <__sfp>
 8012320:	60a0      	str	r0, [r4, #8]
 8012322:	4620      	mov	r0, r4
 8012324:	f000 f818 	bl	8012358 <__sfp>
 8012328:	2200      	movs	r2, #0
 801232a:	60e0      	str	r0, [r4, #12]
 801232c:	2104      	movs	r1, #4
 801232e:	6860      	ldr	r0, [r4, #4]
 8012330:	f7ff ff82 	bl	8012238 <std>
 8012334:	68a0      	ldr	r0, [r4, #8]
 8012336:	2201      	movs	r2, #1
 8012338:	2109      	movs	r1, #9
 801233a:	f7ff ff7d 	bl	8012238 <std>
 801233e:	68e0      	ldr	r0, [r4, #12]
 8012340:	2202      	movs	r2, #2
 8012342:	2112      	movs	r1, #18
 8012344:	f7ff ff78 	bl	8012238 <std>
 8012348:	2301      	movs	r3, #1
 801234a:	61a3      	str	r3, [r4, #24]
 801234c:	e7d2      	b.n	80122f4 <__sinit+0xc>
 801234e:	bf00      	nop
 8012350:	0802a8c8 	.word	0x0802a8c8
 8012354:	08012281 	.word	0x08012281

08012358 <__sfp>:
 8012358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801235a:	4607      	mov	r7, r0
 801235c:	f7ff ffac 	bl	80122b8 <__sfp_lock_acquire>
 8012360:	4b1e      	ldr	r3, [pc, #120]	; (80123dc <__sfp+0x84>)
 8012362:	681e      	ldr	r6, [r3, #0]
 8012364:	69b3      	ldr	r3, [r6, #24]
 8012366:	b913      	cbnz	r3, 801236e <__sfp+0x16>
 8012368:	4630      	mov	r0, r6
 801236a:	f7ff ffbd 	bl	80122e8 <__sinit>
 801236e:	3648      	adds	r6, #72	; 0x48
 8012370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012374:	3b01      	subs	r3, #1
 8012376:	d503      	bpl.n	8012380 <__sfp+0x28>
 8012378:	6833      	ldr	r3, [r6, #0]
 801237a:	b30b      	cbz	r3, 80123c0 <__sfp+0x68>
 801237c:	6836      	ldr	r6, [r6, #0]
 801237e:	e7f7      	b.n	8012370 <__sfp+0x18>
 8012380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012384:	b9d5      	cbnz	r5, 80123bc <__sfp+0x64>
 8012386:	4b16      	ldr	r3, [pc, #88]	; (80123e0 <__sfp+0x88>)
 8012388:	60e3      	str	r3, [r4, #12]
 801238a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801238e:	6665      	str	r5, [r4, #100]	; 0x64
 8012390:	f000 fbba 	bl	8012b08 <__retarget_lock_init_recursive>
 8012394:	f7ff ff96 	bl	80122c4 <__sfp_lock_release>
 8012398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801239c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80123a0:	6025      	str	r5, [r4, #0]
 80123a2:	61a5      	str	r5, [r4, #24]
 80123a4:	2208      	movs	r2, #8
 80123a6:	4629      	mov	r1, r5
 80123a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80123ac:	f7fd f81c 	bl	800f3e8 <memset>
 80123b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80123b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80123b8:	4620      	mov	r0, r4
 80123ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123bc:	3468      	adds	r4, #104	; 0x68
 80123be:	e7d9      	b.n	8012374 <__sfp+0x1c>
 80123c0:	2104      	movs	r1, #4
 80123c2:	4638      	mov	r0, r7
 80123c4:	f7ff ff62 	bl	801228c <__sfmoreglue>
 80123c8:	4604      	mov	r4, r0
 80123ca:	6030      	str	r0, [r6, #0]
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d1d5      	bne.n	801237c <__sfp+0x24>
 80123d0:	f7ff ff78 	bl	80122c4 <__sfp_lock_release>
 80123d4:	230c      	movs	r3, #12
 80123d6:	603b      	str	r3, [r7, #0]
 80123d8:	e7ee      	b.n	80123b8 <__sfp+0x60>
 80123da:	bf00      	nop
 80123dc:	0802a8c8 	.word	0x0802a8c8
 80123e0:	ffff0001 	.word	0xffff0001

080123e4 <_fwalk_reent>:
 80123e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e8:	4606      	mov	r6, r0
 80123ea:	4688      	mov	r8, r1
 80123ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123f0:	2700      	movs	r7, #0
 80123f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123f6:	f1b9 0901 	subs.w	r9, r9, #1
 80123fa:	d505      	bpl.n	8012408 <_fwalk_reent+0x24>
 80123fc:	6824      	ldr	r4, [r4, #0]
 80123fe:	2c00      	cmp	r4, #0
 8012400:	d1f7      	bne.n	80123f2 <_fwalk_reent+0xe>
 8012402:	4638      	mov	r0, r7
 8012404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012408:	89ab      	ldrh	r3, [r5, #12]
 801240a:	2b01      	cmp	r3, #1
 801240c:	d907      	bls.n	801241e <_fwalk_reent+0x3a>
 801240e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012412:	3301      	adds	r3, #1
 8012414:	d003      	beq.n	801241e <_fwalk_reent+0x3a>
 8012416:	4629      	mov	r1, r5
 8012418:	4630      	mov	r0, r6
 801241a:	47c0      	blx	r8
 801241c:	4307      	orrs	r7, r0
 801241e:	3568      	adds	r5, #104	; 0x68
 8012420:	e7e9      	b.n	80123f6 <_fwalk_reent+0x12>

08012422 <rshift>:
 8012422:	6903      	ldr	r3, [r0, #16]
 8012424:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801242c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012430:	f100 0414 	add.w	r4, r0, #20
 8012434:	dd45      	ble.n	80124c2 <rshift+0xa0>
 8012436:	f011 011f 	ands.w	r1, r1, #31
 801243a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801243e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012442:	d10c      	bne.n	801245e <rshift+0x3c>
 8012444:	f100 0710 	add.w	r7, r0, #16
 8012448:	4629      	mov	r1, r5
 801244a:	42b1      	cmp	r1, r6
 801244c:	d334      	bcc.n	80124b8 <rshift+0x96>
 801244e:	1a9b      	subs	r3, r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	1eea      	subs	r2, r5, #3
 8012454:	4296      	cmp	r6, r2
 8012456:	bf38      	it	cc
 8012458:	2300      	movcc	r3, #0
 801245a:	4423      	add	r3, r4
 801245c:	e015      	b.n	801248a <rshift+0x68>
 801245e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012462:	f1c1 0820 	rsb	r8, r1, #32
 8012466:	40cf      	lsrs	r7, r1
 8012468:	f105 0e04 	add.w	lr, r5, #4
 801246c:	46a1      	mov	r9, r4
 801246e:	4576      	cmp	r6, lr
 8012470:	46f4      	mov	ip, lr
 8012472:	d815      	bhi.n	80124a0 <rshift+0x7e>
 8012474:	1a9a      	subs	r2, r3, r2
 8012476:	0092      	lsls	r2, r2, #2
 8012478:	3a04      	subs	r2, #4
 801247a:	3501      	adds	r5, #1
 801247c:	42ae      	cmp	r6, r5
 801247e:	bf38      	it	cc
 8012480:	2200      	movcc	r2, #0
 8012482:	18a3      	adds	r3, r4, r2
 8012484:	50a7      	str	r7, [r4, r2]
 8012486:	b107      	cbz	r7, 801248a <rshift+0x68>
 8012488:	3304      	adds	r3, #4
 801248a:	1b1a      	subs	r2, r3, r4
 801248c:	42a3      	cmp	r3, r4
 801248e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012492:	bf08      	it	eq
 8012494:	2300      	moveq	r3, #0
 8012496:	6102      	str	r2, [r0, #16]
 8012498:	bf08      	it	eq
 801249a:	6143      	streq	r3, [r0, #20]
 801249c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124a0:	f8dc c000 	ldr.w	ip, [ip]
 80124a4:	fa0c fc08 	lsl.w	ip, ip, r8
 80124a8:	ea4c 0707 	orr.w	r7, ip, r7
 80124ac:	f849 7b04 	str.w	r7, [r9], #4
 80124b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80124b4:	40cf      	lsrs	r7, r1
 80124b6:	e7da      	b.n	801246e <rshift+0x4c>
 80124b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80124bc:	f847 cf04 	str.w	ip, [r7, #4]!
 80124c0:	e7c3      	b.n	801244a <rshift+0x28>
 80124c2:	4623      	mov	r3, r4
 80124c4:	e7e1      	b.n	801248a <rshift+0x68>

080124c6 <__hexdig_fun>:
 80124c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80124ca:	2b09      	cmp	r3, #9
 80124cc:	d802      	bhi.n	80124d4 <__hexdig_fun+0xe>
 80124ce:	3820      	subs	r0, #32
 80124d0:	b2c0      	uxtb	r0, r0
 80124d2:	4770      	bx	lr
 80124d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80124d8:	2b05      	cmp	r3, #5
 80124da:	d801      	bhi.n	80124e0 <__hexdig_fun+0x1a>
 80124dc:	3847      	subs	r0, #71	; 0x47
 80124de:	e7f7      	b.n	80124d0 <__hexdig_fun+0xa>
 80124e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80124e4:	2b05      	cmp	r3, #5
 80124e6:	d801      	bhi.n	80124ec <__hexdig_fun+0x26>
 80124e8:	3827      	subs	r0, #39	; 0x27
 80124ea:	e7f1      	b.n	80124d0 <__hexdig_fun+0xa>
 80124ec:	2000      	movs	r0, #0
 80124ee:	4770      	bx	lr

080124f0 <__gethex>:
 80124f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f4:	ed2d 8b02 	vpush	{d8}
 80124f8:	b089      	sub	sp, #36	; 0x24
 80124fa:	ee08 0a10 	vmov	s16, r0
 80124fe:	9304      	str	r3, [sp, #16]
 8012500:	4bb4      	ldr	r3, [pc, #720]	; (80127d4 <__gethex+0x2e4>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	9301      	str	r3, [sp, #4]
 8012506:	4618      	mov	r0, r3
 8012508:	468b      	mov	fp, r1
 801250a:	4690      	mov	r8, r2
 801250c:	f7ed fe88 	bl	8000220 <strlen>
 8012510:	9b01      	ldr	r3, [sp, #4]
 8012512:	f8db 2000 	ldr.w	r2, [fp]
 8012516:	4403      	add	r3, r0
 8012518:	4682      	mov	sl, r0
 801251a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801251e:	9305      	str	r3, [sp, #20]
 8012520:	1c93      	adds	r3, r2, #2
 8012522:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012526:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801252a:	32fe      	adds	r2, #254	; 0xfe
 801252c:	18d1      	adds	r1, r2, r3
 801252e:	461f      	mov	r7, r3
 8012530:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012534:	9100      	str	r1, [sp, #0]
 8012536:	2830      	cmp	r0, #48	; 0x30
 8012538:	d0f8      	beq.n	801252c <__gethex+0x3c>
 801253a:	f7ff ffc4 	bl	80124c6 <__hexdig_fun>
 801253e:	4604      	mov	r4, r0
 8012540:	2800      	cmp	r0, #0
 8012542:	d13a      	bne.n	80125ba <__gethex+0xca>
 8012544:	9901      	ldr	r1, [sp, #4]
 8012546:	4652      	mov	r2, sl
 8012548:	4638      	mov	r0, r7
 801254a:	f001 fb5c 	bl	8013c06 <strncmp>
 801254e:	4605      	mov	r5, r0
 8012550:	2800      	cmp	r0, #0
 8012552:	d168      	bne.n	8012626 <__gethex+0x136>
 8012554:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012558:	eb07 060a 	add.w	r6, r7, sl
 801255c:	f7ff ffb3 	bl	80124c6 <__hexdig_fun>
 8012560:	2800      	cmp	r0, #0
 8012562:	d062      	beq.n	801262a <__gethex+0x13a>
 8012564:	4633      	mov	r3, r6
 8012566:	7818      	ldrb	r0, [r3, #0]
 8012568:	2830      	cmp	r0, #48	; 0x30
 801256a:	461f      	mov	r7, r3
 801256c:	f103 0301 	add.w	r3, r3, #1
 8012570:	d0f9      	beq.n	8012566 <__gethex+0x76>
 8012572:	f7ff ffa8 	bl	80124c6 <__hexdig_fun>
 8012576:	2301      	movs	r3, #1
 8012578:	fab0 f480 	clz	r4, r0
 801257c:	0964      	lsrs	r4, r4, #5
 801257e:	4635      	mov	r5, r6
 8012580:	9300      	str	r3, [sp, #0]
 8012582:	463a      	mov	r2, r7
 8012584:	4616      	mov	r6, r2
 8012586:	3201      	adds	r2, #1
 8012588:	7830      	ldrb	r0, [r6, #0]
 801258a:	f7ff ff9c 	bl	80124c6 <__hexdig_fun>
 801258e:	2800      	cmp	r0, #0
 8012590:	d1f8      	bne.n	8012584 <__gethex+0x94>
 8012592:	9901      	ldr	r1, [sp, #4]
 8012594:	4652      	mov	r2, sl
 8012596:	4630      	mov	r0, r6
 8012598:	f001 fb35 	bl	8013c06 <strncmp>
 801259c:	b980      	cbnz	r0, 80125c0 <__gethex+0xd0>
 801259e:	b94d      	cbnz	r5, 80125b4 <__gethex+0xc4>
 80125a0:	eb06 050a 	add.w	r5, r6, sl
 80125a4:	462a      	mov	r2, r5
 80125a6:	4616      	mov	r6, r2
 80125a8:	3201      	adds	r2, #1
 80125aa:	7830      	ldrb	r0, [r6, #0]
 80125ac:	f7ff ff8b 	bl	80124c6 <__hexdig_fun>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d1f8      	bne.n	80125a6 <__gethex+0xb6>
 80125b4:	1bad      	subs	r5, r5, r6
 80125b6:	00ad      	lsls	r5, r5, #2
 80125b8:	e004      	b.n	80125c4 <__gethex+0xd4>
 80125ba:	2400      	movs	r4, #0
 80125bc:	4625      	mov	r5, r4
 80125be:	e7e0      	b.n	8012582 <__gethex+0x92>
 80125c0:	2d00      	cmp	r5, #0
 80125c2:	d1f7      	bne.n	80125b4 <__gethex+0xc4>
 80125c4:	7833      	ldrb	r3, [r6, #0]
 80125c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80125ca:	2b50      	cmp	r3, #80	; 0x50
 80125cc:	d13b      	bne.n	8012646 <__gethex+0x156>
 80125ce:	7873      	ldrb	r3, [r6, #1]
 80125d0:	2b2b      	cmp	r3, #43	; 0x2b
 80125d2:	d02c      	beq.n	801262e <__gethex+0x13e>
 80125d4:	2b2d      	cmp	r3, #45	; 0x2d
 80125d6:	d02e      	beq.n	8012636 <__gethex+0x146>
 80125d8:	1c71      	adds	r1, r6, #1
 80125da:	f04f 0900 	mov.w	r9, #0
 80125de:	7808      	ldrb	r0, [r1, #0]
 80125e0:	f7ff ff71 	bl	80124c6 <__hexdig_fun>
 80125e4:	1e43      	subs	r3, r0, #1
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	2b18      	cmp	r3, #24
 80125ea:	d82c      	bhi.n	8012646 <__gethex+0x156>
 80125ec:	f1a0 0210 	sub.w	r2, r0, #16
 80125f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80125f4:	f7ff ff67 	bl	80124c6 <__hexdig_fun>
 80125f8:	1e43      	subs	r3, r0, #1
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	2b18      	cmp	r3, #24
 80125fe:	d91d      	bls.n	801263c <__gethex+0x14c>
 8012600:	f1b9 0f00 	cmp.w	r9, #0
 8012604:	d000      	beq.n	8012608 <__gethex+0x118>
 8012606:	4252      	negs	r2, r2
 8012608:	4415      	add	r5, r2
 801260a:	f8cb 1000 	str.w	r1, [fp]
 801260e:	b1e4      	cbz	r4, 801264a <__gethex+0x15a>
 8012610:	9b00      	ldr	r3, [sp, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	bf14      	ite	ne
 8012616:	2700      	movne	r7, #0
 8012618:	2706      	moveq	r7, #6
 801261a:	4638      	mov	r0, r7
 801261c:	b009      	add	sp, #36	; 0x24
 801261e:	ecbd 8b02 	vpop	{d8}
 8012622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012626:	463e      	mov	r6, r7
 8012628:	4625      	mov	r5, r4
 801262a:	2401      	movs	r4, #1
 801262c:	e7ca      	b.n	80125c4 <__gethex+0xd4>
 801262e:	f04f 0900 	mov.w	r9, #0
 8012632:	1cb1      	adds	r1, r6, #2
 8012634:	e7d3      	b.n	80125de <__gethex+0xee>
 8012636:	f04f 0901 	mov.w	r9, #1
 801263a:	e7fa      	b.n	8012632 <__gethex+0x142>
 801263c:	230a      	movs	r3, #10
 801263e:	fb03 0202 	mla	r2, r3, r2, r0
 8012642:	3a10      	subs	r2, #16
 8012644:	e7d4      	b.n	80125f0 <__gethex+0x100>
 8012646:	4631      	mov	r1, r6
 8012648:	e7df      	b.n	801260a <__gethex+0x11a>
 801264a:	1bf3      	subs	r3, r6, r7
 801264c:	3b01      	subs	r3, #1
 801264e:	4621      	mov	r1, r4
 8012650:	2b07      	cmp	r3, #7
 8012652:	dc0b      	bgt.n	801266c <__gethex+0x17c>
 8012654:	ee18 0a10 	vmov	r0, s16
 8012658:	f000 faf2 	bl	8012c40 <_Balloc>
 801265c:	4604      	mov	r4, r0
 801265e:	b940      	cbnz	r0, 8012672 <__gethex+0x182>
 8012660:	4b5d      	ldr	r3, [pc, #372]	; (80127d8 <__gethex+0x2e8>)
 8012662:	4602      	mov	r2, r0
 8012664:	21de      	movs	r1, #222	; 0xde
 8012666:	485d      	ldr	r0, [pc, #372]	; (80127dc <__gethex+0x2ec>)
 8012668:	f7fc fe56 	bl	800f318 <__assert_func>
 801266c:	3101      	adds	r1, #1
 801266e:	105b      	asrs	r3, r3, #1
 8012670:	e7ee      	b.n	8012650 <__gethex+0x160>
 8012672:	f100 0914 	add.w	r9, r0, #20
 8012676:	f04f 0b00 	mov.w	fp, #0
 801267a:	f1ca 0301 	rsb	r3, sl, #1
 801267e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012682:	f8cd b000 	str.w	fp, [sp]
 8012686:	9306      	str	r3, [sp, #24]
 8012688:	42b7      	cmp	r7, r6
 801268a:	d340      	bcc.n	801270e <__gethex+0x21e>
 801268c:	9802      	ldr	r0, [sp, #8]
 801268e:	9b00      	ldr	r3, [sp, #0]
 8012690:	f840 3b04 	str.w	r3, [r0], #4
 8012694:	eba0 0009 	sub.w	r0, r0, r9
 8012698:	1080      	asrs	r0, r0, #2
 801269a:	0146      	lsls	r6, r0, #5
 801269c:	6120      	str	r0, [r4, #16]
 801269e:	4618      	mov	r0, r3
 80126a0:	f000 fbc0 	bl	8012e24 <__hi0bits>
 80126a4:	1a30      	subs	r0, r6, r0
 80126a6:	f8d8 6000 	ldr.w	r6, [r8]
 80126aa:	42b0      	cmp	r0, r6
 80126ac:	dd63      	ble.n	8012776 <__gethex+0x286>
 80126ae:	1b87      	subs	r7, r0, r6
 80126b0:	4639      	mov	r1, r7
 80126b2:	4620      	mov	r0, r4
 80126b4:	f000 ff64 	bl	8013580 <__any_on>
 80126b8:	4682      	mov	sl, r0
 80126ba:	b1a8      	cbz	r0, 80126e8 <__gethex+0x1f8>
 80126bc:	1e7b      	subs	r3, r7, #1
 80126be:	1159      	asrs	r1, r3, #5
 80126c0:	f003 021f 	and.w	r2, r3, #31
 80126c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80126c8:	f04f 0a01 	mov.w	sl, #1
 80126cc:	fa0a f202 	lsl.w	r2, sl, r2
 80126d0:	420a      	tst	r2, r1
 80126d2:	d009      	beq.n	80126e8 <__gethex+0x1f8>
 80126d4:	4553      	cmp	r3, sl
 80126d6:	dd05      	ble.n	80126e4 <__gethex+0x1f4>
 80126d8:	1eb9      	subs	r1, r7, #2
 80126da:	4620      	mov	r0, r4
 80126dc:	f000 ff50 	bl	8013580 <__any_on>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d145      	bne.n	8012770 <__gethex+0x280>
 80126e4:	f04f 0a02 	mov.w	sl, #2
 80126e8:	4639      	mov	r1, r7
 80126ea:	4620      	mov	r0, r4
 80126ec:	f7ff fe99 	bl	8012422 <rshift>
 80126f0:	443d      	add	r5, r7
 80126f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126f6:	42ab      	cmp	r3, r5
 80126f8:	da4c      	bge.n	8012794 <__gethex+0x2a4>
 80126fa:	ee18 0a10 	vmov	r0, s16
 80126fe:	4621      	mov	r1, r4
 8012700:	f000 fade 	bl	8012cc0 <_Bfree>
 8012704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012706:	2300      	movs	r3, #0
 8012708:	6013      	str	r3, [r2, #0]
 801270a:	27a3      	movs	r7, #163	; 0xa3
 801270c:	e785      	b.n	801261a <__gethex+0x12a>
 801270e:	1e73      	subs	r3, r6, #1
 8012710:	9a05      	ldr	r2, [sp, #20]
 8012712:	9303      	str	r3, [sp, #12]
 8012714:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012718:	4293      	cmp	r3, r2
 801271a:	d019      	beq.n	8012750 <__gethex+0x260>
 801271c:	f1bb 0f20 	cmp.w	fp, #32
 8012720:	d107      	bne.n	8012732 <__gethex+0x242>
 8012722:	9b02      	ldr	r3, [sp, #8]
 8012724:	9a00      	ldr	r2, [sp, #0]
 8012726:	f843 2b04 	str.w	r2, [r3], #4
 801272a:	9302      	str	r3, [sp, #8]
 801272c:	2300      	movs	r3, #0
 801272e:	9300      	str	r3, [sp, #0]
 8012730:	469b      	mov	fp, r3
 8012732:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012736:	f7ff fec6 	bl	80124c6 <__hexdig_fun>
 801273a:	9b00      	ldr	r3, [sp, #0]
 801273c:	f000 000f 	and.w	r0, r0, #15
 8012740:	fa00 f00b 	lsl.w	r0, r0, fp
 8012744:	4303      	orrs	r3, r0
 8012746:	9300      	str	r3, [sp, #0]
 8012748:	f10b 0b04 	add.w	fp, fp, #4
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	e00d      	b.n	801276c <__gethex+0x27c>
 8012750:	9b03      	ldr	r3, [sp, #12]
 8012752:	9a06      	ldr	r2, [sp, #24]
 8012754:	4413      	add	r3, r2
 8012756:	42bb      	cmp	r3, r7
 8012758:	d3e0      	bcc.n	801271c <__gethex+0x22c>
 801275a:	4618      	mov	r0, r3
 801275c:	9901      	ldr	r1, [sp, #4]
 801275e:	9307      	str	r3, [sp, #28]
 8012760:	4652      	mov	r2, sl
 8012762:	f001 fa50 	bl	8013c06 <strncmp>
 8012766:	9b07      	ldr	r3, [sp, #28]
 8012768:	2800      	cmp	r0, #0
 801276a:	d1d7      	bne.n	801271c <__gethex+0x22c>
 801276c:	461e      	mov	r6, r3
 801276e:	e78b      	b.n	8012688 <__gethex+0x198>
 8012770:	f04f 0a03 	mov.w	sl, #3
 8012774:	e7b8      	b.n	80126e8 <__gethex+0x1f8>
 8012776:	da0a      	bge.n	801278e <__gethex+0x29e>
 8012778:	1a37      	subs	r7, r6, r0
 801277a:	4621      	mov	r1, r4
 801277c:	ee18 0a10 	vmov	r0, s16
 8012780:	463a      	mov	r2, r7
 8012782:	f000 fcb9 	bl	80130f8 <__lshift>
 8012786:	1bed      	subs	r5, r5, r7
 8012788:	4604      	mov	r4, r0
 801278a:	f100 0914 	add.w	r9, r0, #20
 801278e:	f04f 0a00 	mov.w	sl, #0
 8012792:	e7ae      	b.n	80126f2 <__gethex+0x202>
 8012794:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012798:	42a8      	cmp	r0, r5
 801279a:	dd72      	ble.n	8012882 <__gethex+0x392>
 801279c:	1b45      	subs	r5, r0, r5
 801279e:	42ae      	cmp	r6, r5
 80127a0:	dc36      	bgt.n	8012810 <__gethex+0x320>
 80127a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80127a6:	2b02      	cmp	r3, #2
 80127a8:	d02a      	beq.n	8012800 <__gethex+0x310>
 80127aa:	2b03      	cmp	r3, #3
 80127ac:	d02c      	beq.n	8012808 <__gethex+0x318>
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d11c      	bne.n	80127ec <__gethex+0x2fc>
 80127b2:	42ae      	cmp	r6, r5
 80127b4:	d11a      	bne.n	80127ec <__gethex+0x2fc>
 80127b6:	2e01      	cmp	r6, #1
 80127b8:	d112      	bne.n	80127e0 <__gethex+0x2f0>
 80127ba:	9a04      	ldr	r2, [sp, #16]
 80127bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80127c0:	6013      	str	r3, [r2, #0]
 80127c2:	2301      	movs	r3, #1
 80127c4:	6123      	str	r3, [r4, #16]
 80127c6:	f8c9 3000 	str.w	r3, [r9]
 80127ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127cc:	2762      	movs	r7, #98	; 0x62
 80127ce:	601c      	str	r4, [r3, #0]
 80127d0:	e723      	b.n	801261a <__gethex+0x12a>
 80127d2:	bf00      	nop
 80127d4:	0802ac04 	.word	0x0802ac04
 80127d8:	0802ab0b 	.word	0x0802ab0b
 80127dc:	0802ab7c 	.word	0x0802ab7c
 80127e0:	1e71      	subs	r1, r6, #1
 80127e2:	4620      	mov	r0, r4
 80127e4:	f000 fecc 	bl	8013580 <__any_on>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d1e6      	bne.n	80127ba <__gethex+0x2ca>
 80127ec:	ee18 0a10 	vmov	r0, s16
 80127f0:	4621      	mov	r1, r4
 80127f2:	f000 fa65 	bl	8012cc0 <_Bfree>
 80127f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80127f8:	2300      	movs	r3, #0
 80127fa:	6013      	str	r3, [r2, #0]
 80127fc:	2750      	movs	r7, #80	; 0x50
 80127fe:	e70c      	b.n	801261a <__gethex+0x12a>
 8012800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1f2      	bne.n	80127ec <__gethex+0x2fc>
 8012806:	e7d8      	b.n	80127ba <__gethex+0x2ca>
 8012808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801280a:	2b00      	cmp	r3, #0
 801280c:	d1d5      	bne.n	80127ba <__gethex+0x2ca>
 801280e:	e7ed      	b.n	80127ec <__gethex+0x2fc>
 8012810:	1e6f      	subs	r7, r5, #1
 8012812:	f1ba 0f00 	cmp.w	sl, #0
 8012816:	d131      	bne.n	801287c <__gethex+0x38c>
 8012818:	b127      	cbz	r7, 8012824 <__gethex+0x334>
 801281a:	4639      	mov	r1, r7
 801281c:	4620      	mov	r0, r4
 801281e:	f000 feaf 	bl	8013580 <__any_on>
 8012822:	4682      	mov	sl, r0
 8012824:	117b      	asrs	r3, r7, #5
 8012826:	2101      	movs	r1, #1
 8012828:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801282c:	f007 071f 	and.w	r7, r7, #31
 8012830:	fa01 f707 	lsl.w	r7, r1, r7
 8012834:	421f      	tst	r7, r3
 8012836:	4629      	mov	r1, r5
 8012838:	4620      	mov	r0, r4
 801283a:	bf18      	it	ne
 801283c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012840:	1b76      	subs	r6, r6, r5
 8012842:	f7ff fdee 	bl	8012422 <rshift>
 8012846:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801284a:	2702      	movs	r7, #2
 801284c:	f1ba 0f00 	cmp.w	sl, #0
 8012850:	d048      	beq.n	80128e4 <__gethex+0x3f4>
 8012852:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012856:	2b02      	cmp	r3, #2
 8012858:	d015      	beq.n	8012886 <__gethex+0x396>
 801285a:	2b03      	cmp	r3, #3
 801285c:	d017      	beq.n	801288e <__gethex+0x39e>
 801285e:	2b01      	cmp	r3, #1
 8012860:	d109      	bne.n	8012876 <__gethex+0x386>
 8012862:	f01a 0f02 	tst.w	sl, #2
 8012866:	d006      	beq.n	8012876 <__gethex+0x386>
 8012868:	f8d9 0000 	ldr.w	r0, [r9]
 801286c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012870:	f01a 0f01 	tst.w	sl, #1
 8012874:	d10e      	bne.n	8012894 <__gethex+0x3a4>
 8012876:	f047 0710 	orr.w	r7, r7, #16
 801287a:	e033      	b.n	80128e4 <__gethex+0x3f4>
 801287c:	f04f 0a01 	mov.w	sl, #1
 8012880:	e7d0      	b.n	8012824 <__gethex+0x334>
 8012882:	2701      	movs	r7, #1
 8012884:	e7e2      	b.n	801284c <__gethex+0x35c>
 8012886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012888:	f1c3 0301 	rsb	r3, r3, #1
 801288c:	9315      	str	r3, [sp, #84]	; 0x54
 801288e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012890:	2b00      	cmp	r3, #0
 8012892:	d0f0      	beq.n	8012876 <__gethex+0x386>
 8012894:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012898:	f104 0314 	add.w	r3, r4, #20
 801289c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80128a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80128a4:	f04f 0c00 	mov.w	ip, #0
 80128a8:	4618      	mov	r0, r3
 80128aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80128b2:	d01c      	beq.n	80128ee <__gethex+0x3fe>
 80128b4:	3201      	adds	r2, #1
 80128b6:	6002      	str	r2, [r0, #0]
 80128b8:	2f02      	cmp	r7, #2
 80128ba:	f104 0314 	add.w	r3, r4, #20
 80128be:	d13f      	bne.n	8012940 <__gethex+0x450>
 80128c0:	f8d8 2000 	ldr.w	r2, [r8]
 80128c4:	3a01      	subs	r2, #1
 80128c6:	42b2      	cmp	r2, r6
 80128c8:	d10a      	bne.n	80128e0 <__gethex+0x3f0>
 80128ca:	1171      	asrs	r1, r6, #5
 80128cc:	2201      	movs	r2, #1
 80128ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128d2:	f006 061f 	and.w	r6, r6, #31
 80128d6:	fa02 f606 	lsl.w	r6, r2, r6
 80128da:	421e      	tst	r6, r3
 80128dc:	bf18      	it	ne
 80128de:	4617      	movne	r7, r2
 80128e0:	f047 0720 	orr.w	r7, r7, #32
 80128e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80128e6:	601c      	str	r4, [r3, #0]
 80128e8:	9b04      	ldr	r3, [sp, #16]
 80128ea:	601d      	str	r5, [r3, #0]
 80128ec:	e695      	b.n	801261a <__gethex+0x12a>
 80128ee:	4299      	cmp	r1, r3
 80128f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80128f4:	d8d8      	bhi.n	80128a8 <__gethex+0x3b8>
 80128f6:	68a3      	ldr	r3, [r4, #8]
 80128f8:	459b      	cmp	fp, r3
 80128fa:	db19      	blt.n	8012930 <__gethex+0x440>
 80128fc:	6861      	ldr	r1, [r4, #4]
 80128fe:	ee18 0a10 	vmov	r0, s16
 8012902:	3101      	adds	r1, #1
 8012904:	f000 f99c 	bl	8012c40 <_Balloc>
 8012908:	4681      	mov	r9, r0
 801290a:	b918      	cbnz	r0, 8012914 <__gethex+0x424>
 801290c:	4b1a      	ldr	r3, [pc, #104]	; (8012978 <__gethex+0x488>)
 801290e:	4602      	mov	r2, r0
 8012910:	2184      	movs	r1, #132	; 0x84
 8012912:	e6a8      	b.n	8012666 <__gethex+0x176>
 8012914:	6922      	ldr	r2, [r4, #16]
 8012916:	3202      	adds	r2, #2
 8012918:	f104 010c 	add.w	r1, r4, #12
 801291c:	0092      	lsls	r2, r2, #2
 801291e:	300c      	adds	r0, #12
 8012920:	f7fc fd54 	bl	800f3cc <memcpy>
 8012924:	4621      	mov	r1, r4
 8012926:	ee18 0a10 	vmov	r0, s16
 801292a:	f000 f9c9 	bl	8012cc0 <_Bfree>
 801292e:	464c      	mov	r4, r9
 8012930:	6923      	ldr	r3, [r4, #16]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012938:	6122      	str	r2, [r4, #16]
 801293a:	2201      	movs	r2, #1
 801293c:	615a      	str	r2, [r3, #20]
 801293e:	e7bb      	b.n	80128b8 <__gethex+0x3c8>
 8012940:	6922      	ldr	r2, [r4, #16]
 8012942:	455a      	cmp	r2, fp
 8012944:	dd0b      	ble.n	801295e <__gethex+0x46e>
 8012946:	2101      	movs	r1, #1
 8012948:	4620      	mov	r0, r4
 801294a:	f7ff fd6a 	bl	8012422 <rshift>
 801294e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012952:	3501      	adds	r5, #1
 8012954:	42ab      	cmp	r3, r5
 8012956:	f6ff aed0 	blt.w	80126fa <__gethex+0x20a>
 801295a:	2701      	movs	r7, #1
 801295c:	e7c0      	b.n	80128e0 <__gethex+0x3f0>
 801295e:	f016 061f 	ands.w	r6, r6, #31
 8012962:	d0fa      	beq.n	801295a <__gethex+0x46a>
 8012964:	4453      	add	r3, sl
 8012966:	f1c6 0620 	rsb	r6, r6, #32
 801296a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801296e:	f000 fa59 	bl	8012e24 <__hi0bits>
 8012972:	42b0      	cmp	r0, r6
 8012974:	dbe7      	blt.n	8012946 <__gethex+0x456>
 8012976:	e7f0      	b.n	801295a <__gethex+0x46a>
 8012978:	0802ab0b 	.word	0x0802ab0b

0801297c <L_shift>:
 801297c:	f1c2 0208 	rsb	r2, r2, #8
 8012980:	0092      	lsls	r2, r2, #2
 8012982:	b570      	push	{r4, r5, r6, lr}
 8012984:	f1c2 0620 	rsb	r6, r2, #32
 8012988:	6843      	ldr	r3, [r0, #4]
 801298a:	6804      	ldr	r4, [r0, #0]
 801298c:	fa03 f506 	lsl.w	r5, r3, r6
 8012990:	432c      	orrs	r4, r5
 8012992:	40d3      	lsrs	r3, r2
 8012994:	6004      	str	r4, [r0, #0]
 8012996:	f840 3f04 	str.w	r3, [r0, #4]!
 801299a:	4288      	cmp	r0, r1
 801299c:	d3f4      	bcc.n	8012988 <L_shift+0xc>
 801299e:	bd70      	pop	{r4, r5, r6, pc}

080129a0 <__match>:
 80129a0:	b530      	push	{r4, r5, lr}
 80129a2:	6803      	ldr	r3, [r0, #0]
 80129a4:	3301      	adds	r3, #1
 80129a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129aa:	b914      	cbnz	r4, 80129b2 <__match+0x12>
 80129ac:	6003      	str	r3, [r0, #0]
 80129ae:	2001      	movs	r0, #1
 80129b0:	bd30      	pop	{r4, r5, pc}
 80129b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80129ba:	2d19      	cmp	r5, #25
 80129bc:	bf98      	it	ls
 80129be:	3220      	addls	r2, #32
 80129c0:	42a2      	cmp	r2, r4
 80129c2:	d0f0      	beq.n	80129a6 <__match+0x6>
 80129c4:	2000      	movs	r0, #0
 80129c6:	e7f3      	b.n	80129b0 <__match+0x10>

080129c8 <__hexnan>:
 80129c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129cc:	680b      	ldr	r3, [r1, #0]
 80129ce:	115e      	asrs	r6, r3, #5
 80129d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80129d4:	f013 031f 	ands.w	r3, r3, #31
 80129d8:	b087      	sub	sp, #28
 80129da:	bf18      	it	ne
 80129dc:	3604      	addne	r6, #4
 80129de:	2500      	movs	r5, #0
 80129e0:	1f37      	subs	r7, r6, #4
 80129e2:	4690      	mov	r8, r2
 80129e4:	6802      	ldr	r2, [r0, #0]
 80129e6:	9301      	str	r3, [sp, #4]
 80129e8:	4682      	mov	sl, r0
 80129ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80129ee:	46b9      	mov	r9, r7
 80129f0:	463c      	mov	r4, r7
 80129f2:	9502      	str	r5, [sp, #8]
 80129f4:	46ab      	mov	fp, r5
 80129f6:	7851      	ldrb	r1, [r2, #1]
 80129f8:	1c53      	adds	r3, r2, #1
 80129fa:	9303      	str	r3, [sp, #12]
 80129fc:	b341      	cbz	r1, 8012a50 <__hexnan+0x88>
 80129fe:	4608      	mov	r0, r1
 8012a00:	9205      	str	r2, [sp, #20]
 8012a02:	9104      	str	r1, [sp, #16]
 8012a04:	f7ff fd5f 	bl	80124c6 <__hexdig_fun>
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d14f      	bne.n	8012aac <__hexnan+0xe4>
 8012a0c:	9904      	ldr	r1, [sp, #16]
 8012a0e:	9a05      	ldr	r2, [sp, #20]
 8012a10:	2920      	cmp	r1, #32
 8012a12:	d818      	bhi.n	8012a46 <__hexnan+0x7e>
 8012a14:	9b02      	ldr	r3, [sp, #8]
 8012a16:	459b      	cmp	fp, r3
 8012a18:	dd13      	ble.n	8012a42 <__hexnan+0x7a>
 8012a1a:	454c      	cmp	r4, r9
 8012a1c:	d206      	bcs.n	8012a2c <__hexnan+0x64>
 8012a1e:	2d07      	cmp	r5, #7
 8012a20:	dc04      	bgt.n	8012a2c <__hexnan+0x64>
 8012a22:	462a      	mov	r2, r5
 8012a24:	4649      	mov	r1, r9
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7ff ffa8 	bl	801297c <L_shift>
 8012a2c:	4544      	cmp	r4, r8
 8012a2e:	d950      	bls.n	8012ad2 <__hexnan+0x10a>
 8012a30:	2300      	movs	r3, #0
 8012a32:	f1a4 0904 	sub.w	r9, r4, #4
 8012a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a3a:	f8cd b008 	str.w	fp, [sp, #8]
 8012a3e:	464c      	mov	r4, r9
 8012a40:	461d      	mov	r5, r3
 8012a42:	9a03      	ldr	r2, [sp, #12]
 8012a44:	e7d7      	b.n	80129f6 <__hexnan+0x2e>
 8012a46:	2929      	cmp	r1, #41	; 0x29
 8012a48:	d156      	bne.n	8012af8 <__hexnan+0x130>
 8012a4a:	3202      	adds	r2, #2
 8012a4c:	f8ca 2000 	str.w	r2, [sl]
 8012a50:	f1bb 0f00 	cmp.w	fp, #0
 8012a54:	d050      	beq.n	8012af8 <__hexnan+0x130>
 8012a56:	454c      	cmp	r4, r9
 8012a58:	d206      	bcs.n	8012a68 <__hexnan+0xa0>
 8012a5a:	2d07      	cmp	r5, #7
 8012a5c:	dc04      	bgt.n	8012a68 <__hexnan+0xa0>
 8012a5e:	462a      	mov	r2, r5
 8012a60:	4649      	mov	r1, r9
 8012a62:	4620      	mov	r0, r4
 8012a64:	f7ff ff8a 	bl	801297c <L_shift>
 8012a68:	4544      	cmp	r4, r8
 8012a6a:	d934      	bls.n	8012ad6 <__hexnan+0x10e>
 8012a6c:	f1a8 0204 	sub.w	r2, r8, #4
 8012a70:	4623      	mov	r3, r4
 8012a72:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a76:	f842 1f04 	str.w	r1, [r2, #4]!
 8012a7a:	429f      	cmp	r7, r3
 8012a7c:	d2f9      	bcs.n	8012a72 <__hexnan+0xaa>
 8012a7e:	1b3b      	subs	r3, r7, r4
 8012a80:	f023 0303 	bic.w	r3, r3, #3
 8012a84:	3304      	adds	r3, #4
 8012a86:	3401      	adds	r4, #1
 8012a88:	3e03      	subs	r6, #3
 8012a8a:	42b4      	cmp	r4, r6
 8012a8c:	bf88      	it	hi
 8012a8e:	2304      	movhi	r3, #4
 8012a90:	4443      	add	r3, r8
 8012a92:	2200      	movs	r2, #0
 8012a94:	f843 2b04 	str.w	r2, [r3], #4
 8012a98:	429f      	cmp	r7, r3
 8012a9a:	d2fb      	bcs.n	8012a94 <__hexnan+0xcc>
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	b91b      	cbnz	r3, 8012aa8 <__hexnan+0xe0>
 8012aa0:	4547      	cmp	r7, r8
 8012aa2:	d127      	bne.n	8012af4 <__hexnan+0x12c>
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	603b      	str	r3, [r7, #0]
 8012aa8:	2005      	movs	r0, #5
 8012aaa:	e026      	b.n	8012afa <__hexnan+0x132>
 8012aac:	3501      	adds	r5, #1
 8012aae:	2d08      	cmp	r5, #8
 8012ab0:	f10b 0b01 	add.w	fp, fp, #1
 8012ab4:	dd06      	ble.n	8012ac4 <__hexnan+0xfc>
 8012ab6:	4544      	cmp	r4, r8
 8012ab8:	d9c3      	bls.n	8012a42 <__hexnan+0x7a>
 8012aba:	2300      	movs	r3, #0
 8012abc:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ac0:	2501      	movs	r5, #1
 8012ac2:	3c04      	subs	r4, #4
 8012ac4:	6822      	ldr	r2, [r4, #0]
 8012ac6:	f000 000f 	and.w	r0, r0, #15
 8012aca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012ace:	6022      	str	r2, [r4, #0]
 8012ad0:	e7b7      	b.n	8012a42 <__hexnan+0x7a>
 8012ad2:	2508      	movs	r5, #8
 8012ad4:	e7b5      	b.n	8012a42 <__hexnan+0x7a>
 8012ad6:	9b01      	ldr	r3, [sp, #4]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d0df      	beq.n	8012a9c <__hexnan+0xd4>
 8012adc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae0:	f1c3 0320 	rsb	r3, r3, #32
 8012ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8012ae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012aec:	401a      	ands	r2, r3
 8012aee:	f846 2c04 	str.w	r2, [r6, #-4]
 8012af2:	e7d3      	b.n	8012a9c <__hexnan+0xd4>
 8012af4:	3f04      	subs	r7, #4
 8012af6:	e7d1      	b.n	8012a9c <__hexnan+0xd4>
 8012af8:	2004      	movs	r0, #4
 8012afa:	b007      	add	sp, #28
 8012afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b00 <_localeconv_r>:
 8012b00:	4800      	ldr	r0, [pc, #0]	; (8012b04 <_localeconv_r+0x4>)
 8012b02:	4770      	bx	lr
 8012b04:	20000234 	.word	0x20000234

08012b08 <__retarget_lock_init_recursive>:
 8012b08:	4770      	bx	lr

08012b0a <__retarget_lock_acquire_recursive>:
 8012b0a:	4770      	bx	lr

08012b0c <__retarget_lock_release_recursive>:
 8012b0c:	4770      	bx	lr

08012b0e <__swhatbuf_r>:
 8012b0e:	b570      	push	{r4, r5, r6, lr}
 8012b10:	460e      	mov	r6, r1
 8012b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b16:	2900      	cmp	r1, #0
 8012b18:	b096      	sub	sp, #88	; 0x58
 8012b1a:	4614      	mov	r4, r2
 8012b1c:	461d      	mov	r5, r3
 8012b1e:	da08      	bge.n	8012b32 <__swhatbuf_r+0x24>
 8012b20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012b24:	2200      	movs	r2, #0
 8012b26:	602a      	str	r2, [r5, #0]
 8012b28:	061a      	lsls	r2, r3, #24
 8012b2a:	d410      	bmi.n	8012b4e <__swhatbuf_r+0x40>
 8012b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b30:	e00e      	b.n	8012b50 <__swhatbuf_r+0x42>
 8012b32:	466a      	mov	r2, sp
 8012b34:	f001 f8aa 	bl	8013c8c <_fstat_r>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	dbf1      	blt.n	8012b20 <__swhatbuf_r+0x12>
 8012b3c:	9a01      	ldr	r2, [sp, #4]
 8012b3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b46:	425a      	negs	r2, r3
 8012b48:	415a      	adcs	r2, r3
 8012b4a:	602a      	str	r2, [r5, #0]
 8012b4c:	e7ee      	b.n	8012b2c <__swhatbuf_r+0x1e>
 8012b4e:	2340      	movs	r3, #64	; 0x40
 8012b50:	2000      	movs	r0, #0
 8012b52:	6023      	str	r3, [r4, #0]
 8012b54:	b016      	add	sp, #88	; 0x58
 8012b56:	bd70      	pop	{r4, r5, r6, pc}

08012b58 <__smakebuf_r>:
 8012b58:	898b      	ldrh	r3, [r1, #12]
 8012b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b5c:	079d      	lsls	r5, r3, #30
 8012b5e:	4606      	mov	r6, r0
 8012b60:	460c      	mov	r4, r1
 8012b62:	d507      	bpl.n	8012b74 <__smakebuf_r+0x1c>
 8012b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b68:	6023      	str	r3, [r4, #0]
 8012b6a:	6123      	str	r3, [r4, #16]
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	6163      	str	r3, [r4, #20]
 8012b70:	b002      	add	sp, #8
 8012b72:	bd70      	pop	{r4, r5, r6, pc}
 8012b74:	ab01      	add	r3, sp, #4
 8012b76:	466a      	mov	r2, sp
 8012b78:	f7ff ffc9 	bl	8012b0e <__swhatbuf_r>
 8012b7c:	9900      	ldr	r1, [sp, #0]
 8012b7e:	4605      	mov	r5, r0
 8012b80:	4630      	mov	r0, r6
 8012b82:	f000 fda1 	bl	80136c8 <_malloc_r>
 8012b86:	b948      	cbnz	r0, 8012b9c <__smakebuf_r+0x44>
 8012b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b8c:	059a      	lsls	r2, r3, #22
 8012b8e:	d4ef      	bmi.n	8012b70 <__smakebuf_r+0x18>
 8012b90:	f023 0303 	bic.w	r3, r3, #3
 8012b94:	f043 0302 	orr.w	r3, r3, #2
 8012b98:	81a3      	strh	r3, [r4, #12]
 8012b9a:	e7e3      	b.n	8012b64 <__smakebuf_r+0xc>
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	; (8012bd4 <__smakebuf_r+0x7c>)
 8012b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ba0:	89a3      	ldrh	r3, [r4, #12]
 8012ba2:	6020      	str	r0, [r4, #0]
 8012ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ba8:	81a3      	strh	r3, [r4, #12]
 8012baa:	9b00      	ldr	r3, [sp, #0]
 8012bac:	6163      	str	r3, [r4, #20]
 8012bae:	9b01      	ldr	r3, [sp, #4]
 8012bb0:	6120      	str	r0, [r4, #16]
 8012bb2:	b15b      	cbz	r3, 8012bcc <__smakebuf_r+0x74>
 8012bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f001 f879 	bl	8013cb0 <_isatty_r>
 8012bbe:	b128      	cbz	r0, 8012bcc <__smakebuf_r+0x74>
 8012bc0:	89a3      	ldrh	r3, [r4, #12]
 8012bc2:	f023 0303 	bic.w	r3, r3, #3
 8012bc6:	f043 0301 	orr.w	r3, r3, #1
 8012bca:	81a3      	strh	r3, [r4, #12]
 8012bcc:	89a0      	ldrh	r0, [r4, #12]
 8012bce:	4305      	orrs	r5, r0
 8012bd0:	81a5      	strh	r5, [r4, #12]
 8012bd2:	e7cd      	b.n	8012b70 <__smakebuf_r+0x18>
 8012bd4:	08012281 	.word	0x08012281

08012bd8 <malloc>:
 8012bd8:	4b02      	ldr	r3, [pc, #8]	; (8012be4 <malloc+0xc>)
 8012bda:	4601      	mov	r1, r0
 8012bdc:	6818      	ldr	r0, [r3, #0]
 8012bde:	f000 bd73 	b.w	80136c8 <_malloc_r>
 8012be2:	bf00      	nop
 8012be4:	200000dc 	.word	0x200000dc

08012be8 <__ascii_mbtowc>:
 8012be8:	b082      	sub	sp, #8
 8012bea:	b901      	cbnz	r1, 8012bee <__ascii_mbtowc+0x6>
 8012bec:	a901      	add	r1, sp, #4
 8012bee:	b142      	cbz	r2, 8012c02 <__ascii_mbtowc+0x1a>
 8012bf0:	b14b      	cbz	r3, 8012c06 <__ascii_mbtowc+0x1e>
 8012bf2:	7813      	ldrb	r3, [r2, #0]
 8012bf4:	600b      	str	r3, [r1, #0]
 8012bf6:	7812      	ldrb	r2, [r2, #0]
 8012bf8:	1e10      	subs	r0, r2, #0
 8012bfa:	bf18      	it	ne
 8012bfc:	2001      	movne	r0, #1
 8012bfe:	b002      	add	sp, #8
 8012c00:	4770      	bx	lr
 8012c02:	4610      	mov	r0, r2
 8012c04:	e7fb      	b.n	8012bfe <__ascii_mbtowc+0x16>
 8012c06:	f06f 0001 	mvn.w	r0, #1
 8012c0a:	e7f8      	b.n	8012bfe <__ascii_mbtowc+0x16>

08012c0c <memmove>:
 8012c0c:	4288      	cmp	r0, r1
 8012c0e:	b510      	push	{r4, lr}
 8012c10:	eb01 0402 	add.w	r4, r1, r2
 8012c14:	d902      	bls.n	8012c1c <memmove+0x10>
 8012c16:	4284      	cmp	r4, r0
 8012c18:	4623      	mov	r3, r4
 8012c1a:	d807      	bhi.n	8012c2c <memmove+0x20>
 8012c1c:	1e43      	subs	r3, r0, #1
 8012c1e:	42a1      	cmp	r1, r4
 8012c20:	d008      	beq.n	8012c34 <memmove+0x28>
 8012c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c2a:	e7f8      	b.n	8012c1e <memmove+0x12>
 8012c2c:	4402      	add	r2, r0
 8012c2e:	4601      	mov	r1, r0
 8012c30:	428a      	cmp	r2, r1
 8012c32:	d100      	bne.n	8012c36 <memmove+0x2a>
 8012c34:	bd10      	pop	{r4, pc}
 8012c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c3e:	e7f7      	b.n	8012c30 <memmove+0x24>

08012c40 <_Balloc>:
 8012c40:	b570      	push	{r4, r5, r6, lr}
 8012c42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c44:	4604      	mov	r4, r0
 8012c46:	460d      	mov	r5, r1
 8012c48:	b976      	cbnz	r6, 8012c68 <_Balloc+0x28>
 8012c4a:	2010      	movs	r0, #16
 8012c4c:	f7ff ffc4 	bl	8012bd8 <malloc>
 8012c50:	4602      	mov	r2, r0
 8012c52:	6260      	str	r0, [r4, #36]	; 0x24
 8012c54:	b920      	cbnz	r0, 8012c60 <_Balloc+0x20>
 8012c56:	4b18      	ldr	r3, [pc, #96]	; (8012cb8 <_Balloc+0x78>)
 8012c58:	4818      	ldr	r0, [pc, #96]	; (8012cbc <_Balloc+0x7c>)
 8012c5a:	2166      	movs	r1, #102	; 0x66
 8012c5c:	f7fc fb5c 	bl	800f318 <__assert_func>
 8012c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c64:	6006      	str	r6, [r0, #0]
 8012c66:	60c6      	str	r6, [r0, #12]
 8012c68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c6a:	68f3      	ldr	r3, [r6, #12]
 8012c6c:	b183      	cbz	r3, 8012c90 <_Balloc+0x50>
 8012c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c76:	b9b8      	cbnz	r0, 8012ca8 <_Balloc+0x68>
 8012c78:	2101      	movs	r1, #1
 8012c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8012c7e:	1d72      	adds	r2, r6, #5
 8012c80:	0092      	lsls	r2, r2, #2
 8012c82:	4620      	mov	r0, r4
 8012c84:	f000 fc9d 	bl	80135c2 <_calloc_r>
 8012c88:	b160      	cbz	r0, 8012ca4 <_Balloc+0x64>
 8012c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c8e:	e00e      	b.n	8012cae <_Balloc+0x6e>
 8012c90:	2221      	movs	r2, #33	; 0x21
 8012c92:	2104      	movs	r1, #4
 8012c94:	4620      	mov	r0, r4
 8012c96:	f000 fc94 	bl	80135c2 <_calloc_r>
 8012c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c9c:	60f0      	str	r0, [r6, #12]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1e4      	bne.n	8012c6e <_Balloc+0x2e>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	bd70      	pop	{r4, r5, r6, pc}
 8012ca8:	6802      	ldr	r2, [r0, #0]
 8012caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cb4:	e7f7      	b.n	8012ca6 <_Balloc+0x66>
 8012cb6:	bf00      	nop
 8012cb8:	0802aa76 	.word	0x0802aa76
 8012cbc:	0802ac18 	.word	0x0802ac18

08012cc0 <_Bfree>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	b976      	cbnz	r6, 8012ce8 <_Bfree+0x28>
 8012cca:	2010      	movs	r0, #16
 8012ccc:	f7ff ff84 	bl	8012bd8 <malloc>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	6268      	str	r0, [r5, #36]	; 0x24
 8012cd4:	b920      	cbnz	r0, 8012ce0 <_Bfree+0x20>
 8012cd6:	4b09      	ldr	r3, [pc, #36]	; (8012cfc <_Bfree+0x3c>)
 8012cd8:	4809      	ldr	r0, [pc, #36]	; (8012d00 <_Bfree+0x40>)
 8012cda:	218a      	movs	r1, #138	; 0x8a
 8012cdc:	f7fc fb1c 	bl	800f318 <__assert_func>
 8012ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ce4:	6006      	str	r6, [r0, #0]
 8012ce6:	60c6      	str	r6, [r0, #12]
 8012ce8:	b13c      	cbz	r4, 8012cfa <_Bfree+0x3a>
 8012cea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012cec:	6862      	ldr	r2, [r4, #4]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012cf4:	6021      	str	r1, [r4, #0]
 8012cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	0802aa76 	.word	0x0802aa76
 8012d00:	0802ac18 	.word	0x0802ac18

08012d04 <__multadd>:
 8012d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d08:	690d      	ldr	r5, [r1, #16]
 8012d0a:	4607      	mov	r7, r0
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	461e      	mov	r6, r3
 8012d10:	f101 0c14 	add.w	ip, r1, #20
 8012d14:	2000      	movs	r0, #0
 8012d16:	f8dc 3000 	ldr.w	r3, [ip]
 8012d1a:	b299      	uxth	r1, r3
 8012d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8012d20:	0c1e      	lsrs	r6, r3, #16
 8012d22:	0c0b      	lsrs	r3, r1, #16
 8012d24:	fb02 3306 	mla	r3, r2, r6, r3
 8012d28:	b289      	uxth	r1, r1
 8012d2a:	3001      	adds	r0, #1
 8012d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d30:	4285      	cmp	r5, r0
 8012d32:	f84c 1b04 	str.w	r1, [ip], #4
 8012d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d3a:	dcec      	bgt.n	8012d16 <__multadd+0x12>
 8012d3c:	b30e      	cbz	r6, 8012d82 <__multadd+0x7e>
 8012d3e:	68a3      	ldr	r3, [r4, #8]
 8012d40:	42ab      	cmp	r3, r5
 8012d42:	dc19      	bgt.n	8012d78 <__multadd+0x74>
 8012d44:	6861      	ldr	r1, [r4, #4]
 8012d46:	4638      	mov	r0, r7
 8012d48:	3101      	adds	r1, #1
 8012d4a:	f7ff ff79 	bl	8012c40 <_Balloc>
 8012d4e:	4680      	mov	r8, r0
 8012d50:	b928      	cbnz	r0, 8012d5e <__multadd+0x5a>
 8012d52:	4602      	mov	r2, r0
 8012d54:	4b0c      	ldr	r3, [pc, #48]	; (8012d88 <__multadd+0x84>)
 8012d56:	480d      	ldr	r0, [pc, #52]	; (8012d8c <__multadd+0x88>)
 8012d58:	21b5      	movs	r1, #181	; 0xb5
 8012d5a:	f7fc fadd 	bl	800f318 <__assert_func>
 8012d5e:	6922      	ldr	r2, [r4, #16]
 8012d60:	3202      	adds	r2, #2
 8012d62:	f104 010c 	add.w	r1, r4, #12
 8012d66:	0092      	lsls	r2, r2, #2
 8012d68:	300c      	adds	r0, #12
 8012d6a:	f7fc fb2f 	bl	800f3cc <memcpy>
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4638      	mov	r0, r7
 8012d72:	f7ff ffa5 	bl	8012cc0 <_Bfree>
 8012d76:	4644      	mov	r4, r8
 8012d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d7c:	3501      	adds	r5, #1
 8012d7e:	615e      	str	r6, [r3, #20]
 8012d80:	6125      	str	r5, [r4, #16]
 8012d82:	4620      	mov	r0, r4
 8012d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d88:	0802ab0b 	.word	0x0802ab0b
 8012d8c:	0802ac18 	.word	0x0802ac18

08012d90 <__s2b>:
 8012d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d94:	460c      	mov	r4, r1
 8012d96:	4615      	mov	r5, r2
 8012d98:	461f      	mov	r7, r3
 8012d9a:	2209      	movs	r2, #9
 8012d9c:	3308      	adds	r3, #8
 8012d9e:	4606      	mov	r6, r0
 8012da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012da4:	2100      	movs	r1, #0
 8012da6:	2201      	movs	r2, #1
 8012da8:	429a      	cmp	r2, r3
 8012daa:	db09      	blt.n	8012dc0 <__s2b+0x30>
 8012dac:	4630      	mov	r0, r6
 8012dae:	f7ff ff47 	bl	8012c40 <_Balloc>
 8012db2:	b940      	cbnz	r0, 8012dc6 <__s2b+0x36>
 8012db4:	4602      	mov	r2, r0
 8012db6:	4b19      	ldr	r3, [pc, #100]	; (8012e1c <__s2b+0x8c>)
 8012db8:	4819      	ldr	r0, [pc, #100]	; (8012e20 <__s2b+0x90>)
 8012dba:	21ce      	movs	r1, #206	; 0xce
 8012dbc:	f7fc faac 	bl	800f318 <__assert_func>
 8012dc0:	0052      	lsls	r2, r2, #1
 8012dc2:	3101      	adds	r1, #1
 8012dc4:	e7f0      	b.n	8012da8 <__s2b+0x18>
 8012dc6:	9b08      	ldr	r3, [sp, #32]
 8012dc8:	6143      	str	r3, [r0, #20]
 8012dca:	2d09      	cmp	r5, #9
 8012dcc:	f04f 0301 	mov.w	r3, #1
 8012dd0:	6103      	str	r3, [r0, #16]
 8012dd2:	dd16      	ble.n	8012e02 <__s2b+0x72>
 8012dd4:	f104 0909 	add.w	r9, r4, #9
 8012dd8:	46c8      	mov	r8, r9
 8012dda:	442c      	add	r4, r5
 8012ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012de0:	4601      	mov	r1, r0
 8012de2:	3b30      	subs	r3, #48	; 0x30
 8012de4:	220a      	movs	r2, #10
 8012de6:	4630      	mov	r0, r6
 8012de8:	f7ff ff8c 	bl	8012d04 <__multadd>
 8012dec:	45a0      	cmp	r8, r4
 8012dee:	d1f5      	bne.n	8012ddc <__s2b+0x4c>
 8012df0:	f1a5 0408 	sub.w	r4, r5, #8
 8012df4:	444c      	add	r4, r9
 8012df6:	1b2d      	subs	r5, r5, r4
 8012df8:	1963      	adds	r3, r4, r5
 8012dfa:	42bb      	cmp	r3, r7
 8012dfc:	db04      	blt.n	8012e08 <__s2b+0x78>
 8012dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e02:	340a      	adds	r4, #10
 8012e04:	2509      	movs	r5, #9
 8012e06:	e7f6      	b.n	8012df6 <__s2b+0x66>
 8012e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e0c:	4601      	mov	r1, r0
 8012e0e:	3b30      	subs	r3, #48	; 0x30
 8012e10:	220a      	movs	r2, #10
 8012e12:	4630      	mov	r0, r6
 8012e14:	f7ff ff76 	bl	8012d04 <__multadd>
 8012e18:	e7ee      	b.n	8012df8 <__s2b+0x68>
 8012e1a:	bf00      	nop
 8012e1c:	0802ab0b 	.word	0x0802ab0b
 8012e20:	0802ac18 	.word	0x0802ac18

08012e24 <__hi0bits>:
 8012e24:	0c03      	lsrs	r3, r0, #16
 8012e26:	041b      	lsls	r3, r3, #16
 8012e28:	b9d3      	cbnz	r3, 8012e60 <__hi0bits+0x3c>
 8012e2a:	0400      	lsls	r0, r0, #16
 8012e2c:	2310      	movs	r3, #16
 8012e2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e32:	bf04      	itt	eq
 8012e34:	0200      	lsleq	r0, r0, #8
 8012e36:	3308      	addeq	r3, #8
 8012e38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e3c:	bf04      	itt	eq
 8012e3e:	0100      	lsleq	r0, r0, #4
 8012e40:	3304      	addeq	r3, #4
 8012e42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e46:	bf04      	itt	eq
 8012e48:	0080      	lsleq	r0, r0, #2
 8012e4a:	3302      	addeq	r3, #2
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	db05      	blt.n	8012e5c <__hi0bits+0x38>
 8012e50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e54:	f103 0301 	add.w	r3, r3, #1
 8012e58:	bf08      	it	eq
 8012e5a:	2320      	moveq	r3, #32
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	4770      	bx	lr
 8012e60:	2300      	movs	r3, #0
 8012e62:	e7e4      	b.n	8012e2e <__hi0bits+0xa>

08012e64 <__lo0bits>:
 8012e64:	6803      	ldr	r3, [r0, #0]
 8012e66:	f013 0207 	ands.w	r2, r3, #7
 8012e6a:	4601      	mov	r1, r0
 8012e6c:	d00b      	beq.n	8012e86 <__lo0bits+0x22>
 8012e6e:	07da      	lsls	r2, r3, #31
 8012e70:	d423      	bmi.n	8012eba <__lo0bits+0x56>
 8012e72:	0798      	lsls	r0, r3, #30
 8012e74:	bf49      	itett	mi
 8012e76:	085b      	lsrmi	r3, r3, #1
 8012e78:	089b      	lsrpl	r3, r3, #2
 8012e7a:	2001      	movmi	r0, #1
 8012e7c:	600b      	strmi	r3, [r1, #0]
 8012e7e:	bf5c      	itt	pl
 8012e80:	600b      	strpl	r3, [r1, #0]
 8012e82:	2002      	movpl	r0, #2
 8012e84:	4770      	bx	lr
 8012e86:	b298      	uxth	r0, r3
 8012e88:	b9a8      	cbnz	r0, 8012eb6 <__lo0bits+0x52>
 8012e8a:	0c1b      	lsrs	r3, r3, #16
 8012e8c:	2010      	movs	r0, #16
 8012e8e:	b2da      	uxtb	r2, r3
 8012e90:	b90a      	cbnz	r2, 8012e96 <__lo0bits+0x32>
 8012e92:	3008      	adds	r0, #8
 8012e94:	0a1b      	lsrs	r3, r3, #8
 8012e96:	071a      	lsls	r2, r3, #28
 8012e98:	bf04      	itt	eq
 8012e9a:	091b      	lsreq	r3, r3, #4
 8012e9c:	3004      	addeq	r0, #4
 8012e9e:	079a      	lsls	r2, r3, #30
 8012ea0:	bf04      	itt	eq
 8012ea2:	089b      	lsreq	r3, r3, #2
 8012ea4:	3002      	addeq	r0, #2
 8012ea6:	07da      	lsls	r2, r3, #31
 8012ea8:	d403      	bmi.n	8012eb2 <__lo0bits+0x4e>
 8012eaa:	085b      	lsrs	r3, r3, #1
 8012eac:	f100 0001 	add.w	r0, r0, #1
 8012eb0:	d005      	beq.n	8012ebe <__lo0bits+0x5a>
 8012eb2:	600b      	str	r3, [r1, #0]
 8012eb4:	4770      	bx	lr
 8012eb6:	4610      	mov	r0, r2
 8012eb8:	e7e9      	b.n	8012e8e <__lo0bits+0x2a>
 8012eba:	2000      	movs	r0, #0
 8012ebc:	4770      	bx	lr
 8012ebe:	2020      	movs	r0, #32
 8012ec0:	4770      	bx	lr
	...

08012ec4 <__i2b>:
 8012ec4:	b510      	push	{r4, lr}
 8012ec6:	460c      	mov	r4, r1
 8012ec8:	2101      	movs	r1, #1
 8012eca:	f7ff feb9 	bl	8012c40 <_Balloc>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	b928      	cbnz	r0, 8012ede <__i2b+0x1a>
 8012ed2:	4b05      	ldr	r3, [pc, #20]	; (8012ee8 <__i2b+0x24>)
 8012ed4:	4805      	ldr	r0, [pc, #20]	; (8012eec <__i2b+0x28>)
 8012ed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012eda:	f7fc fa1d 	bl	800f318 <__assert_func>
 8012ede:	2301      	movs	r3, #1
 8012ee0:	6144      	str	r4, [r0, #20]
 8012ee2:	6103      	str	r3, [r0, #16]
 8012ee4:	bd10      	pop	{r4, pc}
 8012ee6:	bf00      	nop
 8012ee8:	0802ab0b 	.word	0x0802ab0b
 8012eec:	0802ac18 	.word	0x0802ac18

08012ef0 <__multiply>:
 8012ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef4:	4691      	mov	r9, r2
 8012ef6:	690a      	ldr	r2, [r1, #16]
 8012ef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	bfb8      	it	lt
 8012f00:	460b      	movlt	r3, r1
 8012f02:	460c      	mov	r4, r1
 8012f04:	bfbc      	itt	lt
 8012f06:	464c      	movlt	r4, r9
 8012f08:	4699      	movlt	r9, r3
 8012f0a:	6927      	ldr	r7, [r4, #16]
 8012f0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f10:	68a3      	ldr	r3, [r4, #8]
 8012f12:	6861      	ldr	r1, [r4, #4]
 8012f14:	eb07 060a 	add.w	r6, r7, sl
 8012f18:	42b3      	cmp	r3, r6
 8012f1a:	b085      	sub	sp, #20
 8012f1c:	bfb8      	it	lt
 8012f1e:	3101      	addlt	r1, #1
 8012f20:	f7ff fe8e 	bl	8012c40 <_Balloc>
 8012f24:	b930      	cbnz	r0, 8012f34 <__multiply+0x44>
 8012f26:	4602      	mov	r2, r0
 8012f28:	4b44      	ldr	r3, [pc, #272]	; (801303c <__multiply+0x14c>)
 8012f2a:	4845      	ldr	r0, [pc, #276]	; (8013040 <__multiply+0x150>)
 8012f2c:	f240 115d 	movw	r1, #349	; 0x15d
 8012f30:	f7fc f9f2 	bl	800f318 <__assert_func>
 8012f34:	f100 0514 	add.w	r5, r0, #20
 8012f38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f3c:	462b      	mov	r3, r5
 8012f3e:	2200      	movs	r2, #0
 8012f40:	4543      	cmp	r3, r8
 8012f42:	d321      	bcc.n	8012f88 <__multiply+0x98>
 8012f44:	f104 0314 	add.w	r3, r4, #20
 8012f48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f4c:	f109 0314 	add.w	r3, r9, #20
 8012f50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f54:	9202      	str	r2, [sp, #8]
 8012f56:	1b3a      	subs	r2, r7, r4
 8012f58:	3a15      	subs	r2, #21
 8012f5a:	f022 0203 	bic.w	r2, r2, #3
 8012f5e:	3204      	adds	r2, #4
 8012f60:	f104 0115 	add.w	r1, r4, #21
 8012f64:	428f      	cmp	r7, r1
 8012f66:	bf38      	it	cc
 8012f68:	2204      	movcc	r2, #4
 8012f6a:	9201      	str	r2, [sp, #4]
 8012f6c:	9a02      	ldr	r2, [sp, #8]
 8012f6e:	9303      	str	r3, [sp, #12]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d80c      	bhi.n	8012f8e <__multiply+0x9e>
 8012f74:	2e00      	cmp	r6, #0
 8012f76:	dd03      	ble.n	8012f80 <__multiply+0x90>
 8012f78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d05a      	beq.n	8013036 <__multiply+0x146>
 8012f80:	6106      	str	r6, [r0, #16]
 8012f82:	b005      	add	sp, #20
 8012f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f88:	f843 2b04 	str.w	r2, [r3], #4
 8012f8c:	e7d8      	b.n	8012f40 <__multiply+0x50>
 8012f8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f92:	f1ba 0f00 	cmp.w	sl, #0
 8012f96:	d024      	beq.n	8012fe2 <__multiply+0xf2>
 8012f98:	f104 0e14 	add.w	lr, r4, #20
 8012f9c:	46a9      	mov	r9, r5
 8012f9e:	f04f 0c00 	mov.w	ip, #0
 8012fa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012fa6:	f8d9 1000 	ldr.w	r1, [r9]
 8012faa:	fa1f fb82 	uxth.w	fp, r2
 8012fae:	b289      	uxth	r1, r1
 8012fb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8012fb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8012fbc:	4461      	add	r1, ip
 8012fbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8012fc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012fca:	b289      	uxth	r1, r1
 8012fcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012fd0:	4577      	cmp	r7, lr
 8012fd2:	f849 1b04 	str.w	r1, [r9], #4
 8012fd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fda:	d8e2      	bhi.n	8012fa2 <__multiply+0xb2>
 8012fdc:	9a01      	ldr	r2, [sp, #4]
 8012fde:	f845 c002 	str.w	ip, [r5, r2]
 8012fe2:	9a03      	ldr	r2, [sp, #12]
 8012fe4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fe8:	3304      	adds	r3, #4
 8012fea:	f1b9 0f00 	cmp.w	r9, #0
 8012fee:	d020      	beq.n	8013032 <__multiply+0x142>
 8012ff0:	6829      	ldr	r1, [r5, #0]
 8012ff2:	f104 0c14 	add.w	ip, r4, #20
 8012ff6:	46ae      	mov	lr, r5
 8012ff8:	f04f 0a00 	mov.w	sl, #0
 8012ffc:	f8bc b000 	ldrh.w	fp, [ip]
 8013000:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013004:	fb09 220b 	mla	r2, r9, fp, r2
 8013008:	4492      	add	sl, r2
 801300a:	b289      	uxth	r1, r1
 801300c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013010:	f84e 1b04 	str.w	r1, [lr], #4
 8013014:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013018:	f8be 1000 	ldrh.w	r1, [lr]
 801301c:	0c12      	lsrs	r2, r2, #16
 801301e:	fb09 1102 	mla	r1, r9, r2, r1
 8013022:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013026:	4567      	cmp	r7, ip
 8013028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801302c:	d8e6      	bhi.n	8012ffc <__multiply+0x10c>
 801302e:	9a01      	ldr	r2, [sp, #4]
 8013030:	50a9      	str	r1, [r5, r2]
 8013032:	3504      	adds	r5, #4
 8013034:	e79a      	b.n	8012f6c <__multiply+0x7c>
 8013036:	3e01      	subs	r6, #1
 8013038:	e79c      	b.n	8012f74 <__multiply+0x84>
 801303a:	bf00      	nop
 801303c:	0802ab0b 	.word	0x0802ab0b
 8013040:	0802ac18 	.word	0x0802ac18

08013044 <__pow5mult>:
 8013044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013048:	4615      	mov	r5, r2
 801304a:	f012 0203 	ands.w	r2, r2, #3
 801304e:	4606      	mov	r6, r0
 8013050:	460f      	mov	r7, r1
 8013052:	d007      	beq.n	8013064 <__pow5mult+0x20>
 8013054:	4c25      	ldr	r4, [pc, #148]	; (80130ec <__pow5mult+0xa8>)
 8013056:	3a01      	subs	r2, #1
 8013058:	2300      	movs	r3, #0
 801305a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801305e:	f7ff fe51 	bl	8012d04 <__multadd>
 8013062:	4607      	mov	r7, r0
 8013064:	10ad      	asrs	r5, r5, #2
 8013066:	d03d      	beq.n	80130e4 <__pow5mult+0xa0>
 8013068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801306a:	b97c      	cbnz	r4, 801308c <__pow5mult+0x48>
 801306c:	2010      	movs	r0, #16
 801306e:	f7ff fdb3 	bl	8012bd8 <malloc>
 8013072:	4602      	mov	r2, r0
 8013074:	6270      	str	r0, [r6, #36]	; 0x24
 8013076:	b928      	cbnz	r0, 8013084 <__pow5mult+0x40>
 8013078:	4b1d      	ldr	r3, [pc, #116]	; (80130f0 <__pow5mult+0xac>)
 801307a:	481e      	ldr	r0, [pc, #120]	; (80130f4 <__pow5mult+0xb0>)
 801307c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013080:	f7fc f94a 	bl	800f318 <__assert_func>
 8013084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013088:	6004      	str	r4, [r0, #0]
 801308a:	60c4      	str	r4, [r0, #12]
 801308c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013094:	b94c      	cbnz	r4, 80130aa <__pow5mult+0x66>
 8013096:	f240 2171 	movw	r1, #625	; 0x271
 801309a:	4630      	mov	r0, r6
 801309c:	f7ff ff12 	bl	8012ec4 <__i2b>
 80130a0:	2300      	movs	r3, #0
 80130a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80130a6:	4604      	mov	r4, r0
 80130a8:	6003      	str	r3, [r0, #0]
 80130aa:	f04f 0900 	mov.w	r9, #0
 80130ae:	07eb      	lsls	r3, r5, #31
 80130b0:	d50a      	bpl.n	80130c8 <__pow5mult+0x84>
 80130b2:	4639      	mov	r1, r7
 80130b4:	4622      	mov	r2, r4
 80130b6:	4630      	mov	r0, r6
 80130b8:	f7ff ff1a 	bl	8012ef0 <__multiply>
 80130bc:	4639      	mov	r1, r7
 80130be:	4680      	mov	r8, r0
 80130c0:	4630      	mov	r0, r6
 80130c2:	f7ff fdfd 	bl	8012cc0 <_Bfree>
 80130c6:	4647      	mov	r7, r8
 80130c8:	106d      	asrs	r5, r5, #1
 80130ca:	d00b      	beq.n	80130e4 <__pow5mult+0xa0>
 80130cc:	6820      	ldr	r0, [r4, #0]
 80130ce:	b938      	cbnz	r0, 80130e0 <__pow5mult+0x9c>
 80130d0:	4622      	mov	r2, r4
 80130d2:	4621      	mov	r1, r4
 80130d4:	4630      	mov	r0, r6
 80130d6:	f7ff ff0b 	bl	8012ef0 <__multiply>
 80130da:	6020      	str	r0, [r4, #0]
 80130dc:	f8c0 9000 	str.w	r9, [r0]
 80130e0:	4604      	mov	r4, r0
 80130e2:	e7e4      	b.n	80130ae <__pow5mult+0x6a>
 80130e4:	4638      	mov	r0, r7
 80130e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ea:	bf00      	nop
 80130ec:	0802ad88 	.word	0x0802ad88
 80130f0:	0802aa76 	.word	0x0802aa76
 80130f4:	0802ac18 	.word	0x0802ac18

080130f8 <__lshift>:
 80130f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130fc:	460c      	mov	r4, r1
 80130fe:	6849      	ldr	r1, [r1, #4]
 8013100:	6923      	ldr	r3, [r4, #16]
 8013102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013106:	68a3      	ldr	r3, [r4, #8]
 8013108:	4607      	mov	r7, r0
 801310a:	4691      	mov	r9, r2
 801310c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013110:	f108 0601 	add.w	r6, r8, #1
 8013114:	42b3      	cmp	r3, r6
 8013116:	db0b      	blt.n	8013130 <__lshift+0x38>
 8013118:	4638      	mov	r0, r7
 801311a:	f7ff fd91 	bl	8012c40 <_Balloc>
 801311e:	4605      	mov	r5, r0
 8013120:	b948      	cbnz	r0, 8013136 <__lshift+0x3e>
 8013122:	4602      	mov	r2, r0
 8013124:	4b2a      	ldr	r3, [pc, #168]	; (80131d0 <__lshift+0xd8>)
 8013126:	482b      	ldr	r0, [pc, #172]	; (80131d4 <__lshift+0xdc>)
 8013128:	f240 11d9 	movw	r1, #473	; 0x1d9
 801312c:	f7fc f8f4 	bl	800f318 <__assert_func>
 8013130:	3101      	adds	r1, #1
 8013132:	005b      	lsls	r3, r3, #1
 8013134:	e7ee      	b.n	8013114 <__lshift+0x1c>
 8013136:	2300      	movs	r3, #0
 8013138:	f100 0114 	add.w	r1, r0, #20
 801313c:	f100 0210 	add.w	r2, r0, #16
 8013140:	4618      	mov	r0, r3
 8013142:	4553      	cmp	r3, sl
 8013144:	db37      	blt.n	80131b6 <__lshift+0xbe>
 8013146:	6920      	ldr	r0, [r4, #16]
 8013148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801314c:	f104 0314 	add.w	r3, r4, #20
 8013150:	f019 091f 	ands.w	r9, r9, #31
 8013154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801315c:	d02f      	beq.n	80131be <__lshift+0xc6>
 801315e:	f1c9 0e20 	rsb	lr, r9, #32
 8013162:	468a      	mov	sl, r1
 8013164:	f04f 0c00 	mov.w	ip, #0
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	fa02 f209 	lsl.w	r2, r2, r9
 801316e:	ea42 020c 	orr.w	r2, r2, ip
 8013172:	f84a 2b04 	str.w	r2, [sl], #4
 8013176:	f853 2b04 	ldr.w	r2, [r3], #4
 801317a:	4298      	cmp	r0, r3
 801317c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013180:	d8f2      	bhi.n	8013168 <__lshift+0x70>
 8013182:	1b03      	subs	r3, r0, r4
 8013184:	3b15      	subs	r3, #21
 8013186:	f023 0303 	bic.w	r3, r3, #3
 801318a:	3304      	adds	r3, #4
 801318c:	f104 0215 	add.w	r2, r4, #21
 8013190:	4290      	cmp	r0, r2
 8013192:	bf38      	it	cc
 8013194:	2304      	movcc	r3, #4
 8013196:	f841 c003 	str.w	ip, [r1, r3]
 801319a:	f1bc 0f00 	cmp.w	ip, #0
 801319e:	d001      	beq.n	80131a4 <__lshift+0xac>
 80131a0:	f108 0602 	add.w	r6, r8, #2
 80131a4:	3e01      	subs	r6, #1
 80131a6:	4638      	mov	r0, r7
 80131a8:	612e      	str	r6, [r5, #16]
 80131aa:	4621      	mov	r1, r4
 80131ac:	f7ff fd88 	bl	8012cc0 <_Bfree>
 80131b0:	4628      	mov	r0, r5
 80131b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80131ba:	3301      	adds	r3, #1
 80131bc:	e7c1      	b.n	8013142 <__lshift+0x4a>
 80131be:	3904      	subs	r1, #4
 80131c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80131c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80131c8:	4298      	cmp	r0, r3
 80131ca:	d8f9      	bhi.n	80131c0 <__lshift+0xc8>
 80131cc:	e7ea      	b.n	80131a4 <__lshift+0xac>
 80131ce:	bf00      	nop
 80131d0:	0802ab0b 	.word	0x0802ab0b
 80131d4:	0802ac18 	.word	0x0802ac18

080131d8 <__mcmp>:
 80131d8:	b530      	push	{r4, r5, lr}
 80131da:	6902      	ldr	r2, [r0, #16]
 80131dc:	690c      	ldr	r4, [r1, #16]
 80131de:	1b12      	subs	r2, r2, r4
 80131e0:	d10e      	bne.n	8013200 <__mcmp+0x28>
 80131e2:	f100 0314 	add.w	r3, r0, #20
 80131e6:	3114      	adds	r1, #20
 80131e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131f8:	42a5      	cmp	r5, r4
 80131fa:	d003      	beq.n	8013204 <__mcmp+0x2c>
 80131fc:	d305      	bcc.n	801320a <__mcmp+0x32>
 80131fe:	2201      	movs	r2, #1
 8013200:	4610      	mov	r0, r2
 8013202:	bd30      	pop	{r4, r5, pc}
 8013204:	4283      	cmp	r3, r0
 8013206:	d3f3      	bcc.n	80131f0 <__mcmp+0x18>
 8013208:	e7fa      	b.n	8013200 <__mcmp+0x28>
 801320a:	f04f 32ff 	mov.w	r2, #4294967295
 801320e:	e7f7      	b.n	8013200 <__mcmp+0x28>

08013210 <__mdiff>:
 8013210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013214:	460c      	mov	r4, r1
 8013216:	4606      	mov	r6, r0
 8013218:	4611      	mov	r1, r2
 801321a:	4620      	mov	r0, r4
 801321c:	4690      	mov	r8, r2
 801321e:	f7ff ffdb 	bl	80131d8 <__mcmp>
 8013222:	1e05      	subs	r5, r0, #0
 8013224:	d110      	bne.n	8013248 <__mdiff+0x38>
 8013226:	4629      	mov	r1, r5
 8013228:	4630      	mov	r0, r6
 801322a:	f7ff fd09 	bl	8012c40 <_Balloc>
 801322e:	b930      	cbnz	r0, 801323e <__mdiff+0x2e>
 8013230:	4b3a      	ldr	r3, [pc, #232]	; (801331c <__mdiff+0x10c>)
 8013232:	4602      	mov	r2, r0
 8013234:	f240 2132 	movw	r1, #562	; 0x232
 8013238:	4839      	ldr	r0, [pc, #228]	; (8013320 <__mdiff+0x110>)
 801323a:	f7fc f86d 	bl	800f318 <__assert_func>
 801323e:	2301      	movs	r3, #1
 8013240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013248:	bfa4      	itt	ge
 801324a:	4643      	movge	r3, r8
 801324c:	46a0      	movge	r8, r4
 801324e:	4630      	mov	r0, r6
 8013250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013254:	bfa6      	itte	ge
 8013256:	461c      	movge	r4, r3
 8013258:	2500      	movge	r5, #0
 801325a:	2501      	movlt	r5, #1
 801325c:	f7ff fcf0 	bl	8012c40 <_Balloc>
 8013260:	b920      	cbnz	r0, 801326c <__mdiff+0x5c>
 8013262:	4b2e      	ldr	r3, [pc, #184]	; (801331c <__mdiff+0x10c>)
 8013264:	4602      	mov	r2, r0
 8013266:	f44f 7110 	mov.w	r1, #576	; 0x240
 801326a:	e7e5      	b.n	8013238 <__mdiff+0x28>
 801326c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013270:	6926      	ldr	r6, [r4, #16]
 8013272:	60c5      	str	r5, [r0, #12]
 8013274:	f104 0914 	add.w	r9, r4, #20
 8013278:	f108 0514 	add.w	r5, r8, #20
 801327c:	f100 0e14 	add.w	lr, r0, #20
 8013280:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013284:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013288:	f108 0210 	add.w	r2, r8, #16
 801328c:	46f2      	mov	sl, lr
 801328e:	2100      	movs	r1, #0
 8013290:	f859 3b04 	ldr.w	r3, [r9], #4
 8013294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013298:	fa1f f883 	uxth.w	r8, r3
 801329c:	fa11 f18b 	uxtah	r1, r1, fp
 80132a0:	0c1b      	lsrs	r3, r3, #16
 80132a2:	eba1 0808 	sub.w	r8, r1, r8
 80132a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80132aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80132ae:	fa1f f888 	uxth.w	r8, r8
 80132b2:	1419      	asrs	r1, r3, #16
 80132b4:	454e      	cmp	r6, r9
 80132b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80132ba:	f84a 3b04 	str.w	r3, [sl], #4
 80132be:	d8e7      	bhi.n	8013290 <__mdiff+0x80>
 80132c0:	1b33      	subs	r3, r6, r4
 80132c2:	3b15      	subs	r3, #21
 80132c4:	f023 0303 	bic.w	r3, r3, #3
 80132c8:	3304      	adds	r3, #4
 80132ca:	3415      	adds	r4, #21
 80132cc:	42a6      	cmp	r6, r4
 80132ce:	bf38      	it	cc
 80132d0:	2304      	movcc	r3, #4
 80132d2:	441d      	add	r5, r3
 80132d4:	4473      	add	r3, lr
 80132d6:	469e      	mov	lr, r3
 80132d8:	462e      	mov	r6, r5
 80132da:	4566      	cmp	r6, ip
 80132dc:	d30e      	bcc.n	80132fc <__mdiff+0xec>
 80132de:	f10c 0203 	add.w	r2, ip, #3
 80132e2:	1b52      	subs	r2, r2, r5
 80132e4:	f022 0203 	bic.w	r2, r2, #3
 80132e8:	3d03      	subs	r5, #3
 80132ea:	45ac      	cmp	ip, r5
 80132ec:	bf38      	it	cc
 80132ee:	2200      	movcc	r2, #0
 80132f0:	441a      	add	r2, r3
 80132f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80132f6:	b17b      	cbz	r3, 8013318 <__mdiff+0x108>
 80132f8:	6107      	str	r7, [r0, #16]
 80132fa:	e7a3      	b.n	8013244 <__mdiff+0x34>
 80132fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8013300:	fa11 f288 	uxtah	r2, r1, r8
 8013304:	1414      	asrs	r4, r2, #16
 8013306:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801330a:	b292      	uxth	r2, r2
 801330c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013310:	f84e 2b04 	str.w	r2, [lr], #4
 8013314:	1421      	asrs	r1, r4, #16
 8013316:	e7e0      	b.n	80132da <__mdiff+0xca>
 8013318:	3f01      	subs	r7, #1
 801331a:	e7ea      	b.n	80132f2 <__mdiff+0xe2>
 801331c:	0802ab0b 	.word	0x0802ab0b
 8013320:	0802ac18 	.word	0x0802ac18

08013324 <__ulp>:
 8013324:	b082      	sub	sp, #8
 8013326:	ed8d 0b00 	vstr	d0, [sp]
 801332a:	9b01      	ldr	r3, [sp, #4]
 801332c:	4912      	ldr	r1, [pc, #72]	; (8013378 <__ulp+0x54>)
 801332e:	4019      	ands	r1, r3
 8013330:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013334:	2900      	cmp	r1, #0
 8013336:	dd05      	ble.n	8013344 <__ulp+0x20>
 8013338:	2200      	movs	r2, #0
 801333a:	460b      	mov	r3, r1
 801333c:	ec43 2b10 	vmov	d0, r2, r3
 8013340:	b002      	add	sp, #8
 8013342:	4770      	bx	lr
 8013344:	4249      	negs	r1, r1
 8013346:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801334a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801334e:	f04f 0200 	mov.w	r2, #0
 8013352:	f04f 0300 	mov.w	r3, #0
 8013356:	da04      	bge.n	8013362 <__ulp+0x3e>
 8013358:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801335c:	fa41 f300 	asr.w	r3, r1, r0
 8013360:	e7ec      	b.n	801333c <__ulp+0x18>
 8013362:	f1a0 0114 	sub.w	r1, r0, #20
 8013366:	291e      	cmp	r1, #30
 8013368:	bfda      	itte	le
 801336a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801336e:	fa20 f101 	lsrle.w	r1, r0, r1
 8013372:	2101      	movgt	r1, #1
 8013374:	460a      	mov	r2, r1
 8013376:	e7e1      	b.n	801333c <__ulp+0x18>
 8013378:	7ff00000 	.word	0x7ff00000

0801337c <__b2d>:
 801337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801337e:	6905      	ldr	r5, [r0, #16]
 8013380:	f100 0714 	add.w	r7, r0, #20
 8013384:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013388:	1f2e      	subs	r6, r5, #4
 801338a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801338e:	4620      	mov	r0, r4
 8013390:	f7ff fd48 	bl	8012e24 <__hi0bits>
 8013394:	f1c0 0320 	rsb	r3, r0, #32
 8013398:	280a      	cmp	r0, #10
 801339a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013418 <__b2d+0x9c>
 801339e:	600b      	str	r3, [r1, #0]
 80133a0:	dc14      	bgt.n	80133cc <__b2d+0x50>
 80133a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80133a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80133aa:	42b7      	cmp	r7, r6
 80133ac:	ea41 030c 	orr.w	r3, r1, ip
 80133b0:	bf34      	ite	cc
 80133b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80133b6:	2100      	movcs	r1, #0
 80133b8:	3015      	adds	r0, #21
 80133ba:	fa04 f000 	lsl.w	r0, r4, r0
 80133be:	fa21 f10e 	lsr.w	r1, r1, lr
 80133c2:	ea40 0201 	orr.w	r2, r0, r1
 80133c6:	ec43 2b10 	vmov	d0, r2, r3
 80133ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133cc:	42b7      	cmp	r7, r6
 80133ce:	bf3a      	itte	cc
 80133d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80133d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80133d8:	2100      	movcs	r1, #0
 80133da:	380b      	subs	r0, #11
 80133dc:	d017      	beq.n	801340e <__b2d+0x92>
 80133de:	f1c0 0c20 	rsb	ip, r0, #32
 80133e2:	fa04 f500 	lsl.w	r5, r4, r0
 80133e6:	42be      	cmp	r6, r7
 80133e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80133ec:	ea45 0504 	orr.w	r5, r5, r4
 80133f0:	bf8c      	ite	hi
 80133f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80133f6:	2400      	movls	r4, #0
 80133f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80133fc:	fa01 f000 	lsl.w	r0, r1, r0
 8013400:	fa24 f40c 	lsr.w	r4, r4, ip
 8013404:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013408:	ea40 0204 	orr.w	r2, r0, r4
 801340c:	e7db      	b.n	80133c6 <__b2d+0x4a>
 801340e:	ea44 030c 	orr.w	r3, r4, ip
 8013412:	460a      	mov	r2, r1
 8013414:	e7d7      	b.n	80133c6 <__b2d+0x4a>
 8013416:	bf00      	nop
 8013418:	3ff00000 	.word	0x3ff00000

0801341c <__d2b>:
 801341c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013420:	4689      	mov	r9, r1
 8013422:	2101      	movs	r1, #1
 8013424:	ec57 6b10 	vmov	r6, r7, d0
 8013428:	4690      	mov	r8, r2
 801342a:	f7ff fc09 	bl	8012c40 <_Balloc>
 801342e:	4604      	mov	r4, r0
 8013430:	b930      	cbnz	r0, 8013440 <__d2b+0x24>
 8013432:	4602      	mov	r2, r0
 8013434:	4b25      	ldr	r3, [pc, #148]	; (80134cc <__d2b+0xb0>)
 8013436:	4826      	ldr	r0, [pc, #152]	; (80134d0 <__d2b+0xb4>)
 8013438:	f240 310a 	movw	r1, #778	; 0x30a
 801343c:	f7fb ff6c 	bl	800f318 <__assert_func>
 8013440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013448:	bb35      	cbnz	r5, 8013498 <__d2b+0x7c>
 801344a:	2e00      	cmp	r6, #0
 801344c:	9301      	str	r3, [sp, #4]
 801344e:	d028      	beq.n	80134a2 <__d2b+0x86>
 8013450:	4668      	mov	r0, sp
 8013452:	9600      	str	r6, [sp, #0]
 8013454:	f7ff fd06 	bl	8012e64 <__lo0bits>
 8013458:	9900      	ldr	r1, [sp, #0]
 801345a:	b300      	cbz	r0, 801349e <__d2b+0x82>
 801345c:	9a01      	ldr	r2, [sp, #4]
 801345e:	f1c0 0320 	rsb	r3, r0, #32
 8013462:	fa02 f303 	lsl.w	r3, r2, r3
 8013466:	430b      	orrs	r3, r1
 8013468:	40c2      	lsrs	r2, r0
 801346a:	6163      	str	r3, [r4, #20]
 801346c:	9201      	str	r2, [sp, #4]
 801346e:	9b01      	ldr	r3, [sp, #4]
 8013470:	61a3      	str	r3, [r4, #24]
 8013472:	2b00      	cmp	r3, #0
 8013474:	bf14      	ite	ne
 8013476:	2202      	movne	r2, #2
 8013478:	2201      	moveq	r2, #1
 801347a:	6122      	str	r2, [r4, #16]
 801347c:	b1d5      	cbz	r5, 80134b4 <__d2b+0x98>
 801347e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013482:	4405      	add	r5, r0
 8013484:	f8c9 5000 	str.w	r5, [r9]
 8013488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801348c:	f8c8 0000 	str.w	r0, [r8]
 8013490:	4620      	mov	r0, r4
 8013492:	b003      	add	sp, #12
 8013494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801349c:	e7d5      	b.n	801344a <__d2b+0x2e>
 801349e:	6161      	str	r1, [r4, #20]
 80134a0:	e7e5      	b.n	801346e <__d2b+0x52>
 80134a2:	a801      	add	r0, sp, #4
 80134a4:	f7ff fcde 	bl	8012e64 <__lo0bits>
 80134a8:	9b01      	ldr	r3, [sp, #4]
 80134aa:	6163      	str	r3, [r4, #20]
 80134ac:	2201      	movs	r2, #1
 80134ae:	6122      	str	r2, [r4, #16]
 80134b0:	3020      	adds	r0, #32
 80134b2:	e7e3      	b.n	801347c <__d2b+0x60>
 80134b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80134b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80134bc:	f8c9 0000 	str.w	r0, [r9]
 80134c0:	6918      	ldr	r0, [r3, #16]
 80134c2:	f7ff fcaf 	bl	8012e24 <__hi0bits>
 80134c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134ca:	e7df      	b.n	801348c <__d2b+0x70>
 80134cc:	0802ab0b 	.word	0x0802ab0b
 80134d0:	0802ac18 	.word	0x0802ac18

080134d4 <__ratio>:
 80134d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d8:	4688      	mov	r8, r1
 80134da:	4669      	mov	r1, sp
 80134dc:	4681      	mov	r9, r0
 80134de:	f7ff ff4d 	bl	801337c <__b2d>
 80134e2:	a901      	add	r1, sp, #4
 80134e4:	4640      	mov	r0, r8
 80134e6:	ec55 4b10 	vmov	r4, r5, d0
 80134ea:	f7ff ff47 	bl	801337c <__b2d>
 80134ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80134f6:	eba3 0c02 	sub.w	ip, r3, r2
 80134fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80134fe:	1a9b      	subs	r3, r3, r2
 8013500:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013504:	ec51 0b10 	vmov	r0, r1, d0
 8013508:	2b00      	cmp	r3, #0
 801350a:	bfd6      	itet	le
 801350c:	460a      	movle	r2, r1
 801350e:	462a      	movgt	r2, r5
 8013510:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013514:	468b      	mov	fp, r1
 8013516:	462f      	mov	r7, r5
 8013518:	bfd4      	ite	le
 801351a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801351e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013522:	4620      	mov	r0, r4
 8013524:	ee10 2a10 	vmov	r2, s0
 8013528:	465b      	mov	r3, fp
 801352a:	4639      	mov	r1, r7
 801352c:	f7ed f9b6 	bl	800089c <__aeabi_ddiv>
 8013530:	ec41 0b10 	vmov	d0, r0, r1
 8013534:	b003      	add	sp, #12
 8013536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801353a <__copybits>:
 801353a:	3901      	subs	r1, #1
 801353c:	b570      	push	{r4, r5, r6, lr}
 801353e:	1149      	asrs	r1, r1, #5
 8013540:	6914      	ldr	r4, [r2, #16]
 8013542:	3101      	adds	r1, #1
 8013544:	f102 0314 	add.w	r3, r2, #20
 8013548:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801354c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013550:	1f05      	subs	r5, r0, #4
 8013552:	42a3      	cmp	r3, r4
 8013554:	d30c      	bcc.n	8013570 <__copybits+0x36>
 8013556:	1aa3      	subs	r3, r4, r2
 8013558:	3b11      	subs	r3, #17
 801355a:	f023 0303 	bic.w	r3, r3, #3
 801355e:	3211      	adds	r2, #17
 8013560:	42a2      	cmp	r2, r4
 8013562:	bf88      	it	hi
 8013564:	2300      	movhi	r3, #0
 8013566:	4418      	add	r0, r3
 8013568:	2300      	movs	r3, #0
 801356a:	4288      	cmp	r0, r1
 801356c:	d305      	bcc.n	801357a <__copybits+0x40>
 801356e:	bd70      	pop	{r4, r5, r6, pc}
 8013570:	f853 6b04 	ldr.w	r6, [r3], #4
 8013574:	f845 6f04 	str.w	r6, [r5, #4]!
 8013578:	e7eb      	b.n	8013552 <__copybits+0x18>
 801357a:	f840 3b04 	str.w	r3, [r0], #4
 801357e:	e7f4      	b.n	801356a <__copybits+0x30>

08013580 <__any_on>:
 8013580:	f100 0214 	add.w	r2, r0, #20
 8013584:	6900      	ldr	r0, [r0, #16]
 8013586:	114b      	asrs	r3, r1, #5
 8013588:	4298      	cmp	r0, r3
 801358a:	b510      	push	{r4, lr}
 801358c:	db11      	blt.n	80135b2 <__any_on+0x32>
 801358e:	dd0a      	ble.n	80135a6 <__any_on+0x26>
 8013590:	f011 011f 	ands.w	r1, r1, #31
 8013594:	d007      	beq.n	80135a6 <__any_on+0x26>
 8013596:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801359a:	fa24 f001 	lsr.w	r0, r4, r1
 801359e:	fa00 f101 	lsl.w	r1, r0, r1
 80135a2:	428c      	cmp	r4, r1
 80135a4:	d10b      	bne.n	80135be <__any_on+0x3e>
 80135a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d803      	bhi.n	80135b6 <__any_on+0x36>
 80135ae:	2000      	movs	r0, #0
 80135b0:	bd10      	pop	{r4, pc}
 80135b2:	4603      	mov	r3, r0
 80135b4:	e7f7      	b.n	80135a6 <__any_on+0x26>
 80135b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135ba:	2900      	cmp	r1, #0
 80135bc:	d0f5      	beq.n	80135aa <__any_on+0x2a>
 80135be:	2001      	movs	r0, #1
 80135c0:	e7f6      	b.n	80135b0 <__any_on+0x30>

080135c2 <_calloc_r>:
 80135c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135c4:	fba1 2402 	umull	r2, r4, r1, r2
 80135c8:	b94c      	cbnz	r4, 80135de <_calloc_r+0x1c>
 80135ca:	4611      	mov	r1, r2
 80135cc:	9201      	str	r2, [sp, #4]
 80135ce:	f000 f87b 	bl	80136c8 <_malloc_r>
 80135d2:	9a01      	ldr	r2, [sp, #4]
 80135d4:	4605      	mov	r5, r0
 80135d6:	b930      	cbnz	r0, 80135e6 <_calloc_r+0x24>
 80135d8:	4628      	mov	r0, r5
 80135da:	b003      	add	sp, #12
 80135dc:	bd30      	pop	{r4, r5, pc}
 80135de:	220c      	movs	r2, #12
 80135e0:	6002      	str	r2, [r0, #0]
 80135e2:	2500      	movs	r5, #0
 80135e4:	e7f8      	b.n	80135d8 <_calloc_r+0x16>
 80135e6:	4621      	mov	r1, r4
 80135e8:	f7fb fefe 	bl	800f3e8 <memset>
 80135ec:	e7f4      	b.n	80135d8 <_calloc_r+0x16>
	...

080135f0 <_free_r>:
 80135f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135f2:	2900      	cmp	r1, #0
 80135f4:	d044      	beq.n	8013680 <_free_r+0x90>
 80135f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135fa:	9001      	str	r0, [sp, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f1a1 0404 	sub.w	r4, r1, #4
 8013602:	bfb8      	it	lt
 8013604:	18e4      	addlt	r4, r4, r3
 8013606:	f000 fb75 	bl	8013cf4 <__malloc_lock>
 801360a:	4a1e      	ldr	r2, [pc, #120]	; (8013684 <_free_r+0x94>)
 801360c:	9801      	ldr	r0, [sp, #4]
 801360e:	6813      	ldr	r3, [r2, #0]
 8013610:	b933      	cbnz	r3, 8013620 <_free_r+0x30>
 8013612:	6063      	str	r3, [r4, #4]
 8013614:	6014      	str	r4, [r2, #0]
 8013616:	b003      	add	sp, #12
 8013618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801361c:	f000 bb70 	b.w	8013d00 <__malloc_unlock>
 8013620:	42a3      	cmp	r3, r4
 8013622:	d908      	bls.n	8013636 <_free_r+0x46>
 8013624:	6825      	ldr	r5, [r4, #0]
 8013626:	1961      	adds	r1, r4, r5
 8013628:	428b      	cmp	r3, r1
 801362a:	bf01      	itttt	eq
 801362c:	6819      	ldreq	r1, [r3, #0]
 801362e:	685b      	ldreq	r3, [r3, #4]
 8013630:	1949      	addeq	r1, r1, r5
 8013632:	6021      	streq	r1, [r4, #0]
 8013634:	e7ed      	b.n	8013612 <_free_r+0x22>
 8013636:	461a      	mov	r2, r3
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	b10b      	cbz	r3, 8013640 <_free_r+0x50>
 801363c:	42a3      	cmp	r3, r4
 801363e:	d9fa      	bls.n	8013636 <_free_r+0x46>
 8013640:	6811      	ldr	r1, [r2, #0]
 8013642:	1855      	adds	r5, r2, r1
 8013644:	42a5      	cmp	r5, r4
 8013646:	d10b      	bne.n	8013660 <_free_r+0x70>
 8013648:	6824      	ldr	r4, [r4, #0]
 801364a:	4421      	add	r1, r4
 801364c:	1854      	adds	r4, r2, r1
 801364e:	42a3      	cmp	r3, r4
 8013650:	6011      	str	r1, [r2, #0]
 8013652:	d1e0      	bne.n	8013616 <_free_r+0x26>
 8013654:	681c      	ldr	r4, [r3, #0]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	6053      	str	r3, [r2, #4]
 801365a:	4421      	add	r1, r4
 801365c:	6011      	str	r1, [r2, #0]
 801365e:	e7da      	b.n	8013616 <_free_r+0x26>
 8013660:	d902      	bls.n	8013668 <_free_r+0x78>
 8013662:	230c      	movs	r3, #12
 8013664:	6003      	str	r3, [r0, #0]
 8013666:	e7d6      	b.n	8013616 <_free_r+0x26>
 8013668:	6825      	ldr	r5, [r4, #0]
 801366a:	1961      	adds	r1, r4, r5
 801366c:	428b      	cmp	r3, r1
 801366e:	bf04      	itt	eq
 8013670:	6819      	ldreq	r1, [r3, #0]
 8013672:	685b      	ldreq	r3, [r3, #4]
 8013674:	6063      	str	r3, [r4, #4]
 8013676:	bf04      	itt	eq
 8013678:	1949      	addeq	r1, r1, r5
 801367a:	6021      	streq	r1, [r4, #0]
 801367c:	6054      	str	r4, [r2, #4]
 801367e:	e7ca      	b.n	8013616 <_free_r+0x26>
 8013680:	b003      	add	sp, #12
 8013682:	bd30      	pop	{r4, r5, pc}
 8013684:	20013470 	.word	0x20013470

08013688 <sbrk_aligned>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	4e0e      	ldr	r6, [pc, #56]	; (80136c4 <sbrk_aligned+0x3c>)
 801368c:	460c      	mov	r4, r1
 801368e:	6831      	ldr	r1, [r6, #0]
 8013690:	4605      	mov	r5, r0
 8013692:	b911      	cbnz	r1, 801369a <sbrk_aligned+0x12>
 8013694:	f000 fa20 	bl	8013ad8 <_sbrk_r>
 8013698:	6030      	str	r0, [r6, #0]
 801369a:	4621      	mov	r1, r4
 801369c:	4628      	mov	r0, r5
 801369e:	f000 fa1b 	bl	8013ad8 <_sbrk_r>
 80136a2:	1c43      	adds	r3, r0, #1
 80136a4:	d00a      	beq.n	80136bc <sbrk_aligned+0x34>
 80136a6:	1cc4      	adds	r4, r0, #3
 80136a8:	f024 0403 	bic.w	r4, r4, #3
 80136ac:	42a0      	cmp	r0, r4
 80136ae:	d007      	beq.n	80136c0 <sbrk_aligned+0x38>
 80136b0:	1a21      	subs	r1, r4, r0
 80136b2:	4628      	mov	r0, r5
 80136b4:	f000 fa10 	bl	8013ad8 <_sbrk_r>
 80136b8:	3001      	adds	r0, #1
 80136ba:	d101      	bne.n	80136c0 <sbrk_aligned+0x38>
 80136bc:	f04f 34ff 	mov.w	r4, #4294967295
 80136c0:	4620      	mov	r0, r4
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	20013474 	.word	0x20013474

080136c8 <_malloc_r>:
 80136c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136cc:	1ccd      	adds	r5, r1, #3
 80136ce:	f025 0503 	bic.w	r5, r5, #3
 80136d2:	3508      	adds	r5, #8
 80136d4:	2d0c      	cmp	r5, #12
 80136d6:	bf38      	it	cc
 80136d8:	250c      	movcc	r5, #12
 80136da:	2d00      	cmp	r5, #0
 80136dc:	4607      	mov	r7, r0
 80136de:	db01      	blt.n	80136e4 <_malloc_r+0x1c>
 80136e0:	42a9      	cmp	r1, r5
 80136e2:	d905      	bls.n	80136f0 <_malloc_r+0x28>
 80136e4:	230c      	movs	r3, #12
 80136e6:	603b      	str	r3, [r7, #0]
 80136e8:	2600      	movs	r6, #0
 80136ea:	4630      	mov	r0, r6
 80136ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f0:	4e2e      	ldr	r6, [pc, #184]	; (80137ac <_malloc_r+0xe4>)
 80136f2:	f000 faff 	bl	8013cf4 <__malloc_lock>
 80136f6:	6833      	ldr	r3, [r6, #0]
 80136f8:	461c      	mov	r4, r3
 80136fa:	bb34      	cbnz	r4, 801374a <_malloc_r+0x82>
 80136fc:	4629      	mov	r1, r5
 80136fe:	4638      	mov	r0, r7
 8013700:	f7ff ffc2 	bl	8013688 <sbrk_aligned>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	4604      	mov	r4, r0
 8013708:	d14d      	bne.n	80137a6 <_malloc_r+0xde>
 801370a:	6834      	ldr	r4, [r6, #0]
 801370c:	4626      	mov	r6, r4
 801370e:	2e00      	cmp	r6, #0
 8013710:	d140      	bne.n	8013794 <_malloc_r+0xcc>
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	4631      	mov	r1, r6
 8013716:	4638      	mov	r0, r7
 8013718:	eb04 0803 	add.w	r8, r4, r3
 801371c:	f000 f9dc 	bl	8013ad8 <_sbrk_r>
 8013720:	4580      	cmp	r8, r0
 8013722:	d13a      	bne.n	801379a <_malloc_r+0xd2>
 8013724:	6821      	ldr	r1, [r4, #0]
 8013726:	3503      	adds	r5, #3
 8013728:	1a6d      	subs	r5, r5, r1
 801372a:	f025 0503 	bic.w	r5, r5, #3
 801372e:	3508      	adds	r5, #8
 8013730:	2d0c      	cmp	r5, #12
 8013732:	bf38      	it	cc
 8013734:	250c      	movcc	r5, #12
 8013736:	4629      	mov	r1, r5
 8013738:	4638      	mov	r0, r7
 801373a:	f7ff ffa5 	bl	8013688 <sbrk_aligned>
 801373e:	3001      	adds	r0, #1
 8013740:	d02b      	beq.n	801379a <_malloc_r+0xd2>
 8013742:	6823      	ldr	r3, [r4, #0]
 8013744:	442b      	add	r3, r5
 8013746:	6023      	str	r3, [r4, #0]
 8013748:	e00e      	b.n	8013768 <_malloc_r+0xa0>
 801374a:	6822      	ldr	r2, [r4, #0]
 801374c:	1b52      	subs	r2, r2, r5
 801374e:	d41e      	bmi.n	801378e <_malloc_r+0xc6>
 8013750:	2a0b      	cmp	r2, #11
 8013752:	d916      	bls.n	8013782 <_malloc_r+0xba>
 8013754:	1961      	adds	r1, r4, r5
 8013756:	42a3      	cmp	r3, r4
 8013758:	6025      	str	r5, [r4, #0]
 801375a:	bf18      	it	ne
 801375c:	6059      	strne	r1, [r3, #4]
 801375e:	6863      	ldr	r3, [r4, #4]
 8013760:	bf08      	it	eq
 8013762:	6031      	streq	r1, [r6, #0]
 8013764:	5162      	str	r2, [r4, r5]
 8013766:	604b      	str	r3, [r1, #4]
 8013768:	4638      	mov	r0, r7
 801376a:	f104 060b 	add.w	r6, r4, #11
 801376e:	f000 fac7 	bl	8013d00 <__malloc_unlock>
 8013772:	f026 0607 	bic.w	r6, r6, #7
 8013776:	1d23      	adds	r3, r4, #4
 8013778:	1af2      	subs	r2, r6, r3
 801377a:	d0b6      	beq.n	80136ea <_malloc_r+0x22>
 801377c:	1b9b      	subs	r3, r3, r6
 801377e:	50a3      	str	r3, [r4, r2]
 8013780:	e7b3      	b.n	80136ea <_malloc_r+0x22>
 8013782:	6862      	ldr	r2, [r4, #4]
 8013784:	42a3      	cmp	r3, r4
 8013786:	bf0c      	ite	eq
 8013788:	6032      	streq	r2, [r6, #0]
 801378a:	605a      	strne	r2, [r3, #4]
 801378c:	e7ec      	b.n	8013768 <_malloc_r+0xa0>
 801378e:	4623      	mov	r3, r4
 8013790:	6864      	ldr	r4, [r4, #4]
 8013792:	e7b2      	b.n	80136fa <_malloc_r+0x32>
 8013794:	4634      	mov	r4, r6
 8013796:	6876      	ldr	r6, [r6, #4]
 8013798:	e7b9      	b.n	801370e <_malloc_r+0x46>
 801379a:	230c      	movs	r3, #12
 801379c:	603b      	str	r3, [r7, #0]
 801379e:	4638      	mov	r0, r7
 80137a0:	f000 faae 	bl	8013d00 <__malloc_unlock>
 80137a4:	e7a1      	b.n	80136ea <_malloc_r+0x22>
 80137a6:	6025      	str	r5, [r4, #0]
 80137a8:	e7de      	b.n	8013768 <_malloc_r+0xa0>
 80137aa:	bf00      	nop
 80137ac:	20013470 	.word	0x20013470

080137b0 <_realloc_r>:
 80137b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b4:	4680      	mov	r8, r0
 80137b6:	4614      	mov	r4, r2
 80137b8:	460e      	mov	r6, r1
 80137ba:	b921      	cbnz	r1, 80137c6 <_realloc_r+0x16>
 80137bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137c0:	4611      	mov	r1, r2
 80137c2:	f7ff bf81 	b.w	80136c8 <_malloc_r>
 80137c6:	b92a      	cbnz	r2, 80137d4 <_realloc_r+0x24>
 80137c8:	f7ff ff12 	bl	80135f0 <_free_r>
 80137cc:	4625      	mov	r5, r4
 80137ce:	4628      	mov	r0, r5
 80137d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137d4:	f000 fa9a 	bl	8013d0c <_malloc_usable_size_r>
 80137d8:	4284      	cmp	r4, r0
 80137da:	4607      	mov	r7, r0
 80137dc:	d802      	bhi.n	80137e4 <_realloc_r+0x34>
 80137de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80137e2:	d812      	bhi.n	801380a <_realloc_r+0x5a>
 80137e4:	4621      	mov	r1, r4
 80137e6:	4640      	mov	r0, r8
 80137e8:	f7ff ff6e 	bl	80136c8 <_malloc_r>
 80137ec:	4605      	mov	r5, r0
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d0ed      	beq.n	80137ce <_realloc_r+0x1e>
 80137f2:	42bc      	cmp	r4, r7
 80137f4:	4622      	mov	r2, r4
 80137f6:	4631      	mov	r1, r6
 80137f8:	bf28      	it	cs
 80137fa:	463a      	movcs	r2, r7
 80137fc:	f7fb fde6 	bl	800f3cc <memcpy>
 8013800:	4631      	mov	r1, r6
 8013802:	4640      	mov	r0, r8
 8013804:	f7ff fef4 	bl	80135f0 <_free_r>
 8013808:	e7e1      	b.n	80137ce <_realloc_r+0x1e>
 801380a:	4635      	mov	r5, r6
 801380c:	e7df      	b.n	80137ce <_realloc_r+0x1e>

0801380e <__ssputs_r>:
 801380e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013812:	688e      	ldr	r6, [r1, #8]
 8013814:	429e      	cmp	r6, r3
 8013816:	4682      	mov	sl, r0
 8013818:	460c      	mov	r4, r1
 801381a:	4690      	mov	r8, r2
 801381c:	461f      	mov	r7, r3
 801381e:	d838      	bhi.n	8013892 <__ssputs_r+0x84>
 8013820:	898a      	ldrh	r2, [r1, #12]
 8013822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013826:	d032      	beq.n	801388e <__ssputs_r+0x80>
 8013828:	6825      	ldr	r5, [r4, #0]
 801382a:	6909      	ldr	r1, [r1, #16]
 801382c:	eba5 0901 	sub.w	r9, r5, r1
 8013830:	6965      	ldr	r5, [r4, #20]
 8013832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801383a:	3301      	adds	r3, #1
 801383c:	444b      	add	r3, r9
 801383e:	106d      	asrs	r5, r5, #1
 8013840:	429d      	cmp	r5, r3
 8013842:	bf38      	it	cc
 8013844:	461d      	movcc	r5, r3
 8013846:	0553      	lsls	r3, r2, #21
 8013848:	d531      	bpl.n	80138ae <__ssputs_r+0xa0>
 801384a:	4629      	mov	r1, r5
 801384c:	f7ff ff3c 	bl	80136c8 <_malloc_r>
 8013850:	4606      	mov	r6, r0
 8013852:	b950      	cbnz	r0, 801386a <__ssputs_r+0x5c>
 8013854:	230c      	movs	r3, #12
 8013856:	f8ca 3000 	str.w	r3, [sl]
 801385a:	89a3      	ldrh	r3, [r4, #12]
 801385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013860:	81a3      	strh	r3, [r4, #12]
 8013862:	f04f 30ff 	mov.w	r0, #4294967295
 8013866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386a:	6921      	ldr	r1, [r4, #16]
 801386c:	464a      	mov	r2, r9
 801386e:	f7fb fdad 	bl	800f3cc <memcpy>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801387c:	81a3      	strh	r3, [r4, #12]
 801387e:	6126      	str	r6, [r4, #16]
 8013880:	6165      	str	r5, [r4, #20]
 8013882:	444e      	add	r6, r9
 8013884:	eba5 0509 	sub.w	r5, r5, r9
 8013888:	6026      	str	r6, [r4, #0]
 801388a:	60a5      	str	r5, [r4, #8]
 801388c:	463e      	mov	r6, r7
 801388e:	42be      	cmp	r6, r7
 8013890:	d900      	bls.n	8013894 <__ssputs_r+0x86>
 8013892:	463e      	mov	r6, r7
 8013894:	6820      	ldr	r0, [r4, #0]
 8013896:	4632      	mov	r2, r6
 8013898:	4641      	mov	r1, r8
 801389a:	f7ff f9b7 	bl	8012c0c <memmove>
 801389e:	68a3      	ldr	r3, [r4, #8]
 80138a0:	1b9b      	subs	r3, r3, r6
 80138a2:	60a3      	str	r3, [r4, #8]
 80138a4:	6823      	ldr	r3, [r4, #0]
 80138a6:	4433      	add	r3, r6
 80138a8:	6023      	str	r3, [r4, #0]
 80138aa:	2000      	movs	r0, #0
 80138ac:	e7db      	b.n	8013866 <__ssputs_r+0x58>
 80138ae:	462a      	mov	r2, r5
 80138b0:	f7ff ff7e 	bl	80137b0 <_realloc_r>
 80138b4:	4606      	mov	r6, r0
 80138b6:	2800      	cmp	r0, #0
 80138b8:	d1e1      	bne.n	801387e <__ssputs_r+0x70>
 80138ba:	6921      	ldr	r1, [r4, #16]
 80138bc:	4650      	mov	r0, sl
 80138be:	f7ff fe97 	bl	80135f0 <_free_r>
 80138c2:	e7c7      	b.n	8013854 <__ssputs_r+0x46>

080138c4 <_svfiprintf_r>:
 80138c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c8:	4698      	mov	r8, r3
 80138ca:	898b      	ldrh	r3, [r1, #12]
 80138cc:	061b      	lsls	r3, r3, #24
 80138ce:	b09d      	sub	sp, #116	; 0x74
 80138d0:	4607      	mov	r7, r0
 80138d2:	460d      	mov	r5, r1
 80138d4:	4614      	mov	r4, r2
 80138d6:	d50e      	bpl.n	80138f6 <_svfiprintf_r+0x32>
 80138d8:	690b      	ldr	r3, [r1, #16]
 80138da:	b963      	cbnz	r3, 80138f6 <_svfiprintf_r+0x32>
 80138dc:	2140      	movs	r1, #64	; 0x40
 80138de:	f7ff fef3 	bl	80136c8 <_malloc_r>
 80138e2:	6028      	str	r0, [r5, #0]
 80138e4:	6128      	str	r0, [r5, #16]
 80138e6:	b920      	cbnz	r0, 80138f2 <_svfiprintf_r+0x2e>
 80138e8:	230c      	movs	r3, #12
 80138ea:	603b      	str	r3, [r7, #0]
 80138ec:	f04f 30ff 	mov.w	r0, #4294967295
 80138f0:	e0d1      	b.n	8013a96 <_svfiprintf_r+0x1d2>
 80138f2:	2340      	movs	r3, #64	; 0x40
 80138f4:	616b      	str	r3, [r5, #20]
 80138f6:	2300      	movs	r3, #0
 80138f8:	9309      	str	r3, [sp, #36]	; 0x24
 80138fa:	2320      	movs	r3, #32
 80138fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013900:	f8cd 800c 	str.w	r8, [sp, #12]
 8013904:	2330      	movs	r3, #48	; 0x30
 8013906:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013ab0 <_svfiprintf_r+0x1ec>
 801390a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801390e:	f04f 0901 	mov.w	r9, #1
 8013912:	4623      	mov	r3, r4
 8013914:	469a      	mov	sl, r3
 8013916:	f813 2b01 	ldrb.w	r2, [r3], #1
 801391a:	b10a      	cbz	r2, 8013920 <_svfiprintf_r+0x5c>
 801391c:	2a25      	cmp	r2, #37	; 0x25
 801391e:	d1f9      	bne.n	8013914 <_svfiprintf_r+0x50>
 8013920:	ebba 0b04 	subs.w	fp, sl, r4
 8013924:	d00b      	beq.n	801393e <_svfiprintf_r+0x7a>
 8013926:	465b      	mov	r3, fp
 8013928:	4622      	mov	r2, r4
 801392a:	4629      	mov	r1, r5
 801392c:	4638      	mov	r0, r7
 801392e:	f7ff ff6e 	bl	801380e <__ssputs_r>
 8013932:	3001      	adds	r0, #1
 8013934:	f000 80aa 	beq.w	8013a8c <_svfiprintf_r+0x1c8>
 8013938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801393a:	445a      	add	r2, fp
 801393c:	9209      	str	r2, [sp, #36]	; 0x24
 801393e:	f89a 3000 	ldrb.w	r3, [sl]
 8013942:	2b00      	cmp	r3, #0
 8013944:	f000 80a2 	beq.w	8013a8c <_svfiprintf_r+0x1c8>
 8013948:	2300      	movs	r3, #0
 801394a:	f04f 32ff 	mov.w	r2, #4294967295
 801394e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013952:	f10a 0a01 	add.w	sl, sl, #1
 8013956:	9304      	str	r3, [sp, #16]
 8013958:	9307      	str	r3, [sp, #28]
 801395a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801395e:	931a      	str	r3, [sp, #104]	; 0x68
 8013960:	4654      	mov	r4, sl
 8013962:	2205      	movs	r2, #5
 8013964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013968:	4851      	ldr	r0, [pc, #324]	; (8013ab0 <_svfiprintf_r+0x1ec>)
 801396a:	f7ec fc61 	bl	8000230 <memchr>
 801396e:	9a04      	ldr	r2, [sp, #16]
 8013970:	b9d8      	cbnz	r0, 80139aa <_svfiprintf_r+0xe6>
 8013972:	06d0      	lsls	r0, r2, #27
 8013974:	bf44      	itt	mi
 8013976:	2320      	movmi	r3, #32
 8013978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801397c:	0711      	lsls	r1, r2, #28
 801397e:	bf44      	itt	mi
 8013980:	232b      	movmi	r3, #43	; 0x2b
 8013982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013986:	f89a 3000 	ldrb.w	r3, [sl]
 801398a:	2b2a      	cmp	r3, #42	; 0x2a
 801398c:	d015      	beq.n	80139ba <_svfiprintf_r+0xf6>
 801398e:	9a07      	ldr	r2, [sp, #28]
 8013990:	4654      	mov	r4, sl
 8013992:	2000      	movs	r0, #0
 8013994:	f04f 0c0a 	mov.w	ip, #10
 8013998:	4621      	mov	r1, r4
 801399a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801399e:	3b30      	subs	r3, #48	; 0x30
 80139a0:	2b09      	cmp	r3, #9
 80139a2:	d94e      	bls.n	8013a42 <_svfiprintf_r+0x17e>
 80139a4:	b1b0      	cbz	r0, 80139d4 <_svfiprintf_r+0x110>
 80139a6:	9207      	str	r2, [sp, #28]
 80139a8:	e014      	b.n	80139d4 <_svfiprintf_r+0x110>
 80139aa:	eba0 0308 	sub.w	r3, r0, r8
 80139ae:	fa09 f303 	lsl.w	r3, r9, r3
 80139b2:	4313      	orrs	r3, r2
 80139b4:	9304      	str	r3, [sp, #16]
 80139b6:	46a2      	mov	sl, r4
 80139b8:	e7d2      	b.n	8013960 <_svfiprintf_r+0x9c>
 80139ba:	9b03      	ldr	r3, [sp, #12]
 80139bc:	1d19      	adds	r1, r3, #4
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	9103      	str	r1, [sp, #12]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	bfbb      	ittet	lt
 80139c6:	425b      	neglt	r3, r3
 80139c8:	f042 0202 	orrlt.w	r2, r2, #2
 80139cc:	9307      	strge	r3, [sp, #28]
 80139ce:	9307      	strlt	r3, [sp, #28]
 80139d0:	bfb8      	it	lt
 80139d2:	9204      	strlt	r2, [sp, #16]
 80139d4:	7823      	ldrb	r3, [r4, #0]
 80139d6:	2b2e      	cmp	r3, #46	; 0x2e
 80139d8:	d10c      	bne.n	80139f4 <_svfiprintf_r+0x130>
 80139da:	7863      	ldrb	r3, [r4, #1]
 80139dc:	2b2a      	cmp	r3, #42	; 0x2a
 80139de:	d135      	bne.n	8013a4c <_svfiprintf_r+0x188>
 80139e0:	9b03      	ldr	r3, [sp, #12]
 80139e2:	1d1a      	adds	r2, r3, #4
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	9203      	str	r2, [sp, #12]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	bfb8      	it	lt
 80139ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80139f0:	3402      	adds	r4, #2
 80139f2:	9305      	str	r3, [sp, #20]
 80139f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013ac0 <_svfiprintf_r+0x1fc>
 80139f8:	7821      	ldrb	r1, [r4, #0]
 80139fa:	2203      	movs	r2, #3
 80139fc:	4650      	mov	r0, sl
 80139fe:	f7ec fc17 	bl	8000230 <memchr>
 8013a02:	b140      	cbz	r0, 8013a16 <_svfiprintf_r+0x152>
 8013a04:	2340      	movs	r3, #64	; 0x40
 8013a06:	eba0 000a 	sub.w	r0, r0, sl
 8013a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8013a0e:	9b04      	ldr	r3, [sp, #16]
 8013a10:	4303      	orrs	r3, r0
 8013a12:	3401      	adds	r4, #1
 8013a14:	9304      	str	r3, [sp, #16]
 8013a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a1a:	4826      	ldr	r0, [pc, #152]	; (8013ab4 <_svfiprintf_r+0x1f0>)
 8013a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a20:	2206      	movs	r2, #6
 8013a22:	f7ec fc05 	bl	8000230 <memchr>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d038      	beq.n	8013a9c <_svfiprintf_r+0x1d8>
 8013a2a:	4b23      	ldr	r3, [pc, #140]	; (8013ab8 <_svfiprintf_r+0x1f4>)
 8013a2c:	bb1b      	cbnz	r3, 8013a76 <_svfiprintf_r+0x1b2>
 8013a2e:	9b03      	ldr	r3, [sp, #12]
 8013a30:	3307      	adds	r3, #7
 8013a32:	f023 0307 	bic.w	r3, r3, #7
 8013a36:	3308      	adds	r3, #8
 8013a38:	9303      	str	r3, [sp, #12]
 8013a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a3c:	4433      	add	r3, r6
 8013a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a40:	e767      	b.n	8013912 <_svfiprintf_r+0x4e>
 8013a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a46:	460c      	mov	r4, r1
 8013a48:	2001      	movs	r0, #1
 8013a4a:	e7a5      	b.n	8013998 <_svfiprintf_r+0xd4>
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	3401      	adds	r4, #1
 8013a50:	9305      	str	r3, [sp, #20]
 8013a52:	4619      	mov	r1, r3
 8013a54:	f04f 0c0a 	mov.w	ip, #10
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a5e:	3a30      	subs	r2, #48	; 0x30
 8013a60:	2a09      	cmp	r2, #9
 8013a62:	d903      	bls.n	8013a6c <_svfiprintf_r+0x1a8>
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d0c5      	beq.n	80139f4 <_svfiprintf_r+0x130>
 8013a68:	9105      	str	r1, [sp, #20]
 8013a6a:	e7c3      	b.n	80139f4 <_svfiprintf_r+0x130>
 8013a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a70:	4604      	mov	r4, r0
 8013a72:	2301      	movs	r3, #1
 8013a74:	e7f0      	b.n	8013a58 <_svfiprintf_r+0x194>
 8013a76:	ab03      	add	r3, sp, #12
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	462a      	mov	r2, r5
 8013a7c:	4b0f      	ldr	r3, [pc, #60]	; (8013abc <_svfiprintf_r+0x1f8>)
 8013a7e:	a904      	add	r1, sp, #16
 8013a80:	4638      	mov	r0, r7
 8013a82:	f7fb feb3 	bl	800f7ec <_printf_float>
 8013a86:	1c42      	adds	r2, r0, #1
 8013a88:	4606      	mov	r6, r0
 8013a8a:	d1d6      	bne.n	8013a3a <_svfiprintf_r+0x176>
 8013a8c:	89ab      	ldrh	r3, [r5, #12]
 8013a8e:	065b      	lsls	r3, r3, #25
 8013a90:	f53f af2c 	bmi.w	80138ec <_svfiprintf_r+0x28>
 8013a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a96:	b01d      	add	sp, #116	; 0x74
 8013a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a9c:	ab03      	add	r3, sp, #12
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	462a      	mov	r2, r5
 8013aa2:	4b06      	ldr	r3, [pc, #24]	; (8013abc <_svfiprintf_r+0x1f8>)
 8013aa4:	a904      	add	r1, sp, #16
 8013aa6:	4638      	mov	r0, r7
 8013aa8:	f7fc f944 	bl	800fd34 <_printf_i>
 8013aac:	e7eb      	b.n	8013a86 <_svfiprintf_r+0x1c2>
 8013aae:	bf00      	nop
 8013ab0:	0802a8cc 	.word	0x0802a8cc
 8013ab4:	0802a8d6 	.word	0x0802a8d6
 8013ab8:	0800f7ed 	.word	0x0800f7ed
 8013abc:	0801380f 	.word	0x0801380f
 8013ac0:	0802a8d2 	.word	0x0802a8d2
 8013ac4:	00000000 	.word	0x00000000

08013ac8 <nan>:
 8013ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ad0 <nan+0x8>
 8013acc:	4770      	bx	lr
 8013ace:	bf00      	nop
 8013ad0:	00000000 	.word	0x00000000
 8013ad4:	7ff80000 	.word	0x7ff80000

08013ad8 <_sbrk_r>:
 8013ad8:	b538      	push	{r3, r4, r5, lr}
 8013ada:	4d06      	ldr	r5, [pc, #24]	; (8013af4 <_sbrk_r+0x1c>)
 8013adc:	2300      	movs	r3, #0
 8013ade:	4604      	mov	r4, r0
 8013ae0:	4608      	mov	r0, r1
 8013ae2:	602b      	str	r3, [r5, #0]
 8013ae4:	f7f0 f8f4 	bl	8003cd0 <_sbrk>
 8013ae8:	1c43      	adds	r3, r0, #1
 8013aea:	d102      	bne.n	8013af2 <_sbrk_r+0x1a>
 8013aec:	682b      	ldr	r3, [r5, #0]
 8013aee:	b103      	cbz	r3, 8013af2 <_sbrk_r+0x1a>
 8013af0:	6023      	str	r3, [r4, #0]
 8013af2:	bd38      	pop	{r3, r4, r5, pc}
 8013af4:	20013478 	.word	0x20013478

08013af8 <_raise_r>:
 8013af8:	291f      	cmp	r1, #31
 8013afa:	b538      	push	{r3, r4, r5, lr}
 8013afc:	4604      	mov	r4, r0
 8013afe:	460d      	mov	r5, r1
 8013b00:	d904      	bls.n	8013b0c <_raise_r+0x14>
 8013b02:	2316      	movs	r3, #22
 8013b04:	6003      	str	r3, [r0, #0]
 8013b06:	f04f 30ff 	mov.w	r0, #4294967295
 8013b0a:	bd38      	pop	{r3, r4, r5, pc}
 8013b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b0e:	b112      	cbz	r2, 8013b16 <_raise_r+0x1e>
 8013b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b14:	b94b      	cbnz	r3, 8013b2a <_raise_r+0x32>
 8013b16:	4620      	mov	r0, r4
 8013b18:	f000 f830 	bl	8013b7c <_getpid_r>
 8013b1c:	462a      	mov	r2, r5
 8013b1e:	4601      	mov	r1, r0
 8013b20:	4620      	mov	r0, r4
 8013b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b26:	f000 b817 	b.w	8013b58 <_kill_r>
 8013b2a:	2b01      	cmp	r3, #1
 8013b2c:	d00a      	beq.n	8013b44 <_raise_r+0x4c>
 8013b2e:	1c59      	adds	r1, r3, #1
 8013b30:	d103      	bne.n	8013b3a <_raise_r+0x42>
 8013b32:	2316      	movs	r3, #22
 8013b34:	6003      	str	r3, [r0, #0]
 8013b36:	2001      	movs	r0, #1
 8013b38:	e7e7      	b.n	8013b0a <_raise_r+0x12>
 8013b3a:	2400      	movs	r4, #0
 8013b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b40:	4628      	mov	r0, r5
 8013b42:	4798      	blx	r3
 8013b44:	2000      	movs	r0, #0
 8013b46:	e7e0      	b.n	8013b0a <_raise_r+0x12>

08013b48 <raise>:
 8013b48:	4b02      	ldr	r3, [pc, #8]	; (8013b54 <raise+0xc>)
 8013b4a:	4601      	mov	r1, r0
 8013b4c:	6818      	ldr	r0, [r3, #0]
 8013b4e:	f7ff bfd3 	b.w	8013af8 <_raise_r>
 8013b52:	bf00      	nop
 8013b54:	200000dc 	.word	0x200000dc

08013b58 <_kill_r>:
 8013b58:	b538      	push	{r3, r4, r5, lr}
 8013b5a:	4d07      	ldr	r5, [pc, #28]	; (8013b78 <_kill_r+0x20>)
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	4604      	mov	r4, r0
 8013b60:	4608      	mov	r0, r1
 8013b62:	4611      	mov	r1, r2
 8013b64:	602b      	str	r3, [r5, #0]
 8013b66:	f7f0 f847 	bl	8003bf8 <_kill>
 8013b6a:	1c43      	adds	r3, r0, #1
 8013b6c:	d102      	bne.n	8013b74 <_kill_r+0x1c>
 8013b6e:	682b      	ldr	r3, [r5, #0]
 8013b70:	b103      	cbz	r3, 8013b74 <_kill_r+0x1c>
 8013b72:	6023      	str	r3, [r4, #0]
 8013b74:	bd38      	pop	{r3, r4, r5, pc}
 8013b76:	bf00      	nop
 8013b78:	20013478 	.word	0x20013478

08013b7c <_getpid_r>:
 8013b7c:	f7f0 b834 	b.w	8003be8 <_getpid>

08013b80 <__sread>:
 8013b80:	b510      	push	{r4, lr}
 8013b82:	460c      	mov	r4, r1
 8013b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b88:	f000 f8c8 	bl	8013d1c <_read_r>
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	bfab      	itete	ge
 8013b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b92:	89a3      	ldrhlt	r3, [r4, #12]
 8013b94:	181b      	addge	r3, r3, r0
 8013b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b9a:	bfac      	ite	ge
 8013b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b9e:	81a3      	strhlt	r3, [r4, #12]
 8013ba0:	bd10      	pop	{r4, pc}

08013ba2 <__swrite>:
 8013ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba6:	461f      	mov	r7, r3
 8013ba8:	898b      	ldrh	r3, [r1, #12]
 8013baa:	05db      	lsls	r3, r3, #23
 8013bac:	4605      	mov	r5, r0
 8013bae:	460c      	mov	r4, r1
 8013bb0:	4616      	mov	r6, r2
 8013bb2:	d505      	bpl.n	8013bc0 <__swrite+0x1e>
 8013bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb8:	2302      	movs	r3, #2
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f000 f888 	bl	8013cd0 <_lseek_r>
 8013bc0:	89a3      	ldrh	r3, [r4, #12]
 8013bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bca:	81a3      	strh	r3, [r4, #12]
 8013bcc:	4632      	mov	r2, r6
 8013bce:	463b      	mov	r3, r7
 8013bd0:	4628      	mov	r0, r5
 8013bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd6:	f000 b837 	b.w	8013c48 <_write_r>

08013bda <__sseek>:
 8013bda:	b510      	push	{r4, lr}
 8013bdc:	460c      	mov	r4, r1
 8013bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be2:	f000 f875 	bl	8013cd0 <_lseek_r>
 8013be6:	1c43      	adds	r3, r0, #1
 8013be8:	89a3      	ldrh	r3, [r4, #12]
 8013bea:	bf15      	itete	ne
 8013bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8013bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013bf6:	81a3      	strheq	r3, [r4, #12]
 8013bf8:	bf18      	it	ne
 8013bfa:	81a3      	strhne	r3, [r4, #12]
 8013bfc:	bd10      	pop	{r4, pc}

08013bfe <__sclose>:
 8013bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c02:	f000 b833 	b.w	8013c6c <_close_r>

08013c06 <strncmp>:
 8013c06:	b510      	push	{r4, lr}
 8013c08:	b17a      	cbz	r2, 8013c2a <strncmp+0x24>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	3901      	subs	r1, #1
 8013c0e:	1884      	adds	r4, r0, r2
 8013c10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013c14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013c18:	4290      	cmp	r0, r2
 8013c1a:	d101      	bne.n	8013c20 <strncmp+0x1a>
 8013c1c:	42a3      	cmp	r3, r4
 8013c1e:	d101      	bne.n	8013c24 <strncmp+0x1e>
 8013c20:	1a80      	subs	r0, r0, r2
 8013c22:	bd10      	pop	{r4, pc}
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d1f3      	bne.n	8013c10 <strncmp+0xa>
 8013c28:	e7fa      	b.n	8013c20 <strncmp+0x1a>
 8013c2a:	4610      	mov	r0, r2
 8013c2c:	e7f9      	b.n	8013c22 <strncmp+0x1c>

08013c2e <__ascii_wctomb>:
 8013c2e:	b149      	cbz	r1, 8013c44 <__ascii_wctomb+0x16>
 8013c30:	2aff      	cmp	r2, #255	; 0xff
 8013c32:	bf85      	ittet	hi
 8013c34:	238a      	movhi	r3, #138	; 0x8a
 8013c36:	6003      	strhi	r3, [r0, #0]
 8013c38:	700a      	strbls	r2, [r1, #0]
 8013c3a:	f04f 30ff 	movhi.w	r0, #4294967295
 8013c3e:	bf98      	it	ls
 8013c40:	2001      	movls	r0, #1
 8013c42:	4770      	bx	lr
 8013c44:	4608      	mov	r0, r1
 8013c46:	4770      	bx	lr

08013c48 <_write_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4d07      	ldr	r5, [pc, #28]	; (8013c68 <_write_r+0x20>)
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	4608      	mov	r0, r1
 8013c50:	4611      	mov	r1, r2
 8013c52:	2200      	movs	r2, #0
 8013c54:	602a      	str	r2, [r5, #0]
 8013c56:	461a      	mov	r2, r3
 8013c58:	f7ef fac4 	bl	80031e4 <_write>
 8013c5c:	1c43      	adds	r3, r0, #1
 8013c5e:	d102      	bne.n	8013c66 <_write_r+0x1e>
 8013c60:	682b      	ldr	r3, [r5, #0]
 8013c62:	b103      	cbz	r3, 8013c66 <_write_r+0x1e>
 8013c64:	6023      	str	r3, [r4, #0]
 8013c66:	bd38      	pop	{r3, r4, r5, pc}
 8013c68:	20013478 	.word	0x20013478

08013c6c <_close_r>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	4d06      	ldr	r5, [pc, #24]	; (8013c88 <_close_r+0x1c>)
 8013c70:	2300      	movs	r3, #0
 8013c72:	4604      	mov	r4, r0
 8013c74:	4608      	mov	r0, r1
 8013c76:	602b      	str	r3, [r5, #0]
 8013c78:	f7ef fff5 	bl	8003c66 <_close>
 8013c7c:	1c43      	adds	r3, r0, #1
 8013c7e:	d102      	bne.n	8013c86 <_close_r+0x1a>
 8013c80:	682b      	ldr	r3, [r5, #0]
 8013c82:	b103      	cbz	r3, 8013c86 <_close_r+0x1a>
 8013c84:	6023      	str	r3, [r4, #0]
 8013c86:	bd38      	pop	{r3, r4, r5, pc}
 8013c88:	20013478 	.word	0x20013478

08013c8c <_fstat_r>:
 8013c8c:	b538      	push	{r3, r4, r5, lr}
 8013c8e:	4d07      	ldr	r5, [pc, #28]	; (8013cac <_fstat_r+0x20>)
 8013c90:	2300      	movs	r3, #0
 8013c92:	4604      	mov	r4, r0
 8013c94:	4608      	mov	r0, r1
 8013c96:	4611      	mov	r1, r2
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	f7ef fff0 	bl	8003c7e <_fstat>
 8013c9e:	1c43      	adds	r3, r0, #1
 8013ca0:	d102      	bne.n	8013ca8 <_fstat_r+0x1c>
 8013ca2:	682b      	ldr	r3, [r5, #0]
 8013ca4:	b103      	cbz	r3, 8013ca8 <_fstat_r+0x1c>
 8013ca6:	6023      	str	r3, [r4, #0]
 8013ca8:	bd38      	pop	{r3, r4, r5, pc}
 8013caa:	bf00      	nop
 8013cac:	20013478 	.word	0x20013478

08013cb0 <_isatty_r>:
 8013cb0:	b538      	push	{r3, r4, r5, lr}
 8013cb2:	4d06      	ldr	r5, [pc, #24]	; (8013ccc <_isatty_r+0x1c>)
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	4608      	mov	r0, r1
 8013cba:	602b      	str	r3, [r5, #0]
 8013cbc:	f7ef ffef 	bl	8003c9e <_isatty>
 8013cc0:	1c43      	adds	r3, r0, #1
 8013cc2:	d102      	bne.n	8013cca <_isatty_r+0x1a>
 8013cc4:	682b      	ldr	r3, [r5, #0]
 8013cc6:	b103      	cbz	r3, 8013cca <_isatty_r+0x1a>
 8013cc8:	6023      	str	r3, [r4, #0]
 8013cca:	bd38      	pop	{r3, r4, r5, pc}
 8013ccc:	20013478 	.word	0x20013478

08013cd0 <_lseek_r>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	4d07      	ldr	r5, [pc, #28]	; (8013cf0 <_lseek_r+0x20>)
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	4608      	mov	r0, r1
 8013cd8:	4611      	mov	r1, r2
 8013cda:	2200      	movs	r2, #0
 8013cdc:	602a      	str	r2, [r5, #0]
 8013cde:	461a      	mov	r2, r3
 8013ce0:	f7ef ffe8 	bl	8003cb4 <_lseek>
 8013ce4:	1c43      	adds	r3, r0, #1
 8013ce6:	d102      	bne.n	8013cee <_lseek_r+0x1e>
 8013ce8:	682b      	ldr	r3, [r5, #0]
 8013cea:	b103      	cbz	r3, 8013cee <_lseek_r+0x1e>
 8013cec:	6023      	str	r3, [r4, #0]
 8013cee:	bd38      	pop	{r3, r4, r5, pc}
 8013cf0:	20013478 	.word	0x20013478

08013cf4 <__malloc_lock>:
 8013cf4:	4801      	ldr	r0, [pc, #4]	; (8013cfc <__malloc_lock+0x8>)
 8013cf6:	f7fe bf08 	b.w	8012b0a <__retarget_lock_acquire_recursive>
 8013cfa:	bf00      	nop
 8013cfc:	2001346a 	.word	0x2001346a

08013d00 <__malloc_unlock>:
 8013d00:	4801      	ldr	r0, [pc, #4]	; (8013d08 <__malloc_unlock+0x8>)
 8013d02:	f7fe bf03 	b.w	8012b0c <__retarget_lock_release_recursive>
 8013d06:	bf00      	nop
 8013d08:	2001346a 	.word	0x2001346a

08013d0c <_malloc_usable_size_r>:
 8013d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d10:	1f18      	subs	r0, r3, #4
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	bfbc      	itt	lt
 8013d16:	580b      	ldrlt	r3, [r1, r0]
 8013d18:	18c0      	addlt	r0, r0, r3
 8013d1a:	4770      	bx	lr

08013d1c <_read_r>:
 8013d1c:	b538      	push	{r3, r4, r5, lr}
 8013d1e:	4d07      	ldr	r5, [pc, #28]	; (8013d3c <_read_r+0x20>)
 8013d20:	4604      	mov	r4, r0
 8013d22:	4608      	mov	r0, r1
 8013d24:	4611      	mov	r1, r2
 8013d26:	2200      	movs	r2, #0
 8013d28:	602a      	str	r2, [r5, #0]
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	f7ef ff7e 	bl	8003c2c <_read>
 8013d30:	1c43      	adds	r3, r0, #1
 8013d32:	d102      	bne.n	8013d3a <_read_r+0x1e>
 8013d34:	682b      	ldr	r3, [r5, #0]
 8013d36:	b103      	cbz	r3, 8013d3a <_read_r+0x1e>
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	bd38      	pop	{r3, r4, r5, pc}
 8013d3c:	20013478 	.word	0x20013478

08013d40 <atanf>:
 8013d40:	b538      	push	{r3, r4, r5, lr}
 8013d42:	ee10 5a10 	vmov	r5, s0
 8013d46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013d4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013d4e:	eef0 7a40 	vmov.f32	s15, s0
 8013d52:	db0b      	blt.n	8013d6c <atanf+0x2c>
 8013d54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013d58:	dc5b      	bgt.n	8013e12 <atanf+0xd2>
 8013d5a:	eddf 7a53 	vldr	s15, [pc, #332]	; 8013ea8 <atanf+0x168>
 8013d5e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8013eac <atanf+0x16c>
 8013d62:	2d00      	cmp	r5, #0
 8013d64:	bfc8      	it	gt
 8013d66:	eeb0 0a67 	vmovgt.f32	s0, s15
 8013d6a:	bd38      	pop	{r3, r4, r5, pc}
 8013d6c:	4b50      	ldr	r3, [pc, #320]	; (8013eb0 <atanf+0x170>)
 8013d6e:	429c      	cmp	r4, r3
 8013d70:	dc5e      	bgt.n	8013e30 <atanf+0xf0>
 8013d72:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013d76:	db4f      	blt.n	8013e18 <atanf+0xd8>
 8013d78:	f04f 33ff 	mov.w	r3, #4294967295
 8013d7c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013d80:	eddf 4a4c 	vldr	s9, [pc, #304]	; 8013eb4 <atanf+0x174>
 8013d84:	eddf 5a4c 	vldr	s11, [pc, #304]	; 8013eb8 <atanf+0x178>
 8013d88:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8013ebc <atanf+0x17c>
 8013d8c:	ed9f 4a4c 	vldr	s8, [pc, #304]	; 8013ec0 <atanf+0x180>
 8013d90:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013d94:	eeb0 6a66 	vmov.f32	s12, s13
 8013d98:	eee7 5a24 	vfma.f32	s11, s14, s9
 8013d9c:	1c5a      	adds	r2, r3, #1
 8013d9e:	eddf 4a49 	vldr	s9, [pc, #292]	; 8013ec4 <atanf+0x184>
 8013da2:	eddf 6a49 	vldr	s13, [pc, #292]	; 8013ec8 <atanf+0x188>
 8013da6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013daa:	eee7 6a24 	vfma.f32	s13, s14, s9
 8013dae:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013ecc <atanf+0x18c>
 8013db2:	eddf 4a47 	vldr	s9, [pc, #284]	; 8013ed0 <atanf+0x190>
 8013db6:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013dba:	eea5 4a07 	vfma.f32	s8, s10, s14
 8013dbe:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8013ed4 <atanf+0x194>
 8013dc2:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013ed8 <atanf+0x198>
 8013dc6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013dca:	eee4 4a07 	vfma.f32	s9, s8, s14
 8013dce:	eddf 5a43 	vldr	s11, [pc, #268]	; 8013edc <atanf+0x19c>
 8013dd2:	eee4 6a87 	vfma.f32	s13, s9, s14
 8013dd6:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013dda:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013dde:	ee25 7a87 	vmul.f32	s14, s11, s14
 8013de2:	d03a      	beq.n	8013e5a <atanf+0x11a>
 8013de4:	4a3e      	ldr	r2, [pc, #248]	; (8013ee0 <atanf+0x1a0>)
 8013de6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013dea:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013dee:	ed92 0a00 	vldr	s0, [r2]
 8013df2:	4a3c      	ldr	r2, [pc, #240]	; (8013ee4 <atanf+0x1a4>)
 8013df4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8013df8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013dfc:	2d00      	cmp	r5, #0
 8013dfe:	ed93 7a00 	vldr	s14, [r3]
 8013e02:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013e06:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013e0a:	daae      	bge.n	8013d6a <atanf+0x2a>
 8013e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8013e10:	bd38      	pop	{r3, r4, r5, pc}
 8013e12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e16:	bd38      	pop	{r3, r4, r5, pc}
 8013e18:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013ee8 <atanf+0x1a8>
 8013e1c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e24:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2c:	dda4      	ble.n	8013d78 <atanf+0x38>
 8013e2e:	bd38      	pop	{r3, r4, r5, pc}
 8013e30:	f000 f898 	bl	8013f64 <fabsf>
 8013e34:	4b2d      	ldr	r3, [pc, #180]	; (8013eec <atanf+0x1ac>)
 8013e36:	429c      	cmp	r4, r3
 8013e38:	dc16      	bgt.n	8013e68 <atanf+0x128>
 8013e3a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013e3e:	429c      	cmp	r4, r3
 8013e40:	dc27      	bgt.n	8013e92 <atanf+0x152>
 8013e42:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013e46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013e4a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013e4e:	2300      	movs	r3, #0
 8013e50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013e58:	e790      	b.n	8013d7c <atanf+0x3c>
 8013e5a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013e5e:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8013e62:	eeb0 0a67 	vmov.f32	s0, s15
 8013e66:	bd38      	pop	{r3, r4, r5, pc}
 8013e68:	4b21      	ldr	r3, [pc, #132]	; (8013ef0 <atanf+0x1b0>)
 8013e6a:	429c      	cmp	r4, r3
 8013e6c:	dc0b      	bgt.n	8013e86 <atanf+0x146>
 8013e6e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e76:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013e7a:	2302      	movs	r3, #2
 8013e7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013e80:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8013e84:	e77a      	b.n	8013d7c <atanf+0x3c>
 8013e86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013e8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013e8e:	2303      	movs	r3, #3
 8013e90:	e774      	b.n	8013d7c <atanf+0x3c>
 8013e92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e96:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013e9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013ea4:	e76a      	b.n	8013d7c <atanf+0x3c>
 8013ea6:	bf00      	nop
 8013ea8:	3fc90fdb 	.word	0x3fc90fdb
 8013eac:	bfc90fdb 	.word	0xbfc90fdb
 8013eb0:	3edfffff 	.word	0x3edfffff
 8013eb4:	3c8569d7 	.word	0x3c8569d7
 8013eb8:	3d4bda59 	.word	0x3d4bda59
 8013ebc:	3d886b35 	.word	0x3d886b35
 8013ec0:	3dba2e6e 	.word	0x3dba2e6e
 8013ec4:	bd15a221 	.word	0xbd15a221
 8013ec8:	bd6ef16b 	.word	0xbd6ef16b
 8013ecc:	bd9d8795 	.word	0xbd9d8795
 8013ed0:	3e124925 	.word	0x3e124925
 8013ed4:	bde38e38 	.word	0xbde38e38
 8013ed8:	3eaaaaab 	.word	0x3eaaaaab
 8013edc:	be4ccccd 	.word	0xbe4ccccd
 8013ee0:	0802ada4 	.word	0x0802ada4
 8013ee4:	0802ad94 	.word	0x0802ad94
 8013ee8:	7149f2ca 	.word	0x7149f2ca
 8013eec:	3f97ffff 	.word	0x3f97ffff
 8013ef0:	401bffff 	.word	0x401bffff

08013ef4 <cosf>:
 8013ef4:	ee10 3a10 	vmov	r3, s0
 8013ef8:	4a18      	ldr	r2, [pc, #96]	; (8013f5c <cosf+0x68>)
 8013efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013efe:	4293      	cmp	r3, r2
 8013f00:	dd1b      	ble.n	8013f3a <cosf+0x46>
 8013f02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f06:	db02      	blt.n	8013f0e <cosf+0x1a>
 8013f08:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013f0c:	4770      	bx	lr
 8013f0e:	b500      	push	{lr}
 8013f10:	b083      	sub	sp, #12
 8013f12:	4668      	mov	r0, sp
 8013f14:	f000 fa8e 	bl	8014434 <__ieee754_rem_pio2f>
 8013f18:	f000 0003 	and.w	r0, r0, #3
 8013f1c:	2801      	cmp	r0, #1
 8013f1e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013f22:	ed9d 0a00 	vldr	s0, [sp]
 8013f26:	d00c      	beq.n	8013f42 <cosf+0x4e>
 8013f28:	2802      	cmp	r0, #2
 8013f2a:	d012      	beq.n	8013f52 <cosf+0x5e>
 8013f2c:	b170      	cbz	r0, 8013f4c <cosf+0x58>
 8013f2e:	2001      	movs	r0, #1
 8013f30:	f000 ff72 	bl	8014e18 <__kernel_sinf>
 8013f34:	b003      	add	sp, #12
 8013f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f3a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013f60 <cosf+0x6c>
 8013f3e:	f000 bbaf 	b.w	80146a0 <__kernel_cosf>
 8013f42:	f000 ff69 	bl	8014e18 <__kernel_sinf>
 8013f46:	eeb1 0a40 	vneg.f32	s0, s0
 8013f4a:	e7f3      	b.n	8013f34 <cosf+0x40>
 8013f4c:	f000 fba8 	bl	80146a0 <__kernel_cosf>
 8013f50:	e7f0      	b.n	8013f34 <cosf+0x40>
 8013f52:	f000 fba5 	bl	80146a0 <__kernel_cosf>
 8013f56:	eeb1 0a40 	vneg.f32	s0, s0
 8013f5a:	e7eb      	b.n	8013f34 <cosf+0x40>
 8013f5c:	3f490fd8 	.word	0x3f490fd8
 8013f60:	00000000 	.word	0x00000000

08013f64 <fabsf>:
 8013f64:	ee10 3a10 	vmov	r3, s0
 8013f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f6c:	ee00 3a10 	vmov	s0, r3
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop

08013f74 <sinf>:
 8013f74:	ee10 3a10 	vmov	r3, s0
 8013f78:	4a19      	ldr	r2, [pc, #100]	; (8013fe0 <sinf+0x6c>)
 8013f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	dd1c      	ble.n	8013fbc <sinf+0x48>
 8013f82:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f86:	db02      	blt.n	8013f8e <sinf+0x1a>
 8013f88:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013f8c:	4770      	bx	lr
 8013f8e:	b500      	push	{lr}
 8013f90:	b083      	sub	sp, #12
 8013f92:	4668      	mov	r0, sp
 8013f94:	f000 fa4e 	bl	8014434 <__ieee754_rem_pio2f>
 8013f98:	f000 0003 	and.w	r0, r0, #3
 8013f9c:	2801      	cmp	r0, #1
 8013f9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013fa2:	ed9d 0a00 	vldr	s0, [sp]
 8013fa6:	d00e      	beq.n	8013fc6 <sinf+0x52>
 8013fa8:	2802      	cmp	r0, #2
 8013faa:	d013      	beq.n	8013fd4 <sinf+0x60>
 8013fac:	b170      	cbz	r0, 8013fcc <sinf+0x58>
 8013fae:	f000 fb77 	bl	80146a0 <__kernel_cosf>
 8013fb2:	eeb1 0a40 	vneg.f32	s0, s0
 8013fb6:	b003      	add	sp, #12
 8013fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fbc:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013fe4 <sinf+0x70>
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	f000 bf29 	b.w	8014e18 <__kernel_sinf>
 8013fc6:	f000 fb6b 	bl	80146a0 <__kernel_cosf>
 8013fca:	e7f4      	b.n	8013fb6 <sinf+0x42>
 8013fcc:	2001      	movs	r0, #1
 8013fce:	f000 ff23 	bl	8014e18 <__kernel_sinf>
 8013fd2:	e7f0      	b.n	8013fb6 <sinf+0x42>
 8013fd4:	2001      	movs	r0, #1
 8013fd6:	f000 ff1f 	bl	8014e18 <__kernel_sinf>
 8013fda:	eeb1 0a40 	vneg.f32	s0, s0
 8013fde:	e7ea      	b.n	8013fb6 <sinf+0x42>
 8013fe0:	3f490fd8 	.word	0x3f490fd8
 8013fe4:	00000000 	.word	0x00000000

08013fe8 <tanf>:
 8013fe8:	ee10 3a10 	vmov	r3, s0
 8013fec:	4a11      	ldr	r2, [pc, #68]	; (8014034 <tanf+0x4c>)
 8013fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	dd18      	ble.n	8014028 <tanf+0x40>
 8013ff6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013ffa:	db02      	blt.n	8014002 <tanf+0x1a>
 8013ffc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014000:	4770      	bx	lr
 8014002:	b500      	push	{lr}
 8014004:	b083      	sub	sp, #12
 8014006:	4668      	mov	r0, sp
 8014008:	f000 fa14 	bl	8014434 <__ieee754_rem_pio2f>
 801400c:	0040      	lsls	r0, r0, #1
 801400e:	f000 0002 	and.w	r0, r0, #2
 8014012:	eddd 0a01 	vldr	s1, [sp, #4]
 8014016:	ed9d 0a00 	vldr	s0, [sp]
 801401a:	f1c0 0001 	rsb	r0, r0, #1
 801401e:	f000 ff43 	bl	8014ea8 <__kernel_tanf>
 8014022:	b003      	add	sp, #12
 8014024:	f85d fb04 	ldr.w	pc, [sp], #4
 8014028:	eddf 0a03 	vldr	s1, [pc, #12]	; 8014038 <tanf+0x50>
 801402c:	2001      	movs	r0, #1
 801402e:	f000 bf3b 	b.w	8014ea8 <__kernel_tanf>
 8014032:	bf00      	nop
 8014034:	3f490fda 	.word	0x3f490fda
 8014038:	00000000 	.word	0x00000000

0801403c <atan2f>:
 801403c:	f000 b852 	b.w	80140e4 <__ieee754_atan2f>

08014040 <logf>:
 8014040:	b508      	push	{r3, lr}
 8014042:	ed2d 8b02 	vpush	{d8}
 8014046:	eeb0 8a40 	vmov.f32	s16, s0
 801404a:	f000 f8f3 	bl	8014234 <__ieee754_logf>
 801404e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014056:	d60f      	bvs.n	8014078 <logf+0x38>
 8014058:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014060:	dc0a      	bgt.n	8014078 <logf+0x38>
 8014062:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	d108      	bne.n	801407e <logf+0x3e>
 801406c:	f7fb f972 	bl	800f354 <__errno>
 8014070:	2322      	movs	r3, #34	; 0x22
 8014072:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014098 <logf+0x58>
 8014076:	6003      	str	r3, [r0, #0]
 8014078:	ecbd 8b02 	vpop	{d8}
 801407c:	bd08      	pop	{r3, pc}
 801407e:	f7fb f969 	bl	800f354 <__errno>
 8014082:	ecbd 8b02 	vpop	{d8}
 8014086:	4603      	mov	r3, r0
 8014088:	2221      	movs	r2, #33	; 0x21
 801408a:	601a      	str	r2, [r3, #0]
 801408c:	4803      	ldr	r0, [pc, #12]	; (801409c <logf+0x5c>)
 801408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014092:	f7fc b9fb 	b.w	801048c <nanf>
 8014096:	bf00      	nop
 8014098:	ff800000 	.word	0xff800000
 801409c:	0802adb4 	.word	0x0802adb4

080140a0 <sqrtf>:
 80140a0:	b508      	push	{r3, lr}
 80140a2:	ed2d 8b02 	vpush	{d8}
 80140a6:	eeb0 8a40 	vmov.f32	s16, s0
 80140aa:	f000 faf5 	bl	8014698 <__ieee754_sqrtf>
 80140ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80140b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b6:	d606      	bvs.n	80140c6 <sqrtf+0x26>
 80140b8:	eddf 8a09 	vldr	s17, [pc, #36]	; 80140e0 <sqrtf+0x40>
 80140bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80140c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140c4:	d402      	bmi.n	80140cc <sqrtf+0x2c>
 80140c6:	ecbd 8b02 	vpop	{d8}
 80140ca:	bd08      	pop	{r3, pc}
 80140cc:	f7fb f942 	bl	800f354 <__errno>
 80140d0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80140d4:	ecbd 8b02 	vpop	{d8}
 80140d8:	2321      	movs	r3, #33	; 0x21
 80140da:	6003      	str	r3, [r0, #0]
 80140dc:	bd08      	pop	{r3, pc}
 80140de:	bf00      	nop
 80140e0:	00000000 	.word	0x00000000

080140e4 <__ieee754_atan2f>:
 80140e4:	b510      	push	{r4, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	edcd 0a01 	vstr	s1, [sp, #4]
 80140ec:	9b01      	ldr	r3, [sp, #4]
 80140ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80140f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80140f6:	eef0 7a40 	vmov.f32	s15, s0
 80140fa:	dc30      	bgt.n	801415e <__ieee754_atan2f+0x7a>
 80140fc:	ee10 0a10 	vmov	r0, s0
 8014100:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8014104:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014108:	dc29      	bgt.n	801415e <__ieee754_atan2f+0x7a>
 801410a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801410e:	d042      	beq.n	8014196 <__ieee754_atan2f+0xb2>
 8014110:	179c      	asrs	r4, r3, #30
 8014112:	f004 0402 	and.w	r4, r4, #2
 8014116:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801411a:	b331      	cbz	r1, 801416a <__ieee754_atan2f+0x86>
 801411c:	b37a      	cbz	r2, 801417e <__ieee754_atan2f+0x9a>
 801411e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014122:	d040      	beq.n	80141a6 <__ieee754_atan2f+0xc2>
 8014124:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014128:	d029      	beq.n	801417e <__ieee754_atan2f+0x9a>
 801412a:	1a8a      	subs	r2, r1, r2
 801412c:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8014130:	ea4f 51e2 	mov.w	r1, r2, asr #23
 8014134:	da34      	bge.n	80141a0 <__ieee754_atan2f+0xbc>
 8014136:	2b00      	cmp	r3, #0
 8014138:	da42      	bge.n	80141c0 <__ieee754_atan2f+0xdc>
 801413a:	313c      	adds	r1, #60	; 0x3c
 801413c:	da40      	bge.n	80141c0 <__ieee754_atan2f+0xdc>
 801413e:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8014210 <__ieee754_atan2f+0x12c>
 8014142:	2c01      	cmp	r4, #1
 8014144:	d04e      	beq.n	80141e4 <__ieee754_atan2f+0x100>
 8014146:	2c02      	cmp	r4, #2
 8014148:	d043      	beq.n	80141d2 <__ieee754_atan2f+0xee>
 801414a:	b164      	cbz	r4, 8014166 <__ieee754_atan2f+0x82>
 801414c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014214 <__ieee754_atan2f+0x130>
 8014150:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014218 <__ieee754_atan2f+0x134>
 8014154:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014158:	ee30 0a67 	vsub.f32	s0, s0, s15
 801415c:	e003      	b.n	8014166 <__ieee754_atan2f+0x82>
 801415e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014162:	ee37 0a27 	vadd.f32	s0, s14, s15
 8014166:	b002      	add	sp, #8
 8014168:	bd10      	pop	{r4, pc}
 801416a:	2c02      	cmp	r4, #2
 801416c:	d010      	beq.n	8014190 <__ieee754_atan2f+0xac>
 801416e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801421c <__ieee754_atan2f+0x138>
 8014172:	2c03      	cmp	r4, #3
 8014174:	bf18      	it	ne
 8014176:	eeb0 0a67 	vmovne.f32	s0, s15
 801417a:	b002      	add	sp, #8
 801417c:	bd10      	pop	{r4, pc}
 801417e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8014220 <__ieee754_atan2f+0x13c>
 8014182:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014224 <__ieee754_atan2f+0x140>
 8014186:	2800      	cmp	r0, #0
 8014188:	bfb8      	it	lt
 801418a:	eeb0 0a67 	vmovlt.f32	s0, s15
 801418e:	e7ea      	b.n	8014166 <__ieee754_atan2f+0x82>
 8014190:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8014218 <__ieee754_atan2f+0x134>
 8014194:	e7e7      	b.n	8014166 <__ieee754_atan2f+0x82>
 8014196:	b002      	add	sp, #8
 8014198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801419c:	f7ff bdd0 	b.w	8013d40 <atanf>
 80141a0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8014220 <__ieee754_atan2f+0x13c>
 80141a4:	e7cd      	b.n	8014142 <__ieee754_atan2f+0x5e>
 80141a6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80141aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80141ae:	d020      	beq.n	80141f2 <__ieee754_atan2f+0x10e>
 80141b0:	2c02      	cmp	r4, #2
 80141b2:	d826      	bhi.n	8014202 <__ieee754_atan2f+0x11e>
 80141b4:	4b1c      	ldr	r3, [pc, #112]	; (8014228 <__ieee754_atan2f+0x144>)
 80141b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80141ba:	ed94 0a00 	vldr	s0, [r4]
 80141be:	e7d2      	b.n	8014166 <__ieee754_atan2f+0x82>
 80141c0:	ed9d 7a01 	vldr	s14, [sp, #4]
 80141c4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80141c8:	f7ff fecc 	bl	8013f64 <fabsf>
 80141cc:	f7ff fdb8 	bl	8013d40 <atanf>
 80141d0:	e7b7      	b.n	8014142 <__ieee754_atan2f+0x5e>
 80141d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014214 <__ieee754_atan2f+0x130>
 80141d6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014218 <__ieee754_atan2f+0x134>
 80141da:	ee30 0a07 	vadd.f32	s0, s0, s14
 80141de:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80141e2:	e7c0      	b.n	8014166 <__ieee754_atan2f+0x82>
 80141e4:	ee10 3a10 	vmov	r3, s0
 80141e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80141ec:	ee00 3a10 	vmov	s0, r3
 80141f0:	e7b9      	b.n	8014166 <__ieee754_atan2f+0x82>
 80141f2:	2c02      	cmp	r4, #2
 80141f4:	d808      	bhi.n	8014208 <__ieee754_atan2f+0x124>
 80141f6:	4b0d      	ldr	r3, [pc, #52]	; (801422c <__ieee754_atan2f+0x148>)
 80141f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80141fc:	ed94 0a00 	vldr	s0, [r4]
 8014200:	e7b1      	b.n	8014166 <__ieee754_atan2f+0x82>
 8014202:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014210 <__ieee754_atan2f+0x12c>
 8014206:	e7ae      	b.n	8014166 <__ieee754_atan2f+0x82>
 8014208:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014230 <__ieee754_atan2f+0x14c>
 801420c:	e7ab      	b.n	8014166 <__ieee754_atan2f+0x82>
 801420e:	bf00      	nop
 8014210:	00000000 	.word	0x00000000
 8014214:	33bbbd2e 	.word	0x33bbbd2e
 8014218:	40490fdb 	.word	0x40490fdb
 801421c:	c0490fdb 	.word	0xc0490fdb
 8014220:	3fc90fdb 	.word	0x3fc90fdb
 8014224:	bfc90fdb 	.word	0xbfc90fdb
 8014228:	0802adc4 	.word	0x0802adc4
 801422c:	0802adb8 	.word	0x0802adb8
 8014230:	3f490fdb 	.word	0x3f490fdb

08014234 <__ieee754_logf>:
 8014234:	ee10 3a10 	vmov	r3, s0
 8014238:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801423c:	d02e      	beq.n	801429c <__ieee754_logf+0x68>
 801423e:	2b00      	cmp	r3, #0
 8014240:	db33      	blt.n	80142aa <__ieee754_logf+0x76>
 8014242:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014246:	da40      	bge.n	80142ca <__ieee754_logf+0x96>
 8014248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801424c:	db34      	blt.n	80142b8 <__ieee754_logf+0x84>
 801424e:	f04f 0c00 	mov.w	ip, #0
 8014252:	4868      	ldr	r0, [pc, #416]	; (80143f4 <__ieee754_logf+0x1c0>)
 8014254:	f3c3 0116 	ubfx	r1, r3, #0, #23
 8014258:	4408      	add	r0, r1
 801425a:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 801425e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 8014262:	430a      	orrs	r2, r1
 8014264:	15db      	asrs	r3, r3, #23
 8014266:	ee00 2a10 	vmov	s0, r2
 801426a:	3b7f      	subs	r3, #127	; 0x7f
 801426c:	4a62      	ldr	r2, [pc, #392]	; (80143f8 <__ieee754_logf+0x1c4>)
 801426e:	4463      	add	r3, ip
 8014270:	f101 0c0f 	add.w	ip, r1, #15
 8014274:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014278:	ea0c 0202 	and.w	r2, ip, r2
 801427c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014280:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8014284:	bb22      	cbnz	r2, 80142d0 <__ieee754_logf+0x9c>
 8014286:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428e:	d160      	bne.n	8014352 <__ieee754_logf+0x11e>
 8014290:	2b00      	cmp	r3, #0
 8014292:	f040 8092 	bne.w	80143ba <__ieee754_logf+0x186>
 8014296:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80143fc <__ieee754_logf+0x1c8>
 801429a:	4770      	bx	lr
 801429c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8014400 <__ieee754_logf+0x1cc>
 80142a0:	eddf 7a56 	vldr	s15, [pc, #344]	; 80143fc <__ieee754_logf+0x1c8>
 80142a4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80142a8:	4770      	bx	lr
 80142aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80142ae:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80143fc <__ieee754_logf+0x1c8>
 80142b2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80142b6:	4770      	bx	lr
 80142b8:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014404 <__ieee754_logf+0x1d0>
 80142bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80142c0:	f06f 0c18 	mvn.w	ip, #24
 80142c4:	ee17 3a90 	vmov	r3, s15
 80142c8:	e7c3      	b.n	8014252 <__ieee754_logf+0x1e>
 80142ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142ce:	4770      	bx	lr
 80142d0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80142d4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80142d8:	ee07 3a10 	vmov	s14, r3
 80142dc:	ee80 4a27 	vdiv.f32	s8, s0, s15
 80142e0:	4849      	ldr	r0, [pc, #292]	; (8014408 <__ieee754_logf+0x1d4>)
 80142e2:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
 80142e6:	4408      	add	r0, r1
 80142e8:	f502 7222 	add.w	r2, r2, #648	; 0x288
 80142ec:	4302      	orrs	r2, r0
 80142ee:	2a00      	cmp	r2, #0
 80142f0:	ed9f 3a46 	vldr	s6, [pc, #280]	; 801440c <__ieee754_logf+0x1d8>
 80142f4:	eddf 4a46 	vldr	s9, [pc, #280]	; 8014410 <__ieee754_logf+0x1dc>
 80142f8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8014414 <__ieee754_logf+0x1e0>
 80142fc:	eddf 3a46 	vldr	s7, [pc, #280]	; 8014418 <__ieee754_logf+0x1e4>
 8014300:	ed9f 5a46 	vldr	s10, [pc, #280]	; 801441c <__ieee754_logf+0x1e8>
 8014304:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014420 <__ieee754_logf+0x1ec>
 8014308:	eddf 6a46 	vldr	s13, [pc, #280]	; 8014424 <__ieee754_logf+0x1f0>
 801430c:	ee24 6a04 	vmul.f32	s12, s8, s8
 8014310:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 8014314:	ee26 7a06 	vmul.f32	s14, s12, s12
 8014318:	eee7 4a03 	vfma.f32	s9, s14, s6
 801431c:	eea7 5a23 	vfma.f32	s10, s14, s7
 8014320:	eee4 5a87 	vfma.f32	s11, s9, s14
 8014324:	eee5 6a07 	vfma.f32	s13, s10, s14
 8014328:	eee5 7a87 	vfma.f32	s15, s11, s14
 801432c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014330:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014334:	dd2a      	ble.n	801438c <__ieee754_logf+0x158>
 8014336:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801433a:	ee20 7a07 	vmul.f32	s14, s0, s14
 801433e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8014342:	bb4b      	cbnz	r3, 8014398 <__ieee754_logf+0x164>
 8014344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014348:	eea7 7ac4 	vfms.f32	s14, s15, s8
 801434c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014350:	4770      	bx	lr
 8014352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014356:	eddf 6a34 	vldr	s13, [pc, #208]	; 8014428 <__ieee754_logf+0x1f4>
 801435a:	eef0 7a47 	vmov.f32	s15, s14
 801435e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8014362:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014366:	ee27 7a27 	vmul.f32	s14, s14, s15
 801436a:	2b00      	cmp	r3, #0
 801436c:	d0ee      	beq.n	801434c <__ieee754_logf+0x118>
 801436e:	ee07 3a90 	vmov	s15, r3
 8014372:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801442c <__ieee754_logf+0x1f8>
 8014376:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014430 <__ieee754_logf+0x1fc>
 801437a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801437e:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8014382:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014386:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 801438a:	4770      	bx	lr
 801438c:	bb13      	cbnz	r3, 80143d4 <__ieee754_logf+0x1a0>
 801438e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014392:	eea7 0ac4 	vfms.f32	s0, s15, s8
 8014396:	4770      	bx	lr
 8014398:	eddf 6a24 	vldr	s13, [pc, #144]	; 801442c <__ieee754_logf+0x1f8>
 801439c:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8014430 <__ieee754_logf+0x1fc>
 80143a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143a4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80143a8:	eee7 6a84 	vfma.f32	s13, s15, s8
 80143ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 80143b0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80143b4:	ee92 0a86 	vfnms.f32	s0, s5, s12
 80143b8:	4770      	bx	lr
 80143ba:	ee07 3a90 	vmov	s15, r3
 80143be:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 801442c <__ieee754_logf+0x1f8>
 80143c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8014430 <__ieee754_logf+0x1fc>
 80143c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80143ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 80143d2:	4770      	bx	lr
 80143d4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801442c <__ieee754_logf+0x1f8>
 80143d8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014430 <__ieee754_logf+0x1fc>
 80143dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80143e0:	ee27 7a62 	vnmul.f32	s14, s14, s5
 80143e4:	eea7 7a84 	vfma.f32	s14, s15, s8
 80143e8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80143ec:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 80143f0:	4770      	bx	lr
 80143f2:	bf00      	nop
 80143f4:	004afb20 	.word	0x004afb20
 80143f8:	007ffff0 	.word	0x007ffff0
 80143fc:	00000000 	.word	0x00000000
 8014400:	cc000000 	.word	0xcc000000
 8014404:	4c000000 	.word	0x4c000000
 8014408:	ffcf5c30 	.word	0xffcf5c30
 801440c:	3e178897 	.word	0x3e178897
 8014410:	3e3a3325 	.word	0x3e3a3325
 8014414:	3e924925 	.word	0x3e924925
 8014418:	3e1cd04f 	.word	0x3e1cd04f
 801441c:	3e638e29 	.word	0x3e638e29
 8014420:	3f2aaaab 	.word	0x3f2aaaab
 8014424:	3ecccccd 	.word	0x3ecccccd
 8014428:	3eaaaaab 	.word	0x3eaaaaab
 801442c:	3717f7d1 	.word	0x3717f7d1
 8014430:	3f317180 	.word	0x3f317180

08014434 <__ieee754_rem_pio2f>:
 8014434:	b570      	push	{r4, r5, r6, lr}
 8014436:	ee10 3a10 	vmov	r3, s0
 801443a:	4a89      	ldr	r2, [pc, #548]	; (8014660 <__ieee754_rem_pio2f+0x22c>)
 801443c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014440:	4294      	cmp	r4, r2
 8014442:	b086      	sub	sp, #24
 8014444:	4605      	mov	r5, r0
 8014446:	dd70      	ble.n	801452a <__ieee754_rem_pio2f+0xf6>
 8014448:	4a86      	ldr	r2, [pc, #536]	; (8014664 <__ieee754_rem_pio2f+0x230>)
 801444a:	4294      	cmp	r4, r2
 801444c:	ee10 6a10 	vmov	r6, s0
 8014450:	dc22      	bgt.n	8014498 <__ieee754_rem_pio2f+0x64>
 8014452:	2b00      	cmp	r3, #0
 8014454:	eddf 7a84 	vldr	s15, [pc, #528]	; 8014668 <__ieee754_rem_pio2f+0x234>
 8014458:	4a84      	ldr	r2, [pc, #528]	; (801466c <__ieee754_rem_pio2f+0x238>)
 801445a:	f024 040f 	bic.w	r4, r4, #15
 801445e:	eeb0 7a40 	vmov.f32	s14, s0
 8014462:	f340 80e4 	ble.w	801462e <__ieee754_rem_pio2f+0x1fa>
 8014466:	4294      	cmp	r4, r2
 8014468:	ee70 7a67 	vsub.f32	s15, s0, s15
 801446c:	bf09      	itett	eq
 801446e:	eddf 6a80 	vldreq	s13, [pc, #512]	; 8014670 <__ieee754_rem_pio2f+0x23c>
 8014472:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 8014674 <__ieee754_rem_pio2f+0x240>
 8014476:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 8014678 <__ieee754_rem_pio2f+0x244>
 801447a:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
 801447e:	2001      	movs	r0, #1
 8014480:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014488:	edc5 6a00 	vstr	s13, [r5]
 801448c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014490:	edc5 7a01 	vstr	s15, [r5, #4]
 8014494:	b006      	add	sp, #24
 8014496:	bd70      	pop	{r4, r5, r6, pc}
 8014498:	4a78      	ldr	r2, [pc, #480]	; (801467c <__ieee754_rem_pio2f+0x248>)
 801449a:	4294      	cmp	r4, r2
 801449c:	dd54      	ble.n	8014548 <__ieee754_rem_pio2f+0x114>
 801449e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80144a2:	da49      	bge.n	8014538 <__ieee754_rem_pio2f+0x104>
 80144a4:	15e2      	asrs	r2, r4, #23
 80144a6:	3a86      	subs	r2, #134	; 0x86
 80144a8:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80144ac:	ee07 3a90 	vmov	s15, r3
 80144b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80144b4:	eddf 6a72 	vldr	s13, [pc, #456]	; 8014680 <__ieee754_rem_pio2f+0x24c>
 80144b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80144bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144c0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80144c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80144c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80144cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80144d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144d4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80144d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80144dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	edcd 7a05 	vstr	s15, [sp, #20]
 80144e8:	f040 8090 	bne.w	801460c <__ieee754_rem_pio2f+0x1d8>
 80144ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80144f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f4:	bf14      	ite	ne
 80144f6:	2302      	movne	r3, #2
 80144f8:	2301      	moveq	r3, #1
 80144fa:	4962      	ldr	r1, [pc, #392]	; (8014684 <__ieee754_rem_pio2f+0x250>)
 80144fc:	9101      	str	r1, [sp, #4]
 80144fe:	2102      	movs	r1, #2
 8014500:	9100      	str	r1, [sp, #0]
 8014502:	a803      	add	r0, sp, #12
 8014504:	4629      	mov	r1, r5
 8014506:	f000 f94d 	bl	80147a4 <__kernel_rem_pio2f>
 801450a:	2e00      	cmp	r6, #0
 801450c:	dac2      	bge.n	8014494 <__ieee754_rem_pio2f+0x60>
 801450e:	ed95 7a00 	vldr	s14, [r5]
 8014512:	edd5 7a01 	vldr	s15, [r5, #4]
 8014516:	eeb1 7a47 	vneg.f32	s14, s14
 801451a:	eef1 7a67 	vneg.f32	s15, s15
 801451e:	ed85 7a00 	vstr	s14, [r5]
 8014522:	edc5 7a01 	vstr	s15, [r5, #4]
 8014526:	4240      	negs	r0, r0
 8014528:	e7b4      	b.n	8014494 <__ieee754_rem_pio2f+0x60>
 801452a:	2200      	movs	r2, #0
 801452c:	ed85 0a00 	vstr	s0, [r5]
 8014530:	6042      	str	r2, [r0, #4]
 8014532:	2000      	movs	r0, #0
 8014534:	b006      	add	sp, #24
 8014536:	bd70      	pop	{r4, r5, r6, pc}
 8014538:	ee70 7a40 	vsub.f32	s15, s0, s0
 801453c:	2000      	movs	r0, #0
 801453e:	edc5 7a01 	vstr	s15, [r5, #4]
 8014542:	edc5 7a00 	vstr	s15, [r5]
 8014546:	e7a5      	b.n	8014494 <__ieee754_rem_pio2f+0x60>
 8014548:	f7ff fd0c 	bl	8013f64 <fabsf>
 801454c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8014688 <__ieee754_rem_pio2f+0x254>
 8014550:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8014668 <__ieee754_rem_pio2f+0x234>
 8014554:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014558:	eee0 7a07 	vfma.f32	s15, s0, s14
 801455c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014674 <__ieee754_rem_pio2f+0x240>
 8014560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014564:	ee17 0a90 	vmov	r0, s15
 8014568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801456c:	281f      	cmp	r0, #31
 801456e:	eea6 0ac6 	vfms.f32	s0, s13, s12
 8014572:	ee66 7a87 	vmul.f32	s15, s13, s14
 8014576:	eeb1 6a66 	vneg.f32	s12, s13
 801457a:	dc1e      	bgt.n	80145ba <__ieee754_rem_pio2f+0x186>
 801457c:	4a43      	ldr	r2, [pc, #268]	; (801468c <__ieee754_rem_pio2f+0x258>)
 801457e:	1e41      	subs	r1, r0, #1
 8014580:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8014584:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014588:	4293      	cmp	r3, r2
 801458a:	d016      	beq.n	80145ba <__ieee754_rem_pio2f+0x186>
 801458c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014590:	ed85 7a00 	vstr	s14, [r5]
 8014594:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014598:	2e00      	cmp	r6, #0
 801459a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801459e:	ed85 0a01 	vstr	s0, [r5, #4]
 80145a2:	f6bf af77 	bge.w	8014494 <__ieee754_rem_pio2f+0x60>
 80145a6:	eeb1 7a47 	vneg.f32	s14, s14
 80145aa:	eeb1 0a40 	vneg.f32	s0, s0
 80145ae:	ed85 7a00 	vstr	s14, [r5]
 80145b2:	ed85 0a01 	vstr	s0, [r5, #4]
 80145b6:	4240      	negs	r0, r0
 80145b8:	e76c      	b.n	8014494 <__ieee754_rem_pio2f+0x60>
 80145ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 80145be:	15e2      	asrs	r2, r4, #23
 80145c0:	ee17 3a10 	vmov	r3, s14
 80145c4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80145c8:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
 80145cc:	2c08      	cmp	r4, #8
 80145ce:	dddf      	ble.n	8014590 <__ieee754_rem_pio2f+0x15c>
 80145d0:	eddf 7a27 	vldr	s15, [pc, #156]	; 8014670 <__ieee754_rem_pio2f+0x23c>
 80145d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014678 <__ieee754_rem_pio2f+0x244>
 80145d8:	eef0 5a40 	vmov.f32	s11, s0
 80145dc:	eee6 5a27 	vfma.f32	s11, s12, s15
 80145e0:	ee30 0a65 	vsub.f32	s0, s0, s11
 80145e4:	eea6 0a27 	vfma.f32	s0, s12, s15
 80145e8:	eef0 7a40 	vmov.f32	s15, s0
 80145ec:	eed6 7a87 	vfnms.f32	s15, s13, s14
 80145f0:	ee35 7ae7 	vsub.f32	s14, s11, s15
 80145f4:	ee17 3a10 	vmov	r3, s14
 80145f8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80145fc:	1ad2      	subs	r2, r2, r3
 80145fe:	2a19      	cmp	r2, #25
 8014600:	dc06      	bgt.n	8014610 <__ieee754_rem_pio2f+0x1dc>
 8014602:	eeb0 0a65 	vmov.f32	s0, s11
 8014606:	ed85 7a00 	vstr	s14, [r5]
 801460a:	e7c3      	b.n	8014594 <__ieee754_rem_pio2f+0x160>
 801460c:	2303      	movs	r3, #3
 801460e:	e774      	b.n	80144fa <__ieee754_rem_pio2f+0xc6>
 8014610:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8014690 <__ieee754_rem_pio2f+0x25c>
 8014614:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8014694 <__ieee754_rem_pio2f+0x260>
 8014618:	eeb0 0a65 	vmov.f32	s0, s11
 801461c:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014620:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8014624:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014628:	eed6 7a85 	vfnms.f32	s15, s13, s10
 801462c:	e7ae      	b.n	801458c <__ieee754_rem_pio2f+0x158>
 801462e:	4294      	cmp	r4, r2
 8014630:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014634:	bf09      	itett	eq
 8014636:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8014670 <__ieee754_rem_pio2f+0x23c>
 801463a:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 8014674 <__ieee754_rem_pio2f+0x240>
 801463e:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 8014678 <__ieee754_rem_pio2f+0x244>
 8014642:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 8014646:	f04f 30ff 	mov.w	r0, #4294967295
 801464a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801464e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014652:	edc5 6a00 	vstr	s13, [r5]
 8014656:	ee77 7a87 	vadd.f32	s15, s15, s14
 801465a:	edc5 7a01 	vstr	s15, [r5, #4]
 801465e:	e719      	b.n	8014494 <__ieee754_rem_pio2f+0x60>
 8014660:	3f490fd8 	.word	0x3f490fd8
 8014664:	4016cbe3 	.word	0x4016cbe3
 8014668:	3fc90f80 	.word	0x3fc90f80
 801466c:	3fc90fd0 	.word	0x3fc90fd0
 8014670:	37354400 	.word	0x37354400
 8014674:	37354443 	.word	0x37354443
 8014678:	2e85a308 	.word	0x2e85a308
 801467c:	43490f80 	.word	0x43490f80
 8014680:	43800000 	.word	0x43800000
 8014684:	0802ae50 	.word	0x0802ae50
 8014688:	3f22f984 	.word	0x3f22f984
 801468c:	0802add0 	.word	0x0802add0
 8014690:	2e85a300 	.word	0x2e85a300
 8014694:	248d3132 	.word	0x248d3132

08014698 <__ieee754_sqrtf>:
 8014698:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801469c:	4770      	bx	lr
 801469e:	bf00      	nop

080146a0 <__kernel_cosf>:
 80146a0:	ee10 3a10 	vmov	r3, s0
 80146a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80146a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80146ac:	da2c      	bge.n	8014708 <__kernel_cosf+0x68>
 80146ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80146b2:	ee17 3a90 	vmov	r3, s15
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d060      	beq.n	801477c <__kernel_cosf+0xdc>
 80146ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80146be:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014784 <__kernel_cosf+0xe4>
 80146c2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8014788 <__kernel_cosf+0xe8>
 80146c6:	eddf 5a31 	vldr	s11, [pc, #196]	; 801478c <__kernel_cosf+0xec>
 80146ca:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014790 <__kernel_cosf+0xf0>
 80146ce:	eddf 6a31 	vldr	s13, [pc, #196]	; 8014794 <__kernel_cosf+0xf4>
 80146d2:	eea7 5a27 	vfma.f32	s10, s14, s15
 80146d6:	eddf 7a30 	vldr	s15, [pc, #192]	; 8014798 <__kernel_cosf+0xf8>
 80146da:	eee7 5a05 	vfma.f32	s11, s14, s10
 80146de:	eea7 6a25 	vfma.f32	s12, s14, s11
 80146e2:	eee7 7a06 	vfma.f32	s15, s14, s12
 80146e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80146ea:	ee67 6a26 	vmul.f32	s13, s14, s13
 80146ee:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80146f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80146f6:	eee7 0a26 	vfma.f32	s1, s14, s13
 80146fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80146fe:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014702:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014706:	4770      	bx	lr
 8014708:	ee20 7a00 	vmul.f32	s14, s0, s0
 801470c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8014784 <__kernel_cosf+0xe4>
 8014710:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8014788 <__kernel_cosf+0xe8>
 8014714:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801478c <__kernel_cosf+0xec>
 8014718:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8014790 <__kernel_cosf+0xf0>
 801471c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8014794 <__kernel_cosf+0xf4>
 8014720:	4a1e      	ldr	r2, [pc, #120]	; (801479c <__kernel_cosf+0xfc>)
 8014722:	eea7 5a27 	vfma.f32	s10, s14, s15
 8014726:	4293      	cmp	r3, r2
 8014728:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8014798 <__kernel_cosf+0xf8>
 801472c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014730:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014734:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014738:	eee7 6a87 	vfma.f32	s13, s15, s14
 801473c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014740:	ddd5      	ble.n	80146ee <__kernel_cosf+0x4e>
 8014742:	4a17      	ldr	r2, [pc, #92]	; (80147a0 <__kernel_cosf+0x100>)
 8014744:	4293      	cmp	r3, r2
 8014746:	dc14      	bgt.n	8014772 <__kernel_cosf+0xd2>
 8014748:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801474c:	ee07 3a90 	vmov	s15, r3
 8014750:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014754:	ee36 6a67 	vsub.f32	s12, s12, s15
 8014758:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801475c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014760:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8014764:	eee7 0a26 	vfma.f32	s1, s14, s13
 8014768:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801476c:	ee36 0a60 	vsub.f32	s0, s12, s1
 8014770:	4770      	bx	lr
 8014772:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8014776:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 801477a:	e7ed      	b.n	8014758 <__kernel_cosf+0xb8>
 801477c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014780:	4770      	bx	lr
 8014782:	bf00      	nop
 8014784:	ad47d74e 	.word	0xad47d74e
 8014788:	310f74f6 	.word	0x310f74f6
 801478c:	b493f27c 	.word	0xb493f27c
 8014790:	37d00d01 	.word	0x37d00d01
 8014794:	3d2aaaab 	.word	0x3d2aaaab
 8014798:	bab60b61 	.word	0xbab60b61
 801479c:	3e999999 	.word	0x3e999999
 80147a0:	3f480000 	.word	0x3f480000

080147a4 <__kernel_rem_pio2f>:
 80147a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a8:	ed2d 8b04 	vpush	{d8-d9}
 80147ac:	b0db      	sub	sp, #364	; 0x16c
 80147ae:	461c      	mov	r4, r3
 80147b0:	9303      	str	r3, [sp, #12]
 80147b2:	9106      	str	r1, [sp, #24]
 80147b4:	4ba2      	ldr	r3, [pc, #648]	; (8014a40 <__kernel_rem_pio2f+0x29c>)
 80147b6:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 80147b8:	9208      	str	r2, [sp, #32]
 80147ba:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80147be:	1d11      	adds	r1, r2, #4
 80147c0:	4682      	mov	sl, r0
 80147c2:	f104 38ff 	add.w	r8, r4, #4294967295
 80147c6:	f2c0 82a3 	blt.w	8014d10 <__kernel_rem_pio2f+0x56c>
 80147ca:	1ed3      	subs	r3, r2, #3
 80147cc:	bf48      	it	mi
 80147ce:	1d13      	addmi	r3, r2, #4
 80147d0:	10db      	asrs	r3, r3, #3
 80147d2:	9302      	str	r3, [sp, #8]
 80147d4:	3301      	adds	r3, #1
 80147d6:	00db      	lsls	r3, r3, #3
 80147d8:	9307      	str	r3, [sp, #28]
 80147da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80147de:	1a9b      	subs	r3, r3, r2
 80147e0:	9305      	str	r3, [sp, #20]
 80147e2:	9b02      	ldr	r3, [sp, #8]
 80147e4:	eb15 0108 	adds.w	r1, r5, r8
 80147e8:	eba3 0308 	sub.w	r3, r3, r8
 80147ec:	d416      	bmi.n	801481c <__kernel_rem_pio2f+0x78>
 80147ee:	3101      	adds	r1, #1
 80147f0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8014a44 <__kernel_rem_pio2f+0x2a0>
 80147f4:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 80147f6:	4419      	add	r1, r3
 80147f8:	aa1e      	add	r2, sp, #120	; 0x78
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	bfa4      	itt	ge
 80147fe:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8014802:	ee07 4a90 	vmovge	s15, r4
 8014806:	f103 0301 	add.w	r3, r3, #1
 801480a:	bfac      	ite	ge
 801480c:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8014810:	eef0 7a47 	vmovlt.f32	s15, s14
 8014814:	428b      	cmp	r3, r1
 8014816:	ece2 7a01 	vstmia	r2!, {s15}
 801481a:	d1ee      	bne.n	80147fa <__kernel_rem_pio2f+0x56>
 801481c:	2d00      	cmp	r5, #0
 801481e:	f2c0 82e7 	blt.w	8014df0 <__kernel_rem_pio2f+0x64c>
 8014822:	9b03      	ldr	r3, [sp, #12]
 8014824:	aa1e      	add	r2, sp, #120	; 0x78
 8014826:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801482a:	ae46      	add	r6, sp, #280	; 0x118
 801482c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014830:	4640      	mov	r0, r8
 8014832:	18ef      	adds	r7, r5, r3
 8014834:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 8014838:	f1b8 0f00 	cmp.w	r8, #0
 801483c:	eddf 7a81 	vldr	s15, [pc, #516]	; 8014a44 <__kernel_rem_pio2f+0x2a0>
 8014840:	db09      	blt.n	8014856 <__kernel_rem_pio2f+0xb2>
 8014842:	4622      	mov	r2, r4
 8014844:	4653      	mov	r3, sl
 8014846:	ecf3 6a01 	vldmia	r3!, {s13}
 801484a:	ed32 7a01 	vldmdb	r2!, {s14}
 801484e:	428b      	cmp	r3, r1
 8014850:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014854:	d1f7      	bne.n	8014846 <__kernel_rem_pio2f+0xa2>
 8014856:	3001      	adds	r0, #1
 8014858:	42b8      	cmp	r0, r7
 801485a:	ece6 7a01 	vstmia	r6!, {s15}
 801485e:	f104 0404 	add.w	r4, r4, #4
 8014862:	d1e9      	bne.n	8014838 <__kernel_rem_pio2f+0x94>
 8014864:	ab09      	add	r3, sp, #36	; 0x24
 8014866:	af0a      	add	r7, sp, #40	; 0x28
 8014868:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 801486c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8014870:	3b08      	subs	r3, #8
 8014872:	ed9f 9a76 	vldr	s18, [pc, #472]	; 8014a4c <__kernel_rem_pio2f+0x2a8>
 8014876:	eddf 8a74 	vldr	s17, [pc, #464]	; 8014a48 <__kernel_rem_pio2f+0x2a4>
 801487a:	9805      	ldr	r0, [sp, #20]
 801487c:	9304      	str	r3, [sp, #16]
 801487e:	eb0a 040c 	add.w	r4, sl, ip
 8014882:	ae46      	add	r6, sp, #280	; 0x118
 8014884:	9500      	str	r5, [sp, #0]
 8014886:	ab5a      	add	r3, sp, #360	; 0x168
 8014888:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801488c:	2d00      	cmp	r5, #0
 801488e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8014892:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 8014896:	dd16      	ble.n	80148c6 <__kernel_rem_pio2f+0x122>
 8014898:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 801489c:	463a      	mov	r2, r7
 801489e:	ee60 7a09 	vmul.f32	s15, s0, s18
 80148a2:	eeb0 7a40 	vmov.f32	s14, s0
 80148a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148aa:	ed73 6a01 	vldmdb	r3!, {s13}
 80148ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148b2:	42b3      	cmp	r3, r6
 80148b4:	eea7 7ae8 	vfms.f32	s14, s15, s17
 80148b8:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80148bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80148c0:	eca2 7a01 	vstmia	r2!, {s14}
 80148c4:	d1eb      	bne.n	801489e <__kernel_rem_pio2f+0xfa>
 80148c6:	9001      	str	r0, [sp, #4]
 80148c8:	f000 fc14 	bl	80150f4 <scalbnf>
 80148cc:	eeb0 8a40 	vmov.f32	s16, s0
 80148d0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80148d4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80148d8:	f000 fbc6 	bl	8015068 <floorf>
 80148dc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80148e0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80148e4:	9801      	ldr	r0, [sp, #4]
 80148e6:	2800      	cmp	r0, #0
 80148e8:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 80148ec:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80148f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80148f4:	dd79      	ble.n	80149ea <__kernel_rem_pio2f+0x246>
 80148f6:	f105 3eff 	add.w	lr, r5, #4294967295
 80148fa:	f1c0 0308 	rsb	r3, r0, #8
 80148fe:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 8014902:	fa41 fc03 	asr.w	ip, r1, r3
 8014906:	fa0c f303 	lsl.w	r3, ip, r3
 801490a:	1acb      	subs	r3, r1, r3
 801490c:	f1c0 0207 	rsb	r2, r0, #7
 8014910:	ee19 1a90 	vmov	r1, s19
 8014914:	fa43 f202 	asr.w	r2, r3, r2
 8014918:	4461      	add	r1, ip
 801491a:	2a00      	cmp	r2, #0
 801491c:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
 8014920:	ee09 1a90 	vmov	s19, r1
 8014924:	dc69      	bgt.n	80149fa <__kernel_rem_pio2f+0x256>
 8014926:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492e:	f040 80c0 	bne.w	8014ab2 <__kernel_rem_pio2f+0x30e>
 8014932:	9b00      	ldr	r3, [sp, #0]
 8014934:	f105 3bff 	add.w	fp, r5, #4294967295
 8014938:	455b      	cmp	r3, fp
 801493a:	dc10      	bgt.n	801495e <__kernel_rem_pio2f+0x1ba>
 801493c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8014940:	3b01      	subs	r3, #1
 8014942:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014946:	2100      	movs	r1, #0
 8014948:	4694      	mov	ip, r2
 801494a:	f853 2904 	ldr.w	r2, [r3], #-4
 801494e:	454b      	cmp	r3, r9
 8014950:	ea41 0102 	orr.w	r1, r1, r2
 8014954:	d1f9      	bne.n	801494a <__kernel_rem_pio2f+0x1a6>
 8014956:	4662      	mov	r2, ip
 8014958:	2900      	cmp	r1, #0
 801495a:	f040 80f2 	bne.w	8014b42 <__kernel_rem_pio2f+0x39e>
 801495e:	9b00      	ldr	r3, [sp, #0]
 8014960:	3b01      	subs	r3, #1
 8014962:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8014966:	2b00      	cmp	r3, #0
 8014968:	f040 80e7 	bne.w	8014b3a <__kernel_rem_pio2f+0x396>
 801496c:	9b04      	ldr	r3, [sp, #16]
 801496e:	f04f 0c01 	mov.w	ip, #1
 8014972:	f853 2904 	ldr.w	r2, [r3], #-4
 8014976:	f10c 0c01 	add.w	ip, ip, #1
 801497a:	2a00      	cmp	r2, #0
 801497c:	d0f9      	beq.n	8014972 <__kernel_rem_pio2f+0x1ce>
 801497e:	1c6b      	adds	r3, r5, #1
 8014980:	44ac      	add	ip, r5
 8014982:	469e      	mov	lr, r3
 8014984:	9a03      	ldr	r2, [sp, #12]
 8014986:	1951      	adds	r1, r2, r5
 8014988:	9a02      	ldr	r2, [sp, #8]
 801498a:	eb02 0b03 	add.w	fp, r2, r3
 801498e:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 8014992:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8014994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014998:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 801499c:	ab1e      	add	r3, sp, #120	; 0x78
 801499e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80149a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80149a6:	eddb 7a01 	vldr	s15, [fp, #4]
 80149aa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014a44 <__kernel_rem_pio2f+0x2a0>
 80149ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149b2:	f1b8 0f00 	cmp.w	r8, #0
 80149b6:	f10b 0b04 	add.w	fp, fp, #4
 80149ba:	edc1 7a00 	vstr	s15, [r1]
 80149be:	460a      	mov	r2, r1
 80149c0:	f101 0104 	add.w	r1, r1, #4
 80149c4:	db09      	blt.n	80149da <__kernel_rem_pio2f+0x236>
 80149c6:	4653      	mov	r3, sl
 80149c8:	e001      	b.n	80149ce <__kernel_rem_pio2f+0x22a>
 80149ca:	ed72 7a01 	vldmdb	r2!, {s15}
 80149ce:	ecf3 6a01 	vldmia	r3!, {s13}
 80149d2:	42a3      	cmp	r3, r4
 80149d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80149d8:	d1f7      	bne.n	80149ca <__kernel_rem_pio2f+0x226>
 80149da:	f10e 0e01 	add.w	lr, lr, #1
 80149de:	45e6      	cmp	lr, ip
 80149e0:	eca5 7a01 	vstmia	r5!, {s14}
 80149e4:	dddf      	ble.n	80149a6 <__kernel_rem_pio2f+0x202>
 80149e6:	4665      	mov	r5, ip
 80149e8:	e74d      	b.n	8014886 <__kernel_rem_pio2f+0xe2>
 80149ea:	f040 809c 	bne.w	8014b26 <__kernel_rem_pio2f+0x382>
 80149ee:	1e6b      	subs	r3, r5, #1
 80149f0:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80149f4:	11d2      	asrs	r2, r2, #7
 80149f6:	2a00      	cmp	r2, #0
 80149f8:	dd95      	ble.n	8014926 <__kernel_rem_pio2f+0x182>
 80149fa:	ee19 3a90 	vmov	r3, s19
 80149fe:	2d00      	cmp	r5, #0
 8014a00:	f103 0301 	add.w	r3, r3, #1
 8014a04:	ee09 3a90 	vmov	s19, r3
 8014a08:	f340 8198 	ble.w	8014d3c <__kernel_rem_pio2f+0x598>
 8014a0c:	6839      	ldr	r1, [r7, #0]
 8014a0e:	2900      	cmp	r1, #0
 8014a10:	d17f      	bne.n	8014b12 <__kernel_rem_pio2f+0x36e>
 8014a12:	2d01      	cmp	r5, #1
 8014a14:	d026      	beq.n	8014a64 <__kernel_rem_pio2f+0x2c0>
 8014a16:	463b      	mov	r3, r7
 8014a18:	f04f 0c01 	mov.w	ip, #1
 8014a1c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8014a20:	2900      	cmp	r1, #0
 8014a22:	d07a      	beq.n	8014b1a <__kernel_rem_pio2f+0x376>
 8014a24:	f10c 0301 	add.w	r3, ip, #1
 8014a28:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8014a2c:	429d      	cmp	r5, r3
 8014a2e:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
 8014a32:	dd16      	ble.n	8014a62 <__kernel_rem_pio2f+0x2be>
 8014a34:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8014a38:	44bb      	add	fp, r7
 8014a3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014a3e:	e00a      	b.n	8014a56 <__kernel_rem_pio2f+0x2b2>
 8014a40:	0802b194 	.word	0x0802b194
 8014a44:	00000000 	.word	0x00000000
 8014a48:	43800000 	.word	0x43800000
 8014a4c:	3b800000 	.word	0x3b800000
 8014a50:	3fc90000 	.word	0x3fc90000
 8014a54:	6819      	ldr	r1, [r3, #0]
 8014a56:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8014a5a:	f843 1b04 	str.w	r1, [r3], #4
 8014a5e:	455b      	cmp	r3, fp
 8014a60:	d1f8      	bne.n	8014a54 <__kernel_rem_pio2f+0x2b0>
 8014a62:	2101      	movs	r1, #1
 8014a64:	2800      	cmp	r0, #0
 8014a66:	dd0c      	ble.n	8014a82 <__kernel_rem_pio2f+0x2de>
 8014a68:	2801      	cmp	r0, #1
 8014a6a:	f000 8148 	beq.w	8014cfe <__kernel_rem_pio2f+0x55a>
 8014a6e:	2802      	cmp	r0, #2
 8014a70:	d107      	bne.n	8014a82 <__kernel_rem_pio2f+0x2de>
 8014a72:	f105 3cff 	add.w	ip, r5, #4294967295
 8014a76:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014a7e:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014a82:	2a02      	cmp	r2, #2
 8014a84:	f47f af4f 	bne.w	8014926 <__kernel_rem_pio2f+0x182>
 8014a88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a8c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014a90:	2900      	cmp	r1, #0
 8014a92:	f43f af48 	beq.w	8014926 <__kernel_rem_pio2f+0x182>
 8014a96:	9209      	str	r2, [sp, #36]	; 0x24
 8014a98:	9001      	str	r0, [sp, #4]
 8014a9a:	f000 fb2b 	bl	80150f4 <scalbnf>
 8014a9e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014aa4:	9801      	ldr	r0, [sp, #4]
 8014aa6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aae:	f43f af40 	beq.w	8014932 <__kernel_rem_pio2f+0x18e>
 8014ab2:	9202      	str	r2, [sp, #8]
 8014ab4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014ab8:	eeb0 0a48 	vmov.f32	s0, s16
 8014abc:	1a98      	subs	r0, r3, r2
 8014abe:	9501      	str	r5, [sp, #4]
 8014ac0:	9d00      	ldr	r5, [sp, #0]
 8014ac2:	f000 fb17 	bl	80150f4 <scalbnf>
 8014ac6:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8014a48 <__kernel_rem_pio2f+0x2a4>
 8014aca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8014ad6:	f2c0 8159 	blt.w	8014d8c <__kernel_rem_pio2f+0x5e8>
 8014ada:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8014a4c <__kernel_rem_pio2f+0x2a8>
 8014ade:	9905      	ldr	r1, [sp, #20]
 8014ae0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014ae4:	3108      	adds	r1, #8
 8014ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aea:	9105      	str	r1, [sp, #20]
 8014aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014af0:	f103 0b01 	add.w	fp, r3, #1
 8014af4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014afc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014b00:	ee10 1a10 	vmov	r1, s0
 8014b04:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014b08:	ee17 3a90 	vmov	r3, s15
 8014b0c:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
 8014b10:	e02e      	b.n	8014b70 <__kernel_rem_pio2f+0x3cc>
 8014b12:	2301      	movs	r3, #1
 8014b14:	f04f 0c00 	mov.w	ip, #0
 8014b18:	e786      	b.n	8014a28 <__kernel_rem_pio2f+0x284>
 8014b1a:	f10c 0c01 	add.w	ip, ip, #1
 8014b1e:	45ac      	cmp	ip, r5
 8014b20:	f47f af7c 	bne.w	8014a1c <__kernel_rem_pio2f+0x278>
 8014b24:	e79e      	b.n	8014a64 <__kernel_rem_pio2f+0x2c0>
 8014b26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014b2a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b32:	f280 80f2 	bge.w	8014d1a <__kernel_rem_pio2f+0x576>
 8014b36:	2200      	movs	r2, #0
 8014b38:	e6f5      	b.n	8014926 <__kernel_rem_pio2f+0x182>
 8014b3a:	1c6b      	adds	r3, r5, #1
 8014b3c:	469e      	mov	lr, r3
 8014b3e:	469c      	mov	ip, r3
 8014b40:	e720      	b.n	8014984 <__kernel_rem_pio2f+0x1e0>
 8014b42:	9905      	ldr	r1, [sp, #20]
 8014b44:	f1a1 0008 	sub.w	r0, r1, #8
 8014b48:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 8014b4c:	9005      	str	r0, [sp, #20]
 8014b4e:	462b      	mov	r3, r5
 8014b50:	9d00      	ldr	r5, [sp, #0]
 8014b52:	b969      	cbnz	r1, 8014b70 <__kernel_rem_pio2f+0x3cc>
 8014b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014b58:	3b02      	subs	r3, #2
 8014b5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014b5e:	4601      	mov	r1, r0
 8014b60:	f853 0904 	ldr.w	r0, [r3], #-4
 8014b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b68:	3908      	subs	r1, #8
 8014b6a:	2800      	cmp	r0, #0
 8014b6c:	d0f8      	beq.n	8014b60 <__kernel_rem_pio2f+0x3bc>
 8014b6e:	9105      	str	r1, [sp, #20]
 8014b70:	9805      	ldr	r0, [sp, #20]
 8014b72:	9200      	str	r2, [sp, #0]
 8014b74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014b78:	f000 fabc 	bl	80150f4 <scalbnf>
 8014b7c:	f1bb 0f00 	cmp.w	fp, #0
 8014b80:	9a00      	ldr	r2, [sp, #0]
 8014b82:	f2c0 8128 	blt.w	8014dd6 <__kernel_rem_pio2f+0x632>
 8014b86:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 8014b8a:	ab46      	add	r3, sp, #280	; 0x118
 8014b8c:	eb03 060e 	add.w	r6, r3, lr
 8014b90:	f10e 0c04 	add.w	ip, lr, #4
 8014b94:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 8014a4c <__kernel_rem_pio2f+0x2a8>
 8014b98:	eb07 030c 	add.w	r3, r7, ip
 8014b9c:	1d31      	adds	r1, r6, #4
 8014b9e:	ed73 7a01 	vldmdb	r3!, {s15}
 8014ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ba6:	42bb      	cmp	r3, r7
 8014ba8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014bac:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014bb0:	ed61 7a01 	vstmdb	r1!, {s15}
 8014bb4:	d1f3      	bne.n	8014b9e <__kernel_rem_pio2f+0x3fa>
 8014bb6:	2d00      	cmp	r5, #0
 8014bb8:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 8014a50 <__kernel_rem_pio2f+0x2ac>
 8014bbc:	f04f 0400 	mov.w	r4, #0
 8014bc0:	db20      	blt.n	8014c04 <__kernel_rem_pio2f+0x460>
 8014bc2:	4893      	ldr	r0, [pc, #588]	; (8014e10 <__kernel_rem_pio2f+0x66c>)
 8014bc4:	eddf 7a93 	vldr	s15, [pc, #588]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014bc8:	eeb0 7a46 	vmov.f32	s14, s12
 8014bcc:	4631      	mov	r1, r6
 8014bce:	2300      	movs	r3, #0
 8014bd0:	e003      	b.n	8014bda <__kernel_rem_pio2f+0x436>
 8014bd2:	429c      	cmp	r4, r3
 8014bd4:	db08      	blt.n	8014be8 <__kernel_rem_pio2f+0x444>
 8014bd6:	ecb0 7a01 	vldmia	r0!, {s14}
 8014bda:	ecf1 6a01 	vldmia	r1!, {s13}
 8014bde:	3301      	adds	r3, #1
 8014be0:	429d      	cmp	r5, r3
 8014be2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014be6:	daf4      	bge.n	8014bd2 <__kernel_rem_pio2f+0x42e>
 8014be8:	ab5a      	add	r3, sp, #360	; 0x168
 8014bea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014bee:	45a3      	cmp	fp, r4
 8014bf0:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
 8014bf4:	f1a6 0604 	sub.w	r6, r6, #4
 8014bf8:	f104 0301 	add.w	r3, r4, #1
 8014bfc:	d005      	beq.n	8014c0a <__kernel_rem_pio2f+0x466>
 8014bfe:	2d00      	cmp	r5, #0
 8014c00:	461c      	mov	r4, r3
 8014c02:	dade      	bge.n	8014bc2 <__kernel_rem_pio2f+0x41e>
 8014c04:	eddf 7a83 	vldr	s15, [pc, #524]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014c08:	e7ee      	b.n	8014be8 <__kernel_rem_pio2f+0x444>
 8014c0a:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8014c0c:	2902      	cmp	r1, #2
 8014c0e:	dc1c      	bgt.n	8014c4a <__kernel_rem_pio2f+0x4a6>
 8014c10:	2900      	cmp	r1, #0
 8014c12:	f300 8095 	bgt.w	8014d40 <__kernel_rem_pio2f+0x59c>
 8014c16:	d10f      	bne.n	8014c38 <__kernel_rem_pio2f+0x494>
 8014c18:	ab32      	add	r3, sp, #200	; 0xc8
 8014c1a:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014c1e:	449c      	add	ip, r3
 8014c20:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014c24:	4563      	cmp	r3, ip
 8014c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c2a:	d1f9      	bne.n	8014c20 <__kernel_rem_pio2f+0x47c>
 8014c2c:	b10a      	cbz	r2, 8014c32 <__kernel_rem_pio2f+0x48e>
 8014c2e:	eef1 7a67 	vneg.f32	s15, s15
 8014c32:	9b06      	ldr	r3, [sp, #24]
 8014c34:	edc3 7a00 	vstr	s15, [r3]
 8014c38:	ee19 3a90 	vmov	r3, s19
 8014c3c:	f003 0007 	and.w	r0, r3, #7
 8014c40:	b05b      	add	sp, #364	; 0x16c
 8014c42:	ecbd 8b04 	vpop	{d8-d9}
 8014c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014c4c:	2b03      	cmp	r3, #3
 8014c4e:	d1f3      	bne.n	8014c38 <__kernel_rem_pio2f+0x494>
 8014c50:	f1bb 0f00 	cmp.w	fp, #0
 8014c54:	f000 80d4 	beq.w	8014e00 <__kernel_rem_pio2f+0x65c>
 8014c58:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014c5c:	446b      	add	r3, sp
 8014c5e:	a932      	add	r1, sp, #200	; 0xc8
 8014c60:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8014c64:	eb01 038b 	add.w	r3, r1, fp, lsl #2
 8014c68:	ed73 7a01 	vldmdb	r3!, {s15}
 8014c6c:	eef0 6a47 	vmov.f32	s13, s14
 8014c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c74:	4299      	cmp	r1, r3
 8014c76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014c7a:	ed83 7a00 	vstr	s14, [r3]
 8014c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014c82:	edc3 7a01 	vstr	s15, [r3, #4]
 8014c86:	d1ef      	bne.n	8014c68 <__kernel_rem_pio2f+0x4c4>
 8014c88:	f1bb 0f01 	cmp.w	fp, #1
 8014c8c:	f340 80b8 	ble.w	8014e00 <__kernel_rem_pio2f+0x65c>
 8014c90:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 8014c94:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014c98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c9c:	eb0d 0e03 	add.w	lr, sp, r3
 8014ca0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8014ca4:	f10b 0304 	add.w	r3, fp, #4
 8014ca8:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
 8014cac:	440b      	add	r3, r1
 8014cae:	a833      	add	r0, sp, #204	; 0xcc
 8014cb0:	ed73 7a01 	vldmdb	r3!, {s15}
 8014cb4:	eef0 6a47 	vmov.f32	s13, s14
 8014cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014cbc:	4298      	cmp	r0, r3
 8014cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cc2:	ed83 7a00 	vstr	s14, [r3]
 8014cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014cca:	edc3 7a01 	vstr	s15, [r3, #4]
 8014cce:	d1ef      	bne.n	8014cb0 <__kernel_rem_pio2f+0x50c>
 8014cd0:	f10b 0b08 	add.w	fp, fp, #8
 8014cd4:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014cd8:	eb01 030b 	add.w	r3, r1, fp
 8014cdc:	3108      	adds	r1, #8
 8014cde:	ed33 7a01 	vldmdb	r3!, {s14}
 8014ce2:	4299      	cmp	r1, r3
 8014ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ce8:	d1f9      	bne.n	8014cde <__kernel_rem_pio2f+0x53a>
 8014cea:	2a00      	cmp	r2, #0
 8014cec:	d156      	bne.n	8014d9c <__kernel_rem_pio2f+0x5f8>
 8014cee:	9906      	ldr	r1, [sp, #24]
 8014cf0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014cf2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014cf4:	600a      	str	r2, [r1, #0]
 8014cf6:	604b      	str	r3, [r1, #4]
 8014cf8:	edc1 7a02 	vstr	s15, [r1, #8]
 8014cfc:	e79c      	b.n	8014c38 <__kernel_rem_pio2f+0x494>
 8014cfe:	f105 3cff 	add.w	ip, r5, #4294967295
 8014d02:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d0a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014d0e:	e6b8      	b.n	8014a82 <__kernel_rem_pio2f+0x2de>
 8014d10:	2308      	movs	r3, #8
 8014d12:	9307      	str	r3, [sp, #28]
 8014d14:	2300      	movs	r3, #0
 8014d16:	9302      	str	r3, [sp, #8]
 8014d18:	e55f      	b.n	80147da <__kernel_rem_pio2f+0x36>
 8014d1a:	ee19 3a90 	vmov	r3, s19
 8014d1e:	2d00      	cmp	r5, #0
 8014d20:	f103 0301 	add.w	r3, r3, #1
 8014d24:	ee09 3a90 	vmov	s19, r3
 8014d28:	bfc8      	it	gt
 8014d2a:	2202      	movgt	r2, #2
 8014d2c:	f73f ae6e 	bgt.w	8014a0c <__kernel_rem_pio2f+0x268>
 8014d30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d34:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8014d38:	2202      	movs	r2, #2
 8014d3a:	e5f4      	b.n	8014926 <__kernel_rem_pio2f+0x182>
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	e691      	b.n	8014a64 <__kernel_rem_pio2f+0x2c0>
 8014d40:	a932      	add	r1, sp, #200	; 0xc8
 8014d42:	eddf 7a34 	vldr	s15, [pc, #208]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014d46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d4a:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d4e:	4299      	cmp	r1, r3
 8014d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d54:	d1f9      	bne.n	8014d4a <__kernel_rem_pio2f+0x5a6>
 8014d56:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8014d5a:	bb8a      	cbnz	r2, 8014dc0 <__kernel_rem_pio2f+0x61c>
 8014d5c:	9b06      	ldr	r3, [sp, #24]
 8014d5e:	f1bb 0f00 	cmp.w	fp, #0
 8014d62:	edc3 7a00 	vstr	s15, [r3]
 8014d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d6a:	dd0b      	ble.n	8014d84 <__kernel_rem_pio2f+0x5e0>
 8014d6c:	a933      	add	r1, sp, #204	; 0xcc
 8014d6e:	2301      	movs	r3, #1
 8014d70:	ecb1 7a01 	vldmia	r1!, {s14}
 8014d74:	3301      	adds	r3, #1
 8014d76:	459b      	cmp	fp, r3
 8014d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d7c:	daf8      	bge.n	8014d70 <__kernel_rem_pio2f+0x5cc>
 8014d7e:	b10a      	cbz	r2, 8014d84 <__kernel_rem_pio2f+0x5e0>
 8014d80:	eef1 7a67 	vneg.f32	s15, s15
 8014d84:	9b06      	ldr	r3, [sp, #24]
 8014d86:	edc3 7a01 	vstr	s15, [r3, #4]
 8014d8a:	e755      	b.n	8014c38 <__kernel_rem_pio2f+0x494>
 8014d8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014d90:	469b      	mov	fp, r3
 8014d92:	ee10 1a10 	vmov	r1, s0
 8014d96:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014d9a:	e6e9      	b.n	8014b70 <__kernel_rem_pio2f+0x3cc>
 8014d9c:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8014da0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014da4:	9b06      	ldr	r3, [sp, #24]
 8014da6:	eef1 6a66 	vneg.f32	s13, s13
 8014daa:	eeb1 7a47 	vneg.f32	s14, s14
 8014dae:	eef1 7a67 	vneg.f32	s15, s15
 8014db2:	edc3 6a00 	vstr	s13, [r3]
 8014db6:	ed83 7a01 	vstr	s14, [r3, #4]
 8014dba:	edc3 7a02 	vstr	s15, [r3, #8]
 8014dbe:	e73b      	b.n	8014c38 <__kernel_rem_pio2f+0x494>
 8014dc0:	9b06      	ldr	r3, [sp, #24]
 8014dc2:	eef1 6a67 	vneg.f32	s13, s15
 8014dc6:	f1bb 0f00 	cmp.w	fp, #0
 8014dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014dce:	edc3 6a00 	vstr	s13, [r3]
 8014dd2:	dccb      	bgt.n	8014d6c <__kernel_rem_pio2f+0x5c8>
 8014dd4:	e7d4      	b.n	8014d80 <__kernel_rem_pio2f+0x5dc>
 8014dd6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014dd8:	2b02      	cmp	r3, #2
 8014dda:	dc0d      	bgt.n	8014df8 <__kernel_rem_pio2f+0x654>
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	dc14      	bgt.n	8014e0a <__kernel_rem_pio2f+0x666>
 8014de0:	f47f af2a 	bne.w	8014c38 <__kernel_rem_pio2f+0x494>
 8014de4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014de8:	2a00      	cmp	r2, #0
 8014dea:	f43f af22 	beq.w	8014c32 <__kernel_rem_pio2f+0x48e>
 8014dee:	e71e      	b.n	8014c2e <__kernel_rem_pio2f+0x48a>
 8014df0:	9b03      	ldr	r3, [sp, #12]
 8014df2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014df6:	e535      	b.n	8014864 <__kernel_rem_pio2f+0xc0>
 8014df8:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014dfa:	2b03      	cmp	r3, #3
 8014dfc:	f47f af1c 	bne.w	8014c38 <__kernel_rem_pio2f+0x494>
 8014e00:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014e04:	2a00      	cmp	r2, #0
 8014e06:	d1c9      	bne.n	8014d9c <__kernel_rem_pio2f+0x5f8>
 8014e08:	e771      	b.n	8014cee <__kernel_rem_pio2f+0x54a>
 8014e0a:	eddf 7a02 	vldr	s15, [pc, #8]	; 8014e14 <__kernel_rem_pio2f+0x670>
 8014e0e:	e7a2      	b.n	8014d56 <__kernel_rem_pio2f+0x5b2>
 8014e10:	0802b16c 	.word	0x0802b16c
 8014e14:	00000000 	.word	0x00000000

08014e18 <__kernel_sinf>:
 8014e18:	ee10 3a10 	vmov	r3, s0
 8014e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014e24:	da04      	bge.n	8014e30 <__kernel_sinf+0x18>
 8014e26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014e2a:	ee17 3a90 	vmov	r3, s15
 8014e2e:	b35b      	cbz	r3, 8014e88 <__kernel_sinf+0x70>
 8014e30:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014e34:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014e8c <__kernel_sinf+0x74>
 8014e38:	eddf 5a15 	vldr	s11, [pc, #84]	; 8014e90 <__kernel_sinf+0x78>
 8014e3c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014e94 <__kernel_sinf+0x7c>
 8014e40:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014e98 <__kernel_sinf+0x80>
 8014e44:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014e48:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014e9c <__kernel_sinf+0x84>
 8014e4c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014e50:	ee20 5a27 	vmul.f32	s10, s0, s15
 8014e54:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014e58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014e5c:	b930      	cbnz	r0, 8014e6c <__kernel_sinf+0x54>
 8014e5e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8014ea0 <__kernel_sinf+0x88>
 8014e62:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014e66:	eea6 0a85 	vfma.f32	s0, s13, s10
 8014e6a:	4770      	bx	lr
 8014e6c:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8014e70:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014e74:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8014e78:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8014ea4 <__kernel_sinf+0x8c>
 8014e7c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014e80:	eee5 0a26 	vfma.f32	s1, s10, s13
 8014e84:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop
 8014e8c:	2f2ec9d3 	.word	0x2f2ec9d3
 8014e90:	b2d72f34 	.word	0xb2d72f34
 8014e94:	3638ef1b 	.word	0x3638ef1b
 8014e98:	b9500d01 	.word	0xb9500d01
 8014e9c:	3c088889 	.word	0x3c088889
 8014ea0:	be2aaaab 	.word	0xbe2aaaab
 8014ea4:	3e2aaaab 	.word	0x3e2aaaab

08014ea8 <__kernel_tanf>:
 8014ea8:	b508      	push	{r3, lr}
 8014eaa:	ee10 3a10 	vmov	r3, s0
 8014eae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014eb2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014eb6:	eef0 7a40 	vmov.f32	s15, s0
 8014eba:	da0f      	bge.n	8014edc <__kernel_tanf+0x34>
 8014ebc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014ec0:	ee17 1a10 	vmov	r1, s14
 8014ec4:	bb01      	cbnz	r1, 8014f08 <__kernel_tanf+0x60>
 8014ec6:	1c43      	adds	r3, r0, #1
 8014ec8:	4313      	orrs	r3, r2
 8014eca:	f000 80a0 	beq.w	801500e <__kernel_tanf+0x166>
 8014ece:	2801      	cmp	r0, #1
 8014ed0:	d003      	beq.n	8014eda <__kernel_tanf+0x32>
 8014ed2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014ed6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014eda:	bd08      	pop	{r3, pc}
 8014edc:	4950      	ldr	r1, [pc, #320]	; (8015020 <__kernel_tanf+0x178>)
 8014ede:	428a      	cmp	r2, r1
 8014ee0:	db12      	blt.n	8014f08 <__kernel_tanf+0x60>
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	bfb8      	it	lt
 8014ee6:	eef1 7a40 	vneglt.f32	s15, s0
 8014eea:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8015024 <__kernel_tanf+0x17c>
 8014eee:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015028 <__kernel_tanf+0x180>
 8014ef2:	bfb8      	it	lt
 8014ef4:	eef1 0a60 	vneglt.f32	s1, s1
 8014ef8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014efc:	ee37 0a60 	vsub.f32	s0, s14, s1
 8014f00:	eddf 0a4a 	vldr	s1, [pc, #296]	; 801502c <__kernel_tanf+0x184>
 8014f04:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014f08:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014f0c:	eddf 4a48 	vldr	s9, [pc, #288]	; 8015030 <__kernel_tanf+0x188>
 8014f10:	eddf 5a48 	vldr	s11, [pc, #288]	; 8015034 <__kernel_tanf+0x18c>
 8014f14:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8015038 <__kernel_tanf+0x190>
 8014f18:	ed9f 6a48 	vldr	s12, [pc, #288]	; 801503c <__kernel_tanf+0x194>
 8014f1c:	4940      	ldr	r1, [pc, #256]	; (8015020 <__kernel_tanf+0x178>)
 8014f1e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014f22:	428a      	cmp	r2, r1
 8014f24:	eee7 5a24 	vfma.f32	s11, s14, s9
 8014f28:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014f2c:	eddf 4a44 	vldr	s9, [pc, #272]	; 8015040 <__kernel_tanf+0x198>
 8014f30:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8015044 <__kernel_tanf+0x19c>
 8014f34:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014f38:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014f3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8015048 <__kernel_tanf+0x1a0>
 8014f40:	ed9f 6a42 	vldr	s12, [pc, #264]	; 801504c <__kernel_tanf+0x1a4>
 8014f44:	eee4 5a87 	vfma.f32	s11, s9, s14
 8014f48:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014f4c:	eddf 4a40 	vldr	s9, [pc, #256]	; 8015050 <__kernel_tanf+0x1a8>
 8014f50:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8015054 <__kernel_tanf+0x1ac>
 8014f54:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014f58:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014f5c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8015058 <__kernel_tanf+0x1b0>
 8014f60:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801505c <__kernel_tanf+0x1b4>
 8014f64:	eea4 6a87 	vfma.f32	s12, s9, s14
 8014f68:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014f6c:	eeb0 7a46 	vmov.f32	s14, s12
 8014f70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014f74:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8014f78:	eeb0 6a60 	vmov.f32	s12, s1
 8014f7c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014f80:	eddf 4a37 	vldr	s9, [pc, #220]	; 8015060 <__kernel_tanf+0x1b8>
 8014f84:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014f88:	eee5 0a24 	vfma.f32	s1, s10, s9
 8014f8c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8014f90:	da1f      	bge.n	8014fd2 <__kernel_tanf+0x12a>
 8014f92:	2801      	cmp	r0, #1
 8014f94:	d0a1      	beq.n	8014eda <__kernel_tanf+0x32>
 8014f96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014f9a:	eec7 6a00 	vdiv.f32	s13, s14, s0
 8014f9e:	4b31      	ldr	r3, [pc, #196]	; (8015064 <__kernel_tanf+0x1bc>)
 8014fa0:	ee10 2a10 	vmov	r2, s0
 8014fa4:	401a      	ands	r2, r3
 8014fa6:	ee06 2a10 	vmov	s12, r2
 8014faa:	ee16 2a90 	vmov	r2, s13
 8014fae:	ee76 7a67 	vsub.f32	s15, s12, s15
 8014fb2:	4013      	ands	r3, r2
 8014fb4:	ee00 3a10 	vmov	s0, r3
 8014fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014fbc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014fc0:	eef0 7a47 	vmov.f32	s15, s14
 8014fc4:	eee6 7a00 	vfma.f32	s15, s12, s0
 8014fc8:	eee0 7a80 	vfma.f32	s15, s1, s0
 8014fcc:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8014fd0:	bd08      	pop	{r3, pc}
 8014fd2:	ee07 0a10 	vmov	s14, r0
 8014fd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fda:	ee60 5a00 	vmul.f32	s11, s0, s0
 8014fde:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014fe2:	179b      	asrs	r3, r3, #30
 8014fe4:	eec5 6a80 	vdiv.f32	s13, s11, s0
 8014fe8:	f003 0302 	and.w	r3, r3, #2
 8014fec:	f1c3 0301 	rsb	r3, r3, #1
 8014ff0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014ff4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8014ff8:	ee00 3a10 	vmov	s0, r3
 8014ffc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015000:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015004:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8015008:	ee20 0a07 	vmul.f32	s0, s0, s14
 801500c:	bd08      	pop	{r3, pc}
 801500e:	f7fe ffa9 	bl	8013f64 <fabsf>
 8015012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015016:	eef0 7a40 	vmov.f32	s15, s0
 801501a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801501e:	bd08      	pop	{r3, pc}
 8015020:	3f2ca140 	.word	0x3f2ca140
 8015024:	33222168 	.word	0x33222168
 8015028:	3f490fda 	.word	0x3f490fda
 801502c:	00000000 	.word	0x00000000
 8015030:	b79bae5f 	.word	0xb79bae5f
 8015034:	38a3f445 	.word	0x38a3f445
 8015038:	37d95384 	.word	0x37d95384
 801503c:	3895c07a 	.word	0x3895c07a
 8015040:	3a1a26c8 	.word	0x3a1a26c8
 8015044:	398137b9 	.word	0x398137b9
 8015048:	3b6b6916 	.word	0x3b6b6916
 801504c:	3abede48 	.word	0x3abede48
 8015050:	3cb327a4 	.word	0x3cb327a4
 8015054:	3c11371f 	.word	0x3c11371f
 8015058:	3e088889 	.word	0x3e088889
 801505c:	3d5d0dd1 	.word	0x3d5d0dd1
 8015060:	3eaaaaab 	.word	0x3eaaaaab
 8015064:	fffff000 	.word	0xfffff000

08015068 <floorf>:
 8015068:	ee10 2a10 	vmov	r2, s0
 801506c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8015070:	3b7f      	subs	r3, #127	; 0x7f
 8015072:	2b16      	cmp	r3, #22
 8015074:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015078:	dc28      	bgt.n	80150cc <floorf+0x64>
 801507a:	2b00      	cmp	r3, #0
 801507c:	db18      	blt.n	80150b0 <floorf+0x48>
 801507e:	491a      	ldr	r1, [pc, #104]	; (80150e8 <floorf+0x80>)
 8015080:	4119      	asrs	r1, r3
 8015082:	420a      	tst	r2, r1
 8015084:	d021      	beq.n	80150ca <floorf+0x62>
 8015086:	eddf 7a19 	vldr	s15, [pc, #100]	; 80150ec <floorf+0x84>
 801508a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801508e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015096:	dd18      	ble.n	80150ca <floorf+0x62>
 8015098:	2a00      	cmp	r2, #0
 801509a:	da04      	bge.n	80150a6 <floorf+0x3e>
 801509c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80150a0:	fa40 f303 	asr.w	r3, r0, r3
 80150a4:	441a      	add	r2, r3
 80150a6:	ea22 0301 	bic.w	r3, r2, r1
 80150aa:	ee00 3a10 	vmov	s0, r3
 80150ae:	4770      	bx	lr
 80150b0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80150ec <floorf+0x84>
 80150b4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80150b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c0:	dd03      	ble.n	80150ca <floorf+0x62>
 80150c2:	2a00      	cmp	r2, #0
 80150c4:	db08      	blt.n	80150d8 <floorf+0x70>
 80150c6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80150f0 <floorf+0x88>
 80150ca:	4770      	bx	lr
 80150cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80150d0:	d3fb      	bcc.n	80150ca <floorf+0x62>
 80150d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80150d6:	4770      	bx	lr
 80150d8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80150dc:	2900      	cmp	r1, #0
 80150de:	bf18      	it	ne
 80150e0:	eeb0 0a67 	vmovne.f32	s0, s15
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	007fffff 	.word	0x007fffff
 80150ec:	7149f2ca 	.word	0x7149f2ca
 80150f0:	00000000 	.word	0x00000000

080150f4 <scalbnf>:
 80150f4:	b082      	sub	sp, #8
 80150f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80150fa:	9b01      	ldr	r3, [sp, #4]
 80150fc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015100:	d02a      	beq.n	8015158 <scalbnf+0x64>
 8015102:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015106:	d223      	bcs.n	8015150 <scalbnf+0x5c>
 8015108:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801510c:	d128      	bne.n	8015160 <scalbnf+0x6c>
 801510e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8015112:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80151bc <scalbnf+0xc8>
 8015116:	4b2a      	ldr	r3, [pc, #168]	; (80151c0 <scalbnf+0xcc>)
 8015118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801511c:	4298      	cmp	r0, r3
 801511e:	edcd 7a01 	vstr	s15, [sp, #4]
 8015122:	db37      	blt.n	8015194 <scalbnf+0xa0>
 8015124:	9b01      	ldr	r3, [sp, #4]
 8015126:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801512a:	3a19      	subs	r2, #25
 801512c:	4402      	add	r2, r0
 801512e:	2afe      	cmp	r2, #254	; 0xfe
 8015130:	dd1a      	ble.n	8015168 <scalbnf+0x74>
 8015132:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80151c4 <scalbnf+0xd0>
 8015136:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80151c8 <scalbnf+0xd4>
 801513a:	9b01      	ldr	r3, [sp, #4]
 801513c:	2b00      	cmp	r3, #0
 801513e:	eef0 7a40 	vmov.f32	s15, s0
 8015142:	bfb8      	it	lt
 8015144:	eeb0 0a47 	vmovlt.f32	s0, s14
 8015148:	ee20 0a27 	vmul.f32	s0, s0, s15
 801514c:	b002      	add	sp, #8
 801514e:	4770      	bx	lr
 8015150:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015154:	b002      	add	sp, #8
 8015156:	4770      	bx	lr
 8015158:	ed9d 0a01 	vldr	s0, [sp, #4]
 801515c:	b002      	add	sp, #8
 801515e:	4770      	bx	lr
 8015160:	0dd2      	lsrs	r2, r2, #23
 8015162:	4402      	add	r2, r0
 8015164:	2afe      	cmp	r2, #254	; 0xfe
 8015166:	dce4      	bgt.n	8015132 <scalbnf+0x3e>
 8015168:	2a00      	cmp	r2, #0
 801516a:	dc0b      	bgt.n	8015184 <scalbnf+0x90>
 801516c:	f112 0f16 	cmn.w	r2, #22
 8015170:	da17      	bge.n	80151a2 <scalbnf+0xae>
 8015172:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015176:	4298      	cmp	r0, r3
 8015178:	dcdb      	bgt.n	8015132 <scalbnf+0x3e>
 801517a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80151cc <scalbnf+0xd8>
 801517e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80151d0 <scalbnf+0xdc>
 8015182:	e7da      	b.n	801513a <scalbnf+0x46>
 8015184:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015188:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801518c:	ee00 3a10 	vmov	s0, r3
 8015190:	b002      	add	sp, #8
 8015192:	4770      	bx	lr
 8015194:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80151cc <scalbnf+0xd8>
 8015198:	eddd 7a01 	vldr	s15, [sp, #4]
 801519c:	ee27 0a80 	vmul.f32	s0, s15, s0
 80151a0:	e7d8      	b.n	8015154 <scalbnf+0x60>
 80151a2:	3219      	adds	r2, #25
 80151a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80151a8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80151ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80151d4 <scalbnf+0xe0>
 80151b0:	ee07 3a10 	vmov	s14, r3
 80151b4:	ee27 0a27 	vmul.f32	s0, s14, s15
 80151b8:	e7cc      	b.n	8015154 <scalbnf+0x60>
 80151ba:	bf00      	nop
 80151bc:	4c000000 	.word	0x4c000000
 80151c0:	ffff3cb0 	.word	0xffff3cb0
 80151c4:	7149f2ca 	.word	0x7149f2ca
 80151c8:	f149f2ca 	.word	0xf149f2ca
 80151cc:	0da24260 	.word	0x0da24260
 80151d0:	8da24260 	.word	0x8da24260
 80151d4:	33000000 	.word	0x33000000

080151d8 <_init>:
 80151d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151da:	bf00      	nop
 80151dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151de:	bc08      	pop	{r3}
 80151e0:	469e      	mov	lr, r3
 80151e2:	4770      	bx	lr

080151e4 <_fini>:
 80151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e6:	bf00      	nop
 80151e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151ea:	bc08      	pop	{r3}
 80151ec:	469e      	mov	lr, r3
 80151ee:	4770      	bx	lr
