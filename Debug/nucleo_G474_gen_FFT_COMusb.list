
nucleo_G474_gen_FFT_COMusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015fb0  08014ac8  08014ac8  00024ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802aa78  0802aa78  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  0802aa78  0802aa78  0003aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802aa80  0802aa80  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802aa80  0802aa80  0003aa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802aa84  0802aa84  0003aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0802aa88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000130c8  200002b0  0802ad38  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20013378  0802ad38  00043378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee82  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000523b  00000000  00000000  0006f162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  000743a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd0  00000000  00000000  00076250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f5a2  00000000  00000000  00077f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a3b  00000000  00000000  000a74c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013a22a  00000000  00000000  000d0efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0020b127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009948  00000000  00000000  0020b1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002946  00000000  00000000  00214b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b0 	.word	0x200002b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014ab0 	.word	0x08014ab0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002b4 	.word	0x200002b4
 800021c:	08014ab0 	.word	0x08014ab0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f5 	b.w	80010e4 <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00d fddd 	bl	800ecc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_ADC1_Init+0xf4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_ADC1_Init+0xf4>)
 800112e:	2204      	movs	r2, #4
 8001130:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_ADC1_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001140:	2201      	movs	r2, #1
 8001142:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_ADC1_Init+0xf4>)
 800114e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0xf4>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0xf4>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001176:	f003 fc63 	bl	8004a40 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001180:	f002 f95c 	bl	800343c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_ADC1_Init+0xf4>)
 800119a:	f004 fd41 	bl	8005c20 <HAL_ADCEx_MultiModeConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80011a4:	f002 f94a 	bl	800343c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_ADC1_Init+0xf8>)
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0xf4>)
 80011c6:	f003 fe11 	bl	8004dec <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80011d0:	f002 f934 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002cc 	.word	0x200002cc
 80011e0:	04300002 	.word	0x04300002

080011e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00d fd65 	bl	800ecc0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <MX_ADC2_Init+0xb8>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_ADC2_Init+0xb4>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC2_Init+0xb4>)
 800121c:	2204      	movs	r2, #4
 800121e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_ADC2_Init+0xb4>)
 800122e:	2201      	movs	r2, #1
 8001230:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC2_Init+0xb4>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_ADC2_Init+0xb4>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001254:	f003 fbf4 	bl	8004a40 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f002 f8ed 	bl	800343c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC2_Init+0xbc>)
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001266:	2306      	movs	r3, #6
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126e:	237f      	movs	r3, #127	; 0x7f
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001272:	2304      	movs	r3, #4
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001280:	f003 fdb4 	bl	8004dec <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800128a:	f002 f8d7 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000338 	.word	0x20000338
 800129c:	50000100 	.word	0x50000100
 80012a0:	1d500080 	.word	0x1d500080

080012a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a0      	sub	sp, #128	; 0x80
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00d fcfb 	bl	800ecc0 <memset>
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d16a      	bne.n	80013aa <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80012da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 f997 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f0:	f002 f8a4 	bl	800343c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f005 fbf8 	bl	8006b40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_ADC_MspInit+0x1f8>)
 8001354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001358:	2205      	movs	r2, #5
 800135a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	4842      	ldr	r0, [pc, #264]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800138e:	f005 f85d 	bl	800644c <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001398:	f002 f850 	bl	800343c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013a8:	e06d      	b.n	8001486 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_ADC_MspInit+0x1fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d168      	bne.n	8001486 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 f927 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80013d0:	f002 f834 	bl	800343c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <HAL_ADC_MspInit+0x200>)
 800142a:	f005 fb89 	bl	8006b40 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0x208>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800146c:	f004 ffee 	bl	800644c <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8001476:	f001 ffe1 	bl	800343c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001486:	bf00      	nop
 8001488:	3780      	adds	r7, #128	; 0x80
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000464 	.word	0x20000464
 8001494:	40021000 	.word	0x40021000
 8001498:	200003a4 	.word	0x200003a4
 800149c:	40020008 	.word	0x40020008
 80014a0:	50000100 	.word	0x50000100
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20000404 	.word	0x20000404
 80014ac:	40020408 	.word	0x40020408

080014b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CRC_Init+0x54>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_CRC_Init+0x58>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_CRC_Init+0x54>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_CRC_Init+0x54>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CRC_Init+0x54>)
 80014c8:	f248 0205 	movw	r2, #32773	; 0x8005
 80014cc:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CRC_Init+0x54>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_CRC_Init+0x54>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CRC_Init+0x54>)
 80014de:	2220      	movs	r2, #32
 80014e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_CRC_Init+0x54>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CRC_Init+0x54>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CRC_Init+0x54>)
 80014f0:	f004 fdae 	bl	8006050 <HAL_CRC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80014fa:	f001 ff9f 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000468 	.word	0x20000468
 8001508:	40023000 	.word	0x40023000

0800150c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_CRC_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6493      	str	r3, [r2, #72]	; 0x48
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023000 	.word	0x40023000
 8001548:	40021000 	.word	0x40021000

0800154c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel4
  */
void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_DMA_Init+0xf4>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <MX_DMA_Init+0xf4>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6493      	str	r3, [r2, #72]	; 0x48
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_DMA_Init+0xf4>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <MX_DMA_Init+0xf4>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <MX_DMA_Init+0xf4>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6493      	str	r3, [r2, #72]	; 0x48
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <MX_DMA_Init+0xf4>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_DMA_Init+0xf4>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <MX_DMA_Init+0xf4>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6493      	str	r3, [r2, #72]	; 0x48
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_DMA_Init+0xf4>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_DMA_Init+0xf8>)
 800159c:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <MX_DMA_Init+0xfc>)
 800159e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_DMA_Init+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_DMA_Init+0xf8>)
 80015a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ac:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <MX_DMA_Init+0xf8>)
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_DMA_Init+0xf8>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_DMA_Init+0xf8>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_DMA_Init+0xf8>)
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_DMA_Init+0xf8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_DMA_Init+0xf8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <MX_DMA_Init+0xf8>)
 80015d8:	f004 ff38 	bl	800644c <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 80015e2:	f001 ff2b 	bl	800343c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f004 fcfb 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f004 fd12 	bl	800601a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200c      	movs	r0, #12
 80015fc:	f004 fcf3 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001600:	200c      	movs	r0, #12
 8001602:	f004 fd0a 	bl	800601a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f004 fceb 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001610:	200d      	movs	r0, #13
 8001612:	f004 fd02 	bl	800601a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200e      	movs	r0, #14
 800161c:	f004 fce3 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001620:	200e      	movs	r0, #14
 8001622:	f004 fcfa 	bl	800601a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2038      	movs	r0, #56	; 0x38
 800162c:	f004 fcdb 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001630:	2038      	movs	r0, #56	; 0x38
 8001632:	f004 fcf2 	bl	800601a <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	2000048c 	.word	0x2000048c
 8001648:	40020044 	.word	0x40020044

0800164c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b40      	ldr	r3, [pc, #256]	; (8001764 <MX_GPIO_Init+0x118>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a3f      	ldr	r2, [pc, #252]	; (8001764 <MX_GPIO_Init+0x118>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <MX_GPIO_Init+0x118>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <MX_GPIO_Init+0x118>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a39      	ldr	r2, [pc, #228]	; (8001764 <MX_GPIO_Init+0x118>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <MX_GPIO_Init+0x118>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <MX_GPIO_Init+0x118>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a33      	ldr	r2, [pc, #204]	; (8001764 <MX_GPIO_Init+0x118>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b31      	ldr	r3, [pc, #196]	; (8001764 <MX_GPIO_Init+0x118>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <MX_GPIO_Init+0x118>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a2d      	ldr	r2, [pc, #180]	; (8001764 <MX_GPIO_Init+0x118>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <MX_GPIO_Init+0x118>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2108      	movs	r1, #8
 80016c6:	4828      	ldr	r0, [pc, #160]	; (8001768 <MX_GPIO_Init+0x11c>)
 80016c8:	f005 fbd4 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2120      	movs	r1, #32
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f005 fbce 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	481e      	ldr	r0, [pc, #120]	; (8001768 <MX_GPIO_Init+0x11c>)
 80016ee:	f005 fa27 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f2:	2308      	movs	r3, #8
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4817      	ldr	r0, [pc, #92]	; (8001768 <MX_GPIO_Init+0x11c>)
 800170a:	f005 fa19 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800170e:	2320      	movs	r3, #32
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f005 fa0a 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800172c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001732:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f005 f9fb 	bl	8006b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2028      	movs	r0, #40	; 0x28
 8001750:	f004 fc49 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001754:	2028      	movs	r0, #40	; 0x28
 8001756:	f004 fc60 	bl	800601a <HAL_NVIC_EnableIRQ>

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	48000800 	.word	0x48000800

0800176c <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ac      	sub	sp, #176	; 0xb0
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8001772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8001782:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8001790:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800179c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	2260      	movs	r2, #96	; 0x60
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00d fa84 	bl	800ecc0 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017c4:	4a73      	ldr	r2, [pc, #460]	; (8001994 <MX_HRTIM1_Init+0x228>)
 80017c6:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80017c8:	4b71      	ldr	r3, [pc, #452]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 80017ce:	4b70      	ldr	r3, [pc, #448]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	609a      	str	r2, [r3, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_MASTER_CMP1;
 80017d4:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017da:	611a      	str	r2, [r3, #16]
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e2:	615a      	str	r2, [r3, #20]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80017e4:	486a      	ldr	r0, [pc, #424]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017e6:	f005 fb8f 	bl	8006f08 <HAL_HRTIM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80017f0:	f001 fe24 	bl	800343c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80017f4:	210c      	movs	r1, #12
 80017f6:	4866      	ldr	r0, [pc, #408]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80017f8:	f005 fc56 	bl	80070a8 <HAL_HRTIM_DLLCalibrationStart>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001802:	f001 fe1b 	bl	800343c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001806:	210a      	movs	r1, #10
 8001808:	4861      	ldr	r0, [pc, #388]	; (8001990 <MX_HRTIM1_Init+0x224>)
 800180a:	f005 fca5 	bl	8007158 <HAL_HRTIM_PollForDLLCalibration>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001814:	f001 fe12 	bl	800343c <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	485d      	ldr	r0, [pc, #372]	; (8001990 <MX_HRTIM1_Init+0x224>)
 800181c:	f005 fd57 	bl	80072ce <HAL_HRTIM_EventPrescalerConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_HRTIM1_Init+0xbe>
  {
    Error_Handler();
 8001826:	f001 fe09 	bl	800343c <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EEV1SRC_TIM1_TRGO;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8001842:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001846:	461a      	mov	r2, r3
 8001848:	2101      	movs	r1, #1
 800184a:	4851      	ldr	r0, [pc, #324]	; (8001990 <MX_HRTIM1_Init+0x224>)
 800184c:	f005 fd10 	bl	8007270 <HAL_HRTIM_EventConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 8001856:	f001 fdf1 	bl	800343c <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800185a:	2100      	movs	r1, #0
 800185c:	484c      	ldr	r0, [pc, #304]	; (8001990 <MX_HRTIM1_Init+0x224>)
 800185e:	f005 ff2f 	bl	80076c0 <HAL_HRTIM_FaultPrescalerConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 8001868:	f001 fde8 	bl	800343c <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_INTERNAL;
 800186c:	2301      	movs	r3, #1
 800186e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 8001884:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001888:	461a      	mov	r2, r3
 800188a:	2101      	movs	r1, #1
 800188c:	4840      	ldr	r0, [pc, #256]	; (8001990 <MX_HRTIM1_Init+0x224>)
 800188e:	f005 fd57 	bl	8007340 <HAL_HRTIM_FaultConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_HRTIM1_Init+0x130>
  {
    Error_Handler();
 8001898:	f001 fdd0 	bl	800343c <Error_Handler>
  }
  pFaultBlkCfg.Threshold = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018b2:	461a      	mov	r2, r3
 80018b4:	2101      	movs	r1, #1
 80018b6:	4836      	ldr	r0, [pc, #216]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80018b8:	f006 f828 	bl	800790c <HAL_HRTIM_FaultCounterConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 80018c2:	f001 fdbb 	bl	800343c <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ca:	461a      	mov	r2, r3
 80018cc:	2101      	movs	r1, #1
 80018ce:	4830      	ldr	r0, [pc, #192]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80018d0:	f005 ff30 	bl	8007734 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 80018da:	f001 fdaf 	bl	800343c <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80018de:	2201      	movs	r2, #1
 80018e0:	2101      	movs	r1, #1
 80018e2:	482b      	ldr	r0, [pc, #172]	; (8001990 <MX_HRTIM1_Init+0x224>)
 80018e4:	f006 f90a 	bl	8007afc <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 1700;
 80018e8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80018ec:	673b      	str	r3, [r7, #112]	; 0x70
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	677b      	str	r3, [r7, #116]	; 0x74
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80018f2:	2300      	movs	r3, #0
 80018f4:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80018f6:	2308      	movs	r3, #8
 80018f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80018fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018fe:	461a      	mov	r2, r3
 8001900:	2106      	movs	r1, #6
 8001902:	4823      	ldr	r0, [pc, #140]	; (8001990 <MX_HRTIM1_Init+0x224>)
 8001904:	f005 fc5c 	bl	80071c0 <HAL_HRTIM_TimeBaseConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_HRTIM1_Init+0x1a6>
  {
    Error_Handler();
 800190e:	f001 fd95 	bl	800343c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASrcAddress = 0x0000;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = 0x0000;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  pTimerCfg.DMASize = 0x1;
 8001922:	2301      	movs	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001932:	2300      	movs	r3, #0
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800193a:	2300      	movs	r3, #0
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800193e:	2300      	movs	r3, #0
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001942:	2300      	movs	r3, #0
 8001944:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001946:	2300      	movs	r3, #0
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800194a:	2300      	movs	r3, #0
 800194c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	461a      	mov	r2, r3
 8001954:	2106      	movs	r1, #6
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <MX_HRTIM1_Init+0x224>)
 8001958:	f006 f952 	bl	8007c00 <HAL_HRTIM_WaveformTimerConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8001962:	f001 fd6b 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = 850;
 8001966:	f240 3352 	movw	r3, #850	; 0x352
 800196a:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2201      	movs	r2, #1
 8001970:	2106      	movs	r1, #6
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_HRTIM1_Init+0x224>)
 8001974:	f006 f9d2 	bl	8007d1c <HAL_HRTIM_WaveformCompareConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 800197e:	f001 fd5d 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_HRTIM1_Init+0x224>)
 8001984:	f000 f828 	bl	80019d8 <HAL_HRTIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	37b0      	adds	r7, #176	; 0xb0
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200004ec 	.word	0x200004ec
 8001994:	40016800 	.word	0x40016800

08001998 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_HRTIM_MspInit+0x38>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10b      	bne.n	80019c2 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_HRTIM_MspInit+0x3c>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_HRTIM_MspInit+0x3c>)
 80019b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b4:	6613      	str	r3, [r2, #96]	; 0x60
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_HRTIM_MspInit+0x3c>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40016800 	.word	0x40016800
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_HRTIM_MspPostInit+0x64>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11b      	bne.n	8001a32 <HAL_HRTIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_HRTIM_MspPostInit+0x68>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_HRTIM_MspPostInit+0x68>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_HRTIM_MspPostInit+0x68>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB1     ------> HRTIM1_SCOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a12:	2302      	movs	r3, #2
 8001a14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001a22:	230d      	movs	r3, #13
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a2e:	f005 f887 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40016800 	.word	0x40016800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48000400 	.word	0x48000400

08001a48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a70:	e000      	b.n	8001a74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f9      	beq.n	8001a72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a7e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aaa:	f043 0204 	orr.w	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <__critical_enter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	static uint32_t lock_nesting_count = 0;
	void __critical_enter(void)
	{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
		__disable_irq();
		++lock_nesting_count;
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__critical_enter+0x1c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a03      	ldr	r2, [pc, #12]	; (8001adc <__critical_enter+0x1c>)
 8001ad0:	6013      	str	r3, [r2, #0]
	}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	20011f24 	.word	0x20011f24

08001ae0 <__critical_exit>:
	void __critical_exit(void)
	{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
		/* Unlock interrupts only when we are exiting the outermost nested call. */
		--lock_nesting_count;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <__critical_exit+0x24>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <__critical_exit+0x24>)
 8001aec:	6013      	str	r3, [r2, #0]
		if (lock_nesting_count == 0) {
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <__critical_exit+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001af6:	b662      	cpsie	i
}
 8001af8:	bf00      	nop
			__enable_irq();
		}
	}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20011f24 	.word	0x20011f24

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0c:	ed2d 8b02 	vpush	{d8}
 8001b10:	b08d      	sub	sp, #52	; 0x34
 8001b12:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// test for github
	// ===================== тики замеряем, время работы вычисляем
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT
 8001b14:	4b9c      	ldr	r3, [pc, #624]	; (8001d88 <main+0x280>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a9b      	ldr	r2, [pc, #620]	; (8001d88 <main+0x280>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT = 0;// обнуляем значение
 8001b20:	4b9a      	ldr	r3, [pc, #616]	; (8001d8c <main+0x284>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
	DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик, здесь и один раз
 8001b26:	4b9a      	ldr	r3, [pc, #616]	; (8001d90 <main+0x288>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a99      	ldr	r2, [pc, #612]	; (8001d90 <main+0x288>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b32:	f002 fccc 	bl	80044ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b36:	f001 f909 	bl	8002d4c <SystemClock_Config>
  // 4 -много ошибок,  256 - медлено,   16 - вроде как норм

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3a:	f7ff fd87 	bl	800164c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b3e:	f7ff fd05 	bl	800154c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b42:	f7ff fad1 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b46:	f7ff fb4d 	bl	80011e4 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001b4a:	f7ff fe0f 	bl	800176c <MX_HRTIM1_Init>
  MX_TIM1_Init();
 8001b4e:	f001 fea7 	bl	80038a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b52:	f001 ff95 	bl	8003a80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b56:	f002 f80d 	bl	8003b74 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b5a:	f002 f8b9 	bl	8003cd0 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001b5e:	f002 f8ef 	bl	8003d40 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001b62:	f002 f87f 	bl	8003c64 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001b66:	f002 fac7 	bl	80040f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b6a:	f002 fb15 	bl	8004198 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001b6e:	f7ff fc9f 	bl	80014b0 <MX_CRC_Init>
  MX_TIM17_Init();
 8001b72:	f002 f90b 	bl	8003d8c <MX_TIM17_Init>
  // TIM6 - используем для модбуса, делает прерывания через 50uS, а там библиотека ModBUS  работает
  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // TIM16 - используем для увеличения уменьшения мощности, выдает тики 1uS, прерывания нет, в цикле смотрим CNT
  // TIM17 - используем для сканирования по частоте, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // �?нициализируйте стек протоколов в режиме RTU для SLAVE устройства с адресом 1 = 0x01
  adr_huart_MB = &huart1;
 8001b76:	4b87      	ldr	r3, [pc, #540]	; (8001d94 <main+0x28c>)
 8001b78:	4a87      	ldr	r2, [pc, #540]	; (8001d98 <main+0x290>)
 8001b7a:	601a      	str	r2, [r3, #0]
   eMBInit( MB_RTU, MB_ADDRESS/*address*/, 1/*LPUART1*/, adr_huart_MB->Init.BaudRate/*115200*/ , adr_huart_MB->Init.Parity/*UART_PARITY_NONE*/ );
 8001b7c:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <main+0x28c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <main+0x28c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2107      	movs	r1, #7
 8001b92:	2000      	movs	r0, #0
 8001b94:	f00b fcb2 	bl	800d4fc <eMBInit>

   // Включите стек протоколов Modbus.
   eMBEnable();
 8001b98:	f00b fcdc 	bl	800d554 <eMBEnable>

	  HAL_Delay(300);
 8001b9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ba0:	f002 fd06 	bl	80045b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
 8001ba4:	2120      	movs	r1, #32
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f005 f97b 	bl	8006ea4 <HAL_GPIO_TogglePin>

  printf("MX_xxx_Init(); \n");
 8001bae:	487b      	ldr	r0, [pc, #492]	; (8001d9c <main+0x294>)
 8001bb0:	f00e f8d0 	bl	800fd54 <puts>
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	e086      	b.n	8001cc8 <main+0x1c0>
  {
	  data_I[i] = (uint16_t) 1000 * sinf(((float)i)/64);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001da0 <main+0x298>
 8001bc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd0:	f011 fd5a 	bl	8013688 <sinf>
 8001bd4:	eef0 7a40 	vmov.f32	s15, s0
 8001bd8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001da4 <main+0x29c>
 8001bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be4:	ee17 3a90 	vmov	r3, s15
 8001be8:	b299      	uxth	r1, r3
 8001bea:	4a6f      	ldr	r2, [pc, #444]	; (8001da8 <main+0x2a0>)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_U[i] = (uint16_t) cosf(((float)i)/64);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001da0 <main+0x298>
 8001c00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c04:	eeb0 0a47 	vmov.f32	s0, s14
 8001c08:	f011 fd06 	bl	8013618 <cosf>
 8001c0c:	eef0 7a40 	vmov.f32	s15, s0
 8001c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c14:	ee17 3a90 	vmov	r3, s15
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	4a64      	ldr	r2, [pc, #400]	; (8001dac <main+0x2a4>)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_P[i] = (uint16_t) 100 * sinf(((float)i)/64);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001da0 <main+0x298>
 8001c30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c34:	eeb0 0a47 	vmov.f32	s0, s14
 8001c38:	f011 fd26 	bl	8013688 <sinf>
 8001c3c:	eef0 7a40 	vmov.f32	s15, s0
 8001c40:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001db0 <main+0x2a8>
 8001c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4c:	ee17 3a90 	vmov	r3, s15
 8001c50:	b299      	uxth	r1, r3
 8001c52:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <main+0x2ac>)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_R[i] = (uint16_t) 100 * cosf(((float)i)/64);
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001da0 <main+0x298>
 8001c68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	f011 fcd2 	bl	8013618 <cosf>
 8001c74:	eef0 7a40 	vmov.f32	s15, s0
 8001c78:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001db0 <main+0x2a8>
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <main+0x2b0>)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_Z[i] = (uint16_t) tanf(((float)i)/64);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001da0 <main+0x298>
 8001ca0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca8:	f011 fd28 	bl	80136fc <tanf>
 8001cac:	eef0 7a40 	vmov.f32	s15, s0
 8001cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb4:	ee17 3a90 	vmov	r3, s15
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <main+0x2b4>)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cce:	f6ff af74 	blt.w	8001bba <main+0xb2>
	  //data_Q[i] = (uint16_t) i;
	  //data_X[i] = (uint16_t) i+1024;
	  //data_Y[i] = (uint16_t) i+4096;
  }
  //data_Q[1024] = 0;
  data_I[1024] = 1;
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <main+0x2a0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_U[1024] = 2;
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <main+0x2a4>)
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_P[1024] = 3;
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <main+0x2ac>)
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_R[1024] = 4;
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <main+0x2b0>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_Z[1024] = 5;
 8001cf2:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <main+0x2b4>)
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

  // ============== LPUART =============== LPUART ============= LPUART ==================
  // вначале надо получить данные, пока будут нулевые, ещё нет никаких,
  // но потом прием данных будет активироваться окончанием передачи.
  // Дальше приемник не будет активирован. активация приемника происходит только 1 раз, после передачи
	  wTransferState_RX = TRANSFER_RX_START; // TRANSFER_WAIT - пока ждем приема настроечных данных
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <main+0x2b8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
	  wTransferState_TX = TRANSFER_TX_Stop;
 8001d00:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <main+0x2bc>)
 8001d02:	2209      	movs	r2, #9
 8001d04:	601a      	str	r2, [r3, #0]
  // if ((wTransferState != TRANSFER_ERROR ) & (status_SPI == HAL_OK))
  // { ; } // теперь надо извлечь все надобные настройки из полученого массива   cmd_array_SPI[] , только потом мохно будет запускать генерацию
  // else
  // { default; }

  HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_MASTER);
 8001d06:	2106      	movs	r1, #6
 8001d08:	482f      	ldr	r0, [pc, #188]	; (8001dc8 <main+0x2c0>)
 8001d0a:	f005 fa81 	bl	8007210 <HAL_HRTIM_SimpleBaseStart>

  // TIM1 - главный таймер выдает управление ключами моста
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-низ PC0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	482e      	ldr	r0, [pc, #184]	; (8001dcc <main+0x2c4>)
 8001d12:	f008 f89f 	bl	8009e54 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-верх PА7
 8001d16:	2100      	movs	r1, #0
 8001d18:	482c      	ldr	r0, [pc, #176]	; (8001dcc <main+0x2c4>)
 8001d1a:	f009 fa29 	bl	800b170 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-низ PС2
 8001d1e:	2108      	movs	r1, #8
 8001d20:	482a      	ldr	r0, [pc, #168]	; (8001dcc <main+0x2c4>)
 8001d22:	f008 f897 	bl	8009e54 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-верх PB9
 8001d26:	2108      	movs	r1, #8
 8001d28:	4828      	ldr	r0, [pc, #160]	; (8001dcc <main+0x2c4>)
 8001d2a:	f009 fa21 	bl	800b170 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		// запаздывание CH3 относительно CH1 - это ширина импульса накачки, мощность
 8001d2e:	210c      	movs	r1, #12
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <main+0x2c4>)
 8001d32:	f008 f88f 	bl	8009e54 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim7); // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
 8001d36:	4826      	ldr	r0, [pc, #152]	; (8001dd0 <main+0x2c8>)
 8001d38:	f007 ff14 	bl	8009b64 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);// tim16 тактуется 1 MHz,  по условию if (htim16.Instance->CNT >10000)   будет плавно меняться мощность на одну ступеньку
 8001d3c:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <main+0x2cc>)
 8001d3e:	f007 ff11 	bl	8009b64 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17); // tim17 тактуется 10 MHz, по условию if (htim17.Instance->CNT > time_step*10)   будет работать скольжение по частоте
 8001d42:	4825      	ldr	r0, [pc, #148]	; (8001dd8 <main+0x2d0>)
 8001d44:	f007 ff0e 	bl	8009b64 <HAL_TIM_Base_Start>

  // для запуска 256 замеров, от HRTIM_SCOUT / 2, будут перекрывать 4 периода
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4824      	ldr	r0, [pc, #144]	; (8001ddc <main+0x2d4>)
 8001d4c:	f008 f882 	bl	8009e54 <HAL_TIM_PWM_Start>

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);      // синхроимпульс для осцила, 6 тактов от таймера TIM1 отсчитывает
 8001d50:	2100      	movs	r1, #0
 8001d52:	4823      	ldr	r0, [pc, #140]	; (8001de0 <main+0x2d8>)
 8001d54:	f008 f87e 	bl	8009e54 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1,  ADC_SINGLE_ENDED );
 8001d58:	217f      	movs	r1, #127	; 0x7f
 8001d5a:	4822      	ldr	r0, [pc, #136]	; (8001de4 <main+0x2dc>)
 8001d5c:	f003 fe42 	bl	80059e4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2,  ADC_SINGLE_ENDED );
 8001d60:	217f      	movs	r1, #127	; 0x7f
 8001d62:	4821      	ldr	r0, [pc, #132]	; (8001de8 <main+0x2e0>)
 8001d64:	f003 fe3e 	bl	80059e4 <HAL_ADCEx_Calibration_Start>
	uint32_t temp_length = LENGTH_SAMPLES; // 32 замера, по 16 в начале и в конце, будут отброшены
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	613b      	str	r3, [r7, #16]
    HAL_ADCEx_MultiModeStart_DMA(&hadc1, zamer_adc1_2, temp_length);
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	491e      	ldr	r1, [pc, #120]	; (8001dec <main+0x2e4>)
 8001d72:	481c      	ldr	r0, [pc, #112]	; (8001de4 <main+0x2dc>)
 8001d74:	f003 fe98 	bl	8005aa8 <HAL_ADCEx_MultiModeStart_DMA>
   // LL_ADC_REG_StopConversion(hadc1->Instance);  - это есть стоп АЦП произвольно по желанию, по тесту в любом месте
   // LL_ADC_REG_StartConversion(hadc1.Instance);  - это есть старт АЦП произвольно по желанию, если был остановлен

    size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <main+0x2e8>)
 8001d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d7e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001d80:	2300      	movs	r3, #0
 8001d82:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d84:	e047      	b.n	8001e16 <main+0x30e>
 8001d86:	bf00      	nop
 8001d88:	e000edfc 	.word	0xe000edfc
 8001d8c:	e0001004 	.word	0xe0001004
 8001d90:	e0001000 	.word	0xe0001000
 8001d94:	20000610 	.word	0x20000610
 8001d98:	20012144 	.word	0x20012144
 8001d9c:	08014ac8 	.word	0x08014ac8
 8001da0:	42800000 	.word	0x42800000
 8001da4:	447a0000 	.word	0x447a0000
 8001da8:	2000f6a4 	.word	0x2000f6a4
 8001dac:	2000fea8 	.word	0x2000fea8
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	200106ac 	.word	0x200106ac
 8001db8:	20010eb0 	.word	0x20010eb0
 8001dbc:	200116b4 	.word	0x200116b4
 8001dc0:	20000028 	.word	0x20000028
 8001dc4:	2000002c 	.word	0x2000002c
 8001dc8:	200004ec 	.word	0x200004ec
 8001dcc:	20011f30 	.word	0x20011f30
 8001dd0:	20012060 	.word	0x20012060
 8001dd4:	200120ac 	.word	0x200120ac
 8001dd8:	200120f8 	.word	0x200120f8
 8001ddc:	20011f7c 	.word	0x20011f7c
 8001de0:	20011fc8 	.word	0x20011fc8
 8001de4:	200002cc 	.word	0x200002cc
 8001de8:	20000338 	.word	0x20000338
 8001dec:	2000062c 	.word	0x2000062c
 8001df0:	2000662c 	.word	0x2000662c
		{
			data_adc1[ic] =0;
 8001df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001df6:	4a88      	ldr	r2, [pc, #544]	; (8002018 <main+0x510>)
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
			data_adc2[ic] =0;
 8001e02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e04:	4a85      	ldr	r2, [pc, #532]	; (800201c <main+0x514>)
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e12:	3301      	adds	r3, #1
 8001e14:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e18:	4b81      	ldr	r3, [pc, #516]	; (8002020 <main+0x518>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbe9      	blt.n	8001df4 <main+0x2ec>
		}

	  /* Select Callbacks functions called after Transfer complete and Transfer error */
	  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_CPLT_CB_ID, Mem_to_Mem_Complete);
 8001e20:	4a80      	ldr	r2, [pc, #512]	; (8002024 <main+0x51c>)
 8001e22:	2100      	movs	r1, #0
 8001e24:	4880      	ldr	r0, [pc, #512]	; (8002028 <main+0x520>)
 8001e26:	f004 fda3 	bl	8006970 <HAL_DMA_RegisterCallback>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8001e2a:	4980      	ldr	r1, [pc, #512]	; (800202c <main+0x524>)
 8001e2c:	4a80      	ldr	r2, [pc, #512]	; (8002030 <main+0x528>)
 8001e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e32:	487d      	ldr	r0, [pc, #500]	; (8002028 <main+0x520>)
 8001e34:	f004 fbb2 	bl	800659c <HAL_DMA_Start_IT>

	  //R_filter = 0.5857864376269; // для 512 замеров
	 // L_filter = 0.01;

	  freq_new = 25000;
 8001e38:	4b7e      	ldr	r3, [pc, #504]	; (8002034 <main+0x52c>)
 8001e3a:	4a7f      	ldr	r2, [pc, #508]	; (8002038 <main+0x530>)
 8001e3c:	601a      	str	r2, [r3, #0]
	  old_freq_new = freq_new;
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <main+0x52c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7e      	ldr	r2, [pc, #504]	; (800203c <main+0x534>)
 8001e44:	6013      	str	r3, [r2, #0]
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, adc1_int, 256, DAC_ALIGN_12B_R);

	  printf("INIT__xxx (); - executed  \n");
 8001e46:	487e      	ldr	r0, [pc, #504]	; (8002040 <main+0x538>)
 8001e48:	f00d ff84 	bl	800fd54 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  uint16_t Num=0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	843b      	strh	r3, [r7, #32]
	  uint16_t usCRC16_main;
  while (1)
  {
	  if (((cmd_set.cmd_flags & 0x0004) >0) | ((cmd_set.cmd_flags & 0x0010) >0))// если надо, по флагу, вот тут будет включаться циклическая долбежка
 8001e50:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <main+0x53c>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bfcc      	ite	gt
 8001e5c:	2301      	movgt	r3, #1
 8001e5e:	2300      	movle	r3, #0
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b78      	ldr	r3, [pc, #480]	; (8002044 <main+0x53c>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfcc      	ite	gt
 8001e6e:	2301      	movgt	r3, #1
 8001e70:	2300      	movle	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d051      	beq.n	8001f20 <main+0x418>
	  {
                  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
		  	  	  // 25 mS  минимальный интервал между передачами, при котором минимум ошибок CRC
              	  if (htim7.Instance->CNT >250) // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
 8001e7c:	4b72      	ldr	r3, [pc, #456]	; (8002048 <main+0x540>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2bfa      	cmp	r3, #250	; 0xfa
 8001e84:	d94e      	bls.n	8001f24 <main+0x41c>
              	  {
              		  htim7.Instance->CNT =0;
 8001e86:	4b70      	ldr	r3, [pc, #448]	; (8002048 <main+0x540>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
              		  	send_buff_cicle[0] = MB_ADDRESS;
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	; (800204c <main+0x544>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	701a      	strb	r2, [r3, #0]
						send_buff_cicle[1] = 4;  // заглушка-обманка
 8001e94:	4b6d      	ldr	r3, [pc, #436]	; (800204c <main+0x544>)
 8001e96:	2204      	movs	r2, #4
 8001e98:	705a      	strb	r2, [r3, #1]
						send_buff_cicle[2] = 80; // заглушка-обманка, типа длина данных
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <main+0x544>)
 8001e9c:	2250      	movs	r2, #80	; 0x50
 8001e9e:	709a      	strb	r2, [r3, #2]
						if (eSndState != STATE_TX_XMIT)/* Activate the transmitter. */
 8001ea0:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <main+0x548>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d03c      	beq.n	8001f24 <main+0x41c>
						{
							eMBRegInputCB( &(send_buff_cicle[3]), 64, Num /*номер элемента массива замеров*/ );
 8001eaa:	8c3b      	ldrh	r3, [r7, #32]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	4868      	ldr	r0, [pc, #416]	; (8002054 <main+0x54c>)
 8001eb2:	f000 ff97 	bl	8002de4 <eMBRegInputCB>
							usCRC16_main = HAL_CRC_Calculate(&hcrc, ( uint32_t *)(&send_buff_cicle), 83);//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
 8001eb6:	2253      	movs	r2, #83	; 0x53
 8001eb8:	4964      	ldr	r1, [pc, #400]	; (800204c <main+0x544>)
 8001eba:	4867      	ldr	r0, [pc, #412]	; (8002058 <main+0x550>)
 8001ebc:	f004 f92c 	bl	8006118 <HAL_CRC_Calculate>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	81fb      	strh	r3, [r7, #14]
							send_buff_cicle[83] = ( UCHAR )( usCRC16_main & 0xFF );
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b60      	ldr	r3, [pc, #384]	; (800204c <main+0x544>)
 8001eca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
							send_buff_cicle[84] = ( UCHAR )( usCRC16_main >> 8 );
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <main+0x544>)
 8001ed8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
							vMBPortSerialEnable( FALSE, TRUE );
 8001edc:	2101      	movs	r1, #1
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f00b fc54 	bl	800d78c <vMBPortSerialEnable>
							eSndState = STATE_TX_XMIT;
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <main+0x548>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
							if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <main+0x554>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2255      	movs	r2, #85	; 0x55
 8001ef0:	4956      	ldr	r1, [pc, #344]	; (800204c <main+0x544>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f009 fd24 	bl	800b940 <HAL_UART_Transmit_DMA>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d112      	bne.n	8001f24 <main+0x41c>
							{
								if (flag_exti_stop_TX_cicles >0)
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <main+0x558>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00e      	beq.n	8001f24 <main+0x41c>
								{
									flag_exti_stop_TX_cicles =0;
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <main+0x558>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
									Num++;
 8001f0c:	8c3b      	ldrh	r3, [r7, #32]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	843b      	strh	r3, [r7, #32]
									if (Num >999) { Num =0;}
 8001f12:	8c3b      	ldrh	r3, [r7, #32]
 8001f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f18:	d304      	bcc.n	8001f24 <main+0x41c>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	843b      	strh	r3, [r7, #32]
 8001f1e:	e001      	b.n	8001f24 <main+0x41c>
							}
						}
              	  }
	  }
	  else
	  {  eMBPoll(  ); } // Вызовите основной цикл опроса стека протоколов Modbus.
 8001f20:	f00b fb32 	bl	800d588 <eMBPoll>




	  // power_procent - меняется от 2 проц до 98 проц, и от этого сдвигаются фронты TIM1_OUT3,  TIM1_OUT1 - constanta
	  if (htim16.Instance->CNT >1000) // tim16 тактуется 1 MHz, нужен для плавного старта-стопа генерации
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <main+0x55c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2e:	f240 8107 	bls.w	8002140 <main+0x638>
	  {
		  htim16.Instance->CNT =0;
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <main+0x55c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
		  // синяя кнопка для стопа, если был запущен с модбуса
	      if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // нажата кнопка
 8001f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3e:	484a      	ldr	r0, [pc, #296]	; (8002068 <main+0x560>)
 8001f40:	f004 ff80 	bl	8006e44 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d110      	bne.n	8001f6c <main+0x464>
	      { 														// HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	    	  count_press_blue_btn ++;
 8001f4a:	4b48      	ldr	r3, [pc, #288]	; (800206c <main+0x564>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <main+0x564>)
 8001f54:	701a      	strb	r2, [r3, #0]
	    	  if (count_press_blue_btn >5)
 8001f56:	4b45      	ldr	r3, [pc, #276]	; (800206c <main+0x564>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d909      	bls.n	8001f72 <main+0x46a>
	    	  {
	    		  count_press_blue_btn=5;
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <main+0x564>)
 8001f60:	2205      	movs	r2, #5
 8001f62:	701a      	strb	r2, [r3, #0]
	    		  cmd_set.cmd_flags =0;  // тотальный стоп
 8001f64:	4b37      	ldr	r3, [pc, #220]	; (8002044 <main+0x53c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e002      	b.n	8001f72 <main+0x46a>
	    	  }
	      }
	      else
	      { count_press_blue_btn =0; } // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <main+0x564>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]


		  if ((cmd_set.cmd_flags & 0x0001) >0)// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <main+0x53c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	dd42      	ble.n	8002004 <main+0x4fc>
	  		{
	  			if (step_power_procent > cmd_set.proc_pwr /*power_procent*/) {step_power_procent --;}
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <main+0x53c>)
 8001f80:	889b      	ldrh	r3, [r3, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <main+0x568>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d204      	bcs.n	8001f96 <main+0x48e>
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <main+0x568>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	4a37      	ldr	r2, [pc, #220]	; (8002070 <main+0x568>)
 8001f94:	6013      	str	r3, [r2, #0]
	  			if (step_power_procent < cmd_set.proc_pwr /*power_procent*/) {step_power_procent ++;}
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <main+0x53c>)
 8001f98:	889b      	ldrh	r3, [r3, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <main+0x568>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d904      	bls.n	8001fae <main+0x4a6>
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <main+0x568>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <main+0x568>)
 8001fac:	6013      	str	r3, [r2, #0]
	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <main+0x56c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	4a30      	ldr	r2, [pc, #192]	; (8002078 <main+0x570>)
 8001fb6:	6013      	str	r3, [r2, #0]
					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <main+0x570>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	bf8c      	ite	hi
 8001fc0:	2301      	movhi	r3, #1
 8001fc2:	2300      	movls	r3, #0
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <main+0x570>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b36      	cmp	r3, #54	; 0x36
 8001fcc:	bf94      	ite	ls
 8001fce:	2301      	movls	r3, #1
 8001fd0:	2300      	movhi	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80b1 	beq.w	8002140 <main+0x638>
					{
						if (flag_generate_ON ==0)
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <main+0x574>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d107      	bne.n	8001ff6 <main+0x4ee>
							{ __HAL_TIM_MOE_ENABLE(&htim1); } // програмно восстанавливается флаг MOE для подключения выходов TIM1
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <main+0x56c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <main+0x56c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
						flag_generate_ON =255;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <main+0x574>)
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	701a      	strb	r2, [r3, #0]
						flag_generate_OFF =0;
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <main+0x578>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e09d      	b.n	8002140 <main+0x638>
					}
	  		}
	  		else	// кнопка отпущена, СТОП
	  		{
				if (step_power_procent > 2)
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <main+0x568>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d93b      	bls.n	8002084 <main+0x57c>
					{step_power_procent --;}
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <main+0x568>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3b01      	subs	r3, #1
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <main+0x568>)
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e093      	b.n	8002140 <main+0x638>
 8002018:	2000262c 	.word	0x2000262c
 800201c:	2000462c 	.word	0x2000462c
 8002020:	2000662c 	.word	0x2000662c
 8002024:	080033d5 	.word	0x080033d5
 8002028:	2000048c 	.word	0x2000048c
 800202c:	2000062c 	.word	0x2000062c
 8002030:	2000162c 	.word	0x2000162c
 8002034:	2000f660 	.word	0x2000f660
 8002038:	46c35000 	.word	0x46c35000
 800203c:	2000f664 	.word	0x2000f664
 8002040:	08014ad8 	.word	0x08014ad8
 8002044:	20011ebc 	.word	0x20011ebc
 8002048:	20012060 	.word	0x20012060
 800204c:	20011ec8 	.word	0x20011ec8
 8002050:	200005e9 	.word	0x200005e9
 8002054:	20011ecb 	.word	0x20011ecb
 8002058:	20000468 	.word	0x20000468
 800205c:	20000610 	.word	0x20000610
 8002060:	20000619 	.word	0x20000619
 8002064:	200120ac 	.word	0x200120ac
 8002068:	48000800 	.word	0x48000800
 800206c:	20000618 	.word	0x20000618
 8002070:	20000010 	.word	0x20000010
 8002074:	20011f30 	.word	0x20011f30
 8002078:	20000614 	.word	0x20000614
 800207c:	20000629 	.word	0x20000629
 8002080:	20000628 	.word	0x20000628
				else
				{
					step_power_procent =2;
 8002084:	4b8a      	ldr	r3, [pc, #552]	; (80022b0 <main+0x7a8>)
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
	  	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 800208a:	4b8a      	ldr	r3, [pc, #552]	; (80022b4 <main+0x7ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	4a89      	ldr	r2, [pc, #548]	; (80022b8 <main+0x7b0>)
 8002092:	6013      	str	r3, [r2, #0]
	  					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 8002094:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <main+0x7b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	bf8c      	ite	hi
 800209c:	2301      	movhi	r3, #1
 800209e:	2300      	movls	r3, #0
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <main+0x7b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b36      	cmp	r3, #54	; 0x36
 80020a8:	bf94      	ite	ls
 80020aa:	2301      	movls	r3, #1
 80020ac:	2300      	movhi	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4013      	ands	r3, r2
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d043      	beq.n	8002140 <main+0x638>
	  					{
							if (flag_generate_OFF ==0)
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <main+0x7b4>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d139      	bne.n	8002134 <main+0x62c>
							{
								for(int i=0; i<100; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e033      	b.n	800212e <main+0x626>
								{
									if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	487a      	ldr	r0, [pc, #488]	; (80022b4 <main+0x7ac>)
 80020ca:	f008 fa69 	bl	800a5a0 <HAL_TIM_GenerateEvent>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d129      	bne.n	8002128 <main+0x620>
									{
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 80020d4:	2300      	movs	r3, #0
 80020d6:	837b      	strh	r3, [r7, #26]
 80020d8:	e01a      	b.n	8002110 <main+0x608>
											{
												data_adc1_Tx[ic] =0;
 80020da:	8b7b      	ldrh	r3, [r7, #26]
 80020dc:	4a78      	ldr	r2, [pc, #480]	; (80022c0 <main+0x7b8>)
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
												data_adc2_Tx[ic] =0;
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	4a76      	ldr	r2, [pc, #472]	; (80022c4 <main+0x7bc>)
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
												adc1_Tx[ic] =0;
 80020f6:	8b7b      	ldrh	r3, [r7, #26]
 80020f8:	4a73      	ldr	r2, [pc, #460]	; (80022c8 <main+0x7c0>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
												adc2_Tx[ic] =0;
 8002100:	8b7b      	ldrh	r3, [r7, #26]
 8002102:	4a72      	ldr	r2, [pc, #456]	; (80022cc <main+0x7c4>)
 8002104:	2100      	movs	r1, #0
 8002106:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 800210a:	8b7b      	ldrh	r3, [r7, #26]
 800210c:	3301      	adds	r3, #1
 800210e:	837b      	strh	r3, [r7, #26]
 8002110:	8b7a      	ldrh	r2, [r7, #26]
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <main+0x7c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0fd9      	lsrs	r1, r3, #31
 8002118:	440b      	add	r3, r1
 800211a:	105b      	asrs	r3, r3, #1
 800211c:	429a      	cmp	r2, r3
 800211e:	dbdc      	blt.n	80020da <main+0x5d2>
											}
										index_data_real_zamer =0; // подготовка для замера
 8002120:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <main+0x7cc>)
 8002122:	2200      	movs	r2, #0
 8002124:	801a      	strh	r2, [r3, #0]
										break;
 8002126:	e005      	b.n	8002134 <main+0x62c>
								for(int i=0; i<100; i++)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b63      	cmp	r3, #99	; 0x63
 8002132:	ddc8      	ble.n	80020c6 <main+0x5be>
									}// if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
								} // for(int i=0; i<100; i++)
							} // if (flag_generate_OFF ==0)
							flag_generate_OFF =255;
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <main+0x7b4>)
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	701a      	strb	r2, [r3, #0]
							flag_generate_ON =0;
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <main+0x7d0>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
	  					}
	  	*/
	  					// ======   А ЭТО СТОП  СТОП  ====== ======   А ЭТО START  START  ======


	  htim1.Instance->CCR1 = ccr1_tim1; // tim1->CCR1 == 63   всегда без вариантов
 8002140:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <main+0x7ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <main+0x7d4>)
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
	  ccr3_tim1 = (64 * step_power_procent ) / 100;
 800214a:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <main+0x7a8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	019b      	lsls	r3, r3, #6
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <main+0x7d8>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <main+0x7dc>)
 800215a:	6013      	str	r3, [r2, #0]
		  if(ccr3_tim1 >62) {ccr3_tim1 =62;}// 96.88%   =>   64*96.88/100=62	 deadtime фиксировано ==85 тиков от 170_МГц, Меньшая мощность будет наползать на deadtime
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <main+0x7dc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b3e      	cmp	r3, #62	; 0x3e
 8002162:	d902      	bls.n	800216a <main+0x662>
 8002164:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <main+0x7dc>)
 8002166:	223e      	movs	r2, #62	; 0x3e
 8002168:	601a      	str	r2, [r3, #0]
		  if(ccr3_tim1 <2) {ccr3_tim1 =2;}  // 3.125%   =>    64* 3.125/100=2	 2 тика от TIM1  == 90(тиков от 170_МГц при 30кГц) == 106(тиков от 170_МГц при 25кГц) == 186(тиков от 170_МГц при 14,5кГц)
 800216a:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <main+0x7dc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d802      	bhi.n	8002178 <main+0x670>
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <main+0x7dc>)
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
	  ccr4_tim1 = 64 + ccr3_tim1;
 8002178:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <main+0x7dc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3340      	adds	r3, #64	; 0x40
 800217e:	4a5a      	ldr	r2, [pc, #360]	; (80022e8 <main+0x7e0>)
 8002180:	6013      	str	r3, [r2, #0]
		  if(ccr4_tim1 >125) {ccr4_tim1 =125;}
 8002182:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <main+0x7e0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b7d      	cmp	r3, #125	; 0x7d
 8002188:	d902      	bls.n	8002190 <main+0x688>
 800218a:	4b57      	ldr	r3, [pc, #348]	; (80022e8 <main+0x7e0>)
 800218c:	227d      	movs	r2, #125	; 0x7d
 800218e:	601a      	str	r2, [r3, #0]
		  if(ccr4_tim1 <66) {ccr4_tim1 =66;}
 8002190:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <main+0x7e0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b41      	cmp	r3, #65	; 0x41
 8002196:	d802      	bhi.n	800219e <main+0x696>
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <main+0x7e0>)
 800219a:	2242      	movs	r2, #66	; 0x42
 800219c:	601a      	str	r2, [r3, #0]
	  htim1.Instance->CCR3 = ccr3_tim1; //
 800219e:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <main+0x7ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <main+0x7dc>)
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance->CCR4 = ccr4_tim1; //  power_procent
 80021a8:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <main+0x7ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4e      	ldr	r2, [pc, #312]	; (80022e8 <main+0x7e0>)
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

	  // ========================== а вот ОНО, - новая частота  ============================
	  // hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
	  if(hrtim_period_new >1000) // == 43 kHz    hrtim_period_new=2930  == 14505 Hz
 80021b2:	4b4e      	ldr	r3, [pc, #312]	; (80022ec <main+0x7e4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ba:	d904      	bls.n	80021c6 <main+0x6be>
		  {  hhrtim1.Instance->sMasterRegs.MPER = hrtim_period_new; }
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <main+0x7e8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <main+0x7e4>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	615a      	str	r2, [r3, #20]
	  freq_tim1 = 5440000000 / (hhrtim1.Instance->sMasterRegs.MPER) / 128; // это есть выходная частота, tim1->ARR == 127  всегда ==> делитель=128
 80021c6:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <main+0x7e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d6:	a134      	add	r1, pc, #208	; (adr r1, 80022a8 <main+0x7a0>)
 80021d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021dc:	f7fe fd7c 	bl	8000cd8 <__aeabi_ldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da05      	bge.n	80021f4 <main+0x6ec>
 80021e8:	f112 087f 	adds.w	r8, r2, #127	; 0x7f
 80021ec:	f143 0900 	adc.w	r9, r3, #0
 80021f0:	4642      	mov	r2, r8
 80021f2:	464b      	mov	r3, r9
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	09d0      	lsrs	r0, r2, #7
 80021fe:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002202:	11d9      	asrs	r1, r3, #7
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <main+0x7ec>)
 800220a:	601a      	str	r2, [r3, #0]
	  freq_tim1_float = (float)freq_tim1;
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <main+0x7ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800221c:	ee17 2a90 	vmov	r2, s15
 8002220:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <main+0x7f0>)
 8002222:	601a      	str	r2, [r3, #0]

	  if (((cmd_set.cmd_flags & 0x0010) >0) & (index_data_real_zamer >1000))
 8002224:	4b35      	ldr	r3, [pc, #212]	; (80022fc <main+0x7f4>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	bfcc      	ite	gt
 8002230:	2301      	movgt	r3, #1
 8002232:	2300      	movle	r3, #0
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <main+0x7cc>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223e:	bf8c      	ite	hi
 8002240:	2301      	movhi	r3, #1
 8002242:	2300      	movls	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4013      	ands	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <main+0x74c>
	  	  { flag_data_complit_for_Tx = 255; }
 800224e:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <main+0x7f8>)
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	801a      	strh	r2, [r3, #0]

	  if (flag_end_FFT ==0) // flag_complit_ADC ==1 означает что все замеры сделаны
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <main+0x7fc>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 83c5 	bne.w	80029e8 <main+0xee0>
	  {
		  flag_end_FFT =1;
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <main+0x7fc>)
 8002260:	2201      	movs	r2, #1
 8002262:	801a      	strh	r2, [r3, #0]
		//count_tic_adc_finish = DWT_CYCCNT;//смотрим сколько натикало, поскольку при старте  DWT_CYCCNT==0, то все просто
		//count_tic_adc_float_mks = (float)count_tic_adc_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 82-86 мкс
		// обнуляем счетчик тиков, для подсчета времени работы прг, и одновременно уже будет идти 256 замеров АЦП
			count_tic_ALL_finish = DWT_CYCCNT;
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <main+0x800>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <main+0x804>)
 800226a:	6013      	str	r3, [r2, #0]
			count_tic_ALL_float_mks = (float)count_tic_ALL_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 1320 мкс 512 zamerov;
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <main+0x804>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002278:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002310 <main+0x808>
 800227c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <main+0x80c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800228c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <main+0x810>)
 8002292:	edc3 7a00 	vstr	s15, [r3]
		 DWT_CYCCNT =0;
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <main+0x800>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]



//		for (uint16_t ic =32; ic < LENGTH_OTSOS; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 800229c:	2300      	movs	r3, #0
 800229e:	833b      	strh	r3, [r7, #24]
 80022a0:	e120      	b.n	80024e4 <main+0x9dc>
 80022a2:	bf00      	nop
 80022a4:	f3af 8000 	nop.w
 80022a8:	443fd000 	.word	0x443fd000
 80022ac:	00000001 	.word	0x00000001
 80022b0:	20000010 	.word	0x20000010
 80022b4:	20011f30 	.word	0x20011f30
 80022b8:	20000614 	.word	0x20000614
 80022bc:	20000628 	.word	0x20000628
 80022c0:	20007630 	.word	0x20007630
 80022c4:	20008630 	.word	0x20008630
 80022c8:	20006630 	.word	0x20006630
 80022cc:	20006e30 	.word	0x20006e30
 80022d0:	2000662c 	.word	0x2000662c
 80022d4:	20011eb8 	.word	0x20011eb8
 80022d8:	20000629 	.word	0x20000629
 80022dc:	20000004 	.word	0x20000004
 80022e0:	51eb851f 	.word	0x51eb851f
 80022e4:	20000008 	.word	0x20000008
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	2000001c 	.word	0x2000001c
 80022f0:	200004ec 	.word	0x200004ec
 80022f4:	2000f648 	.word	0x2000f648
 80022f8:	2000f64c 	.word	0x2000f64c
 80022fc:	20011ebc 	.word	0x20011ebc
 8002300:	20011eba 	.word	0x20011eba
 8002304:	2000061a 	.word	0x2000061a
 8002308:	e0001004 	.word	0xe0001004
 800230c:	20000620 	.word	0x20000620
 8002310:	49742400 	.word	0x49742400
 8002314:	20000030 	.word	0x20000030
 8002318:	20000624 	.word	0x20000624
				//X_filter += V_filter - X_filter * L_filter;
				// ===============================================================
				// X_filter_1 += (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] & 0x0000FFFF);
				// if (zamer_tim20[ic] >50) { X_filter_1 += 1; }
				if(flag_data_complit_for_Tx>0) { adc1_Tx[ic] = zamer_adc_dma[ic] & 0x0000FFFF; }
 800231c:	4ba6      	ldr	r3, [pc, #664]	; (80025b8 <main+0xab0>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <main+0x82e>
 8002324:	8b3b      	ldrh	r3, [r7, #24]
 8002326:	4aa5      	ldr	r2, [pc, #660]	; (80025bc <main+0xab4>)
 8002328:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800232c:	8b3b      	ldrh	r3, [r7, #24]
 800232e:	b291      	uxth	r1, r2
 8002330:	4aa3      	ldr	r2, [pc, #652]	; (80025c0 <main+0xab8>)
 8002332:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_1 += (float) (zamer_adc_dma[ic] & 0x0000FFFF);
 8002336:	8b3b      	ldrh	r3, [r7, #24]
 8002338:	4aa0      	ldr	r2, [pc, #640]	; (80025bc <main+0xab4>)
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	b29b      	uxth	r3, r3
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002348:	4b9e      	ldr	r3, [pc, #632]	; (80025c4 <main+0xabc>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	4b9c      	ldr	r3, [pc, #624]	; (80025c4 <main+0xabc>)
 8002354:	edc3 7a00 	vstr	s15, [r3]
				V_filter_1 -= X_filter_1 * (R_filter);
 8002358:	4b9b      	ldr	r3, [pc, #620]	; (80025c8 <main+0xac0>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	4b99      	ldr	r3, [pc, #612]	; (80025c4 <main+0xabc>)
 8002360:	edd3 6a00 	vldr	s13, [r3]
 8002364:	4b99      	ldr	r3, [pc, #612]	; (80025cc <main+0xac4>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002372:	4b95      	ldr	r3, [pc, #596]	; (80025c8 <main+0xac0>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
				X_filter_1 += V_filter_1 - X_filter_1 * L_filter;
 8002378:	4b93      	ldr	r3, [pc, #588]	; (80025c8 <main+0xac0>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	4b91      	ldr	r3, [pc, #580]	; (80025c4 <main+0xabc>)
 8002380:	edd3 6a00 	vldr	s13, [r3]
 8002384:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <main+0xac8>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002392:	4b8c      	ldr	r3, [pc, #560]	; (80025c4 <main+0xabc>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <main+0xabc>)
 800239e:	edc3 7a00 	vstr	s15, [r3]
				filter_adc1[ic] = X_filter_1;
 80023a2:	8b3b      	ldrh	r3, [r7, #24]
 80023a4:	4a87      	ldr	r2, [pc, #540]	; (80025c4 <main+0xabc>)
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	498a      	ldr	r1, [pc, #552]	; (80025d4 <main+0xacc>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	601a      	str	r2, [r3, #0]
				data_adc1[2*ic] = 0.001 * X_filter_1;
 80023b0:	4b84      	ldr	r3, [pc, #528]	; (80025c4 <main+0xabc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8ef 	bl	8000598 <__aeabi_f2d>
 80023ba:	a37d      	add	r3, pc, #500	; (adr r3, 80025b0 <main+0xaa8>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f942 	bl	8000648 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	8b3b      	ldrh	r3, [r7, #24]
 80023ce:	005c      	lsls	r4, r3, #1
 80023d0:	f7fe fc32 	bl	8000c38 <__aeabi_d2f>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4980      	ldr	r1, [pc, #512]	; (80025d8 <main+0xad0>)
 80023d8:	00a3      	lsls	r3, r4, #2
 80023da:	440b      	add	r3, r1
 80023dc:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc1_Tx[ic] = data_adc1[2*ic]; }
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <main+0xab0>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <main+0x8f4>
 80023e6:	8b3b      	ldrh	r3, [r7, #24]
 80023e8:	005a      	lsls	r2, r3, #1
 80023ea:	8b3b      	ldrh	r3, [r7, #24]
 80023ec:	497a      	ldr	r1, [pc, #488]	; (80025d8 <main+0xad0>)
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	440a      	add	r2, r1
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	4979      	ldr	r1, [pc, #484]	; (80025dc <main+0xad4>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	601a      	str	r2, [r3, #0]
				//data_adc1[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*(ic-32+1)] =0;
				// ==================================================================
				// X_filter_2 += (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] >>16);
				if(flag_data_complit_for_Tx>0) { adc2_Tx[ic] = (zamer_adc_dma[ic] >>16); }
 80023fc:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <main+0xab0>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <main+0x910>
 8002404:	8b3b      	ldrh	r3, [r7, #24]
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <main+0xab4>)
 8002408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240c:	0c1a      	lsrs	r2, r3, #16
 800240e:	8b3b      	ldrh	r3, [r7, #24]
 8002410:	b291      	uxth	r1, r2
 8002412:	4a73      	ldr	r2, [pc, #460]	; (80025e0 <main+0xad8>)
 8002414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_2 += (float) ((zamer_adc_dma[ic] >>16));
 8002418:	8b3b      	ldrh	r3, [r7, #24]
 800241a:	4a68      	ldr	r2, [pc, #416]	; (80025bc <main+0xab4>)
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800242a:	4b6e      	ldr	r3, [pc, #440]	; (80025e4 <main+0xadc>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002434:	4b6b      	ldr	r3, [pc, #428]	; (80025e4 <main+0xadc>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
				V_filter_2 -= X_filter_2 * (R_filter);
 800243a:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <main+0xae0>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <main+0xadc>)
 8002442:	edd3 6a00 	vldr	s13, [r3]
 8002446:	4b61      	ldr	r3, [pc, #388]	; (80025cc <main+0xac4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <main+0xae0>)
 8002456:	edc3 7a00 	vstr	s15, [r3]
				X_filter_2 += V_filter_2 - X_filter_2 * L_filter;
 800245a:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <main+0xae0>)
 800245c:	ed93 7a00 	vldr	s14, [r3]
 8002460:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <main+0xadc>)
 8002462:	edd3 6a00 	vldr	s13, [r3]
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <main+0xac8>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002474:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <main+0xadc>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <main+0xadc>)
 8002480:	edc3 7a00 	vstr	s15, [r3]
				filter_adc2[ic] = X_filter_2;
 8002484:	8b3b      	ldrh	r3, [r7, #24]
 8002486:	4a57      	ldr	r2, [pc, #348]	; (80025e4 <main+0xadc>)
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	4958      	ldr	r1, [pc, #352]	; (80025ec <main+0xae4>)
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	601a      	str	r2, [r3, #0]
				data_adc2[2*ic] = 0.001 * X_filter_2;
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <main+0xadc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f87e 	bl	8000598 <__aeabi_f2d>
 800249c:	a344      	add	r3, pc, #272	; (adr r3, 80025b0 <main+0xaa8>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8d1 	bl	8000648 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	8b3b      	ldrh	r3, [r7, #24]
 80024b0:	005c      	lsls	r4, r3, #1
 80024b2:	f7fe fbc1 	bl	8000c38 <__aeabi_d2f>
 80024b6:	4602      	mov	r2, r0
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <main+0xae8>)
 80024ba:	00a3      	lsls	r3, r4, #2
 80024bc:	440b      	add	r3, r1
 80024be:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc2_Tx[ic] = data_adc2[2*ic]; }
 80024c0:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <main+0xab0>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <main+0x9d6>
 80024c8:	8b3b      	ldrh	r3, [r7, #24]
 80024ca:	005a      	lsls	r2, r3, #1
 80024cc:	8b3b      	ldrh	r3, [r7, #24]
 80024ce:	4948      	ldr	r1, [pc, #288]	; (80025f0 <main+0xae8>)
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	440a      	add	r2, r1
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4947      	ldr	r1, [pc, #284]	; (80025f4 <main+0xaec>)
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	601a      	str	r2, [r3, #0]
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 80024de:	8b3b      	ldrh	r3, [r7, #24]
 80024e0:	3301      	adds	r3, #1
 80024e2:	833b      	strh	r3, [r7, #24]
 80024e4:	8b3b      	ldrh	r3, [r7, #24]
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	f4ff af17 	bcc.w	800231c <main+0x814>
				//data_adc2[2*(ic-32)] = X_filter_2;
				//data_adc2[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*(ic-32+1)] =0;
			}

			if(flag_data_complit_for_Tx>0)
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <main+0xab0>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <main+0x9fa>
				{
					index_data_real_zamer =0;
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <main+0xaf0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	801a      	strh	r2, [r3, #0]
					flag_data_complit_for_Tx =0;
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <main+0xab0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
//					for (uint16_t iv =0; iv < 16; iv++)
//					{ data_adc1[32*iv + ic] = 0; }
//				}
//			}

			flag_end_FFT =2; // такой флаг разрешает остановить АЦП и перекинуть массив данных, пока тут дорасчитываем до конца
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <main+0xaf4>)
 8002504:	2202      	movs	r2, #2
 8002506:	801a      	strh	r2, [r3, #0]
							// перекид данных занимает 41мкс, и произойдет только при полном окончании N(512) замеров
			count_tic_FFT_start= DWT_CYCCNT;
 8002508:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <main+0xaf8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3d      	ldr	r2, [pc, #244]	; (8002604 <main+0xafc>)
 800250e:	6013      	str	r3, [r2, #0]
		  // Process the data through the CFFT/CIFFT module
			if (fft_N ==256)
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <main+0xb00>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002518:	d114      	bne.n	8002544 <main+0xa3c>
			{
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc1, ifftFlag, doBitReverse);//в реале == 361мкс(256 sampl)
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <main+0xb04>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <main+0xb08>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	492c      	ldr	r1, [pc, #176]	; (80025d8 <main+0xad0>)
 8002528:	483a      	ldr	r0, [pc, #232]	; (8002614 <main+0xb0c>)
 800252a:	f00b fe9b 	bl	800e264 <arm_cfft_f32>
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc2, ifftFlag, doBitReverse);
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <main+0xb04>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b36      	ldr	r3, [pc, #216]	; (8002610 <main+0xb08>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	492d      	ldr	r1, [pc, #180]	; (80025f0 <main+0xae8>)
 800253c:	4835      	ldr	r0, [pc, #212]	; (8002614 <main+0xb0c>)
 800253e:	f00b fe91 	bl	800e264 <arm_cfft_f32>
 8002542:	e0a0      	b.n	8002686 <main+0xb7e>
			}
			else
			{
				if (fft_N ==512)
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <main+0xb00>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254c:	d114      	bne.n	8002578 <main+0xa70>
				{
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc1, ifftFlag, doBitReverse);//в реале == 618мкс(512 sampl)
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <main+0xb04>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <main+0xb08>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	491f      	ldr	r1, [pc, #124]	; (80025d8 <main+0xad0>)
 800255c:	482e      	ldr	r0, [pc, #184]	; (8002618 <main+0xb10>)
 800255e:	f00b fe81 	bl	800e264 <arm_cfft_f32>
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc2, ifftFlag, doBitReverse);
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <main+0xb04>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <main+0xb08>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4920      	ldr	r1, [pc, #128]	; (80025f0 <main+0xae8>)
 8002570:	4829      	ldr	r0, [pc, #164]	; (8002618 <main+0xb10>)
 8002572:	f00b fe77 	bl	800e264 <arm_cfft_f32>
 8002576:	e086      	b.n	8002686 <main+0xb7e>
				}
				else
				{
					if (fft_N ==1024)
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <main+0xb00>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002580:	d14e      	bne.n	8002620 <main+0xb18>
					{
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(1024 sampl)
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <main+0xb04>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <main+0xb08>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4912      	ldr	r1, [pc, #72]	; (80025d8 <main+0xad0>)
 8002590:	4822      	ldr	r0, [pc, #136]	; (800261c <main+0xb14>)
 8002592:	f00b fe67 	bl	800e264 <arm_cfft_f32>
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc2, ifftFlag, doBitReverse);
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <main+0xb04>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <main+0xb08>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4913      	ldr	r1, [pc, #76]	; (80025f0 <main+0xae8>)
 80025a4:	481d      	ldr	r0, [pc, #116]	; (800261c <main+0xb14>)
 80025a6:	f00b fe5d 	bl	800e264 <arm_cfft_f32>
 80025aa:	e06c      	b.n	8002686 <main+0xb7e>
 80025ac:	f3af 8000 	nop.w
 80025b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80025b4:	3f50624d 	.word	0x3f50624d
 80025b8:	20011eba 	.word	0x20011eba
 80025bc:	2000162c 	.word	0x2000162c
 80025c0:	20006630 	.word	0x20006630
 80025c4:	2000f668 	.word	0x2000f668
 80025c8:	2000f66c 	.word	0x2000f66c
 80025cc:	20000020 	.word	0x20000020
 80025d0:	20000024 	.word	0x20000024
 80025d4:	20009630 	.word	0x20009630
 80025d8:	2000262c 	.word	0x2000262c
 80025dc:	20007630 	.word	0x20007630
 80025e0:	20006e30 	.word	0x20006e30
 80025e4:	2000f670 	.word	0x2000f670
 80025e8:	2000f674 	.word	0x2000f674
 80025ec:	2000a630 	.word	0x2000a630
 80025f0:	2000462c 	.word	0x2000462c
 80025f4:	20008630 	.word	0x20008630
 80025f8:	20011eb8 	.word	0x20011eb8
 80025fc:	2000061a 	.word	0x2000061a
 8002600:	e0001004 	.word	0xe0001004
 8002604:	2000061c 	.word	0x2000061c
 8002608:	20000018 	.word	0x20000018
 800260c:	2000f644 	.word	0x2000f644
 8002610:	20000014 	.word	0x20000014
 8002614:	08014ef0 	.word	0x08014ef0
 8002618:	08014f10 	.word	0x08014f10
 800261c:	08014ed0 	.word	0x08014ed0
					}
					else
					{
						if (fft_N ==2048)
 8002620:	4bae      	ldr	r3, [pc, #696]	; (80028dc <main+0xdd4>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002628:	d114      	bne.n	8002654 <main+0xb4c>
						{
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(2048 sampl)
 800262a:	4bad      	ldr	r3, [pc, #692]	; (80028e0 <main+0xdd8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4bac      	ldr	r3, [pc, #688]	; (80028e4 <main+0xddc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	49ac      	ldr	r1, [pc, #688]	; (80028e8 <main+0xde0>)
 8002638:	48ac      	ldr	r0, [pc, #688]	; (80028ec <main+0xde4>)
 800263a:	f00b fe13 	bl	800e264 <arm_cfft_f32>
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc2, ifftFlag, doBitReverse);
 800263e:	4ba8      	ldr	r3, [pc, #672]	; (80028e0 <main+0xdd8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4ba7      	ldr	r3, [pc, #668]	; (80028e4 <main+0xddc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	49a9      	ldr	r1, [pc, #676]	; (80028f0 <main+0xde8>)
 800264c:	48a7      	ldr	r0, [pc, #668]	; (80028ec <main+0xde4>)
 800264e:	f00b fe09 	bl	800e264 <arm_cfft_f32>
 8002652:	e018      	b.n	8002686 <main+0xb7e>
						}
						else
						{
							if (fft_N ==4096)
 8002654:	4ba1      	ldr	r3, [pc, #644]	; (80028dc <main+0xdd4>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d113      	bne.n	8002686 <main+0xb7e>
							{
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc1, ifftFlag, doBitReverse);//в реале == 5461мкс(4096 sampl)
 800265e:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <main+0xdd8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	4b9f      	ldr	r3, [pc, #636]	; (80028e4 <main+0xddc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	499f      	ldr	r1, [pc, #636]	; (80028e8 <main+0xde0>)
 800266c:	48a1      	ldr	r0, [pc, #644]	; (80028f4 <main+0xdec>)
 800266e:	f00b fdf9 	bl	800e264 <arm_cfft_f32>
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc2, ifftFlag, doBitReverse);
 8002672:	4b9b      	ldr	r3, [pc, #620]	; (80028e0 <main+0xdd8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b9a      	ldr	r3, [pc, #616]	; (80028e4 <main+0xddc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	499c      	ldr	r1, [pc, #624]	; (80028f0 <main+0xde8>)
 8002680:	489c      	ldr	r0, [pc, #624]	; (80028f4 <main+0xdec>)
 8002682:	f00b fdef 	bl	800e264 <arm_cfft_f32>
					} // if (fft_N ==1024)
				} // if (fft_N ==512)
			} // if (fft_N ==256)

		  // Process the data through the Complex Magnitude Module for  calculating the magnitude at each bin
		  fftSize = fft_N /64 +10; // 10 такое количество гармоник достаточно, для массива 512 без нулей
 8002686:	4b95      	ldr	r3, [pc, #596]	; (80028dc <main+0xdd4>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	b29b      	uxth	r3, r3
 800268e:	330a      	adds	r3, #10
 8002690:	461a      	mov	r2, r3
 8002692:	4b99      	ldr	r3, [pc, #612]	; (80028f8 <main+0xdf0>)
 8002694:	601a      	str	r2, [r3, #0]
		  //ввремя вычисления Две магнитуды, в реале == 97мкс(fftSize==256) == 37мкс(fftSize==96)
		  arm_cmplx_mag_f32(data_adc1, arr1_Output_f32, fftSize);
 8002696:	4b98      	ldr	r3, [pc, #608]	; (80028f8 <main+0xdf0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	4997      	ldr	r1, [pc, #604]	; (80028fc <main+0xdf4>)
 800269e:	4892      	ldr	r0, [pc, #584]	; (80028e8 <main+0xde0>)
 80026a0:	f00b fe78 	bl	800e394 <arm_cmplx_mag_f32>
		  arm_cmplx_mag_f32(data_adc2, arr2_Output_f32, fftSize);
 80026a4:	4b94      	ldr	r3, [pc, #592]	; (80028f8 <main+0xdf0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4995      	ldr	r1, [pc, #596]	; (8002900 <main+0xdf8>)
 80026ac:	4890      	ldr	r0, [pc, #576]	; (80028f0 <main+0xde8>)
 80026ae:	f00b fe71 	bl	800e394 <arm_cmplx_mag_f32>
		  arr1_phase_Output_8_f32 = atan2f(data_adc1[17], data_adc1[16]);
 80026b2:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <main+0xde0>)
 80026b4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026b8:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <main+0xde0>)
 80026ba:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80026be:	eef0 0a47 	vmov.f32	s1, s14
 80026c2:	eeb0 0a67 	vmov.f32	s0, s15
 80026c6:	f011 f843 	bl	8013750 <atan2f>
 80026ca:	eef0 7a40 	vmov.f32	s15, s0
 80026ce:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <main+0xdfc>)
 80026d0:	edc3 7a00 	vstr	s15, [r3]
			  //while(arr1_phase_Output_8_f32 > M_PI ) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 - M_PI; }
			  //while(arr1_phase_Output_8_f32 < (0-M_PI) ) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 + M_PI; }
		  arr2_phase_Output_8_f32 = atan2f(data_adc2[17], data_adc2[16]);
 80026d4:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <main+0xde8>)
 80026d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <main+0xde8>)
 80026dc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80026e0:	eef0 0a47 	vmov.f32	s1, s14
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	f011 f832 	bl	8013750 <atan2f>
 80026ec:	eef0 7a40 	vmov.f32	s15, s0
 80026f0:	4b85      	ldr	r3, [pc, #532]	; (8002908 <main+0xe00>)
 80026f2:	edc3 7a00 	vstr	s15, [r3]
			  //while(arr2_phase_Output_8_f32 > M_PI ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 - M_PI; }
			  //while(arr2_phase_Output_8_f32 < (0-M_PI) ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 + M_PI; }
		  temp_phase_f32 = arr1_phase_Output_8_f32 - arr2_phase_Output_8_f32;
 80026f6:	4b83      	ldr	r3, [pc, #524]	; (8002904 <main+0xdfc>)
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	4b82      	ldr	r3, [pc, #520]	; (8002908 <main+0xe00>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002706:	4b81      	ldr	r3, [pc, #516]	; (800290c <main+0xe04>)
 8002708:	edc3 7a00 	vstr	s15, [r3]
//			  while(temp_phase_f32 > 2*M_PI ) {temp_phase_f32 = temp_phase_f32 - M_PI; }
//			  while(temp_phase_f32 < (0-2*M_PI) ) {temp_phase_f32 = temp_phase_f32 + M_PI; }
		  arr_power_Output_8_f32 = arr1_Output_f32[8] * arr2_Output_f32[8] *arm_cos_f32(temp_phase_f32);
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <main+0xdf4>)
 800270e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002712:	4b7b      	ldr	r3, [pc, #492]	; (8002900 <main+0xdf8>)
 8002714:	edd3 7a08 	vldr	s15, [r3, #32]
 8002718:	ee27 8a27 	vmul.f32	s16, s14, s15
 800271c:	4b7b      	ldr	r3, [pc, #492]	; (800290c <main+0xe04>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	eeb0 0a67 	vmov.f32	s0, s15
 8002726:	f00b ff59 	bl	800e5dc <arm_cos_f32>
 800272a:	eef0 7a40 	vmov.f32	s15, s0
 800272e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002732:	4b77      	ldr	r3, [pc, #476]	; (8002910 <main+0xe08>)
 8002734:	edc3 7a00 	vstr	s15, [r3]
		// F_bin = F *64/256 = F / 4 ;
		// F_bin = F *64/512 = F / 8 ;
		// F_bin = F *64/1024 = F / 16 ;
		// Koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
		// freq_new = F_bin * N + Koeff * F_bin;   // для этого случая N==4
		  if (((cmd_set.cmd_flags & 0x0001) >0) & ((cmd_set.cmd_flags & 0x0002) ==0) & ((cmd_set.cmd_flags & 0x0008) >0)) // автоподстройка частоты
 8002738:	4b76      	ldr	r3, [pc, #472]	; (8002914 <main+0xe0c>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	bfcc      	ite	gt
 8002744:	2301      	movgt	r3, #1
 8002746:	2300      	movle	r3, #0
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b72      	ldr	r3, [pc, #456]	; (8002914 <main+0xe0c>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4013      	ands	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <main+0xe0c>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	bfcc      	ite	gt
 800276e:	2301      	movgt	r3, #1
 8002770:	2300      	movle	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 811d 	beq.w	80029b6 <main+0xeae>
		  {
			if (fft_N ==256)
 800277c:	4b57      	ldr	r3, [pc, #348]	; (80028dc <main+0xdd4>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002784:	d138      	bne.n	80027f8 <main+0xcf0>
			{
				koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
 8002786:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <main+0xdf4>)
 8002788:	ed93 7a05 	vldr	s14, [r3, #20]
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <main+0xdf4>)
 800278e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002792:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002796:	4b59      	ldr	r3, [pc, #356]	; (80028fc <main+0xdf4>)
 8002798:	edd3 7a04 	vldr	s15, [r3, #16]
 800279c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80027a0:	4b56      	ldr	r3, [pc, #344]	; (80028fc <main+0xdf4>)
 80027a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80027a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <main+0xdf4>)
 80027ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80027b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <main+0xe10>)
 80027be:	edc3 7a00 	vstr	s15, [r3]
				freq_new = freq_tim1_float + koeff * freq_tim1_float/4;   // для этого случая N==4
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <main+0xe14>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	4b53      	ldr	r3, [pc, #332]	; (800291c <main+0xe14>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <main+0xe10>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027e4:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80027e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f0:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <main+0xe18>)
 80027f2:	edc3 7a00 	vstr	s15, [r3]
 80027f6:	e0de      	b.n	80029b6 <main+0xeae>
			}
			else
			{
				if (fft_N ==512)
 80027f8:	4b38      	ldr	r3, [pc, #224]	; (80028dc <main+0xdd4>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002800:	f040 809c 	bne.w	800293c <main+0xe34>
				{
					ln_x3 = 100000.f * logf((float)arr1_Output_f32[7]);
 8002804:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <main+0xdf4>)
 8002806:	edd3 7a07 	vldr	s15, [r3, #28]
 800280a:	eeb0 0a67 	vmov.f32	s0, s15
 800280e:	f010 ffa1 	bl	8013754 <logf>
 8002812:	eef0 7a40 	vmov.f32	s15, s0
 8002816:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002924 <main+0xe1c>
 800281a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281e:	4b42      	ldr	r3, [pc, #264]	; (8002928 <main+0xe20>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
					ln_x4 = 100000.f * logf((float)arr1_Output_f32[8]);
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <main+0xdf4>)
 8002826:	edd3 7a08 	vldr	s15, [r3, #32]
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	f010 ff91 	bl	8013754 <logf>
 8002832:	eef0 7a40 	vmov.f32	s15, s0
 8002836:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002924 <main+0xe1c>
 800283a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <main+0xe24>)
 8002840:	edc3 7a00 	vstr	s15, [r3]
					ln_x5 = 100000.f * logf((float)arr1_Output_f32[9]);
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <main+0xdf4>)
 8002846:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	f010 ff81 	bl	8013754 <logf>
 8002852:	eef0 7a40 	vmov.f32	s15, s0
 8002856:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002924 <main+0xe1c>
 800285a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285e:	4b34      	ldr	r3, [pc, #208]	; (8002930 <main+0xe28>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
					// koeff = (ln_x5 -ln_x3) / (2*(2*ln_x4 -ln_x5 -ln_x3));
					koeff = (8.f + (ln_x5 -ln_x3) / 2.f / (2.f * ln_x4 -ln_x5 -ln_x3)) * 10000.f;
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <main+0xe28>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <main+0xe20>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002874:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002878:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800287c:	4b2b      	ldr	r3, [pc, #172]	; (800292c <main+0xe24>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <main+0xe28>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <main+0xe20>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80028a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028a6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002934 <main+0xe2c>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <main+0xe10>)
 80028b0:	edc3 7a00 	vstr	s15, [r3]
					freq_new = koeff * ((float)freq_tim1_float)/80000.f; // для этого случая N==8
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <main+0xe14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <main+0xe10>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ca:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002938 <main+0xe30>
 80028ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <main+0xe18>)
 80028d4:	edc3 7a00 	vstr	s15, [r3]
 80028d8:	e06d      	b.n	80029b6 <main+0xeae>
 80028da:	bf00      	nop
 80028dc:	20000018 	.word	0x20000018
 80028e0:	2000f644 	.word	0x2000f644
 80028e4:	20000014 	.word	0x20000014
 80028e8:	2000262c 	.word	0x2000262c
 80028ec:	08014ee0 	.word	0x08014ee0
 80028f0:	2000462c 	.word	0x2000462c
 80028f4:	08014f00 	.word	0x08014f00
 80028f8:	2000f640 	.word	0x2000f640
 80028fc:	2000b630 	.word	0x2000b630
 8002900:	2000d630 	.word	0x2000d630
 8002904:	2000f630 	.word	0x2000f630
 8002908:	2000f634 	.word	0x2000f634
 800290c:	2000f63c 	.word	0x2000f63c
 8002910:	2000f638 	.word	0x2000f638
 8002914:	20011ebc 	.word	0x20011ebc
 8002918:	2000f650 	.word	0x2000f650
 800291c:	2000f64c 	.word	0x2000f64c
 8002920:	2000f660 	.word	0x2000f660
 8002924:	47c35000 	.word	0x47c35000
 8002928:	2000f654 	.word	0x2000f654
 800292c:	2000f658 	.word	0x2000f658
 8002930:	2000f65c 	.word	0x2000f65c
 8002934:	461c4000 	.word	0x461c4000
 8002938:	479c4000 	.word	0x479c4000
				}
				else
				{
					if (fft_N ==1024)
 800293c:	4ba2      	ldr	r3, [pc, #648]	; (8002bc8 <main+0x10c0>)
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d137      	bne.n	80029b6 <main+0xeae>
					{
						koeff = (arr1_Output_f32[17] -arr1_Output_f32[15]) / (2*(2*arr1_Output_f32[16] -arr1_Output_f32[17] -arr1_Output_f32[15]));
 8002946:	4ba1      	ldr	r3, [pc, #644]	; (8002bcc <main+0x10c4>)
 8002948:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800294c:	4b9f      	ldr	r3, [pc, #636]	; (8002bcc <main+0x10c4>)
 800294e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002952:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002956:	4b9d      	ldr	r3, [pc, #628]	; (8002bcc <main+0x10c4>)
 8002958:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800295c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002960:	4b9a      	ldr	r3, [pc, #616]	; (8002bcc <main+0x10c4>)
 8002962:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296a:	4b98      	ldr	r3, [pc, #608]	; (8002bcc <main+0x10c4>)
 800296c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <main+0x10c8>)
 800297e:	edc3 7a00 	vstr	s15, [r3]
						freq_new = freq_tim1_float + koeff * freq_tim1_float/16;   // для этого случая N==16
 8002982:	4b94      	ldr	r3, [pc, #592]	; (8002bd4 <main+0x10cc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298e:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <main+0x10cc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299a:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <main+0x10c8>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029a4:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 80029a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b0:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <main+0x10d0>)
 80029b2:	edc3 7a00 	vstr	s15, [r3]
			//memset(data_adc2, 0, 32764); // sizeof(float32_t)*8196);



		  	// size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 80029b6:	2300      	movs	r3, #0
 80029b8:	82fb      	strh	r3, [r7, #22]
 80029ba:	e010      	b.n	80029de <main+0xed6>
				{
					data_adc1[ic] =0;
 80029bc:	8afb      	ldrh	r3, [r7, #22]
 80029be:	4a87      	ldr	r2, [pc, #540]	; (8002bdc <main+0x10d4>)
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
					data_adc2[ic] =0;
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	4a84      	ldr	r2, [pc, #528]	; (8002be0 <main+0x10d8>)
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 80029d8:	8afb      	ldrh	r3, [r7, #22]
 80029da:	3301      	adds	r3, #1
 80029dc:	82fb      	strh	r3, [r7, #22]
 80029de:	8afa      	ldrh	r2, [r7, #22]
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <main+0x10dc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dbe9      	blt.n	80029bc <main+0xeb4>

	  // здесь будет разборка условий перехода по частоте
	  // freq_new - вычислена выше для типа автоподдержания частоты
	  // если получаем бит сканирования по частоте,  cmd_set.cmd_flags.1
	  // ============================================  сканирование по частоте  ================================================
	  if (((cmd_set.cmd_flags & 0x0001) >0) & ((cmd_set.cmd_flags & 0x0002) >0)) // скольжение по частоте
 80029e8:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <main+0x10e0>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bfcc      	ite	gt
 80029f4:	2301      	movgt	r3, #1
 80029f6:	2300      	movle	r3, #0
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <main+0x10e0>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bfcc      	ite	gt
 8002a06:	2301      	movgt	r3, #1
 8002a08:	2300      	movle	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d058      	beq.n	8002ac6 <main+0xfbe>
	  {
		  if (htim17.Instance->CNT > (cmd_set.time_step *10) )
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <main+0x10e4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <main+0x10e0>)
 8002a1c:	891b      	ldrh	r3, [r3, #8]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d94c      	bls.n	8002ac6 <main+0xfbe>
		  {
			  htim17.Instance->CNT =0;
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <main+0x10e4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
			  old_freq_new = freq_new;
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <main+0x10d0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6d      	ldr	r2, [pc, #436]	; (8002bf0 <main+0x10e8>)
 8002a3a:	6013      	str	r3, [r2, #0]
			  freq_new = freq_new + flag_napravlenia_scan * cmd_set.step;
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <main+0x10ec>)
 8002a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <main+0x10e0>)
 8002a46:	88db      	ldrh	r3, [r3, #6]
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a54:	4b60      	ldr	r3, [pc, #384]	; (8002bd8 <main+0x10d0>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5e:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <main+0x10d0>)
 8002a60:	edc3 7a00 	vstr	s15, [r3]
			  if (freq_new > (cmd_set.freq_start + (cmd_set.step *(cmd_set.N_step-1))))
 8002a64:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <main+0x10e0>)
 8002a66:	885b      	ldrh	r3, [r3, #2]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b5f      	ldr	r3, [pc, #380]	; (8002be8 <main+0x10e0>)
 8002a6c:	88db      	ldrh	r3, [r3, #6]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <main+0x10e0>)
 8002a72:	895b      	ldrh	r3, [r3, #10]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a84:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <main+0x10d0>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	d503      	bpl.n	8002a9c <main+0xf94>
			  {
				  flag_napravlenia_scan = -1; // следующий степ будет в отрицательную сторону
 8002a94:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <main+0x10ec>)
 8002a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9a:	801a      	strh	r2, [r3, #0]
			  }
			  if (freq_new < (cmd_set.freq_start + cmd_set.step))
 8002a9c:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <main+0x10e0>)
 8002a9e:	885b      	ldrh	r3, [r3, #2]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <main+0x10e0>)
 8002aa4:	88db      	ldrh	r3, [r3, #6]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <main+0x10d0>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	dd02      	ble.n	8002ac6 <main+0xfbe>
			  {
				  flag_napravlenia_scan = 1; // следующий степ будет в положительную сторону
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <main+0x10ec>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	  // ============================================  стоять на одной частоте  ================================================
	  if (((cmd_set.cmd_flags & 0x0001) >0) & ((cmd_set.cmd_flags & 0x0002) ==0) & ((cmd_set.cmd_flags & 0x0008) ==0)) // стоять на одной частоте
 8002ac6:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <main+0x10e0>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfcc      	ite	gt
 8002ad2:	2301      	movgt	r3, #1
 8002ad4:	2300      	movle	r3, #0
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <main+0x10e0>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4013      	ands	r3, r2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <main+0x10e0>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <main+0x101a>
	  {
		  old_freq_new = freq_new;
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <main+0x10d0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <main+0x10e8>)
 8002b0e:	6013      	str	r3, [r2, #0]
		  freq_new = cmd_set.freq_start;
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <main+0x10e0>)
 8002b12:	885b      	ldrh	r3, [r3, #2]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1c:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <main+0x10d0>)
 8002b1e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // ============================================  автоподстройка частоты  ================================================
	  if (((cmd_set.cmd_flags & 0x0001) >0) & ((cmd_set.cmd_flags & 0x0002) ==0) & ((cmd_set.cmd_flags & 0x0008) >0)) // автоподстройка частоты
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <main+0x10e0>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bfcc      	ite	gt
 8002b2e:	2301      	movgt	r3, #1
 8002b30:	2300      	movle	r3, #0
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <main+0x10e0>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	4013      	ands	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <main+0x10e0>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfcc      	ite	gt
 8002b58:	2301      	movgt	r3, #1
 8002b5a:	2300      	movle	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80bc 	beq.w	8002cde <main+0x11d6>
	  {
			if (old_freq_new >0)// надо проверить, чтобы не выскакивало за пределы
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <main+0x10e8>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	dd49      	ble.n	8002c0a <main+0x1102>
				{
					if (freq_new >14500)
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <main+0x10d0>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002bf8 <main+0x10f0>
 8002b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b88:	dd3c      	ble.n	8002c04 <main+0x10fc>
						{
							if (freq_new <43000)
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <main+0x10d0>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002bfc <main+0x10f4>
 8002b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	d50f      	bpl.n	8002bbe <main+0x10b6>
								{ freq_new = (freq_new + old_freq_new) /2;  }
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <main+0x10d0>)
 8002ba0:	ed93 7a00 	vldr	s14, [r3]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <main+0x10e8>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <main+0x10d0>)
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
 8002bbc:	e025      	b.n	8002c0a <main+0x1102>
							else
								{ freq_new = 25000; }
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <main+0x10d0>)
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <main+0x10f8>)
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e021      	b.n	8002c0a <main+0x1102>
 8002bc6:	bf00      	nop
 8002bc8:	20000018 	.word	0x20000018
 8002bcc:	2000b630 	.word	0x2000b630
 8002bd0:	2000f650 	.word	0x2000f650
 8002bd4:	2000f64c 	.word	0x2000f64c
 8002bd8:	2000f660 	.word	0x2000f660
 8002bdc:	2000262c 	.word	0x2000262c
 8002be0:	2000462c 	.word	0x2000462c
 8002be4:	2000662c 	.word	0x2000662c
 8002be8:	20011ebc 	.word	0x20011ebc
 8002bec:	200120f8 	.word	0x200120f8
 8002bf0:	2000f664 	.word	0x2000f664
 8002bf4:	2000001a 	.word	0x2000001a
 8002bf8:	46629000 	.word	0x46629000
 8002bfc:	4727f800 	.word	0x4727f800
 8002c00:	46c35000 	.word	0x46c35000
						}
					else
					{ freq_new = 25000; }
 8002c04:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <main+0x1228>)
 8002c06:	4a4b      	ldr	r2, [pc, #300]	; (8002d34 <main+0x122c>)
 8002c08:	601a      	str	r2, [r3, #0]
				}
			old_freq_new = freq_new;
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <main+0x1228>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4a      	ldr	r2, [pc, #296]	; (8002d38 <main+0x1230>)
 8002c10:	6013      	str	r3, [r2, #0]
			err_f[9] = err_f[8];
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <main+0x1234>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <main+0x1234>)
 8002c18:	6253      	str	r3, [r2, #36]	; 0x24
			err_f[8] = err_f[7];
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <main+0x1234>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4a47      	ldr	r2, [pc, #284]	; (8002d3c <main+0x1234>)
 8002c20:	6213      	str	r3, [r2, #32]
			err_f[7] = err_f[6];
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <main+0x1234>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	4a45      	ldr	r2, [pc, #276]	; (8002d3c <main+0x1234>)
 8002c28:	61d3      	str	r3, [r2, #28]
			err_f[6] = err_f[5];
 8002c2a:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <main+0x1234>)
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <main+0x1234>)
 8002c30:	6193      	str	r3, [r2, #24]
			err_f[5] = err_f[4];
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <main+0x1234>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <main+0x1234>)
 8002c38:	6153      	str	r3, [r2, #20]
			err_f[4] = err_f[3];
 8002c3a:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <main+0x1234>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a3f      	ldr	r2, [pc, #252]	; (8002d3c <main+0x1234>)
 8002c40:	6113      	str	r3, [r2, #16]
			err_f[3] = err_f[2];
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <main+0x1234>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <main+0x1234>)
 8002c48:	60d3      	str	r3, [r2, #12]
			err_f[2] = err_f[1];
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <main+0x1234>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <main+0x1234>)
 8002c50:	6093      	str	r3, [r2, #8]
			err_f[1] = err_f[0];
 8002c52:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <main+0x1234>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a39      	ldr	r2, [pc, #228]	; (8002d3c <main+0x1234>)
 8002c58:	6053      	str	r3, [r2, #4]
			err_f[0] = freq_new;
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <main+0x1228>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a37      	ldr	r2, [pc, #220]	; (8002d3c <main+0x1234>)
 8002c60:	6013      	str	r3, [r2, #0]
			delta_F = fabsf (freq_new - (err_f[0] +err_f[1] +err_f[2] +err_f[3] +err_f[4] +err_f[5] +err_f[6] +err_f[7] +err_f[8] +err_f[9])/10);
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <main+0x1228>)
 8002c64:	ed93 7a00 	vldr	s14, [r3]
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <main+0x1234>)
 8002c6a:	edd3 6a00 	vldr	s13, [r3]
 8002c6e:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <main+0x1234>)
 8002c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c78:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <main+0x1234>)
 8002c7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <main+0x1234>)
 8002c84:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <main+0x1234>)
 8002c8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <main+0x1234>)
 8002c98:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ca0:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <main+0x1234>)
 8002ca2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ca6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <main+0x1234>)
 8002cac:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cb0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <main+0x1234>)
 8002cb6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002cba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <main+0x1234>)
 8002cc0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cc4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cc8:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002ccc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd4:	eef0 7ae7 	vabs.f32	s15, s15
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <main+0x1238>)
 8002cda:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // ========================== а вот ОНО, - новая частота  ============================
	  hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <main+0x1228>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce8:	2300      	movs	r3, #0
 8002cea:	ee17 5a90 	vmov	r5, s15
 8002cee:	461e      	mov	r6, r3
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4633      	mov	r3, r6
 8002cf4:	a10c      	add	r1, pc, #48	; (adr r1, 8002d28 <main+0x1220>)
 8002cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cfa:	f7fd ffed 	bl	8000cd8 <__aeabi_ldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <main+0x123c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	469a      	mov	sl, r3
 8002d12:	4693      	mov	fp, r2
 8002d14:	4652      	mov	r2, sl
 8002d16:	465b      	mov	r3, fp
 8002d18:	f7fd ffde 	bl	8000cd8 <__aeabi_ldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <main+0x1240>)
 8002d22:	601a      	str	r2, [r3, #0]
	  if (((cmd_set.cmd_flags & 0x0004) >0) | ((cmd_set.cmd_flags & 0x0010) >0))// если надо, по флагу, вот тут будет включаться циклическая долбежка
 8002d24:	f7ff b894 	b.w	8001e50 <main+0x348>
 8002d28:	443fd000 	.word	0x443fd000
 8002d2c:	00000001 	.word	0x00000001
 8002d30:	2000f660 	.word	0x2000f660
 8002d34:	46c35000 	.word	0x46c35000
 8002d38:	2000f664 	.word	0x2000f664
 8002d3c:	2000f678 	.word	0x2000f678
 8002d40:	2000f6a0 	.word	0x2000f6a0
 8002d44:	20011f30 	.word	0x20011f30
 8002d48:	2000001c 	.word	0x2000001c

08002d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b094      	sub	sp, #80	; 0x50
 8002d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d52:	f107 0318 	add.w	r3, r7, #24
 8002d56:	2238      	movs	r2, #56	; 0x38
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f00b ffb0 	bl	800ecc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f005 fe6a 	bl	8008a48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d82:	2302      	movs	r3, #2
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d86:	2302      	movs	r3, #2
 8002d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002d8e:	2355      	movs	r3, #85	; 0x55
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d92:	2307      	movs	r3, #7
 8002d94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9e:	f107 0318 	add.w	r3, r7, #24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f005 ff04 	bl	8008bb0 <HAL_RCC_OscConfig>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002dae:	f000 fb45 	bl	800343c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db2:	230f      	movs	r3, #15
 8002db4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db6:	2303      	movs	r3, #3
 8002db8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2104      	movs	r1, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f006 fa08 	bl	80091e0 <HAL_RCC_ClockConfig>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002dd6:	f000 fb31 	bl	800343c <Error_Handler>
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3750      	adds	r7, #80	; 0x50
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <eMBRegInputCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   						В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	803b      	strh	r3, [r7, #0]
	// эта фун осталась как заглушка, значения в буфер  pucRegBuffer  закладываются в конце обработки замера
    eMBErrorCode    eStatus = MB_ENOERR;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
    USHORT number_data_array = usNRegs; // number_data_array - это будет номер элемента массива замеров, это будет собираться пакет из 10 массивов, из каждого этот элемент
 8002df8:	883b      	ldrh	r3, [r7, #0]
 8002dfa:	81bb      	strh	r3, [r7, #12]
    if (number_data_array > 1024) { number_data_array =1023; } // размер всех этих массивов = 1024
 8002dfc:	89bb      	ldrh	r3, [r7, #12]
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e02:	d902      	bls.n	8002e0a <eMBRegInputCB+0x26>
 8002e04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002e08:	81bb      	strh	r3, [r7, #12]

	// DWT_CYCCNT =0;// обнуляем значение
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код
    		if (cmd_set.step ==0) {cmd_set.step =1;}
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <eMBRegInputCB+0xb0>)
 8002e0c:	88db      	ldrh	r3, [r3, #6]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <eMBRegInputCB+0x34>
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <eMBRegInputCB+0xb0>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	80da      	strh	r2, [r3, #6]
			 index_temp = (freq_tim1 - cmd_set.freq_start) / cmd_set.step;
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <eMBRegInputCB+0xb4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <eMBRegInputCB+0xb0>)
 8002e1e:	8852      	ldrh	r2, [r2, #2]
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <eMBRegInputCB+0xb0>)
 8002e24:	88d2      	ldrh	r2, [r2, #6]
 8002e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <eMBRegInputCB+0xb8>)
 8002e2e:	801a      	strh	r2, [r3, #0]
			 if (index_temp > 1000) { index_temp =1000; }
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <eMBRegInputCB+0xb8>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e38:	d903      	bls.n	8002e42 <eMBRegInputCB+0x5e>
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <eMBRegInputCB+0xb8>)
 8002e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e40:	801a      	strh	r2, [r3, #0]
			 if (index_temp < 1) { index_temp =0; }
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <eMBRegInputCB+0xb8>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <eMBRegInputCB+0x6c>
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <eMBRegInputCB+0xb8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	801a      	strh	r2, [r3, #0]

			 number_data_array=index_temp;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <eMBRegInputCB+0xb8>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	81bb      	strh	r3, [r7, #12]

			 index_data_real_zamer ++; // в ноль будет сбрасываться при окончании пересчета массивов данных, И после передачи всего пакета
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <eMBRegInputCB+0xbc>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <eMBRegInputCB+0xbc>)
 8002e60:	801a      	strh	r2, [r3, #0]
			 if (index_data_real_zamer > 1023) {index_data_real_zamer =1023; }
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <eMBRegInputCB+0xbc>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d303      	bcc.n	8002e74 <eMBRegInputCB+0x90>
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <eMBRegInputCB+0xbc>)
 8002e6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002e72:	801a      	strh	r2, [r3, #0]

			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			 if ((cmd_set.cmd_flags & 0x0010) >0)
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <eMBRegInputCB+0xb0>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd13      	ble.n	8002ea8 <eMBRegInputCB+0xc4>
			 	 { temp_float = (float32_t) index_data_real_zamer; } // если будем долбить по кругу реальные замеры по времени
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <eMBRegInputCB+0xbc>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <eMBRegInputCB+0xc0>)
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
 8002e92:	e013      	b.n	8002ebc <eMBRegInputCB+0xd8>
 8002e94:	20011ebc 	.word	0x20011ebc
 8002e98:	2000f648 	.word	0x2000f648
 8002e9c:	20011eb6 	.word	0x20011eb6
 8002ea0:	20011eb8 	.word	0x20011eb8
 8002ea4:	20011f20 	.word	0x20011f20
			 else
			 	 { temp_float = (float32_t) (freq_tim1 +42 ); } // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 8002ea8:	4b98      	ldr	r3, [pc, #608]	; (800310c <eMBRegInputCB+0x328>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	332a      	adds	r3, #42	; 0x2a
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	4b96      	ldr	r3, [pc, #600]	; (8003110 <eMBRegInputCB+0x32c>)
 8002eb8:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002ebc:	4994      	ldr	r1, [pc, #592]	; (8003110 <eMBRegInputCB+0x32c>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	780a      	ldrb	r2, [r1, #0]
 8002ec6:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	4a90      	ldr	r2, [pc, #576]	; (8003110 <eMBRegInputCB+0x32c>)
 8002ed0:	7852      	ldrb	r2, [r2, #1]
 8002ed2:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	4a8d      	ldr	r2, [pc, #564]	; (8003110 <eMBRegInputCB+0x32c>)
 8002edc:	7892      	ldrb	r2, [r2, #2]
 8002ede:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	4a8a      	ldr	r2, [pc, #552]	; (8003110 <eMBRegInputCB+0x32c>)
 8002ee8:	78d2      	ldrb	r2, [r2, #3]
 8002eea:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз
			 temp_float = (float32_t) arr1_Output_f32[8]; //(zamer_adc_dma[number_data_array] & 0x0000FFFF);
 8002eec:	4b89      	ldr	r3, [pc, #548]	; (8003114 <eMBRegInputCB+0x330>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a87      	ldr	r2, [pc, #540]	; (8003110 <eMBRegInputCB+0x32c>)
 8002ef2:	6013      	str	r3, [r2, #0]
			 //*pucRegBuffer++ = 	(uint8_t)number_data_array; // *(((uint8_t *) &temp_float) + 0); //
			 //*pucRegBuffer++ =	(uint8_t)number_data_array; //*(((uint8_t *) &temp_float) + 1);
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002ef4:	4986      	ldr	r1, [pc, #536]	; (8003110 <eMBRegInputCB+0x32c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	780a      	ldrb	r2, [r1, #0]
 8002efe:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	4a82      	ldr	r2, [pc, #520]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f08:	7852      	ldrb	r2, [r2, #1]
 8002f0a:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f14:	7892      	ldrb	r2, [r2, #2]
 8002f16:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f20:	78d2      	ldrb	r2, [r2, #3]
 8002f22:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз
			 temp_float = (float32_t) arr2_Output_f32[8]; // ((zamer_adc_dma[number_data_array] >>16));
 8002f24:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <eMBRegInputCB+0x334>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a79      	ldr	r2, [pc, #484]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f2a:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002f2c:	4978      	ldr	r1, [pc, #480]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	780a      	ldrb	r2, [r1, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	4a74      	ldr	r2, [pc, #464]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f40:	7852      	ldrb	r2, [r2, #1]
 8002f42:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	4a71      	ldr	r2, [pc, #452]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f4c:	7892      	ldrb	r2, [r2, #2]
 8002f4e:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	4a6e      	ldr	r2, [pc, #440]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f58:	78d2      	ldrb	r2, [r2, #3]
 8002f5a:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз
			 temp_float = arr1_phase_Output_8_f32; // filter_adc1[number_data_array];
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	; (800311c <eMBRegInputCB+0x338>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6b      	ldr	r2, [pc, #428]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f62:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002f64:	496a      	ldr	r1, [pc, #424]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	780a      	ldrb	r2, [r1, #0]
 8002f6e:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	4a66      	ldr	r2, [pc, #408]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f78:	7852      	ldrb	r2, [r2, #1]
 8002f7a:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	4a63      	ldr	r2, [pc, #396]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f84:	7892      	ldrb	r2, [r2, #2]
 8002f86:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	4a60      	ldr	r2, [pc, #384]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f90:	78d2      	ldrb	r2, [r2, #3]
 8002f92:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз
			 //float ugol_rad = (float)(freq_tim1 -19500)*0.002 * M_PI - M_PI;
			 //temp_float = atan2f(cosf(ugol_rad), sinf(ugol_rad));     //
			 temp_float = arr2_phase_Output_8_f32; // filter_adc2[number_data_array];
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <eMBRegInputCB+0x33c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5d      	ldr	r2, [pc, #372]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f9a:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002f9c:	495c      	ldr	r1, [pc, #368]	; (8003110 <eMBRegInputCB+0x32c>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	780a      	ldrb	r2, [r1, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	4a58      	ldr	r2, [pc, #352]	; (8003110 <eMBRegInputCB+0x32c>)
 8002fb0:	7852      	ldrb	r2, [r2, #1]
 8002fb2:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	4a55      	ldr	r2, [pc, #340]	; (8003110 <eMBRegInputCB+0x32c>)
 8002fbc:	7892      	ldrb	r2, [r2, #2]
 8002fbe:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <eMBRegInputCB+0x32c>)
 8002fc8:	78d2      	ldrb	r2, [r2, #3]
 8002fca:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = temp_phase_f32; // (float32_t) arr1_Output_f32[number_data_array];
 8002fcc:	4b55      	ldr	r3, [pc, #340]	; (8003124 <eMBRegInputCB+0x340>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4f      	ldr	r2, [pc, #316]	; (8003110 <eMBRegInputCB+0x32c>)
 8002fd2:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002fd4:	494e      	ldr	r1, [pc, #312]	; (8003110 <eMBRegInputCB+0x32c>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	780a      	ldrb	r2, [r1, #0]
 8002fde:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <eMBRegInputCB+0x32c>)
 8002fe8:	7852      	ldrb	r2, [r2, #1]
 8002fea:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	; (8003110 <eMBRegInputCB+0x32c>)
 8002ff4:	7892      	ldrb	r2, [r2, #2]
 8002ff6:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	4a44      	ldr	r2, [pc, #272]	; (8003110 <eMBRegInputCB+0x32c>)
 8003000:	78d2      	ldrb	r2, [r2, #3]
 8003002:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз
			 temp_float = arr_power_Output_8_f32; // (float32_t) arr1_Output_f32[number_data_array];
 8003004:	4b48      	ldr	r3, [pc, #288]	; (8003128 <eMBRegInputCB+0x344>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a41      	ldr	r2, [pc, #260]	; (8003110 <eMBRegInputCB+0x32c>)
 800300a:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 800300c:	4940      	ldr	r1, [pc, #256]	; (8003110 <eMBRegInputCB+0x32c>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	780a      	ldrb	r2, [r1, #0]
 8003016:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <eMBRegInputCB+0x32c>)
 8003020:	7852      	ldrb	r2, [r2, #1]
 8003022:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	4a39      	ldr	r2, [pc, #228]	; (8003110 <eMBRegInputCB+0x32c>)
 800302c:	7892      	ldrb	r2, [r2, #2]
 800302e:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 3);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	4a36      	ldr	r2, [pc, #216]	; (8003110 <eMBRegInputCB+0x32c>)
 8003038:	78d2      	ldrb	r2, [r2, #3]
 800303a:	701a      	strb	r2, [r3, #0]

			 // 7 график, adc1_Tx - реальные фактические данные АЦП-1
			if (flag_data_complit_for_Tx ==0)
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <eMBRegInputCB+0x348>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10c      	bne.n	800305e <eMBRegInputCB+0x27a>
			 {temp_float = (float) (adc1_Tx[index_data_real_zamer]);}
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <eMBRegInputCB+0x34c>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <eMBRegInputCB+0x350>)
 800304c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <eMBRegInputCB+0x32c>)
 800305a:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 800305e:	492c      	ldr	r1, [pc, #176]	; (8003110 <eMBRegInputCB+0x32c>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	780a      	ldrb	r2, [r1, #0]
 8003068:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <eMBRegInputCB+0x32c>)
 8003072:	7852      	ldrb	r2, [r2, #1]
 8003074:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <eMBRegInputCB+0x32c>)
 800307e:	7892      	ldrb	r2, [r2, #2]
 8003080:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	4a21      	ldr	r2, [pc, #132]	; (8003110 <eMBRegInputCB+0x32c>)
 800308a:	78d2      	ldrb	r2, [r2, #3]
 800308c:	701a      	strb	r2, [r3, #0]

			 // 8 график, data_adc2_Tx - фильтрованые  данные  после АЦП-1
			if (flag_data_complit_for_Tx ==0)
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <eMBRegInputCB+0x348>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <eMBRegInputCB+0x2c2>
			 {temp_float = data_adc1_Tx[index_data_real_zamer];}
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <eMBRegInputCB+0x34c>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <eMBRegInputCB+0x354>)
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <eMBRegInputCB+0x32c>)
 80030a4:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 80030a6:	491a      	ldr	r1, [pc, #104]	; (8003110 <eMBRegInputCB+0x32c>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	780a      	ldrb	r2, [r1, #0]
 80030b0:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <eMBRegInputCB+0x32c>)
 80030ba:	7852      	ldrb	r2, [r2, #1]
 80030bc:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	4a12      	ldr	r2, [pc, #72]	; (8003110 <eMBRegInputCB+0x32c>)
 80030c6:	7892      	ldrb	r2, [r2, #2]
 80030c8:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <eMBRegInputCB+0x32c>)
 80030d2:	78d2      	ldrb	r2, [r2, #3]
 80030d4:	701a      	strb	r2, [r3, #0]

			 // 9 график, adc2_Tx - реальные фактические данные АЦП-2
			if (flag_data_complit_for_Tx ==0)
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <eMBRegInputCB+0x348>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <eMBRegInputCB+0x314>
				{temp_float = (float) (adc2_Tx[index_data_real_zamer]);}
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <eMBRegInputCB+0x34c>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b15      	ldr	r3, [pc, #84]	; (800313c <eMBRegInputCB+0x358>)
 80030e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <eMBRegInputCB+0x32c>)
 80030f4:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 80030f8:	4905      	ldr	r1, [pc, #20]	; (8003110 <eMBRegInputCB+0x32c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	780a      	ldrb	r2, [r1, #0]
 8003102:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	e019      	b.n	8003140 <eMBRegInputCB+0x35c>
 800310c:	2000f648 	.word	0x2000f648
 8003110:	20011f20 	.word	0x20011f20
 8003114:	2000b630 	.word	0x2000b630
 8003118:	2000d630 	.word	0x2000d630
 800311c:	2000f630 	.word	0x2000f630
 8003120:	2000f634 	.word	0x2000f634
 8003124:	2000f63c 	.word	0x2000f63c
 8003128:	2000f638 	.word	0x2000f638
 800312c:	20011eba 	.word	0x20011eba
 8003130:	20011eb8 	.word	0x20011eb8
 8003134:	20006630 	.word	0x20006630
 8003138:	20007630 	.word	0x20007630
 800313c:	20006e30 	.word	0x20006e30
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <eMBRegInputCB+0x400>)
 8003142:	7852      	ldrb	r2, [r2, #1]
 8003144:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <eMBRegInputCB+0x400>)
 800314e:	7892      	ldrb	r2, [r2, #2]
 8003150:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <eMBRegInputCB+0x400>)
 800315a:	78d2      	ldrb	r2, [r2, #3]
 800315c:	701a      	strb	r2, [r3, #0]

			 // 10 график, data_adc2_Tx - фильтрованые  данные  после АЦП-2
			if (flag_data_complit_for_Tx ==0)
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <eMBRegInputCB+0x404>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <eMBRegInputCB+0x392>
			 {temp_float = data_adc2_Tx[index_data_real_zamer];}
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <eMBRegInputCB+0x408>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <eMBRegInputCB+0x40c>)
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <eMBRegInputCB+0x400>)
 8003174:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 0); //
 8003176:	491b      	ldr	r1, [pc, #108]	; (80031e4 <eMBRegInputCB+0x400>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	780a      	ldrb	r2, [r1, #0]
 8003180:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <eMBRegInputCB+0x400>)
 800318a:	7852      	ldrb	r2, [r2, #1]
 800318c:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  *(((uint8_t *) &temp_float) + 2); //
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <eMBRegInputCB+0x400>)
 8003196:	7892      	ldrb	r2, [r2, #2]
 8003198:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	*(((uint8_t *) &temp_float) + 3);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <eMBRegInputCB+0x400>)
 80031a2:	78d2      	ldrb	r2, [r2, #3]
 80031a4:	701a      	strb	r2, [r3, #0]

			 temp_float = arr_power_Output_8_f32; // (float32_t) data_Y[number_data_array];
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <eMBRegInputCB+0x410>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <eMBRegInputCB+0x400>)
 80031ac:	6013      	str	r3, [r2, #0]
			 *pucRegBuffer++ = 	77;//*(((uint8_t *) &temp_float) + 0); //
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	224d      	movs	r2, #77	; 0x4d
 80031b6:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	78;//*(((uint8_t *) &temp_float) + 1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	224e      	movs	r2, #78	; 0x4e
 80031c0:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =  79;//*(((uint8_t *) &temp_float) + 2); //
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	224f      	movs	r2, #79	; 0x4f
 80031ca:	701a      	strb	r2, [r3, #0]
			 *pucRegBuffer++ =	80;//*(((uint8_t *) &temp_float) + 3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	2250      	movs	r2, #80	; 0x50
 80031d4:	701a      	strb	r2, [r3, #0]


			//	count_tic_finish = DWT_CYCCNT;//смотрим сколько натикало -цикл формирования массивов данных длится 4.894мкс (832 тика)
			//	count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

    return eStatus;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	20011f20 	.word	0x20011f20
 80031e8:	20011eba 	.word	0x20011eba
 80031ec:	20011eb8 	.word	0x20011eb8
 80031f0:	20008630 	.word	0x20008630
 80031f4:	2000f638 	.word	0x2000f638

080031f8 <eMBRegHoldingCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress,  USHORT usNRegs, eMBRegisterMode eMode )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4603      	mov	r3, r0
 8003208:	817b      	strh	r3, [r7, #10]
 800320a:	460b      	mov	r3, r1
 800320c:	813b      	strh	r3, [r7, #8]
 800320e:	4613      	mov	r3, r2
 8003210:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003212:	2300      	movs	r3, #0
 8003214:	74fb      	strb	r3, [r7, #19]
    int             iRegIndex;

    // проверка пределов, и вгон в разрешенный диапазон,
    // будет отвечать ошибочными данными, но сам дебил кто дает ошибочный запрос
    if (usNRegs ==0) 	{ usNRegs =1; }
 8003216:	893b      	ldrh	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <eMBRegHoldingCB+0x28>
 800321c:	2301      	movs	r3, #1
 800321e:	813b      	strh	r3, [r7, #8]
    if (usNRegs > REG_HOLDING_NREGS)	{ usNRegs =REG_HOLDING_NREGS; }
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d901      	bls.n	800322a <eMBRegHoldingCB+0x32>
 8003226:	2310      	movs	r3, #16
 8003228:	813b      	strh	r3, [r7, #8]
    if (usAddress < REG_HOLDING_START)	{ usAddress = usAddress; }
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	2b00      	cmp	r3, #0
    if ((usAddress + usNRegs) > (REG_HOLDING_START + REG_HOLDING_NREGS)) { usAddress = REG_HOLDING_START - REG_HOLDING_NREGS; }
 800322e:	897a      	ldrh	r2, [r7, #10]
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	4413      	add	r3, r2
 8003234:	2b11      	cmp	r3, #17
 8003236:	dd02      	ble.n	800323e <eMBRegHoldingCB+0x46>
 8003238:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 800323c:	817b      	strh	r3, [r7, #10]

        iRegIndex = ( int )( usAddress - num_reg_CMD_Start );
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	4a38      	ldr	r2, [pc, #224]	; (8003324 <eMBRegHoldingCB+0x12c>)
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	617b      	str	r3, [r7, #20]

            /* Pass current register values to the protocol stack.
             * Передайте текущие значения регистра в стек протоколов.*/
        if (eMode == MB_REG_READ)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11d      	bne.n	800328a <eMBRegHoldingCB+0x92>
        {
             while( usNRegs > 0 )
 800324e:	e019      	b.n	8003284 <eMBRegHoldingCB+0x8c>
            {
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] >> 8 );
 8003250:	4a35      	ldr	r2, [pc, #212]	; (8003328 <eMBRegHoldingCB+0x130>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	b299      	uxth	r1, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	60fa      	str	r2, [r7, #12]
 8003262:	b2ca      	uxtb	r2, r1
 8003264:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] & 0xFF );
 8003266:	4a30      	ldr	r2, [pc, #192]	; (8003328 <eMBRegHoldingCB+0x130>)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	60fa      	str	r2, [r7, #12]
 8003274:	b2ca      	uxtb	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
                usNRegs--;
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	3b01      	subs	r3, #1
 8003282:	813b      	strh	r3, [r7, #8]
             while( usNRegs > 0 )
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e2      	bne.n	8003250 <eMBRegHoldingCB+0x58>
            }
        } // if (eMode == MB_REG_READ)

            /* Update current register values with new values from the  protocol stack.
             * Обновите текущие значения регистра новыми значениями из стека протоколов. */
        if (eMode == MB_REG_WRITE)
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d141      	bne.n	8003314 <eMBRegHoldingCB+0x11c>
        {
            while( usNRegs > 0 )
 8003290:	e01f      	b.n	80032d2 <eMBRegHoldingCB+0xda>
            {
                Reg_CMD_Buf[iRegIndex] = *pucRegBuffer++ << 8;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	b299      	uxth	r1, r3
 80032a0:	4a21      	ldr	r2, [pc, #132]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Reg_CMD_Buf[iRegIndex] |= *pucRegBuffer++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	60fa      	str	r2, [r7, #12]
 80032ae:	7819      	ldrb	r1, [r3, #0]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80032b8:	b28b      	uxth	r3, r1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b299      	uxth	r1, r3
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
                usNRegs--;
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80032d2:	893b      	ldrh	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1dc      	bne.n	8003292 <eMBRegHoldingCB+0x9a>
            }
            cmd_set.cmd_flags	= Reg_CMD_Buf[0];	//	Reg_CMD_Buf[0] - регистр флагов-команд, приходящих для исполнения
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <eMBRegHoldingCB+0x134>)
 80032de:	801a      	strh	r2, [r3, #0]
            cmd_set.proc_pwr	= Reg_CMD_Buf[1];	//	Reg_CMD_Buf[1] - регистр мощности,  2-98% заполнения
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032e2:	885a      	ldrh	r2, [r3, #2]
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <eMBRegHoldingCB+0x134>)
 80032e6:	809a      	strh	r2, [r3, #4]
   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
            cmd_set.freq_start	= Reg_CMD_Buf[2] -42;	// Reg_CMD_Buf[2] - регистр стартовой частоты, 14500-43000
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032ea:	889b      	ldrh	r3, [r3, #4]
 80032ec:	3b2a      	subs	r3, #42	; 0x2a
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <eMBRegHoldingCB+0x134>)
 80032f2:	805a      	strh	r2, [r3, #2]
            cmd_set.step 		= Reg_CMD_Buf[3];	//	Reg_CMD_Buf[3] - регистр step(1-25гц) перемещения частоты, при сканировании диапазона, при сканировании старт будет Reg_CMD_Buf[2], максимум = (Reg_CMD_Buf[2] + step*_N-количество_)
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032f6:	88da      	ldrh	r2, [r3, #6]
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <eMBRegHoldingCB+0x134>)
 80032fa:	80da      	strh	r2, [r3, #6]
            cmd_set.time_step	= Reg_CMD_Buf[4];	//	Reg_CMD_Buf[4] - регистр время милисекунд, между степами (10-1000мс)
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <eMBRegHoldingCB+0x130>)
 80032fe:	891a      	ldrh	r2, [r3, #8]
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <eMBRegHoldingCB+0x134>)
 8003302:	811a      	strh	r2, [r3, #8]
            cmd_set.N_step		= Reg_CMD_Buf[5];	//	Reg_CMD_Buf[5] - регистр N-количество степов при сканировании 4-1000
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <eMBRegHoldingCB+0x130>)
 8003306:	895a      	ldrh	r2, [r3, #10]
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <eMBRegHoldingCB+0x134>)
 800330a:	815a      	strh	r2, [r3, #10]
            Reg_CMD_Buf[6] = Reg_CMD_Buf[5];
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <eMBRegHoldingCB+0x130>)
 800330e:	895a      	ldrh	r2, [r3, #10]
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <eMBRegHoldingCB+0x130>)
 8003312:	819a      	strh	r2, [r3, #12]
        } // if (eMode == MB_REG_WRITE)
    return eStatus;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
}
 8003316:	4618      	mov	r0, r3
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000000 	.word	0x20000000
 8003328:	200005ec 	.word	0x200005ec
 800332c:	20011ebc 	.word	0x20011ebc

08003330 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
	// для контроля окончания передачи пакета на МВ485, используем прерывание от ножки PA11--PA12--DE--MB485
	// никаких разборок с EXTI нету,  там всего одно прерывание включено,
	xMBRTUTransmitFSM();
 800333a:	f00a fc03 	bl	800db44 <xMBRTUTransmitFSM>
	flag_exti_stop_TX_cicles++;
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_GPIO_EXTI_Callback+0x24>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_GPIO_EXTI_Callback+0x24>)
 8003348:	701a      	strb	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000619 	.word	0x20000619

08003358 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10d      	bne.n	8003386 <HAL_TIM_PeriodElapsedCallback+0x2e>
    	{
    		counter_Tim6_MB++;
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003374:	801a      	strh	r2, [r3, #0]
    		if(counter_Tim6_MB >=timeout_Tim6_50us)
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003378:	881a      	ldrh	r2, [r3, #0]
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d301      	bcc.n	8003386 <HAL_TIM_PeriodElapsedCallback+0x2e>
			  { xMBRTUTimerT35Expired();   }
 8003382:	f00a fc05 	bl	800db90 <xMBRTUTimerT35Expired>
    	}
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40001000 	.word	0x40001000
 8003394:	2000060e 	.word	0x2000060e
 8003398:	2000060c 	.word	0x2000060c

0800339c <_write>:


int _write(int file, char *ptr, int len)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e009      	b.n	80033c2 <_write+0x26>
		{ ITM_SendChar(*ptr++); }
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	60ba      	str	r2, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fb46 	bl	8001a48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	3301      	adds	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	dbf1      	blt.n	80033ae <_write+0x12>
	return len;
 80033ca:	687b      	ldr	r3, [r7, #4]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <Mem_to_Mem_Complete>:


static void Mem_to_Mem_Complete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	 // а сколько это мкс? в реале == 41 мкс 1024 WORD передача Mem_to_Mem;
	LL_ADC_REG_StartConversion(hadc1.Instance);  //  - это есть старт АЦП произвольно по желанию, если был остановлен
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <Mem_to_Mem_Complete+0x20>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fb58 	bl	8001a96 <LL_ADC_REG_StartConversion>
	flag_end_FFT =0;
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <Mem_to_Mem_Complete+0x24>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	801a      	strh	r2, [r3, #0]
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200002cc 	.word	0x200002cc
 80033f8:	2000061a 	.word	0x2000061a

080033fc <HAL_ADC_ConvCpltCallback>:
//			 какой то код
// count_tic_finish = DWT_CYCCNT - count_tic_start;//смотрим сколько натикало  - ццикл отсоса массивов данных длится 16мкс
// count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	// LL_ADC_REG_StopConversion (hadc1.Instance);
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8003404:	4905      	ldr	r1, [pc, #20]	; (800341c <HAL_ADC_ConvCpltCallback+0x20>)
 8003406:	4a06      	ldr	r2, [pc, #24]	; (8003420 <HAL_ADC_ConvCpltCallback+0x24>)
 8003408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800340c:	4805      	ldr	r0, [pc, #20]	; (8003424 <HAL_ADC_ConvCpltCallback+0x28>)
 800340e:	f003 f8c5 	bl	800659c <HAL_DMA_Start_IT>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2000062c 	.word	0x2000062c
 8003420:	2000162c 	.word	0x2000162c
 8003424:	2000048c 	.word	0x2000048c

08003428 <HAL_UART_TxCpltCallback>:
//	// status_USBcdc_TX = CDC_Transmit_FS((uint8_t *) HEAP_arr_ADC_zamer, 64);
	return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	// включаем прием LPUART, ждём настроечных данных
//	status_RX_LPuart = HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *) cmd_array_SPI, len_cmd_array_SPI);
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
	return;
 8003430:	bf00      	nop
}
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003442:	b672      	cpsid	i
}
 8003444:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
	uint16_t count_printf;
  __disable_irq();
  while (1)
  {
	  count_printf++;
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	3301      	adds	r3, #1
 800344a:	80fb      	strh	r3, [r7, #6]
	  if (count_printf >1000)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003452:	d9f8      	bls.n	8003446 <Error_Handler+0xa>
	  	  {
		  	printf("MAIN Error_Handler() Error_Handler_Debug\n");
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <Error_Handler+0x24>)
 8003456:	f00c fc7d 	bl	800fd54 <puts>
		  	count_printf =0;
 800345a:	2300      	movs	r3, #0
 800345c:	80fb      	strh	r3, [r7, #6]
	  count_printf++;
 800345e:	e7f2      	b.n	8003446 <Error_Handler+0xa>
 8003460:	08014af4 	.word	0x08014af4

08003464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_MspInit+0x44>)
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_MspInit+0x44>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6613      	str	r3, [r2, #96]	; 0x60
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_MspInit+0x44>)
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_MspInit+0x44>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <HAL_MspInit+0x44>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6593      	str	r3, [r2, #88]	; 0x58
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_MspInit+0x44>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800349a:	f005 fb79 	bl	8008b90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  count_printf++;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <NMI_Handler+0x28>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <NMI_Handler+0x28>)
 80034ba:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <NMI_Handler+0x28>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c4:	d9f4      	bls.n	80034b0 <NMI_Handler+0x4>
	  	  {
		  	printf("NMI Non maskable interrupt\n");
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <NMI_Handler+0x2c>)
 80034c8:	f00c fc44 	bl	800fd54 <puts>
		  	count_printf =0;
 80034cc:	4b01      	ldr	r3, [pc, #4]	; (80034d4 <NMI_Handler+0x28>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80034d2:	e7ed      	b.n	80034b0 <NMI_Handler+0x4>
 80034d4:	20011f28 	.word	0x20011f28
 80034d8:	08014b20 	.word	0x08014b20

080034dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  count_printf++;
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HardFault_Handler+0x28>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HardFault_Handler+0x28>)
 80034ea:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HardFault_Handler+0x28>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034f4:	d9f4      	bls.n	80034e0 <HardFault_Handler+0x4>
	  	  {
		  	printf("Hard fault interrupt\n");
 80034f6:	4804      	ldr	r0, [pc, #16]	; (8003508 <HardFault_Handler+0x2c>)
 80034f8:	f00c fc2c 	bl	800fd54 <puts>
		  	count_printf =0;
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <HardFault_Handler+0x28>)
 80034fe:	2200      	movs	r2, #0
 8003500:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003502:	e7ed      	b.n	80034e0 <HardFault_Handler+0x4>
 8003504:	20011f28 	.word	0x20011f28
 8003508:	08014b3c 	.word	0x08014b3c

0800350c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  count_printf++;
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <MemManage_Handler+0x28>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <MemManage_Handler+0x28>)
 800351a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <MemManage_Handler+0x28>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003524:	d9f4      	bls.n	8003510 <MemManage_Handler+0x4>
	  	  {
		  	printf("Memory management fault\n");
 8003526:	4804      	ldr	r0, [pc, #16]	; (8003538 <MemManage_Handler+0x2c>)
 8003528:	f00c fc14 	bl	800fd54 <puts>
		  	count_printf =0;
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <MemManage_Handler+0x28>)
 800352e:	2200      	movs	r2, #0
 8003530:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003532:	e7ed      	b.n	8003510 <MemManage_Handler+0x4>
 8003534:	20011f28 	.word	0x20011f28
 8003538:	08014b54 	.word	0x08014b54

0800353c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  count_printf++;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <BusFault_Handler+0x28>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <BusFault_Handler+0x28>)
 800354a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <BusFault_Handler+0x28>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003554:	d9f4      	bls.n	8003540 <BusFault_Handler+0x4>
	  	  {
		  	printf("BusFault_Handler\n");
 8003556:	4804      	ldr	r0, [pc, #16]	; (8003568 <BusFault_Handler+0x2c>)
 8003558:	f00c fbfc 	bl	800fd54 <puts>
		  	count_printf =0;
 800355c:	4b01      	ldr	r3, [pc, #4]	; (8003564 <BusFault_Handler+0x28>)
 800355e:	2200      	movs	r2, #0
 8003560:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003562:	e7ed      	b.n	8003540 <BusFault_Handler+0x4>
 8003564:	20011f28 	.word	0x20011f28
 8003568:	08014b6c 	.word	0x08014b6c

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  count_printf++;
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <UsageFault_Handler+0x28>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <UsageFault_Handler+0x28>)
 800357a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <UsageFault_Handler+0x28>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003584:	d9f4      	bls.n	8003570 <UsageFault_Handler+0x4>
	  	  {
		  	printf("UsageFault_Handler\n");
 8003586:	4804      	ldr	r0, [pc, #16]	; (8003598 <UsageFault_Handler+0x2c>)
 8003588:	f00c fbe4 	bl	800fd54 <puts>
		  	count_printf =0;
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <UsageFault_Handler+0x28>)
 800358e:	2200      	movs	r2, #0
 8003590:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003592:	e7ed      	b.n	8003570 <UsageFault_Handler+0x4>
 8003594:	20011f28 	.word	0x20011f28
 8003598:	08014b80 	.word	0x08014b80

0800359c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	printf("SVC_Handler()\n");
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <SVC_Handler+0x10>)
 80035a2:	f00c fbd7 	bl	800fd54 <puts>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	08014b94 	.word	0x08014b94

080035b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler()\n");
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DebugMon_Handler+0x10>)
 80035b6:	f00c fbcd 	bl	800fd54 <puts>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	08014ba4 	.word	0x08014ba4

080035c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	printf("PendSV_Handler()\n");
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <PendSV_Handler+0x10>)
 80035ca:	f00c fbc3 	bl	800fd54 <puts>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08014bb8 	.word	0x08014bb8

080035d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035dc:	f000 ffca 	bl	8004574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <DMA1_Channel1_IRQHandler+0x10>)
 80035ea:	f003 f912 	bl	8006812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200003a4 	.word	0x200003a4

080035f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	xMBRTUTransmitFSM();
 80035fc:	f00a faa2 	bl	800db44 <xMBRTUTransmitFSM>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <DMA1_Channel2_IRQHandler+0x14>)
 8003602:	f003 f906 	bl	8006812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200122c4 	.word	0x200122c4

08003610 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
//	if ((0U != (hdma_usart1_tx.Instance->CCR & DMA_IT_TC)) & (0U == (hdma_usart1_tx.Instance->CCR & DMA_IT_HT)))
//	{
//		xMBRTUTransmitFSM();
//	}
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <DMA1_Channel3_IRQHandler+0x10>)
 8003616:	f003 f8fc 	bl	8006812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20012264 	.word	0x20012264

08003624 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel4);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <DMA1_Channel4_IRQHandler+0x10>)
 800362a:	f003 f8f2 	bl	8006812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000048c 	.word	0x2000048c

08003638 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <USART1_IRQHandler+0x58>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b20      	cmp	r3, #32
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <USART1_IRQHandler+0x58>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <USART1_IRQHandler+0x4a>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <USART1_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 800367e:	f00a f9f7 	bl	800da70 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003682:	4803      	ldr	r0, [pc, #12]	; (8003690 <USART1_IRQHandler+0x58>)
 8003684:	f008 f9ee 	bl	800ba64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20012144 	.word	0x20012144

08003694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <USART2_IRQHandler+0x58>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <USART2_IRQHandler+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <USART2_IRQHandler+0x4a>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <USART2_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 80036da:	f00a f9c9 	bl	800da70 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036de:	4803      	ldr	r0, [pc, #12]	; (80036ec <USART2_IRQHandler+0x58>)
 80036e0:	f008 f9c0 	bl	800ba64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200121d4 	.word	0x200121d4

080036f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80036f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80036f8:	f003 fbee 	bl	8006ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}

08003700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <TIM6_DAC_IRQHandler+0x10>)
 8003706:	f006 fcb7 	bl	800a078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20012014 	.word	0x20012014

08003714 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA2_Channel1_IRQHandler+0x10>)
 800371a:	f003 f87a 	bl	8006812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000404 	.word	0x20000404

08003728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	return 1;
 800372c:	2301      	movs	r3, #1
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <_kill>:

int _kill(int pid, int sig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003742:	f00b fa73 	bl	800ec2c <__errno>
 8003746:	4603      	mov	r3, r0
 8003748:	2216      	movs	r2, #22
 800374a:	601a      	str	r2, [r3, #0]
	return -1;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_exit>:

void _exit (int status)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003760:	f04f 31ff 	mov.w	r1, #4294967295
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ffe7 	bl	8003738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800376a:	e7fe      	b.n	800376a <_exit+0x12>

0800376c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e00a      	b.n	8003794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800377e:	f3af 8000 	nop.w
 8003782:	4601      	mov	r1, r0
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	60ba      	str	r2, [r7, #8]
 800378a:	b2ca      	uxtb	r2, r1
 800378c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	dbf0      	blt.n	800377e <_read+0x12>
	}

return len;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
	return -1;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ce:	605a      	str	r2, [r3, #4]
	return 0;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_isatty>:

int _isatty(int file)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
	return 1;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
	return 0;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <_sbrk+0x5c>)
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <_sbrk+0x60>)
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <_sbrk+0x64>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <_sbrk+0x64>)
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <_sbrk+0x68>)
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <_sbrk+0x64>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d207      	bcs.n	8003850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003840:	f00b f9f4 	bl	800ec2c <__errno>
 8003844:	4603      	mov	r3, r0
 8003846:	220c      	movs	r2, #12
 8003848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	e009      	b.n	8003864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <_sbrk+0x64>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <_sbrk+0x64>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	4a05      	ldr	r2, [pc, #20]	; (8003874 <_sbrk+0x64>)
 8003860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20020000 	.word	0x20020000
 8003870:	00004000 	.word	0x00004000
 8003874:	20011f2c 	.word	0x20011f2c
 8003878:	20013378 	.word	0x20013378

0800387c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <SystemInit+0x20>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <SystemInit+0x20>)
 8003888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800388c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0a0      	sub	sp, #128	; 0x80
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80038a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80038c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	611a      	str	r2, [r3, #16]
 80038de:	615a      	str	r2, [r3, #20]
 80038e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2234      	movs	r2, #52	; 0x34
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f00b f9e9 	bl	800ecc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 80038f0:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <MX_TIM1_Init+0x1d0>)
 80038f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80038f4:	4b5d      	ldr	r3, [pc, #372]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fa:	4b5c      	ldr	r3, [pc, #368]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 127;
 8003900:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 8003902:	227f      	movs	r2, #127	; 0x7f
 8003904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003906:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800390c:	4b57      	ldr	r3, [pc, #348]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 800390e:	2200      	movs	r2, #0
 8003910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003912:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003918:	4854      	ldr	r0, [pc, #336]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 800391a:	f006 f8cb 	bl	8009ab4 <HAL_TIM_Base_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003924:	f7ff fd8a 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003928:	4850      	ldr	r0, [pc, #320]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 800392a:	f006 fa32 	bl	8009d92 <HAL_TIM_PWM_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003934:	f7ff fd82 	bl	800343c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003938:	2307      	movs	r3, #7
 800393a:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 800393c:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <MX_TIM1_Init+0x1d4>)
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003940:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003944:	4619      	mov	r1, r3
 8003946:	4849      	ldr	r0, [pc, #292]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 8003948:	f006 fe51 	bl	800a5ee <HAL_TIM_SlaveConfigSynchro>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8003952:	f7ff fd73 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003956:	2320      	movs	r3, #32
 8003958:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003962:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003966:	4619      	mov	r1, r3
 8003968:	4840      	ldr	r0, [pc, #256]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 800396a:	f007 fcc3 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003974:	f7ff fd62 	bl	800343c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003978:	2301      	movs	r3, #1
 800397a:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800397c:	2301      	movs	r3, #1
 800397e:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003980:	2300      	movs	r3, #0
 8003982:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003984:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003988:	461a      	mov	r2, r3
 800398a:	2101      	movs	r1, #1
 800398c:	4837      	ldr	r0, [pc, #220]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 800398e:	f007 fdf9 	bl	800b584 <HAL_TIMEx_ConfigBreakInput>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003998:	f7ff fd50 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800399c:	2370      	movs	r3, #112	; 0x70
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 80039a0:	2340      	movs	r3, #64	; 0x40
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a4:	2300      	movs	r3, #0
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80039b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039be:	2200      	movs	r2, #0
 80039c0:	4619      	mov	r1, r3
 80039c2:	482a      	ldr	r0, [pc, #168]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 80039c4:	f006 fcd8 	bl	800a378 <HAL_TIM_PWM_ConfigChannel>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80039ce:	f7ff fd35 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM1;
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <MX_TIM1_Init+0x1d8>)
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039da:	2208      	movs	r2, #8
 80039dc:	4619      	mov	r1, r3
 80039de:	4823      	ldr	r0, [pc, #140]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 80039e0:	f006 fcca 	bl	800a378 <HAL_TIM_PWM_ConfigChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80039ea:	f7ff fd27 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM2;
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <MX_TIM1_Init+0x1dc>)
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039f6:	220c      	movs	r2, #12
 80039f8:	4619      	mov	r1, r3
 80039fa:	481c      	ldr	r0, [pc, #112]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 80039fc:	f006 fcbc 	bl	800a378 <HAL_TIM_PWM_ConfigChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8003a06:	f7ff fd19 	bl	800343c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 85;
 8003a1a:	2355      	movs	r3, #85	; 0x55
 8003a1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a40:	2300      	movs	r3, #0
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4807      	ldr	r0, [pc, #28]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 8003a4e:	f007 fce7 	bl	800b420 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 8003a58:	f7ff fcf0 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003a5c:	4803      	ldr	r0, [pc, #12]	; (8003a6c <MX_TIM1_Init+0x1cc>)
 8003a5e:	f000 fa7f 	bl	8003f60 <HAL_TIM_MspPostInit>

}
 8003a62:	bf00      	nop
 8003a64:	3780      	adds	r7, #128	; 0x80
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20011f30 	.word	0x20011f30
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	00100060 	.word	0x00100060
 8003a78:	00010040 	.word	0x00010040
 8003a7c:	00010050 	.word	0x00010050

08003a80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	; 0x40
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	60da      	str	r2, [r3, #12]
 8003a94:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a96:	f107 0320 	add.w	r3, r7, #32
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
 8003ab0:	615a      	str	r2, [r3, #20]
 8003ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003abc:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003ac4:	2260      	movs	r2, #96	; 0x60
 8003ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ada:	4824      	ldr	r0, [pc, #144]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003adc:	f005 ffea 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003ae6:	f7ff fca9 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003aea:	4820      	ldr	r0, [pc, #128]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003aec:	f006 f951 	bl	8009d92 <HAL_TIM_PWM_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003af6:	f7ff fca1 	bl	800343c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003afa:	2307      	movs	r3, #7
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8003afe:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <MX_TIM2_Init+0xf0>)
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	4818      	ldr	r0, [pc, #96]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003b0a:	f006 fd70 	bl	800a5ee <HAL_TIM_SlaveConfigSynchro>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003b14:	f7ff fc92 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8003b18:	2350      	movs	r3, #80	; 0x50
 8003b1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b20:	f107 0320 	add.w	r3, r7, #32
 8003b24:	4619      	mov	r1, r3
 8003b26:	4811      	ldr	r0, [pc, #68]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003b28:	f007 fbe4 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003b32:	f7ff fc83 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b36:	2360      	movs	r3, #96	; 0x60
 8003b38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	2204      	movs	r2, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4807      	ldr	r0, [pc, #28]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003b4e:	f006 fc13 	bl	800a378 <HAL_TIM_PWM_ConfigChannel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003b58:	f7ff fc70 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003b5c:	4803      	ldr	r0, [pc, #12]	; (8003b6c <MX_TIM2_Init+0xec>)
 8003b5e:	f000 f9ff 	bl	8003f60 <HAL_TIM_MspPostInit>

}
 8003b62:	bf00      	nop
 8003b64:	3740      	adds	r7, #64	; 0x40
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20011f7c 	.word	0x20011f7c
 8003b70:	00100060 	.word	0x00100060

08003b74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b090      	sub	sp, #64	; 0x40
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b8a:	f107 0320 	add.w	r3, r7, #32
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
 8003ba4:	615a      	str	r2, [r3, #20]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ba8:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003baa:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <MX_TIM3_Init+0xec>)
 8003bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bae:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bbc:	2205      	movs	r2, #5
 8003bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc6:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bcc:	4823      	ldr	r0, [pc, #140]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bce:	f005 ff71 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003bd8:	f7ff fc30 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bdc:	481f      	ldr	r0, [pc, #124]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bde:	f006 f8d8 	bl	8009d92 <HAL_TIM_PWM_Init>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003be8:	f7ff fc28 	bl	800343c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003bec:	2307      	movs	r3, #7
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4818      	ldr	r0, [pc, #96]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003bfc:	f006 fcf7 	bl	800a5ee <HAL_TIM_SlaveConfigSynchro>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003c06:	f7ff fc19 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c12:	f107 0320 	add.w	r3, r7, #32
 8003c16:	4619      	mov	r1, r3
 8003c18:	4810      	ldr	r0, [pc, #64]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003c1a:	f007 fb6b 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003c24:	f7ff fc0a 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c28:	2360      	movs	r3, #96	; 0x60
 8003c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4807      	ldr	r0, [pc, #28]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003c40:	f006 fb9a 	bl	800a378 <HAL_TIM_PWM_ConfigChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003c4a:	f7ff fbf7 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c4e:	4803      	ldr	r0, [pc, #12]	; (8003c5c <MX_TIM3_Init+0xe8>)
 8003c50:	f000 f986 	bl	8003f60 <HAL_TIM_MspPostInit>

}
 8003c54:	bf00      	nop
 8003c56:	3740      	adds	r7, #64	; 0x40
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20011fc8 	.word	0x20011fc8
 8003c60:	40000400 	.word	0x40000400

08003c64 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <MX_TIM6_Init+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003c7c:	22a9      	movs	r2, #169	; 0xa9
 8003c7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003c88:	2231      	movs	r2, #49	; 0x31
 8003c8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c92:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003c94:	f005 ff0e 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003c9e:	f7ff fbcd 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003caa:	1d3b      	adds	r3, r7, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <MX_TIM6_Init+0x64>)
 8003cb0:	f007 fb20 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003cba:	f7ff fbbf 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20012014 	.word	0x20012014
 8003ccc:	40001000 	.word	0x40001000

08003cd0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003ce2:	4a16      	ldr	r2, [pc, #88]	; (8003d3c <MX_TIM7_Init+0x6c>)
 8003ce4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16999;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003ce8:	f244 2267 	movw	r2, #16999	; 0x4267
 8003cec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003d02:	480d      	ldr	r0, [pc, #52]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003d04:	f005 fed6 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003d0e:	f7ff fb95 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d12:	2320      	movs	r3, #32
 8003d14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4806      	ldr	r0, [pc, #24]	; (8003d38 <MX_TIM7_Init+0x68>)
 8003d20:	f007 fae8 	bl	800b2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003d2a:	f7ff fb87 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20012060 	.word	0x20012060
 8003d3c:	40001400 	.word	0x40001400

08003d40 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d46:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <MX_TIM16_Init+0x48>)
 8003d48:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d4c:	22a9      	movs	r2, #169	; 0xa9
 8003d4e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003d70:	4804      	ldr	r0, [pc, #16]	; (8003d84 <MX_TIM16_Init+0x44>)
 8003d72:	f005 fe9f 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003d7c:	f7ff fb5e 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200120ac 	.word	0x200120ac
 8003d88:	40014400 	.word	0x40014400

08003d8c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003d92:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <MX_TIM17_Init+0x4c>)
 8003d94:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16999;
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003d98:	f244 2267 	movw	r2, #16999	; 0x4267
 8003d9c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003daa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003dc0:	f005 fe78 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8003dca:	f7ff fb37 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200120f8 	.word	0x200120f8
 8003dd8:	40014800 	.word	0x40014800

08003ddc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b090      	sub	sp, #64	; 0x40
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <HAL_TIM_Base_MspInit+0x168>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d12a      	bne.n	8003e54 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dfe:	4b52      	ldr	r3, [pc, #328]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	4a51      	ldr	r2, [pc, #324]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e08:	6613      	str	r3, [r2, #96]	; 0x60
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b4c      	ldr	r3, [pc, #304]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	4a4b      	ldr	r2, [pc, #300]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e22:	4b49      	ldr	r3, [pc, #292]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e34:	2312      	movs	r3, #18
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8003e40:	2309      	movs	r3, #9
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e4e:	f002 fe77 	bl	8006b40 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003e52:	e072      	b.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	4a39      	ldr	r2, [pc, #228]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6a:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
}
 8003e76:	e060      	b.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <HAL_TIM_Base_MspInit+0x170>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10c      	bne.n	8003e9c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	69fb      	ldr	r3, [r7, #28]
}
 8003e9a:	e04e      	b.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM6)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <HAL_TIM_Base_MspInit+0x174>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d114      	bne.n	8003ed0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003eac:	f043 0310 	orr.w	r3, r3, #16
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb2:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	2036      	movs	r0, #54	; 0x36
 8003ec4:	f002 f88f 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ec8:	2036      	movs	r0, #54	; 0x36
 8003eca:	f002 f8a6 	bl	800601a <HAL_NVIC_EnableIRQ>
}
 8003ece:	e034      	b.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM7)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <HAL_TIM_Base_MspInit+0x178>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
}
 8003ef2:	e022      	b.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM16)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_TIM_Base_MspInit+0x17c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10c      	bne.n	8003f18 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	6613      	str	r3, [r2, #96]	; 0x60
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]
}
 8003f16:	e010      	b.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM17)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0f      	ldr	r2, [pc, #60]	; (8003f5c <HAL_TIM_Base_MspInit+0x180>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10b      	bne.n	8003f3a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_TIM_Base_MspInit+0x16c>)
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	bf00      	nop
 8003f3c:	3740      	adds	r7, #64	; 0x40
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40001000 	.word	0x40001000
 8003f54:	40001400 	.word	0x40001400
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08c      	sub	sp, #48	; 0x30
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 031c 	add.w	r3, r7, #28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a59      	ldr	r2, [pc, #356]	; (80040e4 <HAL_TIM_MspPostInit+0x184>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d168      	bne.n	8004054 <HAL_TIM_MspPostInit+0xf4>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f82:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8e:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9a:	4b53      	ldr	r3, [pc, #332]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa6:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PB13     ------> TIM1_CH1N
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4841      	ldr	r0, [pc, #260]	; (80040ec <HAL_TIM_MspPostInit+0x18c>)
 8003fe6:	f002 fdab 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003ffc:	2306      	movs	r3, #6
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	4619      	mov	r1, r3
 8004006:	483a      	ldr	r0, [pc, #232]	; (80040f0 <HAL_TIM_MspPostInit+0x190>)
 8004008:	f002 fd9a 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800400c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800401a:	2301      	movs	r3, #1
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800401e:	2306      	movs	r3, #6
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004022:	f107 031c 	add.w	r3, r7, #28
 8004026:	4619      	mov	r1, r3
 8004028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402c:	f002 fd88 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403e:	2300      	movs	r3, #0
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8004042:	230c      	movs	r3, #12
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004046:	f107 031c 	add.w	r3, r7, #28
 800404a:	4619      	mov	r1, r3
 800404c:	4828      	ldr	r0, [pc, #160]	; (80040f0 <HAL_TIM_MspPostInit+0x190>)
 800404e:	f002 fd77 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004052:	e043      	b.n	80040dc <HAL_TIM_MspPostInit+0x17c>
  else if(timHandle->Instance==TIM2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d11d      	bne.n	800409a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406a:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004076:	2302      	movs	r3, #2
 8004078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	2302      	movs	r3, #2
 800407c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004082:	2300      	movs	r3, #0
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004086:	2301      	movs	r3, #1
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408a:	f107 031c 	add.w	r3, r7, #28
 800408e:	4619      	mov	r1, r3
 8004090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004094:	f002 fd54 	bl	8006b40 <HAL_GPIO_Init>
}
 8004098:	e020      	b.n	80040dc <HAL_TIM_MspPostInit+0x17c>
  else if(timHandle->Instance==TIM3)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_TIM_MspPostInit+0x194>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_MspPostInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_TIM_MspPostInit+0x188>)
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040bc:	2310      	movs	r3, #16
 80040be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040cc:	2302      	movs	r3, #2
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d0:	f107 031c 	add.w	r3, r7, #28
 80040d4:	4619      	mov	r1, r3
 80040d6:	4806      	ldr	r0, [pc, #24]	; (80040f0 <HAL_TIM_MspPostInit+0x190>)
 80040d8:	f002 fd32 	bl	8006b40 <HAL_GPIO_Init>
}
 80040dc:	bf00      	nop
 80040de:	3730      	adds	r7, #48	; 0x30
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40021000 	.word	0x40021000
 80040ec:	48000800 	.word	0x48000800
 80040f0:	48000400 	.word	0x48000400
 80040f4:	40000400 	.word	0x40000400

080040f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040fc:	4b24      	ldr	r3, [pc, #144]	; (8004190 <MX_USART1_UART_Init+0x98>)
 80040fe:	4a25      	ldr	r2, [pc, #148]	; (8004194 <MX_USART1_UART_Init+0x9c>)
 8004100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8004102:	4b23      	ldr	r3, [pc, #140]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004104:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800410a:	4b21      	ldr	r3, [pc, #132]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800411e:	220c      	movs	r2, #12
 8004120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004130:	2200      	movs	r2, #0
 8004132:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004134:	4b16      	ldr	r3, [pc, #88]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004136:	2200      	movs	r2, #0
 8004138:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800413c:	2200      	movs	r2, #0
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004140:	2300      	movs	r3, #0
 8004142:	2200      	movs	r2, #0
 8004144:	2100      	movs	r1, #0
 8004146:	4812      	ldr	r0, [pc, #72]	; (8004190 <MX_USART1_UART_Init+0x98>)
 8004148:	f008 fdf8 	bl	800cd3c <HAL_RS485Ex_Init>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8004152:	f7ff f973 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004156:	2100      	movs	r1, #0
 8004158:	480d      	ldr	r0, [pc, #52]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800415a:	f008 feaf 	bl	800cebc <HAL_UARTEx_SetTxFifoThreshold>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8004164:	f7ff f96a 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004168:	2100      	movs	r1, #0
 800416a:	4809      	ldr	r0, [pc, #36]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800416c:	f008 fee4 	bl	800cf38 <HAL_UARTEx_SetRxFifoThreshold>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8004176:	f7ff f961 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800417a:	4805      	ldr	r0, [pc, #20]	; (8004190 <MX_USART1_UART_Init+0x98>)
 800417c:	f008 fe65 	bl	800ce4a <HAL_UARTEx_DisableFifoMode>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8004186:	f7ff f959 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20012144 	.word	0x20012144
 8004194:	40013800 	.word	0x40013800

08004198 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <MX_USART2_UART_Init+0x90>)
 800419e:	4a23      	ldr	r2, [pc, #140]	; (800422c <MX_USART2_UART_Init+0x94>)
 80041a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041aa:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041be:	220c      	movs	r2, #12
 80041c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041dc:	2200      	movs	r2, #0
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041e0:	4811      	ldr	r0, [pc, #68]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041e2:	f007 fb5c 	bl	800b89e <HAL_UART_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80041ec:	f7ff f926 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041f0:	2100      	movs	r1, #0
 80041f2:	480d      	ldr	r0, [pc, #52]	; (8004228 <MX_USART2_UART_Init+0x90>)
 80041f4:	f008 fe62 	bl	800cebc <HAL_UARTEx_SetTxFifoThreshold>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80041fe:	f7ff f91d 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004202:	2100      	movs	r1, #0
 8004204:	4808      	ldr	r0, [pc, #32]	; (8004228 <MX_USART2_UART_Init+0x90>)
 8004206:	f008 fe97 	bl	800cf38 <HAL_UARTEx_SetRxFifoThreshold>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004210:	f7ff f914 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004214:	4804      	ldr	r0, [pc, #16]	; (8004228 <MX_USART2_UART_Init+0x90>)
 8004216:	f008 fe18 	bl	800ce4a <HAL_UARTEx_DisableFifoMode>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004220:	f7ff f90c 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200121d4 	.word	0x200121d4
 800422c:	40004400 	.word	0x40004400

08004230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0a2      	sub	sp, #136	; 0x88
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004248:	f107 0320 	add.w	r3, r7, #32
 800424c:	2254      	movs	r2, #84	; 0x54
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f00a fd35 	bl	800ecc0 <memset>
  if(uartHandle->Instance==USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a80      	ldr	r2, [pc, #512]	; (800445c <HAL_UART_MspInit+0x22c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	f040 808a 	bne.w	8004376 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004262:	2301      	movs	r3, #1
 8004264:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800426a:	f107 0320 	add.w	r3, r7, #32
 800426e:	4618      	mov	r0, r3
 8004270:	f005 f9d2 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800427a:	f7ff f8df 	bl	800343c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800427e:	4b78      	ldr	r3, [pc, #480]	; (8004460 <HAL_UART_MspInit+0x230>)
 8004280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004282:	4a77      	ldr	r2, [pc, #476]	; (8004460 <HAL_UART_MspInit+0x230>)
 8004284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004288:	6613      	str	r3, [r2, #96]	; 0x60
 800428a:	4b75      	ldr	r3, [pc, #468]	; (8004460 <HAL_UART_MspInit+0x230>)
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004296:	4b72      	ldr	r3, [pc, #456]	; (8004460 <HAL_UART_MspInit+0x230>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	4a71      	ldr	r2, [pc, #452]	; (8004460 <HAL_UART_MspInit+0x230>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a2:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <HAL_UART_MspInit+0x230>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ae:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <HAL_UART_MspInit+0x230>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <HAL_UART_MspInit+0x230>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ba:	4b69      	ldr	r3, [pc, #420]	; (8004460 <HAL_UART_MspInit+0x230>)
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042c6:	2330      	movs	r3, #48	; 0x30
 80042c8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ca:	2302      	movs	r3, #2
 80042cc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042d8:	2307      	movs	r3, #7
 80042da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042e2:	4619      	mov	r1, r3
 80042e4:	485f      	ldr	r0, [pc, #380]	; (8004464 <HAL_UART_MspInit+0x234>)
 80042e6:	f002 fc2b 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80042ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042fe:	2307      	movs	r3, #7
 8004300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004304:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004308:	4619      	mov	r1, r3
 800430a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800430e:	f002 fc17 	bl	8006b40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8004312:	4b55      	ldr	r3, [pc, #340]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004314:	4a55      	ldr	r2, [pc, #340]	; (800446c <HAL_UART_MspInit+0x23c>)
 8004316:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004318:	4b53      	ldr	r3, [pc, #332]	; (8004468 <HAL_UART_MspInit+0x238>)
 800431a:	2219      	movs	r2, #25
 800431c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800431e:	4b52      	ldr	r3, [pc, #328]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004320:	2210      	movs	r2, #16
 8004322:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004324:	4b50      	ldr	r3, [pc, #320]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004326:	2200      	movs	r2, #0
 8004328:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800432a:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <HAL_UART_MspInit+0x238>)
 800432c:	2280      	movs	r2, #128	; 0x80
 800432e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004330:	4b4d      	ldr	r3, [pc, #308]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004332:	2200      	movs	r2, #0
 8004334:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004336:	4b4c      	ldr	r3, [pc, #304]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004338:	2200      	movs	r2, #0
 800433a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800433c:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_UART_MspInit+0x238>)
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004342:	4b49      	ldr	r3, [pc, #292]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004344:	2200      	movs	r2, #0
 8004346:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004348:	4847      	ldr	r0, [pc, #284]	; (8004468 <HAL_UART_MspInit+0x238>)
 800434a:	f002 f87f 	bl	800644c <HAL_DMA_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004354:	f7ff f872 	bl	800343c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a43      	ldr	r2, [pc, #268]	; (8004468 <HAL_UART_MspInit+0x238>)
 800435c:	679a      	str	r2, [r3, #120]	; 0x78
 800435e:	4a42      	ldr	r2, [pc, #264]	; (8004468 <HAL_UART_MspInit+0x238>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2100      	movs	r1, #0
 8004368:	2025      	movs	r0, #37	; 0x25
 800436a:	f001 fe3c 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800436e:	2025      	movs	r0, #37	; 0x25
 8004370:	f001 fe53 	bl	800601a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004374:	e06e      	b.n	8004454 <HAL_UART_MspInit+0x224>
  else if(uartHandle->Instance==USART2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <HAL_UART_MspInit+0x240>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d169      	bne.n	8004454 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004380:	2302      	movs	r3, #2
 8004382:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004388:	f107 0320 	add.w	r3, r7, #32
 800438c:	4618      	mov	r0, r3
 800438e:	f005 f943 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8004398:	f7ff f850 	bl	800343c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800439c:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_UART_MspInit+0x230>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <HAL_UART_MspInit+0x230>)
 80043a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_UART_MspInit+0x230>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_UART_MspInit+0x230>)
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	4a29      	ldr	r2, [pc, #164]	; (8004460 <HAL_UART_MspInit+0x230>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <HAL_UART_MspInit+0x230>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043cc:	230c      	movs	r3, #12
 80043ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	2302      	movs	r3, #2
 80043d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043de:	2307      	movs	r3, #7
 80043e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80043e8:	4619      	mov	r1, r3
 80043ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ee:	f002 fba7 	bl	8006b40 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_UART_MspInit+0x244>)
 80043f4:	4a20      	ldr	r2, [pc, #128]	; (8004478 <HAL_UART_MspInit+0x248>)
 80043f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80043f8:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_UART_MspInit+0x244>)
 80043fa:	221b      	movs	r2, #27
 80043fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_UART_MspInit+0x244>)
 8004400:	2210      	movs	r2, #16
 8004402:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_UART_MspInit+0x244>)
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <HAL_UART_MspInit+0x244>)
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004410:	4b18      	ldr	r3, [pc, #96]	; (8004474 <HAL_UART_MspInit+0x244>)
 8004412:	2200      	movs	r2, #0
 8004414:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004416:	4b17      	ldr	r3, [pc, #92]	; (8004474 <HAL_UART_MspInit+0x244>)
 8004418:	2200      	movs	r2, #0
 800441a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800441c:	4b15      	ldr	r3, [pc, #84]	; (8004474 <HAL_UART_MspInit+0x244>)
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_UART_MspInit+0x244>)
 8004424:	2200      	movs	r2, #0
 8004426:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004428:	4812      	ldr	r0, [pc, #72]	; (8004474 <HAL_UART_MspInit+0x244>)
 800442a:	f002 f80f 	bl	800644c <HAL_DMA_Init>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8004434:	f7ff f802 	bl	800343c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_UART_MspInit+0x244>)
 800443c:	679a      	str	r2, [r3, #120]	; 0x78
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_UART_MspInit+0x244>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004444:	2200      	movs	r2, #0
 8004446:	2100      	movs	r1, #0
 8004448:	2026      	movs	r0, #38	; 0x26
 800444a:	f001 fdcc 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800444e:	2026      	movs	r0, #38	; 0x26
 8004450:	f001 fde3 	bl	800601a <HAL_NVIC_EnableIRQ>
}
 8004454:	bf00      	nop
 8004456:	3788      	adds	r7, #136	; 0x88
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40013800 	.word	0x40013800
 8004460:	40021000 	.word	0x40021000
 8004464:	48000800 	.word	0x48000800
 8004468:	20012264 	.word	0x20012264
 800446c:	40020030 	.word	0x40020030
 8004470:	40004400 	.word	0x40004400
 8004474:	200122c4 	.word	0x200122c4
 8004478:	4002001c 	.word	0x4002001c

0800447c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800447c:	480d      	ldr	r0, [pc, #52]	; (80044b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800447e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004480:	480d      	ldr	r0, [pc, #52]	; (80044b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004482:	490e      	ldr	r1, [pc, #56]	; (80044bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004484:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <LoopForever+0xe>)
  movs r3, #0
 8004486:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004488:	e002      	b.n	8004490 <LoopCopyDataInit>

0800448a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800448a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800448c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800448e:	3304      	adds	r3, #4

08004490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004494:	d3f9      	bcc.n	800448a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004496:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004498:	4c0b      	ldr	r4, [pc, #44]	; (80044c8 <LoopForever+0x16>)
  movs r3, #0
 800449a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800449c:	e001      	b.n	80044a2 <LoopFillZerobss>

0800449e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800449e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a0:	3204      	adds	r2, #4

080044a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044a4:	d3fb      	bcc.n	800449e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044a6:	f7ff f9e9 	bl	800387c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044aa:	f00a fbd7 	bl	800ec5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044ae:	f7fd fb2b 	bl	8001b08 <main>

080044b2 <LoopForever>:

LoopForever:
    b LoopForever
 80044b2:	e7fe      	b.n	80044b2 <LoopForever>
  ldr   r0, =_estack
 80044b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044bc:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 80044c0:	0802aa88 	.word	0x0802aa88
  ldr r2, =_sbss
 80044c4:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80044c8:	20013378 	.word	0x20013378

080044cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044cc:	e7fe      	b.n	80044cc <ADC1_2_IRQHandler>

080044ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044d8:	2003      	movs	r0, #3
 80044da:	f001 fd79 	bl	8005fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044de:	2000      	movs	r0, #0
 80044e0:	f000 f80e 	bl	8004500 <HAL_InitTick>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	71fb      	strb	r3, [r7, #7]
 80044ee:	e001      	b.n	80044f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044f0:	f7fe ffb8 	bl	8003464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044f4:	79fb      	ldrb	r3, [r7, #7]

}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800450c:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_InitTick+0x68>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d022      	beq.n	800455a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_InitTick+0x6c>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <HAL_InitTick+0x68>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004520:	fbb1 f3f3 	udiv	r3, r1, r3
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fd84 	bl	8006036 <HAL_SYSTICK_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d809      	bhi.n	800454e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800453a:	2200      	movs	r2, #0
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	f04f 30ff 	mov.w	r0, #4294967295
 8004542:	f001 fd50 	bl	8005fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_InitTick+0x70>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e007      	b.n	800455e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e004      	b.n	800455e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	e001      	b.n	800455e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000038 	.word	0x20000038
 800456c:	20000030 	.word	0x20000030
 8004570:	20000034 	.word	0x20000034

08004574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_IncTick+0x1c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_IncTick+0x20>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4413      	add	r3, r2
 8004582:	4a03      	ldr	r2, [pc, #12]	; (8004590 <HAL_IncTick+0x1c>)
 8004584:	6013      	str	r3, [r2, #0]
}
 8004586:	bf00      	nop
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	20012324 	.word	0x20012324
 8004594:	20000038 	.word	0x20000038

08004598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return uwTick;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_GetTick+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20012324 	.word	0x20012324

080045b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b8:	f7ff ffee 	bl	8004598 <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d004      	beq.n	80045d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_Delay+0x40>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045d4:	bf00      	nop
 80045d6:	f7ff ffdf 	bl	8004598 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d8f7      	bhi.n	80045d6 <HAL_Delay+0x26>
  {
  }
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000038 	.word	0x20000038

080045f4 <LL_ADC_SetCommonClock>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_ADC_SetCommonPathInternalCh>:
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_ADC_GetCommonPathInternalCh>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_SetOffset>:
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3360      	adds	r3, #96	; 0x60
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <LL_ADC_SetOffset+0x44>)
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	601a      	str	r2, [r3, #0]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	03fff000 	.word	0x03fff000

080046a4 <LL_ADC_GetOffsetChannel>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3360      	adds	r3, #96	; 0x60
 80046b2:	461a      	mov	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_ADC_SetOffsetState>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3360      	adds	r3, #96	; 0x60
 80046e0:	461a      	mov	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_ADC_SetOffsetSign>:
{
 8004706:	b480      	push	{r7}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3360      	adds	r3, #96	; 0x60
 8004716:	461a      	mov	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	431a      	orrs	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	601a      	str	r2, [r3, #0]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_ADC_SetOffsetSaturation>:
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3360      	adds	r3, #96	; 0x60
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	431a      	orrs	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	615a      	str	r2, [r3, #20]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_ADC_REG_SetSequencerRanks>:
{
 80047be:	b480      	push	{r7}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3330      	adds	r3, #48	; 0x30
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	4413      	add	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	211f      	movs	r1, #31
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	401a      	ands	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0e9b      	lsrs	r3, r3, #26
 80047f6:	f003 011f 	and.w	r1, r3, #31
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	431a      	orrs	r2, r3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	601a      	str	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_ADC_SetChannelSamplingTime>:
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3314      	adds	r3, #20
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	0e5b      	lsrs	r3, r3, #25
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	4413      	add	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0d1b      	lsrs	r3, r3, #20
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2107      	movs	r1, #7
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	401a      	ands	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	0d1b      	lsrs	r3, r3, #20
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	431a      	orrs	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	601a      	str	r2, [r3, #0]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_SetChannelSingleDiff>:
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10a      	bne.n	8004896 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004894:	e00a      	b.n	80048ac <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a2:	43db      	mvns	r3, r3
 80048a4:	401a      	ands	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	407f0000 	.word	0x407f0000

080048bc <LL_ADC_DisableDeepPowerDown>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80048cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6093      	str	r3, [r2, #8]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_IsDeepPowerDownEnabled>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f4:	d101      	bne.n	80048fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <LL_ADC_EnableInternalRegulator>:
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800491c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	609a      	str	r2, [r3, #8]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004944:	d101      	bne.n	800494a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_ADC_Enable>:
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_ADC_Disable>:
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004994:	f043 0202 	orr.w	r2, r3, #2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_IsEnabled>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <LL_ADC_IsEnabled+0x18>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <LL_ADC_IsEnabled+0x1a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_ADC_IsDisableOngoing>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d101      	bne.n	80049e6 <LL_ADC_IsDisableOngoing+0x18>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <LL_ADC_IsDisableOngoing+0x1a>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d101      	bne.n	8004a0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d101      	bne.n	8004a32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b089      	sub	sp, #36	; 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e1af      	b.n	8004dba <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc fc1b 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ff2d 	bl	80048e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff13 	bl	80048bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff ff48 	bl	8004930 <LL_ADC_IsInternalRegulatorEnabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d115      	bne.n	8004ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff ff2c 	bl	8004908 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ab0:	4b9f      	ldr	r3, [pc, #636]	; (8004d30 <HAL_ADC_Init+0x2f0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	4a9f      	ldr	r2, [pc, #636]	; (8004d34 <HAL_ADC_Init+0x2f4>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ac4:	e002      	b.n	8004acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f9      	bne.n	8004ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff ff2a 	bl	8004930 <LL_ADC_IsInternalRegulatorEnabled>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10d      	bne.n	8004afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	f043 0210 	orr.w	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af2:	f043 0201 	orr.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff76 	bl	80049f4 <LL_ADC_REG_IsConversionOngoing>
 8004b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 8148 	bne.w	8004da8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 8144 	bne.w	8004da8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b28:	f043 0202 	orr.w	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff37 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d141      	bne.n	8004bc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b48:	d004      	beq.n	8004b54 <HAL_ADC_Init+0x114>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a7a      	ldr	r2, [pc, #488]	; (8004d38 <HAL_ADC_Init+0x2f8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10f      	bne.n	8004b74 <HAL_ADC_Init+0x134>
 8004b54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b58:	f7ff ff26 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4876      	ldr	r0, [pc, #472]	; (8004d38 <HAL_ADC_Init+0x2f8>)
 8004b60:	f7ff ff22 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4323      	orrs	r3, r4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e012      	b.n	8004b9a <HAL_ADC_Init+0x15a>
 8004b74:	4871      	ldr	r0, [pc, #452]	; (8004d3c <HAL_ADC_Init+0x2fc>)
 8004b76:	f7ff ff17 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4870      	ldr	r0, [pc, #448]	; (8004d40 <HAL_ADC_Init+0x300>)
 8004b7e:	f7ff ff13 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b82:	4603      	mov	r3, r0
 8004b84:	431c      	orrs	r4, r3
 8004b86:	486f      	ldr	r0, [pc, #444]	; (8004d44 <HAL_ADC_Init+0x304>)
 8004b88:	f7ff ff0e 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4323      	orrs	r3, r4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ba6:	d004      	beq.n	8004bb2 <HAL_ADC_Init+0x172>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a62      	ldr	r2, [pc, #392]	; (8004d38 <HAL_ADC_Init+0x2f8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_Init+0x176>
 8004bb2:	4a65      	ldr	r2, [pc, #404]	; (8004d48 <HAL_ADC_Init+0x308>)
 8004bb4:	e000      	b.n	8004bb8 <HAL_ADC_Init+0x178>
 8004bb6:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_ADC_Init+0x30c>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7ff fd18 	bl	80045f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7f5b      	ldrb	r3, [r3, #29]
 8004bc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004bce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004bd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004bda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004be2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d106      	bne.n	8004c00 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	045b      	lsls	r3, r3, #17
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <HAL_ADC_Init+0x310>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	69b9      	ldr	r1, [r7, #24]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fed2 	bl	80049f4 <LL_ADC_REG_IsConversionOngoing>
 8004c50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fedf 	bl	8004a1a <LL_ADC_INJ_IsConversionOngoing>
 8004c5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d17f      	bne.n	8004d64 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d17c      	bne.n	8004d64 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c6e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c76:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c86:	f023 0302 	bic.w	r3, r3, #2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	69b9      	ldr	r1, [r7, #24]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d017      	beq.n	8004ccc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004caa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004cb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6911      	ldr	r1, [r2, #16]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004cca:	e013      	b.n	8004cf4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cf0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d12a      	bne.n	8004d54 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d14:	4311      	orrs	r1, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d1a:	4311      	orrs	r1, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d20:	430a      	orrs	r2, r1
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	611a      	str	r2, [r3, #16]
 8004d2e:	e019      	b.n	8004d64 <HAL_ADC_Init+0x324>
 8004d30:	20000030 	.word	0x20000030
 8004d34:	053e2d63 	.word	0x053e2d63
 8004d38:	50000100 	.word	0x50000100
 8004d3c:	50000400 	.word	0x50000400
 8004d40:	50000500 	.word	0x50000500
 8004d44:	50000600 	.word	0x50000600
 8004d48:	50000300 	.word	0x50000300
 8004d4c:	50000700 	.word	0x50000700
 8004d50:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d10c      	bne.n	8004d86 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f023 010f 	bic.w	r1, r3, #15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
 8004d84:	e007      	b.n	8004d96 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 020f 	bic.w	r2, r2, #15
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004da6:	e007      	b.n	8004db8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3724      	adds	r7, #36	; 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
 8004dc2:	bf00      	nop

08004dc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b0b6      	sub	sp, #216	; 0xd8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d102      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x24>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	f000 bc13 	b.w	8005636 <HAL_ADC_ConfigChannel+0x84a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fde9 	bl	80049f4 <LL_ADC_REG_IsConversionOngoing>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 83f3 	bne.w	8005610 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7ff fcc1 	bl	80047be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fdd7 	bl	80049f4 <LL_ADC_REG_IsConversionOngoing>
 8004e46:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fde3 	bl	8004a1a <LL_ADC_INJ_IsConversionOngoing>
 8004e54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 81d9 	bne.w	8005214 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 81d4 	bne.w	8005214 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d10f      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7ff fcc8 	bl	8004816 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fc6f 	bl	8004772 <LL_ADC_SetSamplingTimeCommonConfig>
 8004e94:	e00e      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7ff fcb7 	bl	8004816 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fc5f 	bl	8004772 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d022      	beq.n	8004f1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6919      	ldr	r1, [r3, #16]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ee6:	f7ff fbb9 	bl	800465c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6919      	ldr	r1, [r3, #16]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7ff fc05 	bl	8004706 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6919      	ldr	r1, [r3, #16]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	7f1b      	ldrb	r3, [r3, #28]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d102      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x126>
 8004f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f10:	e000      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x128>
 8004f12:	2300      	movs	r3, #0
 8004f14:	461a      	mov	r2, r3
 8004f16:	f7ff fc11 	bl	800473c <LL_ADC_SetOffsetSaturation>
 8004f1a:	e17b      	b.n	8005214 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fbbe 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x15c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fbb3 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	0e9b      	lsrs	r3, r3, #26
 8004f42:	f003 021f 	and.w	r2, r3, #31
 8004f46:	e01e      	b.n	8004f86 <HAL_ADC_ConfigChannel+0x19a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fba8 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f5e:	fa93 f3a3 	rbit	r3, r3
 8004f62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004f76:	2320      	movs	r3, #32
 8004f78:	e004      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f7e:	fab3 f383 	clz	r3, r3
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x1b2>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	0e9b      	lsrs	r3, r3, #26
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	e018      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x1e4>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004faa:	fa93 f3a3 	rbit	r3, r3
 8004fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	e004      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fca:	fab3 f383 	clz	r3, r3
 8004fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d106      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fb77 	bl	80046d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fb5b 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <HAL_ADC_ConfigChannel+0x222>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fb50 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 8005004:	4603      	mov	r3, r0
 8005006:	0e9b      	lsrs	r3, r3, #26
 8005008:	f003 021f 	and.w	r2, r3, #31
 800500c:	e01e      	b.n	800504c <HAL_ADC_ConfigChannel+0x260>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2101      	movs	r1, #1
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fb45 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 800501a:	4603      	mov	r3, r0
 800501c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800502c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800503c:	2320      	movs	r3, #32
 800503e:	e004      	b.n	800504a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005054:	2b00      	cmp	r3, #0
 8005056:	d105      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x278>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	0e9b      	lsrs	r3, r3, #26
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	e018      	b.n	8005096 <HAL_ADC_ConfigChannel+0x2aa>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800507c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005088:	2320      	movs	r3, #32
 800508a:	e004      	b.n	8005096 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800508c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005096:	429a      	cmp	r2, r3
 8005098:	d106      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	2101      	movs	r1, #1
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fb14 	bl	80046d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff faf8 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x2e8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff faed 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 80050ca:	4603      	mov	r3, r0
 80050cc:	0e9b      	lsrs	r3, r3, #26
 80050ce:	f003 021f 	and.w	r2, r3, #31
 80050d2:	e01e      	b.n	8005112 <HAL_ADC_ConfigChannel+0x326>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2102      	movs	r1, #2
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fae2 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80050f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80050fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005102:	2320      	movs	r3, #32
 8005104:	e004      	b.n	8005110 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <HAL_ADC_ConfigChannel+0x33e>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	0e9b      	lsrs	r3, r3, #26
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	e016      	b.n	8005158 <HAL_ADC_ConfigChannel+0x36c>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800513c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800513e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800514a:	2320      	movs	r3, #32
 800514c:	e004      	b.n	8005158 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800514e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005152:	fab3 f383 	clz	r3, r3
 8005156:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	2102      	movs	r1, #2
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fab3 	bl	80046d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2103      	movs	r1, #3
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fa97 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x3aa>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2103      	movs	r1, #3
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fa8c 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	0e9b      	lsrs	r3, r3, #26
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	e017      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x3da>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2103      	movs	r1, #3
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fa81 	bl	80046a4 <LL_ADC_GetOffsetChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80051ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80051b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80051b8:	2320      	movs	r3, #32
 80051ba:	e003      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80051bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <HAL_ADC_ConfigChannel+0x3f2>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	0e9b      	lsrs	r3, r3, #26
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	e011      	b.n	8005202 <HAL_ADC_ConfigChannel+0x416>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e6:	fa93 f3a3 	rbit	r3, r3
 80051ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80051ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80051f6:	2320      	movs	r3, #32
 80051f8:	e003      	b.n	8005202 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80051fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fc:	fab3 f383 	clz	r3, r3
 8005200:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005202:	429a      	cmp	r2, r3
 8005204:	d106      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	2103      	movs	r1, #3
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fa5e 	bl	80046d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fbc5 	bl	80049a8 <LL_ADC_IsEnabled>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 813d 	bne.w	80054a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	461a      	mov	r2, r3
 8005234:	f7ff fb1a 	bl	800486c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4aa2      	ldr	r2, [pc, #648]	; (80054c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	f040 812e 	bne.w	80054a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <HAL_ADC_ConfigChannel+0x480>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	0e9b      	lsrs	r3, r3, #26
 800525a:	3301      	adds	r3, #1
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2b09      	cmp	r3, #9
 8005262:	bf94      	ite	ls
 8005264:	2301      	movls	r3, #1
 8005266:	2300      	movhi	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e019      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x4b4>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800527a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800527c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800527e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005284:	2320      	movs	r3, #32
 8005286:	e003      	b.n	8005290 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	3301      	adds	r3, #1
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2b09      	cmp	r3, #9
 8005298:	bf94      	ite	ls
 800529a:	2301      	movls	r3, #1
 800529c:	2300      	movhi	r3, #0
 800529e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d079      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x4d4>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	0e9b      	lsrs	r3, r3, #26
 80052b6:	3301      	adds	r3, #1
 80052b8:	069b      	lsls	r3, r3, #26
 80052ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052be:	e015      	b.n	80052ec <HAL_ADC_ConfigChannel+0x500>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80052ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80052d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80052d8:	2320      	movs	r3, #32
 80052da:	e003      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80052dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	069b      	lsls	r3, r3, #26
 80052e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_ADC_ConfigChannel+0x520>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0e9b      	lsrs	r3, r3, #26
 80052fe:	3301      	adds	r3, #1
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	e017      	b.n	800533c <HAL_ADC_ConfigChannel+0x550>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800531a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005324:	2320      	movs	r3, #32
 8005326:	e003      	b.n	8005330 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	fab3 f383 	clz	r3, r3
 800532e:	b2db      	uxtb	r3, r3
 8005330:	3301      	adds	r3, #1
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	ea42 0103 	orr.w	r1, r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x576>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	3301      	adds	r3, #1
 8005354:	f003 021f 	and.w	r2, r3, #31
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	051b      	lsls	r3, r3, #20
 8005360:	e018      	b.n	8005394 <HAL_ADC_ConfigChannel+0x5a8>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	fa93 f3a3 	rbit	r3, r3
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800537a:	2320      	movs	r3, #32
 800537c:	e003      	b.n	8005386 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	3301      	adds	r3, #1
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005394:	430b      	orrs	r3, r1
 8005396:	e07e      	b.n	8005496 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d107      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x5c8>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	0e9b      	lsrs	r3, r3, #26
 80053aa:	3301      	adds	r3, #1
 80053ac:	069b      	lsls	r3, r3, #26
 80053ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053b2:	e015      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x5f4>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80053cc:	2320      	movs	r3, #32
 80053ce:	e003      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	3301      	adds	r3, #1
 80053da:	069b      	lsls	r3, r3, #26
 80053dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x614>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0e9b      	lsrs	r3, r3, #26
 80053f2:	3301      	adds	r3, #1
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	e017      	b.n	8005430 <HAL_ADC_ConfigChannel+0x644>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	fa93 f3a3 	rbit	r3, r3
 800540c:	61fb      	str	r3, [r7, #28]
  return result;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005418:	2320      	movs	r3, #32
 800541a:	e003      	b.n	8005424 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	fab3 f383 	clz	r3, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	3301      	adds	r3, #1
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2101      	movs	r1, #1
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	ea42 0103 	orr.w	r1, r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <HAL_ADC_ConfigChannel+0x670>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0e9b      	lsrs	r3, r3, #26
 8005446:	3301      	adds	r3, #1
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	3b1e      	subs	r3, #30
 8005454:	051b      	lsls	r3, r3, #20
 8005456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800545a:	e01b      	b.n	8005494 <HAL_ADC_ConfigChannel+0x6a8>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	fa93 f3a3 	rbit	r3, r3
 8005468:	613b      	str	r3, [r7, #16]
  return result;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005474:	2320      	movs	r3, #32
 8005476:	e003      	b.n	8005480 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	3301      	adds	r3, #1
 8005482:	f003 021f 	and.w	r2, r3, #31
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	3b1e      	subs	r3, #30
 800548e:	051b      	lsls	r3, r3, #20
 8005490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005494:	430b      	orrs	r3, r1
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	6892      	ldr	r2, [r2, #8]
 800549a:	4619      	mov	r1, r3
 800549c:	f7ff f9bb 	bl	8004816 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_ADC_ConfigChannel+0x6e0>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80be 	beq.w	800562a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b6:	d004      	beq.n	80054c2 <HAL_ADC_ConfigChannel+0x6d6>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10a      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x6ec>
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80054c4:	e009      	b.n	80054da <HAL_ADC_ConfigChannel+0x6ee>
 80054c6:	bf00      	nop
 80054c8:	407f0000 	.word	0x407f0000
 80054cc:	80080000 	.word	0x80080000
 80054d0:	50000100 	.word	0x50000100
 80054d4:	50000300 	.word	0x50000300
 80054d8:	4b59      	ldr	r3, [pc, #356]	; (8005640 <HAL_ADC_ConfigChannel+0x854>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff f8b0 	bl	8004640 <LL_ADC_GetCommonPathInternalCh>
 80054e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a56      	ldr	r2, [pc, #344]	; (8005644 <HAL_ADC_ConfigChannel+0x858>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x70c>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a55      	ldr	r2, [pc, #340]	; (8005648 <HAL_ADC_ConfigChannel+0x85c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d13a      	bne.n	800556e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d134      	bne.n	800556e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800550c:	d005      	beq.n	800551a <HAL_ADC_ConfigChannel+0x72e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4e      	ldr	r2, [pc, #312]	; (800564c <HAL_ADC_ConfigChannel+0x860>)
 8005514:	4293      	cmp	r3, r2
 8005516:	f040 8085 	bne.w	8005624 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005522:	d004      	beq.n	800552e <HAL_ADC_ConfigChannel+0x742>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a49      	ldr	r2, [pc, #292]	; (8005650 <HAL_ADC_ConfigChannel+0x864>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d101      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x746>
 800552e:	4a49      	ldr	r2, [pc, #292]	; (8005654 <HAL_ADC_ConfigChannel+0x868>)
 8005530:	e000      	b.n	8005534 <HAL_ADC_ConfigChannel+0x748>
 8005532:	4a43      	ldr	r2, [pc, #268]	; (8005640 <HAL_ADC_ConfigChannel+0x854>)
 8005534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f7ff f86b 	bl	800461a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005544:	4b44      	ldr	r3, [pc, #272]	; (8005658 <HAL_ADC_ConfigChannel+0x86c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	099b      	lsrs	r3, r3, #6
 800554a:	4a44      	ldr	r2, [pc, #272]	; (800565c <HAL_ADC_ConfigChannel+0x870>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800555e:	e002      	b.n	8005566 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b01      	subs	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f9      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800556c:	e05a      	b.n	8005624 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3b      	ldr	r2, [pc, #236]	; (8005660 <HAL_ADC_ConfigChannel+0x874>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d125      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x7d8>
 8005578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800557c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11f      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a31      	ldr	r2, [pc, #196]	; (8005650 <HAL_ADC_ConfigChannel+0x864>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d104      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x7ac>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a34      	ldr	r2, [pc, #208]	; (8005664 <HAL_ADC_ConfigChannel+0x878>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d047      	beq.n	8005628 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055a0:	d004      	beq.n	80055ac <HAL_ADC_ConfigChannel+0x7c0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <HAL_ADC_ConfigChannel+0x864>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x7c4>
 80055ac:	4a29      	ldr	r2, [pc, #164]	; (8005654 <HAL_ADC_ConfigChannel+0x868>)
 80055ae:	e000      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x7c6>
 80055b0:	4a23      	ldr	r2, [pc, #140]	; (8005640 <HAL_ADC_ConfigChannel+0x854>)
 80055b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7ff f82c 	bl	800461a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c2:	e031      	b.n	8005628 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a27      	ldr	r2, [pc, #156]	; (8005668 <HAL_ADC_ConfigChannel+0x87c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d12d      	bne.n	800562a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d127      	bne.n	800562a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_ADC_ConfigChannel+0x864>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ec:	d004      	beq.n	80055f8 <HAL_ADC_ConfigChannel+0x80c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_ADC_ConfigChannel+0x864>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x810>
 80055f8:	4a16      	ldr	r2, [pc, #88]	; (8005654 <HAL_ADC_ConfigChannel+0x868>)
 80055fa:	e000      	b.n	80055fe <HAL_ADC_ConfigChannel+0x812>
 80055fc:	4a10      	ldr	r2, [pc, #64]	; (8005640 <HAL_ADC_ConfigChannel+0x854>)
 80055fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7ff f806 	bl	800461a <LL_ADC_SetCommonPathInternalCh>
 800560e:	e00c      	b.n	800562a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005622:	e002      	b.n	800562a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005628:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005632:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005636:	4618      	mov	r0, r3
 8005638:	37d8      	adds	r7, #216	; 0xd8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	50000700 	.word	0x50000700
 8005644:	c3210000 	.word	0xc3210000
 8005648:	90c00010 	.word	0x90c00010
 800564c:	50000600 	.word	0x50000600
 8005650:	50000100 	.word	0x50000100
 8005654:	50000300 	.word	0x50000300
 8005658:	20000030 	.word	0x20000030
 800565c:	053e2d63 	.word	0x053e2d63
 8005660:	c7520000 	.word	0xc7520000
 8005664:	50000500 	.word	0x50000500
 8005668:	cb840000 	.word	0xcb840000

0800566c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f995 	bl	80049a8 <LL_ADC_IsEnabled>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d14d      	bne.n	8005720 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	4b28      	ldr	r3, [pc, #160]	; (800572c <ADC_Enable+0xc0>)
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f043 0210 	orr.w	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e039      	b.n	8005722 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f950 	bl	8004958 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056b8:	f7fe ff6e 	bl	8004598 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056be:	e028      	b.n	8005712 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff f96f 	bl	80049a8 <LL_ADC_IsEnabled>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff f93f 	bl	8004958 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056da:	f7fe ff5d 	bl	8004598 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d914      	bls.n	8005712 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d00d      	beq.n	8005712 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	f043 0210 	orr.w	r2, r3, #16
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e007      	b.n	8005722 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d1cf      	bne.n	80056c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	8000003f 	.word	0x8000003f

08005730 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff f946 	bl	80049ce <LL_ADC_IsDisableOngoing>
 8005742:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff f92d 	bl	80049a8 <LL_ADC_IsEnabled>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d047      	beq.n	80057e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d144      	bne.n	80057e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 030d 	and.w	r3, r3, #13
 8005764:	2b01      	cmp	r3, #1
 8005766:	d10c      	bne.n	8005782 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff f907 	bl	8004980 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2203      	movs	r2, #3
 8005778:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800577a:	f7fe ff0d 	bl	8004598 <HAL_GetTick>
 800577e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005780:	e029      	b.n	80057d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005786:	f043 0210 	orr.w	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	f043 0201 	orr.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e023      	b.n	80057e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800579e:	f7fe fefb 	bl	8004598 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d914      	bls.n	80057d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e007      	b.n	80057e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1dc      	bne.n	800579e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005804:	2b00      	cmp	r3, #0
 8005806:	d14b      	bne.n	80058a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d021      	beq.n	8005866 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe ffb6 	bl	8004798 <LL_ADC_REG_IsTriggerSourceSWStart>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d032      	beq.n	8005898 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d12b      	bne.n	8005898 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d11f      	bne.n	8005898 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c
 8005864:	e018      	b.n	8005898 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d111      	bne.n	8005898 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	f043 0201 	orr.w	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7fd fdaf 	bl	80033fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800589e:	e00e      	b.n	80058be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fa93 	bl	8004dd8 <HAL_ADC_ErrorCallback>
}
 80058b2:	e004      	b.n	80058be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fa75 	bl	8004dc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fa65 	bl	8004dd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <LL_ADC_IsEnabled>:
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <LL_ADC_IsEnabled+0x18>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <LL_ADC_IsEnabled+0x1a>
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <LL_ADC_StartCalibration>:
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800594e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005958:	4313      	orrs	r3, r2
 800595a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <LL_ADC_IsCalibrationOnGoing>:
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005982:	d101      	bne.n	8005988 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <LL_ADC_REG_StartConversion>:
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	609a      	str	r2, [r3, #8]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_ADC_REG_IsConversionOngoing>:
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d101      	bne.n	80059d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_ADCEx_Calibration_Start+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e04d      	b.n	8005a9c <HAL_ADCEx_Calibration_Start+0xb8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fe91 	bl	8005730 <ADC_Disable>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d136      	bne.n	8005a86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a20:	f023 0302 	bic.w	r3, r3, #2
 8005a24:	f043 0202 	orr.w	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff ff82 	bl	800593c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a38:	e014      	b.n	8005a64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d90d      	bls.n	8005a64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4c:	f023 0312 	bic.w	r3, r3, #18
 8005a50:	f043 0210 	orr.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e01b      	b.n	8005a9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff80 	bl	800596e <LL_ADC_IsCalibrationOnGoing>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e2      	bne.n	8005a3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	f023 0303 	bic.w	r3, r3, #3
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a84:	e005      	b.n	8005a92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	f043 0210 	orr.w	r2, r3, #16
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	0004de01 	.word	0x0004de01

08005aa8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b0a2      	sub	sp, #136	; 0x88
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff ff80 	bl	80059be <LL_ADC_REG_IsConversionOngoing>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e096      	b.n	8005bf6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e08f      	b.n	8005bf6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aee:	d102      	bne.n	8005af6 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8005af0:	4b43      	ldr	r3, [pc, #268]	; (8005c00 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e009      	b.n	8005b0a <HAL_ADCEx_MultiModeStart_DMA+0x62>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a42      	ldr	r2, [pc, #264]	; (8005c04 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d102      	bne.n	8005b06 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 8005b00:	4b41      	ldr	r3, [pc, #260]	; (8005c08 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e001      	b.n	8005b0a <HAL_ADCEx_MultiModeStart_DMA+0x62>
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10b      	bne.n	8005b28 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e066      	b.n	8005bf6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff fd9f 	bl	800566c <ADC_Enable>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8005b34:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8005b3c:	f107 0314 	add.w	r3, r7, #20
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fd93 	bl	800566c <ADC_Enable>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8005b4c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d14a      	bne.n	8005bea <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8005b84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b8e:	d004      	beq.n	8005b9a <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8005b9c:	e000      	b.n	8005ba0 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8005ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	221c      	movs	r2, #28
 8005baa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0210 	orr.w	r2, r2, #16
 8005bc2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bcc:	330c      	adds	r3, #12
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f000 fce2 	bl	800659c <HAL_DMA_Start_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fed7 	bl	8005996 <LL_ADC_REG_StartConversion>
 8005be8:	e003      	b.n	8005bf2 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005bf2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3788      	adds	r7, #136	; 0x88
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	50000100 	.word	0x50000100
 8005c04:	50000400 	.word	0x50000400
 8005c08:	50000500 	.word	0x50000500
 8005c0c:	080057ef 	.word	0x080057ef
 8005c10:	080058c7 	.word	0x080058c7
 8005c14:	080058e3 	.word	0x080058e3
 8005c18:	50000300 	.word	0x50000300
 8005c1c:	50000700 	.word	0x50000700

08005c20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b0a1      	sub	sp, #132	; 0x84
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e0e7      	b.n	8005e0e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005c46:	2300      	movs	r3, #0
 8005c48:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c56:	d102      	bne.n	8005c5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005c58:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	e009      	b.n	8005c72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6e      	ldr	r2, [pc, #440]	; (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d102      	bne.n	8005c6e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005c68:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	e001      	b.n	8005c72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0be      	b.n	8005e0e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fe93 	bl	80059be <LL_ADC_REG_IsConversionOngoing>
 8005c98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fe8d 	bl	80059be <LL_ADC_REG_IsConversionOngoing>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 80a0 	bne.w	8005dec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 809c 	bne.w	8005dec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cbc:	d004      	beq.n	8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a55      	ldr	r2, [pc, #340]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005cc8:	4b56      	ldr	r3, [pc, #344]	; (8005e24 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005cca:	e000      	b.n	8005cce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005ccc:	4b56      	ldr	r3, [pc, #344]	; (8005e28 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005cce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d04b      	beq.n	8005d70 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6859      	ldr	r1, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cea:	035b      	lsls	r3, r3, #13
 8005cec:	430b      	orrs	r3, r1
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cfc:	d004      	beq.n	8005d08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a45      	ldr	r2, [pc, #276]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d10f      	bne.n	8005d28 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005d08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d0c:	f7ff fe03 	bl	8005916 <LL_ADC_IsEnabled>
 8005d10:	4604      	mov	r4, r0
 8005d12:	4841      	ldr	r0, [pc, #260]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d14:	f7ff fdff 	bl	8005916 <LL_ADC_IsEnabled>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4323      	orrs	r3, r4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e012      	b.n	8005d4e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005d28:	483c      	ldr	r0, [pc, #240]	; (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d2a:	f7ff fdf4 	bl	8005916 <LL_ADC_IsEnabled>
 8005d2e:	4604      	mov	r4, r0
 8005d30:	483b      	ldr	r0, [pc, #236]	; (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d32:	f7ff fdf0 	bl	8005916 <LL_ADC_IsEnabled>
 8005d36:	4603      	mov	r3, r0
 8005d38:	431c      	orrs	r4, r3
 8005d3a:	483c      	ldr	r0, [pc, #240]	; (8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005d3c:	f7ff fdeb 	bl	8005916 <LL_ADC_IsEnabled>
 8005d40:	4603      	mov	r3, r0
 8005d42:	4323      	orrs	r3, r4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d056      	beq.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d5a:	f023 030f 	bic.w	r3, r3, #15
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	6811      	ldr	r1, [r2, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	6892      	ldr	r2, [r2, #8]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d6e:	e047      	b.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d84:	d004      	beq.n	8005d90 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10f      	bne.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d94:	f7ff fdbf 	bl	8005916 <LL_ADC_IsEnabled>
 8005d98:	4604      	mov	r4, r0
 8005d9a:	481f      	ldr	r0, [pc, #124]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d9c:	f7ff fdbb 	bl	8005916 <LL_ADC_IsEnabled>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4323      	orrs	r3, r4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf0c      	ite	eq
 8005da8:	2301      	moveq	r3, #1
 8005daa:	2300      	movne	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e012      	b.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005db0:	481a      	ldr	r0, [pc, #104]	; (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005db2:	f7ff fdb0 	bl	8005916 <LL_ADC_IsEnabled>
 8005db6:	4604      	mov	r4, r0
 8005db8:	4819      	ldr	r0, [pc, #100]	; (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005dba:	f7ff fdac 	bl	8005916 <LL_ADC_IsEnabled>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	431c      	orrs	r4, r3
 8005dc2:	481a      	ldr	r0, [pc, #104]	; (8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005dc4:	f7ff fda7 	bl	8005916 <LL_ADC_IsEnabled>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4323      	orrs	r3, r4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf0c      	ite	eq
 8005dd0:	2301      	moveq	r3, #1
 8005dd2:	2300      	movne	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d012      	beq.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005de8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dea:	e009      	b.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df0:	f043 0220 	orr.w	r2, r3, #32
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005dfe:	e000      	b.n	8005e02 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3784      	adds	r7, #132	; 0x84
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd90      	pop	{r4, r7, pc}
 8005e16:	bf00      	nop
 8005e18:	50000100 	.word	0x50000100
 8005e1c:	50000400 	.word	0x50000400
 8005e20:	50000500 	.word	0x50000500
 8005e24:	50000300 	.word	0x50000300
 8005e28:	50000700 	.word	0x50000700
 8005e2c:	50000600 	.word	0x50000600

08005e30 <__NVIC_SetPriorityGrouping>:
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <__NVIC_SetPriorityGrouping+0x44>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e62:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <__NVIC_SetPriorityGrouping+0x44>)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	60d3      	str	r3, [r2, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	e000ed00 	.word	0xe000ed00

08005e78 <__NVIC_GetPriorityGrouping>:
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <__NVIC_GetPriorityGrouping+0x18>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f003 0307 	and.w	r3, r3, #7
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	e000ed00 	.word	0xe000ed00

08005e94 <__NVIC_EnableIRQ>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	db0b      	blt.n	8005ebe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	f003 021f 	and.w	r2, r3, #31
 8005eac:	4907      	ldr	r1, [pc, #28]	; (8005ecc <__NVIC_EnableIRQ+0x38>)
 8005eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	e000e100 	.word	0xe000e100

08005ed0 <__NVIC_SetPriority>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	db0a      	blt.n	8005efa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	490c      	ldr	r1, [pc, #48]	; (8005f1c <__NVIC_SetPriority+0x4c>)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	0112      	lsls	r2, r2, #4
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ef8:	e00a      	b.n	8005f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	4908      	ldr	r1, [pc, #32]	; (8005f20 <__NVIC_SetPriority+0x50>)
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	3b04      	subs	r3, #4
 8005f08:	0112      	lsls	r2, r2, #4
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	761a      	strb	r2, [r3, #24]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	e000e100 	.word	0xe000e100
 8005f20:	e000ed00 	.word	0xe000ed00

08005f24 <NVIC_EncodePriority>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f1c3 0307 	rsb	r3, r3, #7
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	bf28      	it	cs
 8005f42:	2304      	movcs	r3, #4
 8005f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	2b06      	cmp	r3, #6
 8005f4c:	d902      	bls.n	8005f54 <NVIC_EncodePriority+0x30>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3b03      	subs	r3, #3
 8005f52:	e000      	b.n	8005f56 <NVIC_EncodePriority+0x32>
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43da      	mvns	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	401a      	ands	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	fa01 f303 	lsl.w	r3, r1, r3
 8005f76:	43d9      	mvns	r1, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7c:	4313      	orrs	r3, r2
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3724      	adds	r7, #36	; 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <SysTick_Config>:
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f9c:	d301      	bcc.n	8005fa2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00f      	b.n	8005fc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fa2:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <SysTick_Config+0x40>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005faa:	210f      	movs	r1, #15
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	f7ff ff8e 	bl	8005ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <SysTick_Config+0x40>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <SysTick_Config+0x40>)
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	e000e010 	.word	0xe000e010

08005fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff29 	bl	8005e30 <__NVIC_SetPriorityGrouping>
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	4603      	mov	r3, r0
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ff4:	f7ff ff40 	bl	8005e78 <__NVIC_GetPriorityGrouping>
 8005ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff ff90 	bl	8005f24 <NVIC_EncodePriority>
 8006004:	4602      	mov	r2, r0
 8006006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff ff5f 	bl	8005ed0 <__NVIC_SetPriority>
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	4603      	mov	r3, r0
 8006022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ff33 	bl	8005e94 <__NVIC_EnableIRQ>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ffa4 	bl	8005f8c <SysTick_Config>
 8006044:	4603      	mov	r3, r0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e054      	b.n	800610c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	7f5b      	ldrb	r3, [r3, #29]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d105      	bne.n	8006078 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb fa4a 	bl	800150c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	791b      	ldrb	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10c      	bne.n	80060a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_CRC_Init+0xc4>)
 800608c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0218 	bic.w	r2, r2, #24
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	e00c      	b.n	80060ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6899      	ldr	r1, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f948 	bl	8006340 <HAL_CRCEx_Polynomial_Set>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e028      	b.n	800610c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	795b      	ldrb	r3, [r3, #5]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ca:	611a      	str	r2, [r3, #16]
 80060cc:	e004      	b.n	80060d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6912      	ldr	r2, [r2, #16]
 80060d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	04c11db7 	.word	0x04c11db7

08006118 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2202      	movs	r2, #2
 800612c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0201 	orr.w	r2, r2, #1
 800613c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d006      	beq.n	8006154 <HAL_CRC_Calculate+0x3c>
 8006146:	2b03      	cmp	r3, #3
 8006148:	d829      	bhi.n	800619e <HAL_CRC_Calculate+0x86>
 800614a:	2b01      	cmp	r3, #1
 800614c:	d019      	beq.n	8006182 <HAL_CRC_Calculate+0x6a>
 800614e:	2b02      	cmp	r3, #2
 8006150:	d01e      	beq.n	8006190 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006152:	e024      	b.n	800619e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e00a      	b.n	8006170 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	3301      	adds	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d3f0      	bcc.n	800615a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]
      break;
 8006180:	e00e      	b.n	80061a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f812 	bl	80061b0 <CRC_Handle_8>
 800618c:	6138      	str	r0, [r7, #16]
      break;
 800618e:	e007      	b.n	80061a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f899 	bl	80062cc <CRC_Handle_16>
 800619a:	6138      	str	r0, [r7, #16]
      break;
 800619c:	e000      	b.n	80061a0 <HAL_CRC_Calculate+0x88>
      break;
 800619e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80061a6:	693b      	ldr	r3, [r7, #16]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b089      	sub	sp, #36	; 0x24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e023      	b.n	800620a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	3301      	adds	r3, #1
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	440b      	add	r3, r1
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80061dc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3302      	adds	r3, #2
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	440b      	add	r3, r1
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80061ec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	3303      	adds	r3, #3
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	440b      	add	r3, r1
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006200:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	3301      	adds	r3, #1
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	429a      	cmp	r2, r3
 8006212:	d3d6      	bcc.n	80061c2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d04d      	beq.n	80062ba <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	4413      	add	r3, r2
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d116      	bne.n	8006270 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	4413      	add	r3, r2
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	b21a      	sxth	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	3301      	adds	r3, #1
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	440b      	add	r3, r1
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b21b      	sxth	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	b21b      	sxth	r3, r3
 8006262:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	8b7a      	ldrh	r2, [r7, #26]
 800626e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b03      	cmp	r3, #3
 8006278:	d11f      	bne.n	80062ba <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	b21a      	sxth	r2, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	3301      	adds	r3, #1
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	440b      	add	r3, r1
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b21b      	sxth	r3, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	b21b      	sxth	r3, r3
 800629a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	8b7a      	ldrh	r2, [r7, #26]
 80062a6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	3302      	adds	r3, #2
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3724      	adds	r7, #36	; 0x24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e013      	b.n	8006306 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	041a      	lsls	r2, r3, #16
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	3302      	adds	r3, #2
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	440b      	add	r3, r1
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	4619      	mov	r1, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3301      	adds	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	429a      	cmp	r2, r3
 800630e:	d3e6      	bcc.n	80062de <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	4413      	add	r3, r2
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
}
 8006334:	4618      	mov	r0, r3
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006350:	231f      	movs	r3, #31
 8006352:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006354:	bf00      	nop
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	613a      	str	r2, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <HAL_CRCEx_Polynomial_Set+0x34>
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b18      	cmp	r3, #24
 8006378:	d846      	bhi.n	8006408 <HAL_CRCEx_Polynomial_Set+0xc8>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_CRCEx_Polynomial_Set+0x40>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	0800640f 	.word	0x0800640f
 8006384:	08006409 	.word	0x08006409
 8006388:	08006409 	.word	0x08006409
 800638c:	08006409 	.word	0x08006409
 8006390:	08006409 	.word	0x08006409
 8006394:	08006409 	.word	0x08006409
 8006398:	08006409 	.word	0x08006409
 800639c:	08006409 	.word	0x08006409
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	08006409 	.word	0x08006409
 80063a8:	08006409 	.word	0x08006409
 80063ac:	08006409 	.word	0x08006409
 80063b0:	08006409 	.word	0x08006409
 80063b4:	08006409 	.word	0x08006409
 80063b8:	08006409 	.word	0x08006409
 80063bc:	08006409 	.word	0x08006409
 80063c0:	080063f1 	.word	0x080063f1
 80063c4:	08006409 	.word	0x08006409
 80063c8:	08006409 	.word	0x08006409
 80063cc:	08006409 	.word	0x08006409
 80063d0:	08006409 	.word	0x08006409
 80063d4:	08006409 	.word	0x08006409
 80063d8:	08006409 	.word	0x08006409
 80063dc:	08006409 	.word	0x08006409
 80063e0:	080063e5 	.word	0x080063e5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b06      	cmp	r3, #6
 80063e8:	d913      	bls.n	8006412 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063ee:	e010      	b.n	8006412 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b07      	cmp	r3, #7
 80063f4:	d90f      	bls.n	8006416 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063fa:	e00c      	b.n	8006416 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d90b      	bls.n	800641a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006406:	e008      	b.n	800641a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	75fb      	strb	r3, [r7, #23]
      break;
 800640c:	e006      	b.n	800641c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800641a:	bf00      	nop
  }
  if (status == HAL_OK)
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 0118 	bic.w	r1, r3, #24
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006440:	4618      	mov	r0, r3
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e08d      	b.n	800657a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_DMA_Init+0x138>)
 8006466:	429a      	cmp	r2, r3
 8006468:	d80f      	bhi.n	800648a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	4b45      	ldr	r3, [pc, #276]	; (8006588 <HAL_DMA_Init+0x13c>)
 8006472:	4413      	add	r3, r2
 8006474:	4a45      	ldr	r2, [pc, #276]	; (800658c <HAL_DMA_Init+0x140>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	009a      	lsls	r2, r3, #2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a42      	ldr	r2, [pc, #264]	; (8006590 <HAL_DMA_Init+0x144>)
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
 8006488:	e00e      	b.n	80064a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	4b40      	ldr	r3, [pc, #256]	; (8006594 <HAL_DMA_Init+0x148>)
 8006492:	4413      	add	r3, r2
 8006494:	4a3d      	ldr	r2, [pc, #244]	; (800658c <HAL_DMA_Init+0x140>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	091b      	lsrs	r3, r3, #4
 800649c:	009a      	lsls	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a3c      	ldr	r2, [pc, #240]	; (8006598 <HAL_DMA_Init+0x14c>)
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80064cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fabe 	bl	8006a7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006508:	d102      	bne.n	8006510 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006524:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d010      	beq.n	8006550 <HAL_DMA_Init+0x104>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d80c      	bhi.n	8006550 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fade 	bl	8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	e008      	b.n	8006562 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40020407 	.word	0x40020407
 8006588:	bffdfff8 	.word	0xbffdfff8
 800658c:	cccccccd 	.word	0xcccccccd
 8006590:	40020000 	.word	0x40020000
 8006594:	bffdfbf8 	.word	0xbffdfbf8
 8006598:	40020400 	.word	0x40020400

0800659c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_DMA_Start_IT+0x20>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e066      	b.n	800668a <HAL_DMA_Start_IT+0xee>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d155      	bne.n	800667c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fa03 	bl	8006a00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 020e 	orr.w	r2, r2, #14
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e00f      	b.n	8006634 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 020a 	orr.w	r2, r2, #10
 8006632:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006650:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006668:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e005      	b.n	8006688 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006684:	2302      	movs	r3, #2
 8006686:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006688:	7dfb      	ldrb	r3, [r7, #23]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d005      	beq.n	80066b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	e037      	b.n	8006726 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 020e 	bic.w	r2, r2, #14
 80066c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f003 021f 	and.w	r2, r3, #31
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	2101      	movs	r1, #1
 80066f4:	fa01 f202 	lsl.w	r2, r1, r2
 80066f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006702:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00c      	beq.n	8006726 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006724:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d00d      	beq.n	8006778 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2204      	movs	r2, #4
 8006760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	73fb      	strb	r3, [r7, #15]
 8006776:	e047      	b.n	8006808 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 020e 	bic.w	r2, r2, #14
 8006786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ac:	f003 021f 	and.w	r2, r3, #31
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	2101      	movs	r1, #1
 80067b6:	fa01 f202 	lsl.w	r2, r1, r2
 80067ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80067e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
    }
  }
  return status;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2204      	movs	r2, #4
 8006834:	409a      	lsls	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d026      	beq.n	800688c <HAL_DMA_IRQHandler+0x7a>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d021      	beq.n	800688c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0204 	bic.w	r2, r2, #4
 8006864:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	f003 021f 	and.w	r2, r3, #31
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2104      	movs	r1, #4
 8006874:	fa01 f202 	lsl.w	r2, r1, r2
 8006878:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	2b00      	cmp	r3, #0
 8006880:	d071      	beq.n	8006966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800688a:	e06c      	b.n	8006966 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2202      	movs	r2, #2
 8006896:	409a      	lsls	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02e      	beq.n	80068fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d029      	beq.n	80068fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 020a 	bic.w	r2, r2, #10
 80068c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	f003 021f 	and.w	r2, r3, #31
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	2102      	movs	r1, #2
 80068de:	fa01 f202 	lsl.w	r2, r1, r2
 80068e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d038      	beq.n	8006966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068fc:	e033      	b.n	8006966 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2208      	movs	r2, #8
 8006908:	409a      	lsls	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02a      	beq.n	8006968 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d025      	beq.n	8006968 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 020e 	bic.w	r2, r2, #14
 800692a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	f003 021f 	and.w	r2, r3, #31
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	2101      	movs	r1, #1
 800693a:	fa01 f202 	lsl.w	r2, r1, r2
 800693e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006966:	bf00      	nop
 8006968:	bf00      	nop
}
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	460b      	mov	r3, r1
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_DMA_RegisterCallback+0x20>
 800698c:	2302      	movs	r3, #2
 800698e:	e031      	b.n	80069f4 <HAL_DMA_RegisterCallback+0x84>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d120      	bne.n	80069e6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d81a      	bhi.n	80069e0 <HAL_DMA_RegisterCallback+0x70>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_DMA_RegisterCallback+0x40>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069c9 	.word	0x080069c9
 80069b8:	080069d1 	.word	0x080069d1
 80069bc:	080069d9 	.word	0x080069d9
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80069c6:	e010      	b.n	80069ea <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80069ce:	e00c      	b.n	80069ea <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80069d6:	e008      	b.n	80069ea <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80069de:	e004      	b.n	80069ea <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	75fb      	strb	r3, [r7, #23]
        break;
 80069e4:	e001      	b.n	80069ea <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f003 021f 	and.w	r2, r3, #31
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2101      	movs	r1, #1
 8006a38:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d108      	bne.n	8006a60 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a5e:	e007      	b.n	8006a70 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b16      	ldr	r3, [pc, #88]	; (8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d802      	bhi.n	8006a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006a90:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e001      	b.n	8006a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006a96:	4b15      	ldr	r3, [pc, #84]	; (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006a98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	3b08      	subs	r3, #8
 8006aa6:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aac:	091b      	lsrs	r3, r3, #4
 8006aae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab4:	089b      	lsrs	r3, r3, #2
 8006ab6:	009a      	lsls	r2, r3, #2
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2201      	movs	r2, #1
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40020407 	.word	0x40020407
 8006ae8:	40020800 	.word	0x40020800
 8006aec:	40020820 	.word	0x40020820
 8006af0:	cccccccd 	.word	0xcccccccd
 8006af4:	40020880 	.word	0x40020880

08006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b1a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2201      	movs	r2, #1
 8006b26:	409a      	lsls	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	1000823f 	.word	0x1000823f
 8006b3c:	40020940 	.word	0x40020940

08006b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b4e:	e15a      	b.n	8006e06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	2101      	movs	r1, #1
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 814c 	beq.w	8006e00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d005      	beq.n	8006b80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d130      	bne.n	8006be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4013      	ands	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0201 	and.w	r2, r3, #1
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d017      	beq.n	8006c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4013      	ands	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d123      	bne.n	8006c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	08da      	lsrs	r2, r3, #3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3208      	adds	r2, #8
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	220f      	movs	r2, #15
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	43db      	mvns	r3, r3
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	08da      	lsrs	r2, r3, #3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3208      	adds	r2, #8
 8006c6c:	6939      	ldr	r1, [r7, #16]
 8006c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4013      	ands	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f003 0203 	and.w	r2, r3, #3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80a6 	beq.w	8006e00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb4:	4b5b      	ldr	r3, [pc, #364]	; (8006e24 <HAL_GPIO_Init+0x2e4>)
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb8:	4a5a      	ldr	r2, [pc, #360]	; (8006e24 <HAL_GPIO_Init+0x2e4>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8006cc0:	4b58      	ldr	r3, [pc, #352]	; (8006e24 <HAL_GPIO_Init+0x2e4>)
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ccc:	4a56      	ldr	r2, [pc, #344]	; (8006e28 <HAL_GPIO_Init+0x2e8>)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	220f      	movs	r2, #15
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4013      	ands	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cf6:	d01f      	beq.n	8006d38 <HAL_GPIO_Init+0x1f8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a4c      	ldr	r2, [pc, #304]	; (8006e2c <HAL_GPIO_Init+0x2ec>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d019      	beq.n	8006d34 <HAL_GPIO_Init+0x1f4>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a4b      	ldr	r2, [pc, #300]	; (8006e30 <HAL_GPIO_Init+0x2f0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <HAL_GPIO_Init+0x1f0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <HAL_GPIO_Init+0x2f4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00d      	beq.n	8006d2c <HAL_GPIO_Init+0x1ec>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a49      	ldr	r2, [pc, #292]	; (8006e38 <HAL_GPIO_Init+0x2f8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <HAL_GPIO_Init+0x1e8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a48      	ldr	r2, [pc, #288]	; (8006e3c <HAL_GPIO_Init+0x2fc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d101      	bne.n	8006d24 <HAL_GPIO_Init+0x1e4>
 8006d20:	2305      	movs	r3, #5
 8006d22:	e00a      	b.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d24:	2306      	movs	r3, #6
 8006d26:	e008      	b.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	e006      	b.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e004      	b.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e002      	b.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	f002 0203 	and.w	r2, r2, #3
 8006d40:	0092      	lsls	r2, r2, #2
 8006d42:	4093      	lsls	r3, r2
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d4a:	4937      	ldr	r1, [pc, #220]	; (8006e28 <HAL_GPIO_Init+0x2e8>)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	089b      	lsrs	r3, r3, #2
 8006d50:	3302      	adds	r3, #2
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d58:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4013      	ands	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d7c:	4a30      	ldr	r2, [pc, #192]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d82:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	43db      	mvns	r3, r3
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006da6:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006dac:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4013      	ands	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	43db      	mvns	r3, r3
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4013      	ands	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006dfa:	4a11      	ldr	r2, [pc, #68]	; (8006e40 <HAL_GPIO_Init+0x300>)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3301      	adds	r3, #1
 8006e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f ae9d 	bne.w	8006b50 <HAL_GPIO_Init+0x10>
  }
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	40021000 	.word	0x40021000
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	48000400 	.word	0x48000400
 8006e30:	48000800 	.word	0x48000800
 8006e34:	48000c00 	.word	0x48000c00
 8006e38:	48001000 	.word	0x48001000
 8006e3c:	48001400 	.word	0x48001400
 8006e40:	40010400 	.word	0x40010400

08006e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	e001      	b.n	8006e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
 8006e80:	4613      	mov	r3, r2
 8006e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e84:	787b      	ldrb	r3, [r7, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e90:	e002      	b.n	8006e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e92:	887a      	ldrh	r2, [r7, #2]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eb6:	887a      	ldrh	r2, [r7, #2]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	041a      	lsls	r2, r3, #16
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	43d9      	mvns	r1, r3
 8006ec2:	887b      	ldrh	r3, [r7, #2]
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	619a      	str	r2, [r3, #24]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d006      	beq.n	8006efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eee:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fc fa1a 	bl	8003330 <HAL_GPIO_EXTI_Callback>
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40010400 	.word	0x40010400

08006f08 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e0be      	b.n	8007098 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d02e      	beq.n	8006fc4 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a4d      	ldr	r2, [pc, #308]	; (80070a0 <HAL_HRTIM_Init+0x198>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10b      	bne.n	8006f88 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006f70:	4b4c      	ldr	r3, [pc, #304]	; (80070a4 <HAL_HRTIM_Init+0x19c>)
 8006f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f74:	4a4b      	ldr	r2, [pc, #300]	; (80070a4 <HAL_HRTIM_Init+0x19c>)
 8006f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8006f7c:	4b49      	ldr	r3, [pc, #292]	; (80070a4 <HAL_HRTIM_Init+0x19c>)
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006f96:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fac:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fa fce7 	bl	8001998 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d012      	beq.n	8006ffc <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800700c:	2300      	movs	r3, #0
 800700e:	75fb      	strb	r3, [r7, #23]
 8007010:	e03e      	b.n	8007090 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007012:	7dfa      	ldrb	r2, [r7, #23]
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3318      	adds	r3, #24
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007026:	7dfa      	ldrb	r2, [r7, #23]
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	331c      	adds	r3, #28
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800703a:	7dfa      	ldrb	r2, [r7, #23]
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	3320      	adds	r3, #32
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800704e:	7dfa      	ldrb	r2, [r7, #23]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	3324      	adds	r3, #36	; 0x24
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007062:	7dfa      	ldrb	r2, [r7, #23]
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	3328      	adds	r3, #40	; 0x28
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007076:	7dfa      	ldrb	r2, [r7, #23]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3330      	adds	r3, #48	; 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	2b06      	cmp	r3, #6
 8007094:	d9bd      	bls.n	8007012 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40016800 	.word	0x40016800
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80070bc:	2302      	movs	r3, #2
 80070be:	e045      	b.n	800714c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d114      	bne.n	8007102 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0202 	bic.w	r2, r2, #2
 80070e8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0201 	orr.w	r2, r2, #1
 80070fc:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8007100:	e01f      	b.n	8007142 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0202 	orr.w	r2, r2, #2
 8007112:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800711e:	f023 010c 	bic.w	r1, r3, #12
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8007162:	f7fd fa19 	bl	8004598 <HAL_GetTick>
 8007166:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007168:	e014      	b.n	8007194 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d010      	beq.n	8007194 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8007172:	f7fd fa11 	bl	8004598 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d302      	bcc.n	8007188 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2207      	movs	r2, #7
 800718c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e011      	b.n	80071b8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800719c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a4:	d1e1      	bne.n	800716a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d101      	bne.n	80071dc <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
 80071da:	e015      	b.n	8007208 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	d104      	bne.n	80071f4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 ff03 	bl	8007ff8 <HRTIM_MasterBase_Config>
 80071f2:	e004      	b.n	80071fe <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 ff2c 	bl	8008056 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_HRTIM_SimpleBaseStart+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e01b      	b.n	8007260 <HAL_HRTIM_SimpleBaseStart+0x50>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6819      	ldr	r1, [r3, #0]
 800723e:	4a0b      	ldr	r2, [pc, #44]	; (800726c <HAL_HRTIM_SimpleBaseStart+0x5c>)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	2000003c 	.word	0x2000003c

08007270 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d101      	bne.n	800728c <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
 800728a:	e01c      	b.n	80072c6 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_HRTIM_EventConfig+0x2a>
 8007296:	2302      	movs	r3, #2
 8007298:	e015      	b.n	80072c6 <HAL_HRTIM_EventConfig+0x56>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f001 f934 	bl	800851c <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d101      	bne.n	80072e8 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
 80072e6:	e025      	b.n	8007334 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_HRTIM_EventPrescalerConfig+0x28>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e01e      	b.n	8007334 <HAL_HRTIM_EventPrescalerConfig+0x66>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800730e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8007340:	b480      	push	{r7}
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d101      	bne.n	800735c <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8007358:	2302      	movs	r3, #2
 800735a:	e1aa      	b.n	80076b2 <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_HRTIM_FaultConfig+0x2a>
 8007366:	2302      	movs	r3, #2
 8007368:	e1a3      	b.n	80076b2 <HAL_HRTIM_FaultConfig+0x372>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007382:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800738c:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	613b      	str	r3, [r7, #16]

  switch (Fault)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b1f      	cmp	r3, #31
 80073aa:	f200 813f 	bhi.w	800762c <HAL_HRTIM_FaultConfig+0x2ec>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_HRTIM_FaultConfig+0x74>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	08007435 	.word	0x08007435
 80073b8:	08007485 	.word	0x08007485
 80073bc:	0800762d 	.word	0x0800762d
 80073c0:	080074db 	.word	0x080074db
 80073c4:	0800762d 	.word	0x0800762d
 80073c8:	0800762d 	.word	0x0800762d
 80073cc:	0800762d 	.word	0x0800762d
 80073d0:	08007531 	.word	0x08007531
 80073d4:	0800762d 	.word	0x0800762d
 80073d8:	0800762d 	.word	0x0800762d
 80073dc:	0800762d 	.word	0x0800762d
 80073e0:	0800762d 	.word	0x0800762d
 80073e4:	0800762d 	.word	0x0800762d
 80073e8:	0800762d 	.word	0x0800762d
 80073ec:	0800762d 	.word	0x0800762d
 80073f0:	08007587 	.word	0x08007587
 80073f4:	0800762d 	.word	0x0800762d
 80073f8:	0800762d 	.word	0x0800762d
 80073fc:	0800762d 	.word	0x0800762d
 8007400:	0800762d 	.word	0x0800762d
 8007404:	0800762d 	.word	0x0800762d
 8007408:	0800762d 	.word	0x0800762d
 800740c:	0800762d 	.word	0x0800762d
 8007410:	0800762d 	.word	0x0800762d
 8007414:	0800762d 	.word	0x0800762d
 8007418:	0800762d 	.word	0x0800762d
 800741c:	0800762d 	.word	0x0800762d
 8007420:	0800762d 	.word	0x0800762d
 8007424:	0800762d 	.word	0x0800762d
 8007428:	0800762d 	.word	0x0800762d
 800742c:	0800762d 	.word	0x0800762d
 8007430:	080075d7 	.word	0x080075d7
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800743a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	4313      	orrs	r3, r2
 8007448:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	4313      	orrs	r3, r2
 8007452:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800745a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	4313      	orrs	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	4313      	orrs	r3, r2
 8007472:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	4313      	orrs	r3, r2
 8007480:	61fb      	str	r3, [r7, #28]
      break;
 8007482:	e0dc      	b.n	800763e <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 800748a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	4313      	orrs	r3, r2
 800749a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	029b      	lsls	r3, r3, #10
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074ac:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	045b      	lsls	r3, r3, #17
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	61fb      	str	r3, [r7, #28]
      break;
 80074d8:	e0b1      	b.n	800763e <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 80074e0:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	049b      	lsls	r3, r3, #18
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007502:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	049b      	lsls	r3, r3, #18
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	4313      	orrs	r3, r2
 800751c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	4313      	orrs	r3, r2
 800752c:	61fb      	str	r3, [r7, #28]
      break;
 800752e:	e086      	b.n	800763e <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007536:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	061b      	lsls	r3, r3, #24
 800753e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	4313      	orrs	r3, r2
 8007546:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	069b      	lsls	r3, r3, #26
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	4313      	orrs	r3, r2
 8007550:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007558:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	04db      	lsls	r3, r3, #19
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4313      	orrs	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	4313      	orrs	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	061b      	lsls	r3, r3, #24
 800757a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	4313      	orrs	r3, r2
 8007582:	61fb      	str	r3, [r7, #28]
      break;
 8007584:	e05b      	b.n	800763e <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800758c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075ac:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	051b      	lsls	r3, r3, #20
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
      break;
 80075d4:	e033      	b.n	800763e <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80075dc:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	029b      	lsls	r3, r3, #10
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075fe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	055b      	lsls	r3, r3, #21
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4313      	orrs	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	4313      	orrs	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	4313      	orrs	r3, r2
 8007628:	61bb      	str	r3, [r7, #24]
      break;
 800762a:	e008      	b.n	800763e <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2207      	movs	r2, #7
 8007630:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 800763c:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b07      	cmp	r3, #7
 8007648:	d101      	bne.n	800764e <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e031      	b.n	80076b2 <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007658:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800766a:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	f248 0380 	movw	r3, #32896	; 0x8080
 8007694:	4013      	ands	r3, r2
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	430b      	orrs	r3, r1
 800769c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3724      	adds	r7, #36	; 0x24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d101      	bne.n	80076da <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80076d6:	2302      	movs	r3, #2
 80076d8:	e025      	b.n	8007726 <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e01e      	b.n	8007726 <HAL_HRTIM_FaultPrescalerConfig+0x66>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007700:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d101      	bne.n	8007750 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 800774c:	2302      	movs	r3, #2
 800774e:	e0d7      	b.n	8007900 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 800775a:	2302      	movs	r3, #2
 800775c:	e0d0      	b.n	8007900 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2202      	movs	r2, #2
 800776a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3b01      	subs	r3, #1
 8007772:	2b1f      	cmp	r3, #31
 8007774:	f200 80aa 	bhi.w	80078cc <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8007778:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	08007801 	.word	0x08007801
 8007784:	08007823 	.word	0x08007823
 8007788:	080078cd 	.word	0x080078cd
 800778c:	08007845 	.word	0x08007845
 8007790:	080078cd 	.word	0x080078cd
 8007794:	080078cd 	.word	0x080078cd
 8007798:	080078cd 	.word	0x080078cd
 800779c:	08007867 	.word	0x08007867
 80077a0:	080078cd 	.word	0x080078cd
 80077a4:	080078cd 	.word	0x080078cd
 80077a8:	080078cd 	.word	0x080078cd
 80077ac:	080078cd 	.word	0x080078cd
 80077b0:	080078cd 	.word	0x080078cd
 80077b4:	080078cd 	.word	0x080078cd
 80077b8:	080078cd 	.word	0x080078cd
 80077bc:	08007889 	.word	0x08007889
 80077c0:	080078cd 	.word	0x080078cd
 80077c4:	080078cd 	.word	0x080078cd
 80077c8:	080078cd 	.word	0x080078cd
 80077cc:	080078cd 	.word	0x080078cd
 80077d0:	080078cd 	.word	0x080078cd
 80077d4:	080078cd 	.word	0x080078cd
 80077d8:	080078cd 	.word	0x080078cd
 80077dc:	080078cd 	.word	0x080078cd
 80077e0:	080078cd 	.word	0x080078cd
 80077e4:	080078cd 	.word	0x080078cd
 80077e8:	080078cd 	.word	0x080078cd
 80077ec:	080078cd 	.word	0x080078cd
 80077f0:	080078cd 	.word	0x080078cd
 80077f4:	080078cd 	.word	0x080078cd
 80077f8:	080078cd 	.word	0x080078cd
 80077fc:	080078ab 	.word	0x080078ab
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007808:	f023 0203 	bic.w	r2, r3, #3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	431a      	orrs	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f042 0201 	orr.w	r2, r2, #1
 800781c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8007820:	e05d      	b.n	80078de <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800782a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	025b      	lsls	r3, r3, #9
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8007842:	e04c      	b.n	80078de <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800784c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	045b      	lsls	r3, r3, #17
 8007856:	431a      	orrs	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007860:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8007864:	e03b      	b.n	80078de <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800786e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	065b      	lsls	r3, r3, #25
 8007878:	431a      	orrs	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007882:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8007886:	e02a      	b.n	80078de <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007890:	f023 0203 	bic.w	r2, r3, #3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	431a      	orrs	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0201 	orr.w	r2, r2, #1
 80078a4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 80078a8:	e019      	b.n	80078de <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80078b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	025b      	lsls	r3, r3, #9
 80078bc:	431a      	orrs	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 80078ca:	e008      	b.n	80078de <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2207      	movs	r2, #7
 80078d0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80078dc:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b07      	cmp	r3, #7
 80078e8:	d101      	bne.n	80078ee <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e008      	b.n	8007900 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d101      	bne.n	8007928 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 8007924:	2302      	movs	r3, #2
 8007926:	e0e3      	b.n	8007af0 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_HRTIM_FaultCounterConfig+0x2a>
 8007932:	2302      	movs	r3, #2
 8007934:	e0dc      	b.n	8007af0 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2202      	movs	r2, #2
 8007942:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3b01      	subs	r3, #1
 800794a:	2b1f      	cmp	r3, #31
 800794c:	f200 80b6 	bhi.w	8007abc <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	080079d9 	.word	0x080079d9
 800795c:	080079ff 	.word	0x080079ff
 8007960:	08007abd 	.word	0x08007abd
 8007964:	08007a25 	.word	0x08007a25
 8007968:	08007abd 	.word	0x08007abd
 800796c:	08007abd 	.word	0x08007abd
 8007970:	08007abd 	.word	0x08007abd
 8007974:	08007a4b 	.word	0x08007a4b
 8007978:	08007abd 	.word	0x08007abd
 800797c:	08007abd 	.word	0x08007abd
 8007980:	08007abd 	.word	0x08007abd
 8007984:	08007abd 	.word	0x08007abd
 8007988:	08007abd 	.word	0x08007abd
 800798c:	08007abd 	.word	0x08007abd
 8007990:	08007abd 	.word	0x08007abd
 8007994:	08007a71 	.word	0x08007a71
 8007998:	08007abd 	.word	0x08007abd
 800799c:	08007abd 	.word	0x08007abd
 80079a0:	08007abd 	.word	0x08007abd
 80079a4:	08007abd 	.word	0x08007abd
 80079a8:	08007abd 	.word	0x08007abd
 80079ac:	08007abd 	.word	0x08007abd
 80079b0:	08007abd 	.word	0x08007abd
 80079b4:	08007abd 	.word	0x08007abd
 80079b8:	08007abd 	.word	0x08007abd
 80079bc:	08007abd 	.word	0x08007abd
 80079c0:	08007abd 	.word	0x08007abd
 80079c4:	08007abd 	.word	0x08007abd
 80079c8:	08007abd 	.word	0x08007abd
 80079cc:	08007abd 	.word	0x08007abd
 80079d0:	08007abd 	.word	0x08007abd
 80079d4:	08007a97 	.word	0x08007a97
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80079e0:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	009a      	lsls	r2, r3, #2
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	01db      	lsls	r3, r3, #7
 80079f0:	431a      	orrs	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 80079fc:	e067      	b.n	8007ace <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007a06:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	029a      	lsls	r2, r3, #10
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	03db      	lsls	r3, r3, #15
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 8007a22:	e054      	b.n	8007ace <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007a2c:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	049a      	lsls	r2, r3, #18
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	05db      	lsls	r3, r3, #23
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8007a48:	e041      	b.n	8007ace <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007a52:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	069a      	lsls	r2, r3, #26
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	07db      	lsls	r3, r3, #31
 8007a62:	431a      	orrs	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 8007a6e:	e02e      	b.n	8007ace <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007a78:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	009a      	lsls	r2, r3, #2
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	01db      	lsls	r3, r3, #7
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 8007a94:	e01b      	b.n	8007ace <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007a9e:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	029a      	lsls	r2, r3, #10
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	03db      	lsls	r3, r3, #15
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 8007aba:	e008      	b.n	8007ace <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2207      	movs	r2, #7
 8007ac0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007acc:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b07      	cmp	r3, #7
 8007ad8:	d101      	bne.n	8007ade <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e008      	b.n	8007af0 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b1a:	f023 0101 	bic.w	r1, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f003 0201 	and.w	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00e      	beq.n	8007b56 <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b40:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	041b      	lsls	r3, r3, #16
 8007b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00e      	beq.n	8007ba6 <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b90:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	061b      	lsls	r3, r3, #24
 8007b98:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bb8:	f023 0101 	bic.w	r1, r3, #1
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f003 0201 	and.w	r2, r3, #1
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00e      	beq.n	8007bf4 <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bde:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d101      	bne.n	8007c1c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e07a      	b.n	8007d12 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007c26:	2302      	movs	r3, #2
 8007c28:	e073      	b.n	8007d12 <HAL_HRTIM_WaveformTimerConfig+0x112>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2202      	movs	r2, #2
 8007c36:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b06      	cmp	r3, #6
 8007c3e:	d104      	bne.n	8007c4a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fa47 	bl	80080d6 <HRTIM_MasterWaveform_Config>
 8007c48:	e004      	b.n	8007c54 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fade 	bl	8008210 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6819      	ldr	r1, [r3, #0]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4403      	add	r3, r0
 8007c66:	3320      	adds	r3, #32
 8007c68:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4403      	add	r3, r0
 8007c7c:	3324      	adds	r3, #36	; 0x24
 8007c7e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6899      	ldr	r1, [r3, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4403      	add	r3, r0
 8007c92:	3328      	adds	r3, #40	; 0x28
 8007c94:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68d9      	ldr	r1, [r3, #12]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4403      	add	r3, r0
 8007ca8:	332c      	adds	r3, #44	; 0x2c
 8007caa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6919      	ldr	r1, [r3, #16]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4403      	add	r3, r0
 8007cbe:	3330      	adds	r3, #48	; 0x30
 8007cc0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fe51 	bl	800896c <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b06      	cmp	r3, #6
 8007cce:	d017      	beq.n	8007d00 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d113      	bne.n	8007d00 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	01db      	lsls	r3, r3, #7
 8007ce2:	4413      	add	r3, r2
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cee:	025b      	lsls	r3, r3, #9
 8007cf0:	68f9      	ldr	r1, [r7, #12]
 8007cf2:	6809      	ldr	r1, [r1, #0]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	01db      	lsls	r3, r3, #7
 8007cfc:	440b      	add	r3, r1
 8007cfe:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d101      	bne.n	8007d3a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007d36:	2302      	movs	r3, #2
 8007d38:	e157      	b.n	8007fea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e150      	b.n	8007fea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d140      	bne.n	8007de0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	2b07      	cmp	r3, #7
 8007d64:	d82a      	bhi.n	8007dbc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d8d 	.word	0x08007d8d
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007dbd 	.word	0x08007dbd
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	08007dbd 	.word	0x08007dbd
 8007d80:	08007dbd 	.word	0x08007dbd
 8007d84:	08007dbd 	.word	0x08007dbd
 8007d88:	08007db1 	.word	0x08007db1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	61da      	str	r2, [r3, #28]
        break;
 8007d96:	e01a      	b.n	8007dce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007da2:	e014      	b.n	8007dce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8007dae:	e00e      	b.n	8007dce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007dba:	e008      	b.n	8007dce <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2207      	movs	r2, #7
 8007dc0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8007dcc:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b07      	cmp	r3, #7
 8007dd8:	f040 80fe 	bne.w	8007fd8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e104      	b.n	8007fea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	2b07      	cmp	r3, #7
 8007de6:	f200 80e3 	bhi.w	8007fb0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e11 	.word	0x08007e11
 8007df4:	08007e25 	.word	0x08007e25
 8007df8:	08007fb1 	.word	0x08007fb1
 8007dfc:	08007ee1 	.word	0x08007ee1
 8007e00:	08007fb1 	.word	0x08007fb1
 8007e04:	08007fb1 	.word	0x08007fb1
 8007e08:	08007fb1 	.word	0x08007fb1
 8007e0c:	08007ef5 	.word	0x08007ef5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	01db      	lsls	r3, r3, #7
 8007e1c:	440b      	add	r3, r1
 8007e1e:	339c      	adds	r3, #156	; 0x9c
 8007e20:	601a      	str	r2, [r3, #0]
        break;
 8007e22:	e0d1      	b.n	8007fc8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6819      	ldr	r1, [r3, #0]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	01db      	lsls	r3, r3, #7
 8007e30:	440b      	add	r3, r1
 8007e32:	33a4      	adds	r3, #164	; 0xa4
 8007e34:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d03f      	beq.n	8007ebe <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	3301      	adds	r3, #1
 8007e46:	01db      	lsls	r3, r3, #7
 8007e48:	4413      	add	r3, r2
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	6811      	ldr	r1, [r2, #0]
 8007e50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3301      	adds	r3, #1
 8007e58:	01db      	lsls	r3, r3, #7
 8007e5a:	440b      	add	r3, r1
 8007e5c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3301      	adds	r3, #1
 8007e66:	01db      	lsls	r3, r3, #7
 8007e68:	4413      	add	r3, r2
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	68f9      	ldr	r1, [r7, #12]
 8007e72:	6809      	ldr	r1, [r1, #0]
 8007e74:	431a      	orrs	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	01db      	lsls	r3, r3, #7
 8007e7c:	440b      	add	r3, r1
 8007e7e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e88:	d109      	bne.n	8007e9e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6819      	ldr	r1, [r3, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	01db      	lsls	r3, r3, #7
 8007e96:	440b      	add	r3, r1
 8007e98:	339c      	adds	r3, #156	; 0x9c
 8007e9a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007e9c:	e091      	b.n	8007fc2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ea6:	f040 808c 	bne.w	8007fc2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	01db      	lsls	r3, r3, #7
 8007eb6:	440b      	add	r3, r1
 8007eb8:	33a8      	adds	r3, #168	; 0xa8
 8007eba:	601a      	str	r2, [r3, #0]
         break;
 8007ebc:	e081      	b.n	8007fc2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	01db      	lsls	r3, r3, #7
 8007ec8:	4413      	add	r3, r2
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	6811      	ldr	r1, [r2, #0]
 8007ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	01db      	lsls	r3, r3, #7
 8007eda:	440b      	add	r3, r1
 8007edc:	601a      	str	r2, [r3, #0]
         break;
 8007ede:	e070      	b.n	8007fc2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	01db      	lsls	r3, r3, #7
 8007eec:	440b      	add	r3, r1
 8007eee:	33a8      	adds	r3, #168	; 0xa8
 8007ef0:	601a      	str	r2, [r3, #0]
        break;
 8007ef2:	e069      	b.n	8007fc8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6819      	ldr	r1, [r3, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	01db      	lsls	r3, r3, #7
 8007f00:	440b      	add	r3, r1
 8007f02:	33ac      	adds	r3, #172	; 0xac
 8007f04:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d03f      	beq.n	8007f8e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3301      	adds	r3, #1
 8007f16:	01db      	lsls	r3, r3, #7
 8007f18:	4413      	add	r3, r2
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	6811      	ldr	r1, [r2, #0]
 8007f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3301      	adds	r3, #1
 8007f28:	01db      	lsls	r3, r3, #7
 8007f2a:	440b      	add	r3, r1
 8007f2c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	3301      	adds	r3, #1
 8007f36:	01db      	lsls	r3, r3, #7
 8007f38:	4413      	add	r3, r2
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	6809      	ldr	r1, [r1, #0]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	01db      	lsls	r3, r3, #7
 8007f4e:	440b      	add	r3, r1
 8007f50:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5a:	d109      	bne.n	8007f70 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6819      	ldr	r1, [r3, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	01db      	lsls	r3, r3, #7
 8007f68:	440b      	add	r3, r1
 8007f6a:	339c      	adds	r3, #156	; 0x9c
 8007f6c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8007f6e:	e02a      	b.n	8007fc6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f78:	d125      	bne.n	8007fc6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6819      	ldr	r1, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689a      	ldr	r2, [r3, #8]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	01db      	lsls	r3, r3, #7
 8007f86:	440b      	add	r3, r1
 8007f88:	33a8      	adds	r3, #168	; 0xa8
 8007f8a:	601a      	str	r2, [r3, #0]
         break;
 8007f8c:	e01b      	b.n	8007fc6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	3301      	adds	r3, #1
 8007f96:	01db      	lsls	r3, r3, #7
 8007f98:	4413      	add	r3, r2
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	6811      	ldr	r1, [r2, #0]
 8007fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	01db      	lsls	r3, r3, #7
 8007faa:	440b      	add	r3, r1
 8007fac:	601a      	str	r2, [r3, #0]
         break;
 8007fae:	e00a      	b.n	8007fc6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2207      	movs	r2, #7
 8007fb4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007fc0:	e002      	b.n	8007fc8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007fc2:	bf00      	nop
 8007fc4:	e000      	b.n	8007fc8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007fc6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b07      	cmp	r3, #7
 8007fd2:	d101      	bne.n	8007fd8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e008      	b.n	8007fea <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop

08007ff8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f023 0307 	bic.w	r3, r3, #7
 8008010:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0318 	bic.w	r3, r3, #24
 8008022:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	6852      	ldr	r2, [r2, #4]
 8008048:	619a      	str	r2, [r3, #24]
}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008056:	b480      	push	{r7}
 8008058:	b087      	sub	sp, #28
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	3301      	adds	r3, #1
 800806a:	01db      	lsls	r3, r3, #7
 800806c:	4413      	add	r3, r2
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f023 0307 	bic.w	r3, r3, #7
 8008078:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f023 0318 	bic.w	r3, r3, #24
 800808a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	3301      	adds	r3, #1
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	4413      	add	r3, r2
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	01db      	lsls	r3, r3, #7
 80080b2:	440b      	add	r3, r1
 80080b4:	3394      	adds	r3, #148	; 0x94
 80080b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6819      	ldr	r1, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	01db      	lsls	r3, r3, #7
 80080c4:	440b      	add	r3, r1
 80080c6:	3398      	adds	r3, #152	; 0x98
 80080c8:	601a      	str	r2, [r3, #0]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80080f0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f023 0320 	bic.w	r3, r3, #32
 80080f8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800810a:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	2b20      	cmp	r3, #32
 8008112:	d003      	beq.n	800811c <HRTIM_MasterWaveform_Config+0x46>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b02      	cmp	r3, #2
 800811a:	d108      	bne.n	800812e <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008122:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f043 0320 	orr.w	r3, r3, #32
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e021      	b.n	8008172 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b03      	cmp	r3, #3
 8008134:	d108      	bne.n	8008148 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800813c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e014      	b.n	8008172 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b04      	cmp	r3, #4
 800814e:	d108      	bne.n	8008162 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008156:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e007      	b.n	8008172 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f023 0320 	bic.w	r3, r3, #32
 8008168:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008170:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008178:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800818a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800819c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80081ae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80081c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081d4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e6:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008204:	bf00      	nop
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008210:	b480      	push	{r7}
 8008212:	b08b      	sub	sp, #44	; 0x2c
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	3301      	adds	r3, #1
 8008224:	01db      	lsls	r3, r3, #7
 8008226:	4413      	add	r3, r2
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	6811      	ldr	r1, [r2, #0]
 800822e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3301      	adds	r3, #1
 8008236:	01db      	lsls	r3, r3, #7
 8008238:	440b      	add	r3, r1
 800823a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	3301      	adds	r3, #1
 8008244:	01db      	lsls	r3, r3, #7
 8008246:	4413      	add	r3, r2
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	01db      	lsls	r3, r3, #7
 8008254:	4413      	add	r3, r2
 8008256:	33e8      	adds	r3, #232	; 0xe8
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	01db      	lsls	r3, r3, #7
 8008264:	4413      	add	r3, r2
 8008266:	33e4      	adds	r3, #228	; 0xe4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008274:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	f023 0320 	bic.w	r3, r3, #32
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008284:	4313      	orrs	r3, r2
 8008286:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	2b20      	cmp	r3, #32
 800828e:	d003      	beq.n	8008298 <HRTIM_TimingUnitWaveform_Config+0x88>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d108      	bne.n	80082aa <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	f043 0320 	orr.w	r3, r3, #32
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
 80082a8:	e021      	b.n	80082ee <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d108      	bne.n	80082c4 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
 80082c2:	e014      	b.n	80082ee <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d108      	bne.n	80082de <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
 80082dc:	e007      	b.n	80082ee <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	f023 0320 	bic.w	r3, r3, #32
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	4313      	orrs	r3, r2
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830e:	4313      	orrs	r3, r2
 8008310:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008320:	4313      	orrs	r3, r2
 8008322:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008332:	4313      	orrs	r3, r2
 8008334:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	4313      	orrs	r3, r2
 8008346:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008358:	d103      	bne.n	8008362 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	4313      	orrs	r3, r2
 8008372:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	4313      	orrs	r3, r2
 8008384:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800838c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008398:	4313      	orrs	r3, r2
 800839a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083a2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083b8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ca:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083da:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80083de:	d004      	beq.n	80083ea <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e4:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80083e8:	d103      	bne.n	80083f2 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	d108      	bne.n	8008404 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80083f8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083fe:	6a3a      	ldr	r2, [r7, #32]
 8008400:	4313      	orrs	r3, r2
 8008402:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800840a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	4313      	orrs	r3, r2
 8008414:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b05      	cmp	r3, #5
 8008420:	d850      	bhi.n	80084c4 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008441 	.word	0x08008441
 800842c:	08008457 	.word	0x08008457
 8008430:	0800846d 	.word	0x0800846d
 8008434:	08008483 	.word	0x08008483
 8008438:	08008499 	.word	0x08008499
 800843c:	080084af 	.word	0x080084af
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008446:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	4313      	orrs	r3, r2
 8008452:	61fb      	str	r3, [r7, #28]
      break;
 8008454:	e037      	b.n	80084c6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800845c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	69fa      	ldr	r2, [r7, #28]
 8008466:	4313      	orrs	r3, r2
 8008468:	61fb      	str	r3, [r7, #28]
      break;
 800846a:	e02c      	b.n	80084c6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008472:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	4313      	orrs	r3, r2
 800847e:	61fb      	str	r3, [r7, #28]
      break;
 8008480:	e021      	b.n	80084c6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008488:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	4313      	orrs	r3, r2
 8008494:	61fb      	str	r3, [r7, #28]
      break;
 8008496:	e016      	b.n	80084c6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800849e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	015b      	lsls	r3, r3, #5
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	61fb      	str	r3, [r7, #28]
      break;
 80084ac:	e00b      	b.n	80084c6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80084b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	019b      	lsls	r3, r3, #6
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	4313      	orrs	r3, r2
 80084c0:	61fb      	str	r3, [r7, #28]
      break;
 80084c2:	e000      	b.n	80084c6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 80084c4:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3301      	adds	r3, #1
 80084ce:	01db      	lsls	r3, r3, #7
 80084d0:	4413      	add	r3, r2
 80084d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	01db      	lsls	r3, r3, #7
 80084de:	4413      	add	r3, r2
 80084e0:	33e8      	adds	r3, #232	; 0xe8
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	01db      	lsls	r3, r3, #7
 80084ee:	4413      	add	r3, r2
 80084f0:	33e4      	adds	r3, #228	; 0xe4
 80084f2:	6a3a      	ldr	r2, [r7, #32]
 80084f4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	01db      	lsls	r3, r3, #7
 80084fe:	4413      	add	r3, r2
 8008500:	33d4      	adds	r3, #212	; 0xd4
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008510:	bf00      	nop
 8008512:	372c      	adds	r7, #44	; 0x2c
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 800851c:	b480      	push	{r7}
 800851e:	b089      	sub	sp, #36	; 0x24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8008530:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800853a:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008544:	617b      	str	r3, [r7, #20]

  switch (Event)
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b0a      	cmp	r3, #10
 800854a:	f200 8208 	bhi.w	800895e <HRTIM_EventConfig+0x442>
 800854e:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <HRTIM_EventConfig+0x38>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	08008581 	.word	0x08008581
 8008558:	080085a1 	.word	0x080085a1
 800855c:	080085f7 	.word	0x080085f7
 8008560:	08008653 	.word	0x08008653
 8008564:	080086b1 	.word	0x080086b1
 8008568:	0800870f 	.word	0x0800870f
 800856c:	0800876d 	.word	0x0800876d
 8008570:	080087cb 	.word	0x080087cb
 8008574:	0800882f 	.word	0x0800882f
 8008578:	08008893 	.word	0x08008893
 800857c:	080088f9 	.word	0x080088f9
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800859e:	e1df      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085a6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0318 	and.w	r3, r3, #24
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 80085f4:	e1b4      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 80085fc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	019b      	lsls	r3, r3, #6
 8008604:	b2db      	uxtb	r3, r3
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	4313      	orrs	r3, r2
 800860a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	019b      	lsls	r3, r3, #6
 8008612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	4313      	orrs	r3, r2
 800861a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	4313      	orrs	r3, r2
 800862a:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	019b      	lsls	r3, r3, #6
 800863c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	4313      	orrs	r3, r2
 8008644:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008650:	e186      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008658:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	031b      	lsls	r3, r3, #12
 8008660:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	4313      	orrs	r3, r2
 8008668:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	031b      	lsls	r3, r3, #12
 8008670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008674:	69fa      	ldr	r2, [r7, #28]
 8008676:	4313      	orrs	r3, r2
 8008678:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	031b      	lsls	r3, r3, #12
 8008680:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	4313      	orrs	r3, r2
 8008688:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 80086ae:	e157      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 80086b6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	049b      	lsls	r3, r3, #18
 80086be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	049b      	lsls	r3, r3, #18
 80086ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	049b      	lsls	r3, r3, #18
 80086de:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	049b      	lsls	r3, r3, #18
 80086f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	4313      	orrs	r3, r2
 8008700:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 800870c:	e128      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008714:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	061b      	lsls	r3, r3, #24
 800871c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	4313      	orrs	r3, r2
 8008724:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	061b      	lsls	r3, r3, #24
 800872c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	4313      	orrs	r3, r2
 8008734:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	061b      	lsls	r3, r3, #24
 800873c:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	4313      	orrs	r3, r2
 8008744:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	061b      	lsls	r3, r3, #24
 8008756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	4313      	orrs	r3, r2
 800875e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 800876a:	e0f9      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	f023 031f 	bic.w	r3, r3, #31
 8008772:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4313      	orrs	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	4313      	orrs	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0318 	and.w	r3, r3, #24
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4313      	orrs	r3, r2
 800879c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 030f 	bic.w	r3, r3, #15
 80087a4:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 80087c8:	e0ca      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80087d0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	019b      	lsls	r3, r3, #6
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	4313      	orrs	r3, r2
 80087de:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	019b      	lsls	r3, r3, #6
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	019b      	lsls	r3, r3, #6
 80087f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8008806:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	019b      	lsls	r3, r3, #6
 800880e:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800882c:	e098      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8008834:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	031b      	lsls	r3, r3, #12
 800883c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	4313      	orrs	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	031b      	lsls	r3, r3, #12
 800884c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	4313      	orrs	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	031b      	lsls	r3, r3, #12
 800885c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	4313      	orrs	r3, r2
 8008864:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800886c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	031b      	lsls	r3, r3, #12
 8008874:	b29b      	uxth	r3, r3
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008890:	e066      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8008898:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	049b      	lsls	r3, r3, #18
 80088a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	049b      	lsls	r3, r3, #18
 80088b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	049b      	lsls	r3, r3, #18
 80088c0:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80088d0:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	049b      	lsls	r3, r3, #18
 80088d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 80088f6:	e033      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80088fe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	4313      	orrs	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	061b      	lsls	r3, r3, #24
 8008916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	4313      	orrs	r3, r2
 800891e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	061b      	lsls	r3, r3, #24
 8008926:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	4313      	orrs	r3, r2
 800892e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008936:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	061b      	lsls	r3, r3, #24
 800893e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800895c:	e000      	b.n	8008960 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 800895e:	bf00      	nop
  }
}
 8008960:	bf00      	nop
 8008962:	3724      	adds	r7, #36	; 0x24
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b06      	cmp	r3, #6
 800897a:	d85e      	bhi.n	8008a3a <HRTIM_ForceRegistersUpdate+0xce>
 800897c:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HRTIM_ForceRegistersUpdate+0x18>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	080089b7 	.word	0x080089b7
 8008988:	080089cd 	.word	0x080089cd
 800898c:	080089e3 	.word	0x080089e3
 8008990:	080089f9 	.word	0x080089f9
 8008994:	08008a0f 	.word	0x08008a0f
 8008998:	08008a25 	.word	0x08008a25
 800899c:	080089a1 	.word	0x080089a1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80089b4:	e042      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0202 	orr.w	r2, r2, #2
 80089c6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80089ca:	e037      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0204 	orr.w	r2, r2, #4
 80089dc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80089e0:	e02c      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0208 	orr.w	r2, r2, #8
 80089f2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80089f6:	e021      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0210 	orr.w	r2, r2, #16
 8008a08:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008a0c:	e016      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0220 	orr.w	r2, r2, #32
 8008a1e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008a22:	e00b      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a34:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008a38:	e000      	b.n	8008a3c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8008a3a:	bf00      	nop
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d141      	bne.n	8008ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a56:	4b4b      	ldr	r3, [pc, #300]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a62:	d131      	bne.n	8008ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a64:	4b47      	ldr	r3, [pc, #284]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a6a:	4a46      	ldr	r2, [pc, #280]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a74:	4b43      	ldr	r3, [pc, #268]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a7c:	4a41      	ldr	r2, [pc, #260]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a84:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2232      	movs	r2, #50	; 0x32
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	4a3f      	ldr	r2, [pc, #252]	; (8008b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a90:	fba2 2303 	umull	r2, r3, r2, r3
 8008a94:	0c9b      	lsrs	r3, r3, #18
 8008a96:	3301      	adds	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a9a:	e002      	b.n	8008aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aa2:	4b38      	ldr	r3, [pc, #224]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aae:	d102      	bne.n	8008ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1f2      	bne.n	8008a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ab6:	4b33      	ldr	r3, [pc, #204]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac2:	d158      	bne.n	8008b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e057      	b.n	8008b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ac8:	4b2e      	ldr	r3, [pc, #184]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ace:	4a2d      	ldr	r2, [pc, #180]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008ad8:	e04d      	b.n	8008b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae0:	d141      	bne.n	8008b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ae2:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aee:	d131      	bne.n	8008b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008af0:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af6:	4a23      	ldr	r2, [pc, #140]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b00:	4b20      	ldr	r3, [pc, #128]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b08:	4a1e      	ldr	r2, [pc, #120]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b10:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2232      	movs	r2, #50	; 0x32
 8008b16:	fb02 f303 	mul.w	r3, r2, r3
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	; (8008b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b20:	0c9b      	lsrs	r3, r3, #18
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b26:	e002      	b.n	8008b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b2e:	4b15      	ldr	r3, [pc, #84]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3a:	d102      	bne.n	8008b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f2      	bne.n	8008b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4e:	d112      	bne.n	8008b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e011      	b.n	8008b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b54:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b5a:	4a0a      	ldr	r2, [pc, #40]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008b64:	e007      	b.n	8008b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b66:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b6e:	4a05      	ldr	r2, [pc, #20]	; (8008b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	40007000 	.word	0x40007000
 8008b88:	20000030 	.word	0x20000030
 8008b8c:	431bde83 	.word	0x431bde83

08008b90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	4a04      	ldr	r2, [pc, #16]	; (8008bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b9e:	6093      	str	r3, [r2, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	40007000 	.word	0x40007000

08008bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e306      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d075      	beq.n	8008cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bce:	4b97      	ldr	r3, [pc, #604]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 030c 	and.w	r3, r3, #12
 8008bd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bd8:	4b94      	ldr	r3, [pc, #592]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b0c      	cmp	r3, #12
 8008be6:	d102      	bne.n	8008bee <HAL_RCC_OscConfig+0x3e>
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d002      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x44>
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d10b      	bne.n	8008c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bf4:	4b8d      	ldr	r3, [pc, #564]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d05b      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x108>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d157      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e2e1      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c14:	d106      	bne.n	8008c24 <HAL_RCC_OscConfig+0x74>
 8008c16:	4b85      	ldr	r3, [pc, #532]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a84      	ldr	r2, [pc, #528]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e01d      	b.n	8008c60 <HAL_RCC_OscConfig+0xb0>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c2c:	d10c      	bne.n	8008c48 <HAL_RCC_OscConfig+0x98>
 8008c2e:	4b7f      	ldr	r3, [pc, #508]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a7e      	ldr	r2, [pc, #504]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	4b7c      	ldr	r3, [pc, #496]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a7b      	ldr	r2, [pc, #492]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	e00b      	b.n	8008c60 <HAL_RCC_OscConfig+0xb0>
 8008c48:	4b78      	ldr	r3, [pc, #480]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a77      	ldr	r2, [pc, #476]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	4b75      	ldr	r3, [pc, #468]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a74      	ldr	r2, [pc, #464]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d013      	beq.n	8008c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c68:	f7fb fc96 	bl	8004598 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c70:	f7fb fc92 	bl	8004598 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b64      	cmp	r3, #100	; 0x64
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e2a6      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c82:	4b6a      	ldr	r3, [pc, #424]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0f0      	beq.n	8008c70 <HAL_RCC_OscConfig+0xc0>
 8008c8e:	e014      	b.n	8008cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c90:	f7fb fc82 	bl	8004598 <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c98:	f7fb fc7e 	bl	8004598 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b64      	cmp	r3, #100	; 0x64
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e292      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008caa:	4b60      	ldr	r3, [pc, #384]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f0      	bne.n	8008c98 <HAL_RCC_OscConfig+0xe8>
 8008cb6:	e000      	b.n	8008cba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d075      	beq.n	8008db2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cc6:	4b59      	ldr	r3, [pc, #356]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 030c 	and.w	r3, r3, #12
 8008cce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cd0:	4b56      	ldr	r3, [pc, #344]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d102      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x136>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d002      	beq.n	8008cec <HAL_RCC_OscConfig+0x13c>
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d11f      	bne.n	8008d2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cec:	4b4f      	ldr	r3, [pc, #316]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_RCC_OscConfig+0x154>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e265      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d04:	4b49      	ldr	r3, [pc, #292]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	061b      	lsls	r3, r3, #24
 8008d12:	4946      	ldr	r1, [pc, #280]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d18:	4b45      	ldr	r3, [pc, #276]	; (8008e30 <HAL_RCC_OscConfig+0x280>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fb fbef 	bl	8004500 <HAL_InitTick>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d043      	beq.n	8008db0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e251      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d023      	beq.n	8008d7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d34:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a3c      	ldr	r2, [pc, #240]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fb fc2a 	bl	8004598 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d48:	f7fb fc26 	bl	8004598 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e23a      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d5a:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f0      	beq.n	8008d48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d66:	4b31      	ldr	r3, [pc, #196]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	061b      	lsls	r3, r3, #24
 8008d74:	492d      	ldr	r1, [pc, #180]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	604b      	str	r3, [r1, #4]
 8008d7a:	e01a      	b.n	8008db2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d7c:	4b2b      	ldr	r3, [pc, #172]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a2a      	ldr	r2, [pc, #168]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d88:	f7fb fc06 	bl	8004598 <HAL_GetTick>
 8008d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d90:	f7fb fc02 	bl	8004598 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e216      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008da2:	4b22      	ldr	r3, [pc, #136]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f0      	bne.n	8008d90 <HAL_RCC_OscConfig+0x1e0>
 8008dae:	e000      	b.n	8008db2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008db0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d041      	beq.n	8008e42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d01c      	beq.n	8008e00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dc6:	4b19      	ldr	r3, [pc, #100]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dcc:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008dce:	f043 0301 	orr.w	r3, r3, #1
 8008dd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd6:	f7fb fbdf 	bl	8004598 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ddc:	e008      	b.n	8008df0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dde:	f7fb fbdb 	bl	8004598 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d901      	bls.n	8008df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e1ef      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ef      	beq.n	8008dde <HAL_RCC_OscConfig+0x22e>
 8008dfe:	e020      	b.n	8008e42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e00:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e06:	4a09      	ldr	r2, [pc, #36]	; (8008e2c <HAL_RCC_OscConfig+0x27c>)
 8008e08:	f023 0301 	bic.w	r3, r3, #1
 8008e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e10:	f7fb fbc2 	bl	8004598 <HAL_GetTick>
 8008e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e16:	e00d      	b.n	8008e34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e18:	f7fb fbbe 	bl	8004598 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d906      	bls.n	8008e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e1d2      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
 8008e2a:	bf00      	nop
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e34:	4b8c      	ldr	r3, [pc, #560]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1ea      	bne.n	8008e18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0304 	and.w	r3, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80a6 	beq.w	8008f9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e50:	2300      	movs	r3, #0
 8008e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e54:	4b84      	ldr	r3, [pc, #528]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <HAL_RCC_OscConfig+0x2b4>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <HAL_RCC_OscConfig+0x2b6>
 8008e64:	2300      	movs	r3, #0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00d      	beq.n	8008e86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e6a:	4b7f      	ldr	r3, [pc, #508]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6e:	4a7e      	ldr	r2, [pc, #504]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e74:	6593      	str	r3, [r2, #88]	; 0x58
 8008e76:	4b7c      	ldr	r3, [pc, #496]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e82:	2301      	movs	r3, #1
 8008e84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e86:	4b79      	ldr	r3, [pc, #484]	; (800906c <HAL_RCC_OscConfig+0x4bc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d118      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e92:	4b76      	ldr	r3, [pc, #472]	; (800906c <HAL_RCC_OscConfig+0x4bc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a75      	ldr	r2, [pc, #468]	; (800906c <HAL_RCC_OscConfig+0x4bc>)
 8008e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e9e:	f7fb fb7b 	bl	8004598 <HAL_GetTick>
 8008ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ea4:	e008      	b.n	8008eb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea6:	f7fb fb77 	bl	8004598 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d901      	bls.n	8008eb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e18b      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008eb8:	4b6c      	ldr	r3, [pc, #432]	; (800906c <HAL_RCC_OscConfig+0x4bc>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0f0      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d108      	bne.n	8008ede <HAL_RCC_OscConfig+0x32e>
 8008ecc:	4b66      	ldr	r3, [pc, #408]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed2:	4a65      	ldr	r2, [pc, #404]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008ed4:	f043 0301 	orr.w	r3, r3, #1
 8008ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008edc:	e024      	b.n	8008f28 <HAL_RCC_OscConfig+0x378>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	2b05      	cmp	r3, #5
 8008ee4:	d110      	bne.n	8008f08 <HAL_RCC_OscConfig+0x358>
 8008ee6:	4b60      	ldr	r3, [pc, #384]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eec:	4a5e      	ldr	r2, [pc, #376]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008eee:	f043 0304 	orr.w	r3, r3, #4
 8008ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ef6:	4b5c      	ldr	r3, [pc, #368]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008efc:	4a5a      	ldr	r2, [pc, #360]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f06:	e00f      	b.n	8008f28 <HAL_RCC_OscConfig+0x378>
 8008f08:	4b57      	ldr	r3, [pc, #348]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0e:	4a56      	ldr	r2, [pc, #344]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f10:	f023 0301 	bic.w	r3, r3, #1
 8008f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f18:	4b53      	ldr	r3, [pc, #332]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1e:	4a52      	ldr	r2, [pc, #328]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f20:	f023 0304 	bic.w	r3, r3, #4
 8008f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d016      	beq.n	8008f5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f30:	f7fb fb32 	bl	8004598 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f36:	e00a      	b.n	8008f4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f38:	f7fb fb2e 	bl	8004598 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e140      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f4e:	4b46      	ldr	r3, [pc, #280]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0ed      	beq.n	8008f38 <HAL_RCC_OscConfig+0x388>
 8008f5c:	e015      	b.n	8008f8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f5e:	f7fb fb1b 	bl	8004598 <HAL_GetTick>
 8008f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f64:	e00a      	b.n	8008f7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f66:	f7fb fb17 	bl	8004598 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e129      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f7c:	4b3a      	ldr	r3, [pc, #232]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1ed      	bne.n	8008f66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f8a:	7ffb      	ldrb	r3, [r7, #31]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d105      	bne.n	8008f9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f90:	4b35      	ldr	r3, [pc, #212]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f94:	4a34      	ldr	r2, [pc, #208]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d03c      	beq.n	8009022 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01c      	beq.n	8008fea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fb0:	4b2d      	ldr	r3, [pc, #180]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fb6:	4a2c      	ldr	r2, [pc, #176]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc0:	f7fb faea 	bl	8004598 <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fc8:	f7fb fae6 	bl	8004598 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e0fa      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fda:	4b23      	ldr	r3, [pc, #140]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0ef      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x418>
 8008fe8:	e01b      	b.n	8009022 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fea:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ff0:	4a1d      	ldr	r2, [pc, #116]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8008ff2:	f023 0301 	bic.w	r3, r3, #1
 8008ff6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ffa:	f7fb facd 	bl	8004598 <HAL_GetTick>
 8008ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009000:	e008      	b.n	8009014 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009002:	f7fb fac9 	bl	8004598 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e0dd      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009014:	4b14      	ldr	r3, [pc, #80]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8009016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1ef      	bne.n	8009002 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 80d1 	beq.w	80091ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800902c:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 030c 	and.w	r3, r3, #12
 8009034:	2b0c      	cmp	r3, #12
 8009036:	f000 808b 	beq.w	8009150 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d15e      	bne.n	8009100 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a08      	ldr	r2, [pc, #32]	; (8009068 <HAL_RCC_OscConfig+0x4b8>)
 8009048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800904c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904e:	f7fb faa3 	bl	8004598 <HAL_GetTick>
 8009052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009054:	e00c      	b.n	8009070 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009056:	f7fb fa9f 	bl	8004598 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d905      	bls.n	8009070 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e0b3      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
 8009068:	40021000 	.word	0x40021000
 800906c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009070:	4b59      	ldr	r3, [pc, #356]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1ec      	bne.n	8009056 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800907c:	4b56      	ldr	r3, [pc, #344]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	4b56      	ldr	r3, [pc, #344]	; (80091dc <HAL_RCC_OscConfig+0x62c>)
 8009082:	4013      	ands	r3, r2
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6a11      	ldr	r1, [r2, #32]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800908c:	3a01      	subs	r2, #1
 800908e:	0112      	lsls	r2, r2, #4
 8009090:	4311      	orrs	r1, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009096:	0212      	lsls	r2, r2, #8
 8009098:	4311      	orrs	r1, r2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800909e:	0852      	lsrs	r2, r2, #1
 80090a0:	3a01      	subs	r2, #1
 80090a2:	0552      	lsls	r2, r2, #21
 80090a4:	4311      	orrs	r1, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80090aa:	0852      	lsrs	r2, r2, #1
 80090ac:	3a01      	subs	r2, #1
 80090ae:	0652      	lsls	r2, r2, #25
 80090b0:	4311      	orrs	r1, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80090b6:	06d2      	lsls	r2, r2, #27
 80090b8:	430a      	orrs	r2, r1
 80090ba:	4947      	ldr	r1, [pc, #284]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090c0:	4b45      	ldr	r3, [pc, #276]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a44      	ldr	r2, [pc, #272]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 80090c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090cc:	4b42      	ldr	r3, [pc, #264]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	4a41      	ldr	r2, [pc, #260]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 80090d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fb fa5e 	bl	8004598 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090e0:	f7fb fa5a 	bl	8004598 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e06e      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090f2:	4b39      	ldr	r3, [pc, #228]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0x530>
 80090fe:	e066      	b.n	80091ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009100:	4b35      	ldr	r3, [pc, #212]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a34      	ldr	r2, [pc, #208]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 8009106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800910a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800910c:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4a31      	ldr	r2, [pc, #196]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 8009112:	f023 0303 	bic.w	r3, r3, #3
 8009116:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009118:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	4a2e      	ldr	r2, [pc, #184]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 800911e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009126:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009128:	f7fb fa36 	bl	8004598 <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800912e:	e008      	b.n	8009142 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009130:	f7fb fa32 	bl	8004598 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e046      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009142:	4b25      	ldr	r3, [pc, #148]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1f0      	bne.n	8009130 <HAL_RCC_OscConfig+0x580>
 800914e:	e03e      	b.n	80091ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e039      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800915c:	4b1e      	ldr	r3, [pc, #120]	; (80091d8 <HAL_RCC_OscConfig+0x628>)
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f003 0203 	and.w	r2, r3, #3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	429a      	cmp	r2, r3
 800916e:	d12c      	bne.n	80091ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	3b01      	subs	r3, #1
 800917c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800917e:	429a      	cmp	r2, r3
 8009180:	d123      	bne.n	80091ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800918e:	429a      	cmp	r2, r3
 8009190:	d11b      	bne.n	80091ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800919e:	429a      	cmp	r2, r3
 80091a0:	d113      	bne.n	80091ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	3b01      	subs	r3, #1
 80091b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d109      	bne.n	80091ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c0:	085b      	lsrs	r3, r3, #1
 80091c2:	3b01      	subs	r3, #1
 80091c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d001      	beq.n	80091ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3720      	adds	r7, #32
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	40021000 	.word	0x40021000
 80091dc:	019f800c 	.word	0x019f800c

080091e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e11e      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091f8:	4b91      	ldr	r3, [pc, #580]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d910      	bls.n	8009228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009206:	4b8e      	ldr	r3, [pc, #568]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f023 020f 	bic.w	r2, r3, #15
 800920e:	498c      	ldr	r1, [pc, #560]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	4313      	orrs	r3, r2
 8009214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009216:	4b8a      	ldr	r3, [pc, #552]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d001      	beq.n	8009228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e106      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d073      	beq.n	800931c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	2b03      	cmp	r3, #3
 800923a:	d129      	bne.n	8009290 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800923c:	4b81      	ldr	r3, [pc, #516]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e0f4      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800924c:	f000 f99e 	bl	800958c <RCC_GetSysClockFreqFromPLLSource>
 8009250:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4a7c      	ldr	r2, [pc, #496]	; (8009448 <HAL_RCC_ClockConfig+0x268>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d93f      	bls.n	80092da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800925a:	4b7a      	ldr	r3, [pc, #488]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800926e:	2b00      	cmp	r3, #0
 8009270:	d033      	beq.n	80092da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009276:	2b00      	cmp	r3, #0
 8009278:	d12f      	bne.n	80092da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800927a:	4b72      	ldr	r3, [pc, #456]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009282:	4a70      	ldr	r2, [pc, #448]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 8009284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800928a:	2380      	movs	r3, #128	; 0x80
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	e024      	b.n	80092da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d107      	bne.n	80092a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009298:	4b6a      	ldr	r3, [pc, #424]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d109      	bne.n	80092b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0c6      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092a8:	4b66      	ldr	r3, [pc, #408]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0be      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80092b8:	f000 f8ce 	bl	8009458 <HAL_RCC_GetSysClockFreq>
 80092bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	4a61      	ldr	r2, [pc, #388]	; (8009448 <HAL_RCC_ClockConfig+0x268>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d909      	bls.n	80092da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80092c6:	4b5f      	ldr	r3, [pc, #380]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092ce:	4a5d      	ldr	r2, [pc, #372]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80092d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092d6:	2380      	movs	r3, #128	; 0x80
 80092d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092da:	4b5a      	ldr	r3, [pc, #360]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f023 0203 	bic.w	r2, r3, #3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	4957      	ldr	r1, [pc, #348]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ec:	f7fb f954 	bl	8004598 <HAL_GetTick>
 80092f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f2:	e00a      	b.n	800930a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092f4:	f7fb f950 	bl	8004598 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009302:	4293      	cmp	r3, r2
 8009304:	d901      	bls.n	800930a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e095      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800930a:	4b4e      	ldr	r3, [pc, #312]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f003 020c 	and.w	r2, r3, #12
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	429a      	cmp	r2, r3
 800931a:	d1eb      	bne.n	80092f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d023      	beq.n	8009370 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009334:	4b43      	ldr	r3, [pc, #268]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	4a42      	ldr	r2, [pc, #264]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800933a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800933e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d007      	beq.n	800935c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800934c:	4b3d      	ldr	r3, [pc, #244]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009354:	4a3b      	ldr	r2, [pc, #236]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 8009356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800935a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800935c:	4b39      	ldr	r3, [pc, #228]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	4936      	ldr	r1, [pc, #216]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800936a:	4313      	orrs	r3, r2
 800936c:	608b      	str	r3, [r1, #8]
 800936e:	e008      	b.n	8009382 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2b80      	cmp	r3, #128	; 0x80
 8009374:	d105      	bne.n	8009382 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009376:	4b33      	ldr	r3, [pc, #204]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	4a32      	ldr	r2, [pc, #200]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 800937c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009380:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009382:	4b2f      	ldr	r3, [pc, #188]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d21d      	bcs.n	80093cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009390:	4b2b      	ldr	r3, [pc, #172]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f023 020f 	bic.w	r2, r3, #15
 8009398:	4929      	ldr	r1, [pc, #164]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	4313      	orrs	r3, r2
 800939e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093a0:	f7fb f8fa 	bl	8004598 <HAL_GetTick>
 80093a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093a6:	e00a      	b.n	80093be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093a8:	f7fb f8f6 	bl	8004598 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e03b      	b.n	8009436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093be:	4b20      	ldr	r3, [pc, #128]	; (8009440 <HAL_RCC_ClockConfig+0x260>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 030f 	and.w	r3, r3, #15
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d1ed      	bne.n	80093a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093d8:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	4917      	ldr	r1, [pc, #92]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d009      	beq.n	800940a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	490f      	ldr	r1, [pc, #60]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 8009406:	4313      	orrs	r3, r2
 8009408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800940a:	f000 f825 	bl	8009458 <HAL_RCC_GetSysClockFreq>
 800940e:	4602      	mov	r2, r0
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <HAL_RCC_ClockConfig+0x264>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	091b      	lsrs	r3, r3, #4
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	490c      	ldr	r1, [pc, #48]	; (800944c <HAL_RCC_ClockConfig+0x26c>)
 800941c:	5ccb      	ldrb	r3, [r1, r3]
 800941e:	f003 031f 	and.w	r3, r3, #31
 8009422:	fa22 f303 	lsr.w	r3, r2, r3
 8009426:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <HAL_RCC_ClockConfig+0x270>)
 8009428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800942a:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <HAL_RCC_ClockConfig+0x274>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7fb f866 	bl	8004500 <HAL_InitTick>
 8009434:	4603      	mov	r3, r0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	40022000 	.word	0x40022000
 8009444:	40021000 	.word	0x40021000
 8009448:	04c4b400 	.word	0x04c4b400
 800944c:	08014c6c 	.word	0x08014c6c
 8009450:	20000030 	.word	0x20000030
 8009454:	20000034 	.word	0x20000034

08009458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800945e:	4b2c      	ldr	r3, [pc, #176]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f003 030c 	and.w	r3, r3, #12
 8009466:	2b04      	cmp	r3, #4
 8009468:	d102      	bne.n	8009470 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800946a:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <HAL_RCC_GetSysClockFreq+0xbc>)
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	e047      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009470:	4b27      	ldr	r3, [pc, #156]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f003 030c 	and.w	r3, r3, #12
 8009478:	2b08      	cmp	r3, #8
 800947a:	d102      	bne.n	8009482 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800947c:	4b26      	ldr	r3, [pc, #152]	; (8009518 <HAL_RCC_GetSysClockFreq+0xc0>)
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	e03e      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009482:	4b23      	ldr	r3, [pc, #140]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f003 030c 	and.w	r3, r3, #12
 800948a:	2b0c      	cmp	r3, #12
 800948c:	d136      	bne.n	80094fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800948e:	4b20      	ldr	r3, [pc, #128]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f003 0303 	and.w	r3, r3, #3
 8009496:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009498:	4b1d      	ldr	r3, [pc, #116]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	091b      	lsrs	r3, r3, #4
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	3301      	adds	r3, #1
 80094a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d10c      	bne.n	80094c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094ac:	4a1a      	ldr	r2, [pc, #104]	; (8009518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b4:	4a16      	ldr	r2, [pc, #88]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094b6:	68d2      	ldr	r2, [r2, #12]
 80094b8:	0a12      	lsrs	r2, r2, #8
 80094ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80094be:	fb02 f303 	mul.w	r3, r2, r3
 80094c2:	617b      	str	r3, [r7, #20]
      break;
 80094c4:	e00c      	b.n	80094e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094c6:	4a13      	ldr	r2, [pc, #76]	; (8009514 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ce:	4a10      	ldr	r2, [pc, #64]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094d0:	68d2      	ldr	r2, [r2, #12]
 80094d2:	0a12      	lsrs	r2, r2, #8
 80094d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
 80094dc:	617b      	str	r3, [r7, #20]
      break;
 80094de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094e0:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	0e5b      	lsrs	r3, r3, #25
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	3301      	adds	r3, #1
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	e001      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009500:	693b      	ldr	r3, [r7, #16]
}
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40021000 	.word	0x40021000
 8009514:	00f42400 	.word	0x00f42400
 8009518:	016e3600 	.word	0x016e3600

0800951c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009520:	4b03      	ldr	r3, [pc, #12]	; (8009530 <HAL_RCC_GetHCLKFreq+0x14>)
 8009522:	681b      	ldr	r3, [r3, #0]
}
 8009524:	4618      	mov	r0, r3
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	20000030 	.word	0x20000030

08009534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009538:	f7ff fff0 	bl	800951c <HAL_RCC_GetHCLKFreq>
 800953c:	4602      	mov	r2, r0
 800953e:	4b06      	ldr	r3, [pc, #24]	; (8009558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	0a1b      	lsrs	r3, r3, #8
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	4904      	ldr	r1, [pc, #16]	; (800955c <HAL_RCC_GetPCLK1Freq+0x28>)
 800954a:	5ccb      	ldrb	r3, [r1, r3]
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009554:	4618      	mov	r0, r3
 8009556:	bd80      	pop	{r7, pc}
 8009558:	40021000 	.word	0x40021000
 800955c:	08014c7c 	.word	0x08014c7c

08009560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009564:	f7ff ffda 	bl	800951c <HAL_RCC_GetHCLKFreq>
 8009568:	4602      	mov	r2, r0
 800956a:	4b06      	ldr	r3, [pc, #24]	; (8009584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	0adb      	lsrs	r3, r3, #11
 8009570:	f003 0307 	and.w	r3, r3, #7
 8009574:	4904      	ldr	r1, [pc, #16]	; (8009588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009576:	5ccb      	ldrb	r3, [r1, r3]
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009580:	4618      	mov	r0, r3
 8009582:	bd80      	pop	{r7, pc}
 8009584:	40021000 	.word	0x40021000
 8009588:	08014c7c 	.word	0x08014c7c

0800958c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009592:	4b1e      	ldr	r3, [pc, #120]	; (800960c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	091b      	lsrs	r3, r3, #4
 80095a2:	f003 030f 	and.w	r3, r3, #15
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d10c      	bne.n	80095ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095b0:	4a17      	ldr	r2, [pc, #92]	; (8009610 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b8:	4a14      	ldr	r2, [pc, #80]	; (800960c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095ba:	68d2      	ldr	r2, [r2, #12]
 80095bc:	0a12      	lsrs	r2, r2, #8
 80095be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095c2:	fb02 f303 	mul.w	r3, r2, r3
 80095c6:	617b      	str	r3, [r7, #20]
    break;
 80095c8:	e00c      	b.n	80095e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095ca:	4a12      	ldr	r2, [pc, #72]	; (8009614 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d2:	4a0e      	ldr	r2, [pc, #56]	; (800960c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095d4:	68d2      	ldr	r2, [r2, #12]
 80095d6:	0a12      	lsrs	r2, r2, #8
 80095d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095dc:	fb02 f303 	mul.w	r3, r2, r3
 80095e0:	617b      	str	r3, [r7, #20]
    break;
 80095e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095e4:	4b09      	ldr	r3, [pc, #36]	; (800960c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	0e5b      	lsrs	r3, r3, #25
 80095ea:	f003 0303 	and.w	r3, r3, #3
 80095ee:	3301      	adds	r3, #1
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80095fe:	687b      	ldr	r3, [r7, #4]
}
 8009600:	4618      	mov	r0, r3
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40021000 	.word	0x40021000
 8009610:	016e3600 	.word	0x016e3600
 8009614:	00f42400 	.word	0x00f42400

08009618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009620:	2300      	movs	r3, #0
 8009622:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009624:	2300      	movs	r3, #0
 8009626:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 8098 	beq.w	8009766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009636:	2300      	movs	r3, #0
 8009638:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800963a:	4b43      	ldr	r3, [pc, #268]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800963c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10d      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009646:	4b40      	ldr	r3, [pc, #256]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964a:	4a3f      	ldr	r2, [pc, #252]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800964c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009650:	6593      	str	r3, [r2, #88]	; 0x58
 8009652:	4b3d      	ldr	r3, [pc, #244]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800965a:	60bb      	str	r3, [r7, #8]
 800965c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800965e:	2301      	movs	r3, #1
 8009660:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009662:	4b3a      	ldr	r3, [pc, #232]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a39      	ldr	r2, [pc, #228]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800966c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800966e:	f7fa ff93 	bl	8004598 <HAL_GetTick>
 8009672:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009674:	e009      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009676:	f7fa ff8f 	bl	8004598 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d902      	bls.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	74fb      	strb	r3, [r7, #19]
        break;
 8009688:	e005      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800968a:	4b30      	ldr	r3, [pc, #192]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0ef      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009696:	7cfb      	ldrb	r3, [r7, #19]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d159      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800969c:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800969e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01e      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d019      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80096b8:	4b23      	ldr	r3, [pc, #140]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096c4:	4b20      	ldr	r3, [pc, #128]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ca:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096d4:	4b1c      	ldr	r3, [pc, #112]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096da:	4a1b      	ldr	r2, [pc, #108]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80096e4:	4a18      	ldr	r2, [pc, #96]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d016      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f6:	f7fa ff4f 	bl	8004598 <HAL_GetTick>
 80096fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096fc:	e00b      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096fe:	f7fa ff4b 	bl	8004598 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	f241 3288 	movw	r2, #5000	; 0x1388
 800970c:	4293      	cmp	r3, r2
 800970e:	d902      	bls.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	74fb      	strb	r3, [r7, #19]
            break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009716:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ec      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009724:	7cfb      	ldrb	r3, [r7, #19]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10b      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800972a:	4b07      	ldr	r3, [pc, #28]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800972c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009738:	4903      	ldr	r1, [pc, #12]	; (8009748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800973a:	4313      	orrs	r3, r2
 800973c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009740:	e008      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009742:	7cfb      	ldrb	r3, [r7, #19]
 8009744:	74bb      	strb	r3, [r7, #18]
 8009746:	e005      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009748:	40021000 	.word	0x40021000
 800974c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	7cfb      	ldrb	r3, [r7, #19]
 8009752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009754:	7c7b      	ldrb	r3, [r7, #17]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d105      	bne.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800975a:	4ba7      	ldr	r3, [pc, #668]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	4aa6      	ldr	r2, [pc, #664]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009764:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009772:	4ba1      	ldr	r3, [pc, #644]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009778:	f023 0203 	bic.w	r2, r3, #3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	499d      	ldr	r1, [pc, #628]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009782:	4313      	orrs	r3, r2
 8009784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00a      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009794:	4b98      	ldr	r3, [pc, #608]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800979a:	f023 020c 	bic.w	r2, r3, #12
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	4995      	ldr	r1, [pc, #596]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00a      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80097b6:	4b90      	ldr	r3, [pc, #576]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	498c      	ldr	r1, [pc, #560]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80097d8:	4b87      	ldr	r3, [pc, #540]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	4984      	ldr	r1, [pc, #528]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80097fa:	4b7f      	ldr	r3, [pc, #508]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	497b      	ldr	r1, [pc, #492]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800981c:	4b76      	ldr	r3, [pc, #472]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	4973      	ldr	r1, [pc, #460]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800982c:	4313      	orrs	r3, r2
 800982e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800983e:	4b6e      	ldr	r3, [pc, #440]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	496a      	ldr	r1, [pc, #424]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800984e:	4313      	orrs	r3, r2
 8009850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009860:	4b65      	ldr	r3, [pc, #404]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009866:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	4962      	ldr	r1, [pc, #392]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009870:	4313      	orrs	r3, r2
 8009872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009882:	4b5d      	ldr	r3, [pc, #372]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	4959      	ldr	r1, [pc, #356]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009892:	4313      	orrs	r3, r2
 8009894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00a      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098a4:	4b54      	ldr	r3, [pc, #336]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098aa:	f023 0203 	bic.w	r2, r3, #3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	4951      	ldr	r1, [pc, #324]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098c6:	4b4c      	ldr	r3, [pc, #304]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	4948      	ldr	r1, [pc, #288]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d015      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098e8:	4b43      	ldr	r3, [pc, #268]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	4940      	ldr	r1, [pc, #256]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009906:	d105      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009908:	4b3b      	ldr	r3, [pc, #236]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	4a3a      	ldr	r2, [pc, #232]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800990e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009912:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800991c:	2b00      	cmp	r3, #0
 800991e:	d015      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009920:	4b35      	ldr	r3, [pc, #212]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009926:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992e:	4932      	ldr	r1, [pc, #200]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009930:	4313      	orrs	r3, r2
 8009932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800993e:	d105      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009940:	4b2d      	ldr	r3, [pc, #180]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	4a2c      	ldr	r2, [pc, #176]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800994a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d015      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009958:	4b27      	ldr	r3, [pc, #156]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	4924      	ldr	r1, [pc, #144]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009968:	4313      	orrs	r3, r2
 800996a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009976:	d105      	bne.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009978:	4b1f      	ldr	r3, [pc, #124]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	4a1e      	ldr	r2, [pc, #120]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800997e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009982:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d015      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009990:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009996:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999e:	4916      	ldr	r1, [pc, #88]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ae:	d105      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099b0:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4a10      	ldr	r2, [pc, #64]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d019      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099c8:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	4908      	ldr	r1, [pc, #32]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099e6:	d109      	bne.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099e8:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	4a02      	ldr	r2, [pc, #8]	; (80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099f2:	60d3      	str	r3, [r2, #12]
 80099f4:	e002      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80099f6:	bf00      	nop
 80099f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d015      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a08:	4b29      	ldr	r3, [pc, #164]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a16:	4926      	ldr	r1, [pc, #152]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a26:	d105      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a28:	4b21      	ldr	r3, [pc, #132]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	4a20      	ldr	r2, [pc, #128]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d015      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009a40:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a46:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a4e:	4918      	ldr	r1, [pc, #96]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a5e:	d105      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a60:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	4a12      	ldr	r2, [pc, #72]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d015      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	490a      	ldr	r1, [pc, #40]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a96:	d105      	bne.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	4a04      	ldr	r2, [pc, #16]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009aa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	40021000 	.word	0x40021000

08009ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e049      	b.n	8009b5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fa f97e 	bl	8003ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f000 fde6 	bl	800a6c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d001      	beq.n	8009b7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e04c      	b.n	8009c16 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a26      	ldr	r2, [pc, #152]	; (8009c24 <HAL_TIM_Base_Start+0xc0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d022      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b96:	d01d      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a22      	ldr	r2, [pc, #136]	; (8009c28 <HAL_TIM_Base_Start+0xc4>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d018      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a21      	ldr	r2, [pc, #132]	; (8009c2c <HAL_TIM_Base_Start+0xc8>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d013      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1f      	ldr	r2, [pc, #124]	; (8009c30 <HAL_TIM_Base_Start+0xcc>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d00e      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a1e      	ldr	r2, [pc, #120]	; (8009c34 <HAL_TIM_Base_Start+0xd0>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d009      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1c      	ldr	r2, [pc, #112]	; (8009c38 <HAL_TIM_Base_Start+0xd4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d004      	beq.n	8009bd4 <HAL_TIM_Base_Start+0x70>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a1b      	ldr	r2, [pc, #108]	; (8009c3c <HAL_TIM_Base_Start+0xd8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d115      	bne.n	8009c00 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	4b19      	ldr	r3, [pc, #100]	; (8009c40 <HAL_TIM_Base_Start+0xdc>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b06      	cmp	r3, #6
 8009be4:	d015      	beq.n	8009c12 <HAL_TIM_Base_Start+0xae>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bec:	d011      	beq.n	8009c12 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0201 	orr.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfe:	e008      	b.n	8009c12 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0201 	orr.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	e000      	b.n	8009c14 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	40012c00 	.word	0x40012c00
 8009c28:	40000400 	.word	0x40000400
 8009c2c:	40000800 	.word	0x40000800
 8009c30:	40000c00 	.word	0x40000c00
 8009c34:	40013400 	.word	0x40013400
 8009c38:	40014000 	.word	0x40014000
 8009c3c:	40015000 	.word	0x40015000
 8009c40:	00010007 	.word	0x00010007

08009c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d001      	beq.n	8009c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e054      	b.n	8009d06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0201 	orr.w	r2, r2, #1
 8009c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a26      	ldr	r2, [pc, #152]	; (8009d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d022      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c86:	d01d      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a22      	ldr	r2, [pc, #136]	; (8009d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d018      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a21      	ldr	r2, [pc, #132]	; (8009d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d013      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1f      	ldr	r2, [pc, #124]	; (8009d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00e      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a1e      	ldr	r2, [pc, #120]	; (8009d24 <HAL_TIM_Base_Start_IT+0xe0>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d009      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a1c      	ldr	r2, [pc, #112]	; (8009d28 <HAL_TIM_Base_Start_IT+0xe4>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIM_Base_Start_IT+0x80>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a1b      	ldr	r2, [pc, #108]	; (8009d2c <HAL_TIM_Base_Start_IT+0xe8>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d115      	bne.n	8009cf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	4b19      	ldr	r3, [pc, #100]	; (8009d30 <HAL_TIM_Base_Start_IT+0xec>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b06      	cmp	r3, #6
 8009cd4:	d015      	beq.n	8009d02 <HAL_TIM_Base_Start_IT+0xbe>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cdc:	d011      	beq.n	8009d02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0201 	orr.w	r2, r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cee:	e008      	b.n	8009d02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0201 	orr.w	r2, r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	e000      	b.n	8009d04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	40012c00 	.word	0x40012c00
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40013400 	.word	0x40013400
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	40015000 	.word	0x40015000
 8009d30:	00010007 	.word	0x00010007

08009d34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f022 0201 	bic.w	r2, r2, #1
 8009d4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6a1a      	ldr	r2, [r3, #32]
 8009d52:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d56:	4013      	ands	r3, r2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10f      	bne.n	8009d7c <HAL_TIM_Base_Stop_IT+0x48>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a1a      	ldr	r2, [r3, #32]
 8009d62:	f244 4344 	movw	r3, #17476	; 0x4444
 8009d66:	4013      	ands	r3, r2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d107      	bne.n	8009d7c <HAL_TIM_Base_Stop_IT+0x48>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0201 	bic.w	r2, r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e049      	b.n	8009e38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f841 	bl	8009e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	f000 fc77 	bl	800a6c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <HAL_TIM_PWM_Start+0x24>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	bf14      	ite	ne
 8009e70:	2301      	movne	r3, #1
 8009e72:	2300      	moveq	r3, #0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	e03c      	b.n	8009ef2 <HAL_TIM_PWM_Start+0x9e>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d109      	bne.n	8009e92 <HAL_TIM_PWM_Start+0x3e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	bf14      	ite	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	2300      	moveq	r3, #0
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	e02f      	b.n	8009ef2 <HAL_TIM_PWM_Start+0x9e>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d109      	bne.n	8009eac <HAL_TIM_PWM_Start+0x58>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	bf14      	ite	ne
 8009ea4:	2301      	movne	r3, #1
 8009ea6:	2300      	moveq	r3, #0
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	e022      	b.n	8009ef2 <HAL_TIM_PWM_Start+0x9e>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b0c      	cmp	r3, #12
 8009eb0:	d109      	bne.n	8009ec6 <HAL_TIM_PWM_Start+0x72>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	bf14      	ite	ne
 8009ebe:	2301      	movne	r3, #1
 8009ec0:	2300      	moveq	r3, #0
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	e015      	b.n	8009ef2 <HAL_TIM_PWM_Start+0x9e>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d109      	bne.n	8009ee0 <HAL_TIM_PWM_Start+0x8c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	bf14      	ite	ne
 8009ed8:	2301      	movne	r3, #1
 8009eda:	2300      	moveq	r3, #0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	e008      	b.n	8009ef2 <HAL_TIM_PWM_Start+0x9e>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	bf14      	ite	ne
 8009eec:	2301      	movne	r3, #1
 8009eee:	2300      	moveq	r3, #0
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e0a6      	b.n	800a048 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <HAL_TIM_PWM_Start+0xb6>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2202      	movs	r2, #2
 8009f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f08:	e023      	b.n	8009f52 <HAL_TIM_PWM_Start+0xfe>
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d104      	bne.n	8009f1a <HAL_TIM_PWM_Start+0xc6>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f18:	e01b      	b.n	8009f52 <HAL_TIM_PWM_Start+0xfe>
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b08      	cmp	r3, #8
 8009f1e:	d104      	bne.n	8009f2a <HAL_TIM_PWM_Start+0xd6>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2202      	movs	r2, #2
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f28:	e013      	b.n	8009f52 <HAL_TIM_PWM_Start+0xfe>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b0c      	cmp	r3, #12
 8009f2e:	d104      	bne.n	8009f3a <HAL_TIM_PWM_Start+0xe6>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f38:	e00b      	b.n	8009f52 <HAL_TIM_PWM_Start+0xfe>
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b10      	cmp	r3, #16
 8009f3e:	d104      	bne.n	8009f4a <HAL_TIM_PWM_Start+0xf6>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f48:	e003      	b.n	8009f52 <HAL_TIM_PWM_Start+0xfe>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2201      	movs	r2, #1
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f8e3 	bl	800b126 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a3a      	ldr	r2, [pc, #232]	; (800a050 <HAL_TIM_PWM_Start+0x1fc>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d018      	beq.n	8009f9c <HAL_TIM_PWM_Start+0x148>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a39      	ldr	r2, [pc, #228]	; (800a054 <HAL_TIM_PWM_Start+0x200>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d013      	beq.n	8009f9c <HAL_TIM_PWM_Start+0x148>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a37      	ldr	r2, [pc, #220]	; (800a058 <HAL_TIM_PWM_Start+0x204>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d00e      	beq.n	8009f9c <HAL_TIM_PWM_Start+0x148>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a36      	ldr	r2, [pc, #216]	; (800a05c <HAL_TIM_PWM_Start+0x208>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d009      	beq.n	8009f9c <HAL_TIM_PWM_Start+0x148>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a34      	ldr	r2, [pc, #208]	; (800a060 <HAL_TIM_PWM_Start+0x20c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d004      	beq.n	8009f9c <HAL_TIM_PWM_Start+0x148>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a33      	ldr	r2, [pc, #204]	; (800a064 <HAL_TIM_PWM_Start+0x210>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d101      	bne.n	8009fa0 <HAL_TIM_PWM_Start+0x14c>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e000      	b.n	8009fa2 <HAL_TIM_PWM_Start+0x14e>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d007      	beq.n	8009fb6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a25      	ldr	r2, [pc, #148]	; (800a050 <HAL_TIM_PWM_Start+0x1fc>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d022      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc8:	d01d      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a26      	ldr	r2, [pc, #152]	; (800a068 <HAL_TIM_PWM_Start+0x214>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d018      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a24      	ldr	r2, [pc, #144]	; (800a06c <HAL_TIM_PWM_Start+0x218>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d013      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a23      	ldr	r2, [pc, #140]	; (800a070 <HAL_TIM_PWM_Start+0x21c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00e      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a19      	ldr	r2, [pc, #100]	; (800a054 <HAL_TIM_PWM_Start+0x200>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d009      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <HAL_TIM_PWM_Start+0x204>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d004      	beq.n	800a006 <HAL_TIM_PWM_Start+0x1b2>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a18      	ldr	r2, [pc, #96]	; (800a064 <HAL_TIM_PWM_Start+0x210>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d115      	bne.n	800a032 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	4b19      	ldr	r3, [pc, #100]	; (800a074 <HAL_TIM_PWM_Start+0x220>)
 800a00e:	4013      	ands	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b06      	cmp	r3, #6
 800a016:	d015      	beq.n	800a044 <HAL_TIM_PWM_Start+0x1f0>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a01e:	d011      	beq.n	800a044 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a030:	e008      	b.n	800a044 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0201 	orr.w	r2, r2, #1
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	e000      	b.n	800a046 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a044:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	40012c00 	.word	0x40012c00
 800a054:	40013400 	.word	0x40013400
 800a058:	40014000 	.word	0x40014000
 800a05c:	40014400 	.word	0x40014400
 800a060:	40014800 	.word	0x40014800
 800a064:	40015000 	.word	0x40015000
 800a068:	40000400 	.word	0x40000400
 800a06c:	40000800 	.word	0x40000800
 800a070:	40000c00 	.word	0x40000c00
 800a074:	00010007 	.word	0x00010007

0800a078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d122      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d11b      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f06f 0202 	mvn.w	r2, #2
 800a0a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fae3 	bl	800a686 <HAL_TIM_IC_CaptureCallback>
 800a0c0:	e005      	b.n	800a0ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fad5 	bl	800a672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fae6 	bl	800a69a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d122      	bne.n	800a128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d11b      	bne.n	800a128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0204 	mvn.w	r2, #4
 800a0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fab9 	bl	800a686 <HAL_TIM_IC_CaptureCallback>
 800a114:	e005      	b.n	800a122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 faab 	bl	800a672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fabc 	bl	800a69a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	2b08      	cmp	r3, #8
 800a134:	d122      	bne.n	800a17c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b08      	cmp	r3, #8
 800a142:	d11b      	bne.n	800a17c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0208 	mvn.w	r2, #8
 800a14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2204      	movs	r2, #4
 800a152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa8f 	bl	800a686 <HAL_TIM_IC_CaptureCallback>
 800a168:	e005      	b.n	800a176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa81 	bl	800a672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa92 	bl	800a69a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0310 	and.w	r3, r3, #16
 800a186:	2b10      	cmp	r3, #16
 800a188:	d122      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b10      	cmp	r3, #16
 800a196:	d11b      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0210 	mvn.w	r2, #16
 800a1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2208      	movs	r2, #8
 800a1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa65 	bl	800a686 <HAL_TIM_IC_CaptureCallback>
 800a1bc:	e005      	b.n	800a1ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa57 	bl	800a672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fa68 	bl	800a69a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d10e      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d107      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f06f 0201 	mvn.w	r2, #1
 800a1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f9 f8ae 	bl	8003358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b80      	cmp	r3, #128	; 0x80
 800a208:	d10e      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a214:	2b80      	cmp	r3, #128	; 0x80
 800a216:	d107      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 fada 	bl	800b7dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a236:	d10e      	bne.n	800a256 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a242:	2b80      	cmp	r3, #128	; 0x80
 800a244:	d107      	bne.n	800a256 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 facd 	bl	800b7f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a260:	2b40      	cmp	r3, #64	; 0x40
 800a262:	d10e      	bne.n	800a282 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26e:	2b40      	cmp	r3, #64	; 0x40
 800a270:	d107      	bne.n	800a282 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fa16 	bl	800a6ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f003 0320 	and.w	r3, r3, #32
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d10e      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d107      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f06f 0220 	mvn.w	r2, #32
 800a2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fa8d 	bl	800b7c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2bc:	d10f      	bne.n	800a2de <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2cc:	d107      	bne.n	800a2de <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a2d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fa93 	bl	800b804 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2ec:	d10f      	bne.n	800a30e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2fc:	d107      	bne.n	800a30e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 fa85 	bl	800b818 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a31c:	d10f      	bne.n	800a33e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a32c:	d107      	bne.n	800a33e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fa77 	bl	800b82c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a34c:	d10f      	bne.n	800a36e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a35c:	d107      	bne.n	800a36e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f001 fa69 	bl	800b840 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a392:	2302      	movs	r3, #2
 800a394:	e0ff      	b.n	800a596 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b14      	cmp	r3, #20
 800a3a2:	f200 80f0 	bhi.w	800a586 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a401 	.word	0x0800a401
 800a3b0:	0800a587 	.word	0x0800a587
 800a3b4:	0800a587 	.word	0x0800a587
 800a3b8:	0800a587 	.word	0x0800a587
 800a3bc:	0800a441 	.word	0x0800a441
 800a3c0:	0800a587 	.word	0x0800a587
 800a3c4:	0800a587 	.word	0x0800a587
 800a3c8:	0800a587 	.word	0x0800a587
 800a3cc:	0800a483 	.word	0x0800a483
 800a3d0:	0800a587 	.word	0x0800a587
 800a3d4:	0800a587 	.word	0x0800a587
 800a3d8:	0800a587 	.word	0x0800a587
 800a3dc:	0800a4c3 	.word	0x0800a4c3
 800a3e0:	0800a587 	.word	0x0800a587
 800a3e4:	0800a587 	.word	0x0800a587
 800a3e8:	0800a587 	.word	0x0800a587
 800a3ec:	0800a505 	.word	0x0800a505
 800a3f0:	0800a587 	.word	0x0800a587
 800a3f4:	0800a587 	.word	0x0800a587
 800a3f8:	0800a587 	.word	0x0800a587
 800a3fc:	0800a545 	.word	0x0800a545
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fa04 	bl	800a814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	699a      	ldr	r2, [r3, #24]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f042 0208 	orr.w	r2, r2, #8
 800a41a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	699a      	ldr	r2, [r3, #24]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0204 	bic.w	r2, r2, #4
 800a42a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6999      	ldr	r1, [r3, #24]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	691a      	ldr	r2, [r3, #16]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	619a      	str	r2, [r3, #24]
      break;
 800a43e:	e0a5      	b.n	800a58c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68b9      	ldr	r1, [r7, #8]
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fa7e 	bl	800a948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	699a      	ldr	r2, [r3, #24]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a45a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699a      	ldr	r2, [r3, #24]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a46a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6999      	ldr	r1, [r3, #24]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	021a      	lsls	r2, r3, #8
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	619a      	str	r2, [r3, #24]
      break;
 800a480:	e084      	b.n	800a58c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68b9      	ldr	r1, [r7, #8]
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 faf1 	bl	800aa70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69da      	ldr	r2, [r3, #28]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f042 0208 	orr.w	r2, r2, #8
 800a49c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69da      	ldr	r2, [r3, #28]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0204 	bic.w	r2, r2, #4
 800a4ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69d9      	ldr	r1, [r3, #28]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	691a      	ldr	r2, [r3, #16]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	61da      	str	r2, [r3, #28]
      break;
 800a4c0:	e064      	b.n	800a58c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 fb63 	bl	800ab94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	69da      	ldr	r2, [r3, #28]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69da      	ldr	r2, [r3, #28]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	69d9      	ldr	r1, [r3, #28]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	021a      	lsls	r2, r3, #8
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	61da      	str	r2, [r3, #28]
      break;
 800a502:	e043      	b.n	800a58c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68b9      	ldr	r1, [r7, #8]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 fbd6 	bl	800acbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f042 0208 	orr.w	r2, r2, #8
 800a51e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0204 	bic.w	r2, r2, #4
 800a52e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	430a      	orrs	r2, r1
 800a540:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a542:	e023      	b.n	800a58c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68b9      	ldr	r1, [r7, #8]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fc20 	bl	800ad90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a55e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a56e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	021a      	lsls	r2, r3, #8
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a584:	e002      	b.n	800a58c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	75fb      	strb	r3, [r7, #23]
      break;
 800a58a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop

0800a5a0 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_TIM_GenerateEvent+0x18>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e014      	b.n	800a5e2 <HAL_TIM_GenerateEvent+0x42>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d101      	bne.n	800a606 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a602:	2302      	movs	r3, #2
 800a604:	e031      	b.n	800a66a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2202      	movs	r2, #2
 800a612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fc25 	bl	800ae68 <TIM_SlaveTimer_SetConfig>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d009      	beq.n	800a638 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e018      	b.n	800a66a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a646:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a656:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a46      	ldr	r2, [pc, #280]	; (800a7f0 <TIM_Base_SetConfig+0x12c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d017      	beq.n	800a70c <TIM_Base_SetConfig+0x48>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e2:	d013      	beq.n	800a70c <TIM_Base_SetConfig+0x48>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a43      	ldr	r2, [pc, #268]	; (800a7f4 <TIM_Base_SetConfig+0x130>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d00f      	beq.n	800a70c <TIM_Base_SetConfig+0x48>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a42      	ldr	r2, [pc, #264]	; (800a7f8 <TIM_Base_SetConfig+0x134>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d00b      	beq.n	800a70c <TIM_Base_SetConfig+0x48>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a41      	ldr	r2, [pc, #260]	; (800a7fc <TIM_Base_SetConfig+0x138>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d007      	beq.n	800a70c <TIM_Base_SetConfig+0x48>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a40      	ldr	r2, [pc, #256]	; (800a800 <TIM_Base_SetConfig+0x13c>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d003      	beq.n	800a70c <TIM_Base_SetConfig+0x48>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a3f      	ldr	r2, [pc, #252]	; (800a804 <TIM_Base_SetConfig+0x140>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d108      	bne.n	800a71e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a33      	ldr	r2, [pc, #204]	; (800a7f0 <TIM_Base_SetConfig+0x12c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d023      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72c:	d01f      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a30      	ldr	r2, [pc, #192]	; (800a7f4 <TIM_Base_SetConfig+0x130>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01b      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a2f      	ldr	r2, [pc, #188]	; (800a7f8 <TIM_Base_SetConfig+0x134>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d017      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a2e      	ldr	r2, [pc, #184]	; (800a7fc <TIM_Base_SetConfig+0x138>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a2d      	ldr	r2, [pc, #180]	; (800a800 <TIM_Base_SetConfig+0x13c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00f      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a2d      	ldr	r2, [pc, #180]	; (800a808 <TIM_Base_SetConfig+0x144>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00b      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a2c      	ldr	r2, [pc, #176]	; (800a80c <TIM_Base_SetConfig+0x148>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d007      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a2b      	ldr	r2, [pc, #172]	; (800a810 <TIM_Base_SetConfig+0x14c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_Base_SetConfig+0xaa>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a26      	ldr	r2, [pc, #152]	; (800a804 <TIM_Base_SetConfig+0x140>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d108      	bne.n	800a780 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a12      	ldr	r2, [pc, #72]	; (800a7f0 <TIM_Base_SetConfig+0x12c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d013      	beq.n	800a7d4 <TIM_Base_SetConfig+0x110>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a14      	ldr	r2, [pc, #80]	; (800a800 <TIM_Base_SetConfig+0x13c>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d00f      	beq.n	800a7d4 <TIM_Base_SetConfig+0x110>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a14      	ldr	r2, [pc, #80]	; (800a808 <TIM_Base_SetConfig+0x144>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d00b      	beq.n	800a7d4 <TIM_Base_SetConfig+0x110>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a13      	ldr	r2, [pc, #76]	; (800a80c <TIM_Base_SetConfig+0x148>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d007      	beq.n	800a7d4 <TIM_Base_SetConfig+0x110>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a12      	ldr	r2, [pc, #72]	; (800a810 <TIM_Base_SetConfig+0x14c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d003      	beq.n	800a7d4 <TIM_Base_SetConfig+0x110>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a0d      	ldr	r2, [pc, #52]	; (800a804 <TIM_Base_SetConfig+0x140>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d103      	bne.n	800a7dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	691a      	ldr	r2, [r3, #16]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	615a      	str	r2, [r3, #20]
}
 800a7e2:	bf00      	nop
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	40012c00 	.word	0x40012c00
 800a7f4:	40000400 	.word	0x40000400
 800a7f8:	40000800 	.word	0x40000800
 800a7fc:	40000c00 	.word	0x40000c00
 800a800:	40013400 	.word	0x40013400
 800a804:	40015000 	.word	0x40015000
 800a808:	40014000 	.word	0x40014000
 800a80c:	40014400 	.word	0x40014400
 800a810:	40014800 	.word	0x40014800

0800a814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f023 0201 	bic.w	r2, r3, #1
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f023 0302 	bic.w	r3, r3, #2
 800a860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a30      	ldr	r2, [pc, #192]	; (800a930 <TIM_OC1_SetConfig+0x11c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d013      	beq.n	800a89c <TIM_OC1_SetConfig+0x88>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a2f      	ldr	r2, [pc, #188]	; (800a934 <TIM_OC1_SetConfig+0x120>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d00f      	beq.n	800a89c <TIM_OC1_SetConfig+0x88>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a2e      	ldr	r2, [pc, #184]	; (800a938 <TIM_OC1_SetConfig+0x124>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d00b      	beq.n	800a89c <TIM_OC1_SetConfig+0x88>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a2d      	ldr	r2, [pc, #180]	; (800a93c <TIM_OC1_SetConfig+0x128>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d007      	beq.n	800a89c <TIM_OC1_SetConfig+0x88>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a2c      	ldr	r2, [pc, #176]	; (800a940 <TIM_OC1_SetConfig+0x12c>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d003      	beq.n	800a89c <TIM_OC1_SetConfig+0x88>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a2b      	ldr	r2, [pc, #172]	; (800a944 <TIM_OC1_SetConfig+0x130>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d10c      	bne.n	800a8b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f023 0308 	bic.w	r3, r3, #8
 800a8a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f023 0304 	bic.w	r3, r3, #4
 800a8b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a1d      	ldr	r2, [pc, #116]	; (800a930 <TIM_OC1_SetConfig+0x11c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d013      	beq.n	800a8e6 <TIM_OC1_SetConfig+0xd2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a1c      	ldr	r2, [pc, #112]	; (800a934 <TIM_OC1_SetConfig+0x120>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00f      	beq.n	800a8e6 <TIM_OC1_SetConfig+0xd2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a1b      	ldr	r2, [pc, #108]	; (800a938 <TIM_OC1_SetConfig+0x124>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00b      	beq.n	800a8e6 <TIM_OC1_SetConfig+0xd2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a1a      	ldr	r2, [pc, #104]	; (800a93c <TIM_OC1_SetConfig+0x128>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d007      	beq.n	800a8e6 <TIM_OC1_SetConfig+0xd2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a19      	ldr	r2, [pc, #100]	; (800a940 <TIM_OC1_SetConfig+0x12c>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d003      	beq.n	800a8e6 <TIM_OC1_SetConfig+0xd2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a18      	ldr	r2, [pc, #96]	; (800a944 <TIM_OC1_SetConfig+0x130>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d111      	bne.n	800a90a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4313      	orrs	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	621a      	str	r2, [r3, #32]
}
 800a924:	bf00      	nop
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40012c00 	.word	0x40012c00
 800a934:	40013400 	.word	0x40013400
 800a938:	40014000 	.word	0x40014000
 800a93c:	40014400 	.word	0x40014400
 800a940:	40014800 	.word	0x40014800
 800a944:	40015000 	.word	0x40015000

0800a948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	f023 0210 	bic.w	r2, r3, #16
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	021b      	lsls	r3, r3, #8
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f023 0320 	bic.w	r3, r3, #32
 800a996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a2c      	ldr	r2, [pc, #176]	; (800aa58 <TIM_OC2_SetConfig+0x110>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d007      	beq.n	800a9bc <TIM_OC2_SetConfig+0x74>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a2b      	ldr	r2, [pc, #172]	; (800aa5c <TIM_OC2_SetConfig+0x114>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d003      	beq.n	800a9bc <TIM_OC2_SetConfig+0x74>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a2a      	ldr	r2, [pc, #168]	; (800aa60 <TIM_OC2_SetConfig+0x118>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d10d      	bne.n	800a9d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a1f      	ldr	r2, [pc, #124]	; (800aa58 <TIM_OC2_SetConfig+0x110>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d013      	beq.n	800aa08 <TIM_OC2_SetConfig+0xc0>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <TIM_OC2_SetConfig+0x114>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d00f      	beq.n	800aa08 <TIM_OC2_SetConfig+0xc0>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a1e      	ldr	r2, [pc, #120]	; (800aa64 <TIM_OC2_SetConfig+0x11c>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d00b      	beq.n	800aa08 <TIM_OC2_SetConfig+0xc0>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a1d      	ldr	r2, [pc, #116]	; (800aa68 <TIM_OC2_SetConfig+0x120>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d007      	beq.n	800aa08 <TIM_OC2_SetConfig+0xc0>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a1c      	ldr	r2, [pc, #112]	; (800aa6c <TIM_OC2_SetConfig+0x124>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d003      	beq.n	800aa08 <TIM_OC2_SetConfig+0xc0>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a17      	ldr	r2, [pc, #92]	; (800aa60 <TIM_OC2_SetConfig+0x118>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d113      	bne.n	800aa30 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	621a      	str	r2, [r3, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	40012c00 	.word	0x40012c00
 800aa5c:	40013400 	.word	0x40013400
 800aa60:	40015000 	.word	0x40015000
 800aa64:	40014000 	.word	0x40014000
 800aa68:	40014400 	.word	0x40014400
 800aa6c:	40014800 	.word	0x40014800

0800aa70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 0303 	bic.w	r3, r3, #3
 800aaaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aabc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a2b      	ldr	r2, [pc, #172]	; (800ab7c <TIM_OC3_SetConfig+0x10c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d007      	beq.n	800aae2 <TIM_OC3_SetConfig+0x72>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a2a      	ldr	r2, [pc, #168]	; (800ab80 <TIM_OC3_SetConfig+0x110>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d003      	beq.n	800aae2 <TIM_OC3_SetConfig+0x72>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a29      	ldr	r2, [pc, #164]	; (800ab84 <TIM_OC3_SetConfig+0x114>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d10d      	bne.n	800aafe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	021b      	lsls	r3, r3, #8
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aafc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a1e      	ldr	r2, [pc, #120]	; (800ab7c <TIM_OC3_SetConfig+0x10c>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d013      	beq.n	800ab2e <TIM_OC3_SetConfig+0xbe>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a1d      	ldr	r2, [pc, #116]	; (800ab80 <TIM_OC3_SetConfig+0x110>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d00f      	beq.n	800ab2e <TIM_OC3_SetConfig+0xbe>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a1d      	ldr	r2, [pc, #116]	; (800ab88 <TIM_OC3_SetConfig+0x118>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d00b      	beq.n	800ab2e <TIM_OC3_SetConfig+0xbe>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a1c      	ldr	r2, [pc, #112]	; (800ab8c <TIM_OC3_SetConfig+0x11c>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d007      	beq.n	800ab2e <TIM_OC3_SetConfig+0xbe>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a1b      	ldr	r2, [pc, #108]	; (800ab90 <TIM_OC3_SetConfig+0x120>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d003      	beq.n	800ab2e <TIM_OC3_SetConfig+0xbe>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a16      	ldr	r2, [pc, #88]	; (800ab84 <TIM_OC3_SetConfig+0x114>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d113      	bne.n	800ab56 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	621a      	str	r2, [r3, #32]
}
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	40012c00 	.word	0x40012c00
 800ab80:	40013400 	.word	0x40013400
 800ab84:	40015000 	.word	0x40015000
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	40014400 	.word	0x40014400
 800ab90:	40014800 	.word	0x40014800

0800ab94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	021b      	lsls	r3, r3, #8
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	031b      	lsls	r3, r3, #12
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	4313      	orrs	r3, r2
 800abee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a2c      	ldr	r2, [pc, #176]	; (800aca4 <TIM_OC4_SetConfig+0x110>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d007      	beq.n	800ac08 <TIM_OC4_SetConfig+0x74>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a2b      	ldr	r2, [pc, #172]	; (800aca8 <TIM_OC4_SetConfig+0x114>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d003      	beq.n	800ac08 <TIM_OC4_SetConfig+0x74>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a2a      	ldr	r2, [pc, #168]	; (800acac <TIM_OC4_SetConfig+0x118>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d10d      	bne.n	800ac24 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	031b      	lsls	r3, r3, #12
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a1f      	ldr	r2, [pc, #124]	; (800aca4 <TIM_OC4_SetConfig+0x110>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d013      	beq.n	800ac54 <TIM_OC4_SetConfig+0xc0>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a1e      	ldr	r2, [pc, #120]	; (800aca8 <TIM_OC4_SetConfig+0x114>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00f      	beq.n	800ac54 <TIM_OC4_SetConfig+0xc0>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a1e      	ldr	r2, [pc, #120]	; (800acb0 <TIM_OC4_SetConfig+0x11c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d00b      	beq.n	800ac54 <TIM_OC4_SetConfig+0xc0>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a1d      	ldr	r2, [pc, #116]	; (800acb4 <TIM_OC4_SetConfig+0x120>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d007      	beq.n	800ac54 <TIM_OC4_SetConfig+0xc0>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a1c      	ldr	r2, [pc, #112]	; (800acb8 <TIM_OC4_SetConfig+0x124>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d003      	beq.n	800ac54 <TIM_OC4_SetConfig+0xc0>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a17      	ldr	r2, [pc, #92]	; (800acac <TIM_OC4_SetConfig+0x118>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d113      	bne.n	800ac7c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	019b      	lsls	r3, r3, #6
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	019b      	lsls	r3, r3, #6
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	621a      	str	r2, [r3, #32]
}
 800ac96:	bf00      	nop
 800ac98:	371c      	adds	r7, #28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	40012c00 	.word	0x40012c00
 800aca8:	40013400 	.word	0x40013400
 800acac:	40015000 	.word	0x40015000
 800acb0:	40014000 	.word	0x40014000
 800acb4:	40014400 	.word	0x40014400
 800acb8:	40014800 	.word	0x40014800

0800acbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	041b      	lsls	r3, r3, #16
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a19      	ldr	r2, [pc, #100]	; (800ad78 <TIM_OC5_SetConfig+0xbc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <TIM_OC5_SetConfig+0x82>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a18      	ldr	r2, [pc, #96]	; (800ad7c <TIM_OC5_SetConfig+0xc0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00f      	beq.n	800ad3e <TIM_OC5_SetConfig+0x82>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a17      	ldr	r2, [pc, #92]	; (800ad80 <TIM_OC5_SetConfig+0xc4>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00b      	beq.n	800ad3e <TIM_OC5_SetConfig+0x82>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a16      	ldr	r2, [pc, #88]	; (800ad84 <TIM_OC5_SetConfig+0xc8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d007      	beq.n	800ad3e <TIM_OC5_SetConfig+0x82>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a15      	ldr	r2, [pc, #84]	; (800ad88 <TIM_OC5_SetConfig+0xcc>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d003      	beq.n	800ad3e <TIM_OC5_SetConfig+0x82>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a14      	ldr	r2, [pc, #80]	; (800ad8c <TIM_OC5_SetConfig+0xd0>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d109      	bne.n	800ad52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	621a      	str	r2, [r3, #32]
}
 800ad6c:	bf00      	nop
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	40012c00 	.word	0x40012c00
 800ad7c:	40013400 	.word	0x40013400
 800ad80:	40014000 	.word	0x40014000
 800ad84:	40014400 	.word	0x40014400
 800ad88:	40014800 	.word	0x40014800
 800ad8c:	40015000 	.word	0x40015000

0800ad90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b087      	sub	sp, #28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	021b      	lsls	r3, r3, #8
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	4313      	orrs	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800add6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	051b      	lsls	r3, r3, #20
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a1a      	ldr	r2, [pc, #104]	; (800ae50 <TIM_OC6_SetConfig+0xc0>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d013      	beq.n	800ae14 <TIM_OC6_SetConfig+0x84>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <TIM_OC6_SetConfig+0xc4>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00f      	beq.n	800ae14 <TIM_OC6_SetConfig+0x84>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a18      	ldr	r2, [pc, #96]	; (800ae58 <TIM_OC6_SetConfig+0xc8>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00b      	beq.n	800ae14 <TIM_OC6_SetConfig+0x84>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a17      	ldr	r2, [pc, #92]	; (800ae5c <TIM_OC6_SetConfig+0xcc>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d007      	beq.n	800ae14 <TIM_OC6_SetConfig+0x84>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a16      	ldr	r2, [pc, #88]	; (800ae60 <TIM_OC6_SetConfig+0xd0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d003      	beq.n	800ae14 <TIM_OC6_SetConfig+0x84>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a15      	ldr	r2, [pc, #84]	; (800ae64 <TIM_OC6_SetConfig+0xd4>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d109      	bne.n	800ae28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	029b      	lsls	r3, r3, #10
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	621a      	str	r2, [r3, #32]
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40012c00 	.word	0x40012c00
 800ae54:	40013400 	.word	0x40013400
 800ae58:	40014000 	.word	0x40014000
 800ae5c:	40014400 	.word	0x40014400
 800ae60:	40014800 	.word	0x40014800
 800ae64:	40015000 	.word	0x40015000

0800ae68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae88:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae9a:	f023 0307 	bic.w	r3, r3, #7
 800ae9e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	4a56      	ldr	r2, [pc, #344]	; (800b010 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	f000 80a2 	beq.w	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800aebe:	4a54      	ldr	r2, [pc, #336]	; (800b010 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	f200 809b 	bhi.w	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800aec6:	4a53      	ldr	r2, [pc, #332]	; (800b014 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	f000 809a 	beq.w	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800aece:	4a51      	ldr	r2, [pc, #324]	; (800b014 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	f200 8093 	bhi.w	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800aed6:	4a50      	ldr	r2, [pc, #320]	; (800b018 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	f000 8092 	beq.w	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800aede:	4a4e      	ldr	r2, [pc, #312]	; (800b018 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	f200 808b 	bhi.w	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800aee6:	4a4d      	ldr	r2, [pc, #308]	; (800b01c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	f000 808a 	beq.w	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800aeee:	4a4b      	ldr	r2, [pc, #300]	; (800b01c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	f200 8083 	bhi.w	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800aef6:	4a4a      	ldr	r2, [pc, #296]	; (800b020 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	f000 8082 	beq.w	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800aefe:	4a48      	ldr	r2, [pc, #288]	; (800b020 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d87b      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af04:	4a47      	ldr	r2, [pc, #284]	; (800b024 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d07b      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af0a:	4a46      	ldr	r2, [pc, #280]	; (800b024 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d875      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af14:	d075      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af16:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af1a:	d86f      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af20:	d06f      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af26:	d869      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af28:	2b70      	cmp	r3, #112	; 0x70
 800af2a:	d01a      	beq.n	800af62 <TIM_SlaveTimer_SetConfig+0xfa>
 800af2c:	2b70      	cmp	r3, #112	; 0x70
 800af2e:	d865      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af30:	2b60      	cmp	r3, #96	; 0x60
 800af32:	d059      	beq.n	800afe8 <TIM_SlaveTimer_SetConfig+0x180>
 800af34:	2b60      	cmp	r3, #96	; 0x60
 800af36:	d861      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af38:	2b50      	cmp	r3, #80	; 0x50
 800af3a:	d04b      	beq.n	800afd4 <TIM_SlaveTimer_SetConfig+0x16c>
 800af3c:	2b50      	cmp	r3, #80	; 0x50
 800af3e:	d85d      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af40:	2b40      	cmp	r3, #64	; 0x40
 800af42:	d019      	beq.n	800af78 <TIM_SlaveTimer_SetConfig+0x110>
 800af44:	2b40      	cmp	r3, #64	; 0x40
 800af46:	d859      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af48:	2b30      	cmp	r3, #48	; 0x30
 800af4a:	d05a      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af4c:	2b30      	cmp	r3, #48	; 0x30
 800af4e:	d855      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af50:	2b20      	cmp	r3, #32
 800af52:	d056      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af54:	2b20      	cmp	r3, #32
 800af56:	d851      	bhi.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d052      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af5c:	2b10      	cmp	r3, #16
 800af5e:	d050      	beq.n	800b002 <TIM_SlaveTimer_SetConfig+0x19a>
 800af60:	e04c      	b.n	800affc <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68d9      	ldr	r1, [r3, #12]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	689a      	ldr	r2, [r3, #8]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	f000 f8b8 	bl	800b0e6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800af76:	e045      	b.n	800b004 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d004      	beq.n	800af8a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800af84:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800af88:	d101      	bne.n	800af8e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e03b      	b.n	800b006 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6a1a      	ldr	r2, [r3, #32]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 0201 	bic.w	r2, r2, #1
 800afa4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	621a      	str	r2, [r3, #32]
      break;
 800afd2:	e017      	b.n	800b004 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	6899      	ldr	r1, [r3, #8]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	461a      	mov	r2, r3
 800afe2:	f000 f821 	bl	800b028 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800afe6:	e00d      	b.n	800b004 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6818      	ldr	r0, [r3, #0]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6899      	ldr	r1, [r3, #8]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	461a      	mov	r2, r3
 800aff6:	f000 f846 	bl	800b086 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800affa:	e003      	b.n	800b004 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
      break;
 800b000:	e000      	b.n	800b004 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800b002:	bf00      	nop
  }

  return status;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	00100070 	.word	0x00100070
 800b014:	00100060 	.word	0x00100060
 800b018:	00100050 	.word	0x00100050
 800b01c:	00100040 	.word	0x00100040
 800b020:	00100030 	.word	0x00100030
 800b024:	00100020 	.word	0x00100020

0800b028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	f023 0201 	bic.w	r2, r3, #1
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	011b      	lsls	r3, r3, #4
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f023 030a 	bic.w	r3, r3, #10
 800b064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	621a      	str	r2, [r3, #32]
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b086:	b480      	push	{r7}
 800b088:	b087      	sub	sp, #28
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	f023 0210 	bic.w	r2, r3, #16
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	031b      	lsls	r3, r3, #12
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b087      	sub	sp, #28
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
 800b0f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b100:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	021a      	lsls	r2, r3, #8
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	431a      	orrs	r2, r3
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	4313      	orrs	r3, r2
 800b112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	609a      	str	r2, [r3, #8]
}
 800b11a:	bf00      	nop
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b126:	b480      	push	{r7}
 800b128:	b087      	sub	sp, #28
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	60b9      	str	r1, [r7, #8]
 800b130:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f003 031f 	and.w	r3, r3, #31
 800b138:	2201      	movs	r2, #1
 800b13a:	fa02 f303 	lsl.w	r3, r2, r3
 800b13e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6a1a      	ldr	r2, [r3, #32]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	43db      	mvns	r3, r3
 800b148:	401a      	ands	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a1a      	ldr	r2, [r3, #32]
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f003 031f 	and.w	r3, r3, #31
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	431a      	orrs	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	621a      	str	r2, [r3, #32]
}
 800b164:	bf00      	nop
 800b166:	371c      	adds	r7, #28
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d109      	bne.n	800b194 <HAL_TIMEx_PWMN_Start+0x24>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b01      	cmp	r3, #1
 800b18a:	bf14      	ite	ne
 800b18c:	2301      	movne	r3, #1
 800b18e:	2300      	moveq	r3, #0
 800b190:	b2db      	uxtb	r3, r3
 800b192:	e022      	b.n	800b1da <HAL_TIMEx_PWMN_Start+0x6a>
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2b04      	cmp	r3, #4
 800b198:	d109      	bne.n	800b1ae <HAL_TIMEx_PWMN_Start+0x3e>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	bf14      	ite	ne
 800b1a6:	2301      	movne	r3, #1
 800b1a8:	2300      	moveq	r3, #0
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	e015      	b.n	800b1da <HAL_TIMEx_PWMN_Start+0x6a>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d109      	bne.n	800b1c8 <HAL_TIMEx_PWMN_Start+0x58>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	bf14      	ite	ne
 800b1c0:	2301      	movne	r3, #1
 800b1c2:	2300      	moveq	r3, #0
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	e008      	b.n	800b1da <HAL_TIMEx_PWMN_Start+0x6a>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	bf14      	ite	ne
 800b1d4:	2301      	movne	r3, #1
 800b1d6:	2300      	moveq	r3, #0
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e073      	b.n	800b2ca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d104      	bne.n	800b1f2 <HAL_TIMEx_PWMN_Start+0x82>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1f0:	e013      	b.n	800b21a <HAL_TIMEx_PWMN_Start+0xaa>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d104      	bne.n	800b202 <HAL_TIMEx_PWMN_Start+0x92>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b200:	e00b      	b.n	800b21a <HAL_TIMEx_PWMN_Start+0xaa>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b08      	cmp	r3, #8
 800b206:	d104      	bne.n	800b212 <HAL_TIMEx_PWMN_Start+0xa2>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b210:	e003      	b.n	800b21a <HAL_TIMEx_PWMN_Start+0xaa>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2202      	movs	r2, #2
 800b216:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2204      	movs	r2, #4
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fb16 	bl	800b854 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a25      	ldr	r2, [pc, #148]	; (800b2d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d022      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b24a:	d01d      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a21      	ldr	r2, [pc, #132]	; (800b2d8 <HAL_TIMEx_PWMN_Start+0x168>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d018      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a20      	ldr	r2, [pc, #128]	; (800b2dc <HAL_TIMEx_PWMN_Start+0x16c>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d013      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a1e      	ldr	r2, [pc, #120]	; (800b2e0 <HAL_TIMEx_PWMN_Start+0x170>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d00e      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <HAL_TIMEx_PWMN_Start+0x174>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d009      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a1b      	ldr	r2, [pc, #108]	; (800b2e8 <HAL_TIMEx_PWMN_Start+0x178>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <HAL_TIMEx_PWMN_Start+0x118>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a1a      	ldr	r2, [pc, #104]	; (800b2ec <HAL_TIMEx_PWMN_Start+0x17c>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d115      	bne.n	800b2b4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	4b18      	ldr	r3, [pc, #96]	; (800b2f0 <HAL_TIMEx_PWMN_Start+0x180>)
 800b290:	4013      	ands	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b06      	cmp	r3, #6
 800b298:	d015      	beq.n	800b2c6 <HAL_TIMEx_PWMN_Start+0x156>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a0:	d011      	beq.n	800b2c6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f042 0201 	orr.w	r2, r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b2:	e008      	b.n	800b2c6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f042 0201 	orr.w	r2, r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e000      	b.n	800b2c8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	40012c00 	.word	0x40012c00
 800b2d8:	40000400 	.word	0x40000400
 800b2dc:	40000800 	.word	0x40000800
 800b2e0:	40000c00 	.word	0x40000c00
 800b2e4:	40013400 	.word	0x40013400
 800b2e8:	40014000 	.word	0x40014000
 800b2ec:	40015000 	.word	0x40015000
 800b2f0:	00010007 	.word	0x00010007

0800b2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b304:	2b01      	cmp	r3, #1
 800b306:	d101      	bne.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b308:	2302      	movs	r3, #2
 800b30a:	e074      	b.n	800b3f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a34      	ldr	r2, [pc, #208]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d009      	beq.n	800b34a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a33      	ldr	r2, [pc, #204]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d004      	beq.n	800b34a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a31      	ldr	r2, [pc, #196]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d108      	bne.n	800b35c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b350:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	4313      	orrs	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a21      	ldr	r2, [pc, #132]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d022      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38c:	d01d      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d018      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a1d      	ldr	r2, [pc, #116]	; (800b414 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d013      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a1c      	ldr	r2, [pc, #112]	; (800b418 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00e      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a15      	ldr	r2, [pc, #84]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d009      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a18      	ldr	r2, [pc, #96]	; (800b41c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d004      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a11      	ldr	r2, [pc, #68]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d10c      	bne.n	800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40012c00 	.word	0x40012c00
 800b408:	40013400 	.word	0x40013400
 800b40c:	40015000 	.word	0x40015000
 800b410:	40000400 	.word	0x40000400
 800b414:	40000800 	.word	0x40000800
 800b418:	40000c00 	.word	0x40000c00
 800b41c:	40014000 	.word	0x40014000

0800b420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b434:	2b01      	cmp	r3, #1
 800b436:	d101      	bne.n	800b43c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b438:	2302      	movs	r3, #2
 800b43a:	e096      	b.n	800b56a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	041b      	lsls	r3, r3, #16
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a2f      	ldr	r2, [pc, #188]	; (800b578 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d009      	beq.n	800b4d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a2d      	ldr	r2, [pc, #180]	; (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d004      	beq.n	800b4d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a2c      	ldr	r2, [pc, #176]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d106      	bne.n	800b4e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a24      	ldr	r2, [pc, #144]	; (800b578 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d009      	beq.n	800b500 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a22      	ldr	r2, [pc, #136]	; (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d004      	beq.n	800b500 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a21      	ldr	r2, [pc, #132]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d12b      	bne.n	800b558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50a:	051b      	lsls	r3, r3, #20
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	4313      	orrs	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a11      	ldr	r2, [pc, #68]	; (800b578 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d009      	beq.n	800b54a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a10      	ldr	r2, [pc, #64]	; (800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d004      	beq.n	800b54a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a0e      	ldr	r2, [pc, #56]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d106      	bne.n	800b558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	40012c00 	.word	0x40012c00
 800b57c:	40013400 	.word	0x40013400
 800b580:	40015000 	.word	0x40015000

0800b584 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b584:	b480      	push	{r7}
 800b586:	b08b      	sub	sp, #44	; 0x2c
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d101      	bne.n	800b5a4 <HAL_TIMEx_ConfigBreakInput+0x20>
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e10b      	b.n	800b7bc <HAL_TIMEx_ConfigBreakInput+0x238>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b80      	cmp	r3, #128	; 0x80
 800b5b2:	f000 8096 	beq.w	800b6e2 <HAL_TIMEx_ConfigBreakInput+0x15e>
 800b5b6:	2b80      	cmp	r3, #128	; 0x80
 800b5b8:	f200 809c 	bhi.w	800b6f4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d849      	bhi.n	800b654 <HAL_TIMEx_ConfigBreakInput+0xd0>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 8097 	beq.w	800b6f4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	2b1f      	cmp	r3, #31
 800b5ca:	f200 8093 	bhi.w	800b6f4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800b5ce:	a201      	add	r2, pc, #4	; (adr r2, 800b5d4 <HAL_TIMEx_ConfigBreakInput+0x50>)
 800b5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d4:	0800b65b 	.word	0x0800b65b
 800b5d8:	0800b66f 	.word	0x0800b66f
 800b5dc:	0800b6f5 	.word	0x0800b6f5
 800b5e0:	0800b683 	.word	0x0800b683
 800b5e4:	0800b6f5 	.word	0x0800b6f5
 800b5e8:	0800b6f5 	.word	0x0800b6f5
 800b5ec:	0800b6f5 	.word	0x0800b6f5
 800b5f0:	0800b697 	.word	0x0800b697
 800b5f4:	0800b6f5 	.word	0x0800b6f5
 800b5f8:	0800b6f5 	.word	0x0800b6f5
 800b5fc:	0800b6f5 	.word	0x0800b6f5
 800b600:	0800b6f5 	.word	0x0800b6f5
 800b604:	0800b6f5 	.word	0x0800b6f5
 800b608:	0800b6f5 	.word	0x0800b6f5
 800b60c:	0800b6f5 	.word	0x0800b6f5
 800b610:	0800b6ab 	.word	0x0800b6ab
 800b614:	0800b6f5 	.word	0x0800b6f5
 800b618:	0800b6f5 	.word	0x0800b6f5
 800b61c:	0800b6f5 	.word	0x0800b6f5
 800b620:	0800b6f5 	.word	0x0800b6f5
 800b624:	0800b6f5 	.word	0x0800b6f5
 800b628:	0800b6f5 	.word	0x0800b6f5
 800b62c:	0800b6f5 	.word	0x0800b6f5
 800b630:	0800b6f5 	.word	0x0800b6f5
 800b634:	0800b6f5 	.word	0x0800b6f5
 800b638:	0800b6f5 	.word	0x0800b6f5
 800b63c:	0800b6f5 	.word	0x0800b6f5
 800b640:	0800b6f5 	.word	0x0800b6f5
 800b644:	0800b6f5 	.word	0x0800b6f5
 800b648:	0800b6f5 	.word	0x0800b6f5
 800b64c:	0800b6f5 	.word	0x0800b6f5
 800b650:	0800b6bf 	.word	0x0800b6bf
 800b654:	2b40      	cmp	r3, #64	; 0x40
 800b656:	d03b      	beq.n	800b6d0 <HAL_TIMEx_ConfigBreakInput+0x14c>
 800b658:	e04c      	b.n	800b6f4 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b65a:	2301      	movs	r3, #1
 800b65c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b65e:	2300      	movs	r3, #0
 800b660:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b662:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b666:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b668:	2309      	movs	r3, #9
 800b66a:	617b      	str	r3, [r7, #20]
      break;
 800b66c:	e04b      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b66e:	2302      	movs	r3, #2
 800b670:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b672:	2301      	movs	r3, #1
 800b674:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b67a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b67c:	230a      	movs	r3, #10
 800b67e:	617b      	str	r3, [r7, #20]
      break;
 800b680:	e041      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b682:	2304      	movs	r3, #4
 800b684:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b686:	2302      	movs	r3, #2
 800b688:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b68a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b68e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b690:	230b      	movs	r3, #11
 800b692:	617b      	str	r3, [r7, #20]
      break;
 800b694:	e037      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800b696:	2308      	movs	r3, #8
 800b698:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800b69a:	2303      	movs	r3, #3
 800b69c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800b69e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	617b      	str	r3, [r7, #20]
      break;
 800b6a8:	e02d      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800b6aa:	2310      	movs	r3, #16
 800b6ac:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800b6ae:	2304      	movs	r3, #4
 800b6b0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800b6b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6b6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800b6b8:	230d      	movs	r3, #13
 800b6ba:	617b      	str	r3, [r7, #20]
      break;
 800b6bc:	e023      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800b6be:	2320      	movs	r3, #32
 800b6c0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800b6c2:	2305      	movs	r3, #5
 800b6c4:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
      break;
 800b6ce:	e01a      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 800b6d0:	2340      	movs	r3, #64	; 0x40
 800b6d2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800b6d4:	2306      	movs	r3, #6
 800b6d6:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]
      break;
 800b6e0:	e011      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800b6e2:	2380      	movs	r3, #128	; 0x80
 800b6e4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800b6e6:	2307      	movs	r3, #7
 800b6e8:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	617b      	str	r3, [r7, #20]
      break;
 800b6f2:	e008      	b.n	800b706 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
      break;
 800b704:	bf00      	nop
    }
  }

  switch (BreakInput)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d003      	beq.n	800b714 <HAL_TIMEx_ConfigBreakInput+0x190>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d025      	beq.n	800b75e <HAL_TIMEx_ConfigBreakInput+0x1da>
 800b712:	e049      	b.n	800b7a8 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b71a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	43db      	mvns	r3, r3
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	4013      	ands	r3, r2
 800b724:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	409a      	lsls	r2, r3
 800b72e:	6a3b      	ldr	r3, [r7, #32]
 800b730:	4013      	ands	r3, r2
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	4313      	orrs	r3, r2
 800b736:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	43db      	mvns	r3, r3
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	4013      	ands	r3, r2
 800b740:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	409a      	lsls	r2, r3
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	4013      	ands	r3, r2
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b75c:	e028      	b.n	800b7b0 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b764:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	43db      	mvns	r3, r3
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	4013      	ands	r3, r2
 800b76e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	409a      	lsls	r2, r3
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	4013      	ands	r3, r2
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	4313      	orrs	r3, r2
 800b780:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	43db      	mvns	r3, r3
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	4013      	ands	r3, r2
 800b78a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	409a      	lsls	r2, r3
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	4013      	ands	r3, r2
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b7a6:	e003      	b.n	800b7b0 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b7ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	372c      	adds	r7, #44	; 0x2c
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	f003 031f 	and.w	r3, r3, #31
 800b866:	2204      	movs	r2, #4
 800b868:	fa02 f303 	lsl.w	r3, r2, r3
 800b86c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6a1a      	ldr	r2, [r3, #32]
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	43db      	mvns	r3, r3
 800b876:	401a      	ands	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6a1a      	ldr	r2, [r3, #32]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	f003 031f 	and.w	r3, r3, #31
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	fa01 f303 	lsl.w	r3, r1, r3
 800b88c:	431a      	orrs	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	621a      	str	r2, [r3, #32]
}
 800b892:	bf00      	nop
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e042      	b.n	800b936 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d106      	bne.n	800b8c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7f8 fcb4 	bl	8004230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2224      	movs	r2, #36	; 0x24
 800b8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 0201 	bic.w	r2, r2, #1
 800b8de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fbf7 	bl	800c0d4 <UART_SetConfig>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d101      	bne.n	800b8f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e022      	b.n	800b936 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fee7 	bl	800c6cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b90c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b91c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f042 0201 	orr.w	r2, r2, #1
 800b92c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 ff6e 	bl	800c810 <UART_CheckIdleState>
 800b934:	4603      	mov	r3, r0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
	...

0800b940 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08a      	sub	sp, #40	; 0x28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b954:	2b20      	cmp	r3, #32
 800b956:	d17a      	bne.n	800ba4e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d002      	beq.n	800b964 <HAL_UART_Transmit_DMA+0x24>
 800b95e:	88fb      	ldrh	r3, [r7, #6]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e073      	b.n	800ba50 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d101      	bne.n	800b976 <HAL_UART_Transmit_DMA+0x36>
 800b972:	2302      	movs	r3, #2
 800b974:	e06c      	b.n	800ba50 <HAL_UART_Transmit_DMA+0x110>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	88fa      	ldrh	r2, [r7, #6]
 800b988:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	88fa      	ldrh	r2, [r7, #6]
 800b990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2221      	movs	r2, #33	; 0x21
 800b9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d02c      	beq.n	800ba06 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9b0:	4a29      	ldr	r2, [pc, #164]	; (800ba58 <HAL_UART_Transmit_DMA+0x118>)
 800b9b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9b8:	4a28      	ldr	r2, [pc, #160]	; (800ba5c <HAL_UART_Transmit_DMA+0x11c>)
 800b9ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c0:	4a27      	ldr	r2, [pc, #156]	; (800ba60 <HAL_UART_Transmit_DMA+0x120>)
 800b9c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3328      	adds	r3, #40	; 0x28
 800b9dc:	461a      	mov	r2, r3
 800b9de:	88fb      	ldrh	r3, [r7, #6]
 800b9e0:	f7fa fddc 	bl	800659c <HAL_DMA_Start_IT>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00d      	beq.n	800ba06 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2210      	movs	r2, #16
 800b9ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e024      	b.n	800ba50 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2240      	movs	r2, #64	; 0x40
 800ba0c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	613b      	str	r3, [r7, #16]
   return(result);
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3308      	adds	r3, #8
 800ba34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba36:	623a      	str	r2, [r7, #32]
 800ba38:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3a:	69f9      	ldr	r1, [r7, #28]
 800ba3c:	6a3a      	ldr	r2, [r7, #32]
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e5      	bne.n	800ba16 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e000      	b.n	800ba50 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ba4e:	2302      	movs	r3, #2
  }
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3728      	adds	r7, #40	; 0x28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	0800cb85 	.word	0x0800cb85
 800ba5c:	0800cc1f 	.word	0x0800cc1f
 800ba60:	0800cc3b 	.word	0x0800cc3b

0800ba64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b0ba      	sub	sp, #232	; 0xe8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ba8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba92:	4013      	ands	r3, r2
 800ba94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ba98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11b      	bne.n	800bad8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa4:	f003 0320 	and.w	r3, r3, #32
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d015      	beq.n	800bad8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800baac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d105      	bne.n	800bac4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800babc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d009      	beq.n	800bad8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 82d6 	beq.w	800c07a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	4798      	blx	r3
      }
      return;
 800bad6:	e2d0      	b.n	800c07a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 811f 	beq.w	800bd20 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bae2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bae6:	4b8b      	ldr	r3, [pc, #556]	; (800bd14 <HAL_UART_IRQHandler+0x2b0>)
 800bae8:	4013      	ands	r3, r2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d106      	bne.n	800bafc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800baee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800baf2:	4b89      	ldr	r3, [pc, #548]	; (800bd18 <HAL_UART_IRQHandler+0x2b4>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f000 8112 	beq.w	800bd20 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d011      	beq.n	800bb2c <HAL_UART_IRQHandler+0xc8>
 800bb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb22:	f043 0201 	orr.w	r2, r3, #1
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb30:	f003 0302 	and.w	r3, r3, #2
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d011      	beq.n	800bb5c <HAL_UART_IRQHandler+0xf8>
 800bb38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2202      	movs	r2, #2
 800bb4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb52:	f043 0204 	orr.w	r2, r3, #4
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d011      	beq.n	800bb8c <HAL_UART_IRQHandler+0x128>
 800bb68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00b      	beq.n	800bb8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2204      	movs	r2, #4
 800bb7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb82:	f043 0202 	orr.w	r2, r3, #2
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb90:	f003 0308 	and.w	r3, r3, #8
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d017      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb9c:	f003 0320 	and.w	r3, r3, #32
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bba4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bba8:	4b5a      	ldr	r3, [pc, #360]	; (800bd14 <HAL_UART_IRQHandler+0x2b0>)
 800bbaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00b      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2208      	movs	r2, #8
 800bbb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbbe:	f043 0208 	orr.w	r2, r3, #8
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d012      	beq.n	800bbfa <HAL_UART_IRQHandler+0x196>
 800bbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00c      	beq.n	800bbfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbf0:	f043 0220 	orr.w	r2, r3, #32
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 823c 	beq.w	800c07e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0a:	f003 0320 	and.w	r3, r3, #32
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d013      	beq.n	800bc3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d105      	bne.n	800bc2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d007      	beq.n	800bc3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4e:	2b40      	cmp	r3, #64	; 0x40
 800bc50:	d005      	beq.n	800bc5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d04f      	beq.n	800bcfe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 ff2a 	bl	800cab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6e:	2b40      	cmp	r3, #64	; 0x40
 800bc70:	d141      	bne.n	800bcf6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc80:	e853 3f00 	ldrex	r3, [r3]
 800bc84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcae:	e841 2300 	strex	r3, r2, [r1]
 800bcb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1d9      	bne.n	800bc72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d013      	beq.n	800bcee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcca:	4a14      	ldr	r2, [pc, #80]	; (800bd1c <HAL_UART_IRQHandler+0x2b8>)
 800bccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fa fd36 	bl	8006744 <HAL_DMA_Abort_IT>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d017      	beq.n	800bd0e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bce8:	4610      	mov	r0, r2
 800bcea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcec:	e00f      	b.n	800bd0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f9da 	bl	800c0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf4:	e00b      	b.n	800bd0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f9d6 	bl	800c0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcfc:	e007      	b.n	800bd0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f9d2 	bl	800c0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd0c:	e1b7      	b.n	800c07e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd0e:	bf00      	nop
    return;
 800bd10:	e1b5      	b.n	800c07e <HAL_UART_IRQHandler+0x61a>
 800bd12:	bf00      	nop
 800bd14:	10000001 	.word	0x10000001
 800bd18:	04000120 	.word	0x04000120
 800bd1c:	0800ccbb 	.word	0x0800ccbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	f040 814a 	bne.w	800bfbe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd2e:	f003 0310 	and.w	r3, r3, #16
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 8143 	beq.w	800bfbe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 813c 	beq.w	800bfbe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2210      	movs	r2, #16
 800bd4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd58:	2b40      	cmp	r3, #64	; 0x40
 800bd5a:	f040 80b5 	bne.w	800bec8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 8187 	beq.w	800c082 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	f080 817f 	bcs.w	800c082 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0320 	and.w	r3, r3, #32
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f040 8086 	bne.w	800beac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdac:	e853 3f00 	ldrex	r3, [r3]
 800bdb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bdb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bdd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bdda:	e841 2300 	strex	r3, r2, [r1]
 800bdde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bde2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1da      	bne.n	800bda0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdf4:	e853 3f00 	ldrex	r3, [r3]
 800bdf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bdfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3308      	adds	r3, #8
 800be0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be1a:	e841 2300 	strex	r3, r2, [r1]
 800be1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1e1      	bne.n	800bdea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3308      	adds	r3, #8
 800be2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be30:	e853 3f00 	ldrex	r3, [r3]
 800be34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be52:	e841 2300 	strex	r3, r2, [r1]
 800be56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1e3      	bne.n	800be26 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2220      	movs	r2, #32
 800be62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be74:	e853 3f00 	ldrex	r3, [r3]
 800be78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be7c:	f023 0310 	bic.w	r3, r3, #16
 800be80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	461a      	mov	r2, r3
 800be8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800be90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be96:	e841 2300 	strex	r3, r2, [r1]
 800be9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e4      	bne.n	800be6c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fa fbf3 	bl	8006692 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800beb8:	b29b      	uxth	r3, r3
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f8fb 	bl	800c0bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bec6:	e0dc      	b.n	800c082 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 80ce 	beq.w	800c086 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800beea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 80c9 	beq.w	800c086 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
 800bf12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf16:	647b      	str	r3, [r7, #68]	; 0x44
 800bf18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf1e:	e841 2300 	strex	r3, r2, [r1]
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1e4      	bne.n	800bef4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	623b      	str	r3, [r7, #32]
   return(result);
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf40:	f023 0301 	bic.w	r3, r3, #1
 800bf44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3308      	adds	r3, #8
 800bf4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf52:	633a      	str	r2, [r7, #48]	; 0x30
 800bf54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf5a:	e841 2300 	strex	r3, r2, [r1]
 800bf5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e1      	bne.n	800bf2a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	e853 3f00 	ldrex	r3, [r3]
 800bf86:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0310 	bic.w	r3, r3, #16
 800bf8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf9c:	61fb      	str	r3, [r7, #28]
 800bf9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa0:	69b9      	ldr	r1, [r7, #24]
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	e841 2300 	strex	r3, r2, [r1]
 800bfa8:	617b      	str	r3, [r7, #20]
   return(result);
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e4      	bne.n	800bf7a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f880 	bl	800c0bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfbc:	e063      	b.n	800c086 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00e      	beq.n	800bfe8 <HAL_UART_IRQHandler+0x584>
 800bfca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d008      	beq.n	800bfe8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bfde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 ff14 	bl	800ce0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfe6:	e051      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d014      	beq.n	800c01e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d105      	bne.n	800c00c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d008      	beq.n	800c01e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c010:	2b00      	cmp	r3, #0
 800c012:	d03a      	beq.n	800c08a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	4798      	blx	r3
    }
    return;
 800c01c:	e035      	b.n	800c08a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d009      	beq.n	800c03e <HAL_UART_IRQHandler+0x5da>
 800c02a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fe55 	bl	800cce6 <UART_EndTransmit_IT>
    return;
 800c03c:	e026      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d009      	beq.n	800c05e <HAL_UART_IRQHandler+0x5fa>
 800c04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c04e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 feed 	bl	800ce36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c05c:	e016      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d010      	beq.n	800c08c <HAL_UART_IRQHandler+0x628>
 800c06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	da0c      	bge.n	800c08c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fed5 	bl	800ce22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c078:	e008      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
      return;
 800c07a:	bf00      	nop
 800c07c:	e006      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
    return;
 800c07e:	bf00      	nop
 800c080:	e004      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
      return;
 800c082:	bf00      	nop
 800c084:	e002      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
      return;
 800c086:	bf00      	nop
 800c088:	e000      	b.n	800c08c <HAL_UART_IRQHandler+0x628>
    return;
 800c08a:	bf00      	nop
  }
}
 800c08c:	37e8      	adds	r7, #232	; 0xe8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop

0800c094 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c09c:	bf00      	nop
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0d8:	b08c      	sub	sp, #48	; 0x30
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	689a      	ldr	r2, [r3, #8]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	431a      	orrs	r2, r3
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	69db      	ldr	r3, [r3, #28]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4baa      	ldr	r3, [pc, #680]	; (800c3ac <UART_SetConfig+0x2d8>)
 800c104:	4013      	ands	r3, r2
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c10c:	430b      	orrs	r3, r1
 800c10e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	430a      	orrs	r2, r1
 800c124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a9f      	ldr	r2, [pc, #636]	; (800c3b0 <UART_SetConfig+0x2dc>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d004      	beq.n	800c140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c13c:	4313      	orrs	r3, r2
 800c13e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c14a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	6812      	ldr	r2, [r2, #0]
 800c152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c154:	430b      	orrs	r3, r1
 800c156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15e:	f023 010f 	bic.w	r1, r3, #15
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	430a      	orrs	r2, r1
 800c16c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a90      	ldr	r2, [pc, #576]	; (800c3b4 <UART_SetConfig+0x2e0>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d125      	bne.n	800c1c4 <UART_SetConfig+0xf0>
 800c178:	4b8f      	ldr	r3, [pc, #572]	; (800c3b8 <UART_SetConfig+0x2e4>)
 800c17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	2b03      	cmp	r3, #3
 800c184:	d81a      	bhi.n	800c1bc <UART_SetConfig+0xe8>
 800c186:	a201      	add	r2, pc, #4	; (adr r2, 800c18c <UART_SetConfig+0xb8>)
 800c188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18c:	0800c19d 	.word	0x0800c19d
 800c190:	0800c1ad 	.word	0x0800c1ad
 800c194:	0800c1a5 	.word	0x0800c1a5
 800c198:	0800c1b5 	.word	0x0800c1b5
 800c19c:	2301      	movs	r3, #1
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1a2:	e116      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1aa:	e112      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1b2:	e10e      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ba:	e10a      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c2:	e106      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a7c      	ldr	r2, [pc, #496]	; (800c3bc <UART_SetConfig+0x2e8>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d138      	bne.n	800c240 <UART_SetConfig+0x16c>
 800c1ce:	4b7a      	ldr	r3, [pc, #488]	; (800c3b8 <UART_SetConfig+0x2e4>)
 800c1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d4:	f003 030c 	and.w	r3, r3, #12
 800c1d8:	2b0c      	cmp	r3, #12
 800c1da:	d82d      	bhi.n	800c238 <UART_SetConfig+0x164>
 800c1dc:	a201      	add	r2, pc, #4	; (adr r2, 800c1e4 <UART_SetConfig+0x110>)
 800c1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e2:	bf00      	nop
 800c1e4:	0800c219 	.word	0x0800c219
 800c1e8:	0800c239 	.word	0x0800c239
 800c1ec:	0800c239 	.word	0x0800c239
 800c1f0:	0800c239 	.word	0x0800c239
 800c1f4:	0800c229 	.word	0x0800c229
 800c1f8:	0800c239 	.word	0x0800c239
 800c1fc:	0800c239 	.word	0x0800c239
 800c200:	0800c239 	.word	0x0800c239
 800c204:	0800c221 	.word	0x0800c221
 800c208:	0800c239 	.word	0x0800c239
 800c20c:	0800c239 	.word	0x0800c239
 800c210:	0800c239 	.word	0x0800c239
 800c214:	0800c231 	.word	0x0800c231
 800c218:	2300      	movs	r3, #0
 800c21a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c21e:	e0d8      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c220:	2302      	movs	r3, #2
 800c222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c226:	e0d4      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c228:	2304      	movs	r3, #4
 800c22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c22e:	e0d0      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c230:	2308      	movs	r3, #8
 800c232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c236:	e0cc      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c238:	2310      	movs	r3, #16
 800c23a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c23e:	e0c8      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a5e      	ldr	r2, [pc, #376]	; (800c3c0 <UART_SetConfig+0x2ec>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d125      	bne.n	800c296 <UART_SetConfig+0x1c2>
 800c24a:	4b5b      	ldr	r3, [pc, #364]	; (800c3b8 <UART_SetConfig+0x2e4>)
 800c24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c250:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c254:	2b30      	cmp	r3, #48	; 0x30
 800c256:	d016      	beq.n	800c286 <UART_SetConfig+0x1b2>
 800c258:	2b30      	cmp	r3, #48	; 0x30
 800c25a:	d818      	bhi.n	800c28e <UART_SetConfig+0x1ba>
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d00a      	beq.n	800c276 <UART_SetConfig+0x1a2>
 800c260:	2b20      	cmp	r3, #32
 800c262:	d814      	bhi.n	800c28e <UART_SetConfig+0x1ba>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <UART_SetConfig+0x19a>
 800c268:	2b10      	cmp	r3, #16
 800c26a:	d008      	beq.n	800c27e <UART_SetConfig+0x1aa>
 800c26c:	e00f      	b.n	800c28e <UART_SetConfig+0x1ba>
 800c26e:	2300      	movs	r3, #0
 800c270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c274:	e0ad      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c276:	2302      	movs	r3, #2
 800c278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c27c:	e0a9      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c27e:	2304      	movs	r3, #4
 800c280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c284:	e0a5      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c286:	2308      	movs	r3, #8
 800c288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c28c:	e0a1      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c28e:	2310      	movs	r3, #16
 800c290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c294:	e09d      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a4a      	ldr	r2, [pc, #296]	; (800c3c4 <UART_SetConfig+0x2f0>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d125      	bne.n	800c2ec <UART_SetConfig+0x218>
 800c2a0:	4b45      	ldr	r3, [pc, #276]	; (800c3b8 <UART_SetConfig+0x2e4>)
 800c2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2aa:	2bc0      	cmp	r3, #192	; 0xc0
 800c2ac:	d016      	beq.n	800c2dc <UART_SetConfig+0x208>
 800c2ae:	2bc0      	cmp	r3, #192	; 0xc0
 800c2b0:	d818      	bhi.n	800c2e4 <UART_SetConfig+0x210>
 800c2b2:	2b80      	cmp	r3, #128	; 0x80
 800c2b4:	d00a      	beq.n	800c2cc <UART_SetConfig+0x1f8>
 800c2b6:	2b80      	cmp	r3, #128	; 0x80
 800c2b8:	d814      	bhi.n	800c2e4 <UART_SetConfig+0x210>
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <UART_SetConfig+0x1f0>
 800c2be:	2b40      	cmp	r3, #64	; 0x40
 800c2c0:	d008      	beq.n	800c2d4 <UART_SetConfig+0x200>
 800c2c2:	e00f      	b.n	800c2e4 <UART_SetConfig+0x210>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2ca:	e082      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2d2:	e07e      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2da:	e07a      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c2dc:	2308      	movs	r3, #8
 800c2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e2:	e076      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c2e4:	2310      	movs	r3, #16
 800c2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2ea:	e072      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a35      	ldr	r2, [pc, #212]	; (800c3c8 <UART_SetConfig+0x2f4>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d12a      	bne.n	800c34c <UART_SetConfig+0x278>
 800c2f6:	4b30      	ldr	r3, [pc, #192]	; (800c3b8 <UART_SetConfig+0x2e4>)
 800c2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c304:	d01a      	beq.n	800c33c <UART_SetConfig+0x268>
 800c306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c30a:	d81b      	bhi.n	800c344 <UART_SetConfig+0x270>
 800c30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c310:	d00c      	beq.n	800c32c <UART_SetConfig+0x258>
 800c312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c316:	d815      	bhi.n	800c344 <UART_SetConfig+0x270>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <UART_SetConfig+0x250>
 800c31c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c320:	d008      	beq.n	800c334 <UART_SetConfig+0x260>
 800c322:	e00f      	b.n	800c344 <UART_SetConfig+0x270>
 800c324:	2300      	movs	r3, #0
 800c326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c32a:	e052      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c32c:	2302      	movs	r3, #2
 800c32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c332:	e04e      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c334:	2304      	movs	r3, #4
 800c336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c33a:	e04a      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c33c:	2308      	movs	r3, #8
 800c33e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c342:	e046      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c344:	2310      	movs	r3, #16
 800c346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c34a:	e042      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a17      	ldr	r2, [pc, #92]	; (800c3b0 <UART_SetConfig+0x2dc>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d13a      	bne.n	800c3cc <UART_SetConfig+0x2f8>
 800c356:	4b18      	ldr	r3, [pc, #96]	; (800c3b8 <UART_SetConfig+0x2e4>)
 800c358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c35c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c364:	d01a      	beq.n	800c39c <UART_SetConfig+0x2c8>
 800c366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c36a:	d81b      	bhi.n	800c3a4 <UART_SetConfig+0x2d0>
 800c36c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c370:	d00c      	beq.n	800c38c <UART_SetConfig+0x2b8>
 800c372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c376:	d815      	bhi.n	800c3a4 <UART_SetConfig+0x2d0>
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <UART_SetConfig+0x2b0>
 800c37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c380:	d008      	beq.n	800c394 <UART_SetConfig+0x2c0>
 800c382:	e00f      	b.n	800c3a4 <UART_SetConfig+0x2d0>
 800c384:	2300      	movs	r3, #0
 800c386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c38a:	e022      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c38c:	2302      	movs	r3, #2
 800c38e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c392:	e01e      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c394:	2304      	movs	r3, #4
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39a:	e01a      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c39c:	2308      	movs	r3, #8
 800c39e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3a2:	e016      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3aa:	e012      	b.n	800c3d2 <UART_SetConfig+0x2fe>
 800c3ac:	cfff69f3 	.word	0xcfff69f3
 800c3b0:	40008000 	.word	0x40008000
 800c3b4:	40013800 	.word	0x40013800
 800c3b8:	40021000 	.word	0x40021000
 800c3bc:	40004400 	.word	0x40004400
 800c3c0:	40004800 	.word	0x40004800
 800c3c4:	40004c00 	.word	0x40004c00
 800c3c8:	40005000 	.word	0x40005000
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4aae      	ldr	r2, [pc, #696]	; (800c690 <UART_SetConfig+0x5bc>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	f040 8097 	bne.w	800c50c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3e2:	2b08      	cmp	r3, #8
 800c3e4:	d823      	bhi.n	800c42e <UART_SetConfig+0x35a>
 800c3e6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ec <UART_SetConfig+0x318>)
 800c3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ec:	0800c411 	.word	0x0800c411
 800c3f0:	0800c42f 	.word	0x0800c42f
 800c3f4:	0800c419 	.word	0x0800c419
 800c3f8:	0800c42f 	.word	0x0800c42f
 800c3fc:	0800c41f 	.word	0x0800c41f
 800c400:	0800c42f 	.word	0x0800c42f
 800c404:	0800c42f 	.word	0x0800c42f
 800c408:	0800c42f 	.word	0x0800c42f
 800c40c:	0800c427 	.word	0x0800c427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c410:	f7fd f890 	bl	8009534 <HAL_RCC_GetPCLK1Freq>
 800c414:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c416:	e010      	b.n	800c43a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c418:	4b9e      	ldr	r3, [pc, #632]	; (800c694 <UART_SetConfig+0x5c0>)
 800c41a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c41c:	e00d      	b.n	800c43a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c41e:	f7fd f81b 	bl	8009458 <HAL_RCC_GetSysClockFreq>
 800c422:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c424:	e009      	b.n	800c43a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c42c:	e005      	b.n	800c43a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c42e:	2300      	movs	r3, #0
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 8130 	beq.w	800c6a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c446:	4a94      	ldr	r2, [pc, #592]	; (800c698 <UART_SetConfig+0x5c4>)
 800c448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c44c:	461a      	mov	r2, r3
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	fbb3 f3f2 	udiv	r3, r3, r2
 800c454:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	4613      	mov	r3, r2
 800c45c:	005b      	lsls	r3, r3, #1
 800c45e:	4413      	add	r3, r2
 800c460:	69ba      	ldr	r2, [r7, #24]
 800c462:	429a      	cmp	r2, r3
 800c464:	d305      	bcc.n	800c472 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d903      	bls.n	800c47a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c478:	e113      	b.n	800c6a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	2200      	movs	r2, #0
 800c47e:	60bb      	str	r3, [r7, #8]
 800c480:	60fa      	str	r2, [r7, #12]
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c486:	4a84      	ldr	r2, [pc, #528]	; (800c698 <UART_SetConfig+0x5c4>)
 800c488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	2200      	movs	r2, #0
 800c490:	603b      	str	r3, [r7, #0]
 800c492:	607a      	str	r2, [r7, #4]
 800c494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c498:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c49c:	f7f4 fc6c 	bl	8000d78 <__aeabi_uldivmod>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	f04f 0200 	mov.w	r2, #0
 800c4ac:	f04f 0300 	mov.w	r3, #0
 800c4b0:	020b      	lsls	r3, r1, #8
 800c4b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4b6:	0202      	lsls	r2, r0, #8
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	6849      	ldr	r1, [r1, #4]
 800c4bc:	0849      	lsrs	r1, r1, #1
 800c4be:	2000      	movs	r0, #0
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	eb12 0804 	adds.w	r8, r2, r4
 800c4c8:	eb43 0905 	adc.w	r9, r3, r5
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	469a      	mov	sl, r3
 800c4d4:	4693      	mov	fp, r2
 800c4d6:	4652      	mov	r2, sl
 800c4d8:	465b      	mov	r3, fp
 800c4da:	4640      	mov	r0, r8
 800c4dc:	4649      	mov	r1, r9
 800c4de:	f7f4 fc4b 	bl	8000d78 <__aeabi_uldivmod>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4f0:	d308      	bcc.n	800c504 <UART_SetConfig+0x430>
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4f8:	d204      	bcs.n	800c504 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6a3a      	ldr	r2, [r7, #32]
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	e0ce      	b.n	800c6a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c50a:	e0ca      	b.n	800c6a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c514:	d166      	bne.n	800c5e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c51a:	2b08      	cmp	r3, #8
 800c51c:	d827      	bhi.n	800c56e <UART_SetConfig+0x49a>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <UART_SetConfig+0x450>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c549 	.word	0x0800c549
 800c528:	0800c551 	.word	0x0800c551
 800c52c:	0800c559 	.word	0x0800c559
 800c530:	0800c56f 	.word	0x0800c56f
 800c534:	0800c55f 	.word	0x0800c55f
 800c538:	0800c56f 	.word	0x0800c56f
 800c53c:	0800c56f 	.word	0x0800c56f
 800c540:	0800c56f 	.word	0x0800c56f
 800c544:	0800c567 	.word	0x0800c567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c548:	f7fc fff4 	bl	8009534 <HAL_RCC_GetPCLK1Freq>
 800c54c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c54e:	e014      	b.n	800c57a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c550:	f7fd f806 	bl	8009560 <HAL_RCC_GetPCLK2Freq>
 800c554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c556:	e010      	b.n	800c57a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c558:	4b4e      	ldr	r3, [pc, #312]	; (800c694 <UART_SetConfig+0x5c0>)
 800c55a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c55c:	e00d      	b.n	800c57a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c55e:	f7fc ff7b 	bl	8009458 <HAL_RCC_GetSysClockFreq>
 800c562:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c564:	e009      	b.n	800c57a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c56a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c56c:	e005      	b.n	800c57a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c56e:	2300      	movs	r3, #0
 800c570:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 8090 	beq.w	800c6a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c586:	4a44      	ldr	r2, [pc, #272]	; (800c698 <UART_SetConfig+0x5c4>)
 800c588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c58c:	461a      	mov	r2, r3
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	fbb3 f3f2 	udiv	r3, r3, r2
 800c594:	005a      	lsls	r2, r3, #1
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	085b      	lsrs	r3, r3, #1
 800c59c:	441a      	add	r2, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5a8:	6a3b      	ldr	r3, [r7, #32]
 800c5aa:	2b0f      	cmp	r3, #15
 800c5ac:	d916      	bls.n	800c5dc <UART_SetConfig+0x508>
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b4:	d212      	bcs.n	800c5dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	f023 030f 	bic.w	r3, r3, #15
 800c5be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	085b      	lsrs	r3, r3, #1
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	8bfb      	ldrh	r3, [r7, #30]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	8bfa      	ldrh	r2, [r7, #30]
 800c5d8:	60da      	str	r2, [r3, #12]
 800c5da:	e062      	b.n	800c6a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c5e2:	e05e      	b.n	800c6a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5e8:	2b08      	cmp	r3, #8
 800c5ea:	d828      	bhi.n	800c63e <UART_SetConfig+0x56a>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <UART_SetConfig+0x520>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c619 	.word	0x0800c619
 800c5f8:	0800c621 	.word	0x0800c621
 800c5fc:	0800c629 	.word	0x0800c629
 800c600:	0800c63f 	.word	0x0800c63f
 800c604:	0800c62f 	.word	0x0800c62f
 800c608:	0800c63f 	.word	0x0800c63f
 800c60c:	0800c63f 	.word	0x0800c63f
 800c610:	0800c63f 	.word	0x0800c63f
 800c614:	0800c637 	.word	0x0800c637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c618:	f7fc ff8c 	bl	8009534 <HAL_RCC_GetPCLK1Freq>
 800c61c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c61e:	e014      	b.n	800c64a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c620:	f7fc ff9e 	bl	8009560 <HAL_RCC_GetPCLK2Freq>
 800c624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c626:	e010      	b.n	800c64a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c628:	4b1a      	ldr	r3, [pc, #104]	; (800c694 <UART_SetConfig+0x5c0>)
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c62c:	e00d      	b.n	800c64a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c62e:	f7fc ff13 	bl	8009458 <HAL_RCC_GetSysClockFreq>
 800c632:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c634:	e009      	b.n	800c64a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c63a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c63c:	e005      	b.n	800c64a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c63e:	2300      	movs	r3, #0
 800c640:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c648:	bf00      	nop
    }

    if (pclk != 0U)
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d028      	beq.n	800c6a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c654:	4a10      	ldr	r2, [pc, #64]	; (800c698 <UART_SetConfig+0x5c4>)
 800c656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c65a:	461a      	mov	r2, r3
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	085b      	lsrs	r3, r3, #1
 800c668:	441a      	add	r2, r3
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	2b0f      	cmp	r3, #15
 800c678:	d910      	bls.n	800c69c <UART_SetConfig+0x5c8>
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c680:	d20c      	bcs.n	800c69c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	b29a      	uxth	r2, r3
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	60da      	str	r2, [r3, #12]
 800c68c:	e009      	b.n	800c6a2 <UART_SetConfig+0x5ce>
 800c68e:	bf00      	nop
 800c690:	40008000 	.word	0x40008000
 800c694:	00f42400 	.word	0x00f42400
 800c698:	08014c84 	.word	0x08014c84
      }
      else
      {
        ret = HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c6be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3730      	adds	r7, #48	; 0x30
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c6cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00a      	beq.n	800c6f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	430a      	orrs	r2, r1
 800c6f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00a      	beq.n	800c718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	430a      	orrs	r2, r1
 800c716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00a      	beq.n	800c73a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73e:	f003 0308 	and.w	r3, r3, #8
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	430a      	orrs	r2, r1
 800c75a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c760:	f003 0310 	and.w	r3, r3, #16
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00a      	beq.n	800c77e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	430a      	orrs	r2, r1
 800c77c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c782:	f003 0320 	and.w	r3, r3, #32
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00a      	beq.n	800c7a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01a      	beq.n	800c7e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7ca:	d10a      	bne.n	800c7e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00a      	beq.n	800c804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	605a      	str	r2, [r3, #4]
  }
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af02      	add	r7, sp, #8
 800c816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c820:	f7f7 feba 	bl	8004598 <HAL_GetTick>
 800c824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 0308 	and.w	r3, r3, #8
 800c830:	2b08      	cmp	r3, #8
 800c832:	d10e      	bne.n	800c852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f82f 	bl	800c8a6 <UART_WaitOnFlagUntilTimeout>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	e025      	b.n	800c89e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	d10e      	bne.n	800c87e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f819 	bl	800c8a6 <UART_WaitOnFlagUntilTimeout>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e00f      	b.n	800c89e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2220      	movs	r2, #32
 800c882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2220      	movs	r2, #32
 800c88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b09c      	sub	sp, #112	; 0x70
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	603b      	str	r3, [r7, #0]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8b6:	e0a9      	b.n	800ca0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8be:	f000 80a5 	beq.w	800ca0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8c2:	f7f7 fe69 	bl	8004598 <HAL_GetTick>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d302      	bcc.n	800c8d8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c8d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d140      	bne.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e0:	e853 3f00 	ldrex	r3, [r3]
 800c8e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8ec:	667b      	str	r3, [r7, #100]	; 0x64
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8fe:	e841 2300 	strex	r3, r2, [r1]
 800c902:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1e6      	bne.n	800c8d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3308      	adds	r3, #8
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c914:	e853 3f00 	ldrex	r3, [r3]
 800c918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	f023 0301 	bic.w	r3, r3, #1
 800c920:	663b      	str	r3, [r7, #96]	; 0x60
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c92a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c92c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c932:	e841 2300 	strex	r3, r2, [r1]
 800c936:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1e5      	bne.n	800c90a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2220      	movs	r2, #32
 800c942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2220      	movs	r2, #32
 800c94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	e069      	b.n	800ca2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 0304 	and.w	r3, r3, #4
 800c964:	2b00      	cmp	r3, #0
 800c966:	d051      	beq.n	800ca0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c976:	d149      	bne.n	800ca0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c980:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c996:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a8:	e841 2300 	strex	r3, r2, [r1]
 800c9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e6      	bne.n	800c982 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	e853 3f00 	ldrex	r3, [r3]
 800c9c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	f023 0301 	bic.w	r3, r3, #1
 800c9ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9d4:	623a      	str	r2, [r7, #32]
 800c9d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d8:	69f9      	ldr	r1, [r7, #28]
 800c9da:	6a3a      	ldr	r2, [r7, #32]
 800c9dc:	e841 2300 	strex	r3, r2, [r1]
 800c9e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e5      	bne.n	800c9b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2220      	movs	r2, #32
 800c9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e010      	b.n	800ca2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69da      	ldr	r2, [r3, #28]
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	4013      	ands	r3, r2
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2301      	moveq	r3, #1
 800ca1e:	2300      	movne	r3, #0
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	461a      	mov	r2, r3
 800ca24:	79fb      	ldrb	r3, [r7, #7]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	f43f af46 	beq.w	800c8b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3770      	adds	r7, #112	; 0x70
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b08f      	sub	sp, #60	; 0x3c
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	e853 3f00 	ldrex	r3, [r3]
 800ca4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ca52:	637b      	str	r3, [r7, #52]	; 0x34
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca5e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca64:	e841 2300 	strex	r3, r2, [r1]
 800ca68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e6      	bne.n	800ca3e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3308      	adds	r3, #8
 800ca76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	e853 3f00 	ldrex	r3, [r3]
 800ca7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ca86:	633b      	str	r3, [r7, #48]	; 0x30
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca90:	61ba      	str	r2, [r7, #24]
 800ca92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca94:	6979      	ldr	r1, [r7, #20]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	e841 2300 	strex	r3, r2, [r1]
 800ca9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1e5      	bne.n	800ca70 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2220      	movs	r2, #32
 800caa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800caac:	bf00      	nop
 800caae:	373c      	adds	r7, #60	; 0x3c
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b095      	sub	sp, #84	; 0x54
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cade:	643b      	str	r3, [r7, #64]	; 0x40
 800cae0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e6      	bne.n	800cac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3308      	adds	r3, #8
 800caf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb08:	f023 0301 	bic.w	r3, r3, #1
 800cb0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3308      	adds	r3, #8
 800cb14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb1e:	e841 2300 	strex	r3, r2, [r1]
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1e3      	bne.n	800caf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d118      	bne.n	800cb64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	e853 3f00 	ldrex	r3, [r3]
 800cb3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f023 0310 	bic.w	r3, r3, #16
 800cb46:	647b      	str	r3, [r7, #68]	; 0x44
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb50:	61bb      	str	r3, [r7, #24]
 800cb52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb54:	6979      	ldr	r1, [r7, #20]
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	e841 2300 	strex	r3, r2, [r1]
 800cb5c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1e6      	bne.n	800cb32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb78:	bf00      	nop
 800cb7a:	3754      	adds	r7, #84	; 0x54
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b090      	sub	sp, #64	; 0x40
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0320 	and.w	r3, r3, #32
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d137      	bne.n	800cc10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800cba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3308      	adds	r3, #8
 800cbae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	e853 3f00 	ldrex	r3, [r3]
 800cbb6:	623b      	str	r3, [r7, #32]
   return(result);
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3308      	adds	r3, #8
 800cbc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbc8:	633a      	str	r2, [r7, #48]	; 0x30
 800cbca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbd0:	e841 2300 	strex	r3, r2, [r1]
 800cbd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e5      	bne.n	800cba8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf0:	637b      	str	r3, [r7, #52]	; 0x34
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	61fb      	str	r3, [r7, #28]
 800cbfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	69b9      	ldr	r1, [r7, #24]
 800cc00:	69fa      	ldr	r2, [r7, #28]
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	617b      	str	r3, [r7, #20]
   return(result);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e6      	bne.n	800cbdc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc0e:	e002      	b.n	800cc16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cc10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc12:	f7f6 fc09 	bl	8003428 <HAL_UART_TxCpltCallback>
}
 800cc16:	bf00      	nop
 800cc18:	3740      	adds	r7, #64	; 0x40
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7ff fa31 	bl	800c094 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc32:	bf00      	nop
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b086      	sub	sp, #24
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc62:	2b80      	cmp	r3, #128	; 0x80
 800cc64:	d109      	bne.n	800cc7a <UART_DMAError+0x40>
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b21      	cmp	r3, #33	; 0x21
 800cc6a:	d106      	bne.n	800cc7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cc74:	6978      	ldr	r0, [r7, #20]
 800cc76:	f7ff fede 	bl	800ca36 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc84:	2b40      	cmp	r3, #64	; 0x40
 800cc86:	d109      	bne.n	800cc9c <UART_DMAError+0x62>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b22      	cmp	r3, #34	; 0x22
 800cc8c:	d106      	bne.n	800cc9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cc96:	6978      	ldr	r0, [r7, #20]
 800cc98:	f7ff ff0e 	bl	800cab8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cca2:	f043 0210 	orr.w	r2, r3, #16
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccac:	6978      	ldr	r0, [r7, #20]
 800ccae:	f7ff f9fb 	bl	800c0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccb2:	bf00      	nop
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f7ff f9e5 	bl	800c0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccde:	bf00      	nop
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b088      	sub	sp, #32
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	e853 3f00 	ldrex	r3, [r3]
 800ccfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd02:	61fb      	str	r3, [r7, #28]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	61bb      	str	r3, [r7, #24]
 800cd0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd10:	6979      	ldr	r1, [r7, #20]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	e841 2300 	strex	r3, r2, [r1]
 800cd18:	613b      	str	r3, [r7, #16]
   return(result);
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1e6      	bne.n	800ccee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2220      	movs	r2, #32
 800cd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7f6 fb7a 	bl	8003428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd34:	bf00      	nop
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e058      	b.n	800ce06 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f7f7 fa62 	bl	8004230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2224      	movs	r2, #36	; 0x24
 800cd70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f022 0201 	bic.w	r2, r2, #1
 800cd82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f7ff f9a5 	bl	800c0d4 <UART_SetConfig>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d101      	bne.n	800cd94 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e038      	b.n	800ce06 <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f7ff fc95 	bl	800c6cc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689a      	ldr	r2, [r3, #8]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdb0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68ba      	ldr	r2, [r7, #8]
 800cdc2:	430a      	orrs	r2, r1
 800cdc4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	055b      	lsls	r3, r3, #21
 800cdca:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	041b      	lsls	r3, r3, #16
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800cde0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	6812      	ldr	r2, [r2, #0]
 800cde8:	6979      	ldr	r1, [r7, #20]
 800cdea:	430b      	orrs	r3, r1
 800cdec:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f042 0201 	orr.w	r2, r2, #1
 800cdfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f7ff fd06 	bl	800c810 <UART_CheckIdleState>
 800ce04:	4603      	mov	r3, r0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce2a:	bf00      	nop
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce3e:	bf00      	nop
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d101      	bne.n	800ce60 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e027      	b.n	800ceb0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2224      	movs	r2, #36	; 0x24
 800ce6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f022 0201 	bic.w	r2, r2, #1
 800ce86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d101      	bne.n	800ced4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ced0:	2302      	movs	r3, #2
 800ced2:	e02d      	b.n	800cf30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2224      	movs	r2, #36	; 0x24
 800cee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f022 0201 	bic.w	r2, r2, #1
 800cefa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f84f 	bl	800cfb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d101      	bne.n	800cf50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e02d      	b.n	800cfac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2224      	movs	r2, #36	; 0x24
 800cf5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f022 0201 	bic.w	r2, r2, #1
 800cf76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f811 	bl	800cfb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2220      	movs	r2, #32
 800cf9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d108      	bne.n	800cfd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfd4:	e031      	b.n	800d03a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfd6:	2308      	movs	r3, #8
 800cfd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfda:	2308      	movs	r3, #8
 800cfdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	0e5b      	lsrs	r3, r3, #25
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f003 0307 	and.w	r3, r3, #7
 800cfec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	0f5b      	lsrs	r3, r3, #29
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	f003 0307 	and.w	r3, r3, #7
 800cffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cffe:	7bbb      	ldrb	r3, [r7, #14]
 800d000:	7b3a      	ldrb	r2, [r7, #12]
 800d002:	4911      	ldr	r1, [pc, #68]	; (800d048 <UARTEx_SetNbDataToProcess+0x94>)
 800d004:	5c8a      	ldrb	r2, [r1, r2]
 800d006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d00a:	7b3a      	ldrb	r2, [r7, #12]
 800d00c:	490f      	ldr	r1, [pc, #60]	; (800d04c <UARTEx_SetNbDataToProcess+0x98>)
 800d00e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d010:	fb93 f3f2 	sdiv	r3, r3, r2
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	7b7a      	ldrb	r2, [r7, #13]
 800d020:	4909      	ldr	r1, [pc, #36]	; (800d048 <UARTEx_SetNbDataToProcess+0x94>)
 800d022:	5c8a      	ldrb	r2, [r1, r2]
 800d024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d028:	7b7a      	ldrb	r2, [r7, #13]
 800d02a:	4908      	ldr	r1, [pc, #32]	; (800d04c <UARTEx_SetNbDataToProcess+0x98>)
 800d02c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d02e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d03a:	bf00      	nop
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	08014c9c 	.word	0x08014c9c
 800d04c:	08014ca4 	.word	0x08014ca4

0800d050 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	2b05      	cmp	r3, #5
 800d064:	d122      	bne.n	800d0ac <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3301      	adds	r3, #1
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	021b      	lsls	r3, r3, #8
 800d070:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3302      	adds	r3, #2
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	b29a      	uxth	r2, r3
 800d07a:	89bb      	ldrh	r3, [r7, #12]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d080:	89bb      	ldrh	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF], usRegAddress, 1, MB_REG_WRITE );
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	1cd8      	adds	r0, r3, #3
 800d08a:	89b9      	ldrh	r1, [r7, #12]
 800d08c:	2301      	movs	r3, #1
 800d08e:	2201      	movs	r2, #1
 800d090:	f7f6 f8b2 	bl	80031f8 <eMBRegHoldingCB>
 800d094:	4603      	mov	r3, r0
 800d096:	72fb      	strb	r3, [r7, #11]

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800d098:	7afb      	ldrb	r3, [r7, #11]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d008      	beq.n	800d0b0 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800d09e:	7afb      	ldrb	r3, [r7, #11]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fa09 	bl	800d4b8 <prveMBError2Exception>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73fb      	strb	r3, [r7, #15]
 800d0aa:	e001      	b.n	800d0b0 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d0ac:	2303      	movs	r3, #3
 800d0ae:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	2b05      	cmp	r3, #5
 800d0ce:	d946      	bls.n	800d15e <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	021b      	lsls	r3, r3, #8
 800d0da:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3302      	adds	r3, #2
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	89bb      	ldrh	r3, [r7, #12]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d0ea:	89bb      	ldrh	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3303      	adds	r3, #3
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	021b      	lsls	r3, r3, #8
 800d0fa:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3304      	adds	r3, #4
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	b29a      	uxth	r2, r3
 800d104:	897b      	ldrh	r3, [r7, #10]
 800d106:	4313      	orrs	r3, r2
 800d108:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	795b      	ldrb	r3, [r3, #5]
 800d10e:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800d110:	897b      	ldrh	r3, [r7, #10]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d020      	beq.n	800d158 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 800d116:	897b      	ldrh	r3, [r7, #10]
 800d118:	2b78      	cmp	r3, #120	; 0x78
 800d11a:	d81d      	bhi.n	800d158 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800d11c:	897b      	ldrh	r3, [r7, #10]
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800d124:	7a7a      	ldrb	r2, [r7, #9]
 800d126:	429a      	cmp	r2, r3
 800d128:	d116      	bne.n	800d158 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],  usRegAddress, usRegCount, MB_REG_WRITE );
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	1d98      	adds	r0, r3, #6
 800d12e:	897a      	ldrh	r2, [r7, #10]
 800d130:	89b9      	ldrh	r1, [r7, #12]
 800d132:	2301      	movs	r3, #1
 800d134:	f7f6 f860 	bl	80031f8 <eMBRegHoldingCB>
 800d138:	4603      	mov	r3, r0
 800d13a:	723b      	strb	r3, [r7, #8]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d13c:	7a3b      	ldrb	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d006      	beq.n	800d150 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d142:	7a3b      	ldrb	r3, [r7, #8]
 800d144:	4618      	mov	r0, r3
 800d146:	f000 f9b7 	bl	800d4b8 <prveMBError2Exception>
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800d14e:	e008      	b.n	800d162 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2205      	movs	r2, #5
 800d154:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d156:	e004      	b.n	800d162 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d158:	2303      	movs	r3, #3
 800d15a:	73fb      	strb	r3, [r7, #15]
 800d15c:	e001      	b.n	800d162 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d15e:	2303      	movs	r3, #3
 800d160:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d162:	7bfb      	ldrb	r3, [r7, #15]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d176:	2300      	movs	r3, #0
 800d178:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	2b05      	cmp	r3, #5
 800d180:	d15c      	bne.n	800d23c <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	3301      	adds	r3, #1
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	021b      	lsls	r3, r3, #8
 800d18c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	3302      	adds	r3, #2
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	b29a      	uxth	r2, r3
 800d196:	8abb      	ldrh	r3, [r7, #20]
 800d198:	4313      	orrs	r3, r2
 800d19a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800d19c:	8abb      	ldrh	r3, [r7, #20]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	3303      	adds	r3, #3
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	021b      	lsls	r3, r3, #8
 800d1ac:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800d1b6:	8a7b      	ldrh	r3, [r7, #18]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d03c      	beq.n	800d236 <eMBFuncReadHoldingRegister+0xca>
 800d1bc:	8a7b      	ldrh	r3, [r7, #18]
 800d1be:	2b7d      	cmp	r3, #125	; 0x7d
 800d1c0:	d839      	bhi.n	800d236 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	1c5a      	adds	r2, r3, #1
 800d1d0:	60fa      	str	r2, [r7, #12]
 800d1d2:	2203      	movs	r2, #3
 800d1d4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800d1e2:	8a7b      	ldrh	r3, [r7, #18]
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	1c59      	adds	r1, r3, #1
 800d1ea:	60f9      	str	r1, [r7, #12]
 800d1ec:	0052      	lsls	r2, r2, #1
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800d1fe:	8a7a      	ldrh	r2, [r7, #18]
 800d200:	8ab9      	ldrh	r1, [r7, #20]
 800d202:	2300      	movs	r3, #0
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7f5 fff7 	bl	80031f8 <eMBRegHoldingCB>
 800d20a:	4603      	mov	r3, r0
 800d20c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d20e:	7afb      	ldrb	r3, [r7, #11]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d006      	beq.n	800d222 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d214:	7afb      	ldrb	r3, [r7, #11]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 f94e 	bl	800d4b8 <prveMBError2Exception>
 800d21c:	4603      	mov	r3, r0
 800d21e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d220:	e00e      	b.n	800d240 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	881a      	ldrh	r2, [r3, #0]
 800d226:	8a7b      	ldrh	r3, [r7, #18]
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	4413      	add	r3, r2
 800d22e:	b29a      	uxth	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d234:	e004      	b.n	800d240 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d236:	2303      	movs	r3, #3
 800d238:	75fb      	strb	r3, [r7, #23]
 800d23a:	e001      	b.n	800d240 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d23c:	2303      	movs	r3, #3
 800d23e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800d240:	7dfb      	ldrb	r3, [r7, #23]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3718      	adds	r7, #24
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b086      	sub	sp, #24
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d254:	2300      	movs	r3, #0
 800d256:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	2b09      	cmp	r3, #9
 800d25e:	f240 8099 	bls.w	800d394 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3301      	adds	r3, #1
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	021b      	lsls	r3, r3, #8
 800d26c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	3302      	adds	r3, #2
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	b29a      	uxth	r2, r3
 800d276:	8abb      	ldrh	r3, [r7, #20]
 800d278:	4313      	orrs	r3, r2
 800d27a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800d27c:	8abb      	ldrh	r3, [r7, #20]
 800d27e:	3301      	adds	r3, #1
 800d280:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3303      	adds	r3, #3
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	b29b      	uxth	r3, r3
 800d28a:	021b      	lsls	r3, r3, #8
 800d28c:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	3304      	adds	r3, #4
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	b29a      	uxth	r2, r3
 800d296:	8a7b      	ldrh	r3, [r7, #18]
 800d298:	4313      	orrs	r3, r2
 800d29a:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3305      	adds	r3, #5
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	021b      	lsls	r3, r3, #8
 800d2a6:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	3306      	adds	r3, #6
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	8a3b      	ldrh	r3, [r7, #16]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800d2b6:	8a3b      	ldrh	r3, [r7, #16]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3307      	adds	r3, #7
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	021b      	lsls	r3, r3, #8
 800d2c6:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	89fb      	ldrh	r3, [r7, #14]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7a5b      	ldrb	r3, [r3, #9]
 800d2da:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800d2dc:	8a7b      	ldrh	r3, [r7, #18]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d056      	beq.n	800d390 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800d2e2:	8a7b      	ldrh	r3, [r7, #18]
 800d2e4:	2b7d      	cmp	r3, #125	; 0x7d
 800d2e6:	d853      	bhi.n	800d390 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800d2e8:	89fb      	ldrh	r3, [r7, #14]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d050      	beq.n	800d390 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800d2ee:	89fb      	ldrh	r3, [r7, #14]
 800d2f0:	2b79      	cmp	r3, #121	; 0x79
 800d2f2:	d84d      	bhi.n	800d390 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800d2f4:	89fb      	ldrh	r3, [r7, #14]
 800d2f6:	005a      	lsls	r2, r3, #1
 800d2f8:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d148      	bne.n	800d390 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF], usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f103 000a 	add.w	r0, r3, #10
 800d304:	89fa      	ldrh	r2, [r7, #14]
 800d306:	8a39      	ldrh	r1, [r7, #16]
 800d308:	2301      	movs	r3, #1
 800d30a:	f7f5 ff75 	bl	80031f8 <eMBRegHoldingCB>
 800d30e:	4603      	mov	r3, r0
 800d310:	75bb      	strb	r3, [r7, #22]

            if( eRegStatus == MB_ENOERR )
 800d312:	7dbb      	ldrb	r3, [r7, #22]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d131      	bne.n	800d37c <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2200      	movs	r2, #0
 800d320:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	60ba      	str	r2, [r7, #8]
 800d328:	2217      	movs	r2, #23
 800d32a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	b29a      	uxth	r2, r3
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800d338:	8a7b      	ldrh	r3, [r7, #18]
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	1c59      	adds	r1, r3, #1
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	0052      	lsls	r2, r2, #1
 800d344:	b2d2      	uxtb	r2, r2
 800d346:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	3301      	adds	r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800d354:	8a7a      	ldrh	r2, [r7, #18]
 800d356:	8ab9      	ldrh	r1, [r7, #20]
 800d358:	2300      	movs	r3, #0
 800d35a:	68b8      	ldr	r0, [r7, #8]
 800d35c:	f7f5 ff4c 	bl	80031f8 <eMBRegHoldingCB>
 800d360:	4603      	mov	r3, r0
 800d362:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 800d364:	7dbb      	ldrb	r3, [r7, #22]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d108      	bne.n	800d37c <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	881a      	ldrh	r2, [r3, #0]
 800d36e:	8a7b      	ldrh	r3, [r7, #18]
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	b29b      	uxth	r3, r3
 800d374:	4413      	add	r3, r2
 800d376:	b29a      	uxth	r2, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800d37c:	7dbb      	ldrb	r3, [r7, #22]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d008      	beq.n	800d394 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d382:	7dbb      	ldrb	r3, [r7, #22]
 800d384:	4618      	mov	r0, r3
 800d386:	f000 f897 	bl	800d4b8 <prveMBError2Exception>
 800d38a:	4603      	mov	r3, r0
 800d38c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d38e:	e001      	b.n	800d394 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d390:	2303      	movs	r3, #3
 800d392:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800d394:	7dfb      	ldrb	r3, [r7, #23]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b086      	sub	sp, #24
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	2b05      	cmp	r3, #5
 800d3b2:	d15d      	bne.n	800d470 <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	3302      	adds	r3, #2
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	8abb      	ldrh	r3, [r7, #20]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800d3ce:	8abb      	ldrh	r3, [r7, #20]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3303      	adds	r3, #3
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	8a7b      	ldrh	r3, [r7, #18]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	827b      	strh	r3, [r7, #18]

        /* Проверьте, является ли допустимым количество регистров для чтения.
         * Если нет, верните исключение недопустимого значения данных Modbus.
         */
        if( ( usRegCount >= 1 ) && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800d3ee:	8a7b      	ldrh	r3, [r7, #18]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d03a      	beq.n	800d46a <eMBFuncReadInputRegister+0xcc>
 800d3f4:	8a7b      	ldrh	r3, [r7, #18]
 800d3f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3fa:	d236      	bcs.n	800d46a <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2200      	movs	r2, #0
 800d404:	801a      	strh	r2, [r3, #0]

            /* Первый байт содержит код функции. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	60fa      	str	r2, [r7, #12]
 800d40c:	2204      	movs	r2, #4
 800d40e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	881b      	ldrh	r3, [r3, #0]
 800d414:	3301      	adds	r3, #1
 800d416:	b29a      	uxth	r2, r3
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	801a      	strh	r2, [r3, #0]

            /* Второй байт в ответе содержит количество байтов. */
            /////////////////////////////////////////////////////// МОЁ изменение ///////////////
            // *pucFrameCur++ =  ( UCHAR )( usRegCount * 2 );
            // usRegCount =1; // МОЁ изменение, всегда будет 1 пакет данных, пакет состоит из 40_WORD это значит 80 байт
            *pucFrameCur++ = 80; // МОЁ изменение, все коментарии почему , в   main.c => eMBRegInputCB()
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	60fa      	str	r2, [r7, #12]
 800d422:	2250      	movs	r2, #80	; 0x50
 800d424:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	3301      	adds	r3, #1
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	801a      	strh	r2, [r3, #0]

            eRegStatus = eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800d432:	8a7a      	ldrh	r2, [r7, #18]
 800d434:	8abb      	ldrh	r3, [r7, #20]
 800d436:	4619      	mov	r1, r3
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7f5 fcd3 	bl	8002de4 <eMBRegInputCB>
 800d43e:	4603      	mov	r3, r0
 800d440:	72fb      	strb	r3, [r7, #11]

            /* Если произошла ошибка, преобразуйте ее в исключение Modbus. */
            if( eRegStatus != MB_ENOERR )
 800d442:	7afb      	ldrb	r3, [r7, #11]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d448:	7afb      	ldrb	r3, [r7, #11]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 f834 	bl	800d4b8 <prveMBError2Exception>
 800d450:	4603      	mov	r3, r0
 800d452:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d454:	e00e      	b.n	800d474 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	881a      	ldrh	r2, [r3, #0]
 800d45a:	8a7b      	ldrh	r3, [r7, #18]
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	b29b      	uxth	r3, r3
 800d460:	4413      	add	r3, r2
 800d462:	b29a      	uxth	r2, r3
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d468:	e004      	b.n	800d474 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d46a:	2303      	movs	r3, #3
 800d46c:	75fb      	strb	r3, [r7, #23]
 800d46e:	e001      	b.n	800d474 <eMBFuncReadInputRegister+0xd6>
        }
    }
    else
    {
        /* Не может быть допустимым запросом на чтение входного регистра, поскольку длина указана неверно. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d470:	2303      	movs	r3, #3
 800d472:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800d474:	7dfb      	ldrb	r3, [r7, #23]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3718      	adds	r7, #24
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3301      	adds	r3, #1
 800d48e:	4a08      	ldr	r2, [pc, #32]	; (800d4b0 <eMBFuncReportSlaveID+0x30>)
 800d490:	8812      	ldrh	r2, [r2, #0]
 800d492:	4908      	ldr	r1, [pc, #32]	; (800d4b4 <eMBFuncReportSlaveID+0x34>)
 800d494:	4618      	mov	r0, r3
 800d496:	f001 fc05 	bl	800eca4 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800d49a:	4b05      	ldr	r3, [pc, #20]	; (800d4b0 <eMBFuncReportSlaveID+0x30>)
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20012348 	.word	0x20012348
 800d4b4:	20012328 	.word	0x20012328

0800d4b8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	2b07      	cmp	r3, #7
 800d4c6:	d00c      	beq.n	800d4e2 <prveMBError2Exception+0x2a>
 800d4c8:	2b07      	cmp	r3, #7
 800d4ca:	dc0d      	bgt.n	800d4e8 <prveMBError2Exception+0x30>
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <prveMBError2Exception+0x1e>
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d003      	beq.n	800d4dc <prveMBError2Exception+0x24>
 800d4d4:	e008      	b.n	800d4e8 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73fb      	strb	r3, [r7, #15]
            break;
 800d4da:	e008      	b.n	800d4ee <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	73fb      	strb	r3, [r7, #15]
            break;
 800d4e0:	e005      	b.n	800d4ee <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800d4e2:	2306      	movs	r3, #6
 800d4e4:	73fb      	strb	r3, [r7, #15]
            break;
 800d4e6:	e002      	b.n	800d4ee <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800d4e8:	2304      	movs	r3, #4
 800d4ea:	73fb      	strb	r3, [r7, #15]
            break;
 800d4ec:	bf00      	nop
    }

    return eStatus;
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	603b      	str	r3, [r7, #0]
 800d504:	4603      	mov	r3, r0
 800d506:	71fb      	strb	r3, [r7, #7]
 800d508:	460b      	mov	r3, r1
 800d50a:	71bb      	strb	r3, [r7, #6]
 800d50c:	4613      	mov	r3, r2
 800d50e:	717b      	strb	r3, [r7, #5]
    /* проверка предварительных условий */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||  ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800d510:	79bb      	ldrb	r3, [r7, #6]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <eMBInit+0x26>
 800d516:	79bb      	ldrb	r3, [r7, #6]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <eMBInit+0x26>
 800d51c:	79bb      	ldrb	r3, [r7, #6]
 800d51e:	2bf7      	cmp	r3, #247	; 0xf7
 800d520:	d901      	bls.n	800d526 <eMBInit+0x2a>
    	{ ucSlaveAddress = 7;  } // по умолчанию такой адрес будет, а потому что
 800d522:	2307      	movs	r3, #7
 800d524:	71bb      	strb	r3, [r7, #6]

    ucMBAddress = ucSlaveAddress; // раскинули адрес по этому файлу
 800d526:	4a08      	ldr	r2, [pc, #32]	; (800d548 <eMBInit+0x4c>)
 800d528:	79bb      	ldrb	r3, [r7, #6]
 800d52a:	7013      	strb	r3, [r2, #0]
    timeout_Tim6_50us = 35; // на нашей скорости здесь будет только такой таймаут //////////eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity ); // здесь остался только инит времени тайаута TIM6
 800d52c:	4b07      	ldr	r3, [pc, #28]	; (800d54c <eMBInit+0x50>)
 800d52e:	2223      	movs	r2, #35	; 0x23
 800d530:	801a      	strh	r2, [r3, #0]

    xMBPortEventInit(  ); // сброс очереди событий  ==> в файле portevent.c
 800d532:	f000 f8e9 	bl	800d708 <xMBPortEventInit>
    eMBState = STATE_DISABLED;
 800d536:	4b06      	ldr	r3, [pc, #24]	; (800d550 <eMBInit+0x54>)
 800d538:	2201      	movs	r2, #1
 800d53a:	701a      	strb	r2, [r3, #0]

    return MB_ENOERR;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	2001234a 	.word	0x2001234a
 800d54c:	2000060c 	.word	0x2000060c
 800d550:	20000058 	.word	0x20000058

0800d554 <eMBEnable>:



eMBErrorCode
eMBEnable( void )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
        /* Activate the protocol stack. */
    ENTER_CRITICAL_SECTION(  );
 800d558:	f7f4 fab2 	bl	8001ac0 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800d55c:	4b08      	ldr	r3, [pc, #32]	; (800d580 <eMBEnable+0x2c>)
 800d55e:	2200      	movs	r2, #0
 800d560:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE ); // перевод порта в режим приема
 800d562:	2100      	movs	r1, #0
 800d564:	2001      	movs	r0, #1
 800d566:	f000 f911 	bl	800d78c <vMBPortSerialEnable>
    vMBPortTimersEnable(  ); // старт таймера TIM6 и сброс счетчика в ноль
 800d56a:	f000 f96b 	bl	800d844 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800d56e:	f7f4 fab7 	bl	8001ae0 <__critical_exit>

    eMBState = STATE_ENABLED;
 800d572:	4b04      	ldr	r3, [pc, #16]	; (800d584 <eMBEnable+0x30>)
 800d574:	2200      	movs	r2, #0
 800d576:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	200005e8 	.word	0x200005e8
 800d584:	20000058 	.word	0x20000058

0800d588 <eMBPoll>:


eMBErrorCode
eMBPoll( void )
{
 800d588:	b590      	push	{r4, r7, lr}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800d58e:	2300      	movs	r3, #0
 800d590:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    BOOL  flag_event = xMBPortEventGet( &eEvent );
 800d592:	1c7b      	adds	r3, r7, #1
 800d594:	4618      	mov	r0, r3
 800d596:	f000 f8db 	bl	800d750 <xMBPortEventGet>
 800d59a:	4603      	mov	r3, r0
 800d59c:	70bb      	strb	r3, [r7, #2]

    /* Проверьте, есть ли доступное событие.
     * Если нет, верните управление вызывающему абоненту.
     * В противном случае мы будем обрабатывать это событие. */

    if( flag_event == TRUE ) // если там в файле portevent.c  кемто чемто сформировано событие, тО сейчас мы его обработаем
 800d59e:	78bb      	ldrb	r3, [r7, #2]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	f040 8096 	bne.w	800d6d2 <eMBPoll+0x14a>
    {
    	count_eMBPool=0;
 800d5a6:	4b50      	ldr	r3, [pc, #320]	; (800d6e8 <eMBPoll+0x160>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	701a      	strb	r2, [r3, #0]
    	//printf("eMBPoll-STARTevent _eMBState=%d, _eEvent=%d \n", eMBState, eEvent);
        switch ( eEvent )
 800d5ac:	787b      	ldrb	r3, [r7, #1]
 800d5ae:	2b03      	cmp	r3, #3
 800d5b0:	f200 8094 	bhi.w	800d6dc <eMBPoll+0x154>
 800d5b4:	a201      	add	r2, pc, #4	; (adr r2, 800d5bc <eMBPoll+0x34>)
 800d5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ba:	bf00      	nop
 800d5bc:	0800d6dd 	.word	0x0800d6dd
 800d5c0:	0800d5cd 	.word	0x0800d5cd
 800d5c4:	0800d5fd 	.word	0x0800d5fd
 800d5c8:	0800d6dd 	.word	0x0800d6dd
        case EV_READY:
        	//printf( "eMBPoll eEvent <= EV_READY \n");
            break;

        case EV_FRAME_RECEIVED:
            eStatus = eMBRTUReceive( &ucRcvAddress, &ucMBFrame, &usLength );
 800d5cc:	4a47      	ldr	r2, [pc, #284]	; (800d6ec <eMBPoll+0x164>)
 800d5ce:	4948      	ldr	r1, [pc, #288]	; (800d6f0 <eMBPoll+0x168>)
 800d5d0:	4848      	ldr	r0, [pc, #288]	; (800d6f4 <eMBPoll+0x16c>)
 800d5d2:	f000 f989 	bl	800d8e8 <eMBRTUReceive>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800d5da:	78fb      	ldrb	r3, [r7, #3]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d17a      	bne.n	800d6d6 <eMBPoll+0x14e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800d5e0:	4b44      	ldr	r3, [pc, #272]	; (800d6f4 <eMBPoll+0x16c>)
 800d5e2:	781a      	ldrb	r2, [r3, #0]
 800d5e4:	4b44      	ldr	r3, [pc, #272]	; (800d6f8 <eMBPoll+0x170>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d003      	beq.n	800d5f4 <eMBPoll+0x6c>
 800d5ec:	4b41      	ldr	r3, [pc, #260]	; (800d6f4 <eMBPoll+0x16c>)
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d170      	bne.n	800d6d6 <eMBPoll+0x14e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );  // значит фрейм принят, адрес норм, формируем событие - начало обработки
 800d5f4:	2002      	movs	r0, #2
 800d5f6:	f000 f895 	bl	800d724 <xMBPortEventPost>
                }
            }
            break;
 800d5fa:	e06c      	b.n	800d6d6 <eMBPoll+0x14e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800d5fc:	4b3c      	ldr	r3, [pc, #240]	; (800d6f0 <eMBPoll+0x168>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	781a      	ldrb	r2, [r3, #0]
 800d602:	4b3e      	ldr	r3, [pc, #248]	; (800d6fc <eMBPoll+0x174>)
 800d604:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800d606:	4b3e      	ldr	r3, [pc, #248]	; (800d700 <eMBPoll+0x178>)
 800d608:	2201      	movs	r2, #1
 800d60a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800d60c:	2300      	movs	r3, #0
 800d60e:	607b      	str	r3, [r7, #4]
 800d610:	e01f      	b.n	800d652 <eMBPoll+0xca>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800d612:	4a3c      	ldr	r2, [pc, #240]	; (800d704 <eMBPoll+0x17c>)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d01d      	beq.n	800d65a <eMBPoll+0xd2>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800d61e:	4a39      	ldr	r2, [pc, #228]	; (800d704 <eMBPoll+0x17c>)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800d626:	4b35      	ldr	r3, [pc, #212]	; (800d6fc <eMBPoll+0x174>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d10e      	bne.n	800d64c <eMBPoll+0xc4>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800d62e:	4a35      	ldr	r2, [pc, #212]	; (800d704 <eMBPoll+0x17c>)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	4413      	add	r3, r2
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	4a2d      	ldr	r2, [pc, #180]	; (800d6f0 <eMBPoll+0x168>)
 800d63a:	6812      	ldr	r2, [r2, #0]
 800d63c:	492b      	ldr	r1, [pc, #172]	; (800d6ec <eMBPoll+0x164>)
 800d63e:	4610      	mov	r0, r2
 800d640:	4798      	blx	r3
 800d642:	4603      	mov	r3, r0
 800d644:	461a      	mov	r2, r3
 800d646:	4b2e      	ldr	r3, [pc, #184]	; (800d700 <eMBPoll+0x178>)
 800d648:	701a      	strb	r2, [r3, #0]
                    break;
 800d64a:	e007      	b.n	800d65c <eMBPoll+0xd4>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	3301      	adds	r3, #1
 800d650:	607b      	str	r3, [r7, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b0f      	cmp	r3, #15
 800d656:	dddc      	ble.n	800d612 <eMBPoll+0x8a>
 800d658:	e000      	b.n	800d65c <eMBPoll+0xd4>
                    break;
 800d65a:	bf00      	nop
                }
            }
            //printf("eMBPoll eEvent==EV_EXECUTE  ucFunctionCode=%d \n", ucFunctionCode);

            /* Если запрос не был отправлен на широковещательный адрес, мы возвращаем ответ. !!!!!!!! ВОТ ЗДЕСЬ передача !!!!!!!!!!  */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800d65c:	4b25      	ldr	r3, [pc, #148]	; (800d6f4 <eMBPoll+0x16c>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d03a      	beq.n	800d6da <eMBPoll+0x152>
            {
                if( eException != MB_EX_NONE )
 800d664:	4b26      	ldr	r3, [pc, #152]	; (800d700 <eMBPoll+0x178>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01d      	beq.n	800d6a8 <eMBPoll+0x120>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800d66c:	4b1f      	ldr	r3, [pc, #124]	; (800d6ec <eMBPoll+0x164>)
 800d66e:	2200      	movs	r2, #0
 800d670:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800d672:	4b22      	ldr	r3, [pc, #136]	; (800d6fc <eMBPoll+0x174>)
 800d674:	781a      	ldrb	r2, [r3, #0]
 800d676:	4b1e      	ldr	r3, [pc, #120]	; (800d6f0 <eMBPoll+0x168>)
 800d678:	6819      	ldr	r1, [r3, #0]
 800d67a:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <eMBPoll+0x164>)
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	1c58      	adds	r0, r3, #1
 800d680:	b284      	uxth	r4, r0
 800d682:	481a      	ldr	r0, [pc, #104]	; (800d6ec <eMBPoll+0x164>)
 800d684:	8004      	strh	r4, [r0, #0]
 800d686:	440b      	add	r3, r1
 800d688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d68c:	b2d2      	uxtb	r2, r2
 800d68e:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800d690:	4b17      	ldr	r3, [pc, #92]	; (800d6f0 <eMBPoll+0x168>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	4b15      	ldr	r3, [pc, #84]	; (800d6ec <eMBPoll+0x164>)
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	1c59      	adds	r1, r3, #1
 800d69a:	b288      	uxth	r0, r1
 800d69c:	4913      	ldr	r1, [pc, #76]	; (800d6ec <eMBPoll+0x164>)
 800d69e:	8008      	strh	r0, [r1, #0]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	4a17      	ldr	r2, [pc, #92]	; (800d700 <eMBPoll+0x178>)
 800d6a4:	7812      	ldrb	r2, [r2, #0]
 800d6a6:	701a      	strb	r2, [r3, #0]
                }

                // МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////
                if (ucMBFrame[MB_PDU_FUNC_OFF] == 4) { usLength =82; }// МОЁ изменение ///////////////// МОЁ изменение ///////////////
 800d6a8:	4b11      	ldr	r3, [pc, #68]	; (800d6f0 <eMBPoll+0x168>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d102      	bne.n	800d6b8 <eMBPoll+0x130>
 800d6b2:	4b0e      	ldr	r3, [pc, #56]	; (800d6ec <eMBPoll+0x164>)
 800d6b4:	2252      	movs	r2, #82	; 0x52
 800d6b6:	801a      	strh	r2, [r3, #0]
                eStatus = eMBRTUSend( ucMBAddress, ucMBFrame, usLength );
 800d6b8:	4b0f      	ldr	r3, [pc, #60]	; (800d6f8 <eMBPoll+0x170>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	4b0c      	ldr	r3, [pc, #48]	; (800d6f0 <eMBPoll+0x168>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a0a      	ldr	r2, [pc, #40]	; (800d6ec <eMBPoll+0x164>)
 800d6c4:	8812      	ldrh	r2, [r2, #0]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	f000 f958 	bl	800d97c <eMBRTUSend>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800d6d0:	e003      	b.n	800d6da <eMBPoll+0x152>

        case EV_FRAME_SENT:
            break;
        }
    }
 800d6d2:	bf00      	nop
 800d6d4:	e002      	b.n	800d6dc <eMBPoll+0x154>
            break;
 800d6d6:	bf00      	nop
 800d6d8:	e000      	b.n	800d6dc <eMBPoll+0x154>
            break;
 800d6da:	bf00      	nop
    return MB_ENOERR;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd90      	pop	{r4, r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	2001234b 	.word	0x2001234b
 800d6ec:	20012354 	.word	0x20012354
 800d6f0:	20012350 	.word	0x20012350
 800d6f4:	2001234c 	.word	0x2001234c
 800d6f8:	2001234a 	.word	0x2001234a
 800d6fc:	20012356 	.word	0x20012356
 800d700:	20012357 	.word	0x20012357
 800d704:	2000005c 	.word	0x2000005c

0800d708 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800d708:	b480      	push	{r7}
 800d70a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800d70c:	4b04      	ldr	r3, [pc, #16]	; (800d720 <xMBPortEventInit+0x18>)
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800d712:	2301      	movs	r3, #1
}
 800d714:	4618      	mov	r0, r3
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	20012359 	.word	0x20012359

0800d724 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800d72e:	4b06      	ldr	r3, [pc, #24]	; (800d748 <xMBPortEventPost+0x24>)
 800d730:	2201      	movs	r2, #1
 800d732:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800d734:	4a05      	ldr	r2, [pc, #20]	; (800d74c <xMBPortEventPost+0x28>)
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800d73a:	2301      	movs	r3, #1
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	20012359 	.word	0x20012359
 800d74c:	20012358 	.word	0x20012358

0800d750 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <xMBPortEventGet+0x34>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d008      	beq.n	800d776 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <xMBPortEventGet+0x38>)
 800d766:	781a      	ldrb	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <xMBPortEventGet+0x34>)
 800d76e:	2200      	movs	r2, #0
 800d770:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800d772:	2301      	movs	r3, #1
 800d774:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800d776:	7bfb      	ldrb	r3, [r7, #15]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	20012359 	.word	0x20012359
 800d788:	20012358 	.word	0x20012358

0800d78c <vMBPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/
extern	UART_HandleTypeDef * adr_huart_MB;
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	460a      	mov	r2, r1
 800d796:	71fb      	strb	r3, [r7, #7]
 800d798:	4613      	mov	r3, r2
 800d79a:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
    if(xRxEnable)
 800d79c:	79fb      	ldrb	r3, [r7, #7]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <vMBPortSerialEnable+0x2c>
  {
    __HAL_UART_ENABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800d7a2:	4b15      	ldr	r3, [pc, #84]	; (800d7f8 <vMBPortSerialEnable+0x6c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b13      	ldr	r3, [pc, #76]	; (800d7f8 <vMBPortSerialEnable+0x6c>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f042 0220 	orr.w	r2, r2, #32
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	e009      	b.n	800d7cc <vMBPortSerialEnable+0x40>
  }
  else
  {
    __HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800d7b8:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <vMBPortSerialEnable+0x6c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	4b0d      	ldr	r3, [pc, #52]	; (800d7f8 <vMBPortSerialEnable+0x6c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f022 0220 	bic.w	r2, r2, #32
 800d7ca:	601a      	str	r2, [r3, #0]
  }

  if(xTxEnable)
 800d7cc:	79bb      	ldrb	r3, [r7, #6]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <vMBPortSerialEnable+0x56>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d7d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d7dc:	f7f9 fb4a 	bl	8006e74 <HAL_GPIO_WritePin>
  else
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    //__HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_TXE);
  }
}
 800d7e0:	e006      	b.n	800d7f0 <vMBPortSerialEnable+0x64>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d7e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d7ec:	f7f9 fb42 	bl	8006e74 <HAL_GPIO_WritePin>
}
 800d7f0:	bf00      	nop
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	20000610 	.word	0x20000610

0800d7fc <xMBPortSerialGetByte>:
      return TRUE;
}

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(adr_huart_MB->Init.Parity == UART_PARITY_NONE)
 800d804:	4b0e      	ldr	r3, [pc, #56]	; (800d840 <xMBPortSerialGetByte+0x44>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d107      	bne.n	800d81e <xMBPortSerialGetByte+0x22>
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x00FF);
 800d80e:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <xMBPortSerialGetByte+0x44>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d816:	b2da      	uxtb	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	e009      	b.n	800d832 <xMBPortSerialGetByte+0x36>
    }
    else
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x007F);
 800d81e:	4b08      	ldr	r3, [pc, #32]	; (800d840 <xMBPortSerialGetByte+0x44>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	701a      	strb	r2, [r3, #0]
    }
    return TRUE;
 800d832:	2301      	movs	r3, #1
}
 800d834:	4618      	mov	r0, r3
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	20000610 	.word	0x20000610

0800d844 <vMBPortTimersEnable>:
extern uint16_t counter_Tim6_MB ;
/* ----------------------- Start implementation -----------------------------*/

inline void
vMBPortTimersEnable(  )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
	/*  Включите таймер с таймаутом, переданным xMBPortTimersInit( )  */
	/*  Если baudrate > 19200, то мы должны использовать фиксированные значения таймера usTim1Timerout50us = 1750 us.
	 *  В противном случае usTim1Timerout50us должно быть в 3,5 раза больше времени символа. */
	counter_Tim6_MB=0;
 800d848:	4b03      	ldr	r3, [pc, #12]	; (800d858 <vMBPortTimersEnable+0x14>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800d84e:	4803      	ldr	r0, [pc, #12]	; (800d85c <vMBPortTimersEnable+0x18>)
 800d850:	f7fc f9f8 	bl	8009c44 <HAL_TIM_Base_Start_IT>
}
 800d854:	bf00      	nop
 800d856:	bd80      	pop	{r7, pc}
 800d858:	2000060e 	.word	0x2000060e
 800d85c:	20012014 	.word	0x20012014

0800d860 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim6);
 800d864:	4803      	ldr	r0, [pc, #12]	; (800d874 <vMBPortTimersDisable+0x14>)
 800d866:	f7fc fa65 	bl	8009d34 <HAL_TIM_Base_Stop_IT>
	counter_Tim6_MB =0;
 800d86a:	4b03      	ldr	r3, [pc, #12]	; (800d878 <vMBPortTimersDisable+0x18>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	801a      	strh	r2, [r3, #0]
}
 800d870:	bf00      	nop
 800d872:	bd80      	pop	{r7, pc}
 800d874:	20012014 	.word	0x20012014
 800d878:	2000060e 	.word	0x2000060e

0800d87c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800d888:	23ff      	movs	r3, #255	; 0xff
 800d88a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800d88c:	23ff      	movs	r3, #255	; 0xff
 800d88e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800d890:	e013      	b.n	800d8ba <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	781a      	ldrb	r2, [r3, #0]
 800d89a:	7bbb      	ldrb	r3, [r7, #14]
 800d89c:	4053      	eors	r3, r2
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800d8a2:	4a0f      	ldr	r2, [pc, #60]	; (800d8e0 <usMBCRC16+0x64>)
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	781a      	ldrb	r2, [r3, #0]
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	4053      	eors	r3, r2
 800d8ae:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800d8b0:	4a0c      	ldr	r2, [pc, #48]	; (800d8e4 <usMBCRC16+0x68>)
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800d8ba:	887b      	ldrh	r3, [r7, #2]
 800d8bc:	1e5a      	subs	r2, r3, #1
 800d8be:	807a      	strh	r2, [r7, #2]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e6      	bne.n	800d892 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	021b      	lsls	r3, r3, #8
 800d8c8:	b21a      	sxth	r2, r3
 800d8ca:	7bbb      	ldrb	r3, [r7, #14]
 800d8cc:	b21b      	sxth	r3, r3
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	b21b      	sxth	r3, r3
 800d8d2:	b29b      	uxth	r3, r3
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	08014cac 	.word	0x08014cac
 800d8e4:	08014dac 	.word	0x08014dac

0800d8e8 <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]

    eMBErrorCode    eStatus = MB_ENOERR;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800d8f8:	f7f4 f8e2 	bl	8001ac0 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800d8fc:	4b19      	ldr	r3, [pc, #100]	; (800d964 <eMBRTUReceive+0x7c>)
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	b29b      	uxth	r3, r3
 800d902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d906:	d305      	bcc.n	800d914 <eMBRTUReceive+0x2c>
 800d908:	4b17      	ldr	r3, [pc, #92]	; (800d968 <eMBRTUReceive+0x80>)
 800d90a:	4a18      	ldr	r2, [pc, #96]	; (800d96c <eMBRTUReceive+0x84>)
 800d90c:	2163      	movs	r1, #99	; 0x63
 800d90e:	4818      	ldr	r0, [pc, #96]	; (800d970 <eMBRTUReceive+0x88>)
 800d910:	f001 f96e 	bl	800ebf0 <__assert_func>

    /* Length and CRC check */
    //printf("eMBRTUReceive ucRTUBuf %d %d %d %d %d %d \n", ucRTUBuf[0], ucRTUBuf[1], ucRTUBuf[2], ucRTUBuf[3], ucRTUBuf[4], ucRTUBuf[5]);
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN ) && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800d914:	4b13      	ldr	r3, [pc, #76]	; (800d964 <eMBRTUReceive+0x7c>)
 800d916:	881b      	ldrh	r3, [r3, #0]
 800d918:	b29b      	uxth	r3, r3
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d919      	bls.n	800d952 <eMBRTUReceive+0x6a>
 800d91e:	4b11      	ldr	r3, [pc, #68]	; (800d964 <eMBRTUReceive+0x7c>)
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	b29b      	uxth	r3, r3
 800d924:	4619      	mov	r1, r3
 800d926:	4813      	ldr	r0, [pc, #76]	; (800d974 <eMBRTUReceive+0x8c>)
 800d928:	f7ff ffa8 	bl	800d87c <usMBCRC16>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10f      	bne.n	800d952 <eMBRTUReceive+0x6a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800d932:	4b10      	ldr	r3, [pc, #64]	; (800d974 <eMBRTUReceive+0x8c>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	b2da      	uxtb	r2, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800d93c:	4b09      	ldr	r3, [pc, #36]	; (800d964 <eMBRTUReceive+0x7c>)
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	b29b      	uxth	r3, r3
 800d942:	3b03      	subs	r3, #3
 800d944:	b29a      	uxth	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	4a0a      	ldr	r2, [pc, #40]	; (800d978 <eMBRTUReceive+0x90>)
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	e001      	b.n	800d956 <eMBRTUReceive+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 800d952:	2305      	movs	r3, #5
 800d954:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800d956:	f7f4 f8c3 	bl	8001ae0 <__critical_exit>
    return eStatus;
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3718      	adds	r7, #24
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20013362 	.word	0x20013362
 800d968:	08014bcc 	.word	0x08014bcc
 800d96c:	08014eac 	.word	0x08014eac
 800d970:	08014bf4 	.word	0x08014bf4
 800d974:	2001235c 	.word	0x2001235c
 800d978:	2001235d 	.word	0x2001235d

0800d97c <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	6039      	str	r1, [r7, #0]
 800d986:	71fb      	strb	r3, [r7, #7]
 800d988:	4613      	mov	r3, r2
 800d98a:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
     * Проверьте, находится ли приемник все еще в режиме ожидания. В противном случае мы должны были
		замедлить обработку полученного кадра, и мастер отправил другой кадр по сети.
		Мы должны прервать отправку фрейма.
     */
    //printf("eMBRTUSend_eRcvState = %d \n", eRcvState);
    if( eRcvState == STATE_RX_IDLE )
 800d990:	4b2f      	ldr	r3, [pc, #188]	; (800da50 <eMBRTUSend+0xd4>)
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b01      	cmp	r3, #1
 800d998:	d152      	bne.n	800da40 <eMBRTUSend+0xc4>
    {
        /* Первый байт перед Modbus-PDU - это адрес SLAVE. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	4a2d      	ldr	r2, [pc, #180]	; (800da54 <eMBRTUSend+0xd8>)
 800d9a0:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800d9a2:	4b2d      	ldr	r3, [pc, #180]	; (800da58 <eMBRTUSend+0xdc>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800d9a8:	4b2a      	ldr	r3, [pc, #168]	; (800da54 <eMBRTUSend+0xd8>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	79fa      	ldrb	r2, [r7, #7]
 800d9ae:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800d9b0:	4b29      	ldr	r3, [pc, #164]	; (800da58 <eMBRTUSend+0xdc>)
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	88bb      	ldrh	r3, [r7, #4]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	4b26      	ldr	r3, [pc, #152]	; (800da58 <eMBRTUSend+0xdc>)
 800d9be:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
		usCRC16 = HAL_CRC_Calculate(&hcrc, ( UCHAR * ) pucSndBufferCur, usSndBufferCount);
 800d9c0:	4b24      	ldr	r3, [pc, #144]	; (800da54 <eMBRTUSend+0xd8>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a24      	ldr	r2, [pc, #144]	; (800da58 <eMBRTUSend+0xdc>)
 800d9c6:	8812      	ldrh	r2, [r2, #0]
 800d9c8:	b292      	uxth	r2, r2
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4823      	ldr	r0, [pc, #140]	; (800da5c <eMBRTUSend+0xe0>)
 800d9ce:	f7f8 fba3 	bl	8006118 <HAL_CRC_Calculate>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	4b22      	ldr	r3, [pc, #136]	; (800da60 <eMBRTUSend+0xe4>)
 800d9d8:	801a      	strh	r2, [r3, #0]
				//смотрим сколько натикало -цикл usMBCRC16(85char) длится 28.629мкс (4867 тика)
				//usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );

        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800d9da:	4b21      	ldr	r3, [pc, #132]	; (800da60 <eMBRTUSend+0xe4>)
 800d9dc:	8819      	ldrh	r1, [r3, #0]
 800d9de:	4b1e      	ldr	r3, [pc, #120]	; (800da58 <eMBRTUSend+0xdc>)
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	1c5a      	adds	r2, r3, #1
 800d9e6:	b290      	uxth	r0, r2
 800d9e8:	4a1b      	ldr	r2, [pc, #108]	; (800da58 <eMBRTUSend+0xdc>)
 800d9ea:	8010      	strh	r0, [r2, #0]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	b2c9      	uxtb	r1, r1
 800d9f0:	4b1c      	ldr	r3, [pc, #112]	; (800da64 <eMBRTUSend+0xe8>)
 800d9f2:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	; (800da60 <eMBRTUSend+0xe4>)
 800d9f6:	881b      	ldrh	r3, [r3, #0]
 800d9f8:	0a1b      	lsrs	r3, r3, #8
 800d9fa:	b299      	uxth	r1, r3
 800d9fc:	4b16      	ldr	r3, [pc, #88]	; (800da58 <eMBRTUSend+0xdc>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	b290      	uxth	r0, r2
 800da06:	4a14      	ldr	r2, [pc, #80]	; (800da58 <eMBRTUSend+0xdc>)
 800da08:	8010      	strh	r0, [r2, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	b2c9      	uxtb	r1, r1
 800da0e:	4b15      	ldr	r3, [pc, #84]	; (800da64 <eMBRTUSend+0xe8>)
 800da10:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        if( usSndBufferCount != 0 )
 800da12:	4b11      	ldr	r3, [pc, #68]	; (800da58 <eMBRTUSend+0xdc>)
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	b29b      	uxth	r3, r3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d013      	beq.n	800da44 <eMBRTUSend+0xc8>
        {
        	eSndState = STATE_TX_XMIT;
 800da1c:	4b12      	ldr	r3, [pc, #72]	; (800da68 <eMBRTUSend+0xec>)
 800da1e:	2201      	movs	r2, #1
 800da20:	701a      	strb	r2, [r3, #0]
        	vMBPortSerialEnable( FALSE, TRUE );
 800da22:	2101      	movs	r1, #1
 800da24:	2000      	movs	r0, #0
 800da26:	f7ff feb1 	bl	800d78c <vMBPortSerialEnable>
        	HAL_UART_Transmit_DMA(adr_huart_MB, pucSndBufferCur, usSndBufferCount);
 800da2a:	4b10      	ldr	r3, [pc, #64]	; (800da6c <eMBRTUSend+0xf0>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a09      	ldr	r2, [pc, #36]	; (800da54 <eMBRTUSend+0xd8>)
 800da30:	6811      	ldr	r1, [r2, #0]
 800da32:	4a09      	ldr	r2, [pc, #36]	; (800da58 <eMBRTUSend+0xdc>)
 800da34:	8812      	ldrh	r2, [r2, #0]
 800da36:	b292      	uxth	r2, r2
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd ff81 	bl	800b940 <HAL_UART_Transmit_DMA>
 800da3e:	e001      	b.n	800da44 <eMBRTUSend+0xc8>
        	//printf("_transmit_DMA %d_ \n", usSndBufferCount);
        }
    }
    else
    {
        eStatus = MB_EIO;
 800da40:	2305      	movs	r3, #5
 800da42:	73fb      	strb	r3, [r7, #15]
    }
//    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800da44:	7bfb      	ldrb	r3, [r7, #15]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	200005e8 	.word	0x200005e8
 800da54:	2001335c 	.word	0x2001335c
 800da58:	20013360 	.word	0x20013360
 800da5c:	20000468 	.word	0x20000468
 800da60:	20013364 	.word	0x20013364
 800da64:	2001235c 	.word	0x2001235c
 800da68:	200005e9 	.word	0x200005e9
 800da6c:	20000610 	.word	0x20000610

0800da70 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800da76:	2300      	movs	r3, #0
 800da78:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800da7a:	4b2b      	ldr	r3, [pc, #172]	; (800db28 <xMBRTUReceiveFSM+0xb8>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d005      	beq.n	800da90 <xMBRTUReceiveFSM+0x20>
 800da84:	4b29      	ldr	r3, [pc, #164]	; (800db2c <xMBRTUReceiveFSM+0xbc>)
 800da86:	4a2a      	ldr	r2, [pc, #168]	; (800db30 <xMBRTUReceiveFSM+0xc0>)
 800da88:	21b9      	movs	r1, #185	; 0xb9
 800da8a:	482a      	ldr	r0, [pc, #168]	; (800db34 <xMBRTUReceiveFSM+0xc4>)
 800da8c:	f001 f8b0 	bl	800ebf0 <__assert_func>

    /* Всегда читайте  character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800da90:	1dbb      	adds	r3, r7, #6
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff feb2 	bl	800d7fc <xMBPortSerialGetByte>

    switch ( eRcvState )
 800da98:	4b27      	ldr	r3, [pc, #156]	; (800db38 <xMBRTUReceiveFSM+0xc8>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b03      	cmp	r3, #3
 800daa0:	d83c      	bhi.n	800db1c <xMBRTUReceiveFSM+0xac>
 800daa2:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <xMBRTUReceiveFSM+0x38>)
 800daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa8:	0800dab9 	.word	0x0800dab9
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800daed 	.word	0x0800daed
 800dab4:	0800dabf 	.word	0x0800dabf
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800dab8:	f7ff fec4 	bl	800d844 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_INIT\n");
        break;
 800dabc:	e02e      	b.n	800db1c <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800dabe:	f7ff fec1 	bl	800d844 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        break;
 800dac2:	e02b      	b.n	800db1c <xMBRTUReceiveFSM+0xac>
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
    	//printf("xMBRTUReceiveFSM eRcvState =STATE_RX_IDLE\n");
        usRcvBufferPos = 0;
 800dac4:	4b1d      	ldr	r3, [pc, #116]	; (800db3c <xMBRTUReceiveFSM+0xcc>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800daca:	4b1c      	ldr	r3, [pc, #112]	; (800db3c <xMBRTUReceiveFSM+0xcc>)
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	b29b      	uxth	r3, r3
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	b291      	uxth	r1, r2
 800dad4:	4a19      	ldr	r2, [pc, #100]	; (800db3c <xMBRTUReceiveFSM+0xcc>)
 800dad6:	8011      	strh	r1, [r2, #0]
 800dad8:	461a      	mov	r2, r3
 800dada:	79b9      	ldrb	r1, [r7, #6]
 800dadc:	4b18      	ldr	r3, [pc, #96]	; (800db40 <xMBRTUReceiveFSM+0xd0>)
 800dade:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800dae0:	4b15      	ldr	r3, [pc, #84]	; (800db38 <xMBRTUReceiveFSM+0xc8>)
 800dae2:	2202      	movs	r2, #2
 800dae4:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800dae6:	f7ff fead 	bl	800d844 <vMBPortTimersEnable>
        break;
 800daea:	e017      	b.n	800db1c <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800daec:	4b13      	ldr	r3, [pc, #76]	; (800db3c <xMBRTUReceiveFSM+0xcc>)
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf6:	d20b      	bcs.n	800db10 <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800daf8:	4b10      	ldr	r3, [pc, #64]	; (800db3c <xMBRTUReceiveFSM+0xcc>)
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	b291      	uxth	r1, r2
 800db02:	4a0e      	ldr	r2, [pc, #56]	; (800db3c <xMBRTUReceiveFSM+0xcc>)
 800db04:	8011      	strh	r1, [r2, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	79b9      	ldrb	r1, [r7, #6]
 800db0a:	4b0d      	ldr	r3, [pc, #52]	; (800db40 <xMBRTUReceiveFSM+0xd0>)
 800db0c:	5499      	strb	r1, [r3, r2]
 800db0e:	e002      	b.n	800db16 <xMBRTUReceiveFSM+0xa6>
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_RCV\n");
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800db10:	4b09      	ldr	r3, [pc, #36]	; (800db38 <xMBRTUReceiveFSM+0xc8>)
 800db12:	2203      	movs	r2, #3
 800db14:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        }
        vMBPortTimersEnable(  );
 800db16:	f7ff fe95 	bl	800d844 <vMBPortTimersEnable>
        break;
 800db1a:	bf00      	nop
    }
    // printf("xMBRTUReceiveFSM eRcvState_OUT %d \n", eRcvState);
    return xTaskNeedSwitch;
 800db1c:	79fb      	ldrb	r3, [r7, #7]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	200005e9 	.word	0x200005e9
 800db2c:	08014c14 	.word	0x08014c14
 800db30:	08014ebc 	.word	0x08014ebc
 800db34:	08014bf4 	.word	0x08014bf4
 800db38:	200005e8 	.word	0x200005e8
 800db3c:	20013362 	.word	0x20013362
 800db40:	2001235c 	.word	0x2001235c

0800db44 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800db4a:	2300      	movs	r3, #0
 800db4c:	71fb      	strb	r3, [r7, #7]

    // assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 800db4e:	4b0f      	ldr	r3, [pc, #60]	; (800db8c <xMBRTUTransmitFSM+0x48>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <xMBRTUTransmitFSM+0x1a>
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d005      	beq.n	800db68 <xMBRTUTransmitFSM+0x24>
 800db5c:	e011      	b.n	800db82 <xMBRTUTransmitFSM+0x3e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800db5e:	2100      	movs	r1, #0
 800db60:	2001      	movs	r0, #1
 800db62:	f7ff fe13 	bl	800d78c <vMBPortSerialEnable>
        //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800db66:	e00c      	b.n	800db82 <xMBRTUTransmitFSM+0x3e>

    case STATE_TX_XMIT:
        /* проверьте, закончили ли мы. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800db68:	2003      	movs	r0, #3
 800db6a:	f7ff fddb 	bl	800d724 <xMBPortEventPost>
 800db6e:	4603      	mov	r3, r0
 800db70:	71fb      	strb	r3, [r7, #7]
            /* Отключите передатчик.
             * Это предотвращает еще одно прерывание пустого буфера передачи.*/
            vMBPortSerialEnable( TRUE, FALSE );
 800db72:	2100      	movs	r1, #0
 800db74:	2001      	movs	r0, #1
 800db76:	f7ff fe09 	bl	800d78c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800db7a:	4b04      	ldr	r3, [pc, #16]	; (800db8c <xMBRTUTransmitFSM+0x48>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800db80:	bf00      	nop
    }

    return xNeedPoll;
 800db82:	79fb      	ldrb	r3, [r7, #7]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	200005e9 	.word	0x200005e9

0800db90 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )  // вызывается только по 35 событию преполнения TIM6
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800db96:	2300      	movs	r3, #0
 800db98:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800db9a:	4b1d      	ldr	r3, [pc, #116]	; (800dc10 <xMBRTUTimerT35Expired+0x80>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b03      	cmp	r3, #3
 800dba2:	d817      	bhi.n	800dbd4 <xMBRTUTimerT35Expired+0x44>
 800dba4:	a201      	add	r2, pc, #4	; (adr r2, 800dbac <xMBRTUTimerT35Expired+0x1c>)
 800dba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbaa:	bf00      	nop
 800dbac:	0800dbbd 	.word	0x0800dbbd
 800dbb0:	0800dbfb 	.word	0x0800dbfb
 800dbb4:	0800dbc9 	.word	0x0800dbc9
 800dbb8:	0800dbfb 	.word	0x0800dbfb
    {
        /* Timer t35 expired. Startup phase is finished. Таймер t35 истек. Этап запуска завершен.*/
    case STATE_RX_INIT:   // приемник в режиме инициализации
        xNeedPoll = xMBPortEventPost( EV_READY );
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	f7ff fdb1 	bl	800d724 <xMBPortEventPost>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_INIT \n");
        break;
 800dbc6:	e019      	b.n	800dbfc <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that a new frame was received.
         *  Был получен кадр, и срок действия t35 истек. Уведомите слушателя о том, что был получен новый кадр.*/
    case STATE_RX_RCV:    // приемник в режиме приема
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800dbc8:	2001      	movs	r0, #1
 800dbca:	f7ff fdab 	bl	800d724 <xMBPortEventPost>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_RCV, _xNeedPoll=%d \n", xNeedPoll);
        break;
 800dbd2:	e013      	b.n	800dbfc <xMBRTUTimerT35Expired+0x6c>
    	//printf("xMBRTUTimerT35Expired eRcvState=_RX_IDLE \n");
        break;

        /* Function called in an illegal state. Функция вызывается в illegal состоянии. */
    default:
    	if ( ( eRcvState == STATE_RX_INIT ) ||  ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) )
 800dbd4:	4b0e      	ldr	r3, [pc, #56]	; (800dc10 <xMBRTUTimerT35Expired+0x80>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d009      	beq.n	800dbf2 <xMBRTUTimerT35Expired+0x62>
 800dbde:	4b0c      	ldr	r3, [pc, #48]	; (800dc10 <xMBRTUTimerT35Expired+0x80>)
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d004      	beq.n	800dbf2 <xMBRTUTimerT35Expired+0x62>
 800dbe8:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <xMBRTUTimerT35Expired+0x80>)
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d104      	bne.n	800dbfc <xMBRTUTimerT35Expired+0x6c>
    	{
    		printf("xMBRTUTimerT35Expired  Function called in an illegal state \n");
 800dbf2:	4808      	ldr	r0, [pc, #32]	; (800dc14 <xMBRTUTimerT35Expired+0x84>)
 800dbf4:	f002 f8ae 	bl	800fd54 <puts>
 800dbf8:	e000      	b.n	800dbfc <xMBRTUTimerT35Expired+0x6c>
        break;
 800dbfa:	bf00      	nop
    	}
    }

    vMBPortTimersDisable(  );
 800dbfc:	f7ff fe30 	bl	800d860 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE; // всегда, при каждом срабатывании TIM6 статус приемника переводится в это состояние
 800dc00:	4b03      	ldr	r3, [pc, #12]	; (800dc10 <xMBRTUTimerT35Expired+0x80>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800dc06:	79fb      	ldrb	r3, [r7, #7]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	200005e8 	.word	0x200005e8
 800dc14:	08014c30 	.word	0x08014c30

0800dc18 <arm_cfft_radix8by2_f32>:
 800dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1c:	ed2d 8b08 	vpush	{d8-d11}
 800dc20:	4607      	mov	r7, r0
 800dc22:	4608      	mov	r0, r1
 800dc24:	f8b7 c000 	ldrh.w	ip, [r7]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800dc2e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800dc32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dc36:	f000 80b0 	beq.w	800dd9a <arm_cfft_radix8by2_f32+0x182>
 800dc3a:	008c      	lsls	r4, r1, #2
 800dc3c:	3410      	adds	r4, #16
 800dc3e:	f100 0310 	add.w	r3, r0, #16
 800dc42:	1906      	adds	r6, r0, r4
 800dc44:	3210      	adds	r2, #16
 800dc46:	4444      	add	r4, r8
 800dc48:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800dc4c:	f108 0510 	add.w	r5, r8, #16
 800dc50:	ed15 2a04 	vldr	s4, [r5, #-16]
 800dc54:	ed55 2a03 	vldr	s5, [r5, #-12]
 800dc58:	ed54 4a04 	vldr	s9, [r4, #-16]
 800dc5c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800dc60:	ed14 6a02 	vldr	s12, [r4, #-8]
 800dc64:	ed54 5a01 	vldr	s11, [r4, #-4]
 800dc68:	ed53 3a04 	vldr	s7, [r3, #-16]
 800dc6c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800dc70:	ed55 0a01 	vldr	s1, [r5, #-4]
 800dc74:	ed56 6a04 	vldr	s13, [r6, #-16]
 800dc78:	ed16 3a03 	vldr	s6, [r6, #-12]
 800dc7c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800dc80:	ed13 5a02 	vldr	s10, [r3, #-8]
 800dc84:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dc88:	ed16 1a02 	vldr	s2, [r6, #-8]
 800dc8c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800dc90:	ee73 ba82 	vadd.f32	s23, s7, s4
 800dc94:	ee37 ba22 	vadd.f32	s22, s14, s5
 800dc98:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800dc9c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800dca0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800dca4:	ee75 aa00 	vadd.f32	s21, s10, s0
 800dca8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800dcac:	ee71 8a06 	vadd.f32	s17, s2, s12
 800dcb0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800dcb4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800dcb8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800dcbc:	ed03 aa01 	vstr	s20, [r3, #-4]
 800dcc0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800dcc4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800dcc8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800dccc:	ed46 8a02 	vstr	s17, [r6, #-8]
 800dcd0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800dcd4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800dcd8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800dcdc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800dce0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800dce4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800dce8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800dcec:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800dcf0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800dcf4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800dcf8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800dcfc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800dd00:	ee64 6a26 	vmul.f32	s13, s8, s13
 800dd04:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dd08:	ee37 7a63 	vsub.f32	s14, s14, s7
 800dd0c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dd10:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800dd14:	ee32 3a08 	vadd.f32	s6, s4, s16
 800dd18:	ed05 7a03 	vstr	s14, [r5, #-12]
 800dd1c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800dd20:	ed04 4a04 	vstr	s8, [r4, #-16]
 800dd24:	ed44 6a03 	vstr	s13, [r4, #-12]
 800dd28:	ed12 7a01 	vldr	s14, [r2, #-4]
 800dd2c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800dd30:	ee35 5a40 	vsub.f32	s10, s10, s0
 800dd34:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800dd38:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dd3c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800dd40:	ee67 3a87 	vmul.f32	s7, s15, s14
 800dd44:	ee66 4a87 	vmul.f32	s9, s13, s14
 800dd48:	ee25 4a25 	vmul.f32	s8, s10, s11
 800dd4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dd50:	ee25 5a07 	vmul.f32	s10, s10, s14
 800dd54:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dd58:	ee26 7a07 	vmul.f32	s14, s12, s14
 800dd5c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800dd60:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800dd64:	ee74 5a23 	vadd.f32	s11, s8, s7
 800dd68:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800dd6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dd70:	3310      	adds	r3, #16
 800dd72:	4563      	cmp	r3, ip
 800dd74:	ed45 5a02 	vstr	s11, [r5, #-8]
 800dd78:	f106 0610 	add.w	r6, r6, #16
 800dd7c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800dd80:	f102 0210 	add.w	r2, r2, #16
 800dd84:	ed04 6a02 	vstr	s12, [r4, #-8]
 800dd88:	ed04 7a01 	vstr	s14, [r4, #-4]
 800dd8c:	f105 0510 	add.w	r5, r5, #16
 800dd90:	f104 0410 	add.w	r4, r4, #16
 800dd94:	f47f af5c 	bne.w	800dc50 <arm_cfft_radix8by2_f32+0x38>
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	b28c      	uxth	r4, r1
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	2302      	movs	r3, #2
 800dda0:	f000 fc66 	bl	800e670 <arm_radix8_butterfly_f32>
 800dda4:	ecbd 8b08 	vpop	{d8-d11}
 800dda8:	4621      	mov	r1, r4
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4640      	mov	r0, r8
 800ddae:	2302      	movs	r3, #2
 800ddb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb4:	f000 bc5c 	b.w	800e670 <arm_radix8_butterfly_f32>

0800ddb8 <arm_cfft_radix8by4_f32>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	ed2d 8b0a 	vpush	{d8-d12}
 800ddc0:	b08d      	sub	sp, #52	; 0x34
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	910b      	str	r1, [sp, #44]	; 0x2c
 800ddc6:	8801      	ldrh	r1, [r0, #0]
 800ddc8:	6842      	ldr	r2, [r0, #4]
 800ddca:	900a      	str	r0, [sp, #40]	; 0x28
 800ddcc:	0849      	lsrs	r1, r1, #1
 800ddce:	008b      	lsls	r3, r1, #2
 800ddd0:	18ee      	adds	r6, r5, r3
 800ddd2:	18f0      	adds	r0, r6, r3
 800ddd4:	edd0 5a00 	vldr	s11, [r0]
 800ddd8:	edd5 7a00 	vldr	s15, [r5]
 800dddc:	ed96 7a00 	vldr	s14, [r6]
 800dde0:	edd0 3a01 	vldr	s7, [r0, #4]
 800dde4:	ed96 4a01 	vldr	s8, [r6, #4]
 800dde8:	ed95 5a01 	vldr	s10, [r5, #4]
 800ddec:	9008      	str	r0, [sp, #32]
 800ddee:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800ddf2:	18c7      	adds	r7, r0, r3
 800ddf4:	edd7 4a00 	vldr	s9, [r7]
 800ddf8:	ed97 3a01 	vldr	s6, [r7, #4]
 800ddfc:	9701      	str	r7, [sp, #4]
 800ddfe:	ee77 6a06 	vadd.f32	s13, s14, s12
 800de02:	462c      	mov	r4, r5
 800de04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800de08:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800de0c:	ee16 ca90 	vmov	ip, s13
 800de10:	f844 cb08 	str.w	ip, [r4], #8
 800de14:	ee75 6a23 	vadd.f32	s13, s10, s7
 800de18:	edd6 5a01 	vldr	s11, [r6, #4]
 800de1c:	edd7 2a01 	vldr	s5, [r7, #4]
 800de20:	9404      	str	r4, [sp, #16]
 800de22:	ee35 5a63 	vsub.f32	s10, s10, s7
 800de26:	ee74 3a27 	vadd.f32	s7, s8, s15
 800de2a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800de2e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800de32:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800de36:	0849      	lsrs	r1, r1, #1
 800de38:	f102 0e08 	add.w	lr, r2, #8
 800de3c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800de40:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800de44:	9109      	str	r1, [sp, #36]	; 0x24
 800de46:	ee35 4a47 	vsub.f32	s8, s10, s14
 800de4a:	f1a1 0902 	sub.w	r9, r1, #2
 800de4e:	f8cd e00c 	str.w	lr, [sp, #12]
 800de52:	4631      	mov	r1, r6
 800de54:	ee13 ea90 	vmov	lr, s7
 800de58:	ee36 6a64 	vsub.f32	s12, s12, s9
 800de5c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800de60:	4604      	mov	r4, r0
 800de62:	edc5 5a01 	vstr	s11, [r5, #4]
 800de66:	ee37 7a05 	vadd.f32	s14, s14, s10
 800de6a:	f841 eb08 	str.w	lr, [r1], #8
 800de6e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800de72:	ee16 ea10 	vmov	lr, s12
 800de76:	ed86 5a01 	vstr	s10, [r6, #4]
 800de7a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800de7e:	f844 eb08 	str.w	lr, [r4], #8
 800de82:	ee77 7a83 	vadd.f32	s15, s15, s6
 800de86:	edc0 6a01 	vstr	s13, [r0, #4]
 800de8a:	9405      	str	r4, [sp, #20]
 800de8c:	4604      	mov	r4, r0
 800de8e:	ee17 0a90 	vmov	r0, s15
 800de92:	9106      	str	r1, [sp, #24]
 800de94:	ee37 7a64 	vsub.f32	s14, s14, s9
 800de98:	f102 0110 	add.w	r1, r2, #16
 800de9c:	46bc      	mov	ip, r7
 800de9e:	9100      	str	r1, [sp, #0]
 800dea0:	f847 0b08 	str.w	r0, [r7], #8
 800dea4:	f102 0118 	add.w	r1, r2, #24
 800dea8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800deac:	9102      	str	r1, [sp, #8]
 800deae:	ed8c 7a01 	vstr	s14, [ip, #4]
 800deb2:	9007      	str	r0, [sp, #28]
 800deb4:	f000 8134 	beq.w	800e120 <arm_cfft_radix8by4_f32+0x368>
 800deb8:	f102 0920 	add.w	r9, r2, #32
 800debc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800dec0:	9a01      	ldr	r2, [sp, #4]
 800dec2:	f8dd a000 	ldr.w	sl, [sp]
 800dec6:	3b0c      	subs	r3, #12
 800dec8:	4683      	mov	fp, r0
 800deca:	4463      	add	r3, ip
 800decc:	f105 0e10 	add.w	lr, r5, #16
 800ded0:	f1a4 010c 	sub.w	r1, r4, #12
 800ded4:	f104 0510 	add.w	r5, r4, #16
 800ded8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800dedc:	f1a2 040c 	sub.w	r4, r2, #12
 800dee0:	f106 0010 	add.w	r0, r6, #16
 800dee4:	3210      	adds	r2, #16
 800dee6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800deea:	ed55 5a02 	vldr	s11, [r5, #-8]
 800deee:	ed50 7a02 	vldr	s15, [r0, #-8]
 800def2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800def6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800defa:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800defe:	ed12 1a01 	vldr	s2, [r2, #-4]
 800df02:	ed10 8a01 	vldr	s16, [r0, #-4]
 800df06:	ee35 4a25 	vadd.f32	s8, s10, s11
 800df0a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800df0e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800df12:	ee30 0a66 	vsub.f32	s0, s0, s13
 800df16:	ee37 7a21 	vadd.f32	s14, s14, s3
 800df1a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800df1e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800df22:	ed10 7a01 	vldr	s14, [r0, #-4]
 800df26:	ed52 6a01 	vldr	s13, [r2, #-4]
 800df2a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800df2e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800df32:	ee37 7a26 	vadd.f32	s14, s14, s13
 800df36:	ee70 3a67 	vsub.f32	s7, s0, s15
 800df3a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800df3e:	ed94 7a02 	vldr	s14, [r4, #8]
 800df42:	ed9c 2a02 	vldr	s4, [ip, #8]
 800df46:	ed91 ba02 	vldr	s22, [r1, #8]
 800df4a:	edd3 9a02 	vldr	s19, [r3, #8]
 800df4e:	edd4 2a01 	vldr	s5, [r4, #4]
 800df52:	ed9c 9a01 	vldr	s18, [ip, #4]
 800df56:	ed93 5a01 	vldr	s10, [r3, #4]
 800df5a:	edd1 0a01 	vldr	s1, [r1, #4]
 800df5e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800df62:	ee32 2a47 	vsub.f32	s4, s4, s14
 800df66:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800df6a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800df6e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800df72:	ee79 2a62 	vsub.f32	s5, s18, s5
 800df76:	ed8c 7a02 	vstr	s14, [ip, #8]
 800df7a:	ed91 7a01 	vldr	s14, [r1, #4]
 800df7e:	edd3 8a01 	vldr	s17, [r3, #4]
 800df82:	ee34 7a87 	vadd.f32	s14, s9, s14
 800df86:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800df8a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800df8e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800df92:	ed8c 7a01 	vstr	s14, [ip, #4]
 800df96:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800df9a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800df9e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800dfa2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800dfa6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800dfaa:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800dfae:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800dfb2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800dfb6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800dfba:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800dfbe:	ee63 ca87 	vmul.f32	s25, s7, s14
 800dfc2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800dfc6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800dfca:	ee68 8a87 	vmul.f32	s17, s17, s14
 800dfce:	ee73 3aea 	vsub.f32	s7, s7, s21
 800dfd2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800dfd6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800dfda:	ee3b aaca 	vsub.f32	s20, s23, s20
 800dfde:	ee34 4a67 	vsub.f32	s8, s8, s15
 800dfe2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800dfe6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800dfea:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800dfee:	ed00 7a02 	vstr	s14, [r0, #-8]
 800dff2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800dff6:	edc1 8a01 	vstr	s17, [r1, #4]
 800dffa:	ed81 aa02 	vstr	s20, [r1, #8]
 800dffe:	ed59 3a04 	vldr	s7, [r9, #-16]
 800e002:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800e006:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800e00a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800e00e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800e012:	ee36 6a41 	vsub.f32	s12, s12, s2
 800e016:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800e01a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800e01e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800e022:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e026:	ee24 4a26 	vmul.f32	s8, s8, s13
 800e02a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e02e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800e032:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800e036:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e03a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e03e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800e042:	ee79 3a29 	vadd.f32	s7, s18, s19
 800e046:	ee75 6a60 	vsub.f32	s13, s10, s1
 800e04a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800e04e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e052:	ed45 3a02 	vstr	s7, [r5, #-8]
 800e056:	ed05 6a01 	vstr	s12, [r5, #-4]
 800e05a:	ed84 7a01 	vstr	s14, [r4, #4]
 800e05e:	ed84 4a02 	vstr	s8, [r4, #8]
 800e062:	ee35 6a81 	vadd.f32	s12, s11, s2
 800e066:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800e06a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800e06e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800e072:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e076:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800e07a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800e07e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e082:	ee26 5a25 	vmul.f32	s10, s12, s11
 800e086:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e08a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e08e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e092:	ee63 6a26 	vmul.f32	s13, s6, s13
 800e096:	ee23 3a25 	vmul.f32	s6, s6, s11
 800e09a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e09e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800e0a2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800e0a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e0aa:	f1bb 0b01 	subs.w	fp, fp, #1
 800e0ae:	ed42 5a02 	vstr	s11, [r2, #-8]
 800e0b2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e0b6:	f10e 0e08 	add.w	lr, lr, #8
 800e0ba:	ed83 3a02 	vstr	s6, [r3, #8]
 800e0be:	ed83 7a01 	vstr	s14, [r3, #4]
 800e0c2:	f1ac 0c08 	sub.w	ip, ip, #8
 800e0c6:	f10a 0a08 	add.w	sl, sl, #8
 800e0ca:	f100 0008 	add.w	r0, r0, #8
 800e0ce:	f1a1 0108 	sub.w	r1, r1, #8
 800e0d2:	f109 0910 	add.w	r9, r9, #16
 800e0d6:	f105 0508 	add.w	r5, r5, #8
 800e0da:	f1a4 0408 	sub.w	r4, r4, #8
 800e0de:	f108 0818 	add.w	r8, r8, #24
 800e0e2:	f102 0208 	add.w	r2, r2, #8
 800e0e6:	f1a3 0308 	sub.w	r3, r3, #8
 800e0ea:	f47f aefc 	bne.w	800dee6 <arm_cfft_radix8by4_f32+0x12e>
 800e0ee:	9907      	ldr	r1, [sp, #28]
 800e0f0:	9800      	ldr	r0, [sp, #0]
 800e0f2:	00cb      	lsls	r3, r1, #3
 800e0f4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800e0f8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800e0fc:	9100      	str	r1, [sp, #0]
 800e0fe:	9904      	ldr	r1, [sp, #16]
 800e100:	4419      	add	r1, r3
 800e102:	9104      	str	r1, [sp, #16]
 800e104:	9903      	ldr	r1, [sp, #12]
 800e106:	4419      	add	r1, r3
 800e108:	9103      	str	r1, [sp, #12]
 800e10a:	9906      	ldr	r1, [sp, #24]
 800e10c:	4419      	add	r1, r3
 800e10e:	9106      	str	r1, [sp, #24]
 800e110:	9905      	ldr	r1, [sp, #20]
 800e112:	441f      	add	r7, r3
 800e114:	4419      	add	r1, r3
 800e116:	9b02      	ldr	r3, [sp, #8]
 800e118:	9105      	str	r1, [sp, #20]
 800e11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e11e:	9302      	str	r3, [sp, #8]
 800e120:	9904      	ldr	r1, [sp, #16]
 800e122:	9805      	ldr	r0, [sp, #20]
 800e124:	ed91 4a00 	vldr	s8, [r1]
 800e128:	edd0 6a00 	vldr	s13, [r0]
 800e12c:	9b06      	ldr	r3, [sp, #24]
 800e12e:	ed97 3a00 	vldr	s6, [r7]
 800e132:	edd3 7a00 	vldr	s15, [r3]
 800e136:	edd0 4a01 	vldr	s9, [r0, #4]
 800e13a:	edd1 3a01 	vldr	s7, [r1, #4]
 800e13e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e142:	ed93 7a01 	vldr	s14, [r3, #4]
 800e146:	9a03      	ldr	r2, [sp, #12]
 800e148:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800e14c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800e150:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800e154:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e158:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800e15c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e160:	ee74 6a66 	vsub.f32	s13, s8, s13
 800e164:	ed81 5a00 	vstr	s10, [r1]
 800e168:	ed93 5a01 	vldr	s10, [r3, #4]
 800e16c:	edd7 4a01 	vldr	s9, [r7, #4]
 800e170:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e174:	ee37 4a26 	vadd.f32	s8, s14, s13
 800e178:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e17c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800e180:	ed81 5a01 	vstr	s10, [r1, #4]
 800e184:	edd2 1a00 	vldr	s3, [r2]
 800e188:	edd2 2a01 	vldr	s5, [r2, #4]
 800e18c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800e190:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e194:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e198:	ee64 4a21 	vmul.f32	s9, s8, s3
 800e19c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e1a0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e1a4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e1a8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800e1ac:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e1b0:	edc3 2a00 	vstr	s5, [r3]
 800e1b4:	ed83 5a01 	vstr	s10, [r3, #4]
 800e1b8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800e1bc:	9b00      	ldr	r3, [sp, #0]
 800e1be:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e1c2:	ed93 4a01 	vldr	s8, [r3, #4]
 800e1c6:	ed93 5a00 	vldr	s10, [r3]
 800e1ca:	9b02      	ldr	r3, [sp, #8]
 800e1cc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800e1d0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800e1d4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800e1d8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e1dc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e1e0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e1e4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800e1e8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e1ec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e1f0:	ed80 6a01 	vstr	s12, [r0, #4]
 800e1f4:	edc0 5a00 	vstr	s11, [r0]
 800e1f8:	edd3 5a01 	vldr	s11, [r3, #4]
 800e1fc:	edd3 6a00 	vldr	s13, [r3]
 800e200:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e204:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800e208:	ee27 6a26 	vmul.f32	s12, s14, s13
 800e20c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e210:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e214:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e218:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e21c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e220:	ed87 7a01 	vstr	s14, [r7, #4]
 800e224:	edc7 7a00 	vstr	s15, [r7]
 800e228:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800e22c:	4621      	mov	r1, r4
 800e22e:	686a      	ldr	r2, [r5, #4]
 800e230:	2304      	movs	r3, #4
 800e232:	f000 fa1d 	bl	800e670 <arm_radix8_butterfly_f32>
 800e236:	4630      	mov	r0, r6
 800e238:	4621      	mov	r1, r4
 800e23a:	686a      	ldr	r2, [r5, #4]
 800e23c:	2304      	movs	r3, #4
 800e23e:	f000 fa17 	bl	800e670 <arm_radix8_butterfly_f32>
 800e242:	9808      	ldr	r0, [sp, #32]
 800e244:	686a      	ldr	r2, [r5, #4]
 800e246:	4621      	mov	r1, r4
 800e248:	2304      	movs	r3, #4
 800e24a:	f000 fa11 	bl	800e670 <arm_radix8_butterfly_f32>
 800e24e:	686a      	ldr	r2, [r5, #4]
 800e250:	9801      	ldr	r0, [sp, #4]
 800e252:	4621      	mov	r1, r4
 800e254:	2304      	movs	r3, #4
 800e256:	b00d      	add	sp, #52	; 0x34
 800e258:	ecbd 8b0a 	vpop	{d8-d12}
 800e25c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e260:	f000 ba06 	b.w	800e670 <arm_radix8_butterfly_f32>

0800e264 <arm_cfft_f32>:
 800e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e268:	2a01      	cmp	r2, #1
 800e26a:	4606      	mov	r6, r0
 800e26c:	4617      	mov	r7, r2
 800e26e:	460c      	mov	r4, r1
 800e270:	4698      	mov	r8, r3
 800e272:	8805      	ldrh	r5, [r0, #0]
 800e274:	d056      	beq.n	800e324 <arm_cfft_f32+0xc0>
 800e276:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e27a:	d063      	beq.n	800e344 <arm_cfft_f32+0xe0>
 800e27c:	d916      	bls.n	800e2ac <arm_cfft_f32+0x48>
 800e27e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e282:	d01a      	beq.n	800e2ba <arm_cfft_f32+0x56>
 800e284:	d947      	bls.n	800e316 <arm_cfft_f32+0xb2>
 800e286:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800e28a:	d05b      	beq.n	800e344 <arm_cfft_f32+0xe0>
 800e28c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800e290:	d105      	bne.n	800e29e <arm_cfft_f32+0x3a>
 800e292:	2301      	movs	r3, #1
 800e294:	6872      	ldr	r2, [r6, #4]
 800e296:	4629      	mov	r1, r5
 800e298:	4620      	mov	r0, r4
 800e29a:	f000 f9e9 	bl	800e670 <arm_radix8_butterfly_f32>
 800e29e:	f1b8 0f00 	cmp.w	r8, #0
 800e2a2:	d111      	bne.n	800e2c8 <arm_cfft_f32+0x64>
 800e2a4:	2f01      	cmp	r7, #1
 800e2a6:	d016      	beq.n	800e2d6 <arm_cfft_f32+0x72>
 800e2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ac:	2d20      	cmp	r5, #32
 800e2ae:	d049      	beq.n	800e344 <arm_cfft_f32+0xe0>
 800e2b0:	d935      	bls.n	800e31e <arm_cfft_f32+0xba>
 800e2b2:	2d40      	cmp	r5, #64	; 0x40
 800e2b4:	d0ed      	beq.n	800e292 <arm_cfft_f32+0x2e>
 800e2b6:	2d80      	cmp	r5, #128	; 0x80
 800e2b8:	d1f1      	bne.n	800e29e <arm_cfft_f32+0x3a>
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7ff fcab 	bl	800dc18 <arm_cfft_radix8by2_f32>
 800e2c2:	f1b8 0f00 	cmp.w	r8, #0
 800e2c6:	d0ed      	beq.n	800e2a4 <arm_cfft_f32+0x40>
 800e2c8:	68b2      	ldr	r2, [r6, #8]
 800e2ca:	89b1      	ldrh	r1, [r6, #12]
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f000 f841 	bl	800e354 <arm_bitreversal_32>
 800e2d2:	2f01      	cmp	r7, #1
 800e2d4:	d1e8      	bne.n	800e2a8 <arm_cfft_f32+0x44>
 800e2d6:	ee07 5a90 	vmov	s15, r5
 800e2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e2e6:	2d00      	cmp	r5, #0
 800e2e8:	d0de      	beq.n	800e2a8 <arm_cfft_f32+0x44>
 800e2ea:	f104 0108 	add.w	r1, r4, #8
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	429d      	cmp	r5, r3
 800e2f4:	f101 0108 	add.w	r1, r1, #8
 800e2f8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800e2fc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800e300:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e304:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e308:	ed01 7a04 	vstr	s14, [r1, #-16]
 800e30c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800e310:	d1ee      	bne.n	800e2f0 <arm_cfft_f32+0x8c>
 800e312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e316:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800e31a:	d0ba      	beq.n	800e292 <arm_cfft_f32+0x2e>
 800e31c:	e7bf      	b.n	800e29e <arm_cfft_f32+0x3a>
 800e31e:	2d10      	cmp	r5, #16
 800e320:	d0cb      	beq.n	800e2ba <arm_cfft_f32+0x56>
 800e322:	e7bc      	b.n	800e29e <arm_cfft_f32+0x3a>
 800e324:	b19d      	cbz	r5, 800e34e <arm_cfft_f32+0xea>
 800e326:	f101 030c 	add.w	r3, r1, #12
 800e32a:	2200      	movs	r2, #0
 800e32c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800e330:	3201      	adds	r2, #1
 800e332:	eef1 7a67 	vneg.f32	s15, s15
 800e336:	4295      	cmp	r5, r2
 800e338:	ed43 7a02 	vstr	s15, [r3, #-8]
 800e33c:	f103 0308 	add.w	r3, r3, #8
 800e340:	d1f4      	bne.n	800e32c <arm_cfft_f32+0xc8>
 800e342:	e798      	b.n	800e276 <arm_cfft_f32+0x12>
 800e344:	4621      	mov	r1, r4
 800e346:	4630      	mov	r0, r6
 800e348:	f7ff fd36 	bl	800ddb8 <arm_cfft_radix8by4_f32>
 800e34c:	e7a7      	b.n	800e29e <arm_cfft_f32+0x3a>
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d0aa      	beq.n	800e2a8 <arm_cfft_f32+0x44>
 800e352:	e7b9      	b.n	800e2c8 <arm_cfft_f32+0x64>

0800e354 <arm_bitreversal_32>:
 800e354:	b1e9      	cbz	r1, 800e392 <arm_bitreversal_32+0x3e>
 800e356:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e358:	2500      	movs	r5, #0
 800e35a:	f102 0e02 	add.w	lr, r2, #2
 800e35e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800e362:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800e366:	08a4      	lsrs	r4, r4, #2
 800e368:	089b      	lsrs	r3, r3, #2
 800e36a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800e36e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800e372:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800e376:	00a6      	lsls	r6, r4, #2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800e37e:	3304      	adds	r3, #4
 800e380:	1d34      	adds	r4, r6, #4
 800e382:	3502      	adds	r5, #2
 800e384:	58c6      	ldr	r6, [r0, r3]
 800e386:	5907      	ldr	r7, [r0, r4]
 800e388:	50c7      	str	r7, [r0, r3]
 800e38a:	428d      	cmp	r5, r1
 800e38c:	5106      	str	r6, [r0, r4]
 800e38e:	d3e6      	bcc.n	800e35e <arm_bitreversal_32+0xa>
 800e390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e392:	4770      	bx	lr

0800e394 <arm_cmplx_mag_f32>:
 800e394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e398:	ed2d 8b02 	vpush	{d8}
 800e39c:	0897      	lsrs	r7, r2, #2
 800e39e:	b084      	sub	sp, #16
 800e3a0:	d077      	beq.n	800e492 <arm_cmplx_mag_f32+0xfe>
 800e3a2:	f04f 0800 	mov.w	r8, #0
 800e3a6:	f100 0420 	add.w	r4, r0, #32
 800e3aa:	f101 0510 	add.w	r5, r1, #16
 800e3ae:	463e      	mov	r6, r7
 800e3b0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800e3b4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800e3b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e3bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e3c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3cc:	f2c0 80c5 	blt.w	800e55a <arm_cmplx_mag_f32+0x1c6>
 800e3d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e3dc:	f100 80cb 	bmi.w	800e576 <arm_cmplx_mag_f32+0x1e2>
 800e3e0:	ed05 8a04 	vstr	s16, [r5, #-16]
 800e3e4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800e3e8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800e3ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e3f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e3f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	f2c0 80a8 	blt.w	800e554 <arm_cmplx_mag_f32+0x1c0>
 800e404:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e410:	f100 80a8 	bmi.w	800e564 <arm_cmplx_mag_f32+0x1d0>
 800e414:	ed05 8a03 	vstr	s16, [r5, #-12]
 800e418:	ed14 0a04 	vldr	s0, [r4, #-16]
 800e41c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800e420:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e424:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e428:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e42c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e434:	f2c0 808b 	blt.w	800e54e <arm_cmplx_mag_f32+0x1ba>
 800e438:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e440:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e444:	f100 80a9 	bmi.w	800e59a <arm_cmplx_mag_f32+0x206>
 800e448:	ed05 8a02 	vstr	s16, [r5, #-8]
 800e44c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e450:	ed54 7a01 	vldr	s15, [r4, #-4]
 800e454:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e458:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e45c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e460:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e468:	db6e      	blt.n	800e548 <arm_cmplx_mag_f32+0x1b4>
 800e46a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e472:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e476:	f100 8087 	bmi.w	800e588 <arm_cmplx_mag_f32+0x1f4>
 800e47a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800e47e:	3e01      	subs	r6, #1
 800e480:	f104 0420 	add.w	r4, r4, #32
 800e484:	f105 0510 	add.w	r5, r5, #16
 800e488:	d192      	bne.n	800e3b0 <arm_cmplx_mag_f32+0x1c>
 800e48a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800e48e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800e492:	f012 0203 	ands.w	r2, r2, #3
 800e496:	d052      	beq.n	800e53e <arm_cmplx_mag_f32+0x1aa>
 800e498:	ed90 0a00 	vldr	s0, [r0]
 800e49c:	edd0 7a01 	vldr	s15, [r0, #4]
 800e4a0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e4a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e4ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	bfb8      	it	lt
 800e4b8:	600b      	strlt	r3, [r1, #0]
 800e4ba:	db08      	blt.n	800e4ce <arm_cmplx_mag_f32+0x13a>
 800e4bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e4c8:	d479      	bmi.n	800e5be <arm_cmplx_mag_f32+0x22a>
 800e4ca:	ed81 8a00 	vstr	s16, [r1]
 800e4ce:	3a01      	subs	r2, #1
 800e4d0:	d035      	beq.n	800e53e <arm_cmplx_mag_f32+0x1aa>
 800e4d2:	ed90 0a02 	vldr	s0, [r0, #8]
 800e4d6:	edd0 7a03 	vldr	s15, [r0, #12]
 800e4da:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e4de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e4e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f0:	bfb8      	it	lt
 800e4f2:	604b      	strlt	r3, [r1, #4]
 800e4f4:	db08      	blt.n	800e508 <arm_cmplx_mag_f32+0x174>
 800e4f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e502:	d453      	bmi.n	800e5ac <arm_cmplx_mag_f32+0x218>
 800e504:	ed81 8a01 	vstr	s16, [r1, #4]
 800e508:	2a01      	cmp	r2, #1
 800e50a:	d018      	beq.n	800e53e <arm_cmplx_mag_f32+0x1aa>
 800e50c:	ed90 0a04 	vldr	s0, [r0, #16]
 800e510:	edd0 7a05 	vldr	s15, [r0, #20]
 800e514:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e51c:	2300      	movs	r3, #0
 800e51e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e522:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52a:	db19      	blt.n	800e560 <arm_cmplx_mag_f32+0x1cc>
 800e52c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e538:	d44a      	bmi.n	800e5d0 <arm_cmplx_mag_f32+0x23c>
 800e53a:	ed81 8a02 	vstr	s16, [r1, #8]
 800e53e:	b004      	add	sp, #16
 800e540:	ecbd 8b02 	vpop	{d8}
 800e544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e548:	f845 8c04 	str.w	r8, [r5, #-4]
 800e54c:	e797      	b.n	800e47e <arm_cmplx_mag_f32+0xea>
 800e54e:	f845 8c08 	str.w	r8, [r5, #-8]
 800e552:	e77b      	b.n	800e44c <arm_cmplx_mag_f32+0xb8>
 800e554:	f845 8c0c 	str.w	r8, [r5, #-12]
 800e558:	e75e      	b.n	800e418 <arm_cmplx_mag_f32+0x84>
 800e55a:	f845 8c10 	str.w	r8, [r5, #-16]
 800e55e:	e741      	b.n	800e3e4 <arm_cmplx_mag_f32+0x50>
 800e560:	608b      	str	r3, [r1, #8]
 800e562:	e7ec      	b.n	800e53e <arm_cmplx_mag_f32+0x1aa>
 800e564:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e568:	9001      	str	r0, [sp, #4]
 800e56a:	f005 f923 	bl	80137b4 <sqrtf>
 800e56e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e572:	9801      	ldr	r0, [sp, #4]
 800e574:	e74e      	b.n	800e414 <arm_cmplx_mag_f32+0x80>
 800e576:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e57a:	9001      	str	r0, [sp, #4]
 800e57c:	f005 f91a 	bl	80137b4 <sqrtf>
 800e580:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e584:	9801      	ldr	r0, [sp, #4]
 800e586:	e72b      	b.n	800e3e0 <arm_cmplx_mag_f32+0x4c>
 800e588:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e58c:	9001      	str	r0, [sp, #4]
 800e58e:	f005 f911 	bl	80137b4 <sqrtf>
 800e592:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e596:	9801      	ldr	r0, [sp, #4]
 800e598:	e76f      	b.n	800e47a <arm_cmplx_mag_f32+0xe6>
 800e59a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e59e:	9001      	str	r0, [sp, #4]
 800e5a0:	f005 f908 	bl	80137b4 <sqrtf>
 800e5a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e5a8:	9801      	ldr	r0, [sp, #4]
 800e5aa:	e74d      	b.n	800e448 <arm_cmplx_mag_f32+0xb4>
 800e5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5b0:	9201      	str	r2, [sp, #4]
 800e5b2:	f005 f8ff 	bl	80137b4 <sqrtf>
 800e5b6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800e5ba:	9903      	ldr	r1, [sp, #12]
 800e5bc:	e7a2      	b.n	800e504 <arm_cmplx_mag_f32+0x170>
 800e5be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5c2:	9201      	str	r2, [sp, #4]
 800e5c4:	f005 f8f6 	bl	80137b4 <sqrtf>
 800e5c8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800e5cc:	9903      	ldr	r1, [sp, #12]
 800e5ce:	e77c      	b.n	800e4ca <arm_cmplx_mag_f32+0x136>
 800e5d0:	9101      	str	r1, [sp, #4]
 800e5d2:	f005 f8ef 	bl	80137b4 <sqrtf>
 800e5d6:	9901      	ldr	r1, [sp, #4]
 800e5d8:	e7af      	b.n	800e53a <arm_cmplx_mag_f32+0x1a6>
 800e5da:	bf00      	nop

0800e5dc <arm_cos_f32>:
 800e5dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800e664 <arm_cos_f32+0x88>
 800e5e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e5e4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e5e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e5ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e5f8:	d504      	bpl.n	800e604 <arm_cos_f32+0x28>
 800e5fa:	ee17 3a90 	vmov	r3, s15
 800e5fe:	3b01      	subs	r3, #1
 800e600:	ee07 3a90 	vmov	s15, r3
 800e604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e608:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e668 <arm_cos_f32+0x8c>
 800e60c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e610:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e614:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e618:	ee17 3a90 	vmov	r3, s15
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e622:	d21a      	bcs.n	800e65a <arm_cos_f32+0x7e>
 800e624:	ee07 3a90 	vmov	s15, r3
 800e628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e62c:	1c59      	adds	r1, r3, #1
 800e62e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e632:	4a0e      	ldr	r2, [pc, #56]	; (800e66c <arm_cos_f32+0x90>)
 800e634:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e63c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e640:	ed93 7a00 	vldr	s14, [r3]
 800e644:	edd2 6a00 	vldr	s13, [r2]
 800e648:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e64c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e650:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e654:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e658:	4770      	bx	lr
 800e65a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e65e:	2101      	movs	r1, #1
 800e660:	2300      	movs	r3, #0
 800e662:	e7e6      	b.n	800e632 <arm_cos_f32+0x56>
 800e664:	3e22f983 	.word	0x3e22f983
 800e668:	44000000 	.word	0x44000000
 800e66c:	0801a160 	.word	0x0801a160

0800e670 <arm_radix8_butterfly_f32>:
 800e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	ed2d 8b10 	vpush	{d8-d15}
 800e678:	b095      	sub	sp, #84	; 0x54
 800e67a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e67e:	4603      	mov	r3, r0
 800e680:	3304      	adds	r3, #4
 800e682:	ed9f bab9 	vldr	s22, [pc, #740]	; 800e968 <arm_radix8_butterfly_f32+0x2f8>
 800e686:	9012      	str	r0, [sp, #72]	; 0x48
 800e688:	468b      	mov	fp, r1
 800e68a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e68c:	4689      	mov	r9, r1
 800e68e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800e692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e694:	960f      	str	r6, [sp, #60]	; 0x3c
 800e696:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800e69a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800e69e:	eb03 0508 	add.w	r5, r3, r8
 800e6a2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e6a6:	eb05 040e 	add.w	r4, r5, lr
 800e6aa:	0137      	lsls	r7, r6, #4
 800e6ac:	eba6 030a 	sub.w	r3, r6, sl
 800e6b0:	eb04 000e 	add.w	r0, r4, lr
 800e6b4:	44b2      	add	sl, r6
 800e6b6:	1d3a      	adds	r2, r7, #4
 800e6b8:	9702      	str	r7, [sp, #8]
 800e6ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e6be:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800e6c2:	ebae 0c06 	sub.w	ip, lr, r6
 800e6c6:	9703      	str	r7, [sp, #12]
 800e6c8:	eb03 0708 	add.w	r7, r3, r8
 800e6cc:	9701      	str	r7, [sp, #4]
 800e6ce:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800e6d2:	9706      	str	r7, [sp, #24]
 800e6d4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e6d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800e6da:	f10e 0104 	add.w	r1, lr, #4
 800e6de:	4439      	add	r1, r7
 800e6e0:	443a      	add	r2, r7
 800e6e2:	0137      	lsls	r7, r6, #4
 800e6e4:	00f6      	lsls	r6, r6, #3
 800e6e6:	9704      	str	r7, [sp, #16]
 800e6e8:	9605      	str	r6, [sp, #20]
 800e6ea:	9f01      	ldr	r7, [sp, #4]
 800e6ec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e6ee:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800e6f2:	f04f 0c00 	mov.w	ip, #0
 800e6f6:	edd4 6a00 	vldr	s13, [r4]
 800e6fa:	edd7 1a00 	vldr	s3, [r7]
 800e6fe:	ed16 aa01 	vldr	s20, [r6, #-4]
 800e702:	edd5 5a00 	vldr	s11, [r5]
 800e706:	ed52 9a01 	vldr	s19, [r2, #-4]
 800e70a:	ed90 6a00 	vldr	s12, [r0]
 800e70e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e712:	ed93 3a00 	vldr	s6, [r3]
 800e716:	ee39 0a86 	vadd.f32	s0, s19, s12
 800e71a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800e71e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800e722:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800e726:	ee35 7a02 	vadd.f32	s14, s10, s4
 800e72a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800e72e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e732:	ee74 6a07 	vadd.f32	s13, s8, s14
 800e736:	ee34 4a47 	vsub.f32	s8, s8, s14
 800e73a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800e73e:	ed85 4a00 	vstr	s8, [r5]
 800e742:	edd1 6a00 	vldr	s13, [r1]
 800e746:	ed94 9a01 	vldr	s18, [r4, #4]
 800e74a:	edd3 2a01 	vldr	s5, [r3, #4]
 800e74e:	edd7 8a01 	vldr	s17, [r7, #4]
 800e752:	edd6 0a00 	vldr	s1, [r6]
 800e756:	edd5 3a01 	vldr	s7, [r5, #4]
 800e75a:	ed90 8a01 	vldr	s16, [r0, #4]
 800e75e:	ed92 7a00 	vldr	s14, [r2]
 800e762:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e766:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800e76a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800e76e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800e772:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800e776:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e77a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800e77e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800e782:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800e786:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800e78a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800e78e:	ee77 0a08 	vadd.f32	s1, s14, s16
 800e792:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800e796:	ee37 7a48 	vsub.f32	s14, s14, s16
 800e79a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800e79e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800e7a2:	ee76 6a89 	vadd.f32	s13, s13, s18
 800e7a6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800e7aa:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800e7ae:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e7b2:	ee35 5a42 	vsub.f32	s10, s10, s4
 800e7b6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800e7ba:	ee33 2a20 	vadd.f32	s4, s6, s1
 800e7be:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800e7c2:	ee33 3a60 	vsub.f32	s6, s6, s1
 800e7c6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800e7ca:	ee77 0a01 	vadd.f32	s1, s14, s2
 800e7ce:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800e7d2:	ee37 7a41 	vsub.f32	s14, s14, s2
 800e7d6:	ee73 1a84 	vadd.f32	s3, s7, s8
 800e7da:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800e7de:	ee76 3a27 	vadd.f32	s7, s12, s15
 800e7e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e7e6:	ee32 8a00 	vadd.f32	s16, s4, s0
 800e7ea:	ee33 1a45 	vsub.f32	s2, s6, s10
 800e7ee:	ee32 2a40 	vsub.f32	s4, s4, s0
 800e7f2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e7f6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800e7fa:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800e7fe:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800e802:	ee34 6a67 	vsub.f32	s12, s8, s15
 800e806:	ee75 4a87 	vadd.f32	s9, s11, s14
 800e80a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800e80e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800e812:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e816:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800e81a:	44dc      	add	ip, fp
 800e81c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e820:	45e1      	cmp	r9, ip
 800e822:	ed86 8a00 	vstr	s16, [r6]
 800e826:	ed85 2a01 	vstr	s4, [r5, #4]
 800e82a:	4456      	add	r6, sl
 800e82c:	ed02 0a01 	vstr	s0, [r2, #-4]
 800e830:	4455      	add	r5, sl
 800e832:	edc0 6a00 	vstr	s13, [r0]
 800e836:	ed82 1a00 	vstr	s2, [r2]
 800e83a:	ed80 5a01 	vstr	s10, [r0, #4]
 800e83e:	4452      	add	r2, sl
 800e840:	ed01 3a01 	vstr	s6, [r1, #-4]
 800e844:	4450      	add	r0, sl
 800e846:	edc7 2a00 	vstr	s5, [r7]
 800e84a:	edc4 4a00 	vstr	s9, [r4]
 800e84e:	ed83 7a00 	vstr	s14, [r3]
 800e852:	edc1 5a00 	vstr	s11, [r1]
 800e856:	edc7 3a01 	vstr	s7, [r7, #4]
 800e85a:	4451      	add	r1, sl
 800e85c:	ed84 6a01 	vstr	s12, [r4, #4]
 800e860:	4457      	add	r7, sl
 800e862:	edc3 7a01 	vstr	s15, [r3, #4]
 800e866:	4454      	add	r4, sl
 800e868:	4453      	add	r3, sl
 800e86a:	f63f af44 	bhi.w	800e6f6 <arm_radix8_butterfly_f32+0x86>
 800e86e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e870:	2b07      	cmp	r3, #7
 800e872:	f240 81b7 	bls.w	800ebe4 <arm_radix8_butterfly_f32+0x574>
 800e876:	9b06      	ldr	r3, [sp, #24]
 800e878:	9903      	ldr	r1, [sp, #12]
 800e87a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e87c:	9e05      	ldr	r6, [sp, #20]
 800e87e:	9a04      	ldr	r2, [sp, #16]
 800e880:	f103 0c08 	add.w	ip, r3, #8
 800e884:	9b02      	ldr	r3, [sp, #8]
 800e886:	3108      	adds	r1, #8
 800e888:	f108 0808 	add.w	r8, r8, #8
 800e88c:	1841      	adds	r1, r0, r1
 800e88e:	3608      	adds	r6, #8
 800e890:	330c      	adds	r3, #12
 800e892:	4604      	mov	r4, r0
 800e894:	4444      	add	r4, r8
 800e896:	18c3      	adds	r3, r0, r3
 800e898:	9109      	str	r1, [sp, #36]	; 0x24
 800e89a:	1981      	adds	r1, r0, r6
 800e89c:	f10e 0e08 	add.w	lr, lr, #8
 800e8a0:	3208      	adds	r2, #8
 800e8a2:	940b      	str	r4, [sp, #44]	; 0x2c
 800e8a4:	9107      	str	r1, [sp, #28]
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	4601      	mov	r1, r0
 800e8aa:	9304      	str	r3, [sp, #16]
 800e8ac:	f100 030c 	add.w	r3, r0, #12
 800e8b0:	4474      	add	r4, lr
 800e8b2:	f04f 0801 	mov.w	r8, #1
 800e8b6:	1882      	adds	r2, r0, r2
 800e8b8:	4461      	add	r1, ip
 800e8ba:	9305      	str	r3, [sp, #20]
 800e8bc:	464b      	mov	r3, r9
 800e8be:	940a      	str	r4, [sp, #40]	; 0x28
 800e8c0:	46c1      	mov	r9, r8
 800e8c2:	9208      	str	r2, [sp, #32]
 800e8c4:	46d8      	mov	r8, fp
 800e8c6:	9106      	str	r1, [sp, #24]
 800e8c8:	f04f 0e00 	mov.w	lr, #0
 800e8cc:	469b      	mov	fp, r3
 800e8ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e8d2:	449e      	add	lr, r3
 800e8d4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800e8d8:	441a      	add	r2, r3
 800e8da:	920e      	str	r2, [sp, #56]	; 0x38
 800e8dc:	441a      	add	r2, r3
 800e8de:	18d4      	adds	r4, r2, r3
 800e8e0:	18e5      	adds	r5, r4, r3
 800e8e2:	18ee      	adds	r6, r5, r3
 800e8e4:	18f7      	adds	r7, r6, r3
 800e8e6:	eb07 0c03 	add.w	ip, r7, r3
 800e8ea:	920d      	str	r2, [sp, #52]	; 0x34
 800e8ec:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800e8f0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800e8f4:	910c      	str	r1, [sp, #48]	; 0x30
 800e8f6:	4419      	add	r1, r3
 800e8f8:	9103      	str	r1, [sp, #12]
 800e8fa:	4419      	add	r1, r3
 800e8fc:	18ca      	adds	r2, r1, r3
 800e8fe:	9202      	str	r2, [sp, #8]
 800e900:	441a      	add	r2, r3
 800e902:	18d0      	adds	r0, r2, r3
 800e904:	ed92 ea01 	vldr	s28, [r2, #4]
 800e908:	9a02      	ldr	r2, [sp, #8]
 800e90a:	edd4 7a00 	vldr	s15, [r4]
 800e90e:	edd2 da01 	vldr	s27, [r2, #4]
 800e912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e914:	ed91 da01 	vldr	s26, [r1, #4]
 800e918:	ed92 ca01 	vldr	s24, [r2, #4]
 800e91c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e91e:	9903      	ldr	r1, [sp, #12]
 800e920:	edcd 7a03 	vstr	s15, [sp, #12]
 800e924:	edd2 7a00 	vldr	s15, [r2]
 800e928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e92a:	edcd 7a02 	vstr	s15, [sp, #8]
 800e92e:	edd2 7a00 	vldr	s15, [r2]
 800e932:	edd0 ea01 	vldr	s29, [r0, #4]
 800e936:	edd1 ca01 	vldr	s25, [r1, #4]
 800e93a:	eddc ba00 	vldr	s23, [ip]
 800e93e:	edd7 aa00 	vldr	s21, [r7]
 800e942:	ed96 aa00 	vldr	s20, [r6]
 800e946:	edd5 9a00 	vldr	s19, [r5]
 800e94a:	edcd 7a01 	vstr	s15, [sp, #4]
 800e94e:	4403      	add	r3, r0
 800e950:	ed93 fa01 	vldr	s30, [r3, #4]
 800e954:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800e958:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800e95c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e960:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e964:	46cc      	mov	ip, r9
 800e966:	e001      	b.n	800e96c <arm_radix8_butterfly_f32+0x2fc>
 800e968:	3f3504f3 	.word	0x3f3504f3
 800e96c:	ed91 6a00 	vldr	s12, [r1]
 800e970:	ed93 5a00 	vldr	s10, [r3]
 800e974:	edd0 fa00 	vldr	s31, [r0]
 800e978:	edd4 7a00 	vldr	s15, [r4]
 800e97c:	ed95 7a00 	vldr	s14, [r5]
 800e980:	ed56 3a01 	vldr	s7, [r6, #-4]
 800e984:	ed17 3a01 	vldr	s6, [r7, #-4]
 800e988:	ed92 2a00 	vldr	s4, [r2]
 800e98c:	ed96 0a00 	vldr	s0, [r6]
 800e990:	ee33 8a85 	vadd.f32	s16, s7, s10
 800e994:	ee32 1a06 	vadd.f32	s2, s4, s12
 800e998:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800e99c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800e9a0:	ee78 1a04 	vadd.f32	s3, s16, s8
 800e9a4:	ee71 6a24 	vadd.f32	s13, s2, s9
 800e9a8:	ee32 2a46 	vsub.f32	s4, s4, s12
 800e9ac:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800e9b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9b4:	ed06 6a01 	vstr	s12, [r6, #-4]
 800e9b8:	edd4 8a01 	vldr	s17, [r4, #4]
 800e9bc:	ed92 9a01 	vldr	s18, [r2, #4]
 800e9c0:	edd7 0a00 	vldr	s1, [r7]
 800e9c4:	edd1 2a01 	vldr	s5, [r1, #4]
 800e9c8:	ed95 7a01 	vldr	s14, [r5, #4]
 800e9cc:	ed93 6a01 	vldr	s12, [r3, #4]
 800e9d0:	edd0 5a01 	vldr	s11, [r0, #4]
 800e9d4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800e9d8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800e9dc:	ee39 5a62 	vsub.f32	s10, s18, s5
 800e9e0:	ee78 fac7 	vsub.f32	s31, s17, s14
 800e9e4:	ee38 4a44 	vsub.f32	s8, s16, s8
 800e9e8:	ee38 7a87 	vadd.f32	s14, s17, s14
 800e9ec:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800e9f0:	ee79 2a22 	vadd.f32	s5, s18, s5
 800e9f4:	ee32 9a27 	vadd.f32	s18, s4, s15
 800e9f8:	ee72 7a67 	vsub.f32	s15, s4, s15
 800e9fc:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ea00:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800ea04:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ea08:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800ea0c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800ea10:	ee72 fa87 	vadd.f32	s31, s5, s14
 800ea14:	ee32 2a48 	vsub.f32	s4, s4, s16
 800ea18:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800ea1c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800ea20:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800ea24:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800ea28:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800ea2c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800ea30:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800ea34:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ea38:	ee30 6a46 	vsub.f32	s12, s0, s12
 800ea3c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800ea40:	ee36 0a28 	vadd.f32	s0, s12, s17
 800ea44:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ea48:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ea4c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800ea50:	ee73 8a09 	vadd.f32	s17, s6, s18
 800ea54:	ee74 4a82 	vadd.f32	s9, s9, s4
 800ea58:	ee33 9a49 	vsub.f32	s18, s6, s18
 800ea5c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800ea60:	ee35 3a85 	vadd.f32	s6, s11, s10
 800ea64:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ea68:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800ea6c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800ea70:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800ea74:	ee30 7a68 	vsub.f32	s14, s0, s17
 800ea78:	ee35 8a03 	vadd.f32	s16, s10, s6
 800ea7c:	ee38 0a80 	vadd.f32	s0, s17, s0
 800ea80:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ea84:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800ea88:	ed9d 2a01 	vldr	s4, [sp, #4]
 800ea8c:	eddd 1a02 	vldr	s3, [sp, #8]
 800ea90:	ee35 5a43 	vsub.f32	s10, s10, s6
 800ea94:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800ea98:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800ea9c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800eaa0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800eaa4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800eaa8:	ee76 5a49 	vsub.f32	s11, s12, s18
 800eaac:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800eab0:	ee39 6a06 	vadd.f32	s12, s18, s12
 800eab4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800eab8:	ee21 4a84 	vmul.f32	s8, s3, s8
 800eabc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800eac0:	ee22 7a07 	vmul.f32	s14, s4, s14
 800eac4:	ee22 2a08 	vmul.f32	s4, s4, s16
 800eac8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800eacc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800ead0:	ee31 1a09 	vadd.f32	s2, s2, s18
 800ead4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800ead8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800eadc:	ee74 0a60 	vsub.f32	s1, s8, s1
 800eae0:	ee37 7a48 	vsub.f32	s14, s14, s16
 800eae4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800eae8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800eaec:	ee72 1a21 	vadd.f32	s3, s4, s3
 800eaf0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800eaf4:	ee38 2a89 	vadd.f32	s4, s17, s18
 800eaf8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800eafc:	ee38 8a04 	vadd.f32	s16, s16, s8
 800eb00:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800eb04:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800eb08:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800eb0c:	eddd 5a03 	vldr	s11, [sp, #12]
 800eb10:	edc6 fa00 	vstr	s31, [r6]
 800eb14:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800eb18:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800eb1c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800eb20:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800eb24:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800eb28:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800eb2c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800eb30:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800eb34:	ee25 6a86 	vmul.f32	s12, s11, s12
 800eb38:	ee74 4a89 	vadd.f32	s9, s9, s18
 800eb3c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800eb40:	ee78 8a85 	vadd.f32	s17, s17, s10
 800eb44:	ee36 6a67 	vsub.f32	s12, s12, s15
 800eb48:	44c4      	add	ip, r8
 800eb4a:	45e3      	cmp	fp, ip
 800eb4c:	edc3 3a00 	vstr	s7, [r3]
 800eb50:	edc3 6a01 	vstr	s13, [r3, #4]
 800eb54:	4456      	add	r6, sl
 800eb56:	ed07 1a01 	vstr	s2, [r7, #-4]
 800eb5a:	edc7 0a00 	vstr	s1, [r7]
 800eb5e:	4453      	add	r3, sl
 800eb60:	ed80 2a00 	vstr	s4, [r0]
 800eb64:	edc0 2a01 	vstr	s5, [r0, #4]
 800eb68:	4457      	add	r7, sl
 800eb6a:	edc2 1a00 	vstr	s3, [r2]
 800eb6e:	ed82 7a01 	vstr	s14, [r2, #4]
 800eb72:	4450      	add	r0, sl
 800eb74:	ed85 8a00 	vstr	s16, [r5]
 800eb78:	ed85 0a01 	vstr	s0, [r5, #4]
 800eb7c:	4452      	add	r2, sl
 800eb7e:	edc1 4a00 	vstr	s9, [r1]
 800eb82:	4455      	add	r5, sl
 800eb84:	ed81 3a01 	vstr	s6, [r1, #4]
 800eb88:	edc4 8a00 	vstr	s17, [r4]
 800eb8c:	ed84 6a01 	vstr	s12, [r4, #4]
 800eb90:	4451      	add	r1, sl
 800eb92:	4454      	add	r4, sl
 800eb94:	f63f aeea 	bhi.w	800e96c <arm_radix8_butterfly_f32+0x2fc>
 800eb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb9a:	3308      	adds	r3, #8
 800eb9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba0:	3308      	adds	r3, #8
 800eba2:	930a      	str	r3, [sp, #40]	; 0x28
 800eba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba6:	3308      	adds	r3, #8
 800eba8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebaa:	9b08      	ldr	r3, [sp, #32]
 800ebac:	3308      	adds	r3, #8
 800ebae:	9308      	str	r3, [sp, #32]
 800ebb0:	9b07      	ldr	r3, [sp, #28]
 800ebb2:	3308      	adds	r3, #8
 800ebb4:	9307      	str	r3, [sp, #28]
 800ebb6:	9b06      	ldr	r3, [sp, #24]
 800ebb8:	3308      	adds	r3, #8
 800ebba:	9306      	str	r3, [sp, #24]
 800ebbc:	9b05      	ldr	r3, [sp, #20]
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	9305      	str	r3, [sp, #20]
 800ebc2:	9b04      	ldr	r3, [sp, #16]
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	9304      	str	r3, [sp, #16]
 800ebc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebca:	f109 0901 	add.w	r9, r9, #1
 800ebce:	454b      	cmp	r3, r9
 800ebd0:	f47f ae7d 	bne.w	800e8ce <arm_radix8_butterfly_f32+0x25e>
 800ebd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	46d9      	mov	r9, fp
 800ebdc:	9310      	str	r3, [sp, #64]	; 0x40
 800ebde:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800ebe2:	e554      	b.n	800e68e <arm_radix8_butterfly_f32+0x1e>
 800ebe4:	b015      	add	sp, #84	; 0x54
 800ebe6:	ecbd 8b10 	vpop	{d8-d15}
 800ebea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebee:	bf00      	nop

0800ebf0 <__assert_func>:
 800ebf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebf2:	4614      	mov	r4, r2
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <__assert_func+0x2c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	68d8      	ldr	r0, [r3, #12]
 800ebfe:	b14c      	cbz	r4, 800ec14 <__assert_func+0x24>
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <__assert_func+0x30>)
 800ec02:	9100      	str	r1, [sp, #0]
 800ec04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec08:	4906      	ldr	r1, [pc, #24]	; (800ec24 <__assert_func+0x34>)
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	f000 f814 	bl	800ec38 <fiprintf>
 800ec10:	f002 f83a 	bl	8010c88 <abort>
 800ec14:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <__assert_func+0x38>)
 800ec16:	461c      	mov	r4, r3
 800ec18:	e7f3      	b.n	800ec02 <__assert_func+0x12>
 800ec1a:	bf00      	nop
 800ec1c:	200000dc 	.word	0x200000dc
 800ec20:	0802a164 	.word	0x0802a164
 800ec24:	0802a171 	.word	0x0802a171
 800ec28:	0802a19f 	.word	0x0802a19f

0800ec2c <__errno>:
 800ec2c:	4b01      	ldr	r3, [pc, #4]	; (800ec34 <__errno+0x8>)
 800ec2e:	6818      	ldr	r0, [r3, #0]
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	200000dc 	.word	0x200000dc

0800ec38 <fiprintf>:
 800ec38:	b40e      	push	{r1, r2, r3}
 800ec3a:	b503      	push	{r0, r1, lr}
 800ec3c:	4601      	mov	r1, r0
 800ec3e:	ab03      	add	r3, sp, #12
 800ec40:	4805      	ldr	r0, [pc, #20]	; (800ec58 <fiprintf+0x20>)
 800ec42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec46:	6800      	ldr	r0, [r0, #0]
 800ec48:	9301      	str	r3, [sp, #4]
 800ec4a:	f000 f86b 	bl	800ed24 <_vfiprintf_r>
 800ec4e:	b002      	add	sp, #8
 800ec50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec54:	b003      	add	sp, #12
 800ec56:	4770      	bx	lr
 800ec58:	200000dc 	.word	0x200000dc

0800ec5c <__libc_init_array>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	4d0d      	ldr	r5, [pc, #52]	; (800ec94 <__libc_init_array+0x38>)
 800ec60:	4c0d      	ldr	r4, [pc, #52]	; (800ec98 <__libc_init_array+0x3c>)
 800ec62:	1b64      	subs	r4, r4, r5
 800ec64:	10a4      	asrs	r4, r4, #2
 800ec66:	2600      	movs	r6, #0
 800ec68:	42a6      	cmp	r6, r4
 800ec6a:	d109      	bne.n	800ec80 <__libc_init_array+0x24>
 800ec6c:	4d0b      	ldr	r5, [pc, #44]	; (800ec9c <__libc_init_array+0x40>)
 800ec6e:	4c0c      	ldr	r4, [pc, #48]	; (800eca0 <__libc_init_array+0x44>)
 800ec70:	f005 ff1e 	bl	8014ab0 <_init>
 800ec74:	1b64      	subs	r4, r4, r5
 800ec76:	10a4      	asrs	r4, r4, #2
 800ec78:	2600      	movs	r6, #0
 800ec7a:	42a6      	cmp	r6, r4
 800ec7c:	d105      	bne.n	800ec8a <__libc_init_array+0x2e>
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}
 800ec80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec84:	4798      	blx	r3
 800ec86:	3601      	adds	r6, #1
 800ec88:	e7ee      	b.n	800ec68 <__libc_init_array+0xc>
 800ec8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec8e:	4798      	blx	r3
 800ec90:	3601      	adds	r6, #1
 800ec92:	e7f2      	b.n	800ec7a <__libc_init_array+0x1e>
 800ec94:	0802aa80 	.word	0x0802aa80
 800ec98:	0802aa80 	.word	0x0802aa80
 800ec9c:	0802aa80 	.word	0x0802aa80
 800eca0:	0802aa84 	.word	0x0802aa84

0800eca4 <memcpy>:
 800eca4:	440a      	add	r2, r1
 800eca6:	4291      	cmp	r1, r2
 800eca8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecac:	d100      	bne.n	800ecb0 <memcpy+0xc>
 800ecae:	4770      	bx	lr
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecba:	4291      	cmp	r1, r2
 800ecbc:	d1f9      	bne.n	800ecb2 <memcpy+0xe>
 800ecbe:	bd10      	pop	{r4, pc}

0800ecc0 <memset>:
 800ecc0:	4402      	add	r2, r0
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d100      	bne.n	800ecca <memset+0xa>
 800ecc8:	4770      	bx	lr
 800ecca:	f803 1b01 	strb.w	r1, [r3], #1
 800ecce:	e7f9      	b.n	800ecc4 <memset+0x4>

0800ecd0 <__sfputc_r>:
 800ecd0:	6893      	ldr	r3, [r2, #8]
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	b410      	push	{r4}
 800ecd8:	6093      	str	r3, [r2, #8]
 800ecda:	da08      	bge.n	800ecee <__sfputc_r+0x1e>
 800ecdc:	6994      	ldr	r4, [r2, #24]
 800ecde:	42a3      	cmp	r3, r4
 800ece0:	db01      	blt.n	800ece6 <__sfputc_r+0x16>
 800ece2:	290a      	cmp	r1, #10
 800ece4:	d103      	bne.n	800ecee <__sfputc_r+0x1e>
 800ece6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecea:	f001 bf0d 	b.w	8010b08 <__swbuf_r>
 800ecee:	6813      	ldr	r3, [r2, #0]
 800ecf0:	1c58      	adds	r0, r3, #1
 800ecf2:	6010      	str	r0, [r2, #0]
 800ecf4:	7019      	strb	r1, [r3, #0]
 800ecf6:	4608      	mov	r0, r1
 800ecf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <__sfputs_r>:
 800ecfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed00:	4606      	mov	r6, r0
 800ed02:	460f      	mov	r7, r1
 800ed04:	4614      	mov	r4, r2
 800ed06:	18d5      	adds	r5, r2, r3
 800ed08:	42ac      	cmp	r4, r5
 800ed0a:	d101      	bne.n	800ed10 <__sfputs_r+0x12>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	e007      	b.n	800ed20 <__sfputs_r+0x22>
 800ed10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed14:	463a      	mov	r2, r7
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7ff ffda 	bl	800ecd0 <__sfputc_r>
 800ed1c:	1c43      	adds	r3, r0, #1
 800ed1e:	d1f3      	bne.n	800ed08 <__sfputs_r+0xa>
 800ed20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed24 <_vfiprintf_r>:
 800ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed28:	460d      	mov	r5, r1
 800ed2a:	b09d      	sub	sp, #116	; 0x74
 800ed2c:	4614      	mov	r4, r2
 800ed2e:	4698      	mov	r8, r3
 800ed30:	4606      	mov	r6, r0
 800ed32:	b118      	cbz	r0, 800ed3c <_vfiprintf_r+0x18>
 800ed34:	6983      	ldr	r3, [r0, #24]
 800ed36:	b90b      	cbnz	r3, 800ed3c <_vfiprintf_r+0x18>
 800ed38:	f002 ff42 	bl	8011bc0 <__sinit>
 800ed3c:	4b89      	ldr	r3, [pc, #548]	; (800ef64 <_vfiprintf_r+0x240>)
 800ed3e:	429d      	cmp	r5, r3
 800ed40:	d11b      	bne.n	800ed7a <_vfiprintf_r+0x56>
 800ed42:	6875      	ldr	r5, [r6, #4]
 800ed44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed46:	07d9      	lsls	r1, r3, #31
 800ed48:	d405      	bmi.n	800ed56 <_vfiprintf_r+0x32>
 800ed4a:	89ab      	ldrh	r3, [r5, #12]
 800ed4c:	059a      	lsls	r2, r3, #22
 800ed4e:	d402      	bmi.n	800ed56 <_vfiprintf_r+0x32>
 800ed50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed52:	f003 fb46 	bl	80123e2 <__retarget_lock_acquire_recursive>
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	071b      	lsls	r3, r3, #28
 800ed5a:	d501      	bpl.n	800ed60 <_vfiprintf_r+0x3c>
 800ed5c:	692b      	ldr	r3, [r5, #16]
 800ed5e:	b9eb      	cbnz	r3, 800ed9c <_vfiprintf_r+0x78>
 800ed60:	4629      	mov	r1, r5
 800ed62:	4630      	mov	r0, r6
 800ed64:	f001 ff22 	bl	8010bac <__swsetup_r>
 800ed68:	b1c0      	cbz	r0, 800ed9c <_vfiprintf_r+0x78>
 800ed6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed6c:	07dc      	lsls	r4, r3, #31
 800ed6e:	d50e      	bpl.n	800ed8e <_vfiprintf_r+0x6a>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b01d      	add	sp, #116	; 0x74
 800ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7a:	4b7b      	ldr	r3, [pc, #492]	; (800ef68 <_vfiprintf_r+0x244>)
 800ed7c:	429d      	cmp	r5, r3
 800ed7e:	d101      	bne.n	800ed84 <_vfiprintf_r+0x60>
 800ed80:	68b5      	ldr	r5, [r6, #8]
 800ed82:	e7df      	b.n	800ed44 <_vfiprintf_r+0x20>
 800ed84:	4b79      	ldr	r3, [pc, #484]	; (800ef6c <_vfiprintf_r+0x248>)
 800ed86:	429d      	cmp	r5, r3
 800ed88:	bf08      	it	eq
 800ed8a:	68f5      	ldreq	r5, [r6, #12]
 800ed8c:	e7da      	b.n	800ed44 <_vfiprintf_r+0x20>
 800ed8e:	89ab      	ldrh	r3, [r5, #12]
 800ed90:	0598      	lsls	r0, r3, #22
 800ed92:	d4ed      	bmi.n	800ed70 <_vfiprintf_r+0x4c>
 800ed94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed96:	f003 fb25 	bl	80123e4 <__retarget_lock_release_recursive>
 800ed9a:	e7e9      	b.n	800ed70 <_vfiprintf_r+0x4c>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eda0:	2320      	movs	r3, #32
 800eda2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eda6:	f8cd 800c 	str.w	r8, [sp, #12]
 800edaa:	2330      	movs	r3, #48	; 0x30
 800edac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef70 <_vfiprintf_r+0x24c>
 800edb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edb4:	f04f 0901 	mov.w	r9, #1
 800edb8:	4623      	mov	r3, r4
 800edba:	469a      	mov	sl, r3
 800edbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edc0:	b10a      	cbz	r2, 800edc6 <_vfiprintf_r+0xa2>
 800edc2:	2a25      	cmp	r2, #37	; 0x25
 800edc4:	d1f9      	bne.n	800edba <_vfiprintf_r+0x96>
 800edc6:	ebba 0b04 	subs.w	fp, sl, r4
 800edca:	d00b      	beq.n	800ede4 <_vfiprintf_r+0xc0>
 800edcc:	465b      	mov	r3, fp
 800edce:	4622      	mov	r2, r4
 800edd0:	4629      	mov	r1, r5
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7ff ff93 	bl	800ecfe <__sfputs_r>
 800edd8:	3001      	adds	r0, #1
 800edda:	f000 80aa 	beq.w	800ef32 <_vfiprintf_r+0x20e>
 800edde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ede0:	445a      	add	r2, fp
 800ede2:	9209      	str	r2, [sp, #36]	; 0x24
 800ede4:	f89a 3000 	ldrb.w	r3, [sl]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80a2 	beq.w	800ef32 <_vfiprintf_r+0x20e>
 800edee:	2300      	movs	r3, #0
 800edf0:	f04f 32ff 	mov.w	r2, #4294967295
 800edf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edf8:	f10a 0a01 	add.w	sl, sl, #1
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	9307      	str	r3, [sp, #28]
 800ee00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee04:	931a      	str	r3, [sp, #104]	; 0x68
 800ee06:	4654      	mov	r4, sl
 800ee08:	2205      	movs	r2, #5
 800ee0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0e:	4858      	ldr	r0, [pc, #352]	; (800ef70 <_vfiprintf_r+0x24c>)
 800ee10:	f7f1 fa0e 	bl	8000230 <memchr>
 800ee14:	9a04      	ldr	r2, [sp, #16]
 800ee16:	b9d8      	cbnz	r0, 800ee50 <_vfiprintf_r+0x12c>
 800ee18:	06d1      	lsls	r1, r2, #27
 800ee1a:	bf44      	itt	mi
 800ee1c:	2320      	movmi	r3, #32
 800ee1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee22:	0713      	lsls	r3, r2, #28
 800ee24:	bf44      	itt	mi
 800ee26:	232b      	movmi	r3, #43	; 0x2b
 800ee28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee30:	2b2a      	cmp	r3, #42	; 0x2a
 800ee32:	d015      	beq.n	800ee60 <_vfiprintf_r+0x13c>
 800ee34:	9a07      	ldr	r2, [sp, #28]
 800ee36:	4654      	mov	r4, sl
 800ee38:	2000      	movs	r0, #0
 800ee3a:	f04f 0c0a 	mov.w	ip, #10
 800ee3e:	4621      	mov	r1, r4
 800ee40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee44:	3b30      	subs	r3, #48	; 0x30
 800ee46:	2b09      	cmp	r3, #9
 800ee48:	d94e      	bls.n	800eee8 <_vfiprintf_r+0x1c4>
 800ee4a:	b1b0      	cbz	r0, 800ee7a <_vfiprintf_r+0x156>
 800ee4c:	9207      	str	r2, [sp, #28]
 800ee4e:	e014      	b.n	800ee7a <_vfiprintf_r+0x156>
 800ee50:	eba0 0308 	sub.w	r3, r0, r8
 800ee54:	fa09 f303 	lsl.w	r3, r9, r3
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	9304      	str	r3, [sp, #16]
 800ee5c:	46a2      	mov	sl, r4
 800ee5e:	e7d2      	b.n	800ee06 <_vfiprintf_r+0xe2>
 800ee60:	9b03      	ldr	r3, [sp, #12]
 800ee62:	1d19      	adds	r1, r3, #4
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	9103      	str	r1, [sp, #12]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	bfbb      	ittet	lt
 800ee6c:	425b      	neglt	r3, r3
 800ee6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee72:	9307      	strge	r3, [sp, #28]
 800ee74:	9307      	strlt	r3, [sp, #28]
 800ee76:	bfb8      	it	lt
 800ee78:	9204      	strlt	r2, [sp, #16]
 800ee7a:	7823      	ldrb	r3, [r4, #0]
 800ee7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee7e:	d10c      	bne.n	800ee9a <_vfiprintf_r+0x176>
 800ee80:	7863      	ldrb	r3, [r4, #1]
 800ee82:	2b2a      	cmp	r3, #42	; 0x2a
 800ee84:	d135      	bne.n	800eef2 <_vfiprintf_r+0x1ce>
 800ee86:	9b03      	ldr	r3, [sp, #12]
 800ee88:	1d1a      	adds	r2, r3, #4
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	9203      	str	r2, [sp, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	bfb8      	it	lt
 800ee92:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee96:	3402      	adds	r4, #2
 800ee98:	9305      	str	r3, [sp, #20]
 800ee9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef80 <_vfiprintf_r+0x25c>
 800ee9e:	7821      	ldrb	r1, [r4, #0]
 800eea0:	2203      	movs	r2, #3
 800eea2:	4650      	mov	r0, sl
 800eea4:	f7f1 f9c4 	bl	8000230 <memchr>
 800eea8:	b140      	cbz	r0, 800eebc <_vfiprintf_r+0x198>
 800eeaa:	2340      	movs	r3, #64	; 0x40
 800eeac:	eba0 000a 	sub.w	r0, r0, sl
 800eeb0:	fa03 f000 	lsl.w	r0, r3, r0
 800eeb4:	9b04      	ldr	r3, [sp, #16]
 800eeb6:	4303      	orrs	r3, r0
 800eeb8:	3401      	adds	r4, #1
 800eeba:	9304      	str	r3, [sp, #16]
 800eebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec0:	482c      	ldr	r0, [pc, #176]	; (800ef74 <_vfiprintf_r+0x250>)
 800eec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eec6:	2206      	movs	r2, #6
 800eec8:	f7f1 f9b2 	bl	8000230 <memchr>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d03f      	beq.n	800ef50 <_vfiprintf_r+0x22c>
 800eed0:	4b29      	ldr	r3, [pc, #164]	; (800ef78 <_vfiprintf_r+0x254>)
 800eed2:	bb1b      	cbnz	r3, 800ef1c <_vfiprintf_r+0x1f8>
 800eed4:	9b03      	ldr	r3, [sp, #12]
 800eed6:	3307      	adds	r3, #7
 800eed8:	f023 0307 	bic.w	r3, r3, #7
 800eedc:	3308      	adds	r3, #8
 800eede:	9303      	str	r3, [sp, #12]
 800eee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eee2:	443b      	add	r3, r7
 800eee4:	9309      	str	r3, [sp, #36]	; 0x24
 800eee6:	e767      	b.n	800edb8 <_vfiprintf_r+0x94>
 800eee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeec:	460c      	mov	r4, r1
 800eeee:	2001      	movs	r0, #1
 800eef0:	e7a5      	b.n	800ee3e <_vfiprintf_r+0x11a>
 800eef2:	2300      	movs	r3, #0
 800eef4:	3401      	adds	r4, #1
 800eef6:	9305      	str	r3, [sp, #20]
 800eef8:	4619      	mov	r1, r3
 800eefa:	f04f 0c0a 	mov.w	ip, #10
 800eefe:	4620      	mov	r0, r4
 800ef00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef04:	3a30      	subs	r2, #48	; 0x30
 800ef06:	2a09      	cmp	r2, #9
 800ef08:	d903      	bls.n	800ef12 <_vfiprintf_r+0x1ee>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0c5      	beq.n	800ee9a <_vfiprintf_r+0x176>
 800ef0e:	9105      	str	r1, [sp, #20]
 800ef10:	e7c3      	b.n	800ee9a <_vfiprintf_r+0x176>
 800ef12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef16:	4604      	mov	r4, r0
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e7f0      	b.n	800eefe <_vfiprintf_r+0x1da>
 800ef1c:	ab03      	add	r3, sp, #12
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	462a      	mov	r2, r5
 800ef22:	4b16      	ldr	r3, [pc, #88]	; (800ef7c <_vfiprintf_r+0x258>)
 800ef24:	a904      	add	r1, sp, #16
 800ef26:	4630      	mov	r0, r6
 800ef28:	f000 f8cc 	bl	800f0c4 <_printf_float>
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	1c78      	adds	r0, r7, #1
 800ef30:	d1d6      	bne.n	800eee0 <_vfiprintf_r+0x1bc>
 800ef32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef34:	07d9      	lsls	r1, r3, #31
 800ef36:	d405      	bmi.n	800ef44 <_vfiprintf_r+0x220>
 800ef38:	89ab      	ldrh	r3, [r5, #12]
 800ef3a:	059a      	lsls	r2, r3, #22
 800ef3c:	d402      	bmi.n	800ef44 <_vfiprintf_r+0x220>
 800ef3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef40:	f003 fa50 	bl	80123e4 <__retarget_lock_release_recursive>
 800ef44:	89ab      	ldrh	r3, [r5, #12]
 800ef46:	065b      	lsls	r3, r3, #25
 800ef48:	f53f af12 	bmi.w	800ed70 <_vfiprintf_r+0x4c>
 800ef4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef4e:	e711      	b.n	800ed74 <_vfiprintf_r+0x50>
 800ef50:	ab03      	add	r3, sp, #12
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	462a      	mov	r2, r5
 800ef56:	4b09      	ldr	r3, [pc, #36]	; (800ef7c <_vfiprintf_r+0x258>)
 800ef58:	a904      	add	r1, sp, #16
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f000 fb56 	bl	800f60c <_printf_i>
 800ef60:	e7e4      	b.n	800ef2c <_vfiprintf_r+0x208>
 800ef62:	bf00      	nop
 800ef64:	0802a414 	.word	0x0802a414
 800ef68:	0802a434 	.word	0x0802a434
 800ef6c:	0802a3f4 	.word	0x0802a3f4
 800ef70:	0802a1a4 	.word	0x0802a1a4
 800ef74:	0802a1ae 	.word	0x0802a1ae
 800ef78:	0800f0c5 	.word	0x0800f0c5
 800ef7c:	0800ecff 	.word	0x0800ecff
 800ef80:	0802a1aa 	.word	0x0802a1aa

0800ef84 <__cvt>:
 800ef84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef88:	ec55 4b10 	vmov	r4, r5, d0
 800ef8c:	2d00      	cmp	r5, #0
 800ef8e:	460e      	mov	r6, r1
 800ef90:	4619      	mov	r1, r3
 800ef92:	462b      	mov	r3, r5
 800ef94:	bfbb      	ittet	lt
 800ef96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef9a:	461d      	movlt	r5, r3
 800ef9c:	2300      	movge	r3, #0
 800ef9e:	232d      	movlt	r3, #45	; 0x2d
 800efa0:	700b      	strb	r3, [r1, #0]
 800efa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800efa8:	4691      	mov	r9, r2
 800efaa:	f023 0820 	bic.w	r8, r3, #32
 800efae:	bfbc      	itt	lt
 800efb0:	4622      	movlt	r2, r4
 800efb2:	4614      	movlt	r4, r2
 800efb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efb8:	d005      	beq.n	800efc6 <__cvt+0x42>
 800efba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800efbe:	d100      	bne.n	800efc2 <__cvt+0x3e>
 800efc0:	3601      	adds	r6, #1
 800efc2:	2102      	movs	r1, #2
 800efc4:	e000      	b.n	800efc8 <__cvt+0x44>
 800efc6:	2103      	movs	r1, #3
 800efc8:	ab03      	add	r3, sp, #12
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	ab02      	add	r3, sp, #8
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	ec45 4b10 	vmov	d0, r4, r5
 800efd4:	4653      	mov	r3, sl
 800efd6:	4632      	mov	r2, r6
 800efd8:	f001 feea 	bl	8010db0 <_dtoa_r>
 800efdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800efe0:	4607      	mov	r7, r0
 800efe2:	d102      	bne.n	800efea <__cvt+0x66>
 800efe4:	f019 0f01 	tst.w	r9, #1
 800efe8:	d022      	beq.n	800f030 <__cvt+0xac>
 800efea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efee:	eb07 0906 	add.w	r9, r7, r6
 800eff2:	d110      	bne.n	800f016 <__cvt+0x92>
 800eff4:	783b      	ldrb	r3, [r7, #0]
 800eff6:	2b30      	cmp	r3, #48	; 0x30
 800eff8:	d10a      	bne.n	800f010 <__cvt+0x8c>
 800effa:	2200      	movs	r2, #0
 800effc:	2300      	movs	r3, #0
 800effe:	4620      	mov	r0, r4
 800f000:	4629      	mov	r1, r5
 800f002:	f7f1 fd89 	bl	8000b18 <__aeabi_dcmpeq>
 800f006:	b918      	cbnz	r0, 800f010 <__cvt+0x8c>
 800f008:	f1c6 0601 	rsb	r6, r6, #1
 800f00c:	f8ca 6000 	str.w	r6, [sl]
 800f010:	f8da 3000 	ldr.w	r3, [sl]
 800f014:	4499      	add	r9, r3
 800f016:	2200      	movs	r2, #0
 800f018:	2300      	movs	r3, #0
 800f01a:	4620      	mov	r0, r4
 800f01c:	4629      	mov	r1, r5
 800f01e:	f7f1 fd7b 	bl	8000b18 <__aeabi_dcmpeq>
 800f022:	b108      	cbz	r0, 800f028 <__cvt+0xa4>
 800f024:	f8cd 900c 	str.w	r9, [sp, #12]
 800f028:	2230      	movs	r2, #48	; 0x30
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	454b      	cmp	r3, r9
 800f02e:	d307      	bcc.n	800f040 <__cvt+0xbc>
 800f030:	9b03      	ldr	r3, [sp, #12]
 800f032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f034:	1bdb      	subs	r3, r3, r7
 800f036:	4638      	mov	r0, r7
 800f038:	6013      	str	r3, [r2, #0]
 800f03a:	b004      	add	sp, #16
 800f03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f040:	1c59      	adds	r1, r3, #1
 800f042:	9103      	str	r1, [sp, #12]
 800f044:	701a      	strb	r2, [r3, #0]
 800f046:	e7f0      	b.n	800f02a <__cvt+0xa6>

0800f048 <__exponent>:
 800f048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f04a:	4603      	mov	r3, r0
 800f04c:	2900      	cmp	r1, #0
 800f04e:	bfb8      	it	lt
 800f050:	4249      	neglt	r1, r1
 800f052:	f803 2b02 	strb.w	r2, [r3], #2
 800f056:	bfb4      	ite	lt
 800f058:	222d      	movlt	r2, #45	; 0x2d
 800f05a:	222b      	movge	r2, #43	; 0x2b
 800f05c:	2909      	cmp	r1, #9
 800f05e:	7042      	strb	r2, [r0, #1]
 800f060:	dd2a      	ble.n	800f0b8 <__exponent+0x70>
 800f062:	f10d 0407 	add.w	r4, sp, #7
 800f066:	46a4      	mov	ip, r4
 800f068:	270a      	movs	r7, #10
 800f06a:	46a6      	mov	lr, r4
 800f06c:	460a      	mov	r2, r1
 800f06e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f072:	fb07 1516 	mls	r5, r7, r6, r1
 800f076:	3530      	adds	r5, #48	; 0x30
 800f078:	2a63      	cmp	r2, #99	; 0x63
 800f07a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f07e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f082:	4631      	mov	r1, r6
 800f084:	dcf1      	bgt.n	800f06a <__exponent+0x22>
 800f086:	3130      	adds	r1, #48	; 0x30
 800f088:	f1ae 0502 	sub.w	r5, lr, #2
 800f08c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f090:	1c44      	adds	r4, r0, #1
 800f092:	4629      	mov	r1, r5
 800f094:	4561      	cmp	r1, ip
 800f096:	d30a      	bcc.n	800f0ae <__exponent+0x66>
 800f098:	f10d 0209 	add.w	r2, sp, #9
 800f09c:	eba2 020e 	sub.w	r2, r2, lr
 800f0a0:	4565      	cmp	r5, ip
 800f0a2:	bf88      	it	hi
 800f0a4:	2200      	movhi	r2, #0
 800f0a6:	4413      	add	r3, r2
 800f0a8:	1a18      	subs	r0, r3, r0
 800f0aa:	b003      	add	sp, #12
 800f0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f0b6:	e7ed      	b.n	800f094 <__exponent+0x4c>
 800f0b8:	2330      	movs	r3, #48	; 0x30
 800f0ba:	3130      	adds	r1, #48	; 0x30
 800f0bc:	7083      	strb	r3, [r0, #2]
 800f0be:	70c1      	strb	r1, [r0, #3]
 800f0c0:	1d03      	adds	r3, r0, #4
 800f0c2:	e7f1      	b.n	800f0a8 <__exponent+0x60>

0800f0c4 <_printf_float>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	ed2d 8b02 	vpush	{d8}
 800f0cc:	b08d      	sub	sp, #52	; 0x34
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f0d4:	4616      	mov	r6, r2
 800f0d6:	461f      	mov	r7, r3
 800f0d8:	4605      	mov	r5, r0
 800f0da:	f003 f97d 	bl	80123d8 <_localeconv_r>
 800f0de:	f8d0 a000 	ldr.w	sl, [r0]
 800f0e2:	4650      	mov	r0, sl
 800f0e4:	f7f1 f89c 	bl	8000220 <strlen>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	9305      	str	r3, [sp, #20]
 800f0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f0f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f0f8:	3307      	adds	r3, #7
 800f0fa:	f023 0307 	bic.w	r3, r3, #7
 800f0fe:	f103 0208 	add.w	r2, r3, #8
 800f102:	f8c8 2000 	str.w	r2, [r8]
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f10e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f112:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f116:	9307      	str	r3, [sp, #28]
 800f118:	f8cd 8018 	str.w	r8, [sp, #24]
 800f11c:	ee08 0a10 	vmov	s16, r0
 800f120:	4b9f      	ldr	r3, [pc, #636]	; (800f3a0 <_printf_float+0x2dc>)
 800f122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f126:	f04f 32ff 	mov.w	r2, #4294967295
 800f12a:	f7f1 fd27 	bl	8000b7c <__aeabi_dcmpun>
 800f12e:	bb88      	cbnz	r0, 800f194 <_printf_float+0xd0>
 800f130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f134:	4b9a      	ldr	r3, [pc, #616]	; (800f3a0 <_printf_float+0x2dc>)
 800f136:	f04f 32ff 	mov.w	r2, #4294967295
 800f13a:	f7f1 fd01 	bl	8000b40 <__aeabi_dcmple>
 800f13e:	bb48      	cbnz	r0, 800f194 <_printf_float+0xd0>
 800f140:	2200      	movs	r2, #0
 800f142:	2300      	movs	r3, #0
 800f144:	4640      	mov	r0, r8
 800f146:	4649      	mov	r1, r9
 800f148:	f7f1 fcf0 	bl	8000b2c <__aeabi_dcmplt>
 800f14c:	b110      	cbz	r0, 800f154 <_printf_float+0x90>
 800f14e:	232d      	movs	r3, #45	; 0x2d
 800f150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f154:	4b93      	ldr	r3, [pc, #588]	; (800f3a4 <_printf_float+0x2e0>)
 800f156:	4894      	ldr	r0, [pc, #592]	; (800f3a8 <_printf_float+0x2e4>)
 800f158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f15c:	bf94      	ite	ls
 800f15e:	4698      	movls	r8, r3
 800f160:	4680      	movhi	r8, r0
 800f162:	2303      	movs	r3, #3
 800f164:	6123      	str	r3, [r4, #16]
 800f166:	9b05      	ldr	r3, [sp, #20]
 800f168:	f023 0204 	bic.w	r2, r3, #4
 800f16c:	6022      	str	r2, [r4, #0]
 800f16e:	f04f 0900 	mov.w	r9, #0
 800f172:	9700      	str	r7, [sp, #0]
 800f174:	4633      	mov	r3, r6
 800f176:	aa0b      	add	r2, sp, #44	; 0x2c
 800f178:	4621      	mov	r1, r4
 800f17a:	4628      	mov	r0, r5
 800f17c:	f000 f9d8 	bl	800f530 <_printf_common>
 800f180:	3001      	adds	r0, #1
 800f182:	f040 8090 	bne.w	800f2a6 <_printf_float+0x1e2>
 800f186:	f04f 30ff 	mov.w	r0, #4294967295
 800f18a:	b00d      	add	sp, #52	; 0x34
 800f18c:	ecbd 8b02 	vpop	{d8}
 800f190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f194:	4642      	mov	r2, r8
 800f196:	464b      	mov	r3, r9
 800f198:	4640      	mov	r0, r8
 800f19a:	4649      	mov	r1, r9
 800f19c:	f7f1 fcee 	bl	8000b7c <__aeabi_dcmpun>
 800f1a0:	b140      	cbz	r0, 800f1b4 <_printf_float+0xf0>
 800f1a2:	464b      	mov	r3, r9
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	bfbc      	itt	lt
 800f1a8:	232d      	movlt	r3, #45	; 0x2d
 800f1aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f1ae:	487f      	ldr	r0, [pc, #508]	; (800f3ac <_printf_float+0x2e8>)
 800f1b0:	4b7f      	ldr	r3, [pc, #508]	; (800f3b0 <_printf_float+0x2ec>)
 800f1b2:	e7d1      	b.n	800f158 <_printf_float+0x94>
 800f1b4:	6863      	ldr	r3, [r4, #4]
 800f1b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f1ba:	9206      	str	r2, [sp, #24]
 800f1bc:	1c5a      	adds	r2, r3, #1
 800f1be:	d13f      	bne.n	800f240 <_printf_float+0x17c>
 800f1c0:	2306      	movs	r3, #6
 800f1c2:	6063      	str	r3, [r4, #4]
 800f1c4:	9b05      	ldr	r3, [sp, #20]
 800f1c6:	6861      	ldr	r1, [r4, #4]
 800f1c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	9303      	str	r3, [sp, #12]
 800f1d0:	ab0a      	add	r3, sp, #40	; 0x28
 800f1d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f1d6:	ab09      	add	r3, sp, #36	; 0x24
 800f1d8:	ec49 8b10 	vmov	d0, r8, r9
 800f1dc:	9300      	str	r3, [sp, #0]
 800f1de:	6022      	str	r2, [r4, #0]
 800f1e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f7ff fecd 	bl	800ef84 <__cvt>
 800f1ea:	9b06      	ldr	r3, [sp, #24]
 800f1ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1ee:	2b47      	cmp	r3, #71	; 0x47
 800f1f0:	4680      	mov	r8, r0
 800f1f2:	d108      	bne.n	800f206 <_printf_float+0x142>
 800f1f4:	1cc8      	adds	r0, r1, #3
 800f1f6:	db02      	blt.n	800f1fe <_printf_float+0x13a>
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	4299      	cmp	r1, r3
 800f1fc:	dd41      	ble.n	800f282 <_printf_float+0x1be>
 800f1fe:	f1ab 0b02 	sub.w	fp, fp, #2
 800f202:	fa5f fb8b 	uxtb.w	fp, fp
 800f206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f20a:	d820      	bhi.n	800f24e <_printf_float+0x18a>
 800f20c:	3901      	subs	r1, #1
 800f20e:	465a      	mov	r2, fp
 800f210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f214:	9109      	str	r1, [sp, #36]	; 0x24
 800f216:	f7ff ff17 	bl	800f048 <__exponent>
 800f21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f21c:	1813      	adds	r3, r2, r0
 800f21e:	2a01      	cmp	r2, #1
 800f220:	4681      	mov	r9, r0
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	dc02      	bgt.n	800f22c <_printf_float+0x168>
 800f226:	6822      	ldr	r2, [r4, #0]
 800f228:	07d2      	lsls	r2, r2, #31
 800f22a:	d501      	bpl.n	800f230 <_printf_float+0x16c>
 800f22c:	3301      	adds	r3, #1
 800f22e:	6123      	str	r3, [r4, #16]
 800f230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f234:	2b00      	cmp	r3, #0
 800f236:	d09c      	beq.n	800f172 <_printf_float+0xae>
 800f238:	232d      	movs	r3, #45	; 0x2d
 800f23a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f23e:	e798      	b.n	800f172 <_printf_float+0xae>
 800f240:	9a06      	ldr	r2, [sp, #24]
 800f242:	2a47      	cmp	r2, #71	; 0x47
 800f244:	d1be      	bne.n	800f1c4 <_printf_float+0x100>
 800f246:	2b00      	cmp	r3, #0
 800f248:	d1bc      	bne.n	800f1c4 <_printf_float+0x100>
 800f24a:	2301      	movs	r3, #1
 800f24c:	e7b9      	b.n	800f1c2 <_printf_float+0xfe>
 800f24e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f252:	d118      	bne.n	800f286 <_printf_float+0x1c2>
 800f254:	2900      	cmp	r1, #0
 800f256:	6863      	ldr	r3, [r4, #4]
 800f258:	dd0b      	ble.n	800f272 <_printf_float+0x1ae>
 800f25a:	6121      	str	r1, [r4, #16]
 800f25c:	b913      	cbnz	r3, 800f264 <_printf_float+0x1a0>
 800f25e:	6822      	ldr	r2, [r4, #0]
 800f260:	07d0      	lsls	r0, r2, #31
 800f262:	d502      	bpl.n	800f26a <_printf_float+0x1a6>
 800f264:	3301      	adds	r3, #1
 800f266:	440b      	add	r3, r1
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f26c:	f04f 0900 	mov.w	r9, #0
 800f270:	e7de      	b.n	800f230 <_printf_float+0x16c>
 800f272:	b913      	cbnz	r3, 800f27a <_printf_float+0x1b6>
 800f274:	6822      	ldr	r2, [r4, #0]
 800f276:	07d2      	lsls	r2, r2, #31
 800f278:	d501      	bpl.n	800f27e <_printf_float+0x1ba>
 800f27a:	3302      	adds	r3, #2
 800f27c:	e7f4      	b.n	800f268 <_printf_float+0x1a4>
 800f27e:	2301      	movs	r3, #1
 800f280:	e7f2      	b.n	800f268 <_printf_float+0x1a4>
 800f282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f288:	4299      	cmp	r1, r3
 800f28a:	db05      	blt.n	800f298 <_printf_float+0x1d4>
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	6121      	str	r1, [r4, #16]
 800f290:	07d8      	lsls	r0, r3, #31
 800f292:	d5ea      	bpl.n	800f26a <_printf_float+0x1a6>
 800f294:	1c4b      	adds	r3, r1, #1
 800f296:	e7e7      	b.n	800f268 <_printf_float+0x1a4>
 800f298:	2900      	cmp	r1, #0
 800f29a:	bfd4      	ite	le
 800f29c:	f1c1 0202 	rsble	r2, r1, #2
 800f2a0:	2201      	movgt	r2, #1
 800f2a2:	4413      	add	r3, r2
 800f2a4:	e7e0      	b.n	800f268 <_printf_float+0x1a4>
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	055a      	lsls	r2, r3, #21
 800f2aa:	d407      	bmi.n	800f2bc <_printf_float+0x1f8>
 800f2ac:	6923      	ldr	r3, [r4, #16]
 800f2ae:	4642      	mov	r2, r8
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	47b8      	blx	r7
 800f2b6:	3001      	adds	r0, #1
 800f2b8:	d12c      	bne.n	800f314 <_printf_float+0x250>
 800f2ba:	e764      	b.n	800f186 <_printf_float+0xc2>
 800f2bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2c0:	f240 80e0 	bls.w	800f484 <_printf_float+0x3c0>
 800f2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f7f1 fc24 	bl	8000b18 <__aeabi_dcmpeq>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d034      	beq.n	800f33e <_printf_float+0x27a>
 800f2d4:	4a37      	ldr	r2, [pc, #220]	; (800f3b4 <_printf_float+0x2f0>)
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	4631      	mov	r1, r6
 800f2da:	4628      	mov	r0, r5
 800f2dc:	47b8      	blx	r7
 800f2de:	3001      	adds	r0, #1
 800f2e0:	f43f af51 	beq.w	800f186 <_printf_float+0xc2>
 800f2e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	db02      	blt.n	800f2f2 <_printf_float+0x22e>
 800f2ec:	6823      	ldr	r3, [r4, #0]
 800f2ee:	07d8      	lsls	r0, r3, #31
 800f2f0:	d510      	bpl.n	800f314 <_printf_float+0x250>
 800f2f2:	ee18 3a10 	vmov	r3, s16
 800f2f6:	4652      	mov	r2, sl
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	47b8      	blx	r7
 800f2fe:	3001      	adds	r0, #1
 800f300:	f43f af41 	beq.w	800f186 <_printf_float+0xc2>
 800f304:	f04f 0800 	mov.w	r8, #0
 800f308:	f104 091a 	add.w	r9, r4, #26
 800f30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f30e:	3b01      	subs	r3, #1
 800f310:	4543      	cmp	r3, r8
 800f312:	dc09      	bgt.n	800f328 <_printf_float+0x264>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	079b      	lsls	r3, r3, #30
 800f318:	f100 8105 	bmi.w	800f526 <_printf_float+0x462>
 800f31c:	68e0      	ldr	r0, [r4, #12]
 800f31e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f320:	4298      	cmp	r0, r3
 800f322:	bfb8      	it	lt
 800f324:	4618      	movlt	r0, r3
 800f326:	e730      	b.n	800f18a <_printf_float+0xc6>
 800f328:	2301      	movs	r3, #1
 800f32a:	464a      	mov	r2, r9
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f af27 	beq.w	800f186 <_printf_float+0xc2>
 800f338:	f108 0801 	add.w	r8, r8, #1
 800f33c:	e7e6      	b.n	800f30c <_printf_float+0x248>
 800f33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f340:	2b00      	cmp	r3, #0
 800f342:	dc39      	bgt.n	800f3b8 <_printf_float+0x2f4>
 800f344:	4a1b      	ldr	r2, [pc, #108]	; (800f3b4 <_printf_float+0x2f0>)
 800f346:	2301      	movs	r3, #1
 800f348:	4631      	mov	r1, r6
 800f34a:	4628      	mov	r0, r5
 800f34c:	47b8      	blx	r7
 800f34e:	3001      	adds	r0, #1
 800f350:	f43f af19 	beq.w	800f186 <_printf_float+0xc2>
 800f354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f358:	4313      	orrs	r3, r2
 800f35a:	d102      	bne.n	800f362 <_printf_float+0x29e>
 800f35c:	6823      	ldr	r3, [r4, #0]
 800f35e:	07d9      	lsls	r1, r3, #31
 800f360:	d5d8      	bpl.n	800f314 <_printf_float+0x250>
 800f362:	ee18 3a10 	vmov	r3, s16
 800f366:	4652      	mov	r2, sl
 800f368:	4631      	mov	r1, r6
 800f36a:	4628      	mov	r0, r5
 800f36c:	47b8      	blx	r7
 800f36e:	3001      	adds	r0, #1
 800f370:	f43f af09 	beq.w	800f186 <_printf_float+0xc2>
 800f374:	f04f 0900 	mov.w	r9, #0
 800f378:	f104 0a1a 	add.w	sl, r4, #26
 800f37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f37e:	425b      	negs	r3, r3
 800f380:	454b      	cmp	r3, r9
 800f382:	dc01      	bgt.n	800f388 <_printf_float+0x2c4>
 800f384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f386:	e792      	b.n	800f2ae <_printf_float+0x1ea>
 800f388:	2301      	movs	r3, #1
 800f38a:	4652      	mov	r2, sl
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	f43f aef7 	beq.w	800f186 <_printf_float+0xc2>
 800f398:	f109 0901 	add.w	r9, r9, #1
 800f39c:	e7ee      	b.n	800f37c <_printf_float+0x2b8>
 800f39e:	bf00      	nop
 800f3a0:	7fefffff 	.word	0x7fefffff
 800f3a4:	0802a1b5 	.word	0x0802a1b5
 800f3a8:	0802a1b9 	.word	0x0802a1b9
 800f3ac:	0802a1c1 	.word	0x0802a1c1
 800f3b0:	0802a1bd 	.word	0x0802a1bd
 800f3b4:	0802a1c5 	.word	0x0802a1c5
 800f3b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	bfa8      	it	ge
 800f3c0:	461a      	movge	r2, r3
 800f3c2:	2a00      	cmp	r2, #0
 800f3c4:	4691      	mov	r9, r2
 800f3c6:	dc37      	bgt.n	800f438 <_printf_float+0x374>
 800f3c8:	f04f 0b00 	mov.w	fp, #0
 800f3cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3d0:	f104 021a 	add.w	r2, r4, #26
 800f3d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3d6:	9305      	str	r3, [sp, #20]
 800f3d8:	eba3 0309 	sub.w	r3, r3, r9
 800f3dc:	455b      	cmp	r3, fp
 800f3de:	dc33      	bgt.n	800f448 <_printf_float+0x384>
 800f3e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	db3b      	blt.n	800f460 <_printf_float+0x39c>
 800f3e8:	6823      	ldr	r3, [r4, #0]
 800f3ea:	07da      	lsls	r2, r3, #31
 800f3ec:	d438      	bmi.n	800f460 <_printf_float+0x39c>
 800f3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3f0:	9a05      	ldr	r2, [sp, #20]
 800f3f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3f4:	1a9a      	subs	r2, r3, r2
 800f3f6:	eba3 0901 	sub.w	r9, r3, r1
 800f3fa:	4591      	cmp	r9, r2
 800f3fc:	bfa8      	it	ge
 800f3fe:	4691      	movge	r9, r2
 800f400:	f1b9 0f00 	cmp.w	r9, #0
 800f404:	dc35      	bgt.n	800f472 <_printf_float+0x3ae>
 800f406:	f04f 0800 	mov.w	r8, #0
 800f40a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f40e:	f104 0a1a 	add.w	sl, r4, #26
 800f412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f416:	1a9b      	subs	r3, r3, r2
 800f418:	eba3 0309 	sub.w	r3, r3, r9
 800f41c:	4543      	cmp	r3, r8
 800f41e:	f77f af79 	ble.w	800f314 <_printf_float+0x250>
 800f422:	2301      	movs	r3, #1
 800f424:	4652      	mov	r2, sl
 800f426:	4631      	mov	r1, r6
 800f428:	4628      	mov	r0, r5
 800f42a:	47b8      	blx	r7
 800f42c:	3001      	adds	r0, #1
 800f42e:	f43f aeaa 	beq.w	800f186 <_printf_float+0xc2>
 800f432:	f108 0801 	add.w	r8, r8, #1
 800f436:	e7ec      	b.n	800f412 <_printf_float+0x34e>
 800f438:	4613      	mov	r3, r2
 800f43a:	4631      	mov	r1, r6
 800f43c:	4642      	mov	r2, r8
 800f43e:	4628      	mov	r0, r5
 800f440:	47b8      	blx	r7
 800f442:	3001      	adds	r0, #1
 800f444:	d1c0      	bne.n	800f3c8 <_printf_float+0x304>
 800f446:	e69e      	b.n	800f186 <_printf_float+0xc2>
 800f448:	2301      	movs	r3, #1
 800f44a:	4631      	mov	r1, r6
 800f44c:	4628      	mov	r0, r5
 800f44e:	9205      	str	r2, [sp, #20]
 800f450:	47b8      	blx	r7
 800f452:	3001      	adds	r0, #1
 800f454:	f43f ae97 	beq.w	800f186 <_printf_float+0xc2>
 800f458:	9a05      	ldr	r2, [sp, #20]
 800f45a:	f10b 0b01 	add.w	fp, fp, #1
 800f45e:	e7b9      	b.n	800f3d4 <_printf_float+0x310>
 800f460:	ee18 3a10 	vmov	r3, s16
 800f464:	4652      	mov	r2, sl
 800f466:	4631      	mov	r1, r6
 800f468:	4628      	mov	r0, r5
 800f46a:	47b8      	blx	r7
 800f46c:	3001      	adds	r0, #1
 800f46e:	d1be      	bne.n	800f3ee <_printf_float+0x32a>
 800f470:	e689      	b.n	800f186 <_printf_float+0xc2>
 800f472:	9a05      	ldr	r2, [sp, #20]
 800f474:	464b      	mov	r3, r9
 800f476:	4442      	add	r2, r8
 800f478:	4631      	mov	r1, r6
 800f47a:	4628      	mov	r0, r5
 800f47c:	47b8      	blx	r7
 800f47e:	3001      	adds	r0, #1
 800f480:	d1c1      	bne.n	800f406 <_printf_float+0x342>
 800f482:	e680      	b.n	800f186 <_printf_float+0xc2>
 800f484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f486:	2a01      	cmp	r2, #1
 800f488:	dc01      	bgt.n	800f48e <_printf_float+0x3ca>
 800f48a:	07db      	lsls	r3, r3, #31
 800f48c:	d538      	bpl.n	800f500 <_printf_float+0x43c>
 800f48e:	2301      	movs	r3, #1
 800f490:	4642      	mov	r2, r8
 800f492:	4631      	mov	r1, r6
 800f494:	4628      	mov	r0, r5
 800f496:	47b8      	blx	r7
 800f498:	3001      	adds	r0, #1
 800f49a:	f43f ae74 	beq.w	800f186 <_printf_float+0xc2>
 800f49e:	ee18 3a10 	vmov	r3, s16
 800f4a2:	4652      	mov	r2, sl
 800f4a4:	4631      	mov	r1, r6
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	47b8      	blx	r7
 800f4aa:	3001      	adds	r0, #1
 800f4ac:	f43f ae6b 	beq.w	800f186 <_printf_float+0xc2>
 800f4b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f7f1 fb2e 	bl	8000b18 <__aeabi_dcmpeq>
 800f4bc:	b9d8      	cbnz	r0, 800f4f6 <_printf_float+0x432>
 800f4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4c0:	f108 0201 	add.w	r2, r8, #1
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	d10e      	bne.n	800f4ee <_printf_float+0x42a>
 800f4d0:	e659      	b.n	800f186 <_printf_float+0xc2>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	4652      	mov	r2, sl
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	4628      	mov	r0, r5
 800f4da:	47b8      	blx	r7
 800f4dc:	3001      	adds	r0, #1
 800f4de:	f43f ae52 	beq.w	800f186 <_printf_float+0xc2>
 800f4e2:	f108 0801 	add.w	r8, r8, #1
 800f4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	4543      	cmp	r3, r8
 800f4ec:	dcf1      	bgt.n	800f4d2 <_printf_float+0x40e>
 800f4ee:	464b      	mov	r3, r9
 800f4f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f4f4:	e6dc      	b.n	800f2b0 <_printf_float+0x1ec>
 800f4f6:	f04f 0800 	mov.w	r8, #0
 800f4fa:	f104 0a1a 	add.w	sl, r4, #26
 800f4fe:	e7f2      	b.n	800f4e6 <_printf_float+0x422>
 800f500:	2301      	movs	r3, #1
 800f502:	4642      	mov	r2, r8
 800f504:	e7df      	b.n	800f4c6 <_printf_float+0x402>
 800f506:	2301      	movs	r3, #1
 800f508:	464a      	mov	r2, r9
 800f50a:	4631      	mov	r1, r6
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b8      	blx	r7
 800f510:	3001      	adds	r0, #1
 800f512:	f43f ae38 	beq.w	800f186 <_printf_float+0xc2>
 800f516:	f108 0801 	add.w	r8, r8, #1
 800f51a:	68e3      	ldr	r3, [r4, #12]
 800f51c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f51e:	1a5b      	subs	r3, r3, r1
 800f520:	4543      	cmp	r3, r8
 800f522:	dcf0      	bgt.n	800f506 <_printf_float+0x442>
 800f524:	e6fa      	b.n	800f31c <_printf_float+0x258>
 800f526:	f04f 0800 	mov.w	r8, #0
 800f52a:	f104 0919 	add.w	r9, r4, #25
 800f52e:	e7f4      	b.n	800f51a <_printf_float+0x456>

0800f530 <_printf_common>:
 800f530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f534:	4616      	mov	r6, r2
 800f536:	4699      	mov	r9, r3
 800f538:	688a      	ldr	r2, [r1, #8]
 800f53a:	690b      	ldr	r3, [r1, #16]
 800f53c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f540:	4293      	cmp	r3, r2
 800f542:	bfb8      	it	lt
 800f544:	4613      	movlt	r3, r2
 800f546:	6033      	str	r3, [r6, #0]
 800f548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f54c:	4607      	mov	r7, r0
 800f54e:	460c      	mov	r4, r1
 800f550:	b10a      	cbz	r2, 800f556 <_printf_common+0x26>
 800f552:	3301      	adds	r3, #1
 800f554:	6033      	str	r3, [r6, #0]
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	0699      	lsls	r1, r3, #26
 800f55a:	bf42      	ittt	mi
 800f55c:	6833      	ldrmi	r3, [r6, #0]
 800f55e:	3302      	addmi	r3, #2
 800f560:	6033      	strmi	r3, [r6, #0]
 800f562:	6825      	ldr	r5, [r4, #0]
 800f564:	f015 0506 	ands.w	r5, r5, #6
 800f568:	d106      	bne.n	800f578 <_printf_common+0x48>
 800f56a:	f104 0a19 	add.w	sl, r4, #25
 800f56e:	68e3      	ldr	r3, [r4, #12]
 800f570:	6832      	ldr	r2, [r6, #0]
 800f572:	1a9b      	subs	r3, r3, r2
 800f574:	42ab      	cmp	r3, r5
 800f576:	dc26      	bgt.n	800f5c6 <_printf_common+0x96>
 800f578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f57c:	1e13      	subs	r3, r2, #0
 800f57e:	6822      	ldr	r2, [r4, #0]
 800f580:	bf18      	it	ne
 800f582:	2301      	movne	r3, #1
 800f584:	0692      	lsls	r2, r2, #26
 800f586:	d42b      	bmi.n	800f5e0 <_printf_common+0xb0>
 800f588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f58c:	4649      	mov	r1, r9
 800f58e:	4638      	mov	r0, r7
 800f590:	47c0      	blx	r8
 800f592:	3001      	adds	r0, #1
 800f594:	d01e      	beq.n	800f5d4 <_printf_common+0xa4>
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	68e5      	ldr	r5, [r4, #12]
 800f59a:	6832      	ldr	r2, [r6, #0]
 800f59c:	f003 0306 	and.w	r3, r3, #6
 800f5a0:	2b04      	cmp	r3, #4
 800f5a2:	bf08      	it	eq
 800f5a4:	1aad      	subeq	r5, r5, r2
 800f5a6:	68a3      	ldr	r3, [r4, #8]
 800f5a8:	6922      	ldr	r2, [r4, #16]
 800f5aa:	bf0c      	ite	eq
 800f5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5b0:	2500      	movne	r5, #0
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	bfc4      	itt	gt
 800f5b6:	1a9b      	subgt	r3, r3, r2
 800f5b8:	18ed      	addgt	r5, r5, r3
 800f5ba:	2600      	movs	r6, #0
 800f5bc:	341a      	adds	r4, #26
 800f5be:	42b5      	cmp	r5, r6
 800f5c0:	d11a      	bne.n	800f5f8 <_printf_common+0xc8>
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	e008      	b.n	800f5d8 <_printf_common+0xa8>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	4652      	mov	r2, sl
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	4638      	mov	r0, r7
 800f5ce:	47c0      	blx	r8
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	d103      	bne.n	800f5dc <_printf_common+0xac>
 800f5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5dc:	3501      	adds	r5, #1
 800f5de:	e7c6      	b.n	800f56e <_printf_common+0x3e>
 800f5e0:	18e1      	adds	r1, r4, r3
 800f5e2:	1c5a      	adds	r2, r3, #1
 800f5e4:	2030      	movs	r0, #48	; 0x30
 800f5e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5ea:	4422      	add	r2, r4
 800f5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5f4:	3302      	adds	r3, #2
 800f5f6:	e7c7      	b.n	800f588 <_printf_common+0x58>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4649      	mov	r1, r9
 800f5fe:	4638      	mov	r0, r7
 800f600:	47c0      	blx	r8
 800f602:	3001      	adds	r0, #1
 800f604:	d0e6      	beq.n	800f5d4 <_printf_common+0xa4>
 800f606:	3601      	adds	r6, #1
 800f608:	e7d9      	b.n	800f5be <_printf_common+0x8e>
	...

0800f60c <_printf_i>:
 800f60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f610:	7e0f      	ldrb	r7, [r1, #24]
 800f612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f614:	2f78      	cmp	r7, #120	; 0x78
 800f616:	4691      	mov	r9, r2
 800f618:	4680      	mov	r8, r0
 800f61a:	460c      	mov	r4, r1
 800f61c:	469a      	mov	sl, r3
 800f61e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f622:	d807      	bhi.n	800f634 <_printf_i+0x28>
 800f624:	2f62      	cmp	r7, #98	; 0x62
 800f626:	d80a      	bhi.n	800f63e <_printf_i+0x32>
 800f628:	2f00      	cmp	r7, #0
 800f62a:	f000 80d8 	beq.w	800f7de <_printf_i+0x1d2>
 800f62e:	2f58      	cmp	r7, #88	; 0x58
 800f630:	f000 80a3 	beq.w	800f77a <_printf_i+0x16e>
 800f634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f63c:	e03a      	b.n	800f6b4 <_printf_i+0xa8>
 800f63e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f642:	2b15      	cmp	r3, #21
 800f644:	d8f6      	bhi.n	800f634 <_printf_i+0x28>
 800f646:	a101      	add	r1, pc, #4	; (adr r1, 800f64c <_printf_i+0x40>)
 800f648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f64c:	0800f6a5 	.word	0x0800f6a5
 800f650:	0800f6b9 	.word	0x0800f6b9
 800f654:	0800f635 	.word	0x0800f635
 800f658:	0800f635 	.word	0x0800f635
 800f65c:	0800f635 	.word	0x0800f635
 800f660:	0800f635 	.word	0x0800f635
 800f664:	0800f6b9 	.word	0x0800f6b9
 800f668:	0800f635 	.word	0x0800f635
 800f66c:	0800f635 	.word	0x0800f635
 800f670:	0800f635 	.word	0x0800f635
 800f674:	0800f635 	.word	0x0800f635
 800f678:	0800f7c5 	.word	0x0800f7c5
 800f67c:	0800f6e9 	.word	0x0800f6e9
 800f680:	0800f7a7 	.word	0x0800f7a7
 800f684:	0800f635 	.word	0x0800f635
 800f688:	0800f635 	.word	0x0800f635
 800f68c:	0800f7e7 	.word	0x0800f7e7
 800f690:	0800f635 	.word	0x0800f635
 800f694:	0800f6e9 	.word	0x0800f6e9
 800f698:	0800f635 	.word	0x0800f635
 800f69c:	0800f635 	.word	0x0800f635
 800f6a0:	0800f7af 	.word	0x0800f7af
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	1d1a      	adds	r2, r3, #4
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	602a      	str	r2, [r5, #0]
 800f6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e0a3      	b.n	800f800 <_printf_i+0x1f4>
 800f6b8:	6820      	ldr	r0, [r4, #0]
 800f6ba:	6829      	ldr	r1, [r5, #0]
 800f6bc:	0606      	lsls	r6, r0, #24
 800f6be:	f101 0304 	add.w	r3, r1, #4
 800f6c2:	d50a      	bpl.n	800f6da <_printf_i+0xce>
 800f6c4:	680e      	ldr	r6, [r1, #0]
 800f6c6:	602b      	str	r3, [r5, #0]
 800f6c8:	2e00      	cmp	r6, #0
 800f6ca:	da03      	bge.n	800f6d4 <_printf_i+0xc8>
 800f6cc:	232d      	movs	r3, #45	; 0x2d
 800f6ce:	4276      	negs	r6, r6
 800f6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6d4:	485e      	ldr	r0, [pc, #376]	; (800f850 <_printf_i+0x244>)
 800f6d6:	230a      	movs	r3, #10
 800f6d8:	e019      	b.n	800f70e <_printf_i+0x102>
 800f6da:	680e      	ldr	r6, [r1, #0]
 800f6dc:	602b      	str	r3, [r5, #0]
 800f6de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6e2:	bf18      	it	ne
 800f6e4:	b236      	sxthne	r6, r6
 800f6e6:	e7ef      	b.n	800f6c8 <_printf_i+0xbc>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	1d19      	adds	r1, r3, #4
 800f6ee:	6029      	str	r1, [r5, #0]
 800f6f0:	0601      	lsls	r1, r0, #24
 800f6f2:	d501      	bpl.n	800f6f8 <_printf_i+0xec>
 800f6f4:	681e      	ldr	r6, [r3, #0]
 800f6f6:	e002      	b.n	800f6fe <_printf_i+0xf2>
 800f6f8:	0646      	lsls	r6, r0, #25
 800f6fa:	d5fb      	bpl.n	800f6f4 <_printf_i+0xe8>
 800f6fc:	881e      	ldrh	r6, [r3, #0]
 800f6fe:	4854      	ldr	r0, [pc, #336]	; (800f850 <_printf_i+0x244>)
 800f700:	2f6f      	cmp	r7, #111	; 0x6f
 800f702:	bf0c      	ite	eq
 800f704:	2308      	moveq	r3, #8
 800f706:	230a      	movne	r3, #10
 800f708:	2100      	movs	r1, #0
 800f70a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f70e:	6865      	ldr	r5, [r4, #4]
 800f710:	60a5      	str	r5, [r4, #8]
 800f712:	2d00      	cmp	r5, #0
 800f714:	bfa2      	ittt	ge
 800f716:	6821      	ldrge	r1, [r4, #0]
 800f718:	f021 0104 	bicge.w	r1, r1, #4
 800f71c:	6021      	strge	r1, [r4, #0]
 800f71e:	b90e      	cbnz	r6, 800f724 <_printf_i+0x118>
 800f720:	2d00      	cmp	r5, #0
 800f722:	d04d      	beq.n	800f7c0 <_printf_i+0x1b4>
 800f724:	4615      	mov	r5, r2
 800f726:	fbb6 f1f3 	udiv	r1, r6, r3
 800f72a:	fb03 6711 	mls	r7, r3, r1, r6
 800f72e:	5dc7      	ldrb	r7, [r0, r7]
 800f730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f734:	4637      	mov	r7, r6
 800f736:	42bb      	cmp	r3, r7
 800f738:	460e      	mov	r6, r1
 800f73a:	d9f4      	bls.n	800f726 <_printf_i+0x11a>
 800f73c:	2b08      	cmp	r3, #8
 800f73e:	d10b      	bne.n	800f758 <_printf_i+0x14c>
 800f740:	6823      	ldr	r3, [r4, #0]
 800f742:	07de      	lsls	r6, r3, #31
 800f744:	d508      	bpl.n	800f758 <_printf_i+0x14c>
 800f746:	6923      	ldr	r3, [r4, #16]
 800f748:	6861      	ldr	r1, [r4, #4]
 800f74a:	4299      	cmp	r1, r3
 800f74c:	bfde      	ittt	le
 800f74e:	2330      	movle	r3, #48	; 0x30
 800f750:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f754:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f758:	1b52      	subs	r2, r2, r5
 800f75a:	6122      	str	r2, [r4, #16]
 800f75c:	f8cd a000 	str.w	sl, [sp]
 800f760:	464b      	mov	r3, r9
 800f762:	aa03      	add	r2, sp, #12
 800f764:	4621      	mov	r1, r4
 800f766:	4640      	mov	r0, r8
 800f768:	f7ff fee2 	bl	800f530 <_printf_common>
 800f76c:	3001      	adds	r0, #1
 800f76e:	d14c      	bne.n	800f80a <_printf_i+0x1fe>
 800f770:	f04f 30ff 	mov.w	r0, #4294967295
 800f774:	b004      	add	sp, #16
 800f776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f77a:	4835      	ldr	r0, [pc, #212]	; (800f850 <_printf_i+0x244>)
 800f77c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f780:	6829      	ldr	r1, [r5, #0]
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	f851 6b04 	ldr.w	r6, [r1], #4
 800f788:	6029      	str	r1, [r5, #0]
 800f78a:	061d      	lsls	r5, r3, #24
 800f78c:	d514      	bpl.n	800f7b8 <_printf_i+0x1ac>
 800f78e:	07df      	lsls	r7, r3, #31
 800f790:	bf44      	itt	mi
 800f792:	f043 0320 	orrmi.w	r3, r3, #32
 800f796:	6023      	strmi	r3, [r4, #0]
 800f798:	b91e      	cbnz	r6, 800f7a2 <_printf_i+0x196>
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	f023 0320 	bic.w	r3, r3, #32
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	2310      	movs	r3, #16
 800f7a4:	e7b0      	b.n	800f708 <_printf_i+0xfc>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	f043 0320 	orr.w	r3, r3, #32
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	2378      	movs	r3, #120	; 0x78
 800f7b0:	4828      	ldr	r0, [pc, #160]	; (800f854 <_printf_i+0x248>)
 800f7b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7b6:	e7e3      	b.n	800f780 <_printf_i+0x174>
 800f7b8:	0659      	lsls	r1, r3, #25
 800f7ba:	bf48      	it	mi
 800f7bc:	b2b6      	uxthmi	r6, r6
 800f7be:	e7e6      	b.n	800f78e <_printf_i+0x182>
 800f7c0:	4615      	mov	r5, r2
 800f7c2:	e7bb      	b.n	800f73c <_printf_i+0x130>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	6826      	ldr	r6, [r4, #0]
 800f7c8:	6961      	ldr	r1, [r4, #20]
 800f7ca:	1d18      	adds	r0, r3, #4
 800f7cc:	6028      	str	r0, [r5, #0]
 800f7ce:	0635      	lsls	r5, r6, #24
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	d501      	bpl.n	800f7d8 <_printf_i+0x1cc>
 800f7d4:	6019      	str	r1, [r3, #0]
 800f7d6:	e002      	b.n	800f7de <_printf_i+0x1d2>
 800f7d8:	0670      	lsls	r0, r6, #25
 800f7da:	d5fb      	bpl.n	800f7d4 <_printf_i+0x1c8>
 800f7dc:	8019      	strh	r1, [r3, #0]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	6123      	str	r3, [r4, #16]
 800f7e2:	4615      	mov	r5, r2
 800f7e4:	e7ba      	b.n	800f75c <_printf_i+0x150>
 800f7e6:	682b      	ldr	r3, [r5, #0]
 800f7e8:	1d1a      	adds	r2, r3, #4
 800f7ea:	602a      	str	r2, [r5, #0]
 800f7ec:	681d      	ldr	r5, [r3, #0]
 800f7ee:	6862      	ldr	r2, [r4, #4]
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f7f0 fd1c 	bl	8000230 <memchr>
 800f7f8:	b108      	cbz	r0, 800f7fe <_printf_i+0x1f2>
 800f7fa:	1b40      	subs	r0, r0, r5
 800f7fc:	6060      	str	r0, [r4, #4]
 800f7fe:	6863      	ldr	r3, [r4, #4]
 800f800:	6123      	str	r3, [r4, #16]
 800f802:	2300      	movs	r3, #0
 800f804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f808:	e7a8      	b.n	800f75c <_printf_i+0x150>
 800f80a:	6923      	ldr	r3, [r4, #16]
 800f80c:	462a      	mov	r2, r5
 800f80e:	4649      	mov	r1, r9
 800f810:	4640      	mov	r0, r8
 800f812:	47d0      	blx	sl
 800f814:	3001      	adds	r0, #1
 800f816:	d0ab      	beq.n	800f770 <_printf_i+0x164>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	079b      	lsls	r3, r3, #30
 800f81c:	d413      	bmi.n	800f846 <_printf_i+0x23a>
 800f81e:	68e0      	ldr	r0, [r4, #12]
 800f820:	9b03      	ldr	r3, [sp, #12]
 800f822:	4298      	cmp	r0, r3
 800f824:	bfb8      	it	lt
 800f826:	4618      	movlt	r0, r3
 800f828:	e7a4      	b.n	800f774 <_printf_i+0x168>
 800f82a:	2301      	movs	r3, #1
 800f82c:	4632      	mov	r2, r6
 800f82e:	4649      	mov	r1, r9
 800f830:	4640      	mov	r0, r8
 800f832:	47d0      	blx	sl
 800f834:	3001      	adds	r0, #1
 800f836:	d09b      	beq.n	800f770 <_printf_i+0x164>
 800f838:	3501      	adds	r5, #1
 800f83a:	68e3      	ldr	r3, [r4, #12]
 800f83c:	9903      	ldr	r1, [sp, #12]
 800f83e:	1a5b      	subs	r3, r3, r1
 800f840:	42ab      	cmp	r3, r5
 800f842:	dcf2      	bgt.n	800f82a <_printf_i+0x21e>
 800f844:	e7eb      	b.n	800f81e <_printf_i+0x212>
 800f846:	2500      	movs	r5, #0
 800f848:	f104 0619 	add.w	r6, r4, #25
 800f84c:	e7f5      	b.n	800f83a <_printf_i+0x22e>
 800f84e:	bf00      	nop
 800f850:	0802a1c7 	.word	0x0802a1c7
 800f854:	0802a1d8 	.word	0x0802a1d8

0800f858 <_scanf_float>:
 800f858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f85c:	b087      	sub	sp, #28
 800f85e:	4617      	mov	r7, r2
 800f860:	9303      	str	r3, [sp, #12]
 800f862:	688b      	ldr	r3, [r1, #8]
 800f864:	1e5a      	subs	r2, r3, #1
 800f866:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f86a:	bf83      	ittte	hi
 800f86c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f870:	195b      	addhi	r3, r3, r5
 800f872:	9302      	strhi	r3, [sp, #8]
 800f874:	2300      	movls	r3, #0
 800f876:	bf86      	itte	hi
 800f878:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f87c:	608b      	strhi	r3, [r1, #8]
 800f87e:	9302      	strls	r3, [sp, #8]
 800f880:	680b      	ldr	r3, [r1, #0]
 800f882:	468b      	mov	fp, r1
 800f884:	2500      	movs	r5, #0
 800f886:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f88a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f88e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f892:	4680      	mov	r8, r0
 800f894:	460c      	mov	r4, r1
 800f896:	465e      	mov	r6, fp
 800f898:	46aa      	mov	sl, r5
 800f89a:	46a9      	mov	r9, r5
 800f89c:	9501      	str	r5, [sp, #4]
 800f89e:	68a2      	ldr	r2, [r4, #8]
 800f8a0:	b152      	cbz	r2, 800f8b8 <_scanf_float+0x60>
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	2b4e      	cmp	r3, #78	; 0x4e
 800f8a8:	d864      	bhi.n	800f974 <_scanf_float+0x11c>
 800f8aa:	2b40      	cmp	r3, #64	; 0x40
 800f8ac:	d83c      	bhi.n	800f928 <_scanf_float+0xd0>
 800f8ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f8b2:	b2c8      	uxtb	r0, r1
 800f8b4:	280e      	cmp	r0, #14
 800f8b6:	d93a      	bls.n	800f92e <_scanf_float+0xd6>
 800f8b8:	f1b9 0f00 	cmp.w	r9, #0
 800f8bc:	d003      	beq.n	800f8c6 <_scanf_float+0x6e>
 800f8be:	6823      	ldr	r3, [r4, #0]
 800f8c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8ca:	f1ba 0f01 	cmp.w	sl, #1
 800f8ce:	f200 8113 	bhi.w	800faf8 <_scanf_float+0x2a0>
 800f8d2:	455e      	cmp	r6, fp
 800f8d4:	f200 8105 	bhi.w	800fae2 <_scanf_float+0x28a>
 800f8d8:	2501      	movs	r5, #1
 800f8da:	4628      	mov	r0, r5
 800f8dc:	b007      	add	sp, #28
 800f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f8e6:	2a0d      	cmp	r2, #13
 800f8e8:	d8e6      	bhi.n	800f8b8 <_scanf_float+0x60>
 800f8ea:	a101      	add	r1, pc, #4	; (adr r1, 800f8f0 <_scanf_float+0x98>)
 800f8ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f8f0:	0800fa2f 	.word	0x0800fa2f
 800f8f4:	0800f8b9 	.word	0x0800f8b9
 800f8f8:	0800f8b9 	.word	0x0800f8b9
 800f8fc:	0800f8b9 	.word	0x0800f8b9
 800f900:	0800fa8f 	.word	0x0800fa8f
 800f904:	0800fa67 	.word	0x0800fa67
 800f908:	0800f8b9 	.word	0x0800f8b9
 800f90c:	0800f8b9 	.word	0x0800f8b9
 800f910:	0800fa3d 	.word	0x0800fa3d
 800f914:	0800f8b9 	.word	0x0800f8b9
 800f918:	0800f8b9 	.word	0x0800f8b9
 800f91c:	0800f8b9 	.word	0x0800f8b9
 800f920:	0800f8b9 	.word	0x0800f8b9
 800f924:	0800f9f5 	.word	0x0800f9f5
 800f928:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f92c:	e7db      	b.n	800f8e6 <_scanf_float+0x8e>
 800f92e:	290e      	cmp	r1, #14
 800f930:	d8c2      	bhi.n	800f8b8 <_scanf_float+0x60>
 800f932:	a001      	add	r0, pc, #4	; (adr r0, 800f938 <_scanf_float+0xe0>)
 800f934:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f938:	0800f9e7 	.word	0x0800f9e7
 800f93c:	0800f8b9 	.word	0x0800f8b9
 800f940:	0800f9e7 	.word	0x0800f9e7
 800f944:	0800fa7b 	.word	0x0800fa7b
 800f948:	0800f8b9 	.word	0x0800f8b9
 800f94c:	0800f995 	.word	0x0800f995
 800f950:	0800f9d1 	.word	0x0800f9d1
 800f954:	0800f9d1 	.word	0x0800f9d1
 800f958:	0800f9d1 	.word	0x0800f9d1
 800f95c:	0800f9d1 	.word	0x0800f9d1
 800f960:	0800f9d1 	.word	0x0800f9d1
 800f964:	0800f9d1 	.word	0x0800f9d1
 800f968:	0800f9d1 	.word	0x0800f9d1
 800f96c:	0800f9d1 	.word	0x0800f9d1
 800f970:	0800f9d1 	.word	0x0800f9d1
 800f974:	2b6e      	cmp	r3, #110	; 0x6e
 800f976:	d809      	bhi.n	800f98c <_scanf_float+0x134>
 800f978:	2b60      	cmp	r3, #96	; 0x60
 800f97a:	d8b2      	bhi.n	800f8e2 <_scanf_float+0x8a>
 800f97c:	2b54      	cmp	r3, #84	; 0x54
 800f97e:	d077      	beq.n	800fa70 <_scanf_float+0x218>
 800f980:	2b59      	cmp	r3, #89	; 0x59
 800f982:	d199      	bne.n	800f8b8 <_scanf_float+0x60>
 800f984:	2d07      	cmp	r5, #7
 800f986:	d197      	bne.n	800f8b8 <_scanf_float+0x60>
 800f988:	2508      	movs	r5, #8
 800f98a:	e029      	b.n	800f9e0 <_scanf_float+0x188>
 800f98c:	2b74      	cmp	r3, #116	; 0x74
 800f98e:	d06f      	beq.n	800fa70 <_scanf_float+0x218>
 800f990:	2b79      	cmp	r3, #121	; 0x79
 800f992:	e7f6      	b.n	800f982 <_scanf_float+0x12a>
 800f994:	6821      	ldr	r1, [r4, #0]
 800f996:	05c8      	lsls	r0, r1, #23
 800f998:	d51a      	bpl.n	800f9d0 <_scanf_float+0x178>
 800f99a:	9b02      	ldr	r3, [sp, #8]
 800f99c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f9a0:	6021      	str	r1, [r4, #0]
 800f9a2:	f109 0901 	add.w	r9, r9, #1
 800f9a6:	b11b      	cbz	r3, 800f9b0 <_scanf_float+0x158>
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	3201      	adds	r2, #1
 800f9ac:	9302      	str	r3, [sp, #8]
 800f9ae:	60a2      	str	r2, [r4, #8]
 800f9b0:	68a3      	ldr	r3, [r4, #8]
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	60a3      	str	r3, [r4, #8]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	6123      	str	r3, [r4, #16]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	607b      	str	r3, [r7, #4]
 800f9c4:	f340 8084 	ble.w	800fad0 <_scanf_float+0x278>
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	603b      	str	r3, [r7, #0]
 800f9ce:	e766      	b.n	800f89e <_scanf_float+0x46>
 800f9d0:	eb1a 0f05 	cmn.w	sl, r5
 800f9d4:	f47f af70 	bne.w	800f8b8 <_scanf_float+0x60>
 800f9d8:	6822      	ldr	r2, [r4, #0]
 800f9da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f9de:	6022      	str	r2, [r4, #0]
 800f9e0:	f806 3b01 	strb.w	r3, [r6], #1
 800f9e4:	e7e4      	b.n	800f9b0 <_scanf_float+0x158>
 800f9e6:	6822      	ldr	r2, [r4, #0]
 800f9e8:	0610      	lsls	r0, r2, #24
 800f9ea:	f57f af65 	bpl.w	800f8b8 <_scanf_float+0x60>
 800f9ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9f2:	e7f4      	b.n	800f9de <_scanf_float+0x186>
 800f9f4:	f1ba 0f00 	cmp.w	sl, #0
 800f9f8:	d10e      	bne.n	800fa18 <_scanf_float+0x1c0>
 800f9fa:	f1b9 0f00 	cmp.w	r9, #0
 800f9fe:	d10e      	bne.n	800fa1e <_scanf_float+0x1c6>
 800fa00:	6822      	ldr	r2, [r4, #0]
 800fa02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa0a:	d108      	bne.n	800fa1e <_scanf_float+0x1c6>
 800fa0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa10:	6022      	str	r2, [r4, #0]
 800fa12:	f04f 0a01 	mov.w	sl, #1
 800fa16:	e7e3      	b.n	800f9e0 <_scanf_float+0x188>
 800fa18:	f1ba 0f02 	cmp.w	sl, #2
 800fa1c:	d055      	beq.n	800faca <_scanf_float+0x272>
 800fa1e:	2d01      	cmp	r5, #1
 800fa20:	d002      	beq.n	800fa28 <_scanf_float+0x1d0>
 800fa22:	2d04      	cmp	r5, #4
 800fa24:	f47f af48 	bne.w	800f8b8 <_scanf_float+0x60>
 800fa28:	3501      	adds	r5, #1
 800fa2a:	b2ed      	uxtb	r5, r5
 800fa2c:	e7d8      	b.n	800f9e0 <_scanf_float+0x188>
 800fa2e:	f1ba 0f01 	cmp.w	sl, #1
 800fa32:	f47f af41 	bne.w	800f8b8 <_scanf_float+0x60>
 800fa36:	f04f 0a02 	mov.w	sl, #2
 800fa3a:	e7d1      	b.n	800f9e0 <_scanf_float+0x188>
 800fa3c:	b97d      	cbnz	r5, 800fa5e <_scanf_float+0x206>
 800fa3e:	f1b9 0f00 	cmp.w	r9, #0
 800fa42:	f47f af3c 	bne.w	800f8be <_scanf_float+0x66>
 800fa46:	6822      	ldr	r2, [r4, #0]
 800fa48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa50:	f47f af39 	bne.w	800f8c6 <_scanf_float+0x6e>
 800fa54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa58:	6022      	str	r2, [r4, #0]
 800fa5a:	2501      	movs	r5, #1
 800fa5c:	e7c0      	b.n	800f9e0 <_scanf_float+0x188>
 800fa5e:	2d03      	cmp	r5, #3
 800fa60:	d0e2      	beq.n	800fa28 <_scanf_float+0x1d0>
 800fa62:	2d05      	cmp	r5, #5
 800fa64:	e7de      	b.n	800fa24 <_scanf_float+0x1cc>
 800fa66:	2d02      	cmp	r5, #2
 800fa68:	f47f af26 	bne.w	800f8b8 <_scanf_float+0x60>
 800fa6c:	2503      	movs	r5, #3
 800fa6e:	e7b7      	b.n	800f9e0 <_scanf_float+0x188>
 800fa70:	2d06      	cmp	r5, #6
 800fa72:	f47f af21 	bne.w	800f8b8 <_scanf_float+0x60>
 800fa76:	2507      	movs	r5, #7
 800fa78:	e7b2      	b.n	800f9e0 <_scanf_float+0x188>
 800fa7a:	6822      	ldr	r2, [r4, #0]
 800fa7c:	0591      	lsls	r1, r2, #22
 800fa7e:	f57f af1b 	bpl.w	800f8b8 <_scanf_float+0x60>
 800fa82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fa86:	6022      	str	r2, [r4, #0]
 800fa88:	f8cd 9004 	str.w	r9, [sp, #4]
 800fa8c:	e7a8      	b.n	800f9e0 <_scanf_float+0x188>
 800fa8e:	6822      	ldr	r2, [r4, #0]
 800fa90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fa94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fa98:	d006      	beq.n	800faa8 <_scanf_float+0x250>
 800fa9a:	0550      	lsls	r0, r2, #21
 800fa9c:	f57f af0c 	bpl.w	800f8b8 <_scanf_float+0x60>
 800faa0:	f1b9 0f00 	cmp.w	r9, #0
 800faa4:	f43f af0f 	beq.w	800f8c6 <_scanf_float+0x6e>
 800faa8:	0591      	lsls	r1, r2, #22
 800faaa:	bf58      	it	pl
 800faac:	9901      	ldrpl	r1, [sp, #4]
 800faae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fab2:	bf58      	it	pl
 800fab4:	eba9 0101 	subpl.w	r1, r9, r1
 800fab8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fabc:	bf58      	it	pl
 800fabe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fac2:	6022      	str	r2, [r4, #0]
 800fac4:	f04f 0900 	mov.w	r9, #0
 800fac8:	e78a      	b.n	800f9e0 <_scanf_float+0x188>
 800faca:	f04f 0a03 	mov.w	sl, #3
 800face:	e787      	b.n	800f9e0 <_scanf_float+0x188>
 800fad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fad4:	4639      	mov	r1, r7
 800fad6:	4640      	mov	r0, r8
 800fad8:	4798      	blx	r3
 800fada:	2800      	cmp	r0, #0
 800fadc:	f43f aedf 	beq.w	800f89e <_scanf_float+0x46>
 800fae0:	e6ea      	b.n	800f8b8 <_scanf_float+0x60>
 800fae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800faea:	463a      	mov	r2, r7
 800faec:	4640      	mov	r0, r8
 800faee:	4798      	blx	r3
 800faf0:	6923      	ldr	r3, [r4, #16]
 800faf2:	3b01      	subs	r3, #1
 800faf4:	6123      	str	r3, [r4, #16]
 800faf6:	e6ec      	b.n	800f8d2 <_scanf_float+0x7a>
 800faf8:	1e6b      	subs	r3, r5, #1
 800fafa:	2b06      	cmp	r3, #6
 800fafc:	d825      	bhi.n	800fb4a <_scanf_float+0x2f2>
 800fafe:	2d02      	cmp	r5, #2
 800fb00:	d836      	bhi.n	800fb70 <_scanf_float+0x318>
 800fb02:	455e      	cmp	r6, fp
 800fb04:	f67f aee8 	bls.w	800f8d8 <_scanf_float+0x80>
 800fb08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb10:	463a      	mov	r2, r7
 800fb12:	4640      	mov	r0, r8
 800fb14:	4798      	blx	r3
 800fb16:	6923      	ldr	r3, [r4, #16]
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	6123      	str	r3, [r4, #16]
 800fb1c:	e7f1      	b.n	800fb02 <_scanf_float+0x2aa>
 800fb1e:	9802      	ldr	r0, [sp, #8]
 800fb20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fb28:	9002      	str	r0, [sp, #8]
 800fb2a:	463a      	mov	r2, r7
 800fb2c:	4640      	mov	r0, r8
 800fb2e:	4798      	blx	r3
 800fb30:	6923      	ldr	r3, [r4, #16]
 800fb32:	3b01      	subs	r3, #1
 800fb34:	6123      	str	r3, [r4, #16]
 800fb36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb3a:	fa5f fa8a 	uxtb.w	sl, sl
 800fb3e:	f1ba 0f02 	cmp.w	sl, #2
 800fb42:	d1ec      	bne.n	800fb1e <_scanf_float+0x2c6>
 800fb44:	3d03      	subs	r5, #3
 800fb46:	b2ed      	uxtb	r5, r5
 800fb48:	1b76      	subs	r6, r6, r5
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	05da      	lsls	r2, r3, #23
 800fb4e:	d52f      	bpl.n	800fbb0 <_scanf_float+0x358>
 800fb50:	055b      	lsls	r3, r3, #21
 800fb52:	d510      	bpl.n	800fb76 <_scanf_float+0x31e>
 800fb54:	455e      	cmp	r6, fp
 800fb56:	f67f aebf 	bls.w	800f8d8 <_scanf_float+0x80>
 800fb5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb62:	463a      	mov	r2, r7
 800fb64:	4640      	mov	r0, r8
 800fb66:	4798      	blx	r3
 800fb68:	6923      	ldr	r3, [r4, #16]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	e7f1      	b.n	800fb54 <_scanf_float+0x2fc>
 800fb70:	46aa      	mov	sl, r5
 800fb72:	9602      	str	r6, [sp, #8]
 800fb74:	e7df      	b.n	800fb36 <_scanf_float+0x2de>
 800fb76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	2965      	cmp	r1, #101	; 0x65
 800fb7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb82:	f106 35ff 	add.w	r5, r6, #4294967295
 800fb86:	6123      	str	r3, [r4, #16]
 800fb88:	d00c      	beq.n	800fba4 <_scanf_float+0x34c>
 800fb8a:	2945      	cmp	r1, #69	; 0x45
 800fb8c:	d00a      	beq.n	800fba4 <_scanf_float+0x34c>
 800fb8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb92:	463a      	mov	r2, r7
 800fb94:	4640      	mov	r0, r8
 800fb96:	4798      	blx	r3
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	1eb5      	subs	r5, r6, #2
 800fba2:	6123      	str	r3, [r4, #16]
 800fba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fba8:	463a      	mov	r2, r7
 800fbaa:	4640      	mov	r0, r8
 800fbac:	4798      	blx	r3
 800fbae:	462e      	mov	r6, r5
 800fbb0:	6825      	ldr	r5, [r4, #0]
 800fbb2:	f015 0510 	ands.w	r5, r5, #16
 800fbb6:	d159      	bne.n	800fc6c <_scanf_float+0x414>
 800fbb8:	7035      	strb	r5, [r6, #0]
 800fbba:	6823      	ldr	r3, [r4, #0]
 800fbbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fbc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbc4:	d11b      	bne.n	800fbfe <_scanf_float+0x3a6>
 800fbc6:	9b01      	ldr	r3, [sp, #4]
 800fbc8:	454b      	cmp	r3, r9
 800fbca:	eba3 0209 	sub.w	r2, r3, r9
 800fbce:	d123      	bne.n	800fc18 <_scanf_float+0x3c0>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	4659      	mov	r1, fp
 800fbd4:	4640      	mov	r0, r8
 800fbd6:	f000 ff0d 	bl	80109f4 <_strtod_r>
 800fbda:	6822      	ldr	r2, [r4, #0]
 800fbdc:	9b03      	ldr	r3, [sp, #12]
 800fbde:	f012 0f02 	tst.w	r2, #2
 800fbe2:	ec57 6b10 	vmov	r6, r7, d0
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	d021      	beq.n	800fc2e <_scanf_float+0x3d6>
 800fbea:	9903      	ldr	r1, [sp, #12]
 800fbec:	1d1a      	adds	r2, r3, #4
 800fbee:	600a      	str	r2, [r1, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	e9c3 6700 	strd	r6, r7, [r3]
 800fbf6:	68e3      	ldr	r3, [r4, #12]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	60e3      	str	r3, [r4, #12]
 800fbfc:	e66d      	b.n	800f8da <_scanf_float+0x82>
 800fbfe:	9b04      	ldr	r3, [sp, #16]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d0e5      	beq.n	800fbd0 <_scanf_float+0x378>
 800fc04:	9905      	ldr	r1, [sp, #20]
 800fc06:	230a      	movs	r3, #10
 800fc08:	462a      	mov	r2, r5
 800fc0a:	3101      	adds	r1, #1
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	f000 ff79 	bl	8010b04 <_strtol_r>
 800fc12:	9b04      	ldr	r3, [sp, #16]
 800fc14:	9e05      	ldr	r6, [sp, #20]
 800fc16:	1ac2      	subs	r2, r0, r3
 800fc18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fc1c:	429e      	cmp	r6, r3
 800fc1e:	bf28      	it	cs
 800fc20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fc24:	4912      	ldr	r1, [pc, #72]	; (800fc70 <_scanf_float+0x418>)
 800fc26:	4630      	mov	r0, r6
 800fc28:	f000 f8a2 	bl	800fd70 <siprintf>
 800fc2c:	e7d0      	b.n	800fbd0 <_scanf_float+0x378>
 800fc2e:	9903      	ldr	r1, [sp, #12]
 800fc30:	f012 0f04 	tst.w	r2, #4
 800fc34:	f103 0204 	add.w	r2, r3, #4
 800fc38:	600a      	str	r2, [r1, #0]
 800fc3a:	d1d9      	bne.n	800fbf0 <_scanf_float+0x398>
 800fc3c:	f8d3 8000 	ldr.w	r8, [r3]
 800fc40:	ee10 2a10 	vmov	r2, s0
 800fc44:	ee10 0a10 	vmov	r0, s0
 800fc48:	463b      	mov	r3, r7
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f0 ff96 	bl	8000b7c <__aeabi_dcmpun>
 800fc50:	b128      	cbz	r0, 800fc5e <_scanf_float+0x406>
 800fc52:	4808      	ldr	r0, [pc, #32]	; (800fc74 <_scanf_float+0x41c>)
 800fc54:	f000 f886 	bl	800fd64 <nanf>
 800fc58:	ed88 0a00 	vstr	s0, [r8]
 800fc5c:	e7cb      	b.n	800fbf6 <_scanf_float+0x39e>
 800fc5e:	4630      	mov	r0, r6
 800fc60:	4639      	mov	r1, r7
 800fc62:	f7f0 ffe9 	bl	8000c38 <__aeabi_d2f>
 800fc66:	f8c8 0000 	str.w	r0, [r8]
 800fc6a:	e7c4      	b.n	800fbf6 <_scanf_float+0x39e>
 800fc6c:	2500      	movs	r5, #0
 800fc6e:	e634      	b.n	800f8da <_scanf_float+0x82>
 800fc70:	0802a1e9 	.word	0x0802a1e9
 800fc74:	0802a19f 	.word	0x0802a19f

0800fc78 <_puts_r>:
 800fc78:	b570      	push	{r4, r5, r6, lr}
 800fc7a:	460e      	mov	r6, r1
 800fc7c:	4605      	mov	r5, r0
 800fc7e:	b118      	cbz	r0, 800fc88 <_puts_r+0x10>
 800fc80:	6983      	ldr	r3, [r0, #24]
 800fc82:	b90b      	cbnz	r3, 800fc88 <_puts_r+0x10>
 800fc84:	f001 ff9c 	bl	8011bc0 <__sinit>
 800fc88:	69ab      	ldr	r3, [r5, #24]
 800fc8a:	68ac      	ldr	r4, [r5, #8]
 800fc8c:	b913      	cbnz	r3, 800fc94 <_puts_r+0x1c>
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f001 ff96 	bl	8011bc0 <__sinit>
 800fc94:	4b2c      	ldr	r3, [pc, #176]	; (800fd48 <_puts_r+0xd0>)
 800fc96:	429c      	cmp	r4, r3
 800fc98:	d120      	bne.n	800fcdc <_puts_r+0x64>
 800fc9a:	686c      	ldr	r4, [r5, #4]
 800fc9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc9e:	07db      	lsls	r3, r3, #31
 800fca0:	d405      	bmi.n	800fcae <_puts_r+0x36>
 800fca2:	89a3      	ldrh	r3, [r4, #12]
 800fca4:	0598      	lsls	r0, r3, #22
 800fca6:	d402      	bmi.n	800fcae <_puts_r+0x36>
 800fca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcaa:	f002 fb9a 	bl	80123e2 <__retarget_lock_acquire_recursive>
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	0719      	lsls	r1, r3, #28
 800fcb2:	d51d      	bpl.n	800fcf0 <_puts_r+0x78>
 800fcb4:	6923      	ldr	r3, [r4, #16]
 800fcb6:	b1db      	cbz	r3, 800fcf0 <_puts_r+0x78>
 800fcb8:	3e01      	subs	r6, #1
 800fcba:	68a3      	ldr	r3, [r4, #8]
 800fcbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	60a3      	str	r3, [r4, #8]
 800fcc4:	bb39      	cbnz	r1, 800fd16 <_puts_r+0x9e>
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	da38      	bge.n	800fd3c <_puts_r+0xc4>
 800fcca:	4622      	mov	r2, r4
 800fccc:	210a      	movs	r1, #10
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f000 ff1a 	bl	8010b08 <__swbuf_r>
 800fcd4:	3001      	adds	r0, #1
 800fcd6:	d011      	beq.n	800fcfc <_puts_r+0x84>
 800fcd8:	250a      	movs	r5, #10
 800fcda:	e011      	b.n	800fd00 <_puts_r+0x88>
 800fcdc:	4b1b      	ldr	r3, [pc, #108]	; (800fd4c <_puts_r+0xd4>)
 800fcde:	429c      	cmp	r4, r3
 800fce0:	d101      	bne.n	800fce6 <_puts_r+0x6e>
 800fce2:	68ac      	ldr	r4, [r5, #8]
 800fce4:	e7da      	b.n	800fc9c <_puts_r+0x24>
 800fce6:	4b1a      	ldr	r3, [pc, #104]	; (800fd50 <_puts_r+0xd8>)
 800fce8:	429c      	cmp	r4, r3
 800fcea:	bf08      	it	eq
 800fcec:	68ec      	ldreq	r4, [r5, #12]
 800fcee:	e7d5      	b.n	800fc9c <_puts_r+0x24>
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	f000 ff5a 	bl	8010bac <__swsetup_r>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d0dd      	beq.n	800fcb8 <_puts_r+0x40>
 800fcfc:	f04f 35ff 	mov.w	r5, #4294967295
 800fd00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd02:	07da      	lsls	r2, r3, #31
 800fd04:	d405      	bmi.n	800fd12 <_puts_r+0x9a>
 800fd06:	89a3      	ldrh	r3, [r4, #12]
 800fd08:	059b      	lsls	r3, r3, #22
 800fd0a:	d402      	bmi.n	800fd12 <_puts_r+0x9a>
 800fd0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd0e:	f002 fb69 	bl	80123e4 <__retarget_lock_release_recursive>
 800fd12:	4628      	mov	r0, r5
 800fd14:	bd70      	pop	{r4, r5, r6, pc}
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	da04      	bge.n	800fd24 <_puts_r+0xac>
 800fd1a:	69a2      	ldr	r2, [r4, #24]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	dc06      	bgt.n	800fd2e <_puts_r+0xb6>
 800fd20:	290a      	cmp	r1, #10
 800fd22:	d004      	beq.n	800fd2e <_puts_r+0xb6>
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	1c5a      	adds	r2, r3, #1
 800fd28:	6022      	str	r2, [r4, #0]
 800fd2a:	7019      	strb	r1, [r3, #0]
 800fd2c:	e7c5      	b.n	800fcba <_puts_r+0x42>
 800fd2e:	4622      	mov	r2, r4
 800fd30:	4628      	mov	r0, r5
 800fd32:	f000 fee9 	bl	8010b08 <__swbuf_r>
 800fd36:	3001      	adds	r0, #1
 800fd38:	d1bf      	bne.n	800fcba <_puts_r+0x42>
 800fd3a:	e7df      	b.n	800fcfc <_puts_r+0x84>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	250a      	movs	r5, #10
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	6022      	str	r2, [r4, #0]
 800fd44:	701d      	strb	r5, [r3, #0]
 800fd46:	e7db      	b.n	800fd00 <_puts_r+0x88>
 800fd48:	0802a414 	.word	0x0802a414
 800fd4c:	0802a434 	.word	0x0802a434
 800fd50:	0802a3f4 	.word	0x0802a3f4

0800fd54 <puts>:
 800fd54:	4b02      	ldr	r3, [pc, #8]	; (800fd60 <puts+0xc>)
 800fd56:	4601      	mov	r1, r0
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	f7ff bf8d 	b.w	800fc78 <_puts_r>
 800fd5e:	bf00      	nop
 800fd60:	200000dc 	.word	0x200000dc

0800fd64 <nanf>:
 800fd64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fd6c <nanf+0x8>
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	7fc00000 	.word	0x7fc00000

0800fd70 <siprintf>:
 800fd70:	b40e      	push	{r1, r2, r3}
 800fd72:	b500      	push	{lr}
 800fd74:	b09c      	sub	sp, #112	; 0x70
 800fd76:	ab1d      	add	r3, sp, #116	; 0x74
 800fd78:	9002      	str	r0, [sp, #8]
 800fd7a:	9006      	str	r0, [sp, #24]
 800fd7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd80:	4809      	ldr	r0, [pc, #36]	; (800fda8 <siprintf+0x38>)
 800fd82:	9107      	str	r1, [sp, #28]
 800fd84:	9104      	str	r1, [sp, #16]
 800fd86:	4909      	ldr	r1, [pc, #36]	; (800fdac <siprintf+0x3c>)
 800fd88:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd8c:	9105      	str	r1, [sp, #20]
 800fd8e:	6800      	ldr	r0, [r0, #0]
 800fd90:	9301      	str	r3, [sp, #4]
 800fd92:	a902      	add	r1, sp, #8
 800fd94:	f003 fa02 	bl	801319c <_svfiprintf_r>
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	701a      	strb	r2, [r3, #0]
 800fd9e:	b01c      	add	sp, #112	; 0x70
 800fda0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fda4:	b003      	add	sp, #12
 800fda6:	4770      	bx	lr
 800fda8:	200000dc 	.word	0x200000dc
 800fdac:	ffff0208 	.word	0xffff0208

0800fdb0 <sulp>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	460d      	mov	r5, r1
 800fdb6:	ec45 4b10 	vmov	d0, r4, r5
 800fdba:	4616      	mov	r6, r2
 800fdbc:	f002 ff1e 	bl	8012bfc <__ulp>
 800fdc0:	ec51 0b10 	vmov	r0, r1, d0
 800fdc4:	b17e      	cbz	r6, 800fde6 <sulp+0x36>
 800fdc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fdca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	dd09      	ble.n	800fde6 <sulp+0x36>
 800fdd2:	051b      	lsls	r3, r3, #20
 800fdd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fdd8:	2400      	movs	r4, #0
 800fdda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fdde:	4622      	mov	r2, r4
 800fde0:	462b      	mov	r3, r5
 800fde2:	f7f0 fc31 	bl	8000648 <__aeabi_dmul>
 800fde6:	bd70      	pop	{r4, r5, r6, pc}

0800fde8 <_strtod_l>:
 800fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdec:	ed2d 8b02 	vpush	{d8}
 800fdf0:	b09d      	sub	sp, #116	; 0x74
 800fdf2:	461f      	mov	r7, r3
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9318      	str	r3, [sp, #96]	; 0x60
 800fdf8:	4ba2      	ldr	r3, [pc, #648]	; (8010084 <_strtod_l+0x29c>)
 800fdfa:	9213      	str	r2, [sp, #76]	; 0x4c
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	9305      	str	r3, [sp, #20]
 800fe00:	4604      	mov	r4, r0
 800fe02:	4618      	mov	r0, r3
 800fe04:	4688      	mov	r8, r1
 800fe06:	f7f0 fa0b 	bl	8000220 <strlen>
 800fe0a:	f04f 0a00 	mov.w	sl, #0
 800fe0e:	4605      	mov	r5, r0
 800fe10:	f04f 0b00 	mov.w	fp, #0
 800fe14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	2a2b      	cmp	r2, #43	; 0x2b
 800fe1e:	d04e      	beq.n	800febe <_strtod_l+0xd6>
 800fe20:	d83b      	bhi.n	800fe9a <_strtod_l+0xb2>
 800fe22:	2a0d      	cmp	r2, #13
 800fe24:	d834      	bhi.n	800fe90 <_strtod_l+0xa8>
 800fe26:	2a08      	cmp	r2, #8
 800fe28:	d834      	bhi.n	800fe94 <_strtod_l+0xac>
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	d03e      	beq.n	800feac <_strtod_l+0xc4>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	930a      	str	r3, [sp, #40]	; 0x28
 800fe32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fe34:	7833      	ldrb	r3, [r6, #0]
 800fe36:	2b30      	cmp	r3, #48	; 0x30
 800fe38:	f040 80b0 	bne.w	800ff9c <_strtod_l+0x1b4>
 800fe3c:	7873      	ldrb	r3, [r6, #1]
 800fe3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe42:	2b58      	cmp	r3, #88	; 0x58
 800fe44:	d168      	bne.n	800ff18 <_strtod_l+0x130>
 800fe46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe48:	9301      	str	r3, [sp, #4]
 800fe4a:	ab18      	add	r3, sp, #96	; 0x60
 800fe4c:	9702      	str	r7, [sp, #8]
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	4a8d      	ldr	r2, [pc, #564]	; (8010088 <_strtod_l+0x2a0>)
 800fe52:	ab19      	add	r3, sp, #100	; 0x64
 800fe54:	a917      	add	r1, sp, #92	; 0x5c
 800fe56:	4620      	mov	r0, r4
 800fe58:	f001 ffb6 	bl	8011dc8 <__gethex>
 800fe5c:	f010 0707 	ands.w	r7, r0, #7
 800fe60:	4605      	mov	r5, r0
 800fe62:	d005      	beq.n	800fe70 <_strtod_l+0x88>
 800fe64:	2f06      	cmp	r7, #6
 800fe66:	d12c      	bne.n	800fec2 <_strtod_l+0xda>
 800fe68:	3601      	adds	r6, #1
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800fe6e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	f040 8590 	bne.w	8010998 <_strtod_l+0xbb0>
 800fe78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe7a:	b1eb      	cbz	r3, 800feb8 <_strtod_l+0xd0>
 800fe7c:	4652      	mov	r2, sl
 800fe7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe82:	ec43 2b10 	vmov	d0, r2, r3
 800fe86:	b01d      	add	sp, #116	; 0x74
 800fe88:	ecbd 8b02 	vpop	{d8}
 800fe8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe90:	2a20      	cmp	r2, #32
 800fe92:	d1cc      	bne.n	800fe2e <_strtod_l+0x46>
 800fe94:	3301      	adds	r3, #1
 800fe96:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe98:	e7be      	b.n	800fe18 <_strtod_l+0x30>
 800fe9a:	2a2d      	cmp	r2, #45	; 0x2d
 800fe9c:	d1c7      	bne.n	800fe2e <_strtod_l+0x46>
 800fe9e:	2201      	movs	r2, #1
 800fea0:	920a      	str	r2, [sp, #40]	; 0x28
 800fea2:	1c5a      	adds	r2, r3, #1
 800fea4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fea6:	785b      	ldrb	r3, [r3, #1]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1c2      	bne.n	800fe32 <_strtod_l+0x4a>
 800feac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800feae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f040 856e 	bne.w	8010994 <_strtod_l+0xbac>
 800feb8:	4652      	mov	r2, sl
 800feba:	465b      	mov	r3, fp
 800febc:	e7e1      	b.n	800fe82 <_strtod_l+0x9a>
 800febe:	2200      	movs	r2, #0
 800fec0:	e7ee      	b.n	800fea0 <_strtod_l+0xb8>
 800fec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fec4:	b13a      	cbz	r2, 800fed6 <_strtod_l+0xee>
 800fec6:	2135      	movs	r1, #53	; 0x35
 800fec8:	a81a      	add	r0, sp, #104	; 0x68
 800feca:	f002 ffa2 	bl	8012e12 <__copybits>
 800fece:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fed0:	4620      	mov	r0, r4
 800fed2:	f002 fb61 	bl	8012598 <_Bfree>
 800fed6:	3f01      	subs	r7, #1
 800fed8:	2f04      	cmp	r7, #4
 800feda:	d806      	bhi.n	800feea <_strtod_l+0x102>
 800fedc:	e8df f007 	tbb	[pc, r7]
 800fee0:	1714030a 	.word	0x1714030a
 800fee4:	0a          	.byte	0x0a
 800fee5:	00          	.byte	0x00
 800fee6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800feea:	0728      	lsls	r0, r5, #28
 800feec:	d5c0      	bpl.n	800fe70 <_strtod_l+0x88>
 800feee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fef2:	e7bd      	b.n	800fe70 <_strtod_l+0x88>
 800fef4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fefa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fefe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ff02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ff06:	e7f0      	b.n	800feea <_strtod_l+0x102>
 800ff08:	f8df b180 	ldr.w	fp, [pc, #384]	; 801008c <_strtod_l+0x2a4>
 800ff0c:	e7ed      	b.n	800feea <_strtod_l+0x102>
 800ff0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ff12:	f04f 3aff 	mov.w	sl, #4294967295
 800ff16:	e7e8      	b.n	800feea <_strtod_l+0x102>
 800ff18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff1e:	785b      	ldrb	r3, [r3, #1]
 800ff20:	2b30      	cmp	r3, #48	; 0x30
 800ff22:	d0f9      	beq.n	800ff18 <_strtod_l+0x130>
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0a3      	beq.n	800fe70 <_strtod_l+0x88>
 800ff28:	2301      	movs	r3, #1
 800ff2a:	f04f 0900 	mov.w	r9, #0
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff32:	9308      	str	r3, [sp, #32]
 800ff34:	f8cd 901c 	str.w	r9, [sp, #28]
 800ff38:	464f      	mov	r7, r9
 800ff3a:	220a      	movs	r2, #10
 800ff3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ff3e:	7806      	ldrb	r6, [r0, #0]
 800ff40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ff44:	b2d9      	uxtb	r1, r3
 800ff46:	2909      	cmp	r1, #9
 800ff48:	d92a      	bls.n	800ffa0 <_strtod_l+0x1b8>
 800ff4a:	9905      	ldr	r1, [sp, #20]
 800ff4c:	462a      	mov	r2, r5
 800ff4e:	f003 fac6 	bl	80134de <strncmp>
 800ff52:	b398      	cbz	r0, 800ffbc <_strtod_l+0x1d4>
 800ff54:	2000      	movs	r0, #0
 800ff56:	4632      	mov	r2, r6
 800ff58:	463d      	mov	r5, r7
 800ff5a:	9005      	str	r0, [sp, #20]
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2a65      	cmp	r2, #101	; 0x65
 800ff60:	d001      	beq.n	800ff66 <_strtod_l+0x17e>
 800ff62:	2a45      	cmp	r2, #69	; 0x45
 800ff64:	d118      	bne.n	800ff98 <_strtod_l+0x1b0>
 800ff66:	b91d      	cbnz	r5, 800ff70 <_strtod_l+0x188>
 800ff68:	9a04      	ldr	r2, [sp, #16]
 800ff6a:	4302      	orrs	r2, r0
 800ff6c:	d09e      	beq.n	800feac <_strtod_l+0xc4>
 800ff6e:	2500      	movs	r5, #0
 800ff70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ff74:	f108 0201 	add.w	r2, r8, #1
 800ff78:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ff7e:	2a2b      	cmp	r2, #43	; 0x2b
 800ff80:	d075      	beq.n	801006e <_strtod_l+0x286>
 800ff82:	2a2d      	cmp	r2, #45	; 0x2d
 800ff84:	d07b      	beq.n	801007e <_strtod_l+0x296>
 800ff86:	f04f 0c00 	mov.w	ip, #0
 800ff8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ff8e:	2909      	cmp	r1, #9
 800ff90:	f240 8082 	bls.w	8010098 <_strtod_l+0x2b0>
 800ff94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff98:	2600      	movs	r6, #0
 800ff9a:	e09d      	b.n	80100d8 <_strtod_l+0x2f0>
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	e7c4      	b.n	800ff2a <_strtod_l+0x142>
 800ffa0:	2f08      	cmp	r7, #8
 800ffa2:	bfd8      	it	le
 800ffa4:	9907      	ldrle	r1, [sp, #28]
 800ffa6:	f100 0001 	add.w	r0, r0, #1
 800ffaa:	bfda      	itte	le
 800ffac:	fb02 3301 	mlale	r3, r2, r1, r3
 800ffb0:	9307      	strle	r3, [sp, #28]
 800ffb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ffb6:	3701      	adds	r7, #1
 800ffb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800ffba:	e7bf      	b.n	800ff3c <_strtod_l+0x154>
 800ffbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffbe:	195a      	adds	r2, r3, r5
 800ffc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800ffc2:	5d5a      	ldrb	r2, [r3, r5]
 800ffc4:	2f00      	cmp	r7, #0
 800ffc6:	d037      	beq.n	8010038 <_strtod_l+0x250>
 800ffc8:	9005      	str	r0, [sp, #20]
 800ffca:	463d      	mov	r5, r7
 800ffcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ffd0:	2b09      	cmp	r3, #9
 800ffd2:	d912      	bls.n	800fffa <_strtod_l+0x212>
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e7c2      	b.n	800ff5e <_strtod_l+0x176>
 800ffd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffda:	1c5a      	adds	r2, r3, #1
 800ffdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800ffde:	785a      	ldrb	r2, [r3, #1]
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	2a30      	cmp	r2, #48	; 0x30
 800ffe4:	d0f8      	beq.n	800ffd8 <_strtod_l+0x1f0>
 800ffe6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ffea:	2b08      	cmp	r3, #8
 800ffec:	f200 84d9 	bhi.w	80109a2 <_strtod_l+0xbba>
 800fff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fff2:	9005      	str	r0, [sp, #20]
 800fff4:	2000      	movs	r0, #0
 800fff6:	9308      	str	r3, [sp, #32]
 800fff8:	4605      	mov	r5, r0
 800fffa:	3a30      	subs	r2, #48	; 0x30
 800fffc:	f100 0301 	add.w	r3, r0, #1
 8010000:	d014      	beq.n	801002c <_strtod_l+0x244>
 8010002:	9905      	ldr	r1, [sp, #20]
 8010004:	4419      	add	r1, r3
 8010006:	9105      	str	r1, [sp, #20]
 8010008:	462b      	mov	r3, r5
 801000a:	eb00 0e05 	add.w	lr, r0, r5
 801000e:	210a      	movs	r1, #10
 8010010:	4573      	cmp	r3, lr
 8010012:	d113      	bne.n	801003c <_strtod_l+0x254>
 8010014:	182b      	adds	r3, r5, r0
 8010016:	2b08      	cmp	r3, #8
 8010018:	f105 0501 	add.w	r5, r5, #1
 801001c:	4405      	add	r5, r0
 801001e:	dc1c      	bgt.n	801005a <_strtod_l+0x272>
 8010020:	9907      	ldr	r1, [sp, #28]
 8010022:	230a      	movs	r3, #10
 8010024:	fb03 2301 	mla	r3, r3, r1, r2
 8010028:	9307      	str	r3, [sp, #28]
 801002a:	2300      	movs	r3, #0
 801002c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801002e:	1c51      	adds	r1, r2, #1
 8010030:	9117      	str	r1, [sp, #92]	; 0x5c
 8010032:	7852      	ldrb	r2, [r2, #1]
 8010034:	4618      	mov	r0, r3
 8010036:	e7c9      	b.n	800ffcc <_strtod_l+0x1e4>
 8010038:	4638      	mov	r0, r7
 801003a:	e7d2      	b.n	800ffe2 <_strtod_l+0x1fa>
 801003c:	2b08      	cmp	r3, #8
 801003e:	dc04      	bgt.n	801004a <_strtod_l+0x262>
 8010040:	9e07      	ldr	r6, [sp, #28]
 8010042:	434e      	muls	r6, r1
 8010044:	9607      	str	r6, [sp, #28]
 8010046:	3301      	adds	r3, #1
 8010048:	e7e2      	b.n	8010010 <_strtod_l+0x228>
 801004a:	f103 0c01 	add.w	ip, r3, #1
 801004e:	f1bc 0f10 	cmp.w	ip, #16
 8010052:	bfd8      	it	le
 8010054:	fb01 f909 	mulle.w	r9, r1, r9
 8010058:	e7f5      	b.n	8010046 <_strtod_l+0x25e>
 801005a:	2d10      	cmp	r5, #16
 801005c:	bfdc      	itt	le
 801005e:	230a      	movle	r3, #10
 8010060:	fb03 2909 	mlale	r9, r3, r9, r2
 8010064:	e7e1      	b.n	801002a <_strtod_l+0x242>
 8010066:	2300      	movs	r3, #0
 8010068:	9305      	str	r3, [sp, #20]
 801006a:	2301      	movs	r3, #1
 801006c:	e77c      	b.n	800ff68 <_strtod_l+0x180>
 801006e:	f04f 0c00 	mov.w	ip, #0
 8010072:	f108 0202 	add.w	r2, r8, #2
 8010076:	9217      	str	r2, [sp, #92]	; 0x5c
 8010078:	f898 2002 	ldrb.w	r2, [r8, #2]
 801007c:	e785      	b.n	800ff8a <_strtod_l+0x1a2>
 801007e:	f04f 0c01 	mov.w	ip, #1
 8010082:	e7f6      	b.n	8010072 <_strtod_l+0x28a>
 8010084:	0802a4dc 	.word	0x0802a4dc
 8010088:	0802a1f0 	.word	0x0802a1f0
 801008c:	7ff00000 	.word	0x7ff00000
 8010090:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010092:	1c51      	adds	r1, r2, #1
 8010094:	9117      	str	r1, [sp, #92]	; 0x5c
 8010096:	7852      	ldrb	r2, [r2, #1]
 8010098:	2a30      	cmp	r2, #48	; 0x30
 801009a:	d0f9      	beq.n	8010090 <_strtod_l+0x2a8>
 801009c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80100a0:	2908      	cmp	r1, #8
 80100a2:	f63f af79 	bhi.w	800ff98 <_strtod_l+0x1b0>
 80100a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80100aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100ac:	9206      	str	r2, [sp, #24]
 80100ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100b0:	1c51      	adds	r1, r2, #1
 80100b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80100b4:	7852      	ldrb	r2, [r2, #1]
 80100b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80100ba:	2e09      	cmp	r6, #9
 80100bc:	d937      	bls.n	801012e <_strtod_l+0x346>
 80100be:	9e06      	ldr	r6, [sp, #24]
 80100c0:	1b89      	subs	r1, r1, r6
 80100c2:	2908      	cmp	r1, #8
 80100c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80100c8:	dc02      	bgt.n	80100d0 <_strtod_l+0x2e8>
 80100ca:	4576      	cmp	r6, lr
 80100cc:	bfa8      	it	ge
 80100ce:	4676      	movge	r6, lr
 80100d0:	f1bc 0f00 	cmp.w	ip, #0
 80100d4:	d000      	beq.n	80100d8 <_strtod_l+0x2f0>
 80100d6:	4276      	negs	r6, r6
 80100d8:	2d00      	cmp	r5, #0
 80100da:	d14d      	bne.n	8010178 <_strtod_l+0x390>
 80100dc:	9904      	ldr	r1, [sp, #16]
 80100de:	4301      	orrs	r1, r0
 80100e0:	f47f aec6 	bne.w	800fe70 <_strtod_l+0x88>
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	f47f aee1 	bne.w	800feac <_strtod_l+0xc4>
 80100ea:	2a69      	cmp	r2, #105	; 0x69
 80100ec:	d027      	beq.n	801013e <_strtod_l+0x356>
 80100ee:	dc24      	bgt.n	801013a <_strtod_l+0x352>
 80100f0:	2a49      	cmp	r2, #73	; 0x49
 80100f2:	d024      	beq.n	801013e <_strtod_l+0x356>
 80100f4:	2a4e      	cmp	r2, #78	; 0x4e
 80100f6:	f47f aed9 	bne.w	800feac <_strtod_l+0xc4>
 80100fa:	499f      	ldr	r1, [pc, #636]	; (8010378 <_strtod_l+0x590>)
 80100fc:	a817      	add	r0, sp, #92	; 0x5c
 80100fe:	f002 f8bb 	bl	8012278 <__match>
 8010102:	2800      	cmp	r0, #0
 8010104:	f43f aed2 	beq.w	800feac <_strtod_l+0xc4>
 8010108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b28      	cmp	r3, #40	; 0x28
 801010e:	d12d      	bne.n	801016c <_strtod_l+0x384>
 8010110:	499a      	ldr	r1, [pc, #616]	; (801037c <_strtod_l+0x594>)
 8010112:	aa1a      	add	r2, sp, #104	; 0x68
 8010114:	a817      	add	r0, sp, #92	; 0x5c
 8010116:	f002 f8c3 	bl	80122a0 <__hexnan>
 801011a:	2805      	cmp	r0, #5
 801011c:	d126      	bne.n	801016c <_strtod_l+0x384>
 801011e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010120:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010124:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010128:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801012c:	e6a0      	b.n	800fe70 <_strtod_l+0x88>
 801012e:	210a      	movs	r1, #10
 8010130:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010134:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010138:	e7b9      	b.n	80100ae <_strtod_l+0x2c6>
 801013a:	2a6e      	cmp	r2, #110	; 0x6e
 801013c:	e7db      	b.n	80100f6 <_strtod_l+0x30e>
 801013e:	4990      	ldr	r1, [pc, #576]	; (8010380 <_strtod_l+0x598>)
 8010140:	a817      	add	r0, sp, #92	; 0x5c
 8010142:	f002 f899 	bl	8012278 <__match>
 8010146:	2800      	cmp	r0, #0
 8010148:	f43f aeb0 	beq.w	800feac <_strtod_l+0xc4>
 801014c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801014e:	498d      	ldr	r1, [pc, #564]	; (8010384 <_strtod_l+0x59c>)
 8010150:	3b01      	subs	r3, #1
 8010152:	a817      	add	r0, sp, #92	; 0x5c
 8010154:	9317      	str	r3, [sp, #92]	; 0x5c
 8010156:	f002 f88f 	bl	8012278 <__match>
 801015a:	b910      	cbnz	r0, 8010162 <_strtod_l+0x37a>
 801015c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801015e:	3301      	adds	r3, #1
 8010160:	9317      	str	r3, [sp, #92]	; 0x5c
 8010162:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010394 <_strtod_l+0x5ac>
 8010166:	f04f 0a00 	mov.w	sl, #0
 801016a:	e681      	b.n	800fe70 <_strtod_l+0x88>
 801016c:	4886      	ldr	r0, [pc, #536]	; (8010388 <_strtod_l+0x5a0>)
 801016e:	f003 f917 	bl	80133a0 <nan>
 8010172:	ec5b ab10 	vmov	sl, fp, d0
 8010176:	e67b      	b.n	800fe70 <_strtod_l+0x88>
 8010178:	9b05      	ldr	r3, [sp, #20]
 801017a:	9807      	ldr	r0, [sp, #28]
 801017c:	1af3      	subs	r3, r6, r3
 801017e:	2f00      	cmp	r7, #0
 8010180:	bf08      	it	eq
 8010182:	462f      	moveq	r7, r5
 8010184:	2d10      	cmp	r5, #16
 8010186:	9306      	str	r3, [sp, #24]
 8010188:	46a8      	mov	r8, r5
 801018a:	bfa8      	it	ge
 801018c:	f04f 0810 	movge.w	r8, #16
 8010190:	f7f0 f9e0 	bl	8000554 <__aeabi_ui2d>
 8010194:	2d09      	cmp	r5, #9
 8010196:	4682      	mov	sl, r0
 8010198:	468b      	mov	fp, r1
 801019a:	dd13      	ble.n	80101c4 <_strtod_l+0x3dc>
 801019c:	4b7b      	ldr	r3, [pc, #492]	; (801038c <_strtod_l+0x5a4>)
 801019e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80101a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80101a6:	f7f0 fa4f 	bl	8000648 <__aeabi_dmul>
 80101aa:	4682      	mov	sl, r0
 80101ac:	4648      	mov	r0, r9
 80101ae:	468b      	mov	fp, r1
 80101b0:	f7f0 f9d0 	bl	8000554 <__aeabi_ui2d>
 80101b4:	4602      	mov	r2, r0
 80101b6:	460b      	mov	r3, r1
 80101b8:	4650      	mov	r0, sl
 80101ba:	4659      	mov	r1, fp
 80101bc:	f7f0 f88e 	bl	80002dc <__adddf3>
 80101c0:	4682      	mov	sl, r0
 80101c2:	468b      	mov	fp, r1
 80101c4:	2d0f      	cmp	r5, #15
 80101c6:	dc38      	bgt.n	801023a <_strtod_l+0x452>
 80101c8:	9b06      	ldr	r3, [sp, #24]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f43f ae50 	beq.w	800fe70 <_strtod_l+0x88>
 80101d0:	dd24      	ble.n	801021c <_strtod_l+0x434>
 80101d2:	2b16      	cmp	r3, #22
 80101d4:	dc0b      	bgt.n	80101ee <_strtod_l+0x406>
 80101d6:	496d      	ldr	r1, [pc, #436]	; (801038c <_strtod_l+0x5a4>)
 80101d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101e0:	4652      	mov	r2, sl
 80101e2:	465b      	mov	r3, fp
 80101e4:	f7f0 fa30 	bl	8000648 <__aeabi_dmul>
 80101e8:	4682      	mov	sl, r0
 80101ea:	468b      	mov	fp, r1
 80101ec:	e640      	b.n	800fe70 <_strtod_l+0x88>
 80101ee:	9a06      	ldr	r2, [sp, #24]
 80101f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80101f4:	4293      	cmp	r3, r2
 80101f6:	db20      	blt.n	801023a <_strtod_l+0x452>
 80101f8:	4c64      	ldr	r4, [pc, #400]	; (801038c <_strtod_l+0x5a4>)
 80101fa:	f1c5 050f 	rsb	r5, r5, #15
 80101fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010202:	4652      	mov	r2, sl
 8010204:	465b      	mov	r3, fp
 8010206:	e9d1 0100 	ldrd	r0, r1, [r1]
 801020a:	f7f0 fa1d 	bl	8000648 <__aeabi_dmul>
 801020e:	9b06      	ldr	r3, [sp, #24]
 8010210:	1b5d      	subs	r5, r3, r5
 8010212:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010216:	e9d4 2300 	ldrd	r2, r3, [r4]
 801021a:	e7e3      	b.n	80101e4 <_strtod_l+0x3fc>
 801021c:	9b06      	ldr	r3, [sp, #24]
 801021e:	3316      	adds	r3, #22
 8010220:	db0b      	blt.n	801023a <_strtod_l+0x452>
 8010222:	9b05      	ldr	r3, [sp, #20]
 8010224:	1b9e      	subs	r6, r3, r6
 8010226:	4b59      	ldr	r3, [pc, #356]	; (801038c <_strtod_l+0x5a4>)
 8010228:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801022c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010230:	4650      	mov	r0, sl
 8010232:	4659      	mov	r1, fp
 8010234:	f7f0 fb32 	bl	800089c <__aeabi_ddiv>
 8010238:	e7d6      	b.n	80101e8 <_strtod_l+0x400>
 801023a:	9b06      	ldr	r3, [sp, #24]
 801023c:	eba5 0808 	sub.w	r8, r5, r8
 8010240:	4498      	add	r8, r3
 8010242:	f1b8 0f00 	cmp.w	r8, #0
 8010246:	dd74      	ble.n	8010332 <_strtod_l+0x54a>
 8010248:	f018 030f 	ands.w	r3, r8, #15
 801024c:	d00a      	beq.n	8010264 <_strtod_l+0x47c>
 801024e:	494f      	ldr	r1, [pc, #316]	; (801038c <_strtod_l+0x5a4>)
 8010250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010254:	4652      	mov	r2, sl
 8010256:	465b      	mov	r3, fp
 8010258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801025c:	f7f0 f9f4 	bl	8000648 <__aeabi_dmul>
 8010260:	4682      	mov	sl, r0
 8010262:	468b      	mov	fp, r1
 8010264:	f038 080f 	bics.w	r8, r8, #15
 8010268:	d04f      	beq.n	801030a <_strtod_l+0x522>
 801026a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801026e:	dd22      	ble.n	80102b6 <_strtod_l+0x4ce>
 8010270:	2500      	movs	r5, #0
 8010272:	462e      	mov	r6, r5
 8010274:	9507      	str	r5, [sp, #28]
 8010276:	9505      	str	r5, [sp, #20]
 8010278:	2322      	movs	r3, #34	; 0x22
 801027a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010394 <_strtod_l+0x5ac>
 801027e:	6023      	str	r3, [r4, #0]
 8010280:	f04f 0a00 	mov.w	sl, #0
 8010284:	9b07      	ldr	r3, [sp, #28]
 8010286:	2b00      	cmp	r3, #0
 8010288:	f43f adf2 	beq.w	800fe70 <_strtod_l+0x88>
 801028c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801028e:	4620      	mov	r0, r4
 8010290:	f002 f982 	bl	8012598 <_Bfree>
 8010294:	9905      	ldr	r1, [sp, #20]
 8010296:	4620      	mov	r0, r4
 8010298:	f002 f97e 	bl	8012598 <_Bfree>
 801029c:	4631      	mov	r1, r6
 801029e:	4620      	mov	r0, r4
 80102a0:	f002 f97a 	bl	8012598 <_Bfree>
 80102a4:	9907      	ldr	r1, [sp, #28]
 80102a6:	4620      	mov	r0, r4
 80102a8:	f002 f976 	bl	8012598 <_Bfree>
 80102ac:	4629      	mov	r1, r5
 80102ae:	4620      	mov	r0, r4
 80102b0:	f002 f972 	bl	8012598 <_Bfree>
 80102b4:	e5dc      	b.n	800fe70 <_strtod_l+0x88>
 80102b6:	4b36      	ldr	r3, [pc, #216]	; (8010390 <_strtod_l+0x5a8>)
 80102b8:	9304      	str	r3, [sp, #16]
 80102ba:	2300      	movs	r3, #0
 80102bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80102c0:	4650      	mov	r0, sl
 80102c2:	4659      	mov	r1, fp
 80102c4:	4699      	mov	r9, r3
 80102c6:	f1b8 0f01 	cmp.w	r8, #1
 80102ca:	dc21      	bgt.n	8010310 <_strtod_l+0x528>
 80102cc:	b10b      	cbz	r3, 80102d2 <_strtod_l+0x4ea>
 80102ce:	4682      	mov	sl, r0
 80102d0:	468b      	mov	fp, r1
 80102d2:	4b2f      	ldr	r3, [pc, #188]	; (8010390 <_strtod_l+0x5a8>)
 80102d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80102d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80102dc:	4652      	mov	r2, sl
 80102de:	465b      	mov	r3, fp
 80102e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80102e4:	f7f0 f9b0 	bl	8000648 <__aeabi_dmul>
 80102e8:	4b2a      	ldr	r3, [pc, #168]	; (8010394 <_strtod_l+0x5ac>)
 80102ea:	460a      	mov	r2, r1
 80102ec:	400b      	ands	r3, r1
 80102ee:	492a      	ldr	r1, [pc, #168]	; (8010398 <_strtod_l+0x5b0>)
 80102f0:	428b      	cmp	r3, r1
 80102f2:	4682      	mov	sl, r0
 80102f4:	d8bc      	bhi.n	8010270 <_strtod_l+0x488>
 80102f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80102fa:	428b      	cmp	r3, r1
 80102fc:	bf86      	itte	hi
 80102fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801039c <_strtod_l+0x5b4>
 8010302:	f04f 3aff 	movhi.w	sl, #4294967295
 8010306:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801030a:	2300      	movs	r3, #0
 801030c:	9304      	str	r3, [sp, #16]
 801030e:	e084      	b.n	801041a <_strtod_l+0x632>
 8010310:	f018 0f01 	tst.w	r8, #1
 8010314:	d005      	beq.n	8010322 <_strtod_l+0x53a>
 8010316:	9b04      	ldr	r3, [sp, #16]
 8010318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031c:	f7f0 f994 	bl	8000648 <__aeabi_dmul>
 8010320:	2301      	movs	r3, #1
 8010322:	9a04      	ldr	r2, [sp, #16]
 8010324:	3208      	adds	r2, #8
 8010326:	f109 0901 	add.w	r9, r9, #1
 801032a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801032e:	9204      	str	r2, [sp, #16]
 8010330:	e7c9      	b.n	80102c6 <_strtod_l+0x4de>
 8010332:	d0ea      	beq.n	801030a <_strtod_l+0x522>
 8010334:	f1c8 0800 	rsb	r8, r8, #0
 8010338:	f018 020f 	ands.w	r2, r8, #15
 801033c:	d00a      	beq.n	8010354 <_strtod_l+0x56c>
 801033e:	4b13      	ldr	r3, [pc, #76]	; (801038c <_strtod_l+0x5a4>)
 8010340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010344:	4650      	mov	r0, sl
 8010346:	4659      	mov	r1, fp
 8010348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034c:	f7f0 faa6 	bl	800089c <__aeabi_ddiv>
 8010350:	4682      	mov	sl, r0
 8010352:	468b      	mov	fp, r1
 8010354:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010358:	d0d7      	beq.n	801030a <_strtod_l+0x522>
 801035a:	f1b8 0f1f 	cmp.w	r8, #31
 801035e:	dd1f      	ble.n	80103a0 <_strtod_l+0x5b8>
 8010360:	2500      	movs	r5, #0
 8010362:	462e      	mov	r6, r5
 8010364:	9507      	str	r5, [sp, #28]
 8010366:	9505      	str	r5, [sp, #20]
 8010368:	2322      	movs	r3, #34	; 0x22
 801036a:	f04f 0a00 	mov.w	sl, #0
 801036e:	f04f 0b00 	mov.w	fp, #0
 8010372:	6023      	str	r3, [r4, #0]
 8010374:	e786      	b.n	8010284 <_strtod_l+0x49c>
 8010376:	bf00      	nop
 8010378:	0802a1c2 	.word	0x0802a1c2
 801037c:	0802a204 	.word	0x0802a204
 8010380:	0802a1ba 	.word	0x0802a1ba
 8010384:	0802a344 	.word	0x0802a344
 8010388:	0802a19f 	.word	0x0802a19f
 801038c:	0802a598 	.word	0x0802a598
 8010390:	0802a570 	.word	0x0802a570
 8010394:	7ff00000 	.word	0x7ff00000
 8010398:	7ca00000 	.word	0x7ca00000
 801039c:	7fefffff 	.word	0x7fefffff
 80103a0:	f018 0310 	ands.w	r3, r8, #16
 80103a4:	bf18      	it	ne
 80103a6:	236a      	movne	r3, #106	; 0x6a
 80103a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010758 <_strtod_l+0x970>
 80103ac:	9304      	str	r3, [sp, #16]
 80103ae:	4650      	mov	r0, sl
 80103b0:	4659      	mov	r1, fp
 80103b2:	2300      	movs	r3, #0
 80103b4:	f018 0f01 	tst.w	r8, #1
 80103b8:	d004      	beq.n	80103c4 <_strtod_l+0x5dc>
 80103ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80103be:	f7f0 f943 	bl	8000648 <__aeabi_dmul>
 80103c2:	2301      	movs	r3, #1
 80103c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80103c8:	f109 0908 	add.w	r9, r9, #8
 80103cc:	d1f2      	bne.n	80103b4 <_strtod_l+0x5cc>
 80103ce:	b10b      	cbz	r3, 80103d4 <_strtod_l+0x5ec>
 80103d0:	4682      	mov	sl, r0
 80103d2:	468b      	mov	fp, r1
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	b1c3      	cbz	r3, 801040a <_strtod_l+0x622>
 80103d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80103dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	4659      	mov	r1, fp
 80103e4:	dd11      	ble.n	801040a <_strtod_l+0x622>
 80103e6:	2b1f      	cmp	r3, #31
 80103e8:	f340 8124 	ble.w	8010634 <_strtod_l+0x84c>
 80103ec:	2b34      	cmp	r3, #52	; 0x34
 80103ee:	bfde      	ittt	le
 80103f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80103f4:	f04f 33ff 	movle.w	r3, #4294967295
 80103f8:	fa03 f202 	lslle.w	r2, r3, r2
 80103fc:	f04f 0a00 	mov.w	sl, #0
 8010400:	bfcc      	ite	gt
 8010402:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010406:	ea02 0b01 	andle.w	fp, r2, r1
 801040a:	2200      	movs	r2, #0
 801040c:	2300      	movs	r3, #0
 801040e:	4650      	mov	r0, sl
 8010410:	4659      	mov	r1, fp
 8010412:	f7f0 fb81 	bl	8000b18 <__aeabi_dcmpeq>
 8010416:	2800      	cmp	r0, #0
 8010418:	d1a2      	bne.n	8010360 <_strtod_l+0x578>
 801041a:	9b07      	ldr	r3, [sp, #28]
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	9908      	ldr	r1, [sp, #32]
 8010420:	462b      	mov	r3, r5
 8010422:	463a      	mov	r2, r7
 8010424:	4620      	mov	r0, r4
 8010426:	f002 f91f 	bl	8012668 <__s2b>
 801042a:	9007      	str	r0, [sp, #28]
 801042c:	2800      	cmp	r0, #0
 801042e:	f43f af1f 	beq.w	8010270 <_strtod_l+0x488>
 8010432:	9b05      	ldr	r3, [sp, #20]
 8010434:	1b9e      	subs	r6, r3, r6
 8010436:	9b06      	ldr	r3, [sp, #24]
 8010438:	2b00      	cmp	r3, #0
 801043a:	bfb4      	ite	lt
 801043c:	4633      	movlt	r3, r6
 801043e:	2300      	movge	r3, #0
 8010440:	930c      	str	r3, [sp, #48]	; 0x30
 8010442:	9b06      	ldr	r3, [sp, #24]
 8010444:	2500      	movs	r5, #0
 8010446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801044a:	9312      	str	r3, [sp, #72]	; 0x48
 801044c:	462e      	mov	r6, r5
 801044e:	9b07      	ldr	r3, [sp, #28]
 8010450:	4620      	mov	r0, r4
 8010452:	6859      	ldr	r1, [r3, #4]
 8010454:	f002 f860 	bl	8012518 <_Balloc>
 8010458:	9005      	str	r0, [sp, #20]
 801045a:	2800      	cmp	r0, #0
 801045c:	f43f af0c 	beq.w	8010278 <_strtod_l+0x490>
 8010460:	9b07      	ldr	r3, [sp, #28]
 8010462:	691a      	ldr	r2, [r3, #16]
 8010464:	3202      	adds	r2, #2
 8010466:	f103 010c 	add.w	r1, r3, #12
 801046a:	0092      	lsls	r2, r2, #2
 801046c:	300c      	adds	r0, #12
 801046e:	f7fe fc19 	bl	800eca4 <memcpy>
 8010472:	ec4b ab10 	vmov	d0, sl, fp
 8010476:	aa1a      	add	r2, sp, #104	; 0x68
 8010478:	a919      	add	r1, sp, #100	; 0x64
 801047a:	4620      	mov	r0, r4
 801047c:	f002 fc3a 	bl	8012cf4 <__d2b>
 8010480:	ec4b ab18 	vmov	d8, sl, fp
 8010484:	9018      	str	r0, [sp, #96]	; 0x60
 8010486:	2800      	cmp	r0, #0
 8010488:	f43f aef6 	beq.w	8010278 <_strtod_l+0x490>
 801048c:	2101      	movs	r1, #1
 801048e:	4620      	mov	r0, r4
 8010490:	f002 f984 	bl	801279c <__i2b>
 8010494:	4606      	mov	r6, r0
 8010496:	2800      	cmp	r0, #0
 8010498:	f43f aeee 	beq.w	8010278 <_strtod_l+0x490>
 801049c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801049e:	9904      	ldr	r1, [sp, #16]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	bfab      	itete	ge
 80104a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80104a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80104a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80104aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80104ae:	bfac      	ite	ge
 80104b0:	eb03 0902 	addge.w	r9, r3, r2
 80104b4:	1ad7      	sublt	r7, r2, r3
 80104b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80104b8:	eba3 0801 	sub.w	r8, r3, r1
 80104bc:	4490      	add	r8, r2
 80104be:	4ba1      	ldr	r3, [pc, #644]	; (8010744 <_strtod_l+0x95c>)
 80104c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80104c4:	4598      	cmp	r8, r3
 80104c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80104ca:	f280 80c7 	bge.w	801065c <_strtod_l+0x874>
 80104ce:	eba3 0308 	sub.w	r3, r3, r8
 80104d2:	2b1f      	cmp	r3, #31
 80104d4:	eba2 0203 	sub.w	r2, r2, r3
 80104d8:	f04f 0101 	mov.w	r1, #1
 80104dc:	f300 80b1 	bgt.w	8010642 <_strtod_l+0x85a>
 80104e0:	fa01 f303 	lsl.w	r3, r1, r3
 80104e4:	930d      	str	r3, [sp, #52]	; 0x34
 80104e6:	2300      	movs	r3, #0
 80104e8:	9308      	str	r3, [sp, #32]
 80104ea:	eb09 0802 	add.w	r8, r9, r2
 80104ee:	9b04      	ldr	r3, [sp, #16]
 80104f0:	45c1      	cmp	r9, r8
 80104f2:	4417      	add	r7, r2
 80104f4:	441f      	add	r7, r3
 80104f6:	464b      	mov	r3, r9
 80104f8:	bfa8      	it	ge
 80104fa:	4643      	movge	r3, r8
 80104fc:	42bb      	cmp	r3, r7
 80104fe:	bfa8      	it	ge
 8010500:	463b      	movge	r3, r7
 8010502:	2b00      	cmp	r3, #0
 8010504:	bfc2      	ittt	gt
 8010506:	eba8 0803 	subgt.w	r8, r8, r3
 801050a:	1aff      	subgt	r7, r7, r3
 801050c:	eba9 0903 	subgt.w	r9, r9, r3
 8010510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010512:	2b00      	cmp	r3, #0
 8010514:	dd17      	ble.n	8010546 <_strtod_l+0x75e>
 8010516:	4631      	mov	r1, r6
 8010518:	461a      	mov	r2, r3
 801051a:	4620      	mov	r0, r4
 801051c:	f002 f9fe 	bl	801291c <__pow5mult>
 8010520:	4606      	mov	r6, r0
 8010522:	2800      	cmp	r0, #0
 8010524:	f43f aea8 	beq.w	8010278 <_strtod_l+0x490>
 8010528:	4601      	mov	r1, r0
 801052a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801052c:	4620      	mov	r0, r4
 801052e:	f002 f94b 	bl	80127c8 <__multiply>
 8010532:	900b      	str	r0, [sp, #44]	; 0x2c
 8010534:	2800      	cmp	r0, #0
 8010536:	f43f ae9f 	beq.w	8010278 <_strtod_l+0x490>
 801053a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801053c:	4620      	mov	r0, r4
 801053e:	f002 f82b 	bl	8012598 <_Bfree>
 8010542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010544:	9318      	str	r3, [sp, #96]	; 0x60
 8010546:	f1b8 0f00 	cmp.w	r8, #0
 801054a:	f300 808c 	bgt.w	8010666 <_strtod_l+0x87e>
 801054e:	9b06      	ldr	r3, [sp, #24]
 8010550:	2b00      	cmp	r3, #0
 8010552:	dd08      	ble.n	8010566 <_strtod_l+0x77e>
 8010554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010556:	9905      	ldr	r1, [sp, #20]
 8010558:	4620      	mov	r0, r4
 801055a:	f002 f9df 	bl	801291c <__pow5mult>
 801055e:	9005      	str	r0, [sp, #20]
 8010560:	2800      	cmp	r0, #0
 8010562:	f43f ae89 	beq.w	8010278 <_strtod_l+0x490>
 8010566:	2f00      	cmp	r7, #0
 8010568:	dd08      	ble.n	801057c <_strtod_l+0x794>
 801056a:	9905      	ldr	r1, [sp, #20]
 801056c:	463a      	mov	r2, r7
 801056e:	4620      	mov	r0, r4
 8010570:	f002 fa2e 	bl	80129d0 <__lshift>
 8010574:	9005      	str	r0, [sp, #20]
 8010576:	2800      	cmp	r0, #0
 8010578:	f43f ae7e 	beq.w	8010278 <_strtod_l+0x490>
 801057c:	f1b9 0f00 	cmp.w	r9, #0
 8010580:	dd08      	ble.n	8010594 <_strtod_l+0x7ac>
 8010582:	4631      	mov	r1, r6
 8010584:	464a      	mov	r2, r9
 8010586:	4620      	mov	r0, r4
 8010588:	f002 fa22 	bl	80129d0 <__lshift>
 801058c:	4606      	mov	r6, r0
 801058e:	2800      	cmp	r0, #0
 8010590:	f43f ae72 	beq.w	8010278 <_strtod_l+0x490>
 8010594:	9a05      	ldr	r2, [sp, #20]
 8010596:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010598:	4620      	mov	r0, r4
 801059a:	f002 faa5 	bl	8012ae8 <__mdiff>
 801059e:	4605      	mov	r5, r0
 80105a0:	2800      	cmp	r0, #0
 80105a2:	f43f ae69 	beq.w	8010278 <_strtod_l+0x490>
 80105a6:	68c3      	ldr	r3, [r0, #12]
 80105a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80105aa:	2300      	movs	r3, #0
 80105ac:	60c3      	str	r3, [r0, #12]
 80105ae:	4631      	mov	r1, r6
 80105b0:	f002 fa7e 	bl	8012ab0 <__mcmp>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	da60      	bge.n	801067a <_strtod_l+0x892>
 80105b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105ba:	ea53 030a 	orrs.w	r3, r3, sl
 80105be:	f040 8082 	bne.w	80106c6 <_strtod_l+0x8de>
 80105c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d17d      	bne.n	80106c6 <_strtod_l+0x8de>
 80105ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80105ce:	0d1b      	lsrs	r3, r3, #20
 80105d0:	051b      	lsls	r3, r3, #20
 80105d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80105d6:	d976      	bls.n	80106c6 <_strtod_l+0x8de>
 80105d8:	696b      	ldr	r3, [r5, #20]
 80105da:	b913      	cbnz	r3, 80105e2 <_strtod_l+0x7fa>
 80105dc:	692b      	ldr	r3, [r5, #16]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	dd71      	ble.n	80106c6 <_strtod_l+0x8de>
 80105e2:	4629      	mov	r1, r5
 80105e4:	2201      	movs	r2, #1
 80105e6:	4620      	mov	r0, r4
 80105e8:	f002 f9f2 	bl	80129d0 <__lshift>
 80105ec:	4631      	mov	r1, r6
 80105ee:	4605      	mov	r5, r0
 80105f0:	f002 fa5e 	bl	8012ab0 <__mcmp>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	dd66      	ble.n	80106c6 <_strtod_l+0x8de>
 80105f8:	9904      	ldr	r1, [sp, #16]
 80105fa:	4a53      	ldr	r2, [pc, #332]	; (8010748 <_strtod_l+0x960>)
 80105fc:	465b      	mov	r3, fp
 80105fe:	2900      	cmp	r1, #0
 8010600:	f000 8081 	beq.w	8010706 <_strtod_l+0x91e>
 8010604:	ea02 010b 	and.w	r1, r2, fp
 8010608:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801060c:	dc7b      	bgt.n	8010706 <_strtod_l+0x91e>
 801060e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010612:	f77f aea9 	ble.w	8010368 <_strtod_l+0x580>
 8010616:	4b4d      	ldr	r3, [pc, #308]	; (801074c <_strtod_l+0x964>)
 8010618:	4650      	mov	r0, sl
 801061a:	4659      	mov	r1, fp
 801061c:	2200      	movs	r2, #0
 801061e:	f7f0 f813 	bl	8000648 <__aeabi_dmul>
 8010622:	460b      	mov	r3, r1
 8010624:	4303      	orrs	r3, r0
 8010626:	bf08      	it	eq
 8010628:	2322      	moveq	r3, #34	; 0x22
 801062a:	4682      	mov	sl, r0
 801062c:	468b      	mov	fp, r1
 801062e:	bf08      	it	eq
 8010630:	6023      	streq	r3, [r4, #0]
 8010632:	e62b      	b.n	801028c <_strtod_l+0x4a4>
 8010634:	f04f 32ff 	mov.w	r2, #4294967295
 8010638:	fa02 f303 	lsl.w	r3, r2, r3
 801063c:	ea03 0a0a 	and.w	sl, r3, sl
 8010640:	e6e3      	b.n	801040a <_strtod_l+0x622>
 8010642:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010646:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801064a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801064e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010652:	fa01 f308 	lsl.w	r3, r1, r8
 8010656:	9308      	str	r3, [sp, #32]
 8010658:	910d      	str	r1, [sp, #52]	; 0x34
 801065a:	e746      	b.n	80104ea <_strtod_l+0x702>
 801065c:	2300      	movs	r3, #0
 801065e:	9308      	str	r3, [sp, #32]
 8010660:	2301      	movs	r3, #1
 8010662:	930d      	str	r3, [sp, #52]	; 0x34
 8010664:	e741      	b.n	80104ea <_strtod_l+0x702>
 8010666:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010668:	4642      	mov	r2, r8
 801066a:	4620      	mov	r0, r4
 801066c:	f002 f9b0 	bl	80129d0 <__lshift>
 8010670:	9018      	str	r0, [sp, #96]	; 0x60
 8010672:	2800      	cmp	r0, #0
 8010674:	f47f af6b 	bne.w	801054e <_strtod_l+0x766>
 8010678:	e5fe      	b.n	8010278 <_strtod_l+0x490>
 801067a:	465f      	mov	r7, fp
 801067c:	d16e      	bne.n	801075c <_strtod_l+0x974>
 801067e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010684:	b342      	cbz	r2, 80106d8 <_strtod_l+0x8f0>
 8010686:	4a32      	ldr	r2, [pc, #200]	; (8010750 <_strtod_l+0x968>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d128      	bne.n	80106de <_strtod_l+0x8f6>
 801068c:	9b04      	ldr	r3, [sp, #16]
 801068e:	4651      	mov	r1, sl
 8010690:	b1eb      	cbz	r3, 80106ce <_strtod_l+0x8e6>
 8010692:	4b2d      	ldr	r3, [pc, #180]	; (8010748 <_strtod_l+0x960>)
 8010694:	403b      	ands	r3, r7
 8010696:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801069a:	f04f 32ff 	mov.w	r2, #4294967295
 801069e:	d819      	bhi.n	80106d4 <_strtod_l+0x8ec>
 80106a0:	0d1b      	lsrs	r3, r3, #20
 80106a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80106a6:	fa02 f303 	lsl.w	r3, r2, r3
 80106aa:	4299      	cmp	r1, r3
 80106ac:	d117      	bne.n	80106de <_strtod_l+0x8f6>
 80106ae:	4b29      	ldr	r3, [pc, #164]	; (8010754 <_strtod_l+0x96c>)
 80106b0:	429f      	cmp	r7, r3
 80106b2:	d102      	bne.n	80106ba <_strtod_l+0x8d2>
 80106b4:	3101      	adds	r1, #1
 80106b6:	f43f addf 	beq.w	8010278 <_strtod_l+0x490>
 80106ba:	4b23      	ldr	r3, [pc, #140]	; (8010748 <_strtod_l+0x960>)
 80106bc:	403b      	ands	r3, r7
 80106be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80106c2:	f04f 0a00 	mov.w	sl, #0
 80106c6:	9b04      	ldr	r3, [sp, #16]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1a4      	bne.n	8010616 <_strtod_l+0x82e>
 80106cc:	e5de      	b.n	801028c <_strtod_l+0x4a4>
 80106ce:	f04f 33ff 	mov.w	r3, #4294967295
 80106d2:	e7ea      	b.n	80106aa <_strtod_l+0x8c2>
 80106d4:	4613      	mov	r3, r2
 80106d6:	e7e8      	b.n	80106aa <_strtod_l+0x8c2>
 80106d8:	ea53 030a 	orrs.w	r3, r3, sl
 80106dc:	d08c      	beq.n	80105f8 <_strtod_l+0x810>
 80106de:	9b08      	ldr	r3, [sp, #32]
 80106e0:	b1db      	cbz	r3, 801071a <_strtod_l+0x932>
 80106e2:	423b      	tst	r3, r7
 80106e4:	d0ef      	beq.n	80106c6 <_strtod_l+0x8de>
 80106e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106e8:	9a04      	ldr	r2, [sp, #16]
 80106ea:	4650      	mov	r0, sl
 80106ec:	4659      	mov	r1, fp
 80106ee:	b1c3      	cbz	r3, 8010722 <_strtod_l+0x93a>
 80106f0:	f7ff fb5e 	bl	800fdb0 <sulp>
 80106f4:	4602      	mov	r2, r0
 80106f6:	460b      	mov	r3, r1
 80106f8:	ec51 0b18 	vmov	r0, r1, d8
 80106fc:	f7ef fdee 	bl	80002dc <__adddf3>
 8010700:	4682      	mov	sl, r0
 8010702:	468b      	mov	fp, r1
 8010704:	e7df      	b.n	80106c6 <_strtod_l+0x8de>
 8010706:	4013      	ands	r3, r2
 8010708:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801070c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010710:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010714:	f04f 3aff 	mov.w	sl, #4294967295
 8010718:	e7d5      	b.n	80106c6 <_strtod_l+0x8de>
 801071a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801071c:	ea13 0f0a 	tst.w	r3, sl
 8010720:	e7e0      	b.n	80106e4 <_strtod_l+0x8fc>
 8010722:	f7ff fb45 	bl	800fdb0 <sulp>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	ec51 0b18 	vmov	r0, r1, d8
 801072e:	f7ef fdd3 	bl	80002d8 <__aeabi_dsub>
 8010732:	2200      	movs	r2, #0
 8010734:	2300      	movs	r3, #0
 8010736:	4682      	mov	sl, r0
 8010738:	468b      	mov	fp, r1
 801073a:	f7f0 f9ed 	bl	8000b18 <__aeabi_dcmpeq>
 801073e:	2800      	cmp	r0, #0
 8010740:	d0c1      	beq.n	80106c6 <_strtod_l+0x8de>
 8010742:	e611      	b.n	8010368 <_strtod_l+0x580>
 8010744:	fffffc02 	.word	0xfffffc02
 8010748:	7ff00000 	.word	0x7ff00000
 801074c:	39500000 	.word	0x39500000
 8010750:	000fffff 	.word	0x000fffff
 8010754:	7fefffff 	.word	0x7fefffff
 8010758:	0802a218 	.word	0x0802a218
 801075c:	4631      	mov	r1, r6
 801075e:	4628      	mov	r0, r5
 8010760:	f002 fb24 	bl	8012dac <__ratio>
 8010764:	ec59 8b10 	vmov	r8, r9, d0
 8010768:	ee10 0a10 	vmov	r0, s0
 801076c:	2200      	movs	r2, #0
 801076e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010772:	4649      	mov	r1, r9
 8010774:	f7f0 f9e4 	bl	8000b40 <__aeabi_dcmple>
 8010778:	2800      	cmp	r0, #0
 801077a:	d07a      	beq.n	8010872 <_strtod_l+0xa8a>
 801077c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d04a      	beq.n	8010818 <_strtod_l+0xa30>
 8010782:	4b95      	ldr	r3, [pc, #596]	; (80109d8 <_strtod_l+0xbf0>)
 8010784:	2200      	movs	r2, #0
 8010786:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801078a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80109d8 <_strtod_l+0xbf0>
 801078e:	f04f 0800 	mov.w	r8, #0
 8010792:	4b92      	ldr	r3, [pc, #584]	; (80109dc <_strtod_l+0xbf4>)
 8010794:	403b      	ands	r3, r7
 8010796:	930d      	str	r3, [sp, #52]	; 0x34
 8010798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801079a:	4b91      	ldr	r3, [pc, #580]	; (80109e0 <_strtod_l+0xbf8>)
 801079c:	429a      	cmp	r2, r3
 801079e:	f040 80b0 	bne.w	8010902 <_strtod_l+0xb1a>
 80107a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80107a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80107aa:	ec4b ab10 	vmov	d0, sl, fp
 80107ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80107b2:	f002 fa23 	bl	8012bfc <__ulp>
 80107b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80107ba:	ec53 2b10 	vmov	r2, r3, d0
 80107be:	f7ef ff43 	bl	8000648 <__aeabi_dmul>
 80107c2:	4652      	mov	r2, sl
 80107c4:	465b      	mov	r3, fp
 80107c6:	f7ef fd89 	bl	80002dc <__adddf3>
 80107ca:	460b      	mov	r3, r1
 80107cc:	4983      	ldr	r1, [pc, #524]	; (80109dc <_strtod_l+0xbf4>)
 80107ce:	4a85      	ldr	r2, [pc, #532]	; (80109e4 <_strtod_l+0xbfc>)
 80107d0:	4019      	ands	r1, r3
 80107d2:	4291      	cmp	r1, r2
 80107d4:	4682      	mov	sl, r0
 80107d6:	d960      	bls.n	801089a <_strtod_l+0xab2>
 80107d8:	ee18 3a90 	vmov	r3, s17
 80107dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d104      	bne.n	80107ee <_strtod_l+0xa06>
 80107e4:	ee18 3a10 	vmov	r3, s16
 80107e8:	3301      	adds	r3, #1
 80107ea:	f43f ad45 	beq.w	8010278 <_strtod_l+0x490>
 80107ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80109f0 <_strtod_l+0xc08>
 80107f2:	f04f 3aff 	mov.w	sl, #4294967295
 80107f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80107f8:	4620      	mov	r0, r4
 80107fa:	f001 fecd 	bl	8012598 <_Bfree>
 80107fe:	9905      	ldr	r1, [sp, #20]
 8010800:	4620      	mov	r0, r4
 8010802:	f001 fec9 	bl	8012598 <_Bfree>
 8010806:	4631      	mov	r1, r6
 8010808:	4620      	mov	r0, r4
 801080a:	f001 fec5 	bl	8012598 <_Bfree>
 801080e:	4629      	mov	r1, r5
 8010810:	4620      	mov	r0, r4
 8010812:	f001 fec1 	bl	8012598 <_Bfree>
 8010816:	e61a      	b.n	801044e <_strtod_l+0x666>
 8010818:	f1ba 0f00 	cmp.w	sl, #0
 801081c:	d11b      	bne.n	8010856 <_strtod_l+0xa6e>
 801081e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010822:	b9f3      	cbnz	r3, 8010862 <_strtod_l+0xa7a>
 8010824:	4b6c      	ldr	r3, [pc, #432]	; (80109d8 <_strtod_l+0xbf0>)
 8010826:	2200      	movs	r2, #0
 8010828:	4640      	mov	r0, r8
 801082a:	4649      	mov	r1, r9
 801082c:	f7f0 f97e 	bl	8000b2c <__aeabi_dcmplt>
 8010830:	b9d0      	cbnz	r0, 8010868 <_strtod_l+0xa80>
 8010832:	4640      	mov	r0, r8
 8010834:	4649      	mov	r1, r9
 8010836:	4b6c      	ldr	r3, [pc, #432]	; (80109e8 <_strtod_l+0xc00>)
 8010838:	2200      	movs	r2, #0
 801083a:	f7ef ff05 	bl	8000648 <__aeabi_dmul>
 801083e:	4680      	mov	r8, r0
 8010840:	4689      	mov	r9, r1
 8010842:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010846:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801084a:	9315      	str	r3, [sp, #84]	; 0x54
 801084c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010850:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010854:	e79d      	b.n	8010792 <_strtod_l+0x9aa>
 8010856:	f1ba 0f01 	cmp.w	sl, #1
 801085a:	d102      	bne.n	8010862 <_strtod_l+0xa7a>
 801085c:	2f00      	cmp	r7, #0
 801085e:	f43f ad83 	beq.w	8010368 <_strtod_l+0x580>
 8010862:	4b62      	ldr	r3, [pc, #392]	; (80109ec <_strtod_l+0xc04>)
 8010864:	2200      	movs	r2, #0
 8010866:	e78e      	b.n	8010786 <_strtod_l+0x99e>
 8010868:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80109e8 <_strtod_l+0xc00>
 801086c:	f04f 0800 	mov.w	r8, #0
 8010870:	e7e7      	b.n	8010842 <_strtod_l+0xa5a>
 8010872:	4b5d      	ldr	r3, [pc, #372]	; (80109e8 <_strtod_l+0xc00>)
 8010874:	4640      	mov	r0, r8
 8010876:	4649      	mov	r1, r9
 8010878:	2200      	movs	r2, #0
 801087a:	f7ef fee5 	bl	8000648 <__aeabi_dmul>
 801087e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010880:	4680      	mov	r8, r0
 8010882:	4689      	mov	r9, r1
 8010884:	b933      	cbnz	r3, 8010894 <_strtod_l+0xaac>
 8010886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801088a:	900e      	str	r0, [sp, #56]	; 0x38
 801088c:	930f      	str	r3, [sp, #60]	; 0x3c
 801088e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010892:	e7dd      	b.n	8010850 <_strtod_l+0xa68>
 8010894:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010898:	e7f9      	b.n	801088e <_strtod_l+0xaa6>
 801089a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801089e:	9b04      	ldr	r3, [sp, #16]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d1a8      	bne.n	80107f6 <_strtod_l+0xa0e>
 80108a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80108a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108aa:	0d1b      	lsrs	r3, r3, #20
 80108ac:	051b      	lsls	r3, r3, #20
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d1a1      	bne.n	80107f6 <_strtod_l+0xa0e>
 80108b2:	4640      	mov	r0, r8
 80108b4:	4649      	mov	r1, r9
 80108b6:	f7f0 fa77 	bl	8000da8 <__aeabi_d2lz>
 80108ba:	f7ef fe97 	bl	80005ec <__aeabi_l2d>
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	4640      	mov	r0, r8
 80108c4:	4649      	mov	r1, r9
 80108c6:	f7ef fd07 	bl	80002d8 <__aeabi_dsub>
 80108ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108d0:	ea43 030a 	orr.w	r3, r3, sl
 80108d4:	4313      	orrs	r3, r2
 80108d6:	4680      	mov	r8, r0
 80108d8:	4689      	mov	r9, r1
 80108da:	d055      	beq.n	8010988 <_strtod_l+0xba0>
 80108dc:	a336      	add	r3, pc, #216	; (adr r3, 80109b8 <_strtod_l+0xbd0>)
 80108de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e2:	f7f0 f923 	bl	8000b2c <__aeabi_dcmplt>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	f47f acd0 	bne.w	801028c <_strtod_l+0x4a4>
 80108ec:	a334      	add	r3, pc, #208	; (adr r3, 80109c0 <_strtod_l+0xbd8>)
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	4640      	mov	r0, r8
 80108f4:	4649      	mov	r1, r9
 80108f6:	f7f0 f937 	bl	8000b68 <__aeabi_dcmpgt>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	f43f af7b 	beq.w	80107f6 <_strtod_l+0xa0e>
 8010900:	e4c4      	b.n	801028c <_strtod_l+0x4a4>
 8010902:	9b04      	ldr	r3, [sp, #16]
 8010904:	b333      	cbz	r3, 8010954 <_strtod_l+0xb6c>
 8010906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010908:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801090c:	d822      	bhi.n	8010954 <_strtod_l+0xb6c>
 801090e:	a32e      	add	r3, pc, #184	; (adr r3, 80109c8 <_strtod_l+0xbe0>)
 8010910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010914:	4640      	mov	r0, r8
 8010916:	4649      	mov	r1, r9
 8010918:	f7f0 f912 	bl	8000b40 <__aeabi_dcmple>
 801091c:	b1a0      	cbz	r0, 8010948 <_strtod_l+0xb60>
 801091e:	4649      	mov	r1, r9
 8010920:	4640      	mov	r0, r8
 8010922:	f7f0 f969 	bl	8000bf8 <__aeabi_d2uiz>
 8010926:	2801      	cmp	r0, #1
 8010928:	bf38      	it	cc
 801092a:	2001      	movcc	r0, #1
 801092c:	f7ef fe12 	bl	8000554 <__aeabi_ui2d>
 8010930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010932:	4680      	mov	r8, r0
 8010934:	4689      	mov	r9, r1
 8010936:	bb23      	cbnz	r3, 8010982 <_strtod_l+0xb9a>
 8010938:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801093c:	9010      	str	r0, [sp, #64]	; 0x40
 801093e:	9311      	str	r3, [sp, #68]	; 0x44
 8010940:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010944:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801094a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801094c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010950:	1a9b      	subs	r3, r3, r2
 8010952:	9309      	str	r3, [sp, #36]	; 0x24
 8010954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010958:	eeb0 0a48 	vmov.f32	s0, s16
 801095c:	eef0 0a68 	vmov.f32	s1, s17
 8010960:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010964:	f002 f94a 	bl	8012bfc <__ulp>
 8010968:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801096c:	ec53 2b10 	vmov	r2, r3, d0
 8010970:	f7ef fe6a 	bl	8000648 <__aeabi_dmul>
 8010974:	ec53 2b18 	vmov	r2, r3, d8
 8010978:	f7ef fcb0 	bl	80002dc <__adddf3>
 801097c:	4682      	mov	sl, r0
 801097e:	468b      	mov	fp, r1
 8010980:	e78d      	b.n	801089e <_strtod_l+0xab6>
 8010982:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010986:	e7db      	b.n	8010940 <_strtod_l+0xb58>
 8010988:	a311      	add	r3, pc, #68	; (adr r3, 80109d0 <_strtod_l+0xbe8>)
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	f7f0 f8cd 	bl	8000b2c <__aeabi_dcmplt>
 8010992:	e7b2      	b.n	80108fa <_strtod_l+0xb12>
 8010994:	2300      	movs	r3, #0
 8010996:	930a      	str	r3, [sp, #40]	; 0x28
 8010998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801099a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	f7ff ba6b 	b.w	800fe78 <_strtod_l+0x90>
 80109a2:	2a65      	cmp	r2, #101	; 0x65
 80109a4:	f43f ab5f 	beq.w	8010066 <_strtod_l+0x27e>
 80109a8:	2a45      	cmp	r2, #69	; 0x45
 80109aa:	f43f ab5c 	beq.w	8010066 <_strtod_l+0x27e>
 80109ae:	2301      	movs	r3, #1
 80109b0:	f7ff bb94 	b.w	80100dc <_strtod_l+0x2f4>
 80109b4:	f3af 8000 	nop.w
 80109b8:	94a03595 	.word	0x94a03595
 80109bc:	3fdfffff 	.word	0x3fdfffff
 80109c0:	35afe535 	.word	0x35afe535
 80109c4:	3fe00000 	.word	0x3fe00000
 80109c8:	ffc00000 	.word	0xffc00000
 80109cc:	41dfffff 	.word	0x41dfffff
 80109d0:	94a03595 	.word	0x94a03595
 80109d4:	3fcfffff 	.word	0x3fcfffff
 80109d8:	3ff00000 	.word	0x3ff00000
 80109dc:	7ff00000 	.word	0x7ff00000
 80109e0:	7fe00000 	.word	0x7fe00000
 80109e4:	7c9fffff 	.word	0x7c9fffff
 80109e8:	3fe00000 	.word	0x3fe00000
 80109ec:	bff00000 	.word	0xbff00000
 80109f0:	7fefffff 	.word	0x7fefffff

080109f4 <_strtod_r>:
 80109f4:	4b01      	ldr	r3, [pc, #4]	; (80109fc <_strtod_r+0x8>)
 80109f6:	f7ff b9f7 	b.w	800fde8 <_strtod_l>
 80109fa:	bf00      	nop
 80109fc:	20000144 	.word	0x20000144

08010a00 <_strtol_l.constprop.0>:
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a06:	d001      	beq.n	8010a0c <_strtol_l.constprop.0+0xc>
 8010a08:	2b24      	cmp	r3, #36	; 0x24
 8010a0a:	d906      	bls.n	8010a1a <_strtol_l.constprop.0+0x1a>
 8010a0c:	f7fe f90e 	bl	800ec2c <__errno>
 8010a10:	2316      	movs	r3, #22
 8010a12:	6003      	str	r3, [r0, #0]
 8010a14:	2000      	movs	r0, #0
 8010a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b00 <_strtol_l.constprop.0+0x100>
 8010a1e:	460d      	mov	r5, r1
 8010a20:	462e      	mov	r6, r5
 8010a22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a26:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010a2a:	f017 0708 	ands.w	r7, r7, #8
 8010a2e:	d1f7      	bne.n	8010a20 <_strtol_l.constprop.0+0x20>
 8010a30:	2c2d      	cmp	r4, #45	; 0x2d
 8010a32:	d132      	bne.n	8010a9a <_strtol_l.constprop.0+0x9a>
 8010a34:	782c      	ldrb	r4, [r5, #0]
 8010a36:	2701      	movs	r7, #1
 8010a38:	1cb5      	adds	r5, r6, #2
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d05b      	beq.n	8010af6 <_strtol_l.constprop.0+0xf6>
 8010a3e:	2b10      	cmp	r3, #16
 8010a40:	d109      	bne.n	8010a56 <_strtol_l.constprop.0+0x56>
 8010a42:	2c30      	cmp	r4, #48	; 0x30
 8010a44:	d107      	bne.n	8010a56 <_strtol_l.constprop.0+0x56>
 8010a46:	782c      	ldrb	r4, [r5, #0]
 8010a48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010a4c:	2c58      	cmp	r4, #88	; 0x58
 8010a4e:	d14d      	bne.n	8010aec <_strtol_l.constprop.0+0xec>
 8010a50:	786c      	ldrb	r4, [r5, #1]
 8010a52:	2310      	movs	r3, #16
 8010a54:	3502      	adds	r5, #2
 8010a56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a5e:	f04f 0c00 	mov.w	ip, #0
 8010a62:	fbb8 f9f3 	udiv	r9, r8, r3
 8010a66:	4666      	mov	r6, ip
 8010a68:	fb03 8a19 	mls	sl, r3, r9, r8
 8010a6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010a70:	f1be 0f09 	cmp.w	lr, #9
 8010a74:	d816      	bhi.n	8010aa4 <_strtol_l.constprop.0+0xa4>
 8010a76:	4674      	mov	r4, lr
 8010a78:	42a3      	cmp	r3, r4
 8010a7a:	dd24      	ble.n	8010ac6 <_strtol_l.constprop.0+0xc6>
 8010a7c:	f1bc 0f00 	cmp.w	ip, #0
 8010a80:	db1e      	blt.n	8010ac0 <_strtol_l.constprop.0+0xc0>
 8010a82:	45b1      	cmp	r9, r6
 8010a84:	d31c      	bcc.n	8010ac0 <_strtol_l.constprop.0+0xc0>
 8010a86:	d101      	bne.n	8010a8c <_strtol_l.constprop.0+0x8c>
 8010a88:	45a2      	cmp	sl, r4
 8010a8a:	db19      	blt.n	8010ac0 <_strtol_l.constprop.0+0xc0>
 8010a8c:	fb06 4603 	mla	r6, r6, r3, r4
 8010a90:	f04f 0c01 	mov.w	ip, #1
 8010a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a98:	e7e8      	b.n	8010a6c <_strtol_l.constprop.0+0x6c>
 8010a9a:	2c2b      	cmp	r4, #43	; 0x2b
 8010a9c:	bf04      	itt	eq
 8010a9e:	782c      	ldrbeq	r4, [r5, #0]
 8010aa0:	1cb5      	addeq	r5, r6, #2
 8010aa2:	e7ca      	b.n	8010a3a <_strtol_l.constprop.0+0x3a>
 8010aa4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010aa8:	f1be 0f19 	cmp.w	lr, #25
 8010aac:	d801      	bhi.n	8010ab2 <_strtol_l.constprop.0+0xb2>
 8010aae:	3c37      	subs	r4, #55	; 0x37
 8010ab0:	e7e2      	b.n	8010a78 <_strtol_l.constprop.0+0x78>
 8010ab2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010ab6:	f1be 0f19 	cmp.w	lr, #25
 8010aba:	d804      	bhi.n	8010ac6 <_strtol_l.constprop.0+0xc6>
 8010abc:	3c57      	subs	r4, #87	; 0x57
 8010abe:	e7db      	b.n	8010a78 <_strtol_l.constprop.0+0x78>
 8010ac0:	f04f 3cff 	mov.w	ip, #4294967295
 8010ac4:	e7e6      	b.n	8010a94 <_strtol_l.constprop.0+0x94>
 8010ac6:	f1bc 0f00 	cmp.w	ip, #0
 8010aca:	da05      	bge.n	8010ad8 <_strtol_l.constprop.0+0xd8>
 8010acc:	2322      	movs	r3, #34	; 0x22
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	4646      	mov	r6, r8
 8010ad2:	b942      	cbnz	r2, 8010ae6 <_strtol_l.constprop.0+0xe6>
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	e79e      	b.n	8010a16 <_strtol_l.constprop.0+0x16>
 8010ad8:	b107      	cbz	r7, 8010adc <_strtol_l.constprop.0+0xdc>
 8010ada:	4276      	negs	r6, r6
 8010adc:	2a00      	cmp	r2, #0
 8010ade:	d0f9      	beq.n	8010ad4 <_strtol_l.constprop.0+0xd4>
 8010ae0:	f1bc 0f00 	cmp.w	ip, #0
 8010ae4:	d000      	beq.n	8010ae8 <_strtol_l.constprop.0+0xe8>
 8010ae6:	1e69      	subs	r1, r5, #1
 8010ae8:	6011      	str	r1, [r2, #0]
 8010aea:	e7f3      	b.n	8010ad4 <_strtol_l.constprop.0+0xd4>
 8010aec:	2430      	movs	r4, #48	; 0x30
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1b1      	bne.n	8010a56 <_strtol_l.constprop.0+0x56>
 8010af2:	2308      	movs	r3, #8
 8010af4:	e7af      	b.n	8010a56 <_strtol_l.constprop.0+0x56>
 8010af6:	2c30      	cmp	r4, #48	; 0x30
 8010af8:	d0a5      	beq.n	8010a46 <_strtol_l.constprop.0+0x46>
 8010afa:	230a      	movs	r3, #10
 8010afc:	e7ab      	b.n	8010a56 <_strtol_l.constprop.0+0x56>
 8010afe:	bf00      	nop
 8010b00:	0802a241 	.word	0x0802a241

08010b04 <_strtol_r>:
 8010b04:	f7ff bf7c 	b.w	8010a00 <_strtol_l.constprop.0>

08010b08 <__swbuf_r>:
 8010b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0a:	460e      	mov	r6, r1
 8010b0c:	4614      	mov	r4, r2
 8010b0e:	4605      	mov	r5, r0
 8010b10:	b118      	cbz	r0, 8010b1a <__swbuf_r+0x12>
 8010b12:	6983      	ldr	r3, [r0, #24]
 8010b14:	b90b      	cbnz	r3, 8010b1a <__swbuf_r+0x12>
 8010b16:	f001 f853 	bl	8011bc0 <__sinit>
 8010b1a:	4b21      	ldr	r3, [pc, #132]	; (8010ba0 <__swbuf_r+0x98>)
 8010b1c:	429c      	cmp	r4, r3
 8010b1e:	d12b      	bne.n	8010b78 <__swbuf_r+0x70>
 8010b20:	686c      	ldr	r4, [r5, #4]
 8010b22:	69a3      	ldr	r3, [r4, #24]
 8010b24:	60a3      	str	r3, [r4, #8]
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	071a      	lsls	r2, r3, #28
 8010b2a:	d52f      	bpl.n	8010b8c <__swbuf_r+0x84>
 8010b2c:	6923      	ldr	r3, [r4, #16]
 8010b2e:	b36b      	cbz	r3, 8010b8c <__swbuf_r+0x84>
 8010b30:	6923      	ldr	r3, [r4, #16]
 8010b32:	6820      	ldr	r0, [r4, #0]
 8010b34:	1ac0      	subs	r0, r0, r3
 8010b36:	6963      	ldr	r3, [r4, #20]
 8010b38:	b2f6      	uxtb	r6, r6
 8010b3a:	4283      	cmp	r3, r0
 8010b3c:	4637      	mov	r7, r6
 8010b3e:	dc04      	bgt.n	8010b4a <__swbuf_r+0x42>
 8010b40:	4621      	mov	r1, r4
 8010b42:	4628      	mov	r0, r5
 8010b44:	f000 ffa8 	bl	8011a98 <_fflush_r>
 8010b48:	bb30      	cbnz	r0, 8010b98 <__swbuf_r+0x90>
 8010b4a:	68a3      	ldr	r3, [r4, #8]
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	60a3      	str	r3, [r4, #8]
 8010b50:	6823      	ldr	r3, [r4, #0]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	6022      	str	r2, [r4, #0]
 8010b56:	701e      	strb	r6, [r3, #0]
 8010b58:	6963      	ldr	r3, [r4, #20]
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	4283      	cmp	r3, r0
 8010b5e:	d004      	beq.n	8010b6a <__swbuf_r+0x62>
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	07db      	lsls	r3, r3, #31
 8010b64:	d506      	bpl.n	8010b74 <__swbuf_r+0x6c>
 8010b66:	2e0a      	cmp	r6, #10
 8010b68:	d104      	bne.n	8010b74 <__swbuf_r+0x6c>
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f000 ff93 	bl	8011a98 <_fflush_r>
 8010b72:	b988      	cbnz	r0, 8010b98 <__swbuf_r+0x90>
 8010b74:	4638      	mov	r0, r7
 8010b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b78:	4b0a      	ldr	r3, [pc, #40]	; (8010ba4 <__swbuf_r+0x9c>)
 8010b7a:	429c      	cmp	r4, r3
 8010b7c:	d101      	bne.n	8010b82 <__swbuf_r+0x7a>
 8010b7e:	68ac      	ldr	r4, [r5, #8]
 8010b80:	e7cf      	b.n	8010b22 <__swbuf_r+0x1a>
 8010b82:	4b09      	ldr	r3, [pc, #36]	; (8010ba8 <__swbuf_r+0xa0>)
 8010b84:	429c      	cmp	r4, r3
 8010b86:	bf08      	it	eq
 8010b88:	68ec      	ldreq	r4, [r5, #12]
 8010b8a:	e7ca      	b.n	8010b22 <__swbuf_r+0x1a>
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	4628      	mov	r0, r5
 8010b90:	f000 f80c 	bl	8010bac <__swsetup_r>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0cb      	beq.n	8010b30 <__swbuf_r+0x28>
 8010b98:	f04f 37ff 	mov.w	r7, #4294967295
 8010b9c:	e7ea      	b.n	8010b74 <__swbuf_r+0x6c>
 8010b9e:	bf00      	nop
 8010ba0:	0802a414 	.word	0x0802a414
 8010ba4:	0802a434 	.word	0x0802a434
 8010ba8:	0802a3f4 	.word	0x0802a3f4

08010bac <__swsetup_r>:
 8010bac:	4b32      	ldr	r3, [pc, #200]	; (8010c78 <__swsetup_r+0xcc>)
 8010bae:	b570      	push	{r4, r5, r6, lr}
 8010bb0:	681d      	ldr	r5, [r3, #0]
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	b125      	cbz	r5, 8010bc2 <__swsetup_r+0x16>
 8010bb8:	69ab      	ldr	r3, [r5, #24]
 8010bba:	b913      	cbnz	r3, 8010bc2 <__swsetup_r+0x16>
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f000 ffff 	bl	8011bc0 <__sinit>
 8010bc2:	4b2e      	ldr	r3, [pc, #184]	; (8010c7c <__swsetup_r+0xd0>)
 8010bc4:	429c      	cmp	r4, r3
 8010bc6:	d10f      	bne.n	8010be8 <__swsetup_r+0x3c>
 8010bc8:	686c      	ldr	r4, [r5, #4]
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bd0:	0719      	lsls	r1, r3, #28
 8010bd2:	d42c      	bmi.n	8010c2e <__swsetup_r+0x82>
 8010bd4:	06dd      	lsls	r5, r3, #27
 8010bd6:	d411      	bmi.n	8010bfc <__swsetup_r+0x50>
 8010bd8:	2309      	movs	r3, #9
 8010bda:	6033      	str	r3, [r6, #0]
 8010bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010be0:	81a3      	strh	r3, [r4, #12]
 8010be2:	f04f 30ff 	mov.w	r0, #4294967295
 8010be6:	e03e      	b.n	8010c66 <__swsetup_r+0xba>
 8010be8:	4b25      	ldr	r3, [pc, #148]	; (8010c80 <__swsetup_r+0xd4>)
 8010bea:	429c      	cmp	r4, r3
 8010bec:	d101      	bne.n	8010bf2 <__swsetup_r+0x46>
 8010bee:	68ac      	ldr	r4, [r5, #8]
 8010bf0:	e7eb      	b.n	8010bca <__swsetup_r+0x1e>
 8010bf2:	4b24      	ldr	r3, [pc, #144]	; (8010c84 <__swsetup_r+0xd8>)
 8010bf4:	429c      	cmp	r4, r3
 8010bf6:	bf08      	it	eq
 8010bf8:	68ec      	ldreq	r4, [r5, #12]
 8010bfa:	e7e6      	b.n	8010bca <__swsetup_r+0x1e>
 8010bfc:	0758      	lsls	r0, r3, #29
 8010bfe:	d512      	bpl.n	8010c26 <__swsetup_r+0x7a>
 8010c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c02:	b141      	cbz	r1, 8010c16 <__swsetup_r+0x6a>
 8010c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c08:	4299      	cmp	r1, r3
 8010c0a:	d002      	beq.n	8010c12 <__swsetup_r+0x66>
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f002 f95b 	bl	8012ec8 <_free_r>
 8010c12:	2300      	movs	r3, #0
 8010c14:	6363      	str	r3, [r4, #52]	; 0x34
 8010c16:	89a3      	ldrh	r3, [r4, #12]
 8010c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c1c:	81a3      	strh	r3, [r4, #12]
 8010c1e:	2300      	movs	r3, #0
 8010c20:	6063      	str	r3, [r4, #4]
 8010c22:	6923      	ldr	r3, [r4, #16]
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	89a3      	ldrh	r3, [r4, #12]
 8010c28:	f043 0308 	orr.w	r3, r3, #8
 8010c2c:	81a3      	strh	r3, [r4, #12]
 8010c2e:	6923      	ldr	r3, [r4, #16]
 8010c30:	b94b      	cbnz	r3, 8010c46 <__swsetup_r+0x9a>
 8010c32:	89a3      	ldrh	r3, [r4, #12]
 8010c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c3c:	d003      	beq.n	8010c46 <__swsetup_r+0x9a>
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4630      	mov	r0, r6
 8010c42:	f001 fbf5 	bl	8012430 <__smakebuf_r>
 8010c46:	89a0      	ldrh	r0, [r4, #12]
 8010c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c4c:	f010 0301 	ands.w	r3, r0, #1
 8010c50:	d00a      	beq.n	8010c68 <__swsetup_r+0xbc>
 8010c52:	2300      	movs	r3, #0
 8010c54:	60a3      	str	r3, [r4, #8]
 8010c56:	6963      	ldr	r3, [r4, #20]
 8010c58:	425b      	negs	r3, r3
 8010c5a:	61a3      	str	r3, [r4, #24]
 8010c5c:	6923      	ldr	r3, [r4, #16]
 8010c5e:	b943      	cbnz	r3, 8010c72 <__swsetup_r+0xc6>
 8010c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c64:	d1ba      	bne.n	8010bdc <__swsetup_r+0x30>
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	0781      	lsls	r1, r0, #30
 8010c6a:	bf58      	it	pl
 8010c6c:	6963      	ldrpl	r3, [r4, #20]
 8010c6e:	60a3      	str	r3, [r4, #8]
 8010c70:	e7f4      	b.n	8010c5c <__swsetup_r+0xb0>
 8010c72:	2000      	movs	r0, #0
 8010c74:	e7f7      	b.n	8010c66 <__swsetup_r+0xba>
 8010c76:	bf00      	nop
 8010c78:	200000dc 	.word	0x200000dc
 8010c7c:	0802a414 	.word	0x0802a414
 8010c80:	0802a434 	.word	0x0802a434
 8010c84:	0802a3f4 	.word	0x0802a3f4

08010c88 <abort>:
 8010c88:	b508      	push	{r3, lr}
 8010c8a:	2006      	movs	r0, #6
 8010c8c:	f002 fbc8 	bl	8013420 <raise>
 8010c90:	2001      	movs	r0, #1
 8010c92:	f7f2 fd61 	bl	8003758 <_exit>

08010c96 <quorem>:
 8010c96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9a:	6903      	ldr	r3, [r0, #16]
 8010c9c:	690c      	ldr	r4, [r1, #16]
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	4607      	mov	r7, r0
 8010ca2:	f2c0 8081 	blt.w	8010da8 <quorem+0x112>
 8010ca6:	3c01      	subs	r4, #1
 8010ca8:	f101 0814 	add.w	r8, r1, #20
 8010cac:	f100 0514 	add.w	r5, r0, #20
 8010cb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cb4:	9301      	str	r3, [sp, #4]
 8010cb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010cc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010cca:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cce:	d331      	bcc.n	8010d34 <quorem+0x9e>
 8010cd0:	f04f 0e00 	mov.w	lr, #0
 8010cd4:	4640      	mov	r0, r8
 8010cd6:	46ac      	mov	ip, r5
 8010cd8:	46f2      	mov	sl, lr
 8010cda:	f850 2b04 	ldr.w	r2, [r0], #4
 8010cde:	b293      	uxth	r3, r2
 8010ce0:	fb06 e303 	mla	r3, r6, r3, lr
 8010ce4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	ebaa 0303 	sub.w	r3, sl, r3
 8010cee:	f8dc a000 	ldr.w	sl, [ip]
 8010cf2:	0c12      	lsrs	r2, r2, #16
 8010cf4:	fa13 f38a 	uxtah	r3, r3, sl
 8010cf8:	fb06 e202 	mla	r2, r6, r2, lr
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	9b00      	ldr	r3, [sp, #0]
 8010d00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d04:	b292      	uxth	r2, r2
 8010d06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010d0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010d12:	4581      	cmp	r9, r0
 8010d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d18:	f84c 3b04 	str.w	r3, [ip], #4
 8010d1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010d20:	d2db      	bcs.n	8010cda <quorem+0x44>
 8010d22:	f855 300b 	ldr.w	r3, [r5, fp]
 8010d26:	b92b      	cbnz	r3, 8010d34 <quorem+0x9e>
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	3b04      	subs	r3, #4
 8010d2c:	429d      	cmp	r5, r3
 8010d2e:	461a      	mov	r2, r3
 8010d30:	d32e      	bcc.n	8010d90 <quorem+0xfa>
 8010d32:	613c      	str	r4, [r7, #16]
 8010d34:	4638      	mov	r0, r7
 8010d36:	f001 febb 	bl	8012ab0 <__mcmp>
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	db24      	blt.n	8010d88 <quorem+0xf2>
 8010d3e:	3601      	adds	r6, #1
 8010d40:	4628      	mov	r0, r5
 8010d42:	f04f 0c00 	mov.w	ip, #0
 8010d46:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d4a:	f8d0 e000 	ldr.w	lr, [r0]
 8010d4e:	b293      	uxth	r3, r2
 8010d50:	ebac 0303 	sub.w	r3, ip, r3
 8010d54:	0c12      	lsrs	r2, r2, #16
 8010d56:	fa13 f38e 	uxtah	r3, r3, lr
 8010d5a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010d5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d68:	45c1      	cmp	r9, r8
 8010d6a:	f840 3b04 	str.w	r3, [r0], #4
 8010d6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010d72:	d2e8      	bcs.n	8010d46 <quorem+0xb0>
 8010d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d7c:	b922      	cbnz	r2, 8010d88 <quorem+0xf2>
 8010d7e:	3b04      	subs	r3, #4
 8010d80:	429d      	cmp	r5, r3
 8010d82:	461a      	mov	r2, r3
 8010d84:	d30a      	bcc.n	8010d9c <quorem+0x106>
 8010d86:	613c      	str	r4, [r7, #16]
 8010d88:	4630      	mov	r0, r6
 8010d8a:	b003      	add	sp, #12
 8010d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d90:	6812      	ldr	r2, [r2, #0]
 8010d92:	3b04      	subs	r3, #4
 8010d94:	2a00      	cmp	r2, #0
 8010d96:	d1cc      	bne.n	8010d32 <quorem+0x9c>
 8010d98:	3c01      	subs	r4, #1
 8010d9a:	e7c7      	b.n	8010d2c <quorem+0x96>
 8010d9c:	6812      	ldr	r2, [r2, #0]
 8010d9e:	3b04      	subs	r3, #4
 8010da0:	2a00      	cmp	r2, #0
 8010da2:	d1f0      	bne.n	8010d86 <quorem+0xf0>
 8010da4:	3c01      	subs	r4, #1
 8010da6:	e7eb      	b.n	8010d80 <quorem+0xea>
 8010da8:	2000      	movs	r0, #0
 8010daa:	e7ee      	b.n	8010d8a <quorem+0xf4>
 8010dac:	0000      	movs	r0, r0
	...

08010db0 <_dtoa_r>:
 8010db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	ed2d 8b04 	vpush	{d8-d9}
 8010db8:	ec57 6b10 	vmov	r6, r7, d0
 8010dbc:	b093      	sub	sp, #76	; 0x4c
 8010dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010dc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010dc4:	9106      	str	r1, [sp, #24]
 8010dc6:	ee10 aa10 	vmov	sl, s0
 8010dca:	4604      	mov	r4, r0
 8010dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8010dce:	930c      	str	r3, [sp, #48]	; 0x30
 8010dd0:	46bb      	mov	fp, r7
 8010dd2:	b975      	cbnz	r5, 8010df2 <_dtoa_r+0x42>
 8010dd4:	2010      	movs	r0, #16
 8010dd6:	f001 fb6b 	bl	80124b0 <malloc>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	6260      	str	r0, [r4, #36]	; 0x24
 8010dde:	b920      	cbnz	r0, 8010dea <_dtoa_r+0x3a>
 8010de0:	4ba7      	ldr	r3, [pc, #668]	; (8011080 <_dtoa_r+0x2d0>)
 8010de2:	21ea      	movs	r1, #234	; 0xea
 8010de4:	48a7      	ldr	r0, [pc, #668]	; (8011084 <_dtoa_r+0x2d4>)
 8010de6:	f7fd ff03 	bl	800ebf0 <__assert_func>
 8010dea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010dee:	6005      	str	r5, [r0, #0]
 8010df0:	60c5      	str	r5, [r0, #12]
 8010df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010df4:	6819      	ldr	r1, [r3, #0]
 8010df6:	b151      	cbz	r1, 8010e0e <_dtoa_r+0x5e>
 8010df8:	685a      	ldr	r2, [r3, #4]
 8010dfa:	604a      	str	r2, [r1, #4]
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	4093      	lsls	r3, r2
 8010e00:	608b      	str	r3, [r1, #8]
 8010e02:	4620      	mov	r0, r4
 8010e04:	f001 fbc8 	bl	8012598 <_Bfree>
 8010e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	1e3b      	subs	r3, r7, #0
 8010e10:	bfaa      	itet	ge
 8010e12:	2300      	movge	r3, #0
 8010e14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010e18:	f8c8 3000 	strge.w	r3, [r8]
 8010e1c:	4b9a      	ldr	r3, [pc, #616]	; (8011088 <_dtoa_r+0x2d8>)
 8010e1e:	bfbc      	itt	lt
 8010e20:	2201      	movlt	r2, #1
 8010e22:	f8c8 2000 	strlt.w	r2, [r8]
 8010e26:	ea33 030b 	bics.w	r3, r3, fp
 8010e2a:	d11b      	bne.n	8010e64 <_dtoa_r+0xb4>
 8010e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010e32:	6013      	str	r3, [r2, #0]
 8010e34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e38:	4333      	orrs	r3, r6
 8010e3a:	f000 8592 	beq.w	8011962 <_dtoa_r+0xbb2>
 8010e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e40:	b963      	cbnz	r3, 8010e5c <_dtoa_r+0xac>
 8010e42:	4b92      	ldr	r3, [pc, #584]	; (801108c <_dtoa_r+0x2dc>)
 8010e44:	e022      	b.n	8010e8c <_dtoa_r+0xdc>
 8010e46:	4b92      	ldr	r3, [pc, #584]	; (8011090 <_dtoa_r+0x2e0>)
 8010e48:	9301      	str	r3, [sp, #4]
 8010e4a:	3308      	adds	r3, #8
 8010e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	9801      	ldr	r0, [sp, #4]
 8010e52:	b013      	add	sp, #76	; 0x4c
 8010e54:	ecbd 8b04 	vpop	{d8-d9}
 8010e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e5c:	4b8b      	ldr	r3, [pc, #556]	; (801108c <_dtoa_r+0x2dc>)
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	3303      	adds	r3, #3
 8010e62:	e7f3      	b.n	8010e4c <_dtoa_r+0x9c>
 8010e64:	2200      	movs	r2, #0
 8010e66:	2300      	movs	r3, #0
 8010e68:	4650      	mov	r0, sl
 8010e6a:	4659      	mov	r1, fp
 8010e6c:	f7ef fe54 	bl	8000b18 <__aeabi_dcmpeq>
 8010e70:	ec4b ab19 	vmov	d9, sl, fp
 8010e74:	4680      	mov	r8, r0
 8010e76:	b158      	cbz	r0, 8010e90 <_dtoa_r+0xe0>
 8010e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	6013      	str	r3, [r2, #0]
 8010e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 856b 	beq.w	801195c <_dtoa_r+0xbac>
 8010e86:	4883      	ldr	r0, [pc, #524]	; (8011094 <_dtoa_r+0x2e4>)
 8010e88:	6018      	str	r0, [r3, #0]
 8010e8a:	1e43      	subs	r3, r0, #1
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	e7df      	b.n	8010e50 <_dtoa_r+0xa0>
 8010e90:	ec4b ab10 	vmov	d0, sl, fp
 8010e94:	aa10      	add	r2, sp, #64	; 0x40
 8010e96:	a911      	add	r1, sp, #68	; 0x44
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f001 ff2b 	bl	8012cf4 <__d2b>
 8010e9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010ea2:	ee08 0a10 	vmov	s16, r0
 8010ea6:	2d00      	cmp	r5, #0
 8010ea8:	f000 8084 	beq.w	8010fb4 <_dtoa_r+0x204>
 8010eac:	ee19 3a90 	vmov	r3, s19
 8010eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010eb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010eb8:	4656      	mov	r6, sl
 8010eba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010ec6:	4b74      	ldr	r3, [pc, #464]	; (8011098 <_dtoa_r+0x2e8>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f7ef fa03 	bl	80002d8 <__aeabi_dsub>
 8010ed2:	a365      	add	r3, pc, #404	; (adr r3, 8011068 <_dtoa_r+0x2b8>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	f7ef fbb6 	bl	8000648 <__aeabi_dmul>
 8010edc:	a364      	add	r3, pc, #400	; (adr r3, 8011070 <_dtoa_r+0x2c0>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	f7ef f9fb 	bl	80002dc <__adddf3>
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	4628      	mov	r0, r5
 8010eea:	460f      	mov	r7, r1
 8010eec:	f7ef fb42 	bl	8000574 <__aeabi_i2d>
 8010ef0:	a361      	add	r3, pc, #388	; (adr r3, 8011078 <_dtoa_r+0x2c8>)
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	f7ef fba7 	bl	8000648 <__aeabi_dmul>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4630      	mov	r0, r6
 8010f00:	4639      	mov	r1, r7
 8010f02:	f7ef f9eb 	bl	80002dc <__adddf3>
 8010f06:	4606      	mov	r6, r0
 8010f08:	460f      	mov	r7, r1
 8010f0a:	f7ef fe4d 	bl	8000ba8 <__aeabi_d2iz>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	9000      	str	r0, [sp, #0]
 8010f12:	2300      	movs	r3, #0
 8010f14:	4630      	mov	r0, r6
 8010f16:	4639      	mov	r1, r7
 8010f18:	f7ef fe08 	bl	8000b2c <__aeabi_dcmplt>
 8010f1c:	b150      	cbz	r0, 8010f34 <_dtoa_r+0x184>
 8010f1e:	9800      	ldr	r0, [sp, #0]
 8010f20:	f7ef fb28 	bl	8000574 <__aeabi_i2d>
 8010f24:	4632      	mov	r2, r6
 8010f26:	463b      	mov	r3, r7
 8010f28:	f7ef fdf6 	bl	8000b18 <__aeabi_dcmpeq>
 8010f2c:	b910      	cbnz	r0, 8010f34 <_dtoa_r+0x184>
 8010f2e:	9b00      	ldr	r3, [sp, #0]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	9b00      	ldr	r3, [sp, #0]
 8010f36:	2b16      	cmp	r3, #22
 8010f38:	d85a      	bhi.n	8010ff0 <_dtoa_r+0x240>
 8010f3a:	9a00      	ldr	r2, [sp, #0]
 8010f3c:	4b57      	ldr	r3, [pc, #348]	; (801109c <_dtoa_r+0x2ec>)
 8010f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f46:	ec51 0b19 	vmov	r0, r1, d9
 8010f4a:	f7ef fdef 	bl	8000b2c <__aeabi_dcmplt>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d050      	beq.n	8010ff4 <_dtoa_r+0x244>
 8010f52:	9b00      	ldr	r3, [sp, #0]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f5e:	1b5d      	subs	r5, r3, r5
 8010f60:	1e6b      	subs	r3, r5, #1
 8010f62:	9305      	str	r3, [sp, #20]
 8010f64:	bf45      	ittet	mi
 8010f66:	f1c5 0301 	rsbmi	r3, r5, #1
 8010f6a:	9304      	strmi	r3, [sp, #16]
 8010f6c:	2300      	movpl	r3, #0
 8010f6e:	2300      	movmi	r3, #0
 8010f70:	bf4c      	ite	mi
 8010f72:	9305      	strmi	r3, [sp, #20]
 8010f74:	9304      	strpl	r3, [sp, #16]
 8010f76:	9b00      	ldr	r3, [sp, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	db3d      	blt.n	8010ff8 <_dtoa_r+0x248>
 8010f7c:	9b05      	ldr	r3, [sp, #20]
 8010f7e:	9a00      	ldr	r2, [sp, #0]
 8010f80:	920a      	str	r2, [sp, #40]	; 0x28
 8010f82:	4413      	add	r3, r2
 8010f84:	9305      	str	r3, [sp, #20]
 8010f86:	2300      	movs	r3, #0
 8010f88:	9307      	str	r3, [sp, #28]
 8010f8a:	9b06      	ldr	r3, [sp, #24]
 8010f8c:	2b09      	cmp	r3, #9
 8010f8e:	f200 8089 	bhi.w	80110a4 <_dtoa_r+0x2f4>
 8010f92:	2b05      	cmp	r3, #5
 8010f94:	bfc4      	itt	gt
 8010f96:	3b04      	subgt	r3, #4
 8010f98:	9306      	strgt	r3, [sp, #24]
 8010f9a:	9b06      	ldr	r3, [sp, #24]
 8010f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8010fa0:	bfcc      	ite	gt
 8010fa2:	2500      	movgt	r5, #0
 8010fa4:	2501      	movle	r5, #1
 8010fa6:	2b03      	cmp	r3, #3
 8010fa8:	f200 8087 	bhi.w	80110ba <_dtoa_r+0x30a>
 8010fac:	e8df f003 	tbb	[pc, r3]
 8010fb0:	59383a2d 	.word	0x59383a2d
 8010fb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010fb8:	441d      	add	r5, r3
 8010fba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010fbe:	2b20      	cmp	r3, #32
 8010fc0:	bfc1      	itttt	gt
 8010fc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010fc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010fca:	fa0b f303 	lslgt.w	r3, fp, r3
 8010fce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010fd2:	bfda      	itte	le
 8010fd4:	f1c3 0320 	rsble	r3, r3, #32
 8010fd8:	fa06 f003 	lslle.w	r0, r6, r3
 8010fdc:	4318      	orrgt	r0, r3
 8010fde:	f7ef fab9 	bl	8000554 <__aeabi_ui2d>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	4606      	mov	r6, r0
 8010fe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010fea:	3d01      	subs	r5, #1
 8010fec:	930e      	str	r3, [sp, #56]	; 0x38
 8010fee:	e76a      	b.n	8010ec6 <_dtoa_r+0x116>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e7b2      	b.n	8010f5a <_dtoa_r+0x1aa>
 8010ff4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010ff6:	e7b1      	b.n	8010f5c <_dtoa_r+0x1ac>
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	9a00      	ldr	r2, [sp, #0]
 8010ffc:	1a9b      	subs	r3, r3, r2
 8010ffe:	9304      	str	r3, [sp, #16]
 8011000:	4253      	negs	r3, r2
 8011002:	9307      	str	r3, [sp, #28]
 8011004:	2300      	movs	r3, #0
 8011006:	930a      	str	r3, [sp, #40]	; 0x28
 8011008:	e7bf      	b.n	8010f8a <_dtoa_r+0x1da>
 801100a:	2300      	movs	r3, #0
 801100c:	9308      	str	r3, [sp, #32]
 801100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011010:	2b00      	cmp	r3, #0
 8011012:	dc55      	bgt.n	80110c0 <_dtoa_r+0x310>
 8011014:	2301      	movs	r3, #1
 8011016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801101a:	461a      	mov	r2, r3
 801101c:	9209      	str	r2, [sp, #36]	; 0x24
 801101e:	e00c      	b.n	801103a <_dtoa_r+0x28a>
 8011020:	2301      	movs	r3, #1
 8011022:	e7f3      	b.n	801100c <_dtoa_r+0x25c>
 8011024:	2300      	movs	r3, #0
 8011026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011028:	9308      	str	r3, [sp, #32]
 801102a:	9b00      	ldr	r3, [sp, #0]
 801102c:	4413      	add	r3, r2
 801102e:	9302      	str	r3, [sp, #8]
 8011030:	3301      	adds	r3, #1
 8011032:	2b01      	cmp	r3, #1
 8011034:	9303      	str	r3, [sp, #12]
 8011036:	bfb8      	it	lt
 8011038:	2301      	movlt	r3, #1
 801103a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801103c:	2200      	movs	r2, #0
 801103e:	6042      	str	r2, [r0, #4]
 8011040:	2204      	movs	r2, #4
 8011042:	f102 0614 	add.w	r6, r2, #20
 8011046:	429e      	cmp	r6, r3
 8011048:	6841      	ldr	r1, [r0, #4]
 801104a:	d93d      	bls.n	80110c8 <_dtoa_r+0x318>
 801104c:	4620      	mov	r0, r4
 801104e:	f001 fa63 	bl	8012518 <_Balloc>
 8011052:	9001      	str	r0, [sp, #4]
 8011054:	2800      	cmp	r0, #0
 8011056:	d13b      	bne.n	80110d0 <_dtoa_r+0x320>
 8011058:	4b11      	ldr	r3, [pc, #68]	; (80110a0 <_dtoa_r+0x2f0>)
 801105a:	4602      	mov	r2, r0
 801105c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011060:	e6c0      	b.n	8010de4 <_dtoa_r+0x34>
 8011062:	2301      	movs	r3, #1
 8011064:	e7df      	b.n	8011026 <_dtoa_r+0x276>
 8011066:	bf00      	nop
 8011068:	636f4361 	.word	0x636f4361
 801106c:	3fd287a7 	.word	0x3fd287a7
 8011070:	8b60c8b3 	.word	0x8b60c8b3
 8011074:	3fc68a28 	.word	0x3fc68a28
 8011078:	509f79fb 	.word	0x509f79fb
 801107c:	3fd34413 	.word	0x3fd34413
 8011080:	0802a34e 	.word	0x0802a34e
 8011084:	0802a365 	.word	0x0802a365
 8011088:	7ff00000 	.word	0x7ff00000
 801108c:	0802a34a 	.word	0x0802a34a
 8011090:	0802a341 	.word	0x0802a341
 8011094:	0802a1c6 	.word	0x0802a1c6
 8011098:	3ff80000 	.word	0x3ff80000
 801109c:	0802a598 	.word	0x0802a598
 80110a0:	0802a3e3 	.word	0x0802a3e3
 80110a4:	2501      	movs	r5, #1
 80110a6:	2300      	movs	r3, #0
 80110a8:	9306      	str	r3, [sp, #24]
 80110aa:	9508      	str	r5, [sp, #32]
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295
 80110b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80110b4:	2200      	movs	r2, #0
 80110b6:	2312      	movs	r3, #18
 80110b8:	e7b0      	b.n	801101c <_dtoa_r+0x26c>
 80110ba:	2301      	movs	r3, #1
 80110bc:	9308      	str	r3, [sp, #32]
 80110be:	e7f5      	b.n	80110ac <_dtoa_r+0x2fc>
 80110c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80110c6:	e7b8      	b.n	801103a <_dtoa_r+0x28a>
 80110c8:	3101      	adds	r1, #1
 80110ca:	6041      	str	r1, [r0, #4]
 80110cc:	0052      	lsls	r2, r2, #1
 80110ce:	e7b8      	b.n	8011042 <_dtoa_r+0x292>
 80110d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110d2:	9a01      	ldr	r2, [sp, #4]
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	9b03      	ldr	r3, [sp, #12]
 80110d8:	2b0e      	cmp	r3, #14
 80110da:	f200 809d 	bhi.w	8011218 <_dtoa_r+0x468>
 80110de:	2d00      	cmp	r5, #0
 80110e0:	f000 809a 	beq.w	8011218 <_dtoa_r+0x468>
 80110e4:	9b00      	ldr	r3, [sp, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	dd32      	ble.n	8011150 <_dtoa_r+0x3a0>
 80110ea:	4ab7      	ldr	r2, [pc, #732]	; (80113c8 <_dtoa_r+0x618>)
 80110ec:	f003 030f 	and.w	r3, r3, #15
 80110f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80110f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110f8:	9b00      	ldr	r3, [sp, #0]
 80110fa:	05d8      	lsls	r0, r3, #23
 80110fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011100:	d516      	bpl.n	8011130 <_dtoa_r+0x380>
 8011102:	4bb2      	ldr	r3, [pc, #712]	; (80113cc <_dtoa_r+0x61c>)
 8011104:	ec51 0b19 	vmov	r0, r1, d9
 8011108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801110c:	f7ef fbc6 	bl	800089c <__aeabi_ddiv>
 8011110:	f007 070f 	and.w	r7, r7, #15
 8011114:	4682      	mov	sl, r0
 8011116:	468b      	mov	fp, r1
 8011118:	2503      	movs	r5, #3
 801111a:	4eac      	ldr	r6, [pc, #688]	; (80113cc <_dtoa_r+0x61c>)
 801111c:	b957      	cbnz	r7, 8011134 <_dtoa_r+0x384>
 801111e:	4642      	mov	r2, r8
 8011120:	464b      	mov	r3, r9
 8011122:	4650      	mov	r0, sl
 8011124:	4659      	mov	r1, fp
 8011126:	f7ef fbb9 	bl	800089c <__aeabi_ddiv>
 801112a:	4682      	mov	sl, r0
 801112c:	468b      	mov	fp, r1
 801112e:	e028      	b.n	8011182 <_dtoa_r+0x3d2>
 8011130:	2502      	movs	r5, #2
 8011132:	e7f2      	b.n	801111a <_dtoa_r+0x36a>
 8011134:	07f9      	lsls	r1, r7, #31
 8011136:	d508      	bpl.n	801114a <_dtoa_r+0x39a>
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011140:	f7ef fa82 	bl	8000648 <__aeabi_dmul>
 8011144:	3501      	adds	r5, #1
 8011146:	4680      	mov	r8, r0
 8011148:	4689      	mov	r9, r1
 801114a:	107f      	asrs	r7, r7, #1
 801114c:	3608      	adds	r6, #8
 801114e:	e7e5      	b.n	801111c <_dtoa_r+0x36c>
 8011150:	f000 809b 	beq.w	801128a <_dtoa_r+0x4da>
 8011154:	9b00      	ldr	r3, [sp, #0]
 8011156:	4f9d      	ldr	r7, [pc, #628]	; (80113cc <_dtoa_r+0x61c>)
 8011158:	425e      	negs	r6, r3
 801115a:	4b9b      	ldr	r3, [pc, #620]	; (80113c8 <_dtoa_r+0x618>)
 801115c:	f006 020f 	and.w	r2, r6, #15
 8011160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011168:	ec51 0b19 	vmov	r0, r1, d9
 801116c:	f7ef fa6c 	bl	8000648 <__aeabi_dmul>
 8011170:	1136      	asrs	r6, r6, #4
 8011172:	4682      	mov	sl, r0
 8011174:	468b      	mov	fp, r1
 8011176:	2300      	movs	r3, #0
 8011178:	2502      	movs	r5, #2
 801117a:	2e00      	cmp	r6, #0
 801117c:	d17a      	bne.n	8011274 <_dtoa_r+0x4c4>
 801117e:	2b00      	cmp	r3, #0
 8011180:	d1d3      	bne.n	801112a <_dtoa_r+0x37a>
 8011182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 8082 	beq.w	801128e <_dtoa_r+0x4de>
 801118a:	4b91      	ldr	r3, [pc, #580]	; (80113d0 <_dtoa_r+0x620>)
 801118c:	2200      	movs	r2, #0
 801118e:	4650      	mov	r0, sl
 8011190:	4659      	mov	r1, fp
 8011192:	f7ef fccb 	bl	8000b2c <__aeabi_dcmplt>
 8011196:	2800      	cmp	r0, #0
 8011198:	d079      	beq.n	801128e <_dtoa_r+0x4de>
 801119a:	9b03      	ldr	r3, [sp, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d076      	beq.n	801128e <_dtoa_r+0x4de>
 80111a0:	9b02      	ldr	r3, [sp, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	dd36      	ble.n	8011214 <_dtoa_r+0x464>
 80111a6:	9b00      	ldr	r3, [sp, #0]
 80111a8:	4650      	mov	r0, sl
 80111aa:	4659      	mov	r1, fp
 80111ac:	1e5f      	subs	r7, r3, #1
 80111ae:	2200      	movs	r2, #0
 80111b0:	4b88      	ldr	r3, [pc, #544]	; (80113d4 <_dtoa_r+0x624>)
 80111b2:	f7ef fa49 	bl	8000648 <__aeabi_dmul>
 80111b6:	9e02      	ldr	r6, [sp, #8]
 80111b8:	4682      	mov	sl, r0
 80111ba:	468b      	mov	fp, r1
 80111bc:	3501      	adds	r5, #1
 80111be:	4628      	mov	r0, r5
 80111c0:	f7ef f9d8 	bl	8000574 <__aeabi_i2d>
 80111c4:	4652      	mov	r2, sl
 80111c6:	465b      	mov	r3, fp
 80111c8:	f7ef fa3e 	bl	8000648 <__aeabi_dmul>
 80111cc:	4b82      	ldr	r3, [pc, #520]	; (80113d8 <_dtoa_r+0x628>)
 80111ce:	2200      	movs	r2, #0
 80111d0:	f7ef f884 	bl	80002dc <__adddf3>
 80111d4:	46d0      	mov	r8, sl
 80111d6:	46d9      	mov	r9, fp
 80111d8:	4682      	mov	sl, r0
 80111da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80111de:	2e00      	cmp	r6, #0
 80111e0:	d158      	bne.n	8011294 <_dtoa_r+0x4e4>
 80111e2:	4b7e      	ldr	r3, [pc, #504]	; (80113dc <_dtoa_r+0x62c>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	4640      	mov	r0, r8
 80111e8:	4649      	mov	r1, r9
 80111ea:	f7ef f875 	bl	80002d8 <__aeabi_dsub>
 80111ee:	4652      	mov	r2, sl
 80111f0:	465b      	mov	r3, fp
 80111f2:	4680      	mov	r8, r0
 80111f4:	4689      	mov	r9, r1
 80111f6:	f7ef fcb7 	bl	8000b68 <__aeabi_dcmpgt>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f040 8295 	bne.w	801172a <_dtoa_r+0x97a>
 8011200:	4652      	mov	r2, sl
 8011202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011206:	4640      	mov	r0, r8
 8011208:	4649      	mov	r1, r9
 801120a:	f7ef fc8f 	bl	8000b2c <__aeabi_dcmplt>
 801120e:	2800      	cmp	r0, #0
 8011210:	f040 8289 	bne.w	8011726 <_dtoa_r+0x976>
 8011214:	ec5b ab19 	vmov	sl, fp, d9
 8011218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801121a:	2b00      	cmp	r3, #0
 801121c:	f2c0 8148 	blt.w	80114b0 <_dtoa_r+0x700>
 8011220:	9a00      	ldr	r2, [sp, #0]
 8011222:	2a0e      	cmp	r2, #14
 8011224:	f300 8144 	bgt.w	80114b0 <_dtoa_r+0x700>
 8011228:	4b67      	ldr	r3, [pc, #412]	; (80113c8 <_dtoa_r+0x618>)
 801122a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801122e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011234:	2b00      	cmp	r3, #0
 8011236:	f280 80d5 	bge.w	80113e4 <_dtoa_r+0x634>
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	f300 80d1 	bgt.w	80113e4 <_dtoa_r+0x634>
 8011242:	f040 826f 	bne.w	8011724 <_dtoa_r+0x974>
 8011246:	4b65      	ldr	r3, [pc, #404]	; (80113dc <_dtoa_r+0x62c>)
 8011248:	2200      	movs	r2, #0
 801124a:	4640      	mov	r0, r8
 801124c:	4649      	mov	r1, r9
 801124e:	f7ef f9fb 	bl	8000648 <__aeabi_dmul>
 8011252:	4652      	mov	r2, sl
 8011254:	465b      	mov	r3, fp
 8011256:	f7ef fc7d 	bl	8000b54 <__aeabi_dcmpge>
 801125a:	9e03      	ldr	r6, [sp, #12]
 801125c:	4637      	mov	r7, r6
 801125e:	2800      	cmp	r0, #0
 8011260:	f040 8245 	bne.w	80116ee <_dtoa_r+0x93e>
 8011264:	9d01      	ldr	r5, [sp, #4]
 8011266:	2331      	movs	r3, #49	; 0x31
 8011268:	f805 3b01 	strb.w	r3, [r5], #1
 801126c:	9b00      	ldr	r3, [sp, #0]
 801126e:	3301      	adds	r3, #1
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	e240      	b.n	80116f6 <_dtoa_r+0x946>
 8011274:	07f2      	lsls	r2, r6, #31
 8011276:	d505      	bpl.n	8011284 <_dtoa_r+0x4d4>
 8011278:	e9d7 2300 	ldrd	r2, r3, [r7]
 801127c:	f7ef f9e4 	bl	8000648 <__aeabi_dmul>
 8011280:	3501      	adds	r5, #1
 8011282:	2301      	movs	r3, #1
 8011284:	1076      	asrs	r6, r6, #1
 8011286:	3708      	adds	r7, #8
 8011288:	e777      	b.n	801117a <_dtoa_r+0x3ca>
 801128a:	2502      	movs	r5, #2
 801128c:	e779      	b.n	8011182 <_dtoa_r+0x3d2>
 801128e:	9f00      	ldr	r7, [sp, #0]
 8011290:	9e03      	ldr	r6, [sp, #12]
 8011292:	e794      	b.n	80111be <_dtoa_r+0x40e>
 8011294:	9901      	ldr	r1, [sp, #4]
 8011296:	4b4c      	ldr	r3, [pc, #304]	; (80113c8 <_dtoa_r+0x618>)
 8011298:	4431      	add	r1, r6
 801129a:	910d      	str	r1, [sp, #52]	; 0x34
 801129c:	9908      	ldr	r1, [sp, #32]
 801129e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80112a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112a6:	2900      	cmp	r1, #0
 80112a8:	d043      	beq.n	8011332 <_dtoa_r+0x582>
 80112aa:	494d      	ldr	r1, [pc, #308]	; (80113e0 <_dtoa_r+0x630>)
 80112ac:	2000      	movs	r0, #0
 80112ae:	f7ef faf5 	bl	800089c <__aeabi_ddiv>
 80112b2:	4652      	mov	r2, sl
 80112b4:	465b      	mov	r3, fp
 80112b6:	f7ef f80f 	bl	80002d8 <__aeabi_dsub>
 80112ba:	9d01      	ldr	r5, [sp, #4]
 80112bc:	4682      	mov	sl, r0
 80112be:	468b      	mov	fp, r1
 80112c0:	4649      	mov	r1, r9
 80112c2:	4640      	mov	r0, r8
 80112c4:	f7ef fc70 	bl	8000ba8 <__aeabi_d2iz>
 80112c8:	4606      	mov	r6, r0
 80112ca:	f7ef f953 	bl	8000574 <__aeabi_i2d>
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4640      	mov	r0, r8
 80112d4:	4649      	mov	r1, r9
 80112d6:	f7ee ffff 	bl	80002d8 <__aeabi_dsub>
 80112da:	3630      	adds	r6, #48	; 0x30
 80112dc:	f805 6b01 	strb.w	r6, [r5], #1
 80112e0:	4652      	mov	r2, sl
 80112e2:	465b      	mov	r3, fp
 80112e4:	4680      	mov	r8, r0
 80112e6:	4689      	mov	r9, r1
 80112e8:	f7ef fc20 	bl	8000b2c <__aeabi_dcmplt>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d163      	bne.n	80113b8 <_dtoa_r+0x608>
 80112f0:	4642      	mov	r2, r8
 80112f2:	464b      	mov	r3, r9
 80112f4:	4936      	ldr	r1, [pc, #216]	; (80113d0 <_dtoa_r+0x620>)
 80112f6:	2000      	movs	r0, #0
 80112f8:	f7ee ffee 	bl	80002d8 <__aeabi_dsub>
 80112fc:	4652      	mov	r2, sl
 80112fe:	465b      	mov	r3, fp
 8011300:	f7ef fc14 	bl	8000b2c <__aeabi_dcmplt>
 8011304:	2800      	cmp	r0, #0
 8011306:	f040 80b5 	bne.w	8011474 <_dtoa_r+0x6c4>
 801130a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801130c:	429d      	cmp	r5, r3
 801130e:	d081      	beq.n	8011214 <_dtoa_r+0x464>
 8011310:	4b30      	ldr	r3, [pc, #192]	; (80113d4 <_dtoa_r+0x624>)
 8011312:	2200      	movs	r2, #0
 8011314:	4650      	mov	r0, sl
 8011316:	4659      	mov	r1, fp
 8011318:	f7ef f996 	bl	8000648 <__aeabi_dmul>
 801131c:	4b2d      	ldr	r3, [pc, #180]	; (80113d4 <_dtoa_r+0x624>)
 801131e:	4682      	mov	sl, r0
 8011320:	468b      	mov	fp, r1
 8011322:	4640      	mov	r0, r8
 8011324:	4649      	mov	r1, r9
 8011326:	2200      	movs	r2, #0
 8011328:	f7ef f98e 	bl	8000648 <__aeabi_dmul>
 801132c:	4680      	mov	r8, r0
 801132e:	4689      	mov	r9, r1
 8011330:	e7c6      	b.n	80112c0 <_dtoa_r+0x510>
 8011332:	4650      	mov	r0, sl
 8011334:	4659      	mov	r1, fp
 8011336:	f7ef f987 	bl	8000648 <__aeabi_dmul>
 801133a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801133c:	9d01      	ldr	r5, [sp, #4]
 801133e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011340:	4682      	mov	sl, r0
 8011342:	468b      	mov	fp, r1
 8011344:	4649      	mov	r1, r9
 8011346:	4640      	mov	r0, r8
 8011348:	f7ef fc2e 	bl	8000ba8 <__aeabi_d2iz>
 801134c:	4606      	mov	r6, r0
 801134e:	f7ef f911 	bl	8000574 <__aeabi_i2d>
 8011352:	3630      	adds	r6, #48	; 0x30
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	4640      	mov	r0, r8
 801135a:	4649      	mov	r1, r9
 801135c:	f7ee ffbc 	bl	80002d8 <__aeabi_dsub>
 8011360:	f805 6b01 	strb.w	r6, [r5], #1
 8011364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011366:	429d      	cmp	r5, r3
 8011368:	4680      	mov	r8, r0
 801136a:	4689      	mov	r9, r1
 801136c:	f04f 0200 	mov.w	r2, #0
 8011370:	d124      	bne.n	80113bc <_dtoa_r+0x60c>
 8011372:	4b1b      	ldr	r3, [pc, #108]	; (80113e0 <_dtoa_r+0x630>)
 8011374:	4650      	mov	r0, sl
 8011376:	4659      	mov	r1, fp
 8011378:	f7ee ffb0 	bl	80002dc <__adddf3>
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4640      	mov	r0, r8
 8011382:	4649      	mov	r1, r9
 8011384:	f7ef fbf0 	bl	8000b68 <__aeabi_dcmpgt>
 8011388:	2800      	cmp	r0, #0
 801138a:	d173      	bne.n	8011474 <_dtoa_r+0x6c4>
 801138c:	4652      	mov	r2, sl
 801138e:	465b      	mov	r3, fp
 8011390:	4913      	ldr	r1, [pc, #76]	; (80113e0 <_dtoa_r+0x630>)
 8011392:	2000      	movs	r0, #0
 8011394:	f7ee ffa0 	bl	80002d8 <__aeabi_dsub>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4640      	mov	r0, r8
 801139e:	4649      	mov	r1, r9
 80113a0:	f7ef fbc4 	bl	8000b2c <__aeabi_dcmplt>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f43f af35 	beq.w	8011214 <_dtoa_r+0x464>
 80113aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80113ac:	1e6b      	subs	r3, r5, #1
 80113ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80113b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80113b4:	2b30      	cmp	r3, #48	; 0x30
 80113b6:	d0f8      	beq.n	80113aa <_dtoa_r+0x5fa>
 80113b8:	9700      	str	r7, [sp, #0]
 80113ba:	e049      	b.n	8011450 <_dtoa_r+0x6a0>
 80113bc:	4b05      	ldr	r3, [pc, #20]	; (80113d4 <_dtoa_r+0x624>)
 80113be:	f7ef f943 	bl	8000648 <__aeabi_dmul>
 80113c2:	4680      	mov	r8, r0
 80113c4:	4689      	mov	r9, r1
 80113c6:	e7bd      	b.n	8011344 <_dtoa_r+0x594>
 80113c8:	0802a598 	.word	0x0802a598
 80113cc:	0802a570 	.word	0x0802a570
 80113d0:	3ff00000 	.word	0x3ff00000
 80113d4:	40240000 	.word	0x40240000
 80113d8:	401c0000 	.word	0x401c0000
 80113dc:	40140000 	.word	0x40140000
 80113e0:	3fe00000 	.word	0x3fe00000
 80113e4:	9d01      	ldr	r5, [sp, #4]
 80113e6:	4656      	mov	r6, sl
 80113e8:	465f      	mov	r7, fp
 80113ea:	4642      	mov	r2, r8
 80113ec:	464b      	mov	r3, r9
 80113ee:	4630      	mov	r0, r6
 80113f0:	4639      	mov	r1, r7
 80113f2:	f7ef fa53 	bl	800089c <__aeabi_ddiv>
 80113f6:	f7ef fbd7 	bl	8000ba8 <__aeabi_d2iz>
 80113fa:	4682      	mov	sl, r0
 80113fc:	f7ef f8ba 	bl	8000574 <__aeabi_i2d>
 8011400:	4642      	mov	r2, r8
 8011402:	464b      	mov	r3, r9
 8011404:	f7ef f920 	bl	8000648 <__aeabi_dmul>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	4630      	mov	r0, r6
 801140e:	4639      	mov	r1, r7
 8011410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011414:	f7ee ff60 	bl	80002d8 <__aeabi_dsub>
 8011418:	f805 6b01 	strb.w	r6, [r5], #1
 801141c:	9e01      	ldr	r6, [sp, #4]
 801141e:	9f03      	ldr	r7, [sp, #12]
 8011420:	1bae      	subs	r6, r5, r6
 8011422:	42b7      	cmp	r7, r6
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	d135      	bne.n	8011496 <_dtoa_r+0x6e6>
 801142a:	f7ee ff57 	bl	80002dc <__adddf3>
 801142e:	4642      	mov	r2, r8
 8011430:	464b      	mov	r3, r9
 8011432:	4606      	mov	r6, r0
 8011434:	460f      	mov	r7, r1
 8011436:	f7ef fb97 	bl	8000b68 <__aeabi_dcmpgt>
 801143a:	b9d0      	cbnz	r0, 8011472 <_dtoa_r+0x6c2>
 801143c:	4642      	mov	r2, r8
 801143e:	464b      	mov	r3, r9
 8011440:	4630      	mov	r0, r6
 8011442:	4639      	mov	r1, r7
 8011444:	f7ef fb68 	bl	8000b18 <__aeabi_dcmpeq>
 8011448:	b110      	cbz	r0, 8011450 <_dtoa_r+0x6a0>
 801144a:	f01a 0f01 	tst.w	sl, #1
 801144e:	d110      	bne.n	8011472 <_dtoa_r+0x6c2>
 8011450:	4620      	mov	r0, r4
 8011452:	ee18 1a10 	vmov	r1, s16
 8011456:	f001 f89f 	bl	8012598 <_Bfree>
 801145a:	2300      	movs	r3, #0
 801145c:	9800      	ldr	r0, [sp, #0]
 801145e:	702b      	strb	r3, [r5, #0]
 8011460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011462:	3001      	adds	r0, #1
 8011464:	6018      	str	r0, [r3, #0]
 8011466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011468:	2b00      	cmp	r3, #0
 801146a:	f43f acf1 	beq.w	8010e50 <_dtoa_r+0xa0>
 801146e:	601d      	str	r5, [r3, #0]
 8011470:	e4ee      	b.n	8010e50 <_dtoa_r+0xa0>
 8011472:	9f00      	ldr	r7, [sp, #0]
 8011474:	462b      	mov	r3, r5
 8011476:	461d      	mov	r5, r3
 8011478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801147c:	2a39      	cmp	r2, #57	; 0x39
 801147e:	d106      	bne.n	801148e <_dtoa_r+0x6de>
 8011480:	9a01      	ldr	r2, [sp, #4]
 8011482:	429a      	cmp	r2, r3
 8011484:	d1f7      	bne.n	8011476 <_dtoa_r+0x6c6>
 8011486:	9901      	ldr	r1, [sp, #4]
 8011488:	2230      	movs	r2, #48	; 0x30
 801148a:	3701      	adds	r7, #1
 801148c:	700a      	strb	r2, [r1, #0]
 801148e:	781a      	ldrb	r2, [r3, #0]
 8011490:	3201      	adds	r2, #1
 8011492:	701a      	strb	r2, [r3, #0]
 8011494:	e790      	b.n	80113b8 <_dtoa_r+0x608>
 8011496:	4ba6      	ldr	r3, [pc, #664]	; (8011730 <_dtoa_r+0x980>)
 8011498:	2200      	movs	r2, #0
 801149a:	f7ef f8d5 	bl	8000648 <__aeabi_dmul>
 801149e:	2200      	movs	r2, #0
 80114a0:	2300      	movs	r3, #0
 80114a2:	4606      	mov	r6, r0
 80114a4:	460f      	mov	r7, r1
 80114a6:	f7ef fb37 	bl	8000b18 <__aeabi_dcmpeq>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d09d      	beq.n	80113ea <_dtoa_r+0x63a>
 80114ae:	e7cf      	b.n	8011450 <_dtoa_r+0x6a0>
 80114b0:	9a08      	ldr	r2, [sp, #32]
 80114b2:	2a00      	cmp	r2, #0
 80114b4:	f000 80d7 	beq.w	8011666 <_dtoa_r+0x8b6>
 80114b8:	9a06      	ldr	r2, [sp, #24]
 80114ba:	2a01      	cmp	r2, #1
 80114bc:	f300 80ba 	bgt.w	8011634 <_dtoa_r+0x884>
 80114c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114c2:	2a00      	cmp	r2, #0
 80114c4:	f000 80b2 	beq.w	801162c <_dtoa_r+0x87c>
 80114c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80114cc:	9e07      	ldr	r6, [sp, #28]
 80114ce:	9d04      	ldr	r5, [sp, #16]
 80114d0:	9a04      	ldr	r2, [sp, #16]
 80114d2:	441a      	add	r2, r3
 80114d4:	9204      	str	r2, [sp, #16]
 80114d6:	9a05      	ldr	r2, [sp, #20]
 80114d8:	2101      	movs	r1, #1
 80114da:	441a      	add	r2, r3
 80114dc:	4620      	mov	r0, r4
 80114de:	9205      	str	r2, [sp, #20]
 80114e0:	f001 f95c 	bl	801279c <__i2b>
 80114e4:	4607      	mov	r7, r0
 80114e6:	2d00      	cmp	r5, #0
 80114e8:	dd0c      	ble.n	8011504 <_dtoa_r+0x754>
 80114ea:	9b05      	ldr	r3, [sp, #20]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	dd09      	ble.n	8011504 <_dtoa_r+0x754>
 80114f0:	42ab      	cmp	r3, r5
 80114f2:	9a04      	ldr	r2, [sp, #16]
 80114f4:	bfa8      	it	ge
 80114f6:	462b      	movge	r3, r5
 80114f8:	1ad2      	subs	r2, r2, r3
 80114fa:	9204      	str	r2, [sp, #16]
 80114fc:	9a05      	ldr	r2, [sp, #20]
 80114fe:	1aed      	subs	r5, r5, r3
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	9305      	str	r3, [sp, #20]
 8011504:	9b07      	ldr	r3, [sp, #28]
 8011506:	b31b      	cbz	r3, 8011550 <_dtoa_r+0x7a0>
 8011508:	9b08      	ldr	r3, [sp, #32]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 80af 	beq.w	801166e <_dtoa_r+0x8be>
 8011510:	2e00      	cmp	r6, #0
 8011512:	dd13      	ble.n	801153c <_dtoa_r+0x78c>
 8011514:	4639      	mov	r1, r7
 8011516:	4632      	mov	r2, r6
 8011518:	4620      	mov	r0, r4
 801151a:	f001 f9ff 	bl	801291c <__pow5mult>
 801151e:	ee18 2a10 	vmov	r2, s16
 8011522:	4601      	mov	r1, r0
 8011524:	4607      	mov	r7, r0
 8011526:	4620      	mov	r0, r4
 8011528:	f001 f94e 	bl	80127c8 <__multiply>
 801152c:	ee18 1a10 	vmov	r1, s16
 8011530:	4680      	mov	r8, r0
 8011532:	4620      	mov	r0, r4
 8011534:	f001 f830 	bl	8012598 <_Bfree>
 8011538:	ee08 8a10 	vmov	s16, r8
 801153c:	9b07      	ldr	r3, [sp, #28]
 801153e:	1b9a      	subs	r2, r3, r6
 8011540:	d006      	beq.n	8011550 <_dtoa_r+0x7a0>
 8011542:	ee18 1a10 	vmov	r1, s16
 8011546:	4620      	mov	r0, r4
 8011548:	f001 f9e8 	bl	801291c <__pow5mult>
 801154c:	ee08 0a10 	vmov	s16, r0
 8011550:	2101      	movs	r1, #1
 8011552:	4620      	mov	r0, r4
 8011554:	f001 f922 	bl	801279c <__i2b>
 8011558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801155a:	2b00      	cmp	r3, #0
 801155c:	4606      	mov	r6, r0
 801155e:	f340 8088 	ble.w	8011672 <_dtoa_r+0x8c2>
 8011562:	461a      	mov	r2, r3
 8011564:	4601      	mov	r1, r0
 8011566:	4620      	mov	r0, r4
 8011568:	f001 f9d8 	bl	801291c <__pow5mult>
 801156c:	9b06      	ldr	r3, [sp, #24]
 801156e:	2b01      	cmp	r3, #1
 8011570:	4606      	mov	r6, r0
 8011572:	f340 8081 	ble.w	8011678 <_dtoa_r+0x8c8>
 8011576:	f04f 0800 	mov.w	r8, #0
 801157a:	6933      	ldr	r3, [r6, #16]
 801157c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011580:	6918      	ldr	r0, [r3, #16]
 8011582:	f001 f8bb 	bl	80126fc <__hi0bits>
 8011586:	f1c0 0020 	rsb	r0, r0, #32
 801158a:	9b05      	ldr	r3, [sp, #20]
 801158c:	4418      	add	r0, r3
 801158e:	f010 001f 	ands.w	r0, r0, #31
 8011592:	f000 8092 	beq.w	80116ba <_dtoa_r+0x90a>
 8011596:	f1c0 0320 	rsb	r3, r0, #32
 801159a:	2b04      	cmp	r3, #4
 801159c:	f340 808a 	ble.w	80116b4 <_dtoa_r+0x904>
 80115a0:	f1c0 001c 	rsb	r0, r0, #28
 80115a4:	9b04      	ldr	r3, [sp, #16]
 80115a6:	4403      	add	r3, r0
 80115a8:	9304      	str	r3, [sp, #16]
 80115aa:	9b05      	ldr	r3, [sp, #20]
 80115ac:	4403      	add	r3, r0
 80115ae:	4405      	add	r5, r0
 80115b0:	9305      	str	r3, [sp, #20]
 80115b2:	9b04      	ldr	r3, [sp, #16]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	dd07      	ble.n	80115c8 <_dtoa_r+0x818>
 80115b8:	ee18 1a10 	vmov	r1, s16
 80115bc:	461a      	mov	r2, r3
 80115be:	4620      	mov	r0, r4
 80115c0:	f001 fa06 	bl	80129d0 <__lshift>
 80115c4:	ee08 0a10 	vmov	s16, r0
 80115c8:	9b05      	ldr	r3, [sp, #20]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	dd05      	ble.n	80115da <_dtoa_r+0x82a>
 80115ce:	4631      	mov	r1, r6
 80115d0:	461a      	mov	r2, r3
 80115d2:	4620      	mov	r0, r4
 80115d4:	f001 f9fc 	bl	80129d0 <__lshift>
 80115d8:	4606      	mov	r6, r0
 80115da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d06e      	beq.n	80116be <_dtoa_r+0x90e>
 80115e0:	ee18 0a10 	vmov	r0, s16
 80115e4:	4631      	mov	r1, r6
 80115e6:	f001 fa63 	bl	8012ab0 <__mcmp>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	da67      	bge.n	80116be <_dtoa_r+0x90e>
 80115ee:	9b00      	ldr	r3, [sp, #0]
 80115f0:	3b01      	subs	r3, #1
 80115f2:	ee18 1a10 	vmov	r1, s16
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	220a      	movs	r2, #10
 80115fa:	2300      	movs	r3, #0
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 ffed 	bl	80125dc <__multadd>
 8011602:	9b08      	ldr	r3, [sp, #32]
 8011604:	ee08 0a10 	vmov	s16, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	f000 81b1 	beq.w	8011970 <_dtoa_r+0xbc0>
 801160e:	2300      	movs	r3, #0
 8011610:	4639      	mov	r1, r7
 8011612:	220a      	movs	r2, #10
 8011614:	4620      	mov	r0, r4
 8011616:	f000 ffe1 	bl	80125dc <__multadd>
 801161a:	9b02      	ldr	r3, [sp, #8]
 801161c:	2b00      	cmp	r3, #0
 801161e:	4607      	mov	r7, r0
 8011620:	f300 808e 	bgt.w	8011740 <_dtoa_r+0x990>
 8011624:	9b06      	ldr	r3, [sp, #24]
 8011626:	2b02      	cmp	r3, #2
 8011628:	dc51      	bgt.n	80116ce <_dtoa_r+0x91e>
 801162a:	e089      	b.n	8011740 <_dtoa_r+0x990>
 801162c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801162e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011632:	e74b      	b.n	80114cc <_dtoa_r+0x71c>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	1e5e      	subs	r6, r3, #1
 8011638:	9b07      	ldr	r3, [sp, #28]
 801163a:	42b3      	cmp	r3, r6
 801163c:	bfbf      	itttt	lt
 801163e:	9b07      	ldrlt	r3, [sp, #28]
 8011640:	9607      	strlt	r6, [sp, #28]
 8011642:	1af2      	sublt	r2, r6, r3
 8011644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011646:	bfb6      	itet	lt
 8011648:	189b      	addlt	r3, r3, r2
 801164a:	1b9e      	subge	r6, r3, r6
 801164c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801164e:	9b03      	ldr	r3, [sp, #12]
 8011650:	bfb8      	it	lt
 8011652:	2600      	movlt	r6, #0
 8011654:	2b00      	cmp	r3, #0
 8011656:	bfb7      	itett	lt
 8011658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801165c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011660:	1a9d      	sublt	r5, r3, r2
 8011662:	2300      	movlt	r3, #0
 8011664:	e734      	b.n	80114d0 <_dtoa_r+0x720>
 8011666:	9e07      	ldr	r6, [sp, #28]
 8011668:	9d04      	ldr	r5, [sp, #16]
 801166a:	9f08      	ldr	r7, [sp, #32]
 801166c:	e73b      	b.n	80114e6 <_dtoa_r+0x736>
 801166e:	9a07      	ldr	r2, [sp, #28]
 8011670:	e767      	b.n	8011542 <_dtoa_r+0x792>
 8011672:	9b06      	ldr	r3, [sp, #24]
 8011674:	2b01      	cmp	r3, #1
 8011676:	dc18      	bgt.n	80116aa <_dtoa_r+0x8fa>
 8011678:	f1ba 0f00 	cmp.w	sl, #0
 801167c:	d115      	bne.n	80116aa <_dtoa_r+0x8fa>
 801167e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011682:	b993      	cbnz	r3, 80116aa <_dtoa_r+0x8fa>
 8011684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011688:	0d1b      	lsrs	r3, r3, #20
 801168a:	051b      	lsls	r3, r3, #20
 801168c:	b183      	cbz	r3, 80116b0 <_dtoa_r+0x900>
 801168e:	9b04      	ldr	r3, [sp, #16]
 8011690:	3301      	adds	r3, #1
 8011692:	9304      	str	r3, [sp, #16]
 8011694:	9b05      	ldr	r3, [sp, #20]
 8011696:	3301      	adds	r3, #1
 8011698:	9305      	str	r3, [sp, #20]
 801169a:	f04f 0801 	mov.w	r8, #1
 801169e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f47f af6a 	bne.w	801157a <_dtoa_r+0x7ca>
 80116a6:	2001      	movs	r0, #1
 80116a8:	e76f      	b.n	801158a <_dtoa_r+0x7da>
 80116aa:	f04f 0800 	mov.w	r8, #0
 80116ae:	e7f6      	b.n	801169e <_dtoa_r+0x8ee>
 80116b0:	4698      	mov	r8, r3
 80116b2:	e7f4      	b.n	801169e <_dtoa_r+0x8ee>
 80116b4:	f43f af7d 	beq.w	80115b2 <_dtoa_r+0x802>
 80116b8:	4618      	mov	r0, r3
 80116ba:	301c      	adds	r0, #28
 80116bc:	e772      	b.n	80115a4 <_dtoa_r+0x7f4>
 80116be:	9b03      	ldr	r3, [sp, #12]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dc37      	bgt.n	8011734 <_dtoa_r+0x984>
 80116c4:	9b06      	ldr	r3, [sp, #24]
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	dd34      	ble.n	8011734 <_dtoa_r+0x984>
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	9302      	str	r3, [sp, #8]
 80116ce:	9b02      	ldr	r3, [sp, #8]
 80116d0:	b96b      	cbnz	r3, 80116ee <_dtoa_r+0x93e>
 80116d2:	4631      	mov	r1, r6
 80116d4:	2205      	movs	r2, #5
 80116d6:	4620      	mov	r0, r4
 80116d8:	f000 ff80 	bl	80125dc <__multadd>
 80116dc:	4601      	mov	r1, r0
 80116de:	4606      	mov	r6, r0
 80116e0:	ee18 0a10 	vmov	r0, s16
 80116e4:	f001 f9e4 	bl	8012ab0 <__mcmp>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	f73f adbb 	bgt.w	8011264 <_dtoa_r+0x4b4>
 80116ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116f0:	9d01      	ldr	r5, [sp, #4]
 80116f2:	43db      	mvns	r3, r3
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	f04f 0800 	mov.w	r8, #0
 80116fa:	4631      	mov	r1, r6
 80116fc:	4620      	mov	r0, r4
 80116fe:	f000 ff4b 	bl	8012598 <_Bfree>
 8011702:	2f00      	cmp	r7, #0
 8011704:	f43f aea4 	beq.w	8011450 <_dtoa_r+0x6a0>
 8011708:	f1b8 0f00 	cmp.w	r8, #0
 801170c:	d005      	beq.n	801171a <_dtoa_r+0x96a>
 801170e:	45b8      	cmp	r8, r7
 8011710:	d003      	beq.n	801171a <_dtoa_r+0x96a>
 8011712:	4641      	mov	r1, r8
 8011714:	4620      	mov	r0, r4
 8011716:	f000 ff3f 	bl	8012598 <_Bfree>
 801171a:	4639      	mov	r1, r7
 801171c:	4620      	mov	r0, r4
 801171e:	f000 ff3b 	bl	8012598 <_Bfree>
 8011722:	e695      	b.n	8011450 <_dtoa_r+0x6a0>
 8011724:	2600      	movs	r6, #0
 8011726:	4637      	mov	r7, r6
 8011728:	e7e1      	b.n	80116ee <_dtoa_r+0x93e>
 801172a:	9700      	str	r7, [sp, #0]
 801172c:	4637      	mov	r7, r6
 801172e:	e599      	b.n	8011264 <_dtoa_r+0x4b4>
 8011730:	40240000 	.word	0x40240000
 8011734:	9b08      	ldr	r3, [sp, #32]
 8011736:	2b00      	cmp	r3, #0
 8011738:	f000 80ca 	beq.w	80118d0 <_dtoa_r+0xb20>
 801173c:	9b03      	ldr	r3, [sp, #12]
 801173e:	9302      	str	r3, [sp, #8]
 8011740:	2d00      	cmp	r5, #0
 8011742:	dd05      	ble.n	8011750 <_dtoa_r+0x9a0>
 8011744:	4639      	mov	r1, r7
 8011746:	462a      	mov	r2, r5
 8011748:	4620      	mov	r0, r4
 801174a:	f001 f941 	bl	80129d0 <__lshift>
 801174e:	4607      	mov	r7, r0
 8011750:	f1b8 0f00 	cmp.w	r8, #0
 8011754:	d05b      	beq.n	801180e <_dtoa_r+0xa5e>
 8011756:	6879      	ldr	r1, [r7, #4]
 8011758:	4620      	mov	r0, r4
 801175a:	f000 fedd 	bl	8012518 <_Balloc>
 801175e:	4605      	mov	r5, r0
 8011760:	b928      	cbnz	r0, 801176e <_dtoa_r+0x9be>
 8011762:	4b87      	ldr	r3, [pc, #540]	; (8011980 <_dtoa_r+0xbd0>)
 8011764:	4602      	mov	r2, r0
 8011766:	f240 21ea 	movw	r1, #746	; 0x2ea
 801176a:	f7ff bb3b 	b.w	8010de4 <_dtoa_r+0x34>
 801176e:	693a      	ldr	r2, [r7, #16]
 8011770:	3202      	adds	r2, #2
 8011772:	0092      	lsls	r2, r2, #2
 8011774:	f107 010c 	add.w	r1, r7, #12
 8011778:	300c      	adds	r0, #12
 801177a:	f7fd fa93 	bl	800eca4 <memcpy>
 801177e:	2201      	movs	r2, #1
 8011780:	4629      	mov	r1, r5
 8011782:	4620      	mov	r0, r4
 8011784:	f001 f924 	bl	80129d0 <__lshift>
 8011788:	9b01      	ldr	r3, [sp, #4]
 801178a:	f103 0901 	add.w	r9, r3, #1
 801178e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011792:	4413      	add	r3, r2
 8011794:	9305      	str	r3, [sp, #20]
 8011796:	f00a 0301 	and.w	r3, sl, #1
 801179a:	46b8      	mov	r8, r7
 801179c:	9304      	str	r3, [sp, #16]
 801179e:	4607      	mov	r7, r0
 80117a0:	4631      	mov	r1, r6
 80117a2:	ee18 0a10 	vmov	r0, s16
 80117a6:	f7ff fa76 	bl	8010c96 <quorem>
 80117aa:	4641      	mov	r1, r8
 80117ac:	9002      	str	r0, [sp, #8]
 80117ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80117b2:	ee18 0a10 	vmov	r0, s16
 80117b6:	f001 f97b 	bl	8012ab0 <__mcmp>
 80117ba:	463a      	mov	r2, r7
 80117bc:	9003      	str	r0, [sp, #12]
 80117be:	4631      	mov	r1, r6
 80117c0:	4620      	mov	r0, r4
 80117c2:	f001 f991 	bl	8012ae8 <__mdiff>
 80117c6:	68c2      	ldr	r2, [r0, #12]
 80117c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80117cc:	4605      	mov	r5, r0
 80117ce:	bb02      	cbnz	r2, 8011812 <_dtoa_r+0xa62>
 80117d0:	4601      	mov	r1, r0
 80117d2:	ee18 0a10 	vmov	r0, s16
 80117d6:	f001 f96b 	bl	8012ab0 <__mcmp>
 80117da:	4602      	mov	r2, r0
 80117dc:	4629      	mov	r1, r5
 80117de:	4620      	mov	r0, r4
 80117e0:	9207      	str	r2, [sp, #28]
 80117e2:	f000 fed9 	bl	8012598 <_Bfree>
 80117e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80117ea:	ea43 0102 	orr.w	r1, r3, r2
 80117ee:	9b04      	ldr	r3, [sp, #16]
 80117f0:	430b      	orrs	r3, r1
 80117f2:	464d      	mov	r5, r9
 80117f4:	d10f      	bne.n	8011816 <_dtoa_r+0xa66>
 80117f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80117fa:	d02a      	beq.n	8011852 <_dtoa_r+0xaa2>
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	dd02      	ble.n	8011808 <_dtoa_r+0xa58>
 8011802:	9b02      	ldr	r3, [sp, #8]
 8011804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011808:	f88b a000 	strb.w	sl, [fp]
 801180c:	e775      	b.n	80116fa <_dtoa_r+0x94a>
 801180e:	4638      	mov	r0, r7
 8011810:	e7ba      	b.n	8011788 <_dtoa_r+0x9d8>
 8011812:	2201      	movs	r2, #1
 8011814:	e7e2      	b.n	80117dc <_dtoa_r+0xa2c>
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	db04      	blt.n	8011826 <_dtoa_r+0xa76>
 801181c:	9906      	ldr	r1, [sp, #24]
 801181e:	430b      	orrs	r3, r1
 8011820:	9904      	ldr	r1, [sp, #16]
 8011822:	430b      	orrs	r3, r1
 8011824:	d122      	bne.n	801186c <_dtoa_r+0xabc>
 8011826:	2a00      	cmp	r2, #0
 8011828:	ddee      	ble.n	8011808 <_dtoa_r+0xa58>
 801182a:	ee18 1a10 	vmov	r1, s16
 801182e:	2201      	movs	r2, #1
 8011830:	4620      	mov	r0, r4
 8011832:	f001 f8cd 	bl	80129d0 <__lshift>
 8011836:	4631      	mov	r1, r6
 8011838:	ee08 0a10 	vmov	s16, r0
 801183c:	f001 f938 	bl	8012ab0 <__mcmp>
 8011840:	2800      	cmp	r0, #0
 8011842:	dc03      	bgt.n	801184c <_dtoa_r+0xa9c>
 8011844:	d1e0      	bne.n	8011808 <_dtoa_r+0xa58>
 8011846:	f01a 0f01 	tst.w	sl, #1
 801184a:	d0dd      	beq.n	8011808 <_dtoa_r+0xa58>
 801184c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011850:	d1d7      	bne.n	8011802 <_dtoa_r+0xa52>
 8011852:	2339      	movs	r3, #57	; 0x39
 8011854:	f88b 3000 	strb.w	r3, [fp]
 8011858:	462b      	mov	r3, r5
 801185a:	461d      	mov	r5, r3
 801185c:	3b01      	subs	r3, #1
 801185e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011862:	2a39      	cmp	r2, #57	; 0x39
 8011864:	d071      	beq.n	801194a <_dtoa_r+0xb9a>
 8011866:	3201      	adds	r2, #1
 8011868:	701a      	strb	r2, [r3, #0]
 801186a:	e746      	b.n	80116fa <_dtoa_r+0x94a>
 801186c:	2a00      	cmp	r2, #0
 801186e:	dd07      	ble.n	8011880 <_dtoa_r+0xad0>
 8011870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011874:	d0ed      	beq.n	8011852 <_dtoa_r+0xaa2>
 8011876:	f10a 0301 	add.w	r3, sl, #1
 801187a:	f88b 3000 	strb.w	r3, [fp]
 801187e:	e73c      	b.n	80116fa <_dtoa_r+0x94a>
 8011880:	9b05      	ldr	r3, [sp, #20]
 8011882:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011886:	4599      	cmp	r9, r3
 8011888:	d047      	beq.n	801191a <_dtoa_r+0xb6a>
 801188a:	ee18 1a10 	vmov	r1, s16
 801188e:	2300      	movs	r3, #0
 8011890:	220a      	movs	r2, #10
 8011892:	4620      	mov	r0, r4
 8011894:	f000 fea2 	bl	80125dc <__multadd>
 8011898:	45b8      	cmp	r8, r7
 801189a:	ee08 0a10 	vmov	s16, r0
 801189e:	f04f 0300 	mov.w	r3, #0
 80118a2:	f04f 020a 	mov.w	r2, #10
 80118a6:	4641      	mov	r1, r8
 80118a8:	4620      	mov	r0, r4
 80118aa:	d106      	bne.n	80118ba <_dtoa_r+0xb0a>
 80118ac:	f000 fe96 	bl	80125dc <__multadd>
 80118b0:	4680      	mov	r8, r0
 80118b2:	4607      	mov	r7, r0
 80118b4:	f109 0901 	add.w	r9, r9, #1
 80118b8:	e772      	b.n	80117a0 <_dtoa_r+0x9f0>
 80118ba:	f000 fe8f 	bl	80125dc <__multadd>
 80118be:	4639      	mov	r1, r7
 80118c0:	4680      	mov	r8, r0
 80118c2:	2300      	movs	r3, #0
 80118c4:	220a      	movs	r2, #10
 80118c6:	4620      	mov	r0, r4
 80118c8:	f000 fe88 	bl	80125dc <__multadd>
 80118cc:	4607      	mov	r7, r0
 80118ce:	e7f1      	b.n	80118b4 <_dtoa_r+0xb04>
 80118d0:	9b03      	ldr	r3, [sp, #12]
 80118d2:	9302      	str	r3, [sp, #8]
 80118d4:	9d01      	ldr	r5, [sp, #4]
 80118d6:	ee18 0a10 	vmov	r0, s16
 80118da:	4631      	mov	r1, r6
 80118dc:	f7ff f9db 	bl	8010c96 <quorem>
 80118e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80118e4:	9b01      	ldr	r3, [sp, #4]
 80118e6:	f805 ab01 	strb.w	sl, [r5], #1
 80118ea:	1aea      	subs	r2, r5, r3
 80118ec:	9b02      	ldr	r3, [sp, #8]
 80118ee:	4293      	cmp	r3, r2
 80118f0:	dd09      	ble.n	8011906 <_dtoa_r+0xb56>
 80118f2:	ee18 1a10 	vmov	r1, s16
 80118f6:	2300      	movs	r3, #0
 80118f8:	220a      	movs	r2, #10
 80118fa:	4620      	mov	r0, r4
 80118fc:	f000 fe6e 	bl	80125dc <__multadd>
 8011900:	ee08 0a10 	vmov	s16, r0
 8011904:	e7e7      	b.n	80118d6 <_dtoa_r+0xb26>
 8011906:	9b02      	ldr	r3, [sp, #8]
 8011908:	2b00      	cmp	r3, #0
 801190a:	bfc8      	it	gt
 801190c:	461d      	movgt	r5, r3
 801190e:	9b01      	ldr	r3, [sp, #4]
 8011910:	bfd8      	it	le
 8011912:	2501      	movle	r5, #1
 8011914:	441d      	add	r5, r3
 8011916:	f04f 0800 	mov.w	r8, #0
 801191a:	ee18 1a10 	vmov	r1, s16
 801191e:	2201      	movs	r2, #1
 8011920:	4620      	mov	r0, r4
 8011922:	f001 f855 	bl	80129d0 <__lshift>
 8011926:	4631      	mov	r1, r6
 8011928:	ee08 0a10 	vmov	s16, r0
 801192c:	f001 f8c0 	bl	8012ab0 <__mcmp>
 8011930:	2800      	cmp	r0, #0
 8011932:	dc91      	bgt.n	8011858 <_dtoa_r+0xaa8>
 8011934:	d102      	bne.n	801193c <_dtoa_r+0xb8c>
 8011936:	f01a 0f01 	tst.w	sl, #1
 801193a:	d18d      	bne.n	8011858 <_dtoa_r+0xaa8>
 801193c:	462b      	mov	r3, r5
 801193e:	461d      	mov	r5, r3
 8011940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011944:	2a30      	cmp	r2, #48	; 0x30
 8011946:	d0fa      	beq.n	801193e <_dtoa_r+0xb8e>
 8011948:	e6d7      	b.n	80116fa <_dtoa_r+0x94a>
 801194a:	9a01      	ldr	r2, [sp, #4]
 801194c:	429a      	cmp	r2, r3
 801194e:	d184      	bne.n	801185a <_dtoa_r+0xaaa>
 8011950:	9b00      	ldr	r3, [sp, #0]
 8011952:	3301      	adds	r3, #1
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	2331      	movs	r3, #49	; 0x31
 8011958:	7013      	strb	r3, [r2, #0]
 801195a:	e6ce      	b.n	80116fa <_dtoa_r+0x94a>
 801195c:	4b09      	ldr	r3, [pc, #36]	; (8011984 <_dtoa_r+0xbd4>)
 801195e:	f7ff ba95 	b.w	8010e8c <_dtoa_r+0xdc>
 8011962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011964:	2b00      	cmp	r3, #0
 8011966:	f47f aa6e 	bne.w	8010e46 <_dtoa_r+0x96>
 801196a:	4b07      	ldr	r3, [pc, #28]	; (8011988 <_dtoa_r+0xbd8>)
 801196c:	f7ff ba8e 	b.w	8010e8c <_dtoa_r+0xdc>
 8011970:	9b02      	ldr	r3, [sp, #8]
 8011972:	2b00      	cmp	r3, #0
 8011974:	dcae      	bgt.n	80118d4 <_dtoa_r+0xb24>
 8011976:	9b06      	ldr	r3, [sp, #24]
 8011978:	2b02      	cmp	r3, #2
 801197a:	f73f aea8 	bgt.w	80116ce <_dtoa_r+0x91e>
 801197e:	e7a9      	b.n	80118d4 <_dtoa_r+0xb24>
 8011980:	0802a3e3 	.word	0x0802a3e3
 8011984:	0802a1c5 	.word	0x0802a1c5
 8011988:	0802a341 	.word	0x0802a341

0801198c <__sflush_r>:
 801198c:	898a      	ldrh	r2, [r1, #12]
 801198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011992:	4605      	mov	r5, r0
 8011994:	0710      	lsls	r0, r2, #28
 8011996:	460c      	mov	r4, r1
 8011998:	d458      	bmi.n	8011a4c <__sflush_r+0xc0>
 801199a:	684b      	ldr	r3, [r1, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	dc05      	bgt.n	80119ac <__sflush_r+0x20>
 80119a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	dc02      	bgt.n	80119ac <__sflush_r+0x20>
 80119a6:	2000      	movs	r0, #0
 80119a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ae:	2e00      	cmp	r6, #0
 80119b0:	d0f9      	beq.n	80119a6 <__sflush_r+0x1a>
 80119b2:	2300      	movs	r3, #0
 80119b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119b8:	682f      	ldr	r7, [r5, #0]
 80119ba:	602b      	str	r3, [r5, #0]
 80119bc:	d032      	beq.n	8011a24 <__sflush_r+0x98>
 80119be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	075a      	lsls	r2, r3, #29
 80119c4:	d505      	bpl.n	80119d2 <__sflush_r+0x46>
 80119c6:	6863      	ldr	r3, [r4, #4]
 80119c8:	1ac0      	subs	r0, r0, r3
 80119ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119cc:	b10b      	cbz	r3, 80119d2 <__sflush_r+0x46>
 80119ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119d0:	1ac0      	subs	r0, r0, r3
 80119d2:	2300      	movs	r3, #0
 80119d4:	4602      	mov	r2, r0
 80119d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119d8:	6a21      	ldr	r1, [r4, #32]
 80119da:	4628      	mov	r0, r5
 80119dc:	47b0      	blx	r6
 80119de:	1c43      	adds	r3, r0, #1
 80119e0:	89a3      	ldrh	r3, [r4, #12]
 80119e2:	d106      	bne.n	80119f2 <__sflush_r+0x66>
 80119e4:	6829      	ldr	r1, [r5, #0]
 80119e6:	291d      	cmp	r1, #29
 80119e8:	d82c      	bhi.n	8011a44 <__sflush_r+0xb8>
 80119ea:	4a2a      	ldr	r2, [pc, #168]	; (8011a94 <__sflush_r+0x108>)
 80119ec:	40ca      	lsrs	r2, r1
 80119ee:	07d6      	lsls	r6, r2, #31
 80119f0:	d528      	bpl.n	8011a44 <__sflush_r+0xb8>
 80119f2:	2200      	movs	r2, #0
 80119f4:	6062      	str	r2, [r4, #4]
 80119f6:	04d9      	lsls	r1, r3, #19
 80119f8:	6922      	ldr	r2, [r4, #16]
 80119fa:	6022      	str	r2, [r4, #0]
 80119fc:	d504      	bpl.n	8011a08 <__sflush_r+0x7c>
 80119fe:	1c42      	adds	r2, r0, #1
 8011a00:	d101      	bne.n	8011a06 <__sflush_r+0x7a>
 8011a02:	682b      	ldr	r3, [r5, #0]
 8011a04:	b903      	cbnz	r3, 8011a08 <__sflush_r+0x7c>
 8011a06:	6560      	str	r0, [r4, #84]	; 0x54
 8011a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a0a:	602f      	str	r7, [r5, #0]
 8011a0c:	2900      	cmp	r1, #0
 8011a0e:	d0ca      	beq.n	80119a6 <__sflush_r+0x1a>
 8011a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a14:	4299      	cmp	r1, r3
 8011a16:	d002      	beq.n	8011a1e <__sflush_r+0x92>
 8011a18:	4628      	mov	r0, r5
 8011a1a:	f001 fa55 	bl	8012ec8 <_free_r>
 8011a1e:	2000      	movs	r0, #0
 8011a20:	6360      	str	r0, [r4, #52]	; 0x34
 8011a22:	e7c1      	b.n	80119a8 <__sflush_r+0x1c>
 8011a24:	6a21      	ldr	r1, [r4, #32]
 8011a26:	2301      	movs	r3, #1
 8011a28:	4628      	mov	r0, r5
 8011a2a:	47b0      	blx	r6
 8011a2c:	1c41      	adds	r1, r0, #1
 8011a2e:	d1c7      	bne.n	80119c0 <__sflush_r+0x34>
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0c4      	beq.n	80119c0 <__sflush_r+0x34>
 8011a36:	2b1d      	cmp	r3, #29
 8011a38:	d001      	beq.n	8011a3e <__sflush_r+0xb2>
 8011a3a:	2b16      	cmp	r3, #22
 8011a3c:	d101      	bne.n	8011a42 <__sflush_r+0xb6>
 8011a3e:	602f      	str	r7, [r5, #0]
 8011a40:	e7b1      	b.n	80119a6 <__sflush_r+0x1a>
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a48:	81a3      	strh	r3, [r4, #12]
 8011a4a:	e7ad      	b.n	80119a8 <__sflush_r+0x1c>
 8011a4c:	690f      	ldr	r7, [r1, #16]
 8011a4e:	2f00      	cmp	r7, #0
 8011a50:	d0a9      	beq.n	80119a6 <__sflush_r+0x1a>
 8011a52:	0793      	lsls	r3, r2, #30
 8011a54:	680e      	ldr	r6, [r1, #0]
 8011a56:	bf08      	it	eq
 8011a58:	694b      	ldreq	r3, [r1, #20]
 8011a5a:	600f      	str	r7, [r1, #0]
 8011a5c:	bf18      	it	ne
 8011a5e:	2300      	movne	r3, #0
 8011a60:	eba6 0807 	sub.w	r8, r6, r7
 8011a64:	608b      	str	r3, [r1, #8]
 8011a66:	f1b8 0f00 	cmp.w	r8, #0
 8011a6a:	dd9c      	ble.n	80119a6 <__sflush_r+0x1a>
 8011a6c:	6a21      	ldr	r1, [r4, #32]
 8011a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a70:	4643      	mov	r3, r8
 8011a72:	463a      	mov	r2, r7
 8011a74:	4628      	mov	r0, r5
 8011a76:	47b0      	blx	r6
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	dc06      	bgt.n	8011a8a <__sflush_r+0xfe>
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a82:	81a3      	strh	r3, [r4, #12]
 8011a84:	f04f 30ff 	mov.w	r0, #4294967295
 8011a88:	e78e      	b.n	80119a8 <__sflush_r+0x1c>
 8011a8a:	4407      	add	r7, r0
 8011a8c:	eba8 0800 	sub.w	r8, r8, r0
 8011a90:	e7e9      	b.n	8011a66 <__sflush_r+0xda>
 8011a92:	bf00      	nop
 8011a94:	20400001 	.word	0x20400001

08011a98 <_fflush_r>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	690b      	ldr	r3, [r1, #16]
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	460c      	mov	r4, r1
 8011aa0:	b913      	cbnz	r3, 8011aa8 <_fflush_r+0x10>
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	b118      	cbz	r0, 8011ab2 <_fflush_r+0x1a>
 8011aaa:	6983      	ldr	r3, [r0, #24]
 8011aac:	b90b      	cbnz	r3, 8011ab2 <_fflush_r+0x1a>
 8011aae:	f000 f887 	bl	8011bc0 <__sinit>
 8011ab2:	4b14      	ldr	r3, [pc, #80]	; (8011b04 <_fflush_r+0x6c>)
 8011ab4:	429c      	cmp	r4, r3
 8011ab6:	d11b      	bne.n	8011af0 <_fflush_r+0x58>
 8011ab8:	686c      	ldr	r4, [r5, #4]
 8011aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d0ef      	beq.n	8011aa2 <_fflush_r+0xa>
 8011ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ac4:	07d0      	lsls	r0, r2, #31
 8011ac6:	d404      	bmi.n	8011ad2 <_fflush_r+0x3a>
 8011ac8:	0599      	lsls	r1, r3, #22
 8011aca:	d402      	bmi.n	8011ad2 <_fflush_r+0x3a>
 8011acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ace:	f000 fc88 	bl	80123e2 <__retarget_lock_acquire_recursive>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	4621      	mov	r1, r4
 8011ad6:	f7ff ff59 	bl	801198c <__sflush_r>
 8011ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011adc:	07da      	lsls	r2, r3, #31
 8011ade:	4605      	mov	r5, r0
 8011ae0:	d4e0      	bmi.n	8011aa4 <_fflush_r+0xc>
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	059b      	lsls	r3, r3, #22
 8011ae6:	d4dd      	bmi.n	8011aa4 <_fflush_r+0xc>
 8011ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aea:	f000 fc7b 	bl	80123e4 <__retarget_lock_release_recursive>
 8011aee:	e7d9      	b.n	8011aa4 <_fflush_r+0xc>
 8011af0:	4b05      	ldr	r3, [pc, #20]	; (8011b08 <_fflush_r+0x70>)
 8011af2:	429c      	cmp	r4, r3
 8011af4:	d101      	bne.n	8011afa <_fflush_r+0x62>
 8011af6:	68ac      	ldr	r4, [r5, #8]
 8011af8:	e7df      	b.n	8011aba <_fflush_r+0x22>
 8011afa:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <_fflush_r+0x74>)
 8011afc:	429c      	cmp	r4, r3
 8011afe:	bf08      	it	eq
 8011b00:	68ec      	ldreq	r4, [r5, #12]
 8011b02:	e7da      	b.n	8011aba <_fflush_r+0x22>
 8011b04:	0802a414 	.word	0x0802a414
 8011b08:	0802a434 	.word	0x0802a434
 8011b0c:	0802a3f4 	.word	0x0802a3f4

08011b10 <std>:
 8011b10:	2300      	movs	r3, #0
 8011b12:	b510      	push	{r4, lr}
 8011b14:	4604      	mov	r4, r0
 8011b16:	e9c0 3300 	strd	r3, r3, [r0]
 8011b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b1e:	6083      	str	r3, [r0, #8]
 8011b20:	8181      	strh	r1, [r0, #12]
 8011b22:	6643      	str	r3, [r0, #100]	; 0x64
 8011b24:	81c2      	strh	r2, [r0, #14]
 8011b26:	6183      	str	r3, [r0, #24]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	2208      	movs	r2, #8
 8011b2c:	305c      	adds	r0, #92	; 0x5c
 8011b2e:	f7fd f8c7 	bl	800ecc0 <memset>
 8011b32:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <std+0x38>)
 8011b34:	6263      	str	r3, [r4, #36]	; 0x24
 8011b36:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <std+0x3c>)
 8011b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b3a:	4b05      	ldr	r3, [pc, #20]	; (8011b50 <std+0x40>)
 8011b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b3e:	4b05      	ldr	r3, [pc, #20]	; (8011b54 <std+0x44>)
 8011b40:	6224      	str	r4, [r4, #32]
 8011b42:	6323      	str	r3, [r4, #48]	; 0x30
 8011b44:	bd10      	pop	{r4, pc}
 8011b46:	bf00      	nop
 8011b48:	08013459 	.word	0x08013459
 8011b4c:	0801347b 	.word	0x0801347b
 8011b50:	080134b3 	.word	0x080134b3
 8011b54:	080134d7 	.word	0x080134d7

08011b58 <_cleanup_r>:
 8011b58:	4901      	ldr	r1, [pc, #4]	; (8011b60 <_cleanup_r+0x8>)
 8011b5a:	f000 b8af 	b.w	8011cbc <_fwalk_reent>
 8011b5e:	bf00      	nop
 8011b60:	08011a99 	.word	0x08011a99

08011b64 <__sfmoreglue>:
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	2268      	movs	r2, #104	; 0x68
 8011b68:	1e4d      	subs	r5, r1, #1
 8011b6a:	4355      	muls	r5, r2
 8011b6c:	460e      	mov	r6, r1
 8011b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b72:	f001 fa15 	bl	8012fa0 <_malloc_r>
 8011b76:	4604      	mov	r4, r0
 8011b78:	b140      	cbz	r0, 8011b8c <__sfmoreglue+0x28>
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8011b80:	300c      	adds	r0, #12
 8011b82:	60a0      	str	r0, [r4, #8]
 8011b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b88:	f7fd f89a 	bl	800ecc0 <memset>
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}

08011b90 <__sfp_lock_acquire>:
 8011b90:	4801      	ldr	r0, [pc, #4]	; (8011b98 <__sfp_lock_acquire+0x8>)
 8011b92:	f000 bc26 	b.w	80123e2 <__retarget_lock_acquire_recursive>
 8011b96:	bf00      	nop
 8011b98:	20013367 	.word	0x20013367

08011b9c <__sfp_lock_release>:
 8011b9c:	4801      	ldr	r0, [pc, #4]	; (8011ba4 <__sfp_lock_release+0x8>)
 8011b9e:	f000 bc21 	b.w	80123e4 <__retarget_lock_release_recursive>
 8011ba2:	bf00      	nop
 8011ba4:	20013367 	.word	0x20013367

08011ba8 <__sinit_lock_acquire>:
 8011ba8:	4801      	ldr	r0, [pc, #4]	; (8011bb0 <__sinit_lock_acquire+0x8>)
 8011baa:	f000 bc1a 	b.w	80123e2 <__retarget_lock_acquire_recursive>
 8011bae:	bf00      	nop
 8011bb0:	20013368 	.word	0x20013368

08011bb4 <__sinit_lock_release>:
 8011bb4:	4801      	ldr	r0, [pc, #4]	; (8011bbc <__sinit_lock_release+0x8>)
 8011bb6:	f000 bc15 	b.w	80123e4 <__retarget_lock_release_recursive>
 8011bba:	bf00      	nop
 8011bbc:	20013368 	.word	0x20013368

08011bc0 <__sinit>:
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	f7ff fff0 	bl	8011ba8 <__sinit_lock_acquire>
 8011bc8:	69a3      	ldr	r3, [r4, #24]
 8011bca:	b11b      	cbz	r3, 8011bd4 <__sinit+0x14>
 8011bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bd0:	f7ff bff0 	b.w	8011bb4 <__sinit_lock_release>
 8011bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8011bda:	4b13      	ldr	r3, [pc, #76]	; (8011c28 <__sinit+0x68>)
 8011bdc:	4a13      	ldr	r2, [pc, #76]	; (8011c2c <__sinit+0x6c>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8011be2:	42a3      	cmp	r3, r4
 8011be4:	bf04      	itt	eq
 8011be6:	2301      	moveq	r3, #1
 8011be8:	61a3      	streq	r3, [r4, #24]
 8011bea:	4620      	mov	r0, r4
 8011bec:	f000 f820 	bl	8011c30 <__sfp>
 8011bf0:	6060      	str	r0, [r4, #4]
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f000 f81c 	bl	8011c30 <__sfp>
 8011bf8:	60a0      	str	r0, [r4, #8]
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f000 f818 	bl	8011c30 <__sfp>
 8011c00:	2200      	movs	r2, #0
 8011c02:	60e0      	str	r0, [r4, #12]
 8011c04:	2104      	movs	r1, #4
 8011c06:	6860      	ldr	r0, [r4, #4]
 8011c08:	f7ff ff82 	bl	8011b10 <std>
 8011c0c:	68a0      	ldr	r0, [r4, #8]
 8011c0e:	2201      	movs	r2, #1
 8011c10:	2109      	movs	r1, #9
 8011c12:	f7ff ff7d 	bl	8011b10 <std>
 8011c16:	68e0      	ldr	r0, [r4, #12]
 8011c18:	2202      	movs	r2, #2
 8011c1a:	2112      	movs	r1, #18
 8011c1c:	f7ff ff78 	bl	8011b10 <std>
 8011c20:	2301      	movs	r3, #1
 8011c22:	61a3      	str	r3, [r4, #24]
 8011c24:	e7d2      	b.n	8011bcc <__sinit+0xc>
 8011c26:	bf00      	nop
 8011c28:	0802a1a0 	.word	0x0802a1a0
 8011c2c:	08011b59 	.word	0x08011b59

08011c30 <__sfp>:
 8011c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c32:	4607      	mov	r7, r0
 8011c34:	f7ff ffac 	bl	8011b90 <__sfp_lock_acquire>
 8011c38:	4b1e      	ldr	r3, [pc, #120]	; (8011cb4 <__sfp+0x84>)
 8011c3a:	681e      	ldr	r6, [r3, #0]
 8011c3c:	69b3      	ldr	r3, [r6, #24]
 8011c3e:	b913      	cbnz	r3, 8011c46 <__sfp+0x16>
 8011c40:	4630      	mov	r0, r6
 8011c42:	f7ff ffbd 	bl	8011bc0 <__sinit>
 8011c46:	3648      	adds	r6, #72	; 0x48
 8011c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c4c:	3b01      	subs	r3, #1
 8011c4e:	d503      	bpl.n	8011c58 <__sfp+0x28>
 8011c50:	6833      	ldr	r3, [r6, #0]
 8011c52:	b30b      	cbz	r3, 8011c98 <__sfp+0x68>
 8011c54:	6836      	ldr	r6, [r6, #0]
 8011c56:	e7f7      	b.n	8011c48 <__sfp+0x18>
 8011c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c5c:	b9d5      	cbnz	r5, 8011c94 <__sfp+0x64>
 8011c5e:	4b16      	ldr	r3, [pc, #88]	; (8011cb8 <__sfp+0x88>)
 8011c60:	60e3      	str	r3, [r4, #12]
 8011c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c66:	6665      	str	r5, [r4, #100]	; 0x64
 8011c68:	f000 fbba 	bl	80123e0 <__retarget_lock_init_recursive>
 8011c6c:	f7ff ff96 	bl	8011b9c <__sfp_lock_release>
 8011c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c78:	6025      	str	r5, [r4, #0]
 8011c7a:	61a5      	str	r5, [r4, #24]
 8011c7c:	2208      	movs	r2, #8
 8011c7e:	4629      	mov	r1, r5
 8011c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c84:	f7fd f81c 	bl	800ecc0 <memset>
 8011c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c90:	4620      	mov	r0, r4
 8011c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c94:	3468      	adds	r4, #104	; 0x68
 8011c96:	e7d9      	b.n	8011c4c <__sfp+0x1c>
 8011c98:	2104      	movs	r1, #4
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	f7ff ff62 	bl	8011b64 <__sfmoreglue>
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	6030      	str	r0, [r6, #0]
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d1d5      	bne.n	8011c54 <__sfp+0x24>
 8011ca8:	f7ff ff78 	bl	8011b9c <__sfp_lock_release>
 8011cac:	230c      	movs	r3, #12
 8011cae:	603b      	str	r3, [r7, #0]
 8011cb0:	e7ee      	b.n	8011c90 <__sfp+0x60>
 8011cb2:	bf00      	nop
 8011cb4:	0802a1a0 	.word	0x0802a1a0
 8011cb8:	ffff0001 	.word	0xffff0001

08011cbc <_fwalk_reent>:
 8011cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	4688      	mov	r8, r1
 8011cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011cc8:	2700      	movs	r7, #0
 8011cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cce:	f1b9 0901 	subs.w	r9, r9, #1
 8011cd2:	d505      	bpl.n	8011ce0 <_fwalk_reent+0x24>
 8011cd4:	6824      	ldr	r4, [r4, #0]
 8011cd6:	2c00      	cmp	r4, #0
 8011cd8:	d1f7      	bne.n	8011cca <_fwalk_reent+0xe>
 8011cda:	4638      	mov	r0, r7
 8011cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ce0:	89ab      	ldrh	r3, [r5, #12]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d907      	bls.n	8011cf6 <_fwalk_reent+0x3a>
 8011ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cea:	3301      	adds	r3, #1
 8011cec:	d003      	beq.n	8011cf6 <_fwalk_reent+0x3a>
 8011cee:	4629      	mov	r1, r5
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	47c0      	blx	r8
 8011cf4:	4307      	orrs	r7, r0
 8011cf6:	3568      	adds	r5, #104	; 0x68
 8011cf8:	e7e9      	b.n	8011cce <_fwalk_reent+0x12>

08011cfa <rshift>:
 8011cfa:	6903      	ldr	r3, [r0, #16]
 8011cfc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d04:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011d08:	f100 0414 	add.w	r4, r0, #20
 8011d0c:	dd45      	ble.n	8011d9a <rshift+0xa0>
 8011d0e:	f011 011f 	ands.w	r1, r1, #31
 8011d12:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011d16:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011d1a:	d10c      	bne.n	8011d36 <rshift+0x3c>
 8011d1c:	f100 0710 	add.w	r7, r0, #16
 8011d20:	4629      	mov	r1, r5
 8011d22:	42b1      	cmp	r1, r6
 8011d24:	d334      	bcc.n	8011d90 <rshift+0x96>
 8011d26:	1a9b      	subs	r3, r3, r2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	1eea      	subs	r2, r5, #3
 8011d2c:	4296      	cmp	r6, r2
 8011d2e:	bf38      	it	cc
 8011d30:	2300      	movcc	r3, #0
 8011d32:	4423      	add	r3, r4
 8011d34:	e015      	b.n	8011d62 <rshift+0x68>
 8011d36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011d3a:	f1c1 0820 	rsb	r8, r1, #32
 8011d3e:	40cf      	lsrs	r7, r1
 8011d40:	f105 0e04 	add.w	lr, r5, #4
 8011d44:	46a1      	mov	r9, r4
 8011d46:	4576      	cmp	r6, lr
 8011d48:	46f4      	mov	ip, lr
 8011d4a:	d815      	bhi.n	8011d78 <rshift+0x7e>
 8011d4c:	1a9a      	subs	r2, r3, r2
 8011d4e:	0092      	lsls	r2, r2, #2
 8011d50:	3a04      	subs	r2, #4
 8011d52:	3501      	adds	r5, #1
 8011d54:	42ae      	cmp	r6, r5
 8011d56:	bf38      	it	cc
 8011d58:	2200      	movcc	r2, #0
 8011d5a:	18a3      	adds	r3, r4, r2
 8011d5c:	50a7      	str	r7, [r4, r2]
 8011d5e:	b107      	cbz	r7, 8011d62 <rshift+0x68>
 8011d60:	3304      	adds	r3, #4
 8011d62:	1b1a      	subs	r2, r3, r4
 8011d64:	42a3      	cmp	r3, r4
 8011d66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d6a:	bf08      	it	eq
 8011d6c:	2300      	moveq	r3, #0
 8011d6e:	6102      	str	r2, [r0, #16]
 8011d70:	bf08      	it	eq
 8011d72:	6143      	streq	r3, [r0, #20]
 8011d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d78:	f8dc c000 	ldr.w	ip, [ip]
 8011d7c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d80:	ea4c 0707 	orr.w	r7, ip, r7
 8011d84:	f849 7b04 	str.w	r7, [r9], #4
 8011d88:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d8c:	40cf      	lsrs	r7, r1
 8011d8e:	e7da      	b.n	8011d46 <rshift+0x4c>
 8011d90:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d94:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d98:	e7c3      	b.n	8011d22 <rshift+0x28>
 8011d9a:	4623      	mov	r3, r4
 8011d9c:	e7e1      	b.n	8011d62 <rshift+0x68>

08011d9e <__hexdig_fun>:
 8011d9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011da2:	2b09      	cmp	r3, #9
 8011da4:	d802      	bhi.n	8011dac <__hexdig_fun+0xe>
 8011da6:	3820      	subs	r0, #32
 8011da8:	b2c0      	uxtb	r0, r0
 8011daa:	4770      	bx	lr
 8011dac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011db0:	2b05      	cmp	r3, #5
 8011db2:	d801      	bhi.n	8011db8 <__hexdig_fun+0x1a>
 8011db4:	3847      	subs	r0, #71	; 0x47
 8011db6:	e7f7      	b.n	8011da8 <__hexdig_fun+0xa>
 8011db8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011dbc:	2b05      	cmp	r3, #5
 8011dbe:	d801      	bhi.n	8011dc4 <__hexdig_fun+0x26>
 8011dc0:	3827      	subs	r0, #39	; 0x27
 8011dc2:	e7f1      	b.n	8011da8 <__hexdig_fun+0xa>
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	4770      	bx	lr

08011dc8 <__gethex>:
 8011dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	ed2d 8b02 	vpush	{d8}
 8011dd0:	b089      	sub	sp, #36	; 0x24
 8011dd2:	ee08 0a10 	vmov	s16, r0
 8011dd6:	9304      	str	r3, [sp, #16]
 8011dd8:	4bb4      	ldr	r3, [pc, #720]	; (80120ac <__gethex+0x2e4>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	9301      	str	r3, [sp, #4]
 8011dde:	4618      	mov	r0, r3
 8011de0:	468b      	mov	fp, r1
 8011de2:	4690      	mov	r8, r2
 8011de4:	f7ee fa1c 	bl	8000220 <strlen>
 8011de8:	9b01      	ldr	r3, [sp, #4]
 8011dea:	f8db 2000 	ldr.w	r2, [fp]
 8011dee:	4403      	add	r3, r0
 8011df0:	4682      	mov	sl, r0
 8011df2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011df6:	9305      	str	r3, [sp, #20]
 8011df8:	1c93      	adds	r3, r2, #2
 8011dfa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011dfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011e02:	32fe      	adds	r2, #254	; 0xfe
 8011e04:	18d1      	adds	r1, r2, r3
 8011e06:	461f      	mov	r7, r3
 8011e08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011e0c:	9100      	str	r1, [sp, #0]
 8011e0e:	2830      	cmp	r0, #48	; 0x30
 8011e10:	d0f8      	beq.n	8011e04 <__gethex+0x3c>
 8011e12:	f7ff ffc4 	bl	8011d9e <__hexdig_fun>
 8011e16:	4604      	mov	r4, r0
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d13a      	bne.n	8011e92 <__gethex+0xca>
 8011e1c:	9901      	ldr	r1, [sp, #4]
 8011e1e:	4652      	mov	r2, sl
 8011e20:	4638      	mov	r0, r7
 8011e22:	f001 fb5c 	bl	80134de <strncmp>
 8011e26:	4605      	mov	r5, r0
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d168      	bne.n	8011efe <__gethex+0x136>
 8011e2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011e30:	eb07 060a 	add.w	r6, r7, sl
 8011e34:	f7ff ffb3 	bl	8011d9e <__hexdig_fun>
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	d062      	beq.n	8011f02 <__gethex+0x13a>
 8011e3c:	4633      	mov	r3, r6
 8011e3e:	7818      	ldrb	r0, [r3, #0]
 8011e40:	2830      	cmp	r0, #48	; 0x30
 8011e42:	461f      	mov	r7, r3
 8011e44:	f103 0301 	add.w	r3, r3, #1
 8011e48:	d0f9      	beq.n	8011e3e <__gethex+0x76>
 8011e4a:	f7ff ffa8 	bl	8011d9e <__hexdig_fun>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	fab0 f480 	clz	r4, r0
 8011e54:	0964      	lsrs	r4, r4, #5
 8011e56:	4635      	mov	r5, r6
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	463a      	mov	r2, r7
 8011e5c:	4616      	mov	r6, r2
 8011e5e:	3201      	adds	r2, #1
 8011e60:	7830      	ldrb	r0, [r6, #0]
 8011e62:	f7ff ff9c 	bl	8011d9e <__hexdig_fun>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	d1f8      	bne.n	8011e5c <__gethex+0x94>
 8011e6a:	9901      	ldr	r1, [sp, #4]
 8011e6c:	4652      	mov	r2, sl
 8011e6e:	4630      	mov	r0, r6
 8011e70:	f001 fb35 	bl	80134de <strncmp>
 8011e74:	b980      	cbnz	r0, 8011e98 <__gethex+0xd0>
 8011e76:	b94d      	cbnz	r5, 8011e8c <__gethex+0xc4>
 8011e78:	eb06 050a 	add.w	r5, r6, sl
 8011e7c:	462a      	mov	r2, r5
 8011e7e:	4616      	mov	r6, r2
 8011e80:	3201      	adds	r2, #1
 8011e82:	7830      	ldrb	r0, [r6, #0]
 8011e84:	f7ff ff8b 	bl	8011d9e <__hexdig_fun>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	d1f8      	bne.n	8011e7e <__gethex+0xb6>
 8011e8c:	1bad      	subs	r5, r5, r6
 8011e8e:	00ad      	lsls	r5, r5, #2
 8011e90:	e004      	b.n	8011e9c <__gethex+0xd4>
 8011e92:	2400      	movs	r4, #0
 8011e94:	4625      	mov	r5, r4
 8011e96:	e7e0      	b.n	8011e5a <__gethex+0x92>
 8011e98:	2d00      	cmp	r5, #0
 8011e9a:	d1f7      	bne.n	8011e8c <__gethex+0xc4>
 8011e9c:	7833      	ldrb	r3, [r6, #0]
 8011e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ea2:	2b50      	cmp	r3, #80	; 0x50
 8011ea4:	d13b      	bne.n	8011f1e <__gethex+0x156>
 8011ea6:	7873      	ldrb	r3, [r6, #1]
 8011ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8011eaa:	d02c      	beq.n	8011f06 <__gethex+0x13e>
 8011eac:	2b2d      	cmp	r3, #45	; 0x2d
 8011eae:	d02e      	beq.n	8011f0e <__gethex+0x146>
 8011eb0:	1c71      	adds	r1, r6, #1
 8011eb2:	f04f 0900 	mov.w	r9, #0
 8011eb6:	7808      	ldrb	r0, [r1, #0]
 8011eb8:	f7ff ff71 	bl	8011d9e <__hexdig_fun>
 8011ebc:	1e43      	subs	r3, r0, #1
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	2b18      	cmp	r3, #24
 8011ec2:	d82c      	bhi.n	8011f1e <__gethex+0x156>
 8011ec4:	f1a0 0210 	sub.w	r2, r0, #16
 8011ec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ecc:	f7ff ff67 	bl	8011d9e <__hexdig_fun>
 8011ed0:	1e43      	subs	r3, r0, #1
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	2b18      	cmp	r3, #24
 8011ed6:	d91d      	bls.n	8011f14 <__gethex+0x14c>
 8011ed8:	f1b9 0f00 	cmp.w	r9, #0
 8011edc:	d000      	beq.n	8011ee0 <__gethex+0x118>
 8011ede:	4252      	negs	r2, r2
 8011ee0:	4415      	add	r5, r2
 8011ee2:	f8cb 1000 	str.w	r1, [fp]
 8011ee6:	b1e4      	cbz	r4, 8011f22 <__gethex+0x15a>
 8011ee8:	9b00      	ldr	r3, [sp, #0]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	bf14      	ite	ne
 8011eee:	2700      	movne	r7, #0
 8011ef0:	2706      	moveq	r7, #6
 8011ef2:	4638      	mov	r0, r7
 8011ef4:	b009      	add	sp, #36	; 0x24
 8011ef6:	ecbd 8b02 	vpop	{d8}
 8011efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011efe:	463e      	mov	r6, r7
 8011f00:	4625      	mov	r5, r4
 8011f02:	2401      	movs	r4, #1
 8011f04:	e7ca      	b.n	8011e9c <__gethex+0xd4>
 8011f06:	f04f 0900 	mov.w	r9, #0
 8011f0a:	1cb1      	adds	r1, r6, #2
 8011f0c:	e7d3      	b.n	8011eb6 <__gethex+0xee>
 8011f0e:	f04f 0901 	mov.w	r9, #1
 8011f12:	e7fa      	b.n	8011f0a <__gethex+0x142>
 8011f14:	230a      	movs	r3, #10
 8011f16:	fb03 0202 	mla	r2, r3, r2, r0
 8011f1a:	3a10      	subs	r2, #16
 8011f1c:	e7d4      	b.n	8011ec8 <__gethex+0x100>
 8011f1e:	4631      	mov	r1, r6
 8011f20:	e7df      	b.n	8011ee2 <__gethex+0x11a>
 8011f22:	1bf3      	subs	r3, r6, r7
 8011f24:	3b01      	subs	r3, #1
 8011f26:	4621      	mov	r1, r4
 8011f28:	2b07      	cmp	r3, #7
 8011f2a:	dc0b      	bgt.n	8011f44 <__gethex+0x17c>
 8011f2c:	ee18 0a10 	vmov	r0, s16
 8011f30:	f000 faf2 	bl	8012518 <_Balloc>
 8011f34:	4604      	mov	r4, r0
 8011f36:	b940      	cbnz	r0, 8011f4a <__gethex+0x182>
 8011f38:	4b5d      	ldr	r3, [pc, #372]	; (80120b0 <__gethex+0x2e8>)
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	21de      	movs	r1, #222	; 0xde
 8011f3e:	485d      	ldr	r0, [pc, #372]	; (80120b4 <__gethex+0x2ec>)
 8011f40:	f7fc fe56 	bl	800ebf0 <__assert_func>
 8011f44:	3101      	adds	r1, #1
 8011f46:	105b      	asrs	r3, r3, #1
 8011f48:	e7ee      	b.n	8011f28 <__gethex+0x160>
 8011f4a:	f100 0914 	add.w	r9, r0, #20
 8011f4e:	f04f 0b00 	mov.w	fp, #0
 8011f52:	f1ca 0301 	rsb	r3, sl, #1
 8011f56:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f5a:	f8cd b000 	str.w	fp, [sp]
 8011f5e:	9306      	str	r3, [sp, #24]
 8011f60:	42b7      	cmp	r7, r6
 8011f62:	d340      	bcc.n	8011fe6 <__gethex+0x21e>
 8011f64:	9802      	ldr	r0, [sp, #8]
 8011f66:	9b00      	ldr	r3, [sp, #0]
 8011f68:	f840 3b04 	str.w	r3, [r0], #4
 8011f6c:	eba0 0009 	sub.w	r0, r0, r9
 8011f70:	1080      	asrs	r0, r0, #2
 8011f72:	0146      	lsls	r6, r0, #5
 8011f74:	6120      	str	r0, [r4, #16]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f000 fbc0 	bl	80126fc <__hi0bits>
 8011f7c:	1a30      	subs	r0, r6, r0
 8011f7e:	f8d8 6000 	ldr.w	r6, [r8]
 8011f82:	42b0      	cmp	r0, r6
 8011f84:	dd63      	ble.n	801204e <__gethex+0x286>
 8011f86:	1b87      	subs	r7, r0, r6
 8011f88:	4639      	mov	r1, r7
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 ff64 	bl	8012e58 <__any_on>
 8011f90:	4682      	mov	sl, r0
 8011f92:	b1a8      	cbz	r0, 8011fc0 <__gethex+0x1f8>
 8011f94:	1e7b      	subs	r3, r7, #1
 8011f96:	1159      	asrs	r1, r3, #5
 8011f98:	f003 021f 	and.w	r2, r3, #31
 8011f9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011fa0:	f04f 0a01 	mov.w	sl, #1
 8011fa4:	fa0a f202 	lsl.w	r2, sl, r2
 8011fa8:	420a      	tst	r2, r1
 8011faa:	d009      	beq.n	8011fc0 <__gethex+0x1f8>
 8011fac:	4553      	cmp	r3, sl
 8011fae:	dd05      	ble.n	8011fbc <__gethex+0x1f4>
 8011fb0:	1eb9      	subs	r1, r7, #2
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f000 ff50 	bl	8012e58 <__any_on>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d145      	bne.n	8012048 <__gethex+0x280>
 8011fbc:	f04f 0a02 	mov.w	sl, #2
 8011fc0:	4639      	mov	r1, r7
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f7ff fe99 	bl	8011cfa <rshift>
 8011fc8:	443d      	add	r5, r7
 8011fca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011fce:	42ab      	cmp	r3, r5
 8011fd0:	da4c      	bge.n	801206c <__gethex+0x2a4>
 8011fd2:	ee18 0a10 	vmov	r0, s16
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	f000 fade 	bl	8012598 <_Bfree>
 8011fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fde:	2300      	movs	r3, #0
 8011fe0:	6013      	str	r3, [r2, #0]
 8011fe2:	27a3      	movs	r7, #163	; 0xa3
 8011fe4:	e785      	b.n	8011ef2 <__gethex+0x12a>
 8011fe6:	1e73      	subs	r3, r6, #1
 8011fe8:	9a05      	ldr	r2, [sp, #20]
 8011fea:	9303      	str	r3, [sp, #12]
 8011fec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d019      	beq.n	8012028 <__gethex+0x260>
 8011ff4:	f1bb 0f20 	cmp.w	fp, #32
 8011ff8:	d107      	bne.n	801200a <__gethex+0x242>
 8011ffa:	9b02      	ldr	r3, [sp, #8]
 8011ffc:	9a00      	ldr	r2, [sp, #0]
 8011ffe:	f843 2b04 	str.w	r2, [r3], #4
 8012002:	9302      	str	r3, [sp, #8]
 8012004:	2300      	movs	r3, #0
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	469b      	mov	fp, r3
 801200a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801200e:	f7ff fec6 	bl	8011d9e <__hexdig_fun>
 8012012:	9b00      	ldr	r3, [sp, #0]
 8012014:	f000 000f 	and.w	r0, r0, #15
 8012018:	fa00 f00b 	lsl.w	r0, r0, fp
 801201c:	4303      	orrs	r3, r0
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	f10b 0b04 	add.w	fp, fp, #4
 8012024:	9b03      	ldr	r3, [sp, #12]
 8012026:	e00d      	b.n	8012044 <__gethex+0x27c>
 8012028:	9b03      	ldr	r3, [sp, #12]
 801202a:	9a06      	ldr	r2, [sp, #24]
 801202c:	4413      	add	r3, r2
 801202e:	42bb      	cmp	r3, r7
 8012030:	d3e0      	bcc.n	8011ff4 <__gethex+0x22c>
 8012032:	4618      	mov	r0, r3
 8012034:	9901      	ldr	r1, [sp, #4]
 8012036:	9307      	str	r3, [sp, #28]
 8012038:	4652      	mov	r2, sl
 801203a:	f001 fa50 	bl	80134de <strncmp>
 801203e:	9b07      	ldr	r3, [sp, #28]
 8012040:	2800      	cmp	r0, #0
 8012042:	d1d7      	bne.n	8011ff4 <__gethex+0x22c>
 8012044:	461e      	mov	r6, r3
 8012046:	e78b      	b.n	8011f60 <__gethex+0x198>
 8012048:	f04f 0a03 	mov.w	sl, #3
 801204c:	e7b8      	b.n	8011fc0 <__gethex+0x1f8>
 801204e:	da0a      	bge.n	8012066 <__gethex+0x29e>
 8012050:	1a37      	subs	r7, r6, r0
 8012052:	4621      	mov	r1, r4
 8012054:	ee18 0a10 	vmov	r0, s16
 8012058:	463a      	mov	r2, r7
 801205a:	f000 fcb9 	bl	80129d0 <__lshift>
 801205e:	1bed      	subs	r5, r5, r7
 8012060:	4604      	mov	r4, r0
 8012062:	f100 0914 	add.w	r9, r0, #20
 8012066:	f04f 0a00 	mov.w	sl, #0
 801206a:	e7ae      	b.n	8011fca <__gethex+0x202>
 801206c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012070:	42a8      	cmp	r0, r5
 8012072:	dd72      	ble.n	801215a <__gethex+0x392>
 8012074:	1b45      	subs	r5, r0, r5
 8012076:	42ae      	cmp	r6, r5
 8012078:	dc36      	bgt.n	80120e8 <__gethex+0x320>
 801207a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801207e:	2b02      	cmp	r3, #2
 8012080:	d02a      	beq.n	80120d8 <__gethex+0x310>
 8012082:	2b03      	cmp	r3, #3
 8012084:	d02c      	beq.n	80120e0 <__gethex+0x318>
 8012086:	2b01      	cmp	r3, #1
 8012088:	d11c      	bne.n	80120c4 <__gethex+0x2fc>
 801208a:	42ae      	cmp	r6, r5
 801208c:	d11a      	bne.n	80120c4 <__gethex+0x2fc>
 801208e:	2e01      	cmp	r6, #1
 8012090:	d112      	bne.n	80120b8 <__gethex+0x2f0>
 8012092:	9a04      	ldr	r2, [sp, #16]
 8012094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012098:	6013      	str	r3, [r2, #0]
 801209a:	2301      	movs	r3, #1
 801209c:	6123      	str	r3, [r4, #16]
 801209e:	f8c9 3000 	str.w	r3, [r9]
 80120a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120a4:	2762      	movs	r7, #98	; 0x62
 80120a6:	601c      	str	r4, [r3, #0]
 80120a8:	e723      	b.n	8011ef2 <__gethex+0x12a>
 80120aa:	bf00      	nop
 80120ac:	0802a4dc 	.word	0x0802a4dc
 80120b0:	0802a3e3 	.word	0x0802a3e3
 80120b4:	0802a454 	.word	0x0802a454
 80120b8:	1e71      	subs	r1, r6, #1
 80120ba:	4620      	mov	r0, r4
 80120bc:	f000 fecc 	bl	8012e58 <__any_on>
 80120c0:	2800      	cmp	r0, #0
 80120c2:	d1e6      	bne.n	8012092 <__gethex+0x2ca>
 80120c4:	ee18 0a10 	vmov	r0, s16
 80120c8:	4621      	mov	r1, r4
 80120ca:	f000 fa65 	bl	8012598 <_Bfree>
 80120ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80120d0:	2300      	movs	r3, #0
 80120d2:	6013      	str	r3, [r2, #0]
 80120d4:	2750      	movs	r7, #80	; 0x50
 80120d6:	e70c      	b.n	8011ef2 <__gethex+0x12a>
 80120d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d1f2      	bne.n	80120c4 <__gethex+0x2fc>
 80120de:	e7d8      	b.n	8012092 <__gethex+0x2ca>
 80120e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d1d5      	bne.n	8012092 <__gethex+0x2ca>
 80120e6:	e7ed      	b.n	80120c4 <__gethex+0x2fc>
 80120e8:	1e6f      	subs	r7, r5, #1
 80120ea:	f1ba 0f00 	cmp.w	sl, #0
 80120ee:	d131      	bne.n	8012154 <__gethex+0x38c>
 80120f0:	b127      	cbz	r7, 80120fc <__gethex+0x334>
 80120f2:	4639      	mov	r1, r7
 80120f4:	4620      	mov	r0, r4
 80120f6:	f000 feaf 	bl	8012e58 <__any_on>
 80120fa:	4682      	mov	sl, r0
 80120fc:	117b      	asrs	r3, r7, #5
 80120fe:	2101      	movs	r1, #1
 8012100:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012104:	f007 071f 	and.w	r7, r7, #31
 8012108:	fa01 f707 	lsl.w	r7, r1, r7
 801210c:	421f      	tst	r7, r3
 801210e:	4629      	mov	r1, r5
 8012110:	4620      	mov	r0, r4
 8012112:	bf18      	it	ne
 8012114:	f04a 0a02 	orrne.w	sl, sl, #2
 8012118:	1b76      	subs	r6, r6, r5
 801211a:	f7ff fdee 	bl	8011cfa <rshift>
 801211e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012122:	2702      	movs	r7, #2
 8012124:	f1ba 0f00 	cmp.w	sl, #0
 8012128:	d048      	beq.n	80121bc <__gethex+0x3f4>
 801212a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801212e:	2b02      	cmp	r3, #2
 8012130:	d015      	beq.n	801215e <__gethex+0x396>
 8012132:	2b03      	cmp	r3, #3
 8012134:	d017      	beq.n	8012166 <__gethex+0x39e>
 8012136:	2b01      	cmp	r3, #1
 8012138:	d109      	bne.n	801214e <__gethex+0x386>
 801213a:	f01a 0f02 	tst.w	sl, #2
 801213e:	d006      	beq.n	801214e <__gethex+0x386>
 8012140:	f8d9 0000 	ldr.w	r0, [r9]
 8012144:	ea4a 0a00 	orr.w	sl, sl, r0
 8012148:	f01a 0f01 	tst.w	sl, #1
 801214c:	d10e      	bne.n	801216c <__gethex+0x3a4>
 801214e:	f047 0710 	orr.w	r7, r7, #16
 8012152:	e033      	b.n	80121bc <__gethex+0x3f4>
 8012154:	f04f 0a01 	mov.w	sl, #1
 8012158:	e7d0      	b.n	80120fc <__gethex+0x334>
 801215a:	2701      	movs	r7, #1
 801215c:	e7e2      	b.n	8012124 <__gethex+0x35c>
 801215e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012160:	f1c3 0301 	rsb	r3, r3, #1
 8012164:	9315      	str	r3, [sp, #84]	; 0x54
 8012166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012168:	2b00      	cmp	r3, #0
 801216a:	d0f0      	beq.n	801214e <__gethex+0x386>
 801216c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012170:	f104 0314 	add.w	r3, r4, #20
 8012174:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012178:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801217c:	f04f 0c00 	mov.w	ip, #0
 8012180:	4618      	mov	r0, r3
 8012182:	f853 2b04 	ldr.w	r2, [r3], #4
 8012186:	f1b2 3fff 	cmp.w	r2, #4294967295
 801218a:	d01c      	beq.n	80121c6 <__gethex+0x3fe>
 801218c:	3201      	adds	r2, #1
 801218e:	6002      	str	r2, [r0, #0]
 8012190:	2f02      	cmp	r7, #2
 8012192:	f104 0314 	add.w	r3, r4, #20
 8012196:	d13f      	bne.n	8012218 <__gethex+0x450>
 8012198:	f8d8 2000 	ldr.w	r2, [r8]
 801219c:	3a01      	subs	r2, #1
 801219e:	42b2      	cmp	r2, r6
 80121a0:	d10a      	bne.n	80121b8 <__gethex+0x3f0>
 80121a2:	1171      	asrs	r1, r6, #5
 80121a4:	2201      	movs	r2, #1
 80121a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121aa:	f006 061f 	and.w	r6, r6, #31
 80121ae:	fa02 f606 	lsl.w	r6, r2, r6
 80121b2:	421e      	tst	r6, r3
 80121b4:	bf18      	it	ne
 80121b6:	4617      	movne	r7, r2
 80121b8:	f047 0720 	orr.w	r7, r7, #32
 80121bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80121be:	601c      	str	r4, [r3, #0]
 80121c0:	9b04      	ldr	r3, [sp, #16]
 80121c2:	601d      	str	r5, [r3, #0]
 80121c4:	e695      	b.n	8011ef2 <__gethex+0x12a>
 80121c6:	4299      	cmp	r1, r3
 80121c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80121cc:	d8d8      	bhi.n	8012180 <__gethex+0x3b8>
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	459b      	cmp	fp, r3
 80121d2:	db19      	blt.n	8012208 <__gethex+0x440>
 80121d4:	6861      	ldr	r1, [r4, #4]
 80121d6:	ee18 0a10 	vmov	r0, s16
 80121da:	3101      	adds	r1, #1
 80121dc:	f000 f99c 	bl	8012518 <_Balloc>
 80121e0:	4681      	mov	r9, r0
 80121e2:	b918      	cbnz	r0, 80121ec <__gethex+0x424>
 80121e4:	4b1a      	ldr	r3, [pc, #104]	; (8012250 <__gethex+0x488>)
 80121e6:	4602      	mov	r2, r0
 80121e8:	2184      	movs	r1, #132	; 0x84
 80121ea:	e6a8      	b.n	8011f3e <__gethex+0x176>
 80121ec:	6922      	ldr	r2, [r4, #16]
 80121ee:	3202      	adds	r2, #2
 80121f0:	f104 010c 	add.w	r1, r4, #12
 80121f4:	0092      	lsls	r2, r2, #2
 80121f6:	300c      	adds	r0, #12
 80121f8:	f7fc fd54 	bl	800eca4 <memcpy>
 80121fc:	4621      	mov	r1, r4
 80121fe:	ee18 0a10 	vmov	r0, s16
 8012202:	f000 f9c9 	bl	8012598 <_Bfree>
 8012206:	464c      	mov	r4, r9
 8012208:	6923      	ldr	r3, [r4, #16]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012210:	6122      	str	r2, [r4, #16]
 8012212:	2201      	movs	r2, #1
 8012214:	615a      	str	r2, [r3, #20]
 8012216:	e7bb      	b.n	8012190 <__gethex+0x3c8>
 8012218:	6922      	ldr	r2, [r4, #16]
 801221a:	455a      	cmp	r2, fp
 801221c:	dd0b      	ble.n	8012236 <__gethex+0x46e>
 801221e:	2101      	movs	r1, #1
 8012220:	4620      	mov	r0, r4
 8012222:	f7ff fd6a 	bl	8011cfa <rshift>
 8012226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801222a:	3501      	adds	r5, #1
 801222c:	42ab      	cmp	r3, r5
 801222e:	f6ff aed0 	blt.w	8011fd2 <__gethex+0x20a>
 8012232:	2701      	movs	r7, #1
 8012234:	e7c0      	b.n	80121b8 <__gethex+0x3f0>
 8012236:	f016 061f 	ands.w	r6, r6, #31
 801223a:	d0fa      	beq.n	8012232 <__gethex+0x46a>
 801223c:	4453      	add	r3, sl
 801223e:	f1c6 0620 	rsb	r6, r6, #32
 8012242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012246:	f000 fa59 	bl	80126fc <__hi0bits>
 801224a:	42b0      	cmp	r0, r6
 801224c:	dbe7      	blt.n	801221e <__gethex+0x456>
 801224e:	e7f0      	b.n	8012232 <__gethex+0x46a>
 8012250:	0802a3e3 	.word	0x0802a3e3

08012254 <L_shift>:
 8012254:	f1c2 0208 	rsb	r2, r2, #8
 8012258:	0092      	lsls	r2, r2, #2
 801225a:	b570      	push	{r4, r5, r6, lr}
 801225c:	f1c2 0620 	rsb	r6, r2, #32
 8012260:	6843      	ldr	r3, [r0, #4]
 8012262:	6804      	ldr	r4, [r0, #0]
 8012264:	fa03 f506 	lsl.w	r5, r3, r6
 8012268:	432c      	orrs	r4, r5
 801226a:	40d3      	lsrs	r3, r2
 801226c:	6004      	str	r4, [r0, #0]
 801226e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012272:	4288      	cmp	r0, r1
 8012274:	d3f4      	bcc.n	8012260 <L_shift+0xc>
 8012276:	bd70      	pop	{r4, r5, r6, pc}

08012278 <__match>:
 8012278:	b530      	push	{r4, r5, lr}
 801227a:	6803      	ldr	r3, [r0, #0]
 801227c:	3301      	adds	r3, #1
 801227e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012282:	b914      	cbnz	r4, 801228a <__match+0x12>
 8012284:	6003      	str	r3, [r0, #0]
 8012286:	2001      	movs	r0, #1
 8012288:	bd30      	pop	{r4, r5, pc}
 801228a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801228e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012292:	2d19      	cmp	r5, #25
 8012294:	bf98      	it	ls
 8012296:	3220      	addls	r2, #32
 8012298:	42a2      	cmp	r2, r4
 801229a:	d0f0      	beq.n	801227e <__match+0x6>
 801229c:	2000      	movs	r0, #0
 801229e:	e7f3      	b.n	8012288 <__match+0x10>

080122a0 <__hexnan>:
 80122a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	680b      	ldr	r3, [r1, #0]
 80122a6:	115e      	asrs	r6, r3, #5
 80122a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80122ac:	f013 031f 	ands.w	r3, r3, #31
 80122b0:	b087      	sub	sp, #28
 80122b2:	bf18      	it	ne
 80122b4:	3604      	addne	r6, #4
 80122b6:	2500      	movs	r5, #0
 80122b8:	1f37      	subs	r7, r6, #4
 80122ba:	4690      	mov	r8, r2
 80122bc:	6802      	ldr	r2, [r0, #0]
 80122be:	9301      	str	r3, [sp, #4]
 80122c0:	4682      	mov	sl, r0
 80122c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80122c6:	46b9      	mov	r9, r7
 80122c8:	463c      	mov	r4, r7
 80122ca:	9502      	str	r5, [sp, #8]
 80122cc:	46ab      	mov	fp, r5
 80122ce:	7851      	ldrb	r1, [r2, #1]
 80122d0:	1c53      	adds	r3, r2, #1
 80122d2:	9303      	str	r3, [sp, #12]
 80122d4:	b341      	cbz	r1, 8012328 <__hexnan+0x88>
 80122d6:	4608      	mov	r0, r1
 80122d8:	9205      	str	r2, [sp, #20]
 80122da:	9104      	str	r1, [sp, #16]
 80122dc:	f7ff fd5f 	bl	8011d9e <__hexdig_fun>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d14f      	bne.n	8012384 <__hexnan+0xe4>
 80122e4:	9904      	ldr	r1, [sp, #16]
 80122e6:	9a05      	ldr	r2, [sp, #20]
 80122e8:	2920      	cmp	r1, #32
 80122ea:	d818      	bhi.n	801231e <__hexnan+0x7e>
 80122ec:	9b02      	ldr	r3, [sp, #8]
 80122ee:	459b      	cmp	fp, r3
 80122f0:	dd13      	ble.n	801231a <__hexnan+0x7a>
 80122f2:	454c      	cmp	r4, r9
 80122f4:	d206      	bcs.n	8012304 <__hexnan+0x64>
 80122f6:	2d07      	cmp	r5, #7
 80122f8:	dc04      	bgt.n	8012304 <__hexnan+0x64>
 80122fa:	462a      	mov	r2, r5
 80122fc:	4649      	mov	r1, r9
 80122fe:	4620      	mov	r0, r4
 8012300:	f7ff ffa8 	bl	8012254 <L_shift>
 8012304:	4544      	cmp	r4, r8
 8012306:	d950      	bls.n	80123aa <__hexnan+0x10a>
 8012308:	2300      	movs	r3, #0
 801230a:	f1a4 0904 	sub.w	r9, r4, #4
 801230e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012312:	f8cd b008 	str.w	fp, [sp, #8]
 8012316:	464c      	mov	r4, r9
 8012318:	461d      	mov	r5, r3
 801231a:	9a03      	ldr	r2, [sp, #12]
 801231c:	e7d7      	b.n	80122ce <__hexnan+0x2e>
 801231e:	2929      	cmp	r1, #41	; 0x29
 8012320:	d156      	bne.n	80123d0 <__hexnan+0x130>
 8012322:	3202      	adds	r2, #2
 8012324:	f8ca 2000 	str.w	r2, [sl]
 8012328:	f1bb 0f00 	cmp.w	fp, #0
 801232c:	d050      	beq.n	80123d0 <__hexnan+0x130>
 801232e:	454c      	cmp	r4, r9
 8012330:	d206      	bcs.n	8012340 <__hexnan+0xa0>
 8012332:	2d07      	cmp	r5, #7
 8012334:	dc04      	bgt.n	8012340 <__hexnan+0xa0>
 8012336:	462a      	mov	r2, r5
 8012338:	4649      	mov	r1, r9
 801233a:	4620      	mov	r0, r4
 801233c:	f7ff ff8a 	bl	8012254 <L_shift>
 8012340:	4544      	cmp	r4, r8
 8012342:	d934      	bls.n	80123ae <__hexnan+0x10e>
 8012344:	f1a8 0204 	sub.w	r2, r8, #4
 8012348:	4623      	mov	r3, r4
 801234a:	f853 1b04 	ldr.w	r1, [r3], #4
 801234e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012352:	429f      	cmp	r7, r3
 8012354:	d2f9      	bcs.n	801234a <__hexnan+0xaa>
 8012356:	1b3b      	subs	r3, r7, r4
 8012358:	f023 0303 	bic.w	r3, r3, #3
 801235c:	3304      	adds	r3, #4
 801235e:	3401      	adds	r4, #1
 8012360:	3e03      	subs	r6, #3
 8012362:	42b4      	cmp	r4, r6
 8012364:	bf88      	it	hi
 8012366:	2304      	movhi	r3, #4
 8012368:	4443      	add	r3, r8
 801236a:	2200      	movs	r2, #0
 801236c:	f843 2b04 	str.w	r2, [r3], #4
 8012370:	429f      	cmp	r7, r3
 8012372:	d2fb      	bcs.n	801236c <__hexnan+0xcc>
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	b91b      	cbnz	r3, 8012380 <__hexnan+0xe0>
 8012378:	4547      	cmp	r7, r8
 801237a:	d127      	bne.n	80123cc <__hexnan+0x12c>
 801237c:	2301      	movs	r3, #1
 801237e:	603b      	str	r3, [r7, #0]
 8012380:	2005      	movs	r0, #5
 8012382:	e026      	b.n	80123d2 <__hexnan+0x132>
 8012384:	3501      	adds	r5, #1
 8012386:	2d08      	cmp	r5, #8
 8012388:	f10b 0b01 	add.w	fp, fp, #1
 801238c:	dd06      	ble.n	801239c <__hexnan+0xfc>
 801238e:	4544      	cmp	r4, r8
 8012390:	d9c3      	bls.n	801231a <__hexnan+0x7a>
 8012392:	2300      	movs	r3, #0
 8012394:	f844 3c04 	str.w	r3, [r4, #-4]
 8012398:	2501      	movs	r5, #1
 801239a:	3c04      	subs	r4, #4
 801239c:	6822      	ldr	r2, [r4, #0]
 801239e:	f000 000f 	and.w	r0, r0, #15
 80123a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80123a6:	6022      	str	r2, [r4, #0]
 80123a8:	e7b7      	b.n	801231a <__hexnan+0x7a>
 80123aa:	2508      	movs	r5, #8
 80123ac:	e7b5      	b.n	801231a <__hexnan+0x7a>
 80123ae:	9b01      	ldr	r3, [sp, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d0df      	beq.n	8012374 <__hexnan+0xd4>
 80123b4:	f04f 32ff 	mov.w	r2, #4294967295
 80123b8:	f1c3 0320 	rsb	r3, r3, #32
 80123bc:	fa22 f303 	lsr.w	r3, r2, r3
 80123c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80123c4:	401a      	ands	r2, r3
 80123c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80123ca:	e7d3      	b.n	8012374 <__hexnan+0xd4>
 80123cc:	3f04      	subs	r7, #4
 80123ce:	e7d1      	b.n	8012374 <__hexnan+0xd4>
 80123d0:	2004      	movs	r0, #4
 80123d2:	b007      	add	sp, #28
 80123d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123d8 <_localeconv_r>:
 80123d8:	4800      	ldr	r0, [pc, #0]	; (80123dc <_localeconv_r+0x4>)
 80123da:	4770      	bx	lr
 80123dc:	20000234 	.word	0x20000234

080123e0 <__retarget_lock_init_recursive>:
 80123e0:	4770      	bx	lr

080123e2 <__retarget_lock_acquire_recursive>:
 80123e2:	4770      	bx	lr

080123e4 <__retarget_lock_release_recursive>:
 80123e4:	4770      	bx	lr

080123e6 <__swhatbuf_r>:
 80123e6:	b570      	push	{r4, r5, r6, lr}
 80123e8:	460e      	mov	r6, r1
 80123ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ee:	2900      	cmp	r1, #0
 80123f0:	b096      	sub	sp, #88	; 0x58
 80123f2:	4614      	mov	r4, r2
 80123f4:	461d      	mov	r5, r3
 80123f6:	da08      	bge.n	801240a <__swhatbuf_r+0x24>
 80123f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80123fc:	2200      	movs	r2, #0
 80123fe:	602a      	str	r2, [r5, #0]
 8012400:	061a      	lsls	r2, r3, #24
 8012402:	d410      	bmi.n	8012426 <__swhatbuf_r+0x40>
 8012404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012408:	e00e      	b.n	8012428 <__swhatbuf_r+0x42>
 801240a:	466a      	mov	r2, sp
 801240c:	f001 f8aa 	bl	8013564 <_fstat_r>
 8012410:	2800      	cmp	r0, #0
 8012412:	dbf1      	blt.n	80123f8 <__swhatbuf_r+0x12>
 8012414:	9a01      	ldr	r2, [sp, #4]
 8012416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801241a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801241e:	425a      	negs	r2, r3
 8012420:	415a      	adcs	r2, r3
 8012422:	602a      	str	r2, [r5, #0]
 8012424:	e7ee      	b.n	8012404 <__swhatbuf_r+0x1e>
 8012426:	2340      	movs	r3, #64	; 0x40
 8012428:	2000      	movs	r0, #0
 801242a:	6023      	str	r3, [r4, #0]
 801242c:	b016      	add	sp, #88	; 0x58
 801242e:	bd70      	pop	{r4, r5, r6, pc}

08012430 <__smakebuf_r>:
 8012430:	898b      	ldrh	r3, [r1, #12]
 8012432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012434:	079d      	lsls	r5, r3, #30
 8012436:	4606      	mov	r6, r0
 8012438:	460c      	mov	r4, r1
 801243a:	d507      	bpl.n	801244c <__smakebuf_r+0x1c>
 801243c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012440:	6023      	str	r3, [r4, #0]
 8012442:	6123      	str	r3, [r4, #16]
 8012444:	2301      	movs	r3, #1
 8012446:	6163      	str	r3, [r4, #20]
 8012448:	b002      	add	sp, #8
 801244a:	bd70      	pop	{r4, r5, r6, pc}
 801244c:	ab01      	add	r3, sp, #4
 801244e:	466a      	mov	r2, sp
 8012450:	f7ff ffc9 	bl	80123e6 <__swhatbuf_r>
 8012454:	9900      	ldr	r1, [sp, #0]
 8012456:	4605      	mov	r5, r0
 8012458:	4630      	mov	r0, r6
 801245a:	f000 fda1 	bl	8012fa0 <_malloc_r>
 801245e:	b948      	cbnz	r0, 8012474 <__smakebuf_r+0x44>
 8012460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012464:	059a      	lsls	r2, r3, #22
 8012466:	d4ef      	bmi.n	8012448 <__smakebuf_r+0x18>
 8012468:	f023 0303 	bic.w	r3, r3, #3
 801246c:	f043 0302 	orr.w	r3, r3, #2
 8012470:	81a3      	strh	r3, [r4, #12]
 8012472:	e7e3      	b.n	801243c <__smakebuf_r+0xc>
 8012474:	4b0d      	ldr	r3, [pc, #52]	; (80124ac <__smakebuf_r+0x7c>)
 8012476:	62b3      	str	r3, [r6, #40]	; 0x28
 8012478:	89a3      	ldrh	r3, [r4, #12]
 801247a:	6020      	str	r0, [r4, #0]
 801247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012480:	81a3      	strh	r3, [r4, #12]
 8012482:	9b00      	ldr	r3, [sp, #0]
 8012484:	6163      	str	r3, [r4, #20]
 8012486:	9b01      	ldr	r3, [sp, #4]
 8012488:	6120      	str	r0, [r4, #16]
 801248a:	b15b      	cbz	r3, 80124a4 <__smakebuf_r+0x74>
 801248c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012490:	4630      	mov	r0, r6
 8012492:	f001 f879 	bl	8013588 <_isatty_r>
 8012496:	b128      	cbz	r0, 80124a4 <__smakebuf_r+0x74>
 8012498:	89a3      	ldrh	r3, [r4, #12]
 801249a:	f023 0303 	bic.w	r3, r3, #3
 801249e:	f043 0301 	orr.w	r3, r3, #1
 80124a2:	81a3      	strh	r3, [r4, #12]
 80124a4:	89a0      	ldrh	r0, [r4, #12]
 80124a6:	4305      	orrs	r5, r0
 80124a8:	81a5      	strh	r5, [r4, #12]
 80124aa:	e7cd      	b.n	8012448 <__smakebuf_r+0x18>
 80124ac:	08011b59 	.word	0x08011b59

080124b0 <malloc>:
 80124b0:	4b02      	ldr	r3, [pc, #8]	; (80124bc <malloc+0xc>)
 80124b2:	4601      	mov	r1, r0
 80124b4:	6818      	ldr	r0, [r3, #0]
 80124b6:	f000 bd73 	b.w	8012fa0 <_malloc_r>
 80124ba:	bf00      	nop
 80124bc:	200000dc 	.word	0x200000dc

080124c0 <__ascii_mbtowc>:
 80124c0:	b082      	sub	sp, #8
 80124c2:	b901      	cbnz	r1, 80124c6 <__ascii_mbtowc+0x6>
 80124c4:	a901      	add	r1, sp, #4
 80124c6:	b142      	cbz	r2, 80124da <__ascii_mbtowc+0x1a>
 80124c8:	b14b      	cbz	r3, 80124de <__ascii_mbtowc+0x1e>
 80124ca:	7813      	ldrb	r3, [r2, #0]
 80124cc:	600b      	str	r3, [r1, #0]
 80124ce:	7812      	ldrb	r2, [r2, #0]
 80124d0:	1e10      	subs	r0, r2, #0
 80124d2:	bf18      	it	ne
 80124d4:	2001      	movne	r0, #1
 80124d6:	b002      	add	sp, #8
 80124d8:	4770      	bx	lr
 80124da:	4610      	mov	r0, r2
 80124dc:	e7fb      	b.n	80124d6 <__ascii_mbtowc+0x16>
 80124de:	f06f 0001 	mvn.w	r0, #1
 80124e2:	e7f8      	b.n	80124d6 <__ascii_mbtowc+0x16>

080124e4 <memmove>:
 80124e4:	4288      	cmp	r0, r1
 80124e6:	b510      	push	{r4, lr}
 80124e8:	eb01 0402 	add.w	r4, r1, r2
 80124ec:	d902      	bls.n	80124f4 <memmove+0x10>
 80124ee:	4284      	cmp	r4, r0
 80124f0:	4623      	mov	r3, r4
 80124f2:	d807      	bhi.n	8012504 <memmove+0x20>
 80124f4:	1e43      	subs	r3, r0, #1
 80124f6:	42a1      	cmp	r1, r4
 80124f8:	d008      	beq.n	801250c <memmove+0x28>
 80124fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012502:	e7f8      	b.n	80124f6 <memmove+0x12>
 8012504:	4402      	add	r2, r0
 8012506:	4601      	mov	r1, r0
 8012508:	428a      	cmp	r2, r1
 801250a:	d100      	bne.n	801250e <memmove+0x2a>
 801250c:	bd10      	pop	{r4, pc}
 801250e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012516:	e7f7      	b.n	8012508 <memmove+0x24>

08012518 <_Balloc>:
 8012518:	b570      	push	{r4, r5, r6, lr}
 801251a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801251c:	4604      	mov	r4, r0
 801251e:	460d      	mov	r5, r1
 8012520:	b976      	cbnz	r6, 8012540 <_Balloc+0x28>
 8012522:	2010      	movs	r0, #16
 8012524:	f7ff ffc4 	bl	80124b0 <malloc>
 8012528:	4602      	mov	r2, r0
 801252a:	6260      	str	r0, [r4, #36]	; 0x24
 801252c:	b920      	cbnz	r0, 8012538 <_Balloc+0x20>
 801252e:	4b18      	ldr	r3, [pc, #96]	; (8012590 <_Balloc+0x78>)
 8012530:	4818      	ldr	r0, [pc, #96]	; (8012594 <_Balloc+0x7c>)
 8012532:	2166      	movs	r1, #102	; 0x66
 8012534:	f7fc fb5c 	bl	800ebf0 <__assert_func>
 8012538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801253c:	6006      	str	r6, [r0, #0]
 801253e:	60c6      	str	r6, [r0, #12]
 8012540:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012542:	68f3      	ldr	r3, [r6, #12]
 8012544:	b183      	cbz	r3, 8012568 <_Balloc+0x50>
 8012546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801254e:	b9b8      	cbnz	r0, 8012580 <_Balloc+0x68>
 8012550:	2101      	movs	r1, #1
 8012552:	fa01 f605 	lsl.w	r6, r1, r5
 8012556:	1d72      	adds	r2, r6, #5
 8012558:	0092      	lsls	r2, r2, #2
 801255a:	4620      	mov	r0, r4
 801255c:	f000 fc9d 	bl	8012e9a <_calloc_r>
 8012560:	b160      	cbz	r0, 801257c <_Balloc+0x64>
 8012562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012566:	e00e      	b.n	8012586 <_Balloc+0x6e>
 8012568:	2221      	movs	r2, #33	; 0x21
 801256a:	2104      	movs	r1, #4
 801256c:	4620      	mov	r0, r4
 801256e:	f000 fc94 	bl	8012e9a <_calloc_r>
 8012572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012574:	60f0      	str	r0, [r6, #12]
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d1e4      	bne.n	8012546 <_Balloc+0x2e>
 801257c:	2000      	movs	r0, #0
 801257e:	bd70      	pop	{r4, r5, r6, pc}
 8012580:	6802      	ldr	r2, [r0, #0]
 8012582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012586:	2300      	movs	r3, #0
 8012588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801258c:	e7f7      	b.n	801257e <_Balloc+0x66>
 801258e:	bf00      	nop
 8012590:	0802a34e 	.word	0x0802a34e
 8012594:	0802a4f0 	.word	0x0802a4f0

08012598 <_Bfree>:
 8012598:	b570      	push	{r4, r5, r6, lr}
 801259a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801259c:	4605      	mov	r5, r0
 801259e:	460c      	mov	r4, r1
 80125a0:	b976      	cbnz	r6, 80125c0 <_Bfree+0x28>
 80125a2:	2010      	movs	r0, #16
 80125a4:	f7ff ff84 	bl	80124b0 <malloc>
 80125a8:	4602      	mov	r2, r0
 80125aa:	6268      	str	r0, [r5, #36]	; 0x24
 80125ac:	b920      	cbnz	r0, 80125b8 <_Bfree+0x20>
 80125ae:	4b09      	ldr	r3, [pc, #36]	; (80125d4 <_Bfree+0x3c>)
 80125b0:	4809      	ldr	r0, [pc, #36]	; (80125d8 <_Bfree+0x40>)
 80125b2:	218a      	movs	r1, #138	; 0x8a
 80125b4:	f7fc fb1c 	bl	800ebf0 <__assert_func>
 80125b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125bc:	6006      	str	r6, [r0, #0]
 80125be:	60c6      	str	r6, [r0, #12]
 80125c0:	b13c      	cbz	r4, 80125d2 <_Bfree+0x3a>
 80125c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80125c4:	6862      	ldr	r2, [r4, #4]
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80125cc:	6021      	str	r1, [r4, #0]
 80125ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80125d2:	bd70      	pop	{r4, r5, r6, pc}
 80125d4:	0802a34e 	.word	0x0802a34e
 80125d8:	0802a4f0 	.word	0x0802a4f0

080125dc <__multadd>:
 80125dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e0:	690d      	ldr	r5, [r1, #16]
 80125e2:	4607      	mov	r7, r0
 80125e4:	460c      	mov	r4, r1
 80125e6:	461e      	mov	r6, r3
 80125e8:	f101 0c14 	add.w	ip, r1, #20
 80125ec:	2000      	movs	r0, #0
 80125ee:	f8dc 3000 	ldr.w	r3, [ip]
 80125f2:	b299      	uxth	r1, r3
 80125f4:	fb02 6101 	mla	r1, r2, r1, r6
 80125f8:	0c1e      	lsrs	r6, r3, #16
 80125fa:	0c0b      	lsrs	r3, r1, #16
 80125fc:	fb02 3306 	mla	r3, r2, r6, r3
 8012600:	b289      	uxth	r1, r1
 8012602:	3001      	adds	r0, #1
 8012604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012608:	4285      	cmp	r5, r0
 801260a:	f84c 1b04 	str.w	r1, [ip], #4
 801260e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012612:	dcec      	bgt.n	80125ee <__multadd+0x12>
 8012614:	b30e      	cbz	r6, 801265a <__multadd+0x7e>
 8012616:	68a3      	ldr	r3, [r4, #8]
 8012618:	42ab      	cmp	r3, r5
 801261a:	dc19      	bgt.n	8012650 <__multadd+0x74>
 801261c:	6861      	ldr	r1, [r4, #4]
 801261e:	4638      	mov	r0, r7
 8012620:	3101      	adds	r1, #1
 8012622:	f7ff ff79 	bl	8012518 <_Balloc>
 8012626:	4680      	mov	r8, r0
 8012628:	b928      	cbnz	r0, 8012636 <__multadd+0x5a>
 801262a:	4602      	mov	r2, r0
 801262c:	4b0c      	ldr	r3, [pc, #48]	; (8012660 <__multadd+0x84>)
 801262e:	480d      	ldr	r0, [pc, #52]	; (8012664 <__multadd+0x88>)
 8012630:	21b5      	movs	r1, #181	; 0xb5
 8012632:	f7fc fadd 	bl	800ebf0 <__assert_func>
 8012636:	6922      	ldr	r2, [r4, #16]
 8012638:	3202      	adds	r2, #2
 801263a:	f104 010c 	add.w	r1, r4, #12
 801263e:	0092      	lsls	r2, r2, #2
 8012640:	300c      	adds	r0, #12
 8012642:	f7fc fb2f 	bl	800eca4 <memcpy>
 8012646:	4621      	mov	r1, r4
 8012648:	4638      	mov	r0, r7
 801264a:	f7ff ffa5 	bl	8012598 <_Bfree>
 801264e:	4644      	mov	r4, r8
 8012650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012654:	3501      	adds	r5, #1
 8012656:	615e      	str	r6, [r3, #20]
 8012658:	6125      	str	r5, [r4, #16]
 801265a:	4620      	mov	r0, r4
 801265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012660:	0802a3e3 	.word	0x0802a3e3
 8012664:	0802a4f0 	.word	0x0802a4f0

08012668 <__s2b>:
 8012668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801266c:	460c      	mov	r4, r1
 801266e:	4615      	mov	r5, r2
 8012670:	461f      	mov	r7, r3
 8012672:	2209      	movs	r2, #9
 8012674:	3308      	adds	r3, #8
 8012676:	4606      	mov	r6, r0
 8012678:	fb93 f3f2 	sdiv	r3, r3, r2
 801267c:	2100      	movs	r1, #0
 801267e:	2201      	movs	r2, #1
 8012680:	429a      	cmp	r2, r3
 8012682:	db09      	blt.n	8012698 <__s2b+0x30>
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff ff47 	bl	8012518 <_Balloc>
 801268a:	b940      	cbnz	r0, 801269e <__s2b+0x36>
 801268c:	4602      	mov	r2, r0
 801268e:	4b19      	ldr	r3, [pc, #100]	; (80126f4 <__s2b+0x8c>)
 8012690:	4819      	ldr	r0, [pc, #100]	; (80126f8 <__s2b+0x90>)
 8012692:	21ce      	movs	r1, #206	; 0xce
 8012694:	f7fc faac 	bl	800ebf0 <__assert_func>
 8012698:	0052      	lsls	r2, r2, #1
 801269a:	3101      	adds	r1, #1
 801269c:	e7f0      	b.n	8012680 <__s2b+0x18>
 801269e:	9b08      	ldr	r3, [sp, #32]
 80126a0:	6143      	str	r3, [r0, #20]
 80126a2:	2d09      	cmp	r5, #9
 80126a4:	f04f 0301 	mov.w	r3, #1
 80126a8:	6103      	str	r3, [r0, #16]
 80126aa:	dd16      	ble.n	80126da <__s2b+0x72>
 80126ac:	f104 0909 	add.w	r9, r4, #9
 80126b0:	46c8      	mov	r8, r9
 80126b2:	442c      	add	r4, r5
 80126b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80126b8:	4601      	mov	r1, r0
 80126ba:	3b30      	subs	r3, #48	; 0x30
 80126bc:	220a      	movs	r2, #10
 80126be:	4630      	mov	r0, r6
 80126c0:	f7ff ff8c 	bl	80125dc <__multadd>
 80126c4:	45a0      	cmp	r8, r4
 80126c6:	d1f5      	bne.n	80126b4 <__s2b+0x4c>
 80126c8:	f1a5 0408 	sub.w	r4, r5, #8
 80126cc:	444c      	add	r4, r9
 80126ce:	1b2d      	subs	r5, r5, r4
 80126d0:	1963      	adds	r3, r4, r5
 80126d2:	42bb      	cmp	r3, r7
 80126d4:	db04      	blt.n	80126e0 <__s2b+0x78>
 80126d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126da:	340a      	adds	r4, #10
 80126dc:	2509      	movs	r5, #9
 80126de:	e7f6      	b.n	80126ce <__s2b+0x66>
 80126e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80126e4:	4601      	mov	r1, r0
 80126e6:	3b30      	subs	r3, #48	; 0x30
 80126e8:	220a      	movs	r2, #10
 80126ea:	4630      	mov	r0, r6
 80126ec:	f7ff ff76 	bl	80125dc <__multadd>
 80126f0:	e7ee      	b.n	80126d0 <__s2b+0x68>
 80126f2:	bf00      	nop
 80126f4:	0802a3e3 	.word	0x0802a3e3
 80126f8:	0802a4f0 	.word	0x0802a4f0

080126fc <__hi0bits>:
 80126fc:	0c03      	lsrs	r3, r0, #16
 80126fe:	041b      	lsls	r3, r3, #16
 8012700:	b9d3      	cbnz	r3, 8012738 <__hi0bits+0x3c>
 8012702:	0400      	lsls	r0, r0, #16
 8012704:	2310      	movs	r3, #16
 8012706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801270a:	bf04      	itt	eq
 801270c:	0200      	lsleq	r0, r0, #8
 801270e:	3308      	addeq	r3, #8
 8012710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012714:	bf04      	itt	eq
 8012716:	0100      	lsleq	r0, r0, #4
 8012718:	3304      	addeq	r3, #4
 801271a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801271e:	bf04      	itt	eq
 8012720:	0080      	lsleq	r0, r0, #2
 8012722:	3302      	addeq	r3, #2
 8012724:	2800      	cmp	r0, #0
 8012726:	db05      	blt.n	8012734 <__hi0bits+0x38>
 8012728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801272c:	f103 0301 	add.w	r3, r3, #1
 8012730:	bf08      	it	eq
 8012732:	2320      	moveq	r3, #32
 8012734:	4618      	mov	r0, r3
 8012736:	4770      	bx	lr
 8012738:	2300      	movs	r3, #0
 801273a:	e7e4      	b.n	8012706 <__hi0bits+0xa>

0801273c <__lo0bits>:
 801273c:	6803      	ldr	r3, [r0, #0]
 801273e:	f013 0207 	ands.w	r2, r3, #7
 8012742:	4601      	mov	r1, r0
 8012744:	d00b      	beq.n	801275e <__lo0bits+0x22>
 8012746:	07da      	lsls	r2, r3, #31
 8012748:	d423      	bmi.n	8012792 <__lo0bits+0x56>
 801274a:	0798      	lsls	r0, r3, #30
 801274c:	bf49      	itett	mi
 801274e:	085b      	lsrmi	r3, r3, #1
 8012750:	089b      	lsrpl	r3, r3, #2
 8012752:	2001      	movmi	r0, #1
 8012754:	600b      	strmi	r3, [r1, #0]
 8012756:	bf5c      	itt	pl
 8012758:	600b      	strpl	r3, [r1, #0]
 801275a:	2002      	movpl	r0, #2
 801275c:	4770      	bx	lr
 801275e:	b298      	uxth	r0, r3
 8012760:	b9a8      	cbnz	r0, 801278e <__lo0bits+0x52>
 8012762:	0c1b      	lsrs	r3, r3, #16
 8012764:	2010      	movs	r0, #16
 8012766:	b2da      	uxtb	r2, r3
 8012768:	b90a      	cbnz	r2, 801276e <__lo0bits+0x32>
 801276a:	3008      	adds	r0, #8
 801276c:	0a1b      	lsrs	r3, r3, #8
 801276e:	071a      	lsls	r2, r3, #28
 8012770:	bf04      	itt	eq
 8012772:	091b      	lsreq	r3, r3, #4
 8012774:	3004      	addeq	r0, #4
 8012776:	079a      	lsls	r2, r3, #30
 8012778:	bf04      	itt	eq
 801277a:	089b      	lsreq	r3, r3, #2
 801277c:	3002      	addeq	r0, #2
 801277e:	07da      	lsls	r2, r3, #31
 8012780:	d403      	bmi.n	801278a <__lo0bits+0x4e>
 8012782:	085b      	lsrs	r3, r3, #1
 8012784:	f100 0001 	add.w	r0, r0, #1
 8012788:	d005      	beq.n	8012796 <__lo0bits+0x5a>
 801278a:	600b      	str	r3, [r1, #0]
 801278c:	4770      	bx	lr
 801278e:	4610      	mov	r0, r2
 8012790:	e7e9      	b.n	8012766 <__lo0bits+0x2a>
 8012792:	2000      	movs	r0, #0
 8012794:	4770      	bx	lr
 8012796:	2020      	movs	r0, #32
 8012798:	4770      	bx	lr
	...

0801279c <__i2b>:
 801279c:	b510      	push	{r4, lr}
 801279e:	460c      	mov	r4, r1
 80127a0:	2101      	movs	r1, #1
 80127a2:	f7ff feb9 	bl	8012518 <_Balloc>
 80127a6:	4602      	mov	r2, r0
 80127a8:	b928      	cbnz	r0, 80127b6 <__i2b+0x1a>
 80127aa:	4b05      	ldr	r3, [pc, #20]	; (80127c0 <__i2b+0x24>)
 80127ac:	4805      	ldr	r0, [pc, #20]	; (80127c4 <__i2b+0x28>)
 80127ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80127b2:	f7fc fa1d 	bl	800ebf0 <__assert_func>
 80127b6:	2301      	movs	r3, #1
 80127b8:	6144      	str	r4, [r0, #20]
 80127ba:	6103      	str	r3, [r0, #16]
 80127bc:	bd10      	pop	{r4, pc}
 80127be:	bf00      	nop
 80127c0:	0802a3e3 	.word	0x0802a3e3
 80127c4:	0802a4f0 	.word	0x0802a4f0

080127c8 <__multiply>:
 80127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127cc:	4691      	mov	r9, r2
 80127ce:	690a      	ldr	r2, [r1, #16]
 80127d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	bfb8      	it	lt
 80127d8:	460b      	movlt	r3, r1
 80127da:	460c      	mov	r4, r1
 80127dc:	bfbc      	itt	lt
 80127de:	464c      	movlt	r4, r9
 80127e0:	4699      	movlt	r9, r3
 80127e2:	6927      	ldr	r7, [r4, #16]
 80127e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80127e8:	68a3      	ldr	r3, [r4, #8]
 80127ea:	6861      	ldr	r1, [r4, #4]
 80127ec:	eb07 060a 	add.w	r6, r7, sl
 80127f0:	42b3      	cmp	r3, r6
 80127f2:	b085      	sub	sp, #20
 80127f4:	bfb8      	it	lt
 80127f6:	3101      	addlt	r1, #1
 80127f8:	f7ff fe8e 	bl	8012518 <_Balloc>
 80127fc:	b930      	cbnz	r0, 801280c <__multiply+0x44>
 80127fe:	4602      	mov	r2, r0
 8012800:	4b44      	ldr	r3, [pc, #272]	; (8012914 <__multiply+0x14c>)
 8012802:	4845      	ldr	r0, [pc, #276]	; (8012918 <__multiply+0x150>)
 8012804:	f240 115d 	movw	r1, #349	; 0x15d
 8012808:	f7fc f9f2 	bl	800ebf0 <__assert_func>
 801280c:	f100 0514 	add.w	r5, r0, #20
 8012810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012814:	462b      	mov	r3, r5
 8012816:	2200      	movs	r2, #0
 8012818:	4543      	cmp	r3, r8
 801281a:	d321      	bcc.n	8012860 <__multiply+0x98>
 801281c:	f104 0314 	add.w	r3, r4, #20
 8012820:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012824:	f109 0314 	add.w	r3, r9, #20
 8012828:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801282c:	9202      	str	r2, [sp, #8]
 801282e:	1b3a      	subs	r2, r7, r4
 8012830:	3a15      	subs	r2, #21
 8012832:	f022 0203 	bic.w	r2, r2, #3
 8012836:	3204      	adds	r2, #4
 8012838:	f104 0115 	add.w	r1, r4, #21
 801283c:	428f      	cmp	r7, r1
 801283e:	bf38      	it	cc
 8012840:	2204      	movcc	r2, #4
 8012842:	9201      	str	r2, [sp, #4]
 8012844:	9a02      	ldr	r2, [sp, #8]
 8012846:	9303      	str	r3, [sp, #12]
 8012848:	429a      	cmp	r2, r3
 801284a:	d80c      	bhi.n	8012866 <__multiply+0x9e>
 801284c:	2e00      	cmp	r6, #0
 801284e:	dd03      	ble.n	8012858 <__multiply+0x90>
 8012850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012854:	2b00      	cmp	r3, #0
 8012856:	d05a      	beq.n	801290e <__multiply+0x146>
 8012858:	6106      	str	r6, [r0, #16]
 801285a:	b005      	add	sp, #20
 801285c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012860:	f843 2b04 	str.w	r2, [r3], #4
 8012864:	e7d8      	b.n	8012818 <__multiply+0x50>
 8012866:	f8b3 a000 	ldrh.w	sl, [r3]
 801286a:	f1ba 0f00 	cmp.w	sl, #0
 801286e:	d024      	beq.n	80128ba <__multiply+0xf2>
 8012870:	f104 0e14 	add.w	lr, r4, #20
 8012874:	46a9      	mov	r9, r5
 8012876:	f04f 0c00 	mov.w	ip, #0
 801287a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801287e:	f8d9 1000 	ldr.w	r1, [r9]
 8012882:	fa1f fb82 	uxth.w	fp, r2
 8012886:	b289      	uxth	r1, r1
 8012888:	fb0a 110b 	mla	r1, sl, fp, r1
 801288c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012890:	f8d9 2000 	ldr.w	r2, [r9]
 8012894:	4461      	add	r1, ip
 8012896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801289a:	fb0a c20b 	mla	r2, sl, fp, ip
 801289e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80128a2:	b289      	uxth	r1, r1
 80128a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80128a8:	4577      	cmp	r7, lr
 80128aa:	f849 1b04 	str.w	r1, [r9], #4
 80128ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128b2:	d8e2      	bhi.n	801287a <__multiply+0xb2>
 80128b4:	9a01      	ldr	r2, [sp, #4]
 80128b6:	f845 c002 	str.w	ip, [r5, r2]
 80128ba:	9a03      	ldr	r2, [sp, #12]
 80128bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80128c0:	3304      	adds	r3, #4
 80128c2:	f1b9 0f00 	cmp.w	r9, #0
 80128c6:	d020      	beq.n	801290a <__multiply+0x142>
 80128c8:	6829      	ldr	r1, [r5, #0]
 80128ca:	f104 0c14 	add.w	ip, r4, #20
 80128ce:	46ae      	mov	lr, r5
 80128d0:	f04f 0a00 	mov.w	sl, #0
 80128d4:	f8bc b000 	ldrh.w	fp, [ip]
 80128d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80128dc:	fb09 220b 	mla	r2, r9, fp, r2
 80128e0:	4492      	add	sl, r2
 80128e2:	b289      	uxth	r1, r1
 80128e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80128e8:	f84e 1b04 	str.w	r1, [lr], #4
 80128ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80128f0:	f8be 1000 	ldrh.w	r1, [lr]
 80128f4:	0c12      	lsrs	r2, r2, #16
 80128f6:	fb09 1102 	mla	r1, r9, r2, r1
 80128fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80128fe:	4567      	cmp	r7, ip
 8012900:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012904:	d8e6      	bhi.n	80128d4 <__multiply+0x10c>
 8012906:	9a01      	ldr	r2, [sp, #4]
 8012908:	50a9      	str	r1, [r5, r2]
 801290a:	3504      	adds	r5, #4
 801290c:	e79a      	b.n	8012844 <__multiply+0x7c>
 801290e:	3e01      	subs	r6, #1
 8012910:	e79c      	b.n	801284c <__multiply+0x84>
 8012912:	bf00      	nop
 8012914:	0802a3e3 	.word	0x0802a3e3
 8012918:	0802a4f0 	.word	0x0802a4f0

0801291c <__pow5mult>:
 801291c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012920:	4615      	mov	r5, r2
 8012922:	f012 0203 	ands.w	r2, r2, #3
 8012926:	4606      	mov	r6, r0
 8012928:	460f      	mov	r7, r1
 801292a:	d007      	beq.n	801293c <__pow5mult+0x20>
 801292c:	4c25      	ldr	r4, [pc, #148]	; (80129c4 <__pow5mult+0xa8>)
 801292e:	3a01      	subs	r2, #1
 8012930:	2300      	movs	r3, #0
 8012932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012936:	f7ff fe51 	bl	80125dc <__multadd>
 801293a:	4607      	mov	r7, r0
 801293c:	10ad      	asrs	r5, r5, #2
 801293e:	d03d      	beq.n	80129bc <__pow5mult+0xa0>
 8012940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012942:	b97c      	cbnz	r4, 8012964 <__pow5mult+0x48>
 8012944:	2010      	movs	r0, #16
 8012946:	f7ff fdb3 	bl	80124b0 <malloc>
 801294a:	4602      	mov	r2, r0
 801294c:	6270      	str	r0, [r6, #36]	; 0x24
 801294e:	b928      	cbnz	r0, 801295c <__pow5mult+0x40>
 8012950:	4b1d      	ldr	r3, [pc, #116]	; (80129c8 <__pow5mult+0xac>)
 8012952:	481e      	ldr	r0, [pc, #120]	; (80129cc <__pow5mult+0xb0>)
 8012954:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012958:	f7fc f94a 	bl	800ebf0 <__assert_func>
 801295c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012960:	6004      	str	r4, [r0, #0]
 8012962:	60c4      	str	r4, [r0, #12]
 8012964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801296c:	b94c      	cbnz	r4, 8012982 <__pow5mult+0x66>
 801296e:	f240 2171 	movw	r1, #625	; 0x271
 8012972:	4630      	mov	r0, r6
 8012974:	f7ff ff12 	bl	801279c <__i2b>
 8012978:	2300      	movs	r3, #0
 801297a:	f8c8 0008 	str.w	r0, [r8, #8]
 801297e:	4604      	mov	r4, r0
 8012980:	6003      	str	r3, [r0, #0]
 8012982:	f04f 0900 	mov.w	r9, #0
 8012986:	07eb      	lsls	r3, r5, #31
 8012988:	d50a      	bpl.n	80129a0 <__pow5mult+0x84>
 801298a:	4639      	mov	r1, r7
 801298c:	4622      	mov	r2, r4
 801298e:	4630      	mov	r0, r6
 8012990:	f7ff ff1a 	bl	80127c8 <__multiply>
 8012994:	4639      	mov	r1, r7
 8012996:	4680      	mov	r8, r0
 8012998:	4630      	mov	r0, r6
 801299a:	f7ff fdfd 	bl	8012598 <_Bfree>
 801299e:	4647      	mov	r7, r8
 80129a0:	106d      	asrs	r5, r5, #1
 80129a2:	d00b      	beq.n	80129bc <__pow5mult+0xa0>
 80129a4:	6820      	ldr	r0, [r4, #0]
 80129a6:	b938      	cbnz	r0, 80129b8 <__pow5mult+0x9c>
 80129a8:	4622      	mov	r2, r4
 80129aa:	4621      	mov	r1, r4
 80129ac:	4630      	mov	r0, r6
 80129ae:	f7ff ff0b 	bl	80127c8 <__multiply>
 80129b2:	6020      	str	r0, [r4, #0]
 80129b4:	f8c0 9000 	str.w	r9, [r0]
 80129b8:	4604      	mov	r4, r0
 80129ba:	e7e4      	b.n	8012986 <__pow5mult+0x6a>
 80129bc:	4638      	mov	r0, r7
 80129be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129c2:	bf00      	nop
 80129c4:	0802a660 	.word	0x0802a660
 80129c8:	0802a34e 	.word	0x0802a34e
 80129cc:	0802a4f0 	.word	0x0802a4f0

080129d0 <__lshift>:
 80129d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129d4:	460c      	mov	r4, r1
 80129d6:	6849      	ldr	r1, [r1, #4]
 80129d8:	6923      	ldr	r3, [r4, #16]
 80129da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80129de:	68a3      	ldr	r3, [r4, #8]
 80129e0:	4607      	mov	r7, r0
 80129e2:	4691      	mov	r9, r2
 80129e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80129e8:	f108 0601 	add.w	r6, r8, #1
 80129ec:	42b3      	cmp	r3, r6
 80129ee:	db0b      	blt.n	8012a08 <__lshift+0x38>
 80129f0:	4638      	mov	r0, r7
 80129f2:	f7ff fd91 	bl	8012518 <_Balloc>
 80129f6:	4605      	mov	r5, r0
 80129f8:	b948      	cbnz	r0, 8012a0e <__lshift+0x3e>
 80129fa:	4602      	mov	r2, r0
 80129fc:	4b2a      	ldr	r3, [pc, #168]	; (8012aa8 <__lshift+0xd8>)
 80129fe:	482b      	ldr	r0, [pc, #172]	; (8012aac <__lshift+0xdc>)
 8012a00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a04:	f7fc f8f4 	bl	800ebf0 <__assert_func>
 8012a08:	3101      	adds	r1, #1
 8012a0a:	005b      	lsls	r3, r3, #1
 8012a0c:	e7ee      	b.n	80129ec <__lshift+0x1c>
 8012a0e:	2300      	movs	r3, #0
 8012a10:	f100 0114 	add.w	r1, r0, #20
 8012a14:	f100 0210 	add.w	r2, r0, #16
 8012a18:	4618      	mov	r0, r3
 8012a1a:	4553      	cmp	r3, sl
 8012a1c:	db37      	blt.n	8012a8e <__lshift+0xbe>
 8012a1e:	6920      	ldr	r0, [r4, #16]
 8012a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a24:	f104 0314 	add.w	r3, r4, #20
 8012a28:	f019 091f 	ands.w	r9, r9, #31
 8012a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012a34:	d02f      	beq.n	8012a96 <__lshift+0xc6>
 8012a36:	f1c9 0e20 	rsb	lr, r9, #32
 8012a3a:	468a      	mov	sl, r1
 8012a3c:	f04f 0c00 	mov.w	ip, #0
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	fa02 f209 	lsl.w	r2, r2, r9
 8012a46:	ea42 020c 	orr.w	r2, r2, ip
 8012a4a:	f84a 2b04 	str.w	r2, [sl], #4
 8012a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a52:	4298      	cmp	r0, r3
 8012a54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012a58:	d8f2      	bhi.n	8012a40 <__lshift+0x70>
 8012a5a:	1b03      	subs	r3, r0, r4
 8012a5c:	3b15      	subs	r3, #21
 8012a5e:	f023 0303 	bic.w	r3, r3, #3
 8012a62:	3304      	adds	r3, #4
 8012a64:	f104 0215 	add.w	r2, r4, #21
 8012a68:	4290      	cmp	r0, r2
 8012a6a:	bf38      	it	cc
 8012a6c:	2304      	movcc	r3, #4
 8012a6e:	f841 c003 	str.w	ip, [r1, r3]
 8012a72:	f1bc 0f00 	cmp.w	ip, #0
 8012a76:	d001      	beq.n	8012a7c <__lshift+0xac>
 8012a78:	f108 0602 	add.w	r6, r8, #2
 8012a7c:	3e01      	subs	r6, #1
 8012a7e:	4638      	mov	r0, r7
 8012a80:	612e      	str	r6, [r5, #16]
 8012a82:	4621      	mov	r1, r4
 8012a84:	f7ff fd88 	bl	8012598 <_Bfree>
 8012a88:	4628      	mov	r0, r5
 8012a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012a92:	3301      	adds	r3, #1
 8012a94:	e7c1      	b.n	8012a1a <__lshift+0x4a>
 8012a96:	3904      	subs	r1, #4
 8012a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012aa0:	4298      	cmp	r0, r3
 8012aa2:	d8f9      	bhi.n	8012a98 <__lshift+0xc8>
 8012aa4:	e7ea      	b.n	8012a7c <__lshift+0xac>
 8012aa6:	bf00      	nop
 8012aa8:	0802a3e3 	.word	0x0802a3e3
 8012aac:	0802a4f0 	.word	0x0802a4f0

08012ab0 <__mcmp>:
 8012ab0:	b530      	push	{r4, r5, lr}
 8012ab2:	6902      	ldr	r2, [r0, #16]
 8012ab4:	690c      	ldr	r4, [r1, #16]
 8012ab6:	1b12      	subs	r2, r2, r4
 8012ab8:	d10e      	bne.n	8012ad8 <__mcmp+0x28>
 8012aba:	f100 0314 	add.w	r3, r0, #20
 8012abe:	3114      	adds	r1, #20
 8012ac0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ac4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ac8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012acc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ad0:	42a5      	cmp	r5, r4
 8012ad2:	d003      	beq.n	8012adc <__mcmp+0x2c>
 8012ad4:	d305      	bcc.n	8012ae2 <__mcmp+0x32>
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	4610      	mov	r0, r2
 8012ada:	bd30      	pop	{r4, r5, pc}
 8012adc:	4283      	cmp	r3, r0
 8012ade:	d3f3      	bcc.n	8012ac8 <__mcmp+0x18>
 8012ae0:	e7fa      	b.n	8012ad8 <__mcmp+0x28>
 8012ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae6:	e7f7      	b.n	8012ad8 <__mcmp+0x28>

08012ae8 <__mdiff>:
 8012ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aec:	460c      	mov	r4, r1
 8012aee:	4606      	mov	r6, r0
 8012af0:	4611      	mov	r1, r2
 8012af2:	4620      	mov	r0, r4
 8012af4:	4690      	mov	r8, r2
 8012af6:	f7ff ffdb 	bl	8012ab0 <__mcmp>
 8012afa:	1e05      	subs	r5, r0, #0
 8012afc:	d110      	bne.n	8012b20 <__mdiff+0x38>
 8012afe:	4629      	mov	r1, r5
 8012b00:	4630      	mov	r0, r6
 8012b02:	f7ff fd09 	bl	8012518 <_Balloc>
 8012b06:	b930      	cbnz	r0, 8012b16 <__mdiff+0x2e>
 8012b08:	4b3a      	ldr	r3, [pc, #232]	; (8012bf4 <__mdiff+0x10c>)
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	f240 2132 	movw	r1, #562	; 0x232
 8012b10:	4839      	ldr	r0, [pc, #228]	; (8012bf8 <__mdiff+0x110>)
 8012b12:	f7fc f86d 	bl	800ebf0 <__assert_func>
 8012b16:	2301      	movs	r3, #1
 8012b18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b20:	bfa4      	itt	ge
 8012b22:	4643      	movge	r3, r8
 8012b24:	46a0      	movge	r8, r4
 8012b26:	4630      	mov	r0, r6
 8012b28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b2c:	bfa6      	itte	ge
 8012b2e:	461c      	movge	r4, r3
 8012b30:	2500      	movge	r5, #0
 8012b32:	2501      	movlt	r5, #1
 8012b34:	f7ff fcf0 	bl	8012518 <_Balloc>
 8012b38:	b920      	cbnz	r0, 8012b44 <__mdiff+0x5c>
 8012b3a:	4b2e      	ldr	r3, [pc, #184]	; (8012bf4 <__mdiff+0x10c>)
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b42:	e7e5      	b.n	8012b10 <__mdiff+0x28>
 8012b44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b48:	6926      	ldr	r6, [r4, #16]
 8012b4a:	60c5      	str	r5, [r0, #12]
 8012b4c:	f104 0914 	add.w	r9, r4, #20
 8012b50:	f108 0514 	add.w	r5, r8, #20
 8012b54:	f100 0e14 	add.w	lr, r0, #20
 8012b58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012b5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012b60:	f108 0210 	add.w	r2, r8, #16
 8012b64:	46f2      	mov	sl, lr
 8012b66:	2100      	movs	r1, #0
 8012b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8012b6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012b70:	fa1f f883 	uxth.w	r8, r3
 8012b74:	fa11 f18b 	uxtah	r1, r1, fp
 8012b78:	0c1b      	lsrs	r3, r3, #16
 8012b7a:	eba1 0808 	sub.w	r8, r1, r8
 8012b7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012b82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012b86:	fa1f f888 	uxth.w	r8, r8
 8012b8a:	1419      	asrs	r1, r3, #16
 8012b8c:	454e      	cmp	r6, r9
 8012b8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012b92:	f84a 3b04 	str.w	r3, [sl], #4
 8012b96:	d8e7      	bhi.n	8012b68 <__mdiff+0x80>
 8012b98:	1b33      	subs	r3, r6, r4
 8012b9a:	3b15      	subs	r3, #21
 8012b9c:	f023 0303 	bic.w	r3, r3, #3
 8012ba0:	3304      	adds	r3, #4
 8012ba2:	3415      	adds	r4, #21
 8012ba4:	42a6      	cmp	r6, r4
 8012ba6:	bf38      	it	cc
 8012ba8:	2304      	movcc	r3, #4
 8012baa:	441d      	add	r5, r3
 8012bac:	4473      	add	r3, lr
 8012bae:	469e      	mov	lr, r3
 8012bb0:	462e      	mov	r6, r5
 8012bb2:	4566      	cmp	r6, ip
 8012bb4:	d30e      	bcc.n	8012bd4 <__mdiff+0xec>
 8012bb6:	f10c 0203 	add.w	r2, ip, #3
 8012bba:	1b52      	subs	r2, r2, r5
 8012bbc:	f022 0203 	bic.w	r2, r2, #3
 8012bc0:	3d03      	subs	r5, #3
 8012bc2:	45ac      	cmp	ip, r5
 8012bc4:	bf38      	it	cc
 8012bc6:	2200      	movcc	r2, #0
 8012bc8:	441a      	add	r2, r3
 8012bca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012bce:	b17b      	cbz	r3, 8012bf0 <__mdiff+0x108>
 8012bd0:	6107      	str	r7, [r0, #16]
 8012bd2:	e7a3      	b.n	8012b1c <__mdiff+0x34>
 8012bd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8012bd8:	fa11 f288 	uxtah	r2, r1, r8
 8012bdc:	1414      	asrs	r4, r2, #16
 8012bde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012be2:	b292      	uxth	r2, r2
 8012be4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012be8:	f84e 2b04 	str.w	r2, [lr], #4
 8012bec:	1421      	asrs	r1, r4, #16
 8012bee:	e7e0      	b.n	8012bb2 <__mdiff+0xca>
 8012bf0:	3f01      	subs	r7, #1
 8012bf2:	e7ea      	b.n	8012bca <__mdiff+0xe2>
 8012bf4:	0802a3e3 	.word	0x0802a3e3
 8012bf8:	0802a4f0 	.word	0x0802a4f0

08012bfc <__ulp>:
 8012bfc:	b082      	sub	sp, #8
 8012bfe:	ed8d 0b00 	vstr	d0, [sp]
 8012c02:	9b01      	ldr	r3, [sp, #4]
 8012c04:	4912      	ldr	r1, [pc, #72]	; (8012c50 <__ulp+0x54>)
 8012c06:	4019      	ands	r1, r3
 8012c08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012c0c:	2900      	cmp	r1, #0
 8012c0e:	dd05      	ble.n	8012c1c <__ulp+0x20>
 8012c10:	2200      	movs	r2, #0
 8012c12:	460b      	mov	r3, r1
 8012c14:	ec43 2b10 	vmov	d0, r2, r3
 8012c18:	b002      	add	sp, #8
 8012c1a:	4770      	bx	lr
 8012c1c:	4249      	negs	r1, r1
 8012c1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012c22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012c26:	f04f 0200 	mov.w	r2, #0
 8012c2a:	f04f 0300 	mov.w	r3, #0
 8012c2e:	da04      	bge.n	8012c3a <__ulp+0x3e>
 8012c30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012c34:	fa41 f300 	asr.w	r3, r1, r0
 8012c38:	e7ec      	b.n	8012c14 <__ulp+0x18>
 8012c3a:	f1a0 0114 	sub.w	r1, r0, #20
 8012c3e:	291e      	cmp	r1, #30
 8012c40:	bfda      	itte	le
 8012c42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012c46:	fa20 f101 	lsrle.w	r1, r0, r1
 8012c4a:	2101      	movgt	r1, #1
 8012c4c:	460a      	mov	r2, r1
 8012c4e:	e7e1      	b.n	8012c14 <__ulp+0x18>
 8012c50:	7ff00000 	.word	0x7ff00000

08012c54 <__b2d>:
 8012c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c56:	6905      	ldr	r5, [r0, #16]
 8012c58:	f100 0714 	add.w	r7, r0, #20
 8012c5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012c60:	1f2e      	subs	r6, r5, #4
 8012c62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012c66:	4620      	mov	r0, r4
 8012c68:	f7ff fd48 	bl	80126fc <__hi0bits>
 8012c6c:	f1c0 0320 	rsb	r3, r0, #32
 8012c70:	280a      	cmp	r0, #10
 8012c72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012cf0 <__b2d+0x9c>
 8012c76:	600b      	str	r3, [r1, #0]
 8012c78:	dc14      	bgt.n	8012ca4 <__b2d+0x50>
 8012c7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012c7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012c82:	42b7      	cmp	r7, r6
 8012c84:	ea41 030c 	orr.w	r3, r1, ip
 8012c88:	bf34      	ite	cc
 8012c8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012c8e:	2100      	movcs	r1, #0
 8012c90:	3015      	adds	r0, #21
 8012c92:	fa04 f000 	lsl.w	r0, r4, r0
 8012c96:	fa21 f10e 	lsr.w	r1, r1, lr
 8012c9a:	ea40 0201 	orr.w	r2, r0, r1
 8012c9e:	ec43 2b10 	vmov	d0, r2, r3
 8012ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ca4:	42b7      	cmp	r7, r6
 8012ca6:	bf3a      	itte	cc
 8012ca8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012cac:	f1a5 0608 	subcc.w	r6, r5, #8
 8012cb0:	2100      	movcs	r1, #0
 8012cb2:	380b      	subs	r0, #11
 8012cb4:	d017      	beq.n	8012ce6 <__b2d+0x92>
 8012cb6:	f1c0 0c20 	rsb	ip, r0, #32
 8012cba:	fa04 f500 	lsl.w	r5, r4, r0
 8012cbe:	42be      	cmp	r6, r7
 8012cc0:	fa21 f40c 	lsr.w	r4, r1, ip
 8012cc4:	ea45 0504 	orr.w	r5, r5, r4
 8012cc8:	bf8c      	ite	hi
 8012cca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012cce:	2400      	movls	r4, #0
 8012cd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012cd4:	fa01 f000 	lsl.w	r0, r1, r0
 8012cd8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012cdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ce0:	ea40 0204 	orr.w	r2, r0, r4
 8012ce4:	e7db      	b.n	8012c9e <__b2d+0x4a>
 8012ce6:	ea44 030c 	orr.w	r3, r4, ip
 8012cea:	460a      	mov	r2, r1
 8012cec:	e7d7      	b.n	8012c9e <__b2d+0x4a>
 8012cee:	bf00      	nop
 8012cf0:	3ff00000 	.word	0x3ff00000

08012cf4 <__d2b>:
 8012cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012cf8:	4689      	mov	r9, r1
 8012cfa:	2101      	movs	r1, #1
 8012cfc:	ec57 6b10 	vmov	r6, r7, d0
 8012d00:	4690      	mov	r8, r2
 8012d02:	f7ff fc09 	bl	8012518 <_Balloc>
 8012d06:	4604      	mov	r4, r0
 8012d08:	b930      	cbnz	r0, 8012d18 <__d2b+0x24>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	4b25      	ldr	r3, [pc, #148]	; (8012da4 <__d2b+0xb0>)
 8012d0e:	4826      	ldr	r0, [pc, #152]	; (8012da8 <__d2b+0xb4>)
 8012d10:	f240 310a 	movw	r1, #778	; 0x30a
 8012d14:	f7fb ff6c 	bl	800ebf0 <__assert_func>
 8012d18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012d1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d20:	bb35      	cbnz	r5, 8012d70 <__d2b+0x7c>
 8012d22:	2e00      	cmp	r6, #0
 8012d24:	9301      	str	r3, [sp, #4]
 8012d26:	d028      	beq.n	8012d7a <__d2b+0x86>
 8012d28:	4668      	mov	r0, sp
 8012d2a:	9600      	str	r6, [sp, #0]
 8012d2c:	f7ff fd06 	bl	801273c <__lo0bits>
 8012d30:	9900      	ldr	r1, [sp, #0]
 8012d32:	b300      	cbz	r0, 8012d76 <__d2b+0x82>
 8012d34:	9a01      	ldr	r2, [sp, #4]
 8012d36:	f1c0 0320 	rsb	r3, r0, #32
 8012d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d3e:	430b      	orrs	r3, r1
 8012d40:	40c2      	lsrs	r2, r0
 8012d42:	6163      	str	r3, [r4, #20]
 8012d44:	9201      	str	r2, [sp, #4]
 8012d46:	9b01      	ldr	r3, [sp, #4]
 8012d48:	61a3      	str	r3, [r4, #24]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	bf14      	ite	ne
 8012d4e:	2202      	movne	r2, #2
 8012d50:	2201      	moveq	r2, #1
 8012d52:	6122      	str	r2, [r4, #16]
 8012d54:	b1d5      	cbz	r5, 8012d8c <__d2b+0x98>
 8012d56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012d5a:	4405      	add	r5, r0
 8012d5c:	f8c9 5000 	str.w	r5, [r9]
 8012d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d64:	f8c8 0000 	str.w	r0, [r8]
 8012d68:	4620      	mov	r0, r4
 8012d6a:	b003      	add	sp, #12
 8012d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012d74:	e7d5      	b.n	8012d22 <__d2b+0x2e>
 8012d76:	6161      	str	r1, [r4, #20]
 8012d78:	e7e5      	b.n	8012d46 <__d2b+0x52>
 8012d7a:	a801      	add	r0, sp, #4
 8012d7c:	f7ff fcde 	bl	801273c <__lo0bits>
 8012d80:	9b01      	ldr	r3, [sp, #4]
 8012d82:	6163      	str	r3, [r4, #20]
 8012d84:	2201      	movs	r2, #1
 8012d86:	6122      	str	r2, [r4, #16]
 8012d88:	3020      	adds	r0, #32
 8012d8a:	e7e3      	b.n	8012d54 <__d2b+0x60>
 8012d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012d94:	f8c9 0000 	str.w	r0, [r9]
 8012d98:	6918      	ldr	r0, [r3, #16]
 8012d9a:	f7ff fcaf 	bl	80126fc <__hi0bits>
 8012d9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012da2:	e7df      	b.n	8012d64 <__d2b+0x70>
 8012da4:	0802a3e3 	.word	0x0802a3e3
 8012da8:	0802a4f0 	.word	0x0802a4f0

08012dac <__ratio>:
 8012dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	4688      	mov	r8, r1
 8012db2:	4669      	mov	r1, sp
 8012db4:	4681      	mov	r9, r0
 8012db6:	f7ff ff4d 	bl	8012c54 <__b2d>
 8012dba:	a901      	add	r1, sp, #4
 8012dbc:	4640      	mov	r0, r8
 8012dbe:	ec55 4b10 	vmov	r4, r5, d0
 8012dc2:	f7ff ff47 	bl	8012c54 <__b2d>
 8012dc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012dca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012dce:	eba3 0c02 	sub.w	ip, r3, r2
 8012dd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012dd6:	1a9b      	subs	r3, r3, r2
 8012dd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012ddc:	ec51 0b10 	vmov	r0, r1, d0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	bfd6      	itet	le
 8012de4:	460a      	movle	r2, r1
 8012de6:	462a      	movgt	r2, r5
 8012de8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012dec:	468b      	mov	fp, r1
 8012dee:	462f      	mov	r7, r5
 8012df0:	bfd4      	ite	le
 8012df2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012df6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	ee10 2a10 	vmov	r2, s0
 8012e00:	465b      	mov	r3, fp
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fd4a 	bl	800089c <__aeabi_ddiv>
 8012e08:	ec41 0b10 	vmov	d0, r0, r1
 8012e0c:	b003      	add	sp, #12
 8012e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e12 <__copybits>:
 8012e12:	3901      	subs	r1, #1
 8012e14:	b570      	push	{r4, r5, r6, lr}
 8012e16:	1149      	asrs	r1, r1, #5
 8012e18:	6914      	ldr	r4, [r2, #16]
 8012e1a:	3101      	adds	r1, #1
 8012e1c:	f102 0314 	add.w	r3, r2, #20
 8012e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e28:	1f05      	subs	r5, r0, #4
 8012e2a:	42a3      	cmp	r3, r4
 8012e2c:	d30c      	bcc.n	8012e48 <__copybits+0x36>
 8012e2e:	1aa3      	subs	r3, r4, r2
 8012e30:	3b11      	subs	r3, #17
 8012e32:	f023 0303 	bic.w	r3, r3, #3
 8012e36:	3211      	adds	r2, #17
 8012e38:	42a2      	cmp	r2, r4
 8012e3a:	bf88      	it	hi
 8012e3c:	2300      	movhi	r3, #0
 8012e3e:	4418      	add	r0, r3
 8012e40:	2300      	movs	r3, #0
 8012e42:	4288      	cmp	r0, r1
 8012e44:	d305      	bcc.n	8012e52 <__copybits+0x40>
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	f853 6b04 	ldr.w	r6, [r3], #4
 8012e4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012e50:	e7eb      	b.n	8012e2a <__copybits+0x18>
 8012e52:	f840 3b04 	str.w	r3, [r0], #4
 8012e56:	e7f4      	b.n	8012e42 <__copybits+0x30>

08012e58 <__any_on>:
 8012e58:	f100 0214 	add.w	r2, r0, #20
 8012e5c:	6900      	ldr	r0, [r0, #16]
 8012e5e:	114b      	asrs	r3, r1, #5
 8012e60:	4298      	cmp	r0, r3
 8012e62:	b510      	push	{r4, lr}
 8012e64:	db11      	blt.n	8012e8a <__any_on+0x32>
 8012e66:	dd0a      	ble.n	8012e7e <__any_on+0x26>
 8012e68:	f011 011f 	ands.w	r1, r1, #31
 8012e6c:	d007      	beq.n	8012e7e <__any_on+0x26>
 8012e6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012e72:	fa24 f001 	lsr.w	r0, r4, r1
 8012e76:	fa00 f101 	lsl.w	r1, r0, r1
 8012e7a:	428c      	cmp	r4, r1
 8012e7c:	d10b      	bne.n	8012e96 <__any_on+0x3e>
 8012e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d803      	bhi.n	8012e8e <__any_on+0x36>
 8012e86:	2000      	movs	r0, #0
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	e7f7      	b.n	8012e7e <__any_on+0x26>
 8012e8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e92:	2900      	cmp	r1, #0
 8012e94:	d0f5      	beq.n	8012e82 <__any_on+0x2a>
 8012e96:	2001      	movs	r0, #1
 8012e98:	e7f6      	b.n	8012e88 <__any_on+0x30>

08012e9a <_calloc_r>:
 8012e9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e9c:	fba1 2402 	umull	r2, r4, r1, r2
 8012ea0:	b94c      	cbnz	r4, 8012eb6 <_calloc_r+0x1c>
 8012ea2:	4611      	mov	r1, r2
 8012ea4:	9201      	str	r2, [sp, #4]
 8012ea6:	f000 f87b 	bl	8012fa0 <_malloc_r>
 8012eaa:	9a01      	ldr	r2, [sp, #4]
 8012eac:	4605      	mov	r5, r0
 8012eae:	b930      	cbnz	r0, 8012ebe <_calloc_r+0x24>
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	b003      	add	sp, #12
 8012eb4:	bd30      	pop	{r4, r5, pc}
 8012eb6:	220c      	movs	r2, #12
 8012eb8:	6002      	str	r2, [r0, #0]
 8012eba:	2500      	movs	r5, #0
 8012ebc:	e7f8      	b.n	8012eb0 <_calloc_r+0x16>
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	f7fb fefe 	bl	800ecc0 <memset>
 8012ec4:	e7f4      	b.n	8012eb0 <_calloc_r+0x16>
	...

08012ec8 <_free_r>:
 8012ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012eca:	2900      	cmp	r1, #0
 8012ecc:	d044      	beq.n	8012f58 <_free_r+0x90>
 8012ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ed2:	9001      	str	r0, [sp, #4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8012eda:	bfb8      	it	lt
 8012edc:	18e4      	addlt	r4, r4, r3
 8012ede:	f000 fb75 	bl	80135cc <__malloc_lock>
 8012ee2:	4a1e      	ldr	r2, [pc, #120]	; (8012f5c <_free_r+0x94>)
 8012ee4:	9801      	ldr	r0, [sp, #4]
 8012ee6:	6813      	ldr	r3, [r2, #0]
 8012ee8:	b933      	cbnz	r3, 8012ef8 <_free_r+0x30>
 8012eea:	6063      	str	r3, [r4, #4]
 8012eec:	6014      	str	r4, [r2, #0]
 8012eee:	b003      	add	sp, #12
 8012ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ef4:	f000 bb70 	b.w	80135d8 <__malloc_unlock>
 8012ef8:	42a3      	cmp	r3, r4
 8012efa:	d908      	bls.n	8012f0e <_free_r+0x46>
 8012efc:	6825      	ldr	r5, [r4, #0]
 8012efe:	1961      	adds	r1, r4, r5
 8012f00:	428b      	cmp	r3, r1
 8012f02:	bf01      	itttt	eq
 8012f04:	6819      	ldreq	r1, [r3, #0]
 8012f06:	685b      	ldreq	r3, [r3, #4]
 8012f08:	1949      	addeq	r1, r1, r5
 8012f0a:	6021      	streq	r1, [r4, #0]
 8012f0c:	e7ed      	b.n	8012eea <_free_r+0x22>
 8012f0e:	461a      	mov	r2, r3
 8012f10:	685b      	ldr	r3, [r3, #4]
 8012f12:	b10b      	cbz	r3, 8012f18 <_free_r+0x50>
 8012f14:	42a3      	cmp	r3, r4
 8012f16:	d9fa      	bls.n	8012f0e <_free_r+0x46>
 8012f18:	6811      	ldr	r1, [r2, #0]
 8012f1a:	1855      	adds	r5, r2, r1
 8012f1c:	42a5      	cmp	r5, r4
 8012f1e:	d10b      	bne.n	8012f38 <_free_r+0x70>
 8012f20:	6824      	ldr	r4, [r4, #0]
 8012f22:	4421      	add	r1, r4
 8012f24:	1854      	adds	r4, r2, r1
 8012f26:	42a3      	cmp	r3, r4
 8012f28:	6011      	str	r1, [r2, #0]
 8012f2a:	d1e0      	bne.n	8012eee <_free_r+0x26>
 8012f2c:	681c      	ldr	r4, [r3, #0]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	6053      	str	r3, [r2, #4]
 8012f32:	4421      	add	r1, r4
 8012f34:	6011      	str	r1, [r2, #0]
 8012f36:	e7da      	b.n	8012eee <_free_r+0x26>
 8012f38:	d902      	bls.n	8012f40 <_free_r+0x78>
 8012f3a:	230c      	movs	r3, #12
 8012f3c:	6003      	str	r3, [r0, #0]
 8012f3e:	e7d6      	b.n	8012eee <_free_r+0x26>
 8012f40:	6825      	ldr	r5, [r4, #0]
 8012f42:	1961      	adds	r1, r4, r5
 8012f44:	428b      	cmp	r3, r1
 8012f46:	bf04      	itt	eq
 8012f48:	6819      	ldreq	r1, [r3, #0]
 8012f4a:	685b      	ldreq	r3, [r3, #4]
 8012f4c:	6063      	str	r3, [r4, #4]
 8012f4e:	bf04      	itt	eq
 8012f50:	1949      	addeq	r1, r1, r5
 8012f52:	6021      	streq	r1, [r4, #0]
 8012f54:	6054      	str	r4, [r2, #4]
 8012f56:	e7ca      	b.n	8012eee <_free_r+0x26>
 8012f58:	b003      	add	sp, #12
 8012f5a:	bd30      	pop	{r4, r5, pc}
 8012f5c:	2001336c 	.word	0x2001336c

08012f60 <sbrk_aligned>:
 8012f60:	b570      	push	{r4, r5, r6, lr}
 8012f62:	4e0e      	ldr	r6, [pc, #56]	; (8012f9c <sbrk_aligned+0x3c>)
 8012f64:	460c      	mov	r4, r1
 8012f66:	6831      	ldr	r1, [r6, #0]
 8012f68:	4605      	mov	r5, r0
 8012f6a:	b911      	cbnz	r1, 8012f72 <sbrk_aligned+0x12>
 8012f6c:	f000 fa20 	bl	80133b0 <_sbrk_r>
 8012f70:	6030      	str	r0, [r6, #0]
 8012f72:	4621      	mov	r1, r4
 8012f74:	4628      	mov	r0, r5
 8012f76:	f000 fa1b 	bl	80133b0 <_sbrk_r>
 8012f7a:	1c43      	adds	r3, r0, #1
 8012f7c:	d00a      	beq.n	8012f94 <sbrk_aligned+0x34>
 8012f7e:	1cc4      	adds	r4, r0, #3
 8012f80:	f024 0403 	bic.w	r4, r4, #3
 8012f84:	42a0      	cmp	r0, r4
 8012f86:	d007      	beq.n	8012f98 <sbrk_aligned+0x38>
 8012f88:	1a21      	subs	r1, r4, r0
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f000 fa10 	bl	80133b0 <_sbrk_r>
 8012f90:	3001      	adds	r0, #1
 8012f92:	d101      	bne.n	8012f98 <sbrk_aligned+0x38>
 8012f94:	f04f 34ff 	mov.w	r4, #4294967295
 8012f98:	4620      	mov	r0, r4
 8012f9a:	bd70      	pop	{r4, r5, r6, pc}
 8012f9c:	20013370 	.word	0x20013370

08012fa0 <_malloc_r>:
 8012fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa4:	1ccd      	adds	r5, r1, #3
 8012fa6:	f025 0503 	bic.w	r5, r5, #3
 8012faa:	3508      	adds	r5, #8
 8012fac:	2d0c      	cmp	r5, #12
 8012fae:	bf38      	it	cc
 8012fb0:	250c      	movcc	r5, #12
 8012fb2:	2d00      	cmp	r5, #0
 8012fb4:	4607      	mov	r7, r0
 8012fb6:	db01      	blt.n	8012fbc <_malloc_r+0x1c>
 8012fb8:	42a9      	cmp	r1, r5
 8012fba:	d905      	bls.n	8012fc8 <_malloc_r+0x28>
 8012fbc:	230c      	movs	r3, #12
 8012fbe:	603b      	str	r3, [r7, #0]
 8012fc0:	2600      	movs	r6, #0
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc8:	4e2e      	ldr	r6, [pc, #184]	; (8013084 <_malloc_r+0xe4>)
 8012fca:	f000 faff 	bl	80135cc <__malloc_lock>
 8012fce:	6833      	ldr	r3, [r6, #0]
 8012fd0:	461c      	mov	r4, r3
 8012fd2:	bb34      	cbnz	r4, 8013022 <_malloc_r+0x82>
 8012fd4:	4629      	mov	r1, r5
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	f7ff ffc2 	bl	8012f60 <sbrk_aligned>
 8012fdc:	1c43      	adds	r3, r0, #1
 8012fde:	4604      	mov	r4, r0
 8012fe0:	d14d      	bne.n	801307e <_malloc_r+0xde>
 8012fe2:	6834      	ldr	r4, [r6, #0]
 8012fe4:	4626      	mov	r6, r4
 8012fe6:	2e00      	cmp	r6, #0
 8012fe8:	d140      	bne.n	801306c <_malloc_r+0xcc>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	4631      	mov	r1, r6
 8012fee:	4638      	mov	r0, r7
 8012ff0:	eb04 0803 	add.w	r8, r4, r3
 8012ff4:	f000 f9dc 	bl	80133b0 <_sbrk_r>
 8012ff8:	4580      	cmp	r8, r0
 8012ffa:	d13a      	bne.n	8013072 <_malloc_r+0xd2>
 8012ffc:	6821      	ldr	r1, [r4, #0]
 8012ffe:	3503      	adds	r5, #3
 8013000:	1a6d      	subs	r5, r5, r1
 8013002:	f025 0503 	bic.w	r5, r5, #3
 8013006:	3508      	adds	r5, #8
 8013008:	2d0c      	cmp	r5, #12
 801300a:	bf38      	it	cc
 801300c:	250c      	movcc	r5, #12
 801300e:	4629      	mov	r1, r5
 8013010:	4638      	mov	r0, r7
 8013012:	f7ff ffa5 	bl	8012f60 <sbrk_aligned>
 8013016:	3001      	adds	r0, #1
 8013018:	d02b      	beq.n	8013072 <_malloc_r+0xd2>
 801301a:	6823      	ldr	r3, [r4, #0]
 801301c:	442b      	add	r3, r5
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	e00e      	b.n	8013040 <_malloc_r+0xa0>
 8013022:	6822      	ldr	r2, [r4, #0]
 8013024:	1b52      	subs	r2, r2, r5
 8013026:	d41e      	bmi.n	8013066 <_malloc_r+0xc6>
 8013028:	2a0b      	cmp	r2, #11
 801302a:	d916      	bls.n	801305a <_malloc_r+0xba>
 801302c:	1961      	adds	r1, r4, r5
 801302e:	42a3      	cmp	r3, r4
 8013030:	6025      	str	r5, [r4, #0]
 8013032:	bf18      	it	ne
 8013034:	6059      	strne	r1, [r3, #4]
 8013036:	6863      	ldr	r3, [r4, #4]
 8013038:	bf08      	it	eq
 801303a:	6031      	streq	r1, [r6, #0]
 801303c:	5162      	str	r2, [r4, r5]
 801303e:	604b      	str	r3, [r1, #4]
 8013040:	4638      	mov	r0, r7
 8013042:	f104 060b 	add.w	r6, r4, #11
 8013046:	f000 fac7 	bl	80135d8 <__malloc_unlock>
 801304a:	f026 0607 	bic.w	r6, r6, #7
 801304e:	1d23      	adds	r3, r4, #4
 8013050:	1af2      	subs	r2, r6, r3
 8013052:	d0b6      	beq.n	8012fc2 <_malloc_r+0x22>
 8013054:	1b9b      	subs	r3, r3, r6
 8013056:	50a3      	str	r3, [r4, r2]
 8013058:	e7b3      	b.n	8012fc2 <_malloc_r+0x22>
 801305a:	6862      	ldr	r2, [r4, #4]
 801305c:	42a3      	cmp	r3, r4
 801305e:	bf0c      	ite	eq
 8013060:	6032      	streq	r2, [r6, #0]
 8013062:	605a      	strne	r2, [r3, #4]
 8013064:	e7ec      	b.n	8013040 <_malloc_r+0xa0>
 8013066:	4623      	mov	r3, r4
 8013068:	6864      	ldr	r4, [r4, #4]
 801306a:	e7b2      	b.n	8012fd2 <_malloc_r+0x32>
 801306c:	4634      	mov	r4, r6
 801306e:	6876      	ldr	r6, [r6, #4]
 8013070:	e7b9      	b.n	8012fe6 <_malloc_r+0x46>
 8013072:	230c      	movs	r3, #12
 8013074:	603b      	str	r3, [r7, #0]
 8013076:	4638      	mov	r0, r7
 8013078:	f000 faae 	bl	80135d8 <__malloc_unlock>
 801307c:	e7a1      	b.n	8012fc2 <_malloc_r+0x22>
 801307e:	6025      	str	r5, [r4, #0]
 8013080:	e7de      	b.n	8013040 <_malloc_r+0xa0>
 8013082:	bf00      	nop
 8013084:	2001336c 	.word	0x2001336c

08013088 <_realloc_r>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	4680      	mov	r8, r0
 801308e:	4614      	mov	r4, r2
 8013090:	460e      	mov	r6, r1
 8013092:	b921      	cbnz	r1, 801309e <_realloc_r+0x16>
 8013094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013098:	4611      	mov	r1, r2
 801309a:	f7ff bf81 	b.w	8012fa0 <_malloc_r>
 801309e:	b92a      	cbnz	r2, 80130ac <_realloc_r+0x24>
 80130a0:	f7ff ff12 	bl	8012ec8 <_free_r>
 80130a4:	4625      	mov	r5, r4
 80130a6:	4628      	mov	r0, r5
 80130a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ac:	f000 fa9a 	bl	80135e4 <_malloc_usable_size_r>
 80130b0:	4284      	cmp	r4, r0
 80130b2:	4607      	mov	r7, r0
 80130b4:	d802      	bhi.n	80130bc <_realloc_r+0x34>
 80130b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80130ba:	d812      	bhi.n	80130e2 <_realloc_r+0x5a>
 80130bc:	4621      	mov	r1, r4
 80130be:	4640      	mov	r0, r8
 80130c0:	f7ff ff6e 	bl	8012fa0 <_malloc_r>
 80130c4:	4605      	mov	r5, r0
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d0ed      	beq.n	80130a6 <_realloc_r+0x1e>
 80130ca:	42bc      	cmp	r4, r7
 80130cc:	4622      	mov	r2, r4
 80130ce:	4631      	mov	r1, r6
 80130d0:	bf28      	it	cs
 80130d2:	463a      	movcs	r2, r7
 80130d4:	f7fb fde6 	bl	800eca4 <memcpy>
 80130d8:	4631      	mov	r1, r6
 80130da:	4640      	mov	r0, r8
 80130dc:	f7ff fef4 	bl	8012ec8 <_free_r>
 80130e0:	e7e1      	b.n	80130a6 <_realloc_r+0x1e>
 80130e2:	4635      	mov	r5, r6
 80130e4:	e7df      	b.n	80130a6 <_realloc_r+0x1e>

080130e6 <__ssputs_r>:
 80130e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ea:	688e      	ldr	r6, [r1, #8]
 80130ec:	429e      	cmp	r6, r3
 80130ee:	4682      	mov	sl, r0
 80130f0:	460c      	mov	r4, r1
 80130f2:	4690      	mov	r8, r2
 80130f4:	461f      	mov	r7, r3
 80130f6:	d838      	bhi.n	801316a <__ssputs_r+0x84>
 80130f8:	898a      	ldrh	r2, [r1, #12]
 80130fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130fe:	d032      	beq.n	8013166 <__ssputs_r+0x80>
 8013100:	6825      	ldr	r5, [r4, #0]
 8013102:	6909      	ldr	r1, [r1, #16]
 8013104:	eba5 0901 	sub.w	r9, r5, r1
 8013108:	6965      	ldr	r5, [r4, #20]
 801310a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801310e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013112:	3301      	adds	r3, #1
 8013114:	444b      	add	r3, r9
 8013116:	106d      	asrs	r5, r5, #1
 8013118:	429d      	cmp	r5, r3
 801311a:	bf38      	it	cc
 801311c:	461d      	movcc	r5, r3
 801311e:	0553      	lsls	r3, r2, #21
 8013120:	d531      	bpl.n	8013186 <__ssputs_r+0xa0>
 8013122:	4629      	mov	r1, r5
 8013124:	f7ff ff3c 	bl	8012fa0 <_malloc_r>
 8013128:	4606      	mov	r6, r0
 801312a:	b950      	cbnz	r0, 8013142 <__ssputs_r+0x5c>
 801312c:	230c      	movs	r3, #12
 801312e:	f8ca 3000 	str.w	r3, [sl]
 8013132:	89a3      	ldrh	r3, [r4, #12]
 8013134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013138:	81a3      	strh	r3, [r4, #12]
 801313a:	f04f 30ff 	mov.w	r0, #4294967295
 801313e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013142:	6921      	ldr	r1, [r4, #16]
 8013144:	464a      	mov	r2, r9
 8013146:	f7fb fdad 	bl	800eca4 <memcpy>
 801314a:	89a3      	ldrh	r3, [r4, #12]
 801314c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013154:	81a3      	strh	r3, [r4, #12]
 8013156:	6126      	str	r6, [r4, #16]
 8013158:	6165      	str	r5, [r4, #20]
 801315a:	444e      	add	r6, r9
 801315c:	eba5 0509 	sub.w	r5, r5, r9
 8013160:	6026      	str	r6, [r4, #0]
 8013162:	60a5      	str	r5, [r4, #8]
 8013164:	463e      	mov	r6, r7
 8013166:	42be      	cmp	r6, r7
 8013168:	d900      	bls.n	801316c <__ssputs_r+0x86>
 801316a:	463e      	mov	r6, r7
 801316c:	6820      	ldr	r0, [r4, #0]
 801316e:	4632      	mov	r2, r6
 8013170:	4641      	mov	r1, r8
 8013172:	f7ff f9b7 	bl	80124e4 <memmove>
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	1b9b      	subs	r3, r3, r6
 801317a:	60a3      	str	r3, [r4, #8]
 801317c:	6823      	ldr	r3, [r4, #0]
 801317e:	4433      	add	r3, r6
 8013180:	6023      	str	r3, [r4, #0]
 8013182:	2000      	movs	r0, #0
 8013184:	e7db      	b.n	801313e <__ssputs_r+0x58>
 8013186:	462a      	mov	r2, r5
 8013188:	f7ff ff7e 	bl	8013088 <_realloc_r>
 801318c:	4606      	mov	r6, r0
 801318e:	2800      	cmp	r0, #0
 8013190:	d1e1      	bne.n	8013156 <__ssputs_r+0x70>
 8013192:	6921      	ldr	r1, [r4, #16]
 8013194:	4650      	mov	r0, sl
 8013196:	f7ff fe97 	bl	8012ec8 <_free_r>
 801319a:	e7c7      	b.n	801312c <__ssputs_r+0x46>

0801319c <_svfiprintf_r>:
 801319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a0:	4698      	mov	r8, r3
 80131a2:	898b      	ldrh	r3, [r1, #12]
 80131a4:	061b      	lsls	r3, r3, #24
 80131a6:	b09d      	sub	sp, #116	; 0x74
 80131a8:	4607      	mov	r7, r0
 80131aa:	460d      	mov	r5, r1
 80131ac:	4614      	mov	r4, r2
 80131ae:	d50e      	bpl.n	80131ce <_svfiprintf_r+0x32>
 80131b0:	690b      	ldr	r3, [r1, #16]
 80131b2:	b963      	cbnz	r3, 80131ce <_svfiprintf_r+0x32>
 80131b4:	2140      	movs	r1, #64	; 0x40
 80131b6:	f7ff fef3 	bl	8012fa0 <_malloc_r>
 80131ba:	6028      	str	r0, [r5, #0]
 80131bc:	6128      	str	r0, [r5, #16]
 80131be:	b920      	cbnz	r0, 80131ca <_svfiprintf_r+0x2e>
 80131c0:	230c      	movs	r3, #12
 80131c2:	603b      	str	r3, [r7, #0]
 80131c4:	f04f 30ff 	mov.w	r0, #4294967295
 80131c8:	e0d1      	b.n	801336e <_svfiprintf_r+0x1d2>
 80131ca:	2340      	movs	r3, #64	; 0x40
 80131cc:	616b      	str	r3, [r5, #20]
 80131ce:	2300      	movs	r3, #0
 80131d0:	9309      	str	r3, [sp, #36]	; 0x24
 80131d2:	2320      	movs	r3, #32
 80131d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80131dc:	2330      	movs	r3, #48	; 0x30
 80131de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013388 <_svfiprintf_r+0x1ec>
 80131e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131e6:	f04f 0901 	mov.w	r9, #1
 80131ea:	4623      	mov	r3, r4
 80131ec:	469a      	mov	sl, r3
 80131ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131f2:	b10a      	cbz	r2, 80131f8 <_svfiprintf_r+0x5c>
 80131f4:	2a25      	cmp	r2, #37	; 0x25
 80131f6:	d1f9      	bne.n	80131ec <_svfiprintf_r+0x50>
 80131f8:	ebba 0b04 	subs.w	fp, sl, r4
 80131fc:	d00b      	beq.n	8013216 <_svfiprintf_r+0x7a>
 80131fe:	465b      	mov	r3, fp
 8013200:	4622      	mov	r2, r4
 8013202:	4629      	mov	r1, r5
 8013204:	4638      	mov	r0, r7
 8013206:	f7ff ff6e 	bl	80130e6 <__ssputs_r>
 801320a:	3001      	adds	r0, #1
 801320c:	f000 80aa 	beq.w	8013364 <_svfiprintf_r+0x1c8>
 8013210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013212:	445a      	add	r2, fp
 8013214:	9209      	str	r2, [sp, #36]	; 0x24
 8013216:	f89a 3000 	ldrb.w	r3, [sl]
 801321a:	2b00      	cmp	r3, #0
 801321c:	f000 80a2 	beq.w	8013364 <_svfiprintf_r+0x1c8>
 8013220:	2300      	movs	r3, #0
 8013222:	f04f 32ff 	mov.w	r2, #4294967295
 8013226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801322a:	f10a 0a01 	add.w	sl, sl, #1
 801322e:	9304      	str	r3, [sp, #16]
 8013230:	9307      	str	r3, [sp, #28]
 8013232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013236:	931a      	str	r3, [sp, #104]	; 0x68
 8013238:	4654      	mov	r4, sl
 801323a:	2205      	movs	r2, #5
 801323c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013240:	4851      	ldr	r0, [pc, #324]	; (8013388 <_svfiprintf_r+0x1ec>)
 8013242:	f7ec fff5 	bl	8000230 <memchr>
 8013246:	9a04      	ldr	r2, [sp, #16]
 8013248:	b9d8      	cbnz	r0, 8013282 <_svfiprintf_r+0xe6>
 801324a:	06d0      	lsls	r0, r2, #27
 801324c:	bf44      	itt	mi
 801324e:	2320      	movmi	r3, #32
 8013250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013254:	0711      	lsls	r1, r2, #28
 8013256:	bf44      	itt	mi
 8013258:	232b      	movmi	r3, #43	; 0x2b
 801325a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801325e:	f89a 3000 	ldrb.w	r3, [sl]
 8013262:	2b2a      	cmp	r3, #42	; 0x2a
 8013264:	d015      	beq.n	8013292 <_svfiprintf_r+0xf6>
 8013266:	9a07      	ldr	r2, [sp, #28]
 8013268:	4654      	mov	r4, sl
 801326a:	2000      	movs	r0, #0
 801326c:	f04f 0c0a 	mov.w	ip, #10
 8013270:	4621      	mov	r1, r4
 8013272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013276:	3b30      	subs	r3, #48	; 0x30
 8013278:	2b09      	cmp	r3, #9
 801327a:	d94e      	bls.n	801331a <_svfiprintf_r+0x17e>
 801327c:	b1b0      	cbz	r0, 80132ac <_svfiprintf_r+0x110>
 801327e:	9207      	str	r2, [sp, #28]
 8013280:	e014      	b.n	80132ac <_svfiprintf_r+0x110>
 8013282:	eba0 0308 	sub.w	r3, r0, r8
 8013286:	fa09 f303 	lsl.w	r3, r9, r3
 801328a:	4313      	orrs	r3, r2
 801328c:	9304      	str	r3, [sp, #16]
 801328e:	46a2      	mov	sl, r4
 8013290:	e7d2      	b.n	8013238 <_svfiprintf_r+0x9c>
 8013292:	9b03      	ldr	r3, [sp, #12]
 8013294:	1d19      	adds	r1, r3, #4
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	9103      	str	r1, [sp, #12]
 801329a:	2b00      	cmp	r3, #0
 801329c:	bfbb      	ittet	lt
 801329e:	425b      	neglt	r3, r3
 80132a0:	f042 0202 	orrlt.w	r2, r2, #2
 80132a4:	9307      	strge	r3, [sp, #28]
 80132a6:	9307      	strlt	r3, [sp, #28]
 80132a8:	bfb8      	it	lt
 80132aa:	9204      	strlt	r2, [sp, #16]
 80132ac:	7823      	ldrb	r3, [r4, #0]
 80132ae:	2b2e      	cmp	r3, #46	; 0x2e
 80132b0:	d10c      	bne.n	80132cc <_svfiprintf_r+0x130>
 80132b2:	7863      	ldrb	r3, [r4, #1]
 80132b4:	2b2a      	cmp	r3, #42	; 0x2a
 80132b6:	d135      	bne.n	8013324 <_svfiprintf_r+0x188>
 80132b8:	9b03      	ldr	r3, [sp, #12]
 80132ba:	1d1a      	adds	r2, r3, #4
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	9203      	str	r2, [sp, #12]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	bfb8      	it	lt
 80132c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80132c8:	3402      	adds	r4, #2
 80132ca:	9305      	str	r3, [sp, #20]
 80132cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013398 <_svfiprintf_r+0x1fc>
 80132d0:	7821      	ldrb	r1, [r4, #0]
 80132d2:	2203      	movs	r2, #3
 80132d4:	4650      	mov	r0, sl
 80132d6:	f7ec ffab 	bl	8000230 <memchr>
 80132da:	b140      	cbz	r0, 80132ee <_svfiprintf_r+0x152>
 80132dc:	2340      	movs	r3, #64	; 0x40
 80132de:	eba0 000a 	sub.w	r0, r0, sl
 80132e2:	fa03 f000 	lsl.w	r0, r3, r0
 80132e6:	9b04      	ldr	r3, [sp, #16]
 80132e8:	4303      	orrs	r3, r0
 80132ea:	3401      	adds	r4, #1
 80132ec:	9304      	str	r3, [sp, #16]
 80132ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132f2:	4826      	ldr	r0, [pc, #152]	; (801338c <_svfiprintf_r+0x1f0>)
 80132f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132f8:	2206      	movs	r2, #6
 80132fa:	f7ec ff99 	bl	8000230 <memchr>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d038      	beq.n	8013374 <_svfiprintf_r+0x1d8>
 8013302:	4b23      	ldr	r3, [pc, #140]	; (8013390 <_svfiprintf_r+0x1f4>)
 8013304:	bb1b      	cbnz	r3, 801334e <_svfiprintf_r+0x1b2>
 8013306:	9b03      	ldr	r3, [sp, #12]
 8013308:	3307      	adds	r3, #7
 801330a:	f023 0307 	bic.w	r3, r3, #7
 801330e:	3308      	adds	r3, #8
 8013310:	9303      	str	r3, [sp, #12]
 8013312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013314:	4433      	add	r3, r6
 8013316:	9309      	str	r3, [sp, #36]	; 0x24
 8013318:	e767      	b.n	80131ea <_svfiprintf_r+0x4e>
 801331a:	fb0c 3202 	mla	r2, ip, r2, r3
 801331e:	460c      	mov	r4, r1
 8013320:	2001      	movs	r0, #1
 8013322:	e7a5      	b.n	8013270 <_svfiprintf_r+0xd4>
 8013324:	2300      	movs	r3, #0
 8013326:	3401      	adds	r4, #1
 8013328:	9305      	str	r3, [sp, #20]
 801332a:	4619      	mov	r1, r3
 801332c:	f04f 0c0a 	mov.w	ip, #10
 8013330:	4620      	mov	r0, r4
 8013332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013336:	3a30      	subs	r2, #48	; 0x30
 8013338:	2a09      	cmp	r2, #9
 801333a:	d903      	bls.n	8013344 <_svfiprintf_r+0x1a8>
 801333c:	2b00      	cmp	r3, #0
 801333e:	d0c5      	beq.n	80132cc <_svfiprintf_r+0x130>
 8013340:	9105      	str	r1, [sp, #20]
 8013342:	e7c3      	b.n	80132cc <_svfiprintf_r+0x130>
 8013344:	fb0c 2101 	mla	r1, ip, r1, r2
 8013348:	4604      	mov	r4, r0
 801334a:	2301      	movs	r3, #1
 801334c:	e7f0      	b.n	8013330 <_svfiprintf_r+0x194>
 801334e:	ab03      	add	r3, sp, #12
 8013350:	9300      	str	r3, [sp, #0]
 8013352:	462a      	mov	r2, r5
 8013354:	4b0f      	ldr	r3, [pc, #60]	; (8013394 <_svfiprintf_r+0x1f8>)
 8013356:	a904      	add	r1, sp, #16
 8013358:	4638      	mov	r0, r7
 801335a:	f7fb feb3 	bl	800f0c4 <_printf_float>
 801335e:	1c42      	adds	r2, r0, #1
 8013360:	4606      	mov	r6, r0
 8013362:	d1d6      	bne.n	8013312 <_svfiprintf_r+0x176>
 8013364:	89ab      	ldrh	r3, [r5, #12]
 8013366:	065b      	lsls	r3, r3, #25
 8013368:	f53f af2c 	bmi.w	80131c4 <_svfiprintf_r+0x28>
 801336c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801336e:	b01d      	add	sp, #116	; 0x74
 8013370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013374:	ab03      	add	r3, sp, #12
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	462a      	mov	r2, r5
 801337a:	4b06      	ldr	r3, [pc, #24]	; (8013394 <_svfiprintf_r+0x1f8>)
 801337c:	a904      	add	r1, sp, #16
 801337e:	4638      	mov	r0, r7
 8013380:	f7fc f944 	bl	800f60c <_printf_i>
 8013384:	e7eb      	b.n	801335e <_svfiprintf_r+0x1c2>
 8013386:	bf00      	nop
 8013388:	0802a1a4 	.word	0x0802a1a4
 801338c:	0802a1ae 	.word	0x0802a1ae
 8013390:	0800f0c5 	.word	0x0800f0c5
 8013394:	080130e7 	.word	0x080130e7
 8013398:	0802a1aa 	.word	0x0802a1aa
 801339c:	00000000 	.word	0x00000000

080133a0 <nan>:
 80133a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80133a8 <nan+0x8>
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	00000000 	.word	0x00000000
 80133ac:	7ff80000 	.word	0x7ff80000

080133b0 <_sbrk_r>:
 80133b0:	b538      	push	{r3, r4, r5, lr}
 80133b2:	4d06      	ldr	r5, [pc, #24]	; (80133cc <_sbrk_r+0x1c>)
 80133b4:	2300      	movs	r3, #0
 80133b6:	4604      	mov	r4, r0
 80133b8:	4608      	mov	r0, r1
 80133ba:	602b      	str	r3, [r5, #0]
 80133bc:	f7f0 fa28 	bl	8003810 <_sbrk>
 80133c0:	1c43      	adds	r3, r0, #1
 80133c2:	d102      	bne.n	80133ca <_sbrk_r+0x1a>
 80133c4:	682b      	ldr	r3, [r5, #0]
 80133c6:	b103      	cbz	r3, 80133ca <_sbrk_r+0x1a>
 80133c8:	6023      	str	r3, [r4, #0]
 80133ca:	bd38      	pop	{r3, r4, r5, pc}
 80133cc:	20013374 	.word	0x20013374

080133d0 <_raise_r>:
 80133d0:	291f      	cmp	r1, #31
 80133d2:	b538      	push	{r3, r4, r5, lr}
 80133d4:	4604      	mov	r4, r0
 80133d6:	460d      	mov	r5, r1
 80133d8:	d904      	bls.n	80133e4 <_raise_r+0x14>
 80133da:	2316      	movs	r3, #22
 80133dc:	6003      	str	r3, [r0, #0]
 80133de:	f04f 30ff 	mov.w	r0, #4294967295
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133e6:	b112      	cbz	r2, 80133ee <_raise_r+0x1e>
 80133e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133ec:	b94b      	cbnz	r3, 8013402 <_raise_r+0x32>
 80133ee:	4620      	mov	r0, r4
 80133f0:	f000 f830 	bl	8013454 <_getpid_r>
 80133f4:	462a      	mov	r2, r5
 80133f6:	4601      	mov	r1, r0
 80133f8:	4620      	mov	r0, r4
 80133fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133fe:	f000 b817 	b.w	8013430 <_kill_r>
 8013402:	2b01      	cmp	r3, #1
 8013404:	d00a      	beq.n	801341c <_raise_r+0x4c>
 8013406:	1c59      	adds	r1, r3, #1
 8013408:	d103      	bne.n	8013412 <_raise_r+0x42>
 801340a:	2316      	movs	r3, #22
 801340c:	6003      	str	r3, [r0, #0]
 801340e:	2001      	movs	r0, #1
 8013410:	e7e7      	b.n	80133e2 <_raise_r+0x12>
 8013412:	2400      	movs	r4, #0
 8013414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013418:	4628      	mov	r0, r5
 801341a:	4798      	blx	r3
 801341c:	2000      	movs	r0, #0
 801341e:	e7e0      	b.n	80133e2 <_raise_r+0x12>

08013420 <raise>:
 8013420:	4b02      	ldr	r3, [pc, #8]	; (801342c <raise+0xc>)
 8013422:	4601      	mov	r1, r0
 8013424:	6818      	ldr	r0, [r3, #0]
 8013426:	f7ff bfd3 	b.w	80133d0 <_raise_r>
 801342a:	bf00      	nop
 801342c:	200000dc 	.word	0x200000dc

08013430 <_kill_r>:
 8013430:	b538      	push	{r3, r4, r5, lr}
 8013432:	4d07      	ldr	r5, [pc, #28]	; (8013450 <_kill_r+0x20>)
 8013434:	2300      	movs	r3, #0
 8013436:	4604      	mov	r4, r0
 8013438:	4608      	mov	r0, r1
 801343a:	4611      	mov	r1, r2
 801343c:	602b      	str	r3, [r5, #0]
 801343e:	f7f0 f97b 	bl	8003738 <_kill>
 8013442:	1c43      	adds	r3, r0, #1
 8013444:	d102      	bne.n	801344c <_kill_r+0x1c>
 8013446:	682b      	ldr	r3, [r5, #0]
 8013448:	b103      	cbz	r3, 801344c <_kill_r+0x1c>
 801344a:	6023      	str	r3, [r4, #0]
 801344c:	bd38      	pop	{r3, r4, r5, pc}
 801344e:	bf00      	nop
 8013450:	20013374 	.word	0x20013374

08013454 <_getpid_r>:
 8013454:	f7f0 b968 	b.w	8003728 <_getpid>

08013458 <__sread>:
 8013458:	b510      	push	{r4, lr}
 801345a:	460c      	mov	r4, r1
 801345c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013460:	f000 f8c8 	bl	80135f4 <_read_r>
 8013464:	2800      	cmp	r0, #0
 8013466:	bfab      	itete	ge
 8013468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801346a:	89a3      	ldrhlt	r3, [r4, #12]
 801346c:	181b      	addge	r3, r3, r0
 801346e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013472:	bfac      	ite	ge
 8013474:	6563      	strge	r3, [r4, #84]	; 0x54
 8013476:	81a3      	strhlt	r3, [r4, #12]
 8013478:	bd10      	pop	{r4, pc}

0801347a <__swrite>:
 801347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801347e:	461f      	mov	r7, r3
 8013480:	898b      	ldrh	r3, [r1, #12]
 8013482:	05db      	lsls	r3, r3, #23
 8013484:	4605      	mov	r5, r0
 8013486:	460c      	mov	r4, r1
 8013488:	4616      	mov	r6, r2
 801348a:	d505      	bpl.n	8013498 <__swrite+0x1e>
 801348c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013490:	2302      	movs	r3, #2
 8013492:	2200      	movs	r2, #0
 8013494:	f000 f888 	bl	80135a8 <_lseek_r>
 8013498:	89a3      	ldrh	r3, [r4, #12]
 801349a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801349e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134a2:	81a3      	strh	r3, [r4, #12]
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	4628      	mov	r0, r5
 80134aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134ae:	f000 b837 	b.w	8013520 <_write_r>

080134b2 <__sseek>:
 80134b2:	b510      	push	{r4, lr}
 80134b4:	460c      	mov	r4, r1
 80134b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ba:	f000 f875 	bl	80135a8 <_lseek_r>
 80134be:	1c43      	adds	r3, r0, #1
 80134c0:	89a3      	ldrh	r3, [r4, #12]
 80134c2:	bf15      	itete	ne
 80134c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80134c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134ce:	81a3      	strheq	r3, [r4, #12]
 80134d0:	bf18      	it	ne
 80134d2:	81a3      	strhne	r3, [r4, #12]
 80134d4:	bd10      	pop	{r4, pc}

080134d6 <__sclose>:
 80134d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134da:	f000 b833 	b.w	8013544 <_close_r>

080134de <strncmp>:
 80134de:	b510      	push	{r4, lr}
 80134e0:	b17a      	cbz	r2, 8013502 <strncmp+0x24>
 80134e2:	4603      	mov	r3, r0
 80134e4:	3901      	subs	r1, #1
 80134e6:	1884      	adds	r4, r0, r2
 80134e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80134ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80134f0:	4290      	cmp	r0, r2
 80134f2:	d101      	bne.n	80134f8 <strncmp+0x1a>
 80134f4:	42a3      	cmp	r3, r4
 80134f6:	d101      	bne.n	80134fc <strncmp+0x1e>
 80134f8:	1a80      	subs	r0, r0, r2
 80134fa:	bd10      	pop	{r4, pc}
 80134fc:	2800      	cmp	r0, #0
 80134fe:	d1f3      	bne.n	80134e8 <strncmp+0xa>
 8013500:	e7fa      	b.n	80134f8 <strncmp+0x1a>
 8013502:	4610      	mov	r0, r2
 8013504:	e7f9      	b.n	80134fa <strncmp+0x1c>

08013506 <__ascii_wctomb>:
 8013506:	b149      	cbz	r1, 801351c <__ascii_wctomb+0x16>
 8013508:	2aff      	cmp	r2, #255	; 0xff
 801350a:	bf85      	ittet	hi
 801350c:	238a      	movhi	r3, #138	; 0x8a
 801350e:	6003      	strhi	r3, [r0, #0]
 8013510:	700a      	strbls	r2, [r1, #0]
 8013512:	f04f 30ff 	movhi.w	r0, #4294967295
 8013516:	bf98      	it	ls
 8013518:	2001      	movls	r0, #1
 801351a:	4770      	bx	lr
 801351c:	4608      	mov	r0, r1
 801351e:	4770      	bx	lr

08013520 <_write_r>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	4d07      	ldr	r5, [pc, #28]	; (8013540 <_write_r+0x20>)
 8013524:	4604      	mov	r4, r0
 8013526:	4608      	mov	r0, r1
 8013528:	4611      	mov	r1, r2
 801352a:	2200      	movs	r2, #0
 801352c:	602a      	str	r2, [r5, #0]
 801352e:	461a      	mov	r2, r3
 8013530:	f7ef ff34 	bl	800339c <_write>
 8013534:	1c43      	adds	r3, r0, #1
 8013536:	d102      	bne.n	801353e <_write_r+0x1e>
 8013538:	682b      	ldr	r3, [r5, #0]
 801353a:	b103      	cbz	r3, 801353e <_write_r+0x1e>
 801353c:	6023      	str	r3, [r4, #0]
 801353e:	bd38      	pop	{r3, r4, r5, pc}
 8013540:	20013374 	.word	0x20013374

08013544 <_close_r>:
 8013544:	b538      	push	{r3, r4, r5, lr}
 8013546:	4d06      	ldr	r5, [pc, #24]	; (8013560 <_close_r+0x1c>)
 8013548:	2300      	movs	r3, #0
 801354a:	4604      	mov	r4, r0
 801354c:	4608      	mov	r0, r1
 801354e:	602b      	str	r3, [r5, #0]
 8013550:	f7f0 f929 	bl	80037a6 <_close>
 8013554:	1c43      	adds	r3, r0, #1
 8013556:	d102      	bne.n	801355e <_close_r+0x1a>
 8013558:	682b      	ldr	r3, [r5, #0]
 801355a:	b103      	cbz	r3, 801355e <_close_r+0x1a>
 801355c:	6023      	str	r3, [r4, #0]
 801355e:	bd38      	pop	{r3, r4, r5, pc}
 8013560:	20013374 	.word	0x20013374

08013564 <_fstat_r>:
 8013564:	b538      	push	{r3, r4, r5, lr}
 8013566:	4d07      	ldr	r5, [pc, #28]	; (8013584 <_fstat_r+0x20>)
 8013568:	2300      	movs	r3, #0
 801356a:	4604      	mov	r4, r0
 801356c:	4608      	mov	r0, r1
 801356e:	4611      	mov	r1, r2
 8013570:	602b      	str	r3, [r5, #0]
 8013572:	f7f0 f924 	bl	80037be <_fstat>
 8013576:	1c43      	adds	r3, r0, #1
 8013578:	d102      	bne.n	8013580 <_fstat_r+0x1c>
 801357a:	682b      	ldr	r3, [r5, #0]
 801357c:	b103      	cbz	r3, 8013580 <_fstat_r+0x1c>
 801357e:	6023      	str	r3, [r4, #0]
 8013580:	bd38      	pop	{r3, r4, r5, pc}
 8013582:	bf00      	nop
 8013584:	20013374 	.word	0x20013374

08013588 <_isatty_r>:
 8013588:	b538      	push	{r3, r4, r5, lr}
 801358a:	4d06      	ldr	r5, [pc, #24]	; (80135a4 <_isatty_r+0x1c>)
 801358c:	2300      	movs	r3, #0
 801358e:	4604      	mov	r4, r0
 8013590:	4608      	mov	r0, r1
 8013592:	602b      	str	r3, [r5, #0]
 8013594:	f7f0 f923 	bl	80037de <_isatty>
 8013598:	1c43      	adds	r3, r0, #1
 801359a:	d102      	bne.n	80135a2 <_isatty_r+0x1a>
 801359c:	682b      	ldr	r3, [r5, #0]
 801359e:	b103      	cbz	r3, 80135a2 <_isatty_r+0x1a>
 80135a0:	6023      	str	r3, [r4, #0]
 80135a2:	bd38      	pop	{r3, r4, r5, pc}
 80135a4:	20013374 	.word	0x20013374

080135a8 <_lseek_r>:
 80135a8:	b538      	push	{r3, r4, r5, lr}
 80135aa:	4d07      	ldr	r5, [pc, #28]	; (80135c8 <_lseek_r+0x20>)
 80135ac:	4604      	mov	r4, r0
 80135ae:	4608      	mov	r0, r1
 80135b0:	4611      	mov	r1, r2
 80135b2:	2200      	movs	r2, #0
 80135b4:	602a      	str	r2, [r5, #0]
 80135b6:	461a      	mov	r2, r3
 80135b8:	f7f0 f91c 	bl	80037f4 <_lseek>
 80135bc:	1c43      	adds	r3, r0, #1
 80135be:	d102      	bne.n	80135c6 <_lseek_r+0x1e>
 80135c0:	682b      	ldr	r3, [r5, #0]
 80135c2:	b103      	cbz	r3, 80135c6 <_lseek_r+0x1e>
 80135c4:	6023      	str	r3, [r4, #0]
 80135c6:	bd38      	pop	{r3, r4, r5, pc}
 80135c8:	20013374 	.word	0x20013374

080135cc <__malloc_lock>:
 80135cc:	4801      	ldr	r0, [pc, #4]	; (80135d4 <__malloc_lock+0x8>)
 80135ce:	f7fe bf08 	b.w	80123e2 <__retarget_lock_acquire_recursive>
 80135d2:	bf00      	nop
 80135d4:	20013366 	.word	0x20013366

080135d8 <__malloc_unlock>:
 80135d8:	4801      	ldr	r0, [pc, #4]	; (80135e0 <__malloc_unlock+0x8>)
 80135da:	f7fe bf03 	b.w	80123e4 <__retarget_lock_release_recursive>
 80135de:	bf00      	nop
 80135e0:	20013366 	.word	0x20013366

080135e4 <_malloc_usable_size_r>:
 80135e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135e8:	1f18      	subs	r0, r3, #4
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	bfbc      	itt	lt
 80135ee:	580b      	ldrlt	r3, [r1, r0]
 80135f0:	18c0      	addlt	r0, r0, r3
 80135f2:	4770      	bx	lr

080135f4 <_read_r>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	4d07      	ldr	r5, [pc, #28]	; (8013614 <_read_r+0x20>)
 80135f8:	4604      	mov	r4, r0
 80135fa:	4608      	mov	r0, r1
 80135fc:	4611      	mov	r1, r2
 80135fe:	2200      	movs	r2, #0
 8013600:	602a      	str	r2, [r5, #0]
 8013602:	461a      	mov	r2, r3
 8013604:	f7f0 f8b2 	bl	800376c <_read>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d102      	bne.n	8013612 <_read_r+0x1e>
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	b103      	cbz	r3, 8013612 <_read_r+0x1e>
 8013610:	6023      	str	r3, [r4, #0]
 8013612:	bd38      	pop	{r3, r4, r5, pc}
 8013614:	20013374 	.word	0x20013374

08013618 <cosf>:
 8013618:	ee10 3a10 	vmov	r3, s0
 801361c:	4a18      	ldr	r2, [pc, #96]	; (8013680 <cosf+0x68>)
 801361e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013622:	4293      	cmp	r3, r2
 8013624:	dd1b      	ble.n	801365e <cosf+0x46>
 8013626:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801362a:	db02      	blt.n	8013632 <cosf+0x1a>
 801362c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013630:	4770      	bx	lr
 8013632:	b500      	push	{lr}
 8013634:	b083      	sub	sp, #12
 8013636:	4668      	mov	r0, sp
 8013638:	f000 fa86 	bl	8013b48 <__ieee754_rem_pio2f>
 801363c:	f000 0003 	and.w	r0, r0, #3
 8013640:	2801      	cmp	r0, #1
 8013642:	eddd 0a01 	vldr	s1, [sp, #4]
 8013646:	ed9d 0a00 	vldr	s0, [sp]
 801364a:	d00c      	beq.n	8013666 <cosf+0x4e>
 801364c:	2802      	cmp	r0, #2
 801364e:	d012      	beq.n	8013676 <cosf+0x5e>
 8013650:	b170      	cbz	r0, 8013670 <cosf+0x58>
 8013652:	2001      	movs	r0, #1
 8013654:	f000 ff6a 	bl	801452c <__kernel_sinf>
 8013658:	b003      	add	sp, #12
 801365a:	f85d fb04 	ldr.w	pc, [sp], #4
 801365e:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013684 <cosf+0x6c>
 8013662:	f000 bba7 	b.w	8013db4 <__kernel_cosf>
 8013666:	f000 ff61 	bl	801452c <__kernel_sinf>
 801366a:	eeb1 0a40 	vneg.f32	s0, s0
 801366e:	e7f3      	b.n	8013658 <cosf+0x40>
 8013670:	f000 fba0 	bl	8013db4 <__kernel_cosf>
 8013674:	e7f0      	b.n	8013658 <cosf+0x40>
 8013676:	f000 fb9d 	bl	8013db4 <__kernel_cosf>
 801367a:	eeb1 0a40 	vneg.f32	s0, s0
 801367e:	e7eb      	b.n	8013658 <cosf+0x40>
 8013680:	3f490fd8 	.word	0x3f490fd8
 8013684:	00000000 	.word	0x00000000

08013688 <sinf>:
 8013688:	ee10 3a10 	vmov	r3, s0
 801368c:	4a19      	ldr	r2, [pc, #100]	; (80136f4 <sinf+0x6c>)
 801368e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013692:	4293      	cmp	r3, r2
 8013694:	dd1c      	ble.n	80136d0 <sinf+0x48>
 8013696:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801369a:	db02      	blt.n	80136a2 <sinf+0x1a>
 801369c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80136a0:	4770      	bx	lr
 80136a2:	b500      	push	{lr}
 80136a4:	b083      	sub	sp, #12
 80136a6:	4668      	mov	r0, sp
 80136a8:	f000 fa4e 	bl	8013b48 <__ieee754_rem_pio2f>
 80136ac:	f000 0003 	and.w	r0, r0, #3
 80136b0:	2801      	cmp	r0, #1
 80136b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80136b6:	ed9d 0a00 	vldr	s0, [sp]
 80136ba:	d00e      	beq.n	80136da <sinf+0x52>
 80136bc:	2802      	cmp	r0, #2
 80136be:	d013      	beq.n	80136e8 <sinf+0x60>
 80136c0:	b170      	cbz	r0, 80136e0 <sinf+0x58>
 80136c2:	f000 fb77 	bl	8013db4 <__kernel_cosf>
 80136c6:	eeb1 0a40 	vneg.f32	s0, s0
 80136ca:	b003      	add	sp, #12
 80136cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80136d0:	eddf 0a09 	vldr	s1, [pc, #36]	; 80136f8 <sinf+0x70>
 80136d4:	2000      	movs	r0, #0
 80136d6:	f000 bf29 	b.w	801452c <__kernel_sinf>
 80136da:	f000 fb6b 	bl	8013db4 <__kernel_cosf>
 80136de:	e7f4      	b.n	80136ca <sinf+0x42>
 80136e0:	2001      	movs	r0, #1
 80136e2:	f000 ff23 	bl	801452c <__kernel_sinf>
 80136e6:	e7f0      	b.n	80136ca <sinf+0x42>
 80136e8:	2001      	movs	r0, #1
 80136ea:	f000 ff1f 	bl	801452c <__kernel_sinf>
 80136ee:	eeb1 0a40 	vneg.f32	s0, s0
 80136f2:	e7ea      	b.n	80136ca <sinf+0x42>
 80136f4:	3f490fd8 	.word	0x3f490fd8
 80136f8:	00000000 	.word	0x00000000

080136fc <tanf>:
 80136fc:	ee10 3a10 	vmov	r3, s0
 8013700:	4a11      	ldr	r2, [pc, #68]	; (8013748 <tanf+0x4c>)
 8013702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013706:	4293      	cmp	r3, r2
 8013708:	dd18      	ble.n	801373c <tanf+0x40>
 801370a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801370e:	db02      	blt.n	8013716 <tanf+0x1a>
 8013710:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013714:	4770      	bx	lr
 8013716:	b500      	push	{lr}
 8013718:	b083      	sub	sp, #12
 801371a:	4668      	mov	r0, sp
 801371c:	f000 fa14 	bl	8013b48 <__ieee754_rem_pio2f>
 8013720:	0040      	lsls	r0, r0, #1
 8013722:	f000 0002 	and.w	r0, r0, #2
 8013726:	eddd 0a01 	vldr	s1, [sp, #4]
 801372a:	ed9d 0a00 	vldr	s0, [sp]
 801372e:	f1c0 0001 	rsb	r0, r0, #1
 8013732:	f000 ff43 	bl	80145bc <__kernel_tanf>
 8013736:	b003      	add	sp, #12
 8013738:	f85d fb04 	ldr.w	pc, [sp], #4
 801373c:	eddf 0a03 	vldr	s1, [pc, #12]	; 801374c <tanf+0x50>
 8013740:	2001      	movs	r0, #1
 8013742:	f000 bf3b 	b.w	80145bc <__kernel_tanf>
 8013746:	bf00      	nop
 8013748:	3f490fda 	.word	0x3f490fda
 801374c:	00000000 	.word	0x00000000

08013750 <atan2f>:
 8013750:	f000 b852 	b.w	80137f8 <__ieee754_atan2f>

08013754 <logf>:
 8013754:	b508      	push	{r3, lr}
 8013756:	ed2d 8b02 	vpush	{d8}
 801375a:	eeb0 8a40 	vmov.f32	s16, s0
 801375e:	f000 f8f3 	bl	8013948 <__ieee754_logf>
 8013762:	eeb4 8a48 	vcmp.f32	s16, s16
 8013766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801376a:	d60f      	bvs.n	801378c <logf+0x38>
 801376c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013774:	dc0a      	bgt.n	801378c <logf+0x38>
 8013776:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801377e:	d108      	bne.n	8013792 <logf+0x3e>
 8013780:	f7fb fa54 	bl	800ec2c <__errno>
 8013784:	2322      	movs	r3, #34	; 0x22
 8013786:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80137ac <logf+0x58>
 801378a:	6003      	str	r3, [r0, #0]
 801378c:	ecbd 8b02 	vpop	{d8}
 8013790:	bd08      	pop	{r3, pc}
 8013792:	f7fb fa4b 	bl	800ec2c <__errno>
 8013796:	ecbd 8b02 	vpop	{d8}
 801379a:	4603      	mov	r3, r0
 801379c:	2221      	movs	r2, #33	; 0x21
 801379e:	601a      	str	r2, [r3, #0]
 80137a0:	4803      	ldr	r0, [pc, #12]	; (80137b0 <logf+0x5c>)
 80137a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80137a6:	f7fc badd 	b.w	800fd64 <nanf>
 80137aa:	bf00      	nop
 80137ac:	ff800000 	.word	0xff800000
 80137b0:	0802a66c 	.word	0x0802a66c

080137b4 <sqrtf>:
 80137b4:	b508      	push	{r3, lr}
 80137b6:	ed2d 8b02 	vpush	{d8}
 80137ba:	eeb0 8a40 	vmov.f32	s16, s0
 80137be:	f000 faf5 	bl	8013dac <__ieee754_sqrtf>
 80137c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80137c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ca:	d606      	bvs.n	80137da <sqrtf+0x26>
 80137cc:	eddf 8a09 	vldr	s17, [pc, #36]	; 80137f4 <sqrtf+0x40>
 80137d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80137d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d8:	d402      	bmi.n	80137e0 <sqrtf+0x2c>
 80137da:	ecbd 8b02 	vpop	{d8}
 80137de:	bd08      	pop	{r3, pc}
 80137e0:	f7fb fa24 	bl	800ec2c <__errno>
 80137e4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80137e8:	ecbd 8b02 	vpop	{d8}
 80137ec:	2321      	movs	r3, #33	; 0x21
 80137ee:	6003      	str	r3, [r0, #0]
 80137f0:	bd08      	pop	{r3, pc}
 80137f2:	bf00      	nop
 80137f4:	00000000 	.word	0x00000000

080137f8 <__ieee754_atan2f>:
 80137f8:	b510      	push	{r4, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	edcd 0a01 	vstr	s1, [sp, #4]
 8013800:	9b01      	ldr	r3, [sp, #4]
 8013802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013806:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801380a:	eef0 7a40 	vmov.f32	s15, s0
 801380e:	dc30      	bgt.n	8013872 <__ieee754_atan2f+0x7a>
 8013810:	ee10 0a10 	vmov	r0, s0
 8013814:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8013818:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801381c:	dc29      	bgt.n	8013872 <__ieee754_atan2f+0x7a>
 801381e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013822:	d042      	beq.n	80138aa <__ieee754_atan2f+0xb2>
 8013824:	179c      	asrs	r4, r3, #30
 8013826:	f004 0402 	and.w	r4, r4, #2
 801382a:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801382e:	b331      	cbz	r1, 801387e <__ieee754_atan2f+0x86>
 8013830:	b37a      	cbz	r2, 8013892 <__ieee754_atan2f+0x9a>
 8013832:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013836:	d040      	beq.n	80138ba <__ieee754_atan2f+0xc2>
 8013838:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801383c:	d029      	beq.n	8013892 <__ieee754_atan2f+0x9a>
 801383e:	1a8a      	subs	r2, r1, r2
 8013840:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8013844:	ea4f 51e2 	mov.w	r1, r2, asr #23
 8013848:	da34      	bge.n	80138b4 <__ieee754_atan2f+0xbc>
 801384a:	2b00      	cmp	r3, #0
 801384c:	da42      	bge.n	80138d4 <__ieee754_atan2f+0xdc>
 801384e:	313c      	adds	r1, #60	; 0x3c
 8013850:	da40      	bge.n	80138d4 <__ieee754_atan2f+0xdc>
 8013852:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8013924 <__ieee754_atan2f+0x12c>
 8013856:	2c01      	cmp	r4, #1
 8013858:	d04e      	beq.n	80138f8 <__ieee754_atan2f+0x100>
 801385a:	2c02      	cmp	r4, #2
 801385c:	d043      	beq.n	80138e6 <__ieee754_atan2f+0xee>
 801385e:	b164      	cbz	r4, 801387a <__ieee754_atan2f+0x82>
 8013860:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013928 <__ieee754_atan2f+0x130>
 8013864:	eddf 7a31 	vldr	s15, [pc, #196]	; 801392c <__ieee754_atan2f+0x134>
 8013868:	ee30 0a07 	vadd.f32	s0, s0, s14
 801386c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013870:	e003      	b.n	801387a <__ieee754_atan2f+0x82>
 8013872:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013876:	ee37 0a27 	vadd.f32	s0, s14, s15
 801387a:	b002      	add	sp, #8
 801387c:	bd10      	pop	{r4, pc}
 801387e:	2c02      	cmp	r4, #2
 8013880:	d010      	beq.n	80138a4 <__ieee754_atan2f+0xac>
 8013882:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8013930 <__ieee754_atan2f+0x138>
 8013886:	2c03      	cmp	r4, #3
 8013888:	bf18      	it	ne
 801388a:	eeb0 0a67 	vmovne.f32	s0, s15
 801388e:	b002      	add	sp, #8
 8013890:	bd10      	pop	{r4, pc}
 8013892:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8013934 <__ieee754_atan2f+0x13c>
 8013896:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013938 <__ieee754_atan2f+0x140>
 801389a:	2800      	cmp	r0, #0
 801389c:	bfb8      	it	lt
 801389e:	eeb0 0a67 	vmovlt.f32	s0, s15
 80138a2:	e7ea      	b.n	801387a <__ieee754_atan2f+0x82>
 80138a4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 801392c <__ieee754_atan2f+0x134>
 80138a8:	e7e7      	b.n	801387a <__ieee754_atan2f+0x82>
 80138aa:	b002      	add	sp, #8
 80138ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138b0:	f000 bf64 	b.w	801477c <atanf>
 80138b4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8013934 <__ieee754_atan2f+0x13c>
 80138b8:	e7cd      	b.n	8013856 <__ieee754_atan2f+0x5e>
 80138ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80138be:	f104 34ff 	add.w	r4, r4, #4294967295
 80138c2:	d020      	beq.n	8013906 <__ieee754_atan2f+0x10e>
 80138c4:	2c02      	cmp	r4, #2
 80138c6:	d826      	bhi.n	8013916 <__ieee754_atan2f+0x11e>
 80138c8:	4b1c      	ldr	r3, [pc, #112]	; (801393c <__ieee754_atan2f+0x144>)
 80138ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80138ce:	ed94 0a00 	vldr	s0, [r4]
 80138d2:	e7d2      	b.n	801387a <__ieee754_atan2f+0x82>
 80138d4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80138d8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80138dc:	f001 f828 	bl	8014930 <fabsf>
 80138e0:	f000 ff4c 	bl	801477c <atanf>
 80138e4:	e7b7      	b.n	8013856 <__ieee754_atan2f+0x5e>
 80138e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013928 <__ieee754_atan2f+0x130>
 80138ea:	eddf 7a10 	vldr	s15, [pc, #64]	; 801392c <__ieee754_atan2f+0x134>
 80138ee:	ee30 0a07 	vadd.f32	s0, s0, s14
 80138f2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80138f6:	e7c0      	b.n	801387a <__ieee754_atan2f+0x82>
 80138f8:	ee10 3a10 	vmov	r3, s0
 80138fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013900:	ee00 3a10 	vmov	s0, r3
 8013904:	e7b9      	b.n	801387a <__ieee754_atan2f+0x82>
 8013906:	2c02      	cmp	r4, #2
 8013908:	d808      	bhi.n	801391c <__ieee754_atan2f+0x124>
 801390a:	4b0d      	ldr	r3, [pc, #52]	; (8013940 <__ieee754_atan2f+0x148>)
 801390c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013910:	ed94 0a00 	vldr	s0, [r4]
 8013914:	e7b1      	b.n	801387a <__ieee754_atan2f+0x82>
 8013916:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013924 <__ieee754_atan2f+0x12c>
 801391a:	e7ae      	b.n	801387a <__ieee754_atan2f+0x82>
 801391c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8013944 <__ieee754_atan2f+0x14c>
 8013920:	e7ab      	b.n	801387a <__ieee754_atan2f+0x82>
 8013922:	bf00      	nop
 8013924:	00000000 	.word	0x00000000
 8013928:	33bbbd2e 	.word	0x33bbbd2e
 801392c:	40490fdb 	.word	0x40490fdb
 8013930:	c0490fdb 	.word	0xc0490fdb
 8013934:	3fc90fdb 	.word	0x3fc90fdb
 8013938:	bfc90fdb 	.word	0xbfc90fdb
 801393c:	0802a67c 	.word	0x0802a67c
 8013940:	0802a670 	.word	0x0802a670
 8013944:	3f490fdb 	.word	0x3f490fdb

08013948 <__ieee754_logf>:
 8013948:	ee10 3a10 	vmov	r3, s0
 801394c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013950:	d02e      	beq.n	80139b0 <__ieee754_logf+0x68>
 8013952:	2b00      	cmp	r3, #0
 8013954:	db33      	blt.n	80139be <__ieee754_logf+0x76>
 8013956:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801395a:	da40      	bge.n	80139de <__ieee754_logf+0x96>
 801395c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013960:	db34      	blt.n	80139cc <__ieee754_logf+0x84>
 8013962:	f04f 0c00 	mov.w	ip, #0
 8013966:	4868      	ldr	r0, [pc, #416]	; (8013b08 <__ieee754_logf+0x1c0>)
 8013968:	f3c3 0116 	ubfx	r1, r3, #0, #23
 801396c:	4408      	add	r0, r1
 801396e:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 8013972:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 8013976:	430a      	orrs	r2, r1
 8013978:	15db      	asrs	r3, r3, #23
 801397a:	ee00 2a10 	vmov	s0, r2
 801397e:	3b7f      	subs	r3, #127	; 0x7f
 8013980:	4a62      	ldr	r2, [pc, #392]	; (8013b0c <__ieee754_logf+0x1c4>)
 8013982:	4463      	add	r3, ip
 8013984:	f101 0c0f 	add.w	ip, r1, #15
 8013988:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801398c:	ea0c 0202 	and.w	r2, ip, r2
 8013990:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013994:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8013998:	bb22      	cbnz	r2, 80139e4 <__ieee754_logf+0x9c>
 801399a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801399e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a2:	d160      	bne.n	8013a66 <__ieee754_logf+0x11e>
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f040 8092 	bne.w	8013ace <__ieee754_logf+0x186>
 80139aa:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8013b10 <__ieee754_logf+0x1c8>
 80139ae:	4770      	bx	lr
 80139b0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8013b14 <__ieee754_logf+0x1cc>
 80139b4:	eddf 7a56 	vldr	s15, [pc, #344]	; 8013b10 <__ieee754_logf+0x1c8>
 80139b8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80139bc:	4770      	bx	lr
 80139be:	ee70 7a40 	vsub.f32	s15, s0, s0
 80139c2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8013b10 <__ieee754_logf+0x1c8>
 80139c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80139ca:	4770      	bx	lr
 80139cc:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013b18 <__ieee754_logf+0x1d0>
 80139d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80139d4:	f06f 0c18 	mvn.w	ip, #24
 80139d8:	ee17 3a90 	vmov	r3, s15
 80139dc:	e7c3      	b.n	8013966 <__ieee754_logf+0x1e>
 80139de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80139e2:	4770      	bx	lr
 80139e4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80139e8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80139ec:	ee07 3a10 	vmov	s14, r3
 80139f0:	ee80 4a27 	vdiv.f32	s8, s0, s15
 80139f4:	4849      	ldr	r0, [pc, #292]	; (8013b1c <__ieee754_logf+0x1d4>)
 80139f6:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
 80139fa:	4408      	add	r0, r1
 80139fc:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8013a00:	4302      	orrs	r2, r0
 8013a02:	2a00      	cmp	r2, #0
 8013a04:	ed9f 3a46 	vldr	s6, [pc, #280]	; 8013b20 <__ieee754_logf+0x1d8>
 8013a08:	eddf 4a46 	vldr	s9, [pc, #280]	; 8013b24 <__ieee754_logf+0x1dc>
 8013a0c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8013b28 <__ieee754_logf+0x1e0>
 8013a10:	eddf 3a46 	vldr	s7, [pc, #280]	; 8013b2c <__ieee754_logf+0x1e4>
 8013a14:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8013b30 <__ieee754_logf+0x1e8>
 8013a18:	eddf 7a46 	vldr	s15, [pc, #280]	; 8013b34 <__ieee754_logf+0x1ec>
 8013a1c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013b38 <__ieee754_logf+0x1f0>
 8013a20:	ee24 6a04 	vmul.f32	s12, s8, s8
 8013a24:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 8013a28:	ee26 7a06 	vmul.f32	s14, s12, s12
 8013a2c:	eee7 4a03 	vfma.f32	s9, s14, s6
 8013a30:	eea7 5a23 	vfma.f32	s10, s14, s7
 8013a34:	eee4 5a87 	vfma.f32	s11, s9, s14
 8013a38:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013a3c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013a40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013a44:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a48:	dd2a      	ble.n	8013aa0 <__ieee754_logf+0x158>
 8013a4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013a4e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013a52:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013a56:	bb4b      	cbnz	r3, 8013aac <__ieee754_logf+0x164>
 8013a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a5c:	eea7 7ac4 	vfms.f32	s14, s15, s8
 8013a60:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013a64:	4770      	bx	lr
 8013a66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013a6a:	eddf 6a34 	vldr	s13, [pc, #208]	; 8013b3c <__ieee754_logf+0x1f4>
 8013a6e:	eef0 7a47 	vmov.f32	s15, s14
 8013a72:	eee0 7a66 	vfms.f32	s15, s0, s13
 8013a76:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d0ee      	beq.n	8013a60 <__ieee754_logf+0x118>
 8013a82:	ee07 3a90 	vmov	s15, r3
 8013a86:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8013b40 <__ieee754_logf+0x1f8>
 8013a8a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013b44 <__ieee754_logf+0x1fc>
 8013a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a92:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8013a96:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013a9a:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8013a9e:	4770      	bx	lr
 8013aa0:	bb13      	cbnz	r3, 8013ae8 <__ieee754_logf+0x1a0>
 8013aa2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013aa6:	eea7 0ac4 	vfms.f32	s0, s15, s8
 8013aaa:	4770      	bx	lr
 8013aac:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013b40 <__ieee754_logf+0x1f8>
 8013ab0:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8013b44 <__ieee754_logf+0x1fc>
 8013ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ab8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8013abc:	eee7 6a84 	vfma.f32	s13, s15, s8
 8013ac0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013ac4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013ac8:	ee92 0a86 	vfnms.f32	s0, s5, s12
 8013acc:	4770      	bx	lr
 8013ace:	ee07 3a90 	vmov	s15, r3
 8013ad2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8013b40 <__ieee754_logf+0x1f8>
 8013ad6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8013b44 <__ieee754_logf+0x1fc>
 8013ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ade:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013ae2:	eea7 0a87 	vfma.f32	s0, s15, s14
 8013ae6:	4770      	bx	lr
 8013ae8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8013b40 <__ieee754_logf+0x1f8>
 8013aec:	eddf 6a15 	vldr	s13, [pc, #84]	; 8013b44 <__ieee754_logf+0x1fc>
 8013af0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013af4:	ee27 7a62 	vnmul.f32	s14, s14, s5
 8013af8:	eea7 7a84 	vfma.f32	s14, s15, s8
 8013afc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013b00:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8013b04:	4770      	bx	lr
 8013b06:	bf00      	nop
 8013b08:	004afb20 	.word	0x004afb20
 8013b0c:	007ffff0 	.word	0x007ffff0
 8013b10:	00000000 	.word	0x00000000
 8013b14:	cc000000 	.word	0xcc000000
 8013b18:	4c000000 	.word	0x4c000000
 8013b1c:	ffcf5c30 	.word	0xffcf5c30
 8013b20:	3e178897 	.word	0x3e178897
 8013b24:	3e3a3325 	.word	0x3e3a3325
 8013b28:	3e924925 	.word	0x3e924925
 8013b2c:	3e1cd04f 	.word	0x3e1cd04f
 8013b30:	3e638e29 	.word	0x3e638e29
 8013b34:	3f2aaaab 	.word	0x3f2aaaab
 8013b38:	3ecccccd 	.word	0x3ecccccd
 8013b3c:	3eaaaaab 	.word	0x3eaaaaab
 8013b40:	3717f7d1 	.word	0x3717f7d1
 8013b44:	3f317180 	.word	0x3f317180

08013b48 <__ieee754_rem_pio2f>:
 8013b48:	b570      	push	{r4, r5, r6, lr}
 8013b4a:	ee10 3a10 	vmov	r3, s0
 8013b4e:	4a89      	ldr	r2, [pc, #548]	; (8013d74 <__ieee754_rem_pio2f+0x22c>)
 8013b50:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013b54:	4294      	cmp	r4, r2
 8013b56:	b086      	sub	sp, #24
 8013b58:	4605      	mov	r5, r0
 8013b5a:	dd70      	ble.n	8013c3e <__ieee754_rem_pio2f+0xf6>
 8013b5c:	4a86      	ldr	r2, [pc, #536]	; (8013d78 <__ieee754_rem_pio2f+0x230>)
 8013b5e:	4294      	cmp	r4, r2
 8013b60:	ee10 6a10 	vmov	r6, s0
 8013b64:	dc22      	bgt.n	8013bac <__ieee754_rem_pio2f+0x64>
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	eddf 7a84 	vldr	s15, [pc, #528]	; 8013d7c <__ieee754_rem_pio2f+0x234>
 8013b6c:	4a84      	ldr	r2, [pc, #528]	; (8013d80 <__ieee754_rem_pio2f+0x238>)
 8013b6e:	f024 040f 	bic.w	r4, r4, #15
 8013b72:	eeb0 7a40 	vmov.f32	s14, s0
 8013b76:	f340 80e4 	ble.w	8013d42 <__ieee754_rem_pio2f+0x1fa>
 8013b7a:	4294      	cmp	r4, r2
 8013b7c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b80:	bf09      	itett	eq
 8013b82:	eddf 6a80 	vldreq	s13, [pc, #512]	; 8013d84 <__ieee754_rem_pio2f+0x23c>
 8013b86:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 8013d88 <__ieee754_rem_pio2f+0x240>
 8013b8a:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 8013d8c <__ieee754_rem_pio2f+0x244>
 8013b8e:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
 8013b92:	2001      	movs	r0, #1
 8013b94:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013b98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013b9c:	edc5 6a00 	vstr	s13, [r5]
 8013ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ba4:	edc5 7a01 	vstr	s15, [r5, #4]
 8013ba8:	b006      	add	sp, #24
 8013baa:	bd70      	pop	{r4, r5, r6, pc}
 8013bac:	4a78      	ldr	r2, [pc, #480]	; (8013d90 <__ieee754_rem_pio2f+0x248>)
 8013bae:	4294      	cmp	r4, r2
 8013bb0:	dd54      	ble.n	8013c5c <__ieee754_rem_pio2f+0x114>
 8013bb2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013bb6:	da49      	bge.n	8013c4c <__ieee754_rem_pio2f+0x104>
 8013bb8:	15e2      	asrs	r2, r4, #23
 8013bba:	3a86      	subs	r2, #134	; 0x86
 8013bbc:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8013bc0:	ee07 3a90 	vmov	s15, r3
 8013bc4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013bc8:	eddf 6a72 	vldr	s13, [pc, #456]	; 8013d94 <__ieee754_rem_pio2f+0x24c>
 8013bcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bd4:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bdc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013be8:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013bec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf8:	edcd 7a05 	vstr	s15, [sp, #20]
 8013bfc:	f040 8090 	bne.w	8013d20 <__ieee754_rem_pio2f+0x1d8>
 8013c00:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c08:	bf14      	ite	ne
 8013c0a:	2302      	movne	r3, #2
 8013c0c:	2301      	moveq	r3, #1
 8013c0e:	4962      	ldr	r1, [pc, #392]	; (8013d98 <__ieee754_rem_pio2f+0x250>)
 8013c10:	9101      	str	r1, [sp, #4]
 8013c12:	2102      	movs	r1, #2
 8013c14:	9100      	str	r1, [sp, #0]
 8013c16:	a803      	add	r0, sp, #12
 8013c18:	4629      	mov	r1, r5
 8013c1a:	f000 f94d 	bl	8013eb8 <__kernel_rem_pio2f>
 8013c1e:	2e00      	cmp	r6, #0
 8013c20:	dac2      	bge.n	8013ba8 <__ieee754_rem_pio2f+0x60>
 8013c22:	ed95 7a00 	vldr	s14, [r5]
 8013c26:	edd5 7a01 	vldr	s15, [r5, #4]
 8013c2a:	eeb1 7a47 	vneg.f32	s14, s14
 8013c2e:	eef1 7a67 	vneg.f32	s15, s15
 8013c32:	ed85 7a00 	vstr	s14, [r5]
 8013c36:	edc5 7a01 	vstr	s15, [r5, #4]
 8013c3a:	4240      	negs	r0, r0
 8013c3c:	e7b4      	b.n	8013ba8 <__ieee754_rem_pio2f+0x60>
 8013c3e:	2200      	movs	r2, #0
 8013c40:	ed85 0a00 	vstr	s0, [r5]
 8013c44:	6042      	str	r2, [r0, #4]
 8013c46:	2000      	movs	r0, #0
 8013c48:	b006      	add	sp, #24
 8013c4a:	bd70      	pop	{r4, r5, r6, pc}
 8013c4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013c50:	2000      	movs	r0, #0
 8013c52:	edc5 7a01 	vstr	s15, [r5, #4]
 8013c56:	edc5 7a00 	vstr	s15, [r5]
 8013c5a:	e7a5      	b.n	8013ba8 <__ieee754_rem_pio2f+0x60>
 8013c5c:	f000 fe68 	bl	8014930 <fabsf>
 8013c60:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8013d9c <__ieee754_rem_pio2f+0x254>
 8013c64:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8013d7c <__ieee754_rem_pio2f+0x234>
 8013c68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013c6c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013c70:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8013d88 <__ieee754_rem_pio2f+0x240>
 8013c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c78:	ee17 0a90 	vmov	r0, s15
 8013c7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013c80:	281f      	cmp	r0, #31
 8013c82:	eea6 0ac6 	vfms.f32	s0, s13, s12
 8013c86:	ee66 7a87 	vmul.f32	s15, s13, s14
 8013c8a:	eeb1 6a66 	vneg.f32	s12, s13
 8013c8e:	dc1e      	bgt.n	8013cce <__ieee754_rem_pio2f+0x186>
 8013c90:	4a43      	ldr	r2, [pc, #268]	; (8013da0 <__ieee754_rem_pio2f+0x258>)
 8013c92:	1e41      	subs	r1, r0, #1
 8013c94:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8013c98:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d016      	beq.n	8013cce <__ieee754_rem_pio2f+0x186>
 8013ca0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013ca4:	ed85 7a00 	vstr	s14, [r5]
 8013ca8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013cac:	2e00      	cmp	r6, #0
 8013cae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013cb2:	ed85 0a01 	vstr	s0, [r5, #4]
 8013cb6:	f6bf af77 	bge.w	8013ba8 <__ieee754_rem_pio2f+0x60>
 8013cba:	eeb1 7a47 	vneg.f32	s14, s14
 8013cbe:	eeb1 0a40 	vneg.f32	s0, s0
 8013cc2:	ed85 7a00 	vstr	s14, [r5]
 8013cc6:	ed85 0a01 	vstr	s0, [r5, #4]
 8013cca:	4240      	negs	r0, r0
 8013ccc:	e76c      	b.n	8013ba8 <__ieee754_rem_pio2f+0x60>
 8013cce:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013cd2:	15e2      	asrs	r2, r4, #23
 8013cd4:	ee17 3a10 	vmov	r3, s14
 8013cd8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8013cdc:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
 8013ce0:	2c08      	cmp	r4, #8
 8013ce2:	dddf      	ble.n	8013ca4 <__ieee754_rem_pio2f+0x15c>
 8013ce4:	eddf 7a27 	vldr	s15, [pc, #156]	; 8013d84 <__ieee754_rem_pio2f+0x23c>
 8013ce8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013d8c <__ieee754_rem_pio2f+0x244>
 8013cec:	eef0 5a40 	vmov.f32	s11, s0
 8013cf0:	eee6 5a27 	vfma.f32	s11, s12, s15
 8013cf4:	ee30 0a65 	vsub.f32	s0, s0, s11
 8013cf8:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013cfc:	eef0 7a40 	vmov.f32	s15, s0
 8013d00:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8013d04:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8013d08:	ee17 3a10 	vmov	r3, s14
 8013d0c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8013d10:	1ad2      	subs	r2, r2, r3
 8013d12:	2a19      	cmp	r2, #25
 8013d14:	dc06      	bgt.n	8013d24 <__ieee754_rem_pio2f+0x1dc>
 8013d16:	eeb0 0a65 	vmov.f32	s0, s11
 8013d1a:	ed85 7a00 	vstr	s14, [r5]
 8013d1e:	e7c3      	b.n	8013ca8 <__ieee754_rem_pio2f+0x160>
 8013d20:	2303      	movs	r3, #3
 8013d22:	e774      	b.n	8013c0e <__ieee754_rem_pio2f+0xc6>
 8013d24:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013da4 <__ieee754_rem_pio2f+0x25c>
 8013d28:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8013da8 <__ieee754_rem_pio2f+0x260>
 8013d2c:	eeb0 0a65 	vmov.f32	s0, s11
 8013d30:	eea6 0a07 	vfma.f32	s0, s12, s14
 8013d34:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8013d38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013d3c:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8013d40:	e7ae      	b.n	8013ca0 <__ieee754_rem_pio2f+0x158>
 8013d42:	4294      	cmp	r4, r2
 8013d44:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013d48:	bf09      	itett	eq
 8013d4a:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8013d84 <__ieee754_rem_pio2f+0x23c>
 8013d4e:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 8013d88 <__ieee754_rem_pio2f+0x240>
 8013d52:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 8013d8c <__ieee754_rem_pio2f+0x244>
 8013d56:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 8013d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013d62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d66:	edc5 6a00 	vstr	s13, [r5]
 8013d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d6e:	edc5 7a01 	vstr	s15, [r5, #4]
 8013d72:	e719      	b.n	8013ba8 <__ieee754_rem_pio2f+0x60>
 8013d74:	3f490fd8 	.word	0x3f490fd8
 8013d78:	4016cbe3 	.word	0x4016cbe3
 8013d7c:	3fc90f80 	.word	0x3fc90f80
 8013d80:	3fc90fd0 	.word	0x3fc90fd0
 8013d84:	37354400 	.word	0x37354400
 8013d88:	37354443 	.word	0x37354443
 8013d8c:	2e85a308 	.word	0x2e85a308
 8013d90:	43490f80 	.word	0x43490f80
 8013d94:	43800000 	.word	0x43800000
 8013d98:	0802a708 	.word	0x0802a708
 8013d9c:	3f22f984 	.word	0x3f22f984
 8013da0:	0802a688 	.word	0x0802a688
 8013da4:	2e85a300 	.word	0x2e85a300
 8013da8:	248d3132 	.word	0x248d3132

08013dac <__ieee754_sqrtf>:
 8013dac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013db0:	4770      	bx	lr
 8013db2:	bf00      	nop

08013db4 <__kernel_cosf>:
 8013db4:	ee10 3a10 	vmov	r3, s0
 8013db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013dbc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013dc0:	da2c      	bge.n	8013e1c <__kernel_cosf+0x68>
 8013dc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013dc6:	ee17 3a90 	vmov	r3, s15
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d060      	beq.n	8013e90 <__kernel_cosf+0xdc>
 8013dce:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013dd2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013e98 <__kernel_cosf+0xe4>
 8013dd6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8013e9c <__kernel_cosf+0xe8>
 8013dda:	eddf 5a31 	vldr	s11, [pc, #196]	; 8013ea0 <__kernel_cosf+0xec>
 8013dde:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013ea4 <__kernel_cosf+0xf0>
 8013de2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8013ea8 <__kernel_cosf+0xf4>
 8013de6:	eea7 5a27 	vfma.f32	s10, s14, s15
 8013dea:	eddf 7a30 	vldr	s15, [pc, #192]	; 8013eac <__kernel_cosf+0xf8>
 8013dee:	eee7 5a05 	vfma.f32	s11, s14, s10
 8013df2:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013df6:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013dfa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dfe:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013e02:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8013e06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e0a:	eee7 0a26 	vfma.f32	s1, s14, s13
 8013e0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013e12:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8013e16:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013e1a:	4770      	bx	lr
 8013e1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013e20:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8013e98 <__kernel_cosf+0xe4>
 8013e24:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8013e9c <__kernel_cosf+0xe8>
 8013e28:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8013ea0 <__kernel_cosf+0xec>
 8013e2c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8013ea4 <__kernel_cosf+0xf0>
 8013e30:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8013ea8 <__kernel_cosf+0xf4>
 8013e34:	4a1e      	ldr	r2, [pc, #120]	; (8013eb0 <__kernel_cosf+0xfc>)
 8013e36:	eea7 5a27 	vfma.f32	s10, s14, s15
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8013eac <__kernel_cosf+0xf8>
 8013e40:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013e44:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013e48:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013e4c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013e50:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013e54:	ddd5      	ble.n	8013e02 <__kernel_cosf+0x4e>
 8013e56:	4a17      	ldr	r2, [pc, #92]	; (8013eb4 <__kernel_cosf+0x100>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	dc14      	bgt.n	8013e86 <__kernel_cosf+0xd2>
 8013e5c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8013e60:	ee07 3a90 	vmov	s15, r3
 8013e64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013e68:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013e6c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8013e70:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8013e74:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013e78:	eee7 0a26 	vfma.f32	s1, s14, s13
 8013e7c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8013e80:	ee36 0a60 	vsub.f32	s0, s12, s1
 8013e84:	4770      	bx	lr
 8013e86:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8013e8a:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 8013e8e:	e7ed      	b.n	8013e6c <__kernel_cosf+0xb8>
 8013e90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013e94:	4770      	bx	lr
 8013e96:	bf00      	nop
 8013e98:	ad47d74e 	.word	0xad47d74e
 8013e9c:	310f74f6 	.word	0x310f74f6
 8013ea0:	b493f27c 	.word	0xb493f27c
 8013ea4:	37d00d01 	.word	0x37d00d01
 8013ea8:	3d2aaaab 	.word	0x3d2aaaab
 8013eac:	bab60b61 	.word	0xbab60b61
 8013eb0:	3e999999 	.word	0x3e999999
 8013eb4:	3f480000 	.word	0x3f480000

08013eb8 <__kernel_rem_pio2f>:
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	ed2d 8b04 	vpush	{d8-d9}
 8013ec0:	b0db      	sub	sp, #364	; 0x16c
 8013ec2:	461c      	mov	r4, r3
 8013ec4:	9303      	str	r3, [sp, #12]
 8013ec6:	9106      	str	r1, [sp, #24]
 8013ec8:	4ba2      	ldr	r3, [pc, #648]	; (8014154 <__kernel_rem_pio2f+0x29c>)
 8013eca:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8013ecc:	9208      	str	r2, [sp, #32]
 8013ece:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8013ed2:	1d11      	adds	r1, r2, #4
 8013ed4:	4682      	mov	sl, r0
 8013ed6:	f104 38ff 	add.w	r8, r4, #4294967295
 8013eda:	f2c0 82a3 	blt.w	8014424 <__kernel_rem_pio2f+0x56c>
 8013ede:	1ed3      	subs	r3, r2, #3
 8013ee0:	bf48      	it	mi
 8013ee2:	1d13      	addmi	r3, r2, #4
 8013ee4:	10db      	asrs	r3, r3, #3
 8013ee6:	9302      	str	r3, [sp, #8]
 8013ee8:	3301      	adds	r3, #1
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	9307      	str	r3, [sp, #28]
 8013eee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013ef2:	1a9b      	subs	r3, r3, r2
 8013ef4:	9305      	str	r3, [sp, #20]
 8013ef6:	9b02      	ldr	r3, [sp, #8]
 8013ef8:	eb15 0108 	adds.w	r1, r5, r8
 8013efc:	eba3 0308 	sub.w	r3, r3, r8
 8013f00:	d416      	bmi.n	8013f30 <__kernel_rem_pio2f+0x78>
 8013f02:	3101      	adds	r1, #1
 8013f04:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8014158 <__kernel_rem_pio2f+0x2a0>
 8013f08:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8013f0a:	4419      	add	r1, r3
 8013f0c:	aa1e      	add	r2, sp, #120	; 0x78
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	bfa4      	itt	ge
 8013f12:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8013f16:	ee07 4a90 	vmovge	s15, r4
 8013f1a:	f103 0301 	add.w	r3, r3, #1
 8013f1e:	bfac      	ite	ge
 8013f20:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8013f24:	eef0 7a47 	vmovlt.f32	s15, s14
 8013f28:	428b      	cmp	r3, r1
 8013f2a:	ece2 7a01 	vstmia	r2!, {s15}
 8013f2e:	d1ee      	bne.n	8013f0e <__kernel_rem_pio2f+0x56>
 8013f30:	2d00      	cmp	r5, #0
 8013f32:	f2c0 82e7 	blt.w	8014504 <__kernel_rem_pio2f+0x64c>
 8013f36:	9b03      	ldr	r3, [sp, #12]
 8013f38:	aa1e      	add	r2, sp, #120	; 0x78
 8013f3a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8013f3e:	ae46      	add	r6, sp, #280	; 0x118
 8013f40:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8013f44:	4640      	mov	r0, r8
 8013f46:	18ef      	adds	r7, r5, r3
 8013f48:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 8013f4c:	f1b8 0f00 	cmp.w	r8, #0
 8013f50:	eddf 7a81 	vldr	s15, [pc, #516]	; 8014158 <__kernel_rem_pio2f+0x2a0>
 8013f54:	db09      	blt.n	8013f6a <__kernel_rem_pio2f+0xb2>
 8013f56:	4622      	mov	r2, r4
 8013f58:	4653      	mov	r3, sl
 8013f5a:	ecf3 6a01 	vldmia	r3!, {s13}
 8013f5e:	ed32 7a01 	vldmdb	r2!, {s14}
 8013f62:	428b      	cmp	r3, r1
 8013f64:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f68:	d1f7      	bne.n	8013f5a <__kernel_rem_pio2f+0xa2>
 8013f6a:	3001      	adds	r0, #1
 8013f6c:	42b8      	cmp	r0, r7
 8013f6e:	ece6 7a01 	vstmia	r6!, {s15}
 8013f72:	f104 0404 	add.w	r4, r4, #4
 8013f76:	d1e9      	bne.n	8013f4c <__kernel_rem_pio2f+0x94>
 8013f78:	ab09      	add	r3, sp, #36	; 0x24
 8013f7a:	af0a      	add	r7, sp, #40	; 0x28
 8013f7c:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 8013f80:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8013f84:	3b08      	subs	r3, #8
 8013f86:	ed9f 9a76 	vldr	s18, [pc, #472]	; 8014160 <__kernel_rem_pio2f+0x2a8>
 8013f8a:	eddf 8a74 	vldr	s17, [pc, #464]	; 801415c <__kernel_rem_pio2f+0x2a4>
 8013f8e:	9805      	ldr	r0, [sp, #20]
 8013f90:	9304      	str	r3, [sp, #16]
 8013f92:	eb0a 040c 	add.w	r4, sl, ip
 8013f96:	ae46      	add	r6, sp, #280	; 0x118
 8013f98:	9500      	str	r5, [sp, #0]
 8013f9a:	ab5a      	add	r3, sp, #360	; 0x168
 8013f9c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8013fa0:	2d00      	cmp	r5, #0
 8013fa2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8013fa6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 8013faa:	dd16      	ble.n	8013fda <__kernel_rem_pio2f+0x122>
 8013fac:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8013fb0:	463a      	mov	r2, r7
 8013fb2:	ee60 7a09 	vmul.f32	s15, s0, s18
 8013fb6:	eeb0 7a40 	vmov.f32	s14, s0
 8013fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fbe:	ed73 6a01 	vldmdb	r3!, {s13}
 8013fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fc6:	42b3      	cmp	r3, r6
 8013fc8:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8013fcc:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8013fd0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013fd4:	eca2 7a01 	vstmia	r2!, {s14}
 8013fd8:	d1eb      	bne.n	8013fb2 <__kernel_rem_pio2f+0xfa>
 8013fda:	9001      	str	r0, [sp, #4]
 8013fdc:	f000 fcf6 	bl	80149cc <scalbnf>
 8013fe0:	eeb0 8a40 	vmov.f32	s16, s0
 8013fe4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013fe8:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013fec:	f000 fca8 	bl	8014940 <floorf>
 8013ff0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013ff4:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013ff8:	9801      	ldr	r0, [sp, #4]
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014000:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8014004:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014008:	dd79      	ble.n	80140fe <__kernel_rem_pio2f+0x246>
 801400a:	f105 3eff 	add.w	lr, r5, #4294967295
 801400e:	f1c0 0308 	rsb	r3, r0, #8
 8014012:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 8014016:	fa41 fc03 	asr.w	ip, r1, r3
 801401a:	fa0c f303 	lsl.w	r3, ip, r3
 801401e:	1acb      	subs	r3, r1, r3
 8014020:	f1c0 0207 	rsb	r2, r0, #7
 8014024:	ee19 1a90 	vmov	r1, s19
 8014028:	fa43 f202 	asr.w	r2, r3, r2
 801402c:	4461      	add	r1, ip
 801402e:	2a00      	cmp	r2, #0
 8014030:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
 8014034:	ee09 1a90 	vmov	s19, r1
 8014038:	dc69      	bgt.n	801410e <__kernel_rem_pio2f+0x256>
 801403a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014042:	f040 80c0 	bne.w	80141c6 <__kernel_rem_pio2f+0x30e>
 8014046:	9b00      	ldr	r3, [sp, #0]
 8014048:	f105 3bff 	add.w	fp, r5, #4294967295
 801404c:	455b      	cmp	r3, fp
 801404e:	dc10      	bgt.n	8014072 <__kernel_rem_pio2f+0x1ba>
 8014050:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8014054:	3b01      	subs	r3, #1
 8014056:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801405a:	2100      	movs	r1, #0
 801405c:	4694      	mov	ip, r2
 801405e:	f853 2904 	ldr.w	r2, [r3], #-4
 8014062:	454b      	cmp	r3, r9
 8014064:	ea41 0102 	orr.w	r1, r1, r2
 8014068:	d1f9      	bne.n	801405e <__kernel_rem_pio2f+0x1a6>
 801406a:	4662      	mov	r2, ip
 801406c:	2900      	cmp	r1, #0
 801406e:	f040 80f2 	bne.w	8014256 <__kernel_rem_pio2f+0x39e>
 8014072:	9b00      	ldr	r3, [sp, #0]
 8014074:	3b01      	subs	r3, #1
 8014076:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801407a:	2b00      	cmp	r3, #0
 801407c:	f040 80e7 	bne.w	801424e <__kernel_rem_pio2f+0x396>
 8014080:	9b04      	ldr	r3, [sp, #16]
 8014082:	f04f 0c01 	mov.w	ip, #1
 8014086:	f853 2904 	ldr.w	r2, [r3], #-4
 801408a:	f10c 0c01 	add.w	ip, ip, #1
 801408e:	2a00      	cmp	r2, #0
 8014090:	d0f9      	beq.n	8014086 <__kernel_rem_pio2f+0x1ce>
 8014092:	1c6b      	adds	r3, r5, #1
 8014094:	44ac      	add	ip, r5
 8014096:	469e      	mov	lr, r3
 8014098:	9a03      	ldr	r2, [sp, #12]
 801409a:	1951      	adds	r1, r2, r5
 801409c:	9a02      	ldr	r2, [sp, #8]
 801409e:	eb02 0b03 	add.w	fp, r2, r3
 80140a2:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 80140a6:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80140a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80140ac:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80140b0:	ab1e      	add	r3, sp, #120	; 0x78
 80140b2:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80140b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80140ba:	eddb 7a01 	vldr	s15, [fp, #4]
 80140be:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014158 <__kernel_rem_pio2f+0x2a0>
 80140c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140c6:	f1b8 0f00 	cmp.w	r8, #0
 80140ca:	f10b 0b04 	add.w	fp, fp, #4
 80140ce:	edc1 7a00 	vstr	s15, [r1]
 80140d2:	460a      	mov	r2, r1
 80140d4:	f101 0104 	add.w	r1, r1, #4
 80140d8:	db09      	blt.n	80140ee <__kernel_rem_pio2f+0x236>
 80140da:	4653      	mov	r3, sl
 80140dc:	e001      	b.n	80140e2 <__kernel_rem_pio2f+0x22a>
 80140de:	ed72 7a01 	vldmdb	r2!, {s15}
 80140e2:	ecf3 6a01 	vldmia	r3!, {s13}
 80140e6:	42a3      	cmp	r3, r4
 80140e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80140ec:	d1f7      	bne.n	80140de <__kernel_rem_pio2f+0x226>
 80140ee:	f10e 0e01 	add.w	lr, lr, #1
 80140f2:	45e6      	cmp	lr, ip
 80140f4:	eca5 7a01 	vstmia	r5!, {s14}
 80140f8:	dddf      	ble.n	80140ba <__kernel_rem_pio2f+0x202>
 80140fa:	4665      	mov	r5, ip
 80140fc:	e74d      	b.n	8013f9a <__kernel_rem_pio2f+0xe2>
 80140fe:	f040 809c 	bne.w	801423a <__kernel_rem_pio2f+0x382>
 8014102:	1e6b      	subs	r3, r5, #1
 8014104:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8014108:	11d2      	asrs	r2, r2, #7
 801410a:	2a00      	cmp	r2, #0
 801410c:	dd95      	ble.n	801403a <__kernel_rem_pio2f+0x182>
 801410e:	ee19 3a90 	vmov	r3, s19
 8014112:	2d00      	cmp	r5, #0
 8014114:	f103 0301 	add.w	r3, r3, #1
 8014118:	ee09 3a90 	vmov	s19, r3
 801411c:	f340 8198 	ble.w	8014450 <__kernel_rem_pio2f+0x598>
 8014120:	6839      	ldr	r1, [r7, #0]
 8014122:	2900      	cmp	r1, #0
 8014124:	d17f      	bne.n	8014226 <__kernel_rem_pio2f+0x36e>
 8014126:	2d01      	cmp	r5, #1
 8014128:	d026      	beq.n	8014178 <__kernel_rem_pio2f+0x2c0>
 801412a:	463b      	mov	r3, r7
 801412c:	f04f 0c01 	mov.w	ip, #1
 8014130:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8014134:	2900      	cmp	r1, #0
 8014136:	d07a      	beq.n	801422e <__kernel_rem_pio2f+0x376>
 8014138:	f10c 0301 	add.w	r3, ip, #1
 801413c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8014140:	429d      	cmp	r5, r3
 8014142:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
 8014146:	dd16      	ble.n	8014176 <__kernel_rem_pio2f+0x2be>
 8014148:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801414c:	44bb      	add	fp, r7
 801414e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014152:	e00a      	b.n	801416a <__kernel_rem_pio2f+0x2b2>
 8014154:	0802aa4c 	.word	0x0802aa4c
 8014158:	00000000 	.word	0x00000000
 801415c:	43800000 	.word	0x43800000
 8014160:	3b800000 	.word	0x3b800000
 8014164:	3fc90000 	.word	0x3fc90000
 8014168:	6819      	ldr	r1, [r3, #0]
 801416a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 801416e:	f843 1b04 	str.w	r1, [r3], #4
 8014172:	455b      	cmp	r3, fp
 8014174:	d1f8      	bne.n	8014168 <__kernel_rem_pio2f+0x2b0>
 8014176:	2101      	movs	r1, #1
 8014178:	2800      	cmp	r0, #0
 801417a:	dd0c      	ble.n	8014196 <__kernel_rem_pio2f+0x2de>
 801417c:	2801      	cmp	r0, #1
 801417e:	f000 8148 	beq.w	8014412 <__kernel_rem_pio2f+0x55a>
 8014182:	2802      	cmp	r0, #2
 8014184:	d107      	bne.n	8014196 <__kernel_rem_pio2f+0x2de>
 8014186:	f105 3cff 	add.w	ip, r5, #4294967295
 801418a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 801418e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014192:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014196:	2a02      	cmp	r2, #2
 8014198:	f47f af4f 	bne.w	801403a <__kernel_rem_pio2f+0x182>
 801419c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80141a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80141a4:	2900      	cmp	r1, #0
 80141a6:	f43f af48 	beq.w	801403a <__kernel_rem_pio2f+0x182>
 80141aa:	9209      	str	r2, [sp, #36]	; 0x24
 80141ac:	9001      	str	r0, [sp, #4]
 80141ae:	f000 fc0d 	bl	80149cc <scalbnf>
 80141b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80141b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141b8:	9801      	ldr	r0, [sp, #4]
 80141ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80141be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c2:	f43f af40 	beq.w	8014046 <__kernel_rem_pio2f+0x18e>
 80141c6:	9202      	str	r2, [sp, #8]
 80141c8:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80141cc:	eeb0 0a48 	vmov.f32	s0, s16
 80141d0:	1a98      	subs	r0, r3, r2
 80141d2:	9501      	str	r5, [sp, #4]
 80141d4:	9d00      	ldr	r5, [sp, #0]
 80141d6:	f000 fbf9 	bl	80149cc <scalbnf>
 80141da:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 801415c <__kernel_rem_pio2f+0x2a4>
 80141de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80141e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80141ea:	f2c0 8159 	blt.w	80144a0 <__kernel_rem_pio2f+0x5e8>
 80141ee:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8014160 <__kernel_rem_pio2f+0x2a8>
 80141f2:	9905      	ldr	r1, [sp, #20]
 80141f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80141f8:	3108      	adds	r1, #8
 80141fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141fe:	9105      	str	r1, [sp, #20]
 8014200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014204:	f103 0b01 	add.w	fp, r3, #1
 8014208:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801420c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014210:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014214:	ee10 1a10 	vmov	r1, s0
 8014218:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 801421c:	ee17 3a90 	vmov	r3, s15
 8014220:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
 8014224:	e02e      	b.n	8014284 <__kernel_rem_pio2f+0x3cc>
 8014226:	2301      	movs	r3, #1
 8014228:	f04f 0c00 	mov.w	ip, #0
 801422c:	e786      	b.n	801413c <__kernel_rem_pio2f+0x284>
 801422e:	f10c 0c01 	add.w	ip, ip, #1
 8014232:	45ac      	cmp	ip, r5
 8014234:	f47f af7c 	bne.w	8014130 <__kernel_rem_pio2f+0x278>
 8014238:	e79e      	b.n	8014178 <__kernel_rem_pio2f+0x2c0>
 801423a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801423e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014246:	f280 80f2 	bge.w	801442e <__kernel_rem_pio2f+0x576>
 801424a:	2200      	movs	r2, #0
 801424c:	e6f5      	b.n	801403a <__kernel_rem_pio2f+0x182>
 801424e:	1c6b      	adds	r3, r5, #1
 8014250:	469e      	mov	lr, r3
 8014252:	469c      	mov	ip, r3
 8014254:	e720      	b.n	8014098 <__kernel_rem_pio2f+0x1e0>
 8014256:	9905      	ldr	r1, [sp, #20]
 8014258:	f1a1 0008 	sub.w	r0, r1, #8
 801425c:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 8014260:	9005      	str	r0, [sp, #20]
 8014262:	462b      	mov	r3, r5
 8014264:	9d00      	ldr	r5, [sp, #0]
 8014266:	b969      	cbnz	r1, 8014284 <__kernel_rem_pio2f+0x3cc>
 8014268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801426c:	3b02      	subs	r3, #2
 801426e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014272:	4601      	mov	r1, r0
 8014274:	f853 0904 	ldr.w	r0, [r3], #-4
 8014278:	f10b 3bff 	add.w	fp, fp, #4294967295
 801427c:	3908      	subs	r1, #8
 801427e:	2800      	cmp	r0, #0
 8014280:	d0f8      	beq.n	8014274 <__kernel_rem_pio2f+0x3bc>
 8014282:	9105      	str	r1, [sp, #20]
 8014284:	9805      	ldr	r0, [sp, #20]
 8014286:	9200      	str	r2, [sp, #0]
 8014288:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801428c:	f000 fb9e 	bl	80149cc <scalbnf>
 8014290:	f1bb 0f00 	cmp.w	fp, #0
 8014294:	9a00      	ldr	r2, [sp, #0]
 8014296:	f2c0 8128 	blt.w	80144ea <__kernel_rem_pio2f+0x632>
 801429a:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 801429e:	ab46      	add	r3, sp, #280	; 0x118
 80142a0:	eb03 060e 	add.w	r6, r3, lr
 80142a4:	f10e 0c04 	add.w	ip, lr, #4
 80142a8:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 8014160 <__kernel_rem_pio2f+0x2a8>
 80142ac:	eb07 030c 	add.w	r3, r7, ip
 80142b0:	1d31      	adds	r1, r6, #4
 80142b2:	ed73 7a01 	vldmdb	r3!, {s15}
 80142b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142ba:	42bb      	cmp	r3, r7
 80142bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80142c0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80142c4:	ed61 7a01 	vstmdb	r1!, {s15}
 80142c8:	d1f3      	bne.n	80142b2 <__kernel_rem_pio2f+0x3fa>
 80142ca:	2d00      	cmp	r5, #0
 80142cc:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 8014164 <__kernel_rem_pio2f+0x2ac>
 80142d0:	f04f 0400 	mov.w	r4, #0
 80142d4:	db20      	blt.n	8014318 <__kernel_rem_pio2f+0x460>
 80142d6:	4893      	ldr	r0, [pc, #588]	; (8014524 <__kernel_rem_pio2f+0x66c>)
 80142d8:	eddf 7a93 	vldr	s15, [pc, #588]	; 8014528 <__kernel_rem_pio2f+0x670>
 80142dc:	eeb0 7a46 	vmov.f32	s14, s12
 80142e0:	4631      	mov	r1, r6
 80142e2:	2300      	movs	r3, #0
 80142e4:	e003      	b.n	80142ee <__kernel_rem_pio2f+0x436>
 80142e6:	429c      	cmp	r4, r3
 80142e8:	db08      	blt.n	80142fc <__kernel_rem_pio2f+0x444>
 80142ea:	ecb0 7a01 	vldmia	r0!, {s14}
 80142ee:	ecf1 6a01 	vldmia	r1!, {s13}
 80142f2:	3301      	adds	r3, #1
 80142f4:	429d      	cmp	r5, r3
 80142f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80142fa:	daf4      	bge.n	80142e6 <__kernel_rem_pio2f+0x42e>
 80142fc:	ab5a      	add	r3, sp, #360	; 0x168
 80142fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014302:	45a3      	cmp	fp, r4
 8014304:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
 8014308:	f1a6 0604 	sub.w	r6, r6, #4
 801430c:	f104 0301 	add.w	r3, r4, #1
 8014310:	d005      	beq.n	801431e <__kernel_rem_pio2f+0x466>
 8014312:	2d00      	cmp	r5, #0
 8014314:	461c      	mov	r4, r3
 8014316:	dade      	bge.n	80142d6 <__kernel_rem_pio2f+0x41e>
 8014318:	eddf 7a83 	vldr	s15, [pc, #524]	; 8014528 <__kernel_rem_pio2f+0x670>
 801431c:	e7ee      	b.n	80142fc <__kernel_rem_pio2f+0x444>
 801431e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8014320:	2902      	cmp	r1, #2
 8014322:	dc1c      	bgt.n	801435e <__kernel_rem_pio2f+0x4a6>
 8014324:	2900      	cmp	r1, #0
 8014326:	f300 8095 	bgt.w	8014454 <__kernel_rem_pio2f+0x59c>
 801432a:	d10f      	bne.n	801434c <__kernel_rem_pio2f+0x494>
 801432c:	ab32      	add	r3, sp, #200	; 0xc8
 801432e:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8014528 <__kernel_rem_pio2f+0x670>
 8014332:	449c      	add	ip, r3
 8014334:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014338:	4563      	cmp	r3, ip
 801433a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801433e:	d1f9      	bne.n	8014334 <__kernel_rem_pio2f+0x47c>
 8014340:	b10a      	cbz	r2, 8014346 <__kernel_rem_pio2f+0x48e>
 8014342:	eef1 7a67 	vneg.f32	s15, s15
 8014346:	9b06      	ldr	r3, [sp, #24]
 8014348:	edc3 7a00 	vstr	s15, [r3]
 801434c:	ee19 3a90 	vmov	r3, s19
 8014350:	f003 0007 	and.w	r0, r3, #7
 8014354:	b05b      	add	sp, #364	; 0x16c
 8014356:	ecbd 8b04 	vpop	{d8-d9}
 801435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014360:	2b03      	cmp	r3, #3
 8014362:	d1f3      	bne.n	801434c <__kernel_rem_pio2f+0x494>
 8014364:	f1bb 0f00 	cmp.w	fp, #0
 8014368:	f000 80d4 	beq.w	8014514 <__kernel_rem_pio2f+0x65c>
 801436c:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014370:	446b      	add	r3, sp
 8014372:	a932      	add	r1, sp, #200	; 0xc8
 8014374:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8014378:	eb01 038b 	add.w	r3, r1, fp, lsl #2
 801437c:	ed73 7a01 	vldmdb	r3!, {s15}
 8014380:	eef0 6a47 	vmov.f32	s13, s14
 8014384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014388:	4299      	cmp	r1, r3
 801438a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801438e:	ed83 7a00 	vstr	s14, [r3]
 8014392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014396:	edc3 7a01 	vstr	s15, [r3, #4]
 801439a:	d1ef      	bne.n	801437c <__kernel_rem_pio2f+0x4c4>
 801439c:	f1bb 0f01 	cmp.w	fp, #1
 80143a0:	f340 80b8 	ble.w	8014514 <__kernel_rem_pio2f+0x65c>
 80143a4:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 80143a8:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 80143ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143b0:	eb0d 0e03 	add.w	lr, sp, r3
 80143b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80143b8:	f10b 0304 	add.w	r3, fp, #4
 80143bc:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
 80143c0:	440b      	add	r3, r1
 80143c2:	a833      	add	r0, sp, #204	; 0xcc
 80143c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80143c8:	eef0 6a47 	vmov.f32	s13, s14
 80143cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80143d0:	4298      	cmp	r0, r3
 80143d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143d6:	ed83 7a00 	vstr	s14, [r3]
 80143da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143de:	edc3 7a01 	vstr	s15, [r3, #4]
 80143e2:	d1ef      	bne.n	80143c4 <__kernel_rem_pio2f+0x50c>
 80143e4:	f10b 0b08 	add.w	fp, fp, #8
 80143e8:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8014528 <__kernel_rem_pio2f+0x670>
 80143ec:	eb01 030b 	add.w	r3, r1, fp
 80143f0:	3108      	adds	r1, #8
 80143f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80143f6:	4299      	cmp	r1, r3
 80143f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143fc:	d1f9      	bne.n	80143f2 <__kernel_rem_pio2f+0x53a>
 80143fe:	2a00      	cmp	r2, #0
 8014400:	d156      	bne.n	80144b0 <__kernel_rem_pio2f+0x5f8>
 8014402:	9906      	ldr	r1, [sp, #24]
 8014404:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014406:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014408:	600a      	str	r2, [r1, #0]
 801440a:	604b      	str	r3, [r1, #4]
 801440c:	edc1 7a02 	vstr	s15, [r1, #8]
 8014410:	e79c      	b.n	801434c <__kernel_rem_pio2f+0x494>
 8014412:	f105 3cff 	add.w	ip, r5, #4294967295
 8014416:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 801441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801441e:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014422:	e6b8      	b.n	8014196 <__kernel_rem_pio2f+0x2de>
 8014424:	2308      	movs	r3, #8
 8014426:	9307      	str	r3, [sp, #28]
 8014428:	2300      	movs	r3, #0
 801442a:	9302      	str	r3, [sp, #8]
 801442c:	e55f      	b.n	8013eee <__kernel_rem_pio2f+0x36>
 801442e:	ee19 3a90 	vmov	r3, s19
 8014432:	2d00      	cmp	r5, #0
 8014434:	f103 0301 	add.w	r3, r3, #1
 8014438:	ee09 3a90 	vmov	s19, r3
 801443c:	bfc8      	it	gt
 801443e:	2202      	movgt	r2, #2
 8014440:	f73f ae6e 	bgt.w	8014120 <__kernel_rem_pio2f+0x268>
 8014444:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014448:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801444c:	2202      	movs	r2, #2
 801444e:	e5f4      	b.n	801403a <__kernel_rem_pio2f+0x182>
 8014450:	2100      	movs	r1, #0
 8014452:	e691      	b.n	8014178 <__kernel_rem_pio2f+0x2c0>
 8014454:	a932      	add	r1, sp, #200	; 0xc8
 8014456:	eddf 7a34 	vldr	s15, [pc, #208]	; 8014528 <__kernel_rem_pio2f+0x670>
 801445a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801445e:	ed33 7a01 	vldmdb	r3!, {s14}
 8014462:	4299      	cmp	r1, r3
 8014464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014468:	d1f9      	bne.n	801445e <__kernel_rem_pio2f+0x5a6>
 801446a:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 801446e:	bb8a      	cbnz	r2, 80144d4 <__kernel_rem_pio2f+0x61c>
 8014470:	9b06      	ldr	r3, [sp, #24]
 8014472:	f1bb 0f00 	cmp.w	fp, #0
 8014476:	edc3 7a00 	vstr	s15, [r3]
 801447a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801447e:	dd0b      	ble.n	8014498 <__kernel_rem_pio2f+0x5e0>
 8014480:	a933      	add	r1, sp, #204	; 0xcc
 8014482:	2301      	movs	r3, #1
 8014484:	ecb1 7a01 	vldmia	r1!, {s14}
 8014488:	3301      	adds	r3, #1
 801448a:	459b      	cmp	fp, r3
 801448c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014490:	daf8      	bge.n	8014484 <__kernel_rem_pio2f+0x5cc>
 8014492:	b10a      	cbz	r2, 8014498 <__kernel_rem_pio2f+0x5e0>
 8014494:	eef1 7a67 	vneg.f32	s15, s15
 8014498:	9b06      	ldr	r3, [sp, #24]
 801449a:	edc3 7a01 	vstr	s15, [r3, #4]
 801449e:	e755      	b.n	801434c <__kernel_rem_pio2f+0x494>
 80144a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80144a4:	469b      	mov	fp, r3
 80144a6:	ee10 1a10 	vmov	r1, s0
 80144aa:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80144ae:	e6e9      	b.n	8014284 <__kernel_rem_pio2f+0x3cc>
 80144b0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 80144b4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80144b8:	9b06      	ldr	r3, [sp, #24]
 80144ba:	eef1 6a66 	vneg.f32	s13, s13
 80144be:	eeb1 7a47 	vneg.f32	s14, s14
 80144c2:	eef1 7a67 	vneg.f32	s15, s15
 80144c6:	edc3 6a00 	vstr	s13, [r3]
 80144ca:	ed83 7a01 	vstr	s14, [r3, #4]
 80144ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80144d2:	e73b      	b.n	801434c <__kernel_rem_pio2f+0x494>
 80144d4:	9b06      	ldr	r3, [sp, #24]
 80144d6:	eef1 6a67 	vneg.f32	s13, s15
 80144da:	f1bb 0f00 	cmp.w	fp, #0
 80144de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144e2:	edc3 6a00 	vstr	s13, [r3]
 80144e6:	dccb      	bgt.n	8014480 <__kernel_rem_pio2f+0x5c8>
 80144e8:	e7d4      	b.n	8014494 <__kernel_rem_pio2f+0x5dc>
 80144ea:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	dc0d      	bgt.n	801450c <__kernel_rem_pio2f+0x654>
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	dc14      	bgt.n	801451e <__kernel_rem_pio2f+0x666>
 80144f4:	f47f af2a 	bne.w	801434c <__kernel_rem_pio2f+0x494>
 80144f8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014528 <__kernel_rem_pio2f+0x670>
 80144fc:	2a00      	cmp	r2, #0
 80144fe:	f43f af22 	beq.w	8014346 <__kernel_rem_pio2f+0x48e>
 8014502:	e71e      	b.n	8014342 <__kernel_rem_pio2f+0x48a>
 8014504:	9b03      	ldr	r3, [sp, #12]
 8014506:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801450a:	e535      	b.n	8013f78 <__kernel_rem_pio2f+0xc0>
 801450c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 801450e:	2b03      	cmp	r3, #3
 8014510:	f47f af1c 	bne.w	801434c <__kernel_rem_pio2f+0x494>
 8014514:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014528 <__kernel_rem_pio2f+0x670>
 8014518:	2a00      	cmp	r2, #0
 801451a:	d1c9      	bne.n	80144b0 <__kernel_rem_pio2f+0x5f8>
 801451c:	e771      	b.n	8014402 <__kernel_rem_pio2f+0x54a>
 801451e:	eddf 7a02 	vldr	s15, [pc, #8]	; 8014528 <__kernel_rem_pio2f+0x670>
 8014522:	e7a2      	b.n	801446a <__kernel_rem_pio2f+0x5b2>
 8014524:	0802aa24 	.word	0x0802aa24
 8014528:	00000000 	.word	0x00000000

0801452c <__kernel_sinf>:
 801452c:	ee10 3a10 	vmov	r3, s0
 8014530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014534:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014538:	da04      	bge.n	8014544 <__kernel_sinf+0x18>
 801453a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801453e:	ee17 3a90 	vmov	r3, s15
 8014542:	b35b      	cbz	r3, 801459c <__kernel_sinf+0x70>
 8014544:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014548:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80145a0 <__kernel_sinf+0x74>
 801454c:	eddf 5a15 	vldr	s11, [pc, #84]	; 80145a4 <__kernel_sinf+0x78>
 8014550:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80145a8 <__kernel_sinf+0x7c>
 8014554:	eddf 6a15 	vldr	s13, [pc, #84]	; 80145ac <__kernel_sinf+0x80>
 8014558:	eee7 5a87 	vfma.f32	s11, s15, s14
 801455c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80145b0 <__kernel_sinf+0x84>
 8014560:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014564:	ee20 5a27 	vmul.f32	s10, s0, s15
 8014568:	eee6 6a27 	vfma.f32	s13, s12, s15
 801456c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014570:	b930      	cbnz	r0, 8014580 <__kernel_sinf+0x54>
 8014572:	eddf 6a10 	vldr	s13, [pc, #64]	; 80145b4 <__kernel_sinf+0x88>
 8014576:	eee7 6a87 	vfma.f32	s13, s15, s14
 801457a:	eea6 0a85 	vfma.f32	s0, s13, s10
 801457e:	4770      	bx	lr
 8014580:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8014584:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014588:	eea0 7aa6 	vfma.f32	s14, s1, s13
 801458c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80145b8 <__kernel_sinf+0x8c>
 8014590:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014594:	eee5 0a26 	vfma.f32	s1, s10, s13
 8014598:	ee30 0a60 	vsub.f32	s0, s0, s1
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80145a4:	b2d72f34 	.word	0xb2d72f34
 80145a8:	3638ef1b 	.word	0x3638ef1b
 80145ac:	b9500d01 	.word	0xb9500d01
 80145b0:	3c088889 	.word	0x3c088889
 80145b4:	be2aaaab 	.word	0xbe2aaaab
 80145b8:	3e2aaaab 	.word	0x3e2aaaab

080145bc <__kernel_tanf>:
 80145bc:	b508      	push	{r3, lr}
 80145be:	ee10 3a10 	vmov	r3, s0
 80145c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80145c6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80145ca:	eef0 7a40 	vmov.f32	s15, s0
 80145ce:	da0f      	bge.n	80145f0 <__kernel_tanf+0x34>
 80145d0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80145d4:	ee17 1a10 	vmov	r1, s14
 80145d8:	bb01      	cbnz	r1, 801461c <__kernel_tanf+0x60>
 80145da:	1c43      	adds	r3, r0, #1
 80145dc:	4313      	orrs	r3, r2
 80145de:	f000 80a0 	beq.w	8014722 <__kernel_tanf+0x166>
 80145e2:	2801      	cmp	r0, #1
 80145e4:	d003      	beq.n	80145ee <__kernel_tanf+0x32>
 80145e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80145ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80145ee:	bd08      	pop	{r3, pc}
 80145f0:	4950      	ldr	r1, [pc, #320]	; (8014734 <__kernel_tanf+0x178>)
 80145f2:	428a      	cmp	r2, r1
 80145f4:	db12      	blt.n	801461c <__kernel_tanf+0x60>
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	bfb8      	it	lt
 80145fa:	eef1 7a40 	vneglt.f32	s15, s0
 80145fe:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8014738 <__kernel_tanf+0x17c>
 8014602:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 801473c <__kernel_tanf+0x180>
 8014606:	bfb8      	it	lt
 8014608:	eef1 0a60 	vneglt.f32	s1, s1
 801460c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014610:	ee37 0a60 	vsub.f32	s0, s14, s1
 8014614:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8014740 <__kernel_tanf+0x184>
 8014618:	ee70 7a27 	vadd.f32	s15, s0, s15
 801461c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014620:	eddf 4a48 	vldr	s9, [pc, #288]	; 8014744 <__kernel_tanf+0x188>
 8014624:	eddf 5a48 	vldr	s11, [pc, #288]	; 8014748 <__kernel_tanf+0x18c>
 8014628:	ed9f 5a48 	vldr	s10, [pc, #288]	; 801474c <__kernel_tanf+0x190>
 801462c:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8014750 <__kernel_tanf+0x194>
 8014630:	4940      	ldr	r1, [pc, #256]	; (8014734 <__kernel_tanf+0x178>)
 8014632:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014636:	428a      	cmp	r2, r1
 8014638:	eee7 5a24 	vfma.f32	s11, s14, s9
 801463c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014640:	eddf 4a44 	vldr	s9, [pc, #272]	; 8014754 <__kernel_tanf+0x198>
 8014644:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8014758 <__kernel_tanf+0x19c>
 8014648:	eee5 4a87 	vfma.f32	s9, s11, s14
 801464c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014650:	eddf 5a42 	vldr	s11, [pc, #264]	; 801475c <__kernel_tanf+0x1a0>
 8014654:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8014760 <__kernel_tanf+0x1a4>
 8014658:	eee4 5a87 	vfma.f32	s11, s9, s14
 801465c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014660:	eddf 4a40 	vldr	s9, [pc, #256]	; 8014764 <__kernel_tanf+0x1a8>
 8014664:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8014768 <__kernel_tanf+0x1ac>
 8014668:	eee5 4a87 	vfma.f32	s9, s11, s14
 801466c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014670:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801476c <__kernel_tanf+0x1b0>
 8014674:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8014770 <__kernel_tanf+0x1b4>
 8014678:	eea4 6a87 	vfma.f32	s12, s9, s14
 801467c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014680:	eeb0 7a46 	vmov.f32	s14, s12
 8014684:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014688:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801468c:	eeb0 6a60 	vmov.f32	s12, s1
 8014690:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014694:	eddf 4a37 	vldr	s9, [pc, #220]	; 8014774 <__kernel_tanf+0x1b8>
 8014698:	eee6 0a26 	vfma.f32	s1, s12, s13
 801469c:	eee5 0a24 	vfma.f32	s1, s10, s9
 80146a0:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80146a4:	da1f      	bge.n	80146e6 <__kernel_tanf+0x12a>
 80146a6:	2801      	cmp	r0, #1
 80146a8:	d0a1      	beq.n	80145ee <__kernel_tanf+0x32>
 80146aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80146ae:	eec7 6a00 	vdiv.f32	s13, s14, s0
 80146b2:	4b31      	ldr	r3, [pc, #196]	; (8014778 <__kernel_tanf+0x1bc>)
 80146b4:	ee10 2a10 	vmov	r2, s0
 80146b8:	401a      	ands	r2, r3
 80146ba:	ee06 2a10 	vmov	s12, r2
 80146be:	ee16 2a90 	vmov	r2, s13
 80146c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80146c6:	4013      	ands	r3, r2
 80146c8:	ee00 3a10 	vmov	s0, r3
 80146cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80146d4:	eef0 7a47 	vmov.f32	s15, s14
 80146d8:	eee6 7a00 	vfma.f32	s15, s12, s0
 80146dc:	eee0 7a80 	vfma.f32	s15, s1, s0
 80146e0:	eea7 0aa6 	vfma.f32	s0, s15, s13
 80146e4:	bd08      	pop	{r3, pc}
 80146e6:	ee07 0a10 	vmov	s14, r0
 80146ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146ee:	ee60 5a00 	vmul.f32	s11, s0, s0
 80146f2:	ee30 0a07 	vadd.f32	s0, s0, s14
 80146f6:	179b      	asrs	r3, r3, #30
 80146f8:	eec5 6a80 	vdiv.f32	s13, s11, s0
 80146fc:	f003 0302 	and.w	r3, r3, #2
 8014700:	f1c3 0301 	rsb	r3, r3, #1
 8014704:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014708:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801470c:	ee00 3a10 	vmov	s0, r3
 8014710:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014714:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014718:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801471c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014720:	bd08      	pop	{r3, pc}
 8014722:	f000 f905 	bl	8014930 <fabsf>
 8014726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801472a:	eef0 7a40 	vmov.f32	s15, s0
 801472e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014732:	bd08      	pop	{r3, pc}
 8014734:	3f2ca140 	.word	0x3f2ca140
 8014738:	33222168 	.word	0x33222168
 801473c:	3f490fda 	.word	0x3f490fda
 8014740:	00000000 	.word	0x00000000
 8014744:	b79bae5f 	.word	0xb79bae5f
 8014748:	38a3f445 	.word	0x38a3f445
 801474c:	37d95384 	.word	0x37d95384
 8014750:	3895c07a 	.word	0x3895c07a
 8014754:	3a1a26c8 	.word	0x3a1a26c8
 8014758:	398137b9 	.word	0x398137b9
 801475c:	3b6b6916 	.word	0x3b6b6916
 8014760:	3abede48 	.word	0x3abede48
 8014764:	3cb327a4 	.word	0x3cb327a4
 8014768:	3c11371f 	.word	0x3c11371f
 801476c:	3e088889 	.word	0x3e088889
 8014770:	3d5d0dd1 	.word	0x3d5d0dd1
 8014774:	3eaaaaab 	.word	0x3eaaaaab
 8014778:	fffff000 	.word	0xfffff000

0801477c <atanf>:
 801477c:	b538      	push	{r3, r4, r5, lr}
 801477e:	ee10 5a10 	vmov	r5, s0
 8014782:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014786:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801478a:	eef0 7a40 	vmov.f32	s15, s0
 801478e:	db0b      	blt.n	80147a8 <atanf+0x2c>
 8014790:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014794:	dc5b      	bgt.n	801484e <atanf+0xd2>
 8014796:	eddf 7a53 	vldr	s15, [pc, #332]	; 80148e4 <atanf+0x168>
 801479a:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80148e8 <atanf+0x16c>
 801479e:	2d00      	cmp	r5, #0
 80147a0:	bfc8      	it	gt
 80147a2:	eeb0 0a67 	vmovgt.f32	s0, s15
 80147a6:	bd38      	pop	{r3, r4, r5, pc}
 80147a8:	4b50      	ldr	r3, [pc, #320]	; (80148ec <atanf+0x170>)
 80147aa:	429c      	cmp	r4, r3
 80147ac:	dc5e      	bgt.n	801486c <atanf+0xf0>
 80147ae:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80147b2:	db4f      	blt.n	8014854 <atanf+0xd8>
 80147b4:	f04f 33ff 	mov.w	r3, #4294967295
 80147b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80147bc:	eddf 4a4c 	vldr	s9, [pc, #304]	; 80148f0 <atanf+0x174>
 80147c0:	eddf 5a4c 	vldr	s11, [pc, #304]	; 80148f4 <atanf+0x178>
 80147c4:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 80148f8 <atanf+0x17c>
 80147c8:	ed9f 4a4c 	vldr	s8, [pc, #304]	; 80148fc <atanf+0x180>
 80147cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80147d0:	eeb0 6a66 	vmov.f32	s12, s13
 80147d4:	eee7 5a24 	vfma.f32	s11, s14, s9
 80147d8:	1c5a      	adds	r2, r3, #1
 80147da:	eddf 4a49 	vldr	s9, [pc, #292]	; 8014900 <atanf+0x184>
 80147de:	eddf 6a49 	vldr	s13, [pc, #292]	; 8014904 <atanf+0x188>
 80147e2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80147e6:	eee7 6a24 	vfma.f32	s13, s14, s9
 80147ea:	eddf 5a47 	vldr	s11, [pc, #284]	; 8014908 <atanf+0x18c>
 80147ee:	eddf 4a47 	vldr	s9, [pc, #284]	; 801490c <atanf+0x190>
 80147f2:	eee6 5a87 	vfma.f32	s11, s13, s14
 80147f6:	eea5 4a07 	vfma.f32	s8, s10, s14
 80147fa:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8014910 <atanf+0x194>
 80147fe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014914 <atanf+0x198>
 8014802:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014806:	eee4 4a07 	vfma.f32	s9, s8, s14
 801480a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8014918 <atanf+0x19c>
 801480e:	eee4 6a87 	vfma.f32	s13, s9, s14
 8014812:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014816:	ee66 6a86 	vmul.f32	s13, s13, s12
 801481a:	ee25 7a87 	vmul.f32	s14, s11, s14
 801481e:	d03a      	beq.n	8014896 <atanf+0x11a>
 8014820:	4a3e      	ldr	r2, [pc, #248]	; (801491c <atanf+0x1a0>)
 8014822:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014826:	ee76 6a87 	vadd.f32	s13, s13, s14
 801482a:	ed92 0a00 	vldr	s0, [r2]
 801482e:	4a3c      	ldr	r2, [pc, #240]	; (8014920 <atanf+0x1a4>)
 8014830:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8014834:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014838:	2d00      	cmp	r5, #0
 801483a:	ed93 7a00 	vldr	s14, [r3]
 801483e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014842:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014846:	daae      	bge.n	80147a6 <atanf+0x2a>
 8014848:	eeb1 0a40 	vneg.f32	s0, s0
 801484c:	bd38      	pop	{r3, r4, r5, pc}
 801484e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014924 <atanf+0x1a8>
 8014858:	ee30 7a07 	vadd.f32	s14, s0, s14
 801485c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014860:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014868:	dda4      	ble.n	80147b4 <atanf+0x38>
 801486a:	bd38      	pop	{r3, r4, r5, pc}
 801486c:	f000 f860 	bl	8014930 <fabsf>
 8014870:	4b2d      	ldr	r3, [pc, #180]	; (8014928 <atanf+0x1ac>)
 8014872:	429c      	cmp	r4, r3
 8014874:	dc16      	bgt.n	80148a4 <atanf+0x128>
 8014876:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801487a:	429c      	cmp	r4, r3
 801487c:	dc27      	bgt.n	80148ce <atanf+0x152>
 801487e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014882:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014886:	eea0 7a27 	vfma.f32	s14, s0, s15
 801488a:	2300      	movs	r3, #0
 801488c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014890:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014894:	e790      	b.n	80147b8 <atanf+0x3c>
 8014896:	ee76 6a87 	vadd.f32	s13, s13, s14
 801489a:	eee6 7ae7 	vfms.f32	s15, s13, s15
 801489e:	eeb0 0a67 	vmov.f32	s0, s15
 80148a2:	bd38      	pop	{r3, r4, r5, pc}
 80148a4:	4b21      	ldr	r3, [pc, #132]	; (801492c <atanf+0x1b0>)
 80148a6:	429c      	cmp	r4, r3
 80148a8:	dc0b      	bgt.n	80148c2 <atanf+0x146>
 80148aa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80148ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80148b2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80148b6:	2302      	movs	r3, #2
 80148b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80148bc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80148c0:	e77a      	b.n	80147b8 <atanf+0x3c>
 80148c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80148c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80148ca:	2303      	movs	r3, #3
 80148cc:	e774      	b.n	80147b8 <atanf+0x3c>
 80148ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80148d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80148d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80148da:	2301      	movs	r3, #1
 80148dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80148e0:	e76a      	b.n	80147b8 <atanf+0x3c>
 80148e2:	bf00      	nop
 80148e4:	3fc90fdb 	.word	0x3fc90fdb
 80148e8:	bfc90fdb 	.word	0xbfc90fdb
 80148ec:	3edfffff 	.word	0x3edfffff
 80148f0:	3c8569d7 	.word	0x3c8569d7
 80148f4:	3d4bda59 	.word	0x3d4bda59
 80148f8:	3d886b35 	.word	0x3d886b35
 80148fc:	3dba2e6e 	.word	0x3dba2e6e
 8014900:	bd15a221 	.word	0xbd15a221
 8014904:	bd6ef16b 	.word	0xbd6ef16b
 8014908:	bd9d8795 	.word	0xbd9d8795
 801490c:	3e124925 	.word	0x3e124925
 8014910:	bde38e38 	.word	0xbde38e38
 8014914:	3eaaaaab 	.word	0x3eaaaaab
 8014918:	be4ccccd 	.word	0xbe4ccccd
 801491c:	0802aa68 	.word	0x0802aa68
 8014920:	0802aa58 	.word	0x0802aa58
 8014924:	7149f2ca 	.word	0x7149f2ca
 8014928:	3f97ffff 	.word	0x3f97ffff
 801492c:	401bffff 	.word	0x401bffff

08014930 <fabsf>:
 8014930:	ee10 3a10 	vmov	r3, s0
 8014934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014938:	ee00 3a10 	vmov	s0, r3
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop

08014940 <floorf>:
 8014940:	ee10 2a10 	vmov	r2, s0
 8014944:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014948:	3b7f      	subs	r3, #127	; 0x7f
 801494a:	2b16      	cmp	r3, #22
 801494c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014950:	dc28      	bgt.n	80149a4 <floorf+0x64>
 8014952:	2b00      	cmp	r3, #0
 8014954:	db18      	blt.n	8014988 <floorf+0x48>
 8014956:	491a      	ldr	r1, [pc, #104]	; (80149c0 <floorf+0x80>)
 8014958:	4119      	asrs	r1, r3
 801495a:	420a      	tst	r2, r1
 801495c:	d021      	beq.n	80149a2 <floorf+0x62>
 801495e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80149c4 <floorf+0x84>
 8014962:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801496e:	dd18      	ble.n	80149a2 <floorf+0x62>
 8014970:	2a00      	cmp	r2, #0
 8014972:	da04      	bge.n	801497e <floorf+0x3e>
 8014974:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8014978:	fa40 f303 	asr.w	r3, r0, r3
 801497c:	441a      	add	r2, r3
 801497e:	ea22 0301 	bic.w	r3, r2, r1
 8014982:	ee00 3a10 	vmov	s0, r3
 8014986:	4770      	bx	lr
 8014988:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80149c4 <floorf+0x84>
 801498c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014998:	dd03      	ble.n	80149a2 <floorf+0x62>
 801499a:	2a00      	cmp	r2, #0
 801499c:	db08      	blt.n	80149b0 <floorf+0x70>
 801499e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80149c8 <floorf+0x88>
 80149a2:	4770      	bx	lr
 80149a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80149a8:	d3fb      	bcc.n	80149a2 <floorf+0x62>
 80149aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80149ae:	4770      	bx	lr
 80149b0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80149b4:	2900      	cmp	r1, #0
 80149b6:	bf18      	it	ne
 80149b8:	eeb0 0a67 	vmovne.f32	s0, s15
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop
 80149c0:	007fffff 	.word	0x007fffff
 80149c4:	7149f2ca 	.word	0x7149f2ca
 80149c8:	00000000 	.word	0x00000000

080149cc <scalbnf>:
 80149cc:	b082      	sub	sp, #8
 80149ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 80149d2:	9b01      	ldr	r3, [sp, #4]
 80149d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80149d8:	d02a      	beq.n	8014a30 <scalbnf+0x64>
 80149da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80149de:	d223      	bcs.n	8014a28 <scalbnf+0x5c>
 80149e0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80149e4:	d128      	bne.n	8014a38 <scalbnf+0x6c>
 80149e6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80149ea:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014a94 <scalbnf+0xc8>
 80149ee:	4b2a      	ldr	r3, [pc, #168]	; (8014a98 <scalbnf+0xcc>)
 80149f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149f4:	4298      	cmp	r0, r3
 80149f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80149fa:	db37      	blt.n	8014a6c <scalbnf+0xa0>
 80149fc:	9b01      	ldr	r3, [sp, #4]
 80149fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014a02:	3a19      	subs	r2, #25
 8014a04:	4402      	add	r2, r0
 8014a06:	2afe      	cmp	r2, #254	; 0xfe
 8014a08:	dd1a      	ble.n	8014a40 <scalbnf+0x74>
 8014a0a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8014a9c <scalbnf+0xd0>
 8014a0e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8014aa0 <scalbnf+0xd4>
 8014a12:	9b01      	ldr	r3, [sp, #4]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	eef0 7a40 	vmov.f32	s15, s0
 8014a1a:	bfb8      	it	lt
 8014a1c:	eeb0 0a47 	vmovlt.f32	s0, s14
 8014a20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a24:	b002      	add	sp, #8
 8014a26:	4770      	bx	lr
 8014a28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014a2c:	b002      	add	sp, #8
 8014a2e:	4770      	bx	lr
 8014a30:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014a34:	b002      	add	sp, #8
 8014a36:	4770      	bx	lr
 8014a38:	0dd2      	lsrs	r2, r2, #23
 8014a3a:	4402      	add	r2, r0
 8014a3c:	2afe      	cmp	r2, #254	; 0xfe
 8014a3e:	dce4      	bgt.n	8014a0a <scalbnf+0x3e>
 8014a40:	2a00      	cmp	r2, #0
 8014a42:	dc0b      	bgt.n	8014a5c <scalbnf+0x90>
 8014a44:	f112 0f16 	cmn.w	r2, #22
 8014a48:	da17      	bge.n	8014a7a <scalbnf+0xae>
 8014a4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a4e:	4298      	cmp	r0, r3
 8014a50:	dcdb      	bgt.n	8014a0a <scalbnf+0x3e>
 8014a52:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8014aa4 <scalbnf+0xd8>
 8014a56:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014aa8 <scalbnf+0xdc>
 8014a5a:	e7da      	b.n	8014a12 <scalbnf+0x46>
 8014a5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a60:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014a64:	ee00 3a10 	vmov	s0, r3
 8014a68:	b002      	add	sp, #8
 8014a6a:	4770      	bx	lr
 8014a6c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014aa4 <scalbnf+0xd8>
 8014a70:	eddd 7a01 	vldr	s15, [sp, #4]
 8014a74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014a78:	e7d8      	b.n	8014a2c <scalbnf+0x60>
 8014a7a:	3219      	adds	r2, #25
 8014a7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a80:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014a84:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014aac <scalbnf+0xe0>
 8014a88:	ee07 3a10 	vmov	s14, r3
 8014a8c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014a90:	e7cc      	b.n	8014a2c <scalbnf+0x60>
 8014a92:	bf00      	nop
 8014a94:	4c000000 	.word	0x4c000000
 8014a98:	ffff3cb0 	.word	0xffff3cb0
 8014a9c:	7149f2ca 	.word	0x7149f2ca
 8014aa0:	f149f2ca 	.word	0xf149f2ca
 8014aa4:	0da24260 	.word	0x0da24260
 8014aa8:	8da24260 	.word	0x8da24260
 8014aac:	33000000 	.word	0x33000000

08014ab0 <_init>:
 8014ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab2:	bf00      	nop
 8014ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ab6:	bc08      	pop	{r3}
 8014ab8:	469e      	mov	lr, r3
 8014aba:	4770      	bx	lr

08014abc <_fini>:
 8014abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014abe:	bf00      	nop
 8014ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ac2:	bc08      	pop	{r3}
 8014ac4:	469e      	mov	lr, r3
 8014ac6:	4770      	bx	lr
