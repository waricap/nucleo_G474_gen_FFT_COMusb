
nucleo_G474_gen_FFT_COMusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014da8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015fb0  08014f88  08014f88  00024f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802af38  0802af38  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  0802af38  0802af38  0003af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802af40  0802af40  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802af40  0802af40  0003af40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802af44  0802af44  0003af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0802af48  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000130dc  200002b0  0802b1f8  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2001338c  0802b1f8  0004338c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002efc1  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000523b  00000000  00000000  0006f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec0  00000000  00000000  000744e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  000763a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f606  00000000  00000000  00078080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d5f  00000000  00000000  000a7686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013a368  00000000  00000000  000d13e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0020b74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000998c  00000000  00000000  0020b80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002946  00000000  00000000  00215198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b0 	.word	0x200002b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014f70 	.word	0x08014f70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002b4 	.word	0x200002b4
 800021c:	08014f70 	.word	0x08014f70

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f5 	b.w	80010e4 <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e f83b 	bl	800f17c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_ADC1_Init+0xf4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_ADC1_Init+0xf4>)
 800112e:	2204      	movs	r2, #4
 8001130:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_ADC1_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001140:	2201      	movs	r2, #1
 8001142:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_ADC1_Init+0xf4>)
 800114e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0xf4>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0xf4>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001176:	f003 fec1 	bl	8004efc <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001180:	f002 fb98 	bl	80038b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_ADC1_Init+0xf4>)
 800119a:	f004 ff9f 	bl	80060dc <HAL_ADCEx_MultiModeConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80011a4:	f002 fb86 	bl	80038b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_ADC1_Init+0xf8>)
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0xf4>)
 80011c6:	f004 f86f 	bl	80052a8 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80011d0:	f002 fb70 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002cc 	.word	0x200002cc
 80011e0:	04300002 	.word	0x04300002

080011e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00d ffc3 	bl	800f17c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <MX_ADC2_Init+0xb8>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_ADC2_Init+0xb4>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC2_Init+0xb4>)
 800121c:	2204      	movs	r2, #4
 800121e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_ADC2_Init+0xb4>)
 800122e:	2201      	movs	r2, #1
 8001230:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC2_Init+0xb4>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_ADC2_Init+0xb4>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001254:	f003 fe52 	bl	8004efc <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f002 fb29 	bl	80038b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC2_Init+0xbc>)
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001266:	2306      	movs	r3, #6
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126e:	237f      	movs	r3, #127	; 0x7f
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001272:	2304      	movs	r3, #4
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001280:	f004 f812 	bl	80052a8 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800128a:	f002 fb13 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000338 	.word	0x20000338
 800129c:	50000100 	.word	0x50000100
 80012a0:	1d500080 	.word	0x1d500080

080012a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a0      	sub	sp, #128	; 0x80
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00d ff59 	bl	800f17c <memset>
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d16a      	bne.n	80013aa <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80012da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fbf5 	bl	8009ad4 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f0:	f002 fae0 	bl	80038b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f005 fe56 	bl	8006ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_ADC_MspInit+0x1f8>)
 8001354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001358:	2205      	movs	r2, #5
 800135a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	4842      	ldr	r0, [pc, #264]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800138e:	f005 fabb 	bl	8006908 <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001398:	f002 fa8c 	bl	80038b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013a8:	e06d      	b.n	8001486 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_ADC_MspInit+0x1fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d168      	bne.n	8001486 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fb85 	bl	8009ad4 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80013d0:	f002 fa70 	bl	80038b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <HAL_ADC_MspInit+0x200>)
 800142a:	f005 fde7 	bl	8006ffc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0x208>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800146c:	f005 fa4c 	bl	8006908 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8001476:	f002 fa1d 	bl	80038b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001486:	bf00      	nop
 8001488:	3780      	adds	r7, #128	; 0x80
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000464 	.word	0x20000464
 8001494:	40021000 	.word	0x40021000
 8001498:	200003a4 	.word	0x200003a4
 800149c:	40020008 	.word	0x40020008
 80014a0:	50000100 	.word	0x50000100
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20000404 	.word	0x20000404
 80014ac:	40020408 	.word	0x40020408

080014b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CRC_Init+0x54>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_CRC_Init+0x58>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_CRC_Init+0x54>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_CRC_Init+0x54>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CRC_Init+0x54>)
 80014c8:	f248 0205 	movw	r2, #32773	; 0x8005
 80014cc:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CRC_Init+0x54>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_CRC_Init+0x54>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CRC_Init+0x54>)
 80014de:	2220      	movs	r2, #32
 80014e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_CRC_Init+0x54>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CRC_Init+0x54>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CRC_Init+0x54>)
 80014f0:	f005 f80c 	bl	800650c <HAL_CRC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80014fa:	f002 f9db 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000468 	.word	0x20000468
 8001508:	40023000 	.word	0x40023000

0800150c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_CRC_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6493      	str	r3, [r2, #72]	; 0x48
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023000 	.word	0x40023000
 8001548:	40021000 	.word	0x40021000

0800154c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel4
  */
void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_DMA_Init+0xf4>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <MX_DMA_Init+0xf4>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6493      	str	r3, [r2, #72]	; 0x48
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_DMA_Init+0xf4>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <MX_DMA_Init+0xf4>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <MX_DMA_Init+0xf4>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6493      	str	r3, [r2, #72]	; 0x48
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <MX_DMA_Init+0xf4>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_DMA_Init+0xf4>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <MX_DMA_Init+0xf4>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6493      	str	r3, [r2, #72]	; 0x48
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_DMA_Init+0xf4>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_DMA_Init+0xf8>)
 800159c:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <MX_DMA_Init+0xfc>)
 800159e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_DMA_Init+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_DMA_Init+0xf8>)
 80015a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ac:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <MX_DMA_Init+0xf8>)
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_DMA_Init+0xf8>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_DMA_Init+0xf8>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_DMA_Init+0xf8>)
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_DMA_Init+0xf8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_DMA_Init+0xf8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <MX_DMA_Init+0xf8>)
 80015d8:	f005 f996 	bl	8006908 <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 80015e2:	f002 f967 	bl	80038b4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f004 ff59 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f004 ff70 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200c      	movs	r0, #12
 80015fc:	f004 ff51 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001600:	200c      	movs	r0, #12
 8001602:	f004 ff68 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f004 ff49 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001610:	200d      	movs	r0, #13
 8001612:	f004 ff60 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200e      	movs	r0, #14
 800161c:	f004 ff41 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001620:	200e      	movs	r0, #14
 8001622:	f004 ff58 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2038      	movs	r0, #56	; 0x38
 800162c:	f004 ff39 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001630:	2038      	movs	r0, #56	; 0x38
 8001632:	f004 ff50 	bl	80064d6 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	2000048c 	.word	0x2000048c
 8001648:	40020044 	.word	0x40020044

0800164c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a40      	ldr	r2, [pc, #256]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <MX_GPIO_Init+0x11c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a3a      	ldr	r2, [pc, #232]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a34      	ldr	r2, [pc, #208]	; (8001768 <MX_GPIO_Init+0x11c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <MX_GPIO_Init+0x11c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_GPIO_Init+0x11c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <MX_GPIO_Init+0x11c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <MX_GPIO_Init+0x11c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_GPIO_Init+0x120>)
 80016ca:	f005 fe31 	bl	8007330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f005 fe2b 	bl	8007330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	481f      	ldr	r0, [pc, #124]	; (800176c <MX_GPIO_Init+0x120>)
 80016f0:	f005 fc84 	bl	8006ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 80016f4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <MX_GPIO_Init+0x120>)
 800170e:	f005 fc75 	bl	8006ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001712:	2320      	movs	r3, #32
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f005 fc66 	bl	8006ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f005 fc57 	bl	8006ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2028      	movs	r0, #40	; 0x28
 8001754:	f004 fea5 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001758:	2028      	movs	r0, #40	; 0x28
 800175a:	f004 febc 	bl	80064d6 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	48000800 	.word	0x48000800

08001770 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0ac      	sub	sp, #176	; 0xb0
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8001776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8001786:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8001794:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80017a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	2260      	movs	r2, #96	; 0x60
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00d fce0 	bl	800f17c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80017c6:	4b73      	ldr	r3, [pc, #460]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017c8:	4a73      	ldr	r2, [pc, #460]	; (8001998 <MX_HRTIM1_Init+0x228>)
 80017ca:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 80017d2:	4b70      	ldr	r3, [pc, #448]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	609a      	str	r2, [r3, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_MASTER_CMP1;
 80017d8:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 80017e0:	4b6c      	ldr	r3, [pc, #432]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	615a      	str	r2, [r3, #20]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80017e8:	486a      	ldr	r0, [pc, #424]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017ea:	f005 fdeb 	bl	80073c4 <HAL_HRTIM_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80017f4:	f002 f85e 	bl	80038b4 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80017f8:	210c      	movs	r1, #12
 80017fa:	4866      	ldr	r0, [pc, #408]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80017fc:	f005 feb2 	bl	8007564 <HAL_HRTIM_DLLCalibrationStart>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001806:	f002 f855 	bl	80038b4 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800180a:	210a      	movs	r1, #10
 800180c:	4861      	ldr	r0, [pc, #388]	; (8001994 <MX_HRTIM1_Init+0x224>)
 800180e:	f005 ff01 	bl	8007614 <HAL_HRTIM_PollForDLLCalibration>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001818:	f002 f84c 	bl	80038b4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	485d      	ldr	r0, [pc, #372]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001820:	f005 ffb3 	bl	800778a <HAL_HRTIM_EventPrescalerConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_HRTIM1_Init+0xbe>
  {
    Error_Handler();
 800182a:	f002 f843 	bl	80038b4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EEV1SRC_TIM1_TRGO;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8001846:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800184a:	461a      	mov	r2, r3
 800184c:	2101      	movs	r1, #1
 800184e:	4851      	ldr	r0, [pc, #324]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001850:	f005 ff6c 	bl	800772c <HAL_HRTIM_EventConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 800185a:	f002 f82b 	bl	80038b4 <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800185e:	2100      	movs	r1, #0
 8001860:	484c      	ldr	r0, [pc, #304]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001862:	f006 f98b 	bl	8007b7c <HAL_HRTIM_FaultPrescalerConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 800186c:	f002 f822 	bl	80038b4 <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_INTERNAL;
 8001870:	2301      	movs	r3, #1
 8001872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 8001888:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800188c:	461a      	mov	r2, r3
 800188e:	2101      	movs	r1, #1
 8001890:	4840      	ldr	r0, [pc, #256]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001892:	f005 ffb3 	bl	80077fc <HAL_HRTIM_FaultConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_HRTIM1_Init+0x130>
  {
    Error_Handler();
 800189c:	f002 f80a 	bl	80038b4 <Error_Handler>
  }
  pFaultBlkCfg.Threshold = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018b6:	461a      	mov	r2, r3
 80018b8:	2101      	movs	r1, #1
 80018ba:	4836      	ldr	r0, [pc, #216]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80018bc:	f006 fa84 	bl	8007dc8 <HAL_HRTIM_FaultCounterConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 80018c6:	f001 fff5 	bl	80038b4 <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ce:	461a      	mov	r2, r3
 80018d0:	2101      	movs	r1, #1
 80018d2:	4830      	ldr	r0, [pc, #192]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80018d4:	f006 f98c 	bl	8007bf0 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 80018de:	f001 ffe9 	bl	80038b4 <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2101      	movs	r1, #1
 80018e6:	482b      	ldr	r0, [pc, #172]	; (8001994 <MX_HRTIM1_Init+0x224>)
 80018e8:	f006 fb66 	bl	8007fb8 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 1700;
 80018ec:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80018f0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80018f6:	2300      	movs	r3, #0
 80018f8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80018fa:	2308      	movs	r3, #8
 80018fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80018fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001902:	461a      	mov	r2, r3
 8001904:	2106      	movs	r1, #6
 8001906:	4823      	ldr	r0, [pc, #140]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001908:	f005 feb8 	bl	800767c <HAL_HRTIM_TimeBaseConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_HRTIM1_Init+0x1a6>
  {
    Error_Handler();
 8001912:	f001 ffcf 	bl	80038b4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASrcAddress = 0x0000;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = 0x0000;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  pTimerCfg.DMASize = 0x1;
 8001926:	2301      	movs	r3, #1
 8001928:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001942:	2300      	movs	r3, #0
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001946:	2300      	movs	r3, #0
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800194a:	2300      	movs	r3, #0
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800194e:	2300      	movs	r3, #0
 8001950:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	461a      	mov	r2, r3
 8001958:	2106      	movs	r1, #6
 800195a:	480e      	ldr	r0, [pc, #56]	; (8001994 <MX_HRTIM1_Init+0x224>)
 800195c:	f006 fbae 	bl	80080bc <HAL_HRTIM_WaveformTimerConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8001966:	f001 ffa5 	bl	80038b4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 850;
 800196a:	f240 3352 	movw	r3, #850	; 0x352
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2201      	movs	r2, #1
 8001974:	2106      	movs	r1, #6
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001978:	f006 fc2e 	bl	80081d8 <HAL_HRTIM_WaveformCompareConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 8001982:	f001 ff97 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001986:	4803      	ldr	r0, [pc, #12]	; (8001994 <MX_HRTIM1_Init+0x224>)
 8001988:	f000 f828 	bl	80019dc <HAL_HRTIM_MspPostInit>

}
 800198c:	bf00      	nop
 800198e:	37b0      	adds	r7, #176	; 0xb0
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200004ec 	.word	0x200004ec
 8001998:	40016800 	.word	0x40016800

0800199c <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_HRTIM_MspInit+0x38>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10b      	bne.n	80019c6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_HRTIM_MspInit+0x3c>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_HRTIM_MspInit+0x3c>)
 80019b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_HRTIM_MspInit+0x3c>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40016800 	.word	0x40016800
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_HRTIM_MspPostInit+0x64>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11b      	bne.n	8001a36 <HAL_HRTIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_HRTIM_MspPostInit+0x68>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_HRTIM_MspPostInit+0x68>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_HRTIM_MspPostInit+0x68>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB1     ------> HRTIM1_SCOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a16:	2302      	movs	r3, #2
 8001a18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001a26:	230d      	movs	r3, #13
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a32:	f005 fae3 	bl	8006ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40016800 	.word	0x40016800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000400 	.word	0x48000400

08001a4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a74:	e000      	b.n	8001a78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f9      	beq.n	8001a76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aae:	f043 0204 	orr.w	r2, r3, #4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <__critical_enter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	static uint32_t lock_nesting_count = 0;
	void __critical_enter(void)
	{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
		__disable_irq();
		++lock_nesting_count;
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__critical_enter+0x1c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <__critical_enter+0x1c>)
 8001ad4:	6013      	str	r3, [r2, #0]
	}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20011f38 	.word	0x20011f38

08001ae4 <__critical_exit>:
	void __critical_exit(void)
	{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
		/* Unlock interrupts only when we are exiting the outermost nested call. */
		--lock_nesting_count;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <__critical_exit+0x24>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <__critical_exit+0x24>)
 8001af0:	6013      	str	r3, [r2, #0]
		if (lock_nesting_count == 0) {
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <__critical_exit+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001afa:	b662      	cpsie	i
}
 8001afc:	bf00      	nop
			__enable_irq();
		}
	}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20011f38 	.word	0x20011f38
 8001b0c:	00000000 	.word	0x00000000

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	b08d      	sub	sp, #52	; 0x34
 8001b16:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// test for github
	// ===================== тики замеряем, время работы вычисляем
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <main+0x284>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a9d      	ldr	r2, [pc, #628]	; (8001d94 <main+0x284>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT = 0;// обнуляем значение
 8001b24:	4b9c      	ldr	r3, [pc, #624]	; (8001d98 <main+0x288>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик, здесь и один раз
 8001b2a:	4b9c      	ldr	r3, [pc, #624]	; (8001d9c <main+0x28c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a9b      	ldr	r2, [pc, #620]	; (8001d9c <main+0x28c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b36:	f002 ff28 	bl	800498a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3a:	f001 f997 	bl	8002e6c <SystemClock_Config>
  // 4 -много ошибок,  256 - медлено,   16 - вроде как норм

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3e:	f7ff fd85 	bl	800164c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b42:	f7ff fd03 	bl	800154c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b46:	f7ff facf 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b4a:	f7ff fb4b 	bl	80011e4 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001b4e:	f7ff fe0f 	bl	8001770 <MX_HRTIM1_Init>
  MX_TIM1_Init();
 8001b52:	f002 f8e1 	bl	8003d18 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b56:	f002 f9df 	bl	8003f18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b5a:	f002 fa57 	bl	800400c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b5e:	f002 fb03 	bl	8004168 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001b62:	f002 fb39 	bl	80041d8 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001b66:	f002 fac9 	bl	80040fc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001b6a:	f002 fd23 	bl	80045b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b6e:	f002 fd71 	bl	8004654 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001b72:	f7ff fc9d 	bl	80014b0 <MX_CRC_Init>
  MX_TIM17_Init();
 8001b76:	f002 fb55 	bl	8004224 <MX_TIM17_Init>
  // TIM6 - используем для модбуса, делает прерывания через 50uS, а там библиотека ModBUS  работает
  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // TIM16 - используем для увеличения уменьшения мощности, выдает тики 1uS, прерывания нет, в цикле смотрим CNT
  // TIM17 - используем для сканирования по частоте, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // �?нициализируйте стек протоколов в режиме RTU для SLAVE устройства с адресом 1 = 0x01
  adr_huart_MB = &huart1;
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <main+0x290>)
 8001b7c:	4a89      	ldr	r2, [pc, #548]	; (8001da4 <main+0x294>)
 8001b7e:	601a      	str	r2, [r3, #0]
   eMBInit( MB_RTU, MB_ADDRESS/*address*/, 1/*LPUART1*/, adr_huart_MB->Init.BaudRate/*115200*/ , adr_huart_MB->Init.Parity/*UART_PARITY_NONE*/ );
 8001b80:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <main+0x290>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b86      	ldr	r3, [pc, #536]	; (8001da0 <main+0x290>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	2201      	movs	r2, #1
 8001b94:	2107      	movs	r1, #7
 8001b96:	2000      	movs	r0, #0
 8001b98:	f00b ff0e 	bl	800d9b8 <eMBInit>

   // Включите стек протоколов Modbus.
   eMBEnable();
 8001b9c:	f00b ff38 	bl	800da10 <eMBEnable>

	  HAL_Delay(300);
 8001ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ba4:	f002 ff62 	bl	8004a6c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
 8001ba8:	2120      	movs	r1, #32
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f005 fbd7 	bl	8007360 <HAL_GPIO_TogglePin>

  printf("MX_xxx_Init(); \n");
 8001bb2:	487d      	ldr	r0, [pc, #500]	; (8001da8 <main+0x298>)
 8001bb4:	f00e fb2c 	bl	8010210 <puts>
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	e086      	b.n	8001ccc <main+0x1bc>
  {
	  data_I[i] = (uint16_t) 1000 * sinf(((float)i)/64);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc8:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001dac <main+0x29c>
 8001bcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd4:	f012 f89a 	bl	8013d0c <sinf>
 8001bd8:	eef0 7a40 	vmov.f32	s15, s0
 8001bdc:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001db0 <main+0x2a0>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	b299      	uxth	r1, r3
 8001bee:	4a71      	ldr	r2, [pc, #452]	; (8001db4 <main+0x2a4>)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_U[i] = (uint16_t) cosf(((float)i)/64);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001dac <main+0x29c>
 8001c04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c08:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0c:	f012 f83e 	bl	8013c8c <cosf>
 8001c10:	eef0 7a40 	vmov.f32	s15, s0
 8001c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	b299      	uxth	r1, r3
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <main+0x2a8>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_P[i] = (uint16_t) 100 * sinf(((float)i)/64);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001dac <main+0x29c>
 8001c34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c38:	eeb0 0a47 	vmov.f32	s0, s14
 8001c3c:	f012 f866 	bl	8013d0c <sinf>
 8001c40:	eef0 7a40 	vmov.f32	s15, s0
 8001c44:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001dbc <main+0x2ac>
 8001c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c50:	ee17 3a90 	vmov	r3, s15
 8001c54:	b299      	uxth	r1, r3
 8001c56:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <main+0x2b0>)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_R[i] = (uint16_t) 100 * cosf(((float)i)/64);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001dac <main+0x29c>
 8001c6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c70:	eeb0 0a47 	vmov.f32	s0, s14
 8001c74:	f012 f80a 	bl	8013c8c <cosf>
 8001c78:	eef0 7a40 	vmov.f32	s15, s0
 8001c7c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001dbc <main+0x2ac>
 8001c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	4a4d      	ldr	r2, [pc, #308]	; (8001dc4 <main+0x2b4>)
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_Z[i] = (uint16_t) tanf(((float)i)/64);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001dac <main+0x29c>
 8001ca4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cac:	f012 f868 	bl	8013d80 <tanf>
 8001cb0:	eef0 7a40 	vmov.f32	s15, s0
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	ee17 3a90 	vmov	r3, s15
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <main+0x2b8>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	3301      	adds	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	f6ff af74 	blt.w	8001bbe <main+0xae>
	  //data_Q[i] = (uint16_t) i;
	  //data_X[i] = (uint16_t) i+1024;
	  //data_Y[i] = (uint16_t) i+4096;
  }
  //data_Q[1024] = 0;
  data_I[1024] = 1;
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <main+0x2a4>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_U[1024] = 2;
 8001cde:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <main+0x2a8>)
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_P[1024] = 3;
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <main+0x2b0>)
 8001ce8:	2203      	movs	r2, #3
 8001cea:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_R[1024] = 4;
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <main+0x2b4>)
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_Z[1024] = 5;
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <main+0x2b8>)
 8001cf8:	2205      	movs	r2, #5
 8001cfa:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

  // ============== LPUART =============== LPUART ============= LPUART ==================
  // вначале надо получить данные, пока будут нулевые, ещё нет никаких,
  // но потом прием данных будет активироваться окончанием передачи.
  // Дальше приемник не будет активирован. активация приемника происходит только 1 раз, после передачи
	  wTransferState_RX = TRANSFER_RX_START; // TRANSFER_WAIT - пока ждем приема настроечных данных
 8001cfe:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <main+0x2bc>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
	  wTransferState_TX = TRANSFER_TX_Stop;
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <main+0x2c0>)
 8001d06:	2209      	movs	r2, #9
 8001d08:	601a      	str	r2, [r3, #0]
  // if ((wTransferState != TRANSFER_ERROR ) & (status_SPI == HAL_OK))
  // { ; } // теперь надо извлечь все надобные настройки из полученого массива   cmd_array_SPI[] , только потом мохно будет запускать генерацию
  // else
  // { default; }

  HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_MASTER);
 8001d0a:	2106      	movs	r1, #6
 8001d0c:	4831      	ldr	r0, [pc, #196]	; (8001dd4 <main+0x2c4>)
 8001d0e:	f005 fcdd 	bl	80076cc <HAL_HRTIM_SimpleBaseStart>

  // TIM1 - главный таймер выдает управление ключами моста
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-низ PC0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4830      	ldr	r0, [pc, #192]	; (8001dd8 <main+0x2c8>)
 8001d16:	f008 fafb 	bl	800a310 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-верх PА7
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	482e      	ldr	r0, [pc, #184]	; (8001dd8 <main+0x2c8>)
 8001d1e:	f009 fc85 	bl	800b62c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-низ PС2
 8001d22:	2108      	movs	r1, #8
 8001d24:	482c      	ldr	r0, [pc, #176]	; (8001dd8 <main+0x2c8>)
 8001d26:	f008 faf3 	bl	800a310 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-верх PB9
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	482a      	ldr	r0, [pc, #168]	; (8001dd8 <main+0x2c8>)
 8001d2e:	f009 fc7d 	bl	800b62c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		// запаздывание CH3 относительно CH1 - это ширина импульса накачки, мощность
 8001d32:	210c      	movs	r1, #12
 8001d34:	4828      	ldr	r0, [pc, #160]	; (8001dd8 <main+0x2c8>)
 8001d36:	f008 faeb 	bl	800a310 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); 	// PA9 синхро�?мпульс - начало периода переключения ключей
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	4826      	ldr	r0, [pc, #152]	; (8001dd8 <main+0x2c8>)
 8001d3e:	f008 fae7 	bl	800a310 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim7); // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
 8001d42:	4826      	ldr	r0, [pc, #152]	; (8001ddc <main+0x2cc>)
 8001d44:	f008 f96c 	bl	800a020 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);// tim16 тактуется 1 MHz,  по условию if (htim16.Instance->CNT >10000)   будет плавно меняться мощность на одну ступеньку
 8001d48:	4825      	ldr	r0, [pc, #148]	; (8001de0 <main+0x2d0>)
 8001d4a:	f008 f969 	bl	800a020 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17); // tim17 тактуется 10 MHz, по условию if (htim17.Instance->CNT > time_step*10)   будет работать скольжение по частоте
 8001d4e:	4825      	ldr	r0, [pc, #148]	; (8001de4 <main+0x2d4>)
 8001d50:	f008 f966 	bl	800a020 <HAL_TIM_Base_Start>

  // для запуска 256 замеров, от HRTIM_SCOUT / 2, будут перекрывать 4 периода
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d54:	2104      	movs	r1, #4
 8001d56:	4824      	ldr	r0, [pc, #144]	; (8001de8 <main+0x2d8>)
 8001d58:	f008 fada 	bl	800a310 <HAL_TIM_PWM_Start>

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);      // синхроимпульс для осцила, 6 тактов от таймера TIM1 отсчитывает
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4823      	ldr	r0, [pc, #140]	; (8001dec <main+0x2dc>)
 8001d60:	f008 fad6 	bl	800a310 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1,  ADC_SINGLE_ENDED );
 8001d64:	217f      	movs	r1, #127	; 0x7f
 8001d66:	4822      	ldr	r0, [pc, #136]	; (8001df0 <main+0x2e0>)
 8001d68:	f004 f89a 	bl	8005ea0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2,  ADC_SINGLE_ENDED );
 8001d6c:	217f      	movs	r1, #127	; 0x7f
 8001d6e:	4821      	ldr	r0, [pc, #132]	; (8001df4 <main+0x2e4>)
 8001d70:	f004 f896 	bl	8005ea0 <HAL_ADCEx_Calibration_Start>
	uint32_t temp_length = LENGTH_SAMPLES; // 32 замера, по 16 в начале и в конце, будут отброшены
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	613b      	str	r3, [r7, #16]
    HAL_ADCEx_MultiModeStart_DMA(&hadc1, zamer_adc1_2, temp_length);
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	491e      	ldr	r1, [pc, #120]	; (8001df8 <main+0x2e8>)
 8001d7e:	481c      	ldr	r0, [pc, #112]	; (8001df0 <main+0x2e0>)
 8001d80:	f004 f8f0 	bl	8005f64 <HAL_ADCEx_MultiModeStart_DMA>
   // LL_ADC_REG_StopConversion(hadc1->Instance);  - это есть стоп АЦП произвольно по желанию, по тесту в любом месте
   // LL_ADC_REG_StartConversion(hadc1.Instance);  - это есть старт АЦП произвольно по желанию, если был остановлен

    size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <main+0x2ec>)
 8001d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8a:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d90:	e047      	b.n	8001e22 <main+0x312>
 8001d92:	bf00      	nop
 8001d94:	e000edfc 	.word	0xe000edfc
 8001d98:	e0001004 	.word	0xe0001004
 8001d9c:	e0001000 	.word	0xe0001000
 8001da0:	20000610 	.word	0x20000610
 8001da4:	20012158 	.word	0x20012158
 8001da8:	08014f88 	.word	0x08014f88
 8001dac:	42800000 	.word	0x42800000
 8001db0:	447a0000 	.word	0x447a0000
 8001db4:	2000f6b0 	.word	0x2000f6b0
 8001db8:	2000feb4 	.word	0x2000feb4
 8001dbc:	42c80000 	.word	0x42c80000
 8001dc0:	200106b8 	.word	0x200106b8
 8001dc4:	20010ebc 	.word	0x20010ebc
 8001dc8:	200116c0 	.word	0x200116c0
 8001dcc:	20000028 	.word	0x20000028
 8001dd0:	2000002c 	.word	0x2000002c
 8001dd4:	200004ec 	.word	0x200004ec
 8001dd8:	20011f44 	.word	0x20011f44
 8001ddc:	20012074 	.word	0x20012074
 8001de0:	200120c0 	.word	0x200120c0
 8001de4:	2001210c 	.word	0x2001210c
 8001de8:	20011f90 	.word	0x20011f90
 8001dec:	20011fdc 	.word	0x20011fdc
 8001df0:	200002cc 	.word	0x200002cc
 8001df4:	20000338 	.word	0x20000338
 8001df8:	2000062c 	.word	0x2000062c
 8001dfc:	2000662c 	.word	0x2000662c
		{
			data_adc1[ic] =0;
 8001e00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e02:	4a8c      	ldr	r2, [pc, #560]	; (8002034 <main+0x524>)
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
			data_adc2[ic] =0;
 8001e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e10:	4a89      	ldr	r2, [pc, #548]	; (8002038 <main+0x528>)
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e1e:	3301      	adds	r3, #1
 8001e20:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e24:	4b85      	ldr	r3, [pc, #532]	; (800203c <main+0x52c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbe9      	blt.n	8001e00 <main+0x2f0>
		}

	  // Select Callbacks functions called after Transfer complete and Transfer error
	  // Выберите функции Callbacks, вызываемые после завершения передачи и Ошибки передачи
	  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_CPLT_CB_ID, Mem_to_Mem_Complete);
 8001e2c:	4a84      	ldr	r2, [pc, #528]	; (8002040 <main+0x530>)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4884      	ldr	r0, [pc, #528]	; (8002044 <main+0x534>)
 8001e32:	f004 fffb 	bl	8006e2c <HAL_DMA_RegisterCallback>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8001e36:	4984      	ldr	r1, [pc, #528]	; (8002048 <main+0x538>)
 8001e38:	4a84      	ldr	r2, [pc, #528]	; (800204c <main+0x53c>)
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	4881      	ldr	r0, [pc, #516]	; (8002044 <main+0x534>)
 8001e40:	f004 fe0a 	bl	8006a58 <HAL_DMA_Start_IT>

	  //R_filter = 0.5857864376269; // для 512 замеров
	 // L_filter = 0.01;

	  freq_new = 25000;
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <main+0x540>)
 8001e46:	4a83      	ldr	r2, [pc, #524]	; (8002054 <main+0x544>)
 8001e48:	601a      	str	r2, [r3, #0]
	  old_freq_new = freq_new;
 8001e4a:	4b81      	ldr	r3, [pc, #516]	; (8002050 <main+0x540>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a82      	ldr	r2, [pc, #520]	; (8002058 <main+0x548>)
 8001e50:	6013      	str	r3, [r2, #0]
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, adc1_int, 256, DAC_ALIGN_12B_R);

	  printf("INIT__xxx (); - executed  \n");
 8001e52:	4882      	ldr	r0, [pc, #520]	; (800205c <main+0x54c>)
 8001e54:	f00e f9dc 	bl	8010210 <puts>
  /* USER CODE BEGIN WHILE */

	  uint16_t usCRC16_main;
  while (1)
  {
	  if (cmd_set.flag_ON_TxData_cicle == true)// если надо, по флагу, вот тут будет включаться циклическая долбежка
 8001e58:	4b81      	ldr	r3, [pc, #516]	; (8002060 <main+0x550>)
 8001e5a:	791b      	ldrb	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d063      	beq.n	8001f28 <main+0x418>
	  {
                  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
		  	  	  // 25 mS  минимальный интервал между передачами, при котором минимум ошибок CRC
              	  //if (htim7.Instance->CNT >250) // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
              	  if ((htim7.Instance->CNT >250) & (flag_data_complit_for_Tx ==0))
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <main+0x554>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	2bfa      	cmp	r3, #250	; 0xfa
 8001e68:	bf8c      	ite	hi
 8001e6a:	2301      	movhi	r3, #1
 8001e6c:	2300      	movls	r3, #0
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b7d      	ldr	r3, [pc, #500]	; (8002068 <main+0x558>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d052      	beq.n	8001f2c <main+0x41c>
              	  {
              		  htim7.Instance->CNT =0;
 8001e86:	4b77      	ldr	r3, [pc, #476]	; (8002064 <main+0x554>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
              		  	send_buff_cicle[0] = MB_ADDRESS;
 8001e8e:	4b77      	ldr	r3, [pc, #476]	; (800206c <main+0x55c>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	701a      	strb	r2, [r3, #0]
						send_buff_cicle[1] = 4;  // заглушка-обманка
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <main+0x55c>)
 8001e96:	2204      	movs	r2, #4
 8001e98:	705a      	strb	r2, [r3, #1]
						send_buff_cicle[2] = 80; // заглушка-обманка, типа длина данных
 8001e9a:	4b74      	ldr	r3, [pc, #464]	; (800206c <main+0x55c>)
 8001e9c:	2250      	movs	r2, #80	; 0x50
 8001e9e:	709a      	strb	r2, [r3, #2]

						if ( cmd_set.flag_ON_scan_time == true)
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <main+0x550>)
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d014      	beq.n	8001ed2 <main+0x3c2>
						{
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
								{ index_data_real_zamer = index_data_real_zamer +2; }
 8001ea8:	4b71      	ldr	r3, [pc, #452]	; (8002070 <main+0x560>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	3302      	adds	r3, #2
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <main+0x560>)
 8001eb2:	801a      	strh	r2, [r3, #0]
							if (index_data_real_zamer >1021)
 8001eb4:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <main+0x560>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d902      	bls.n	8001ec6 <main+0x3b6>
								{ index_data_real_zamer =0; }
 8001ec0:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <main+0x560>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
							fun_data_time_podgotovka( &(send_buff_cicle[3]), index_data_real_zamer/*номер элемента массива замеров*/ );
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <main+0x560>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4869      	ldr	r0, [pc, #420]	; (8002074 <main+0x564>)
 8001ece:	f001 f9c9 	bl	8003264 <fun_data_time_podgotovka>
						}

						if ( cmd_set.flag_ON_scan_freq == true)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <main+0x550>)
 8001ed4:	78db      	ldrb	r3, [r3, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <main+0x3da>
						{
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							fun_data_scan_freq_podgotovka( &(send_buff_cicle[3]), freq_tim1_float/*номер элемента массива замеров*/ );
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <main+0x568>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee4:	4863      	ldr	r0, [pc, #396]	; (8002074 <main+0x564>)
 8001ee6:	f001 fb6f 	bl	80035c8 <fun_data_scan_freq_podgotovka>
						}

						usCRC16_main = HAL_CRC_Calculate(&hcrc, ( uint32_t *)(&send_buff_cicle), 83);//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
 8001eea:	2253      	movs	r2, #83	; 0x53
 8001eec:	495f      	ldr	r1, [pc, #380]	; (800206c <main+0x55c>)
 8001eee:	4863      	ldr	r0, [pc, #396]	; (800207c <main+0x56c>)
 8001ef0:	f004 fb70 	bl	80065d4 <HAL_CRC_Calculate>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	81fb      	strh	r3, [r7, #14]
						send_buff_cicle[83] = ( UCHAR )( usCRC16_main & 0xFF );
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b5b      	ldr	r3, [pc, #364]	; (800206c <main+0x55c>)
 8001efe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
						send_buff_cicle[84] = ( UCHAR )( usCRC16_main >> 8 );
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b58      	ldr	r3, [pc, #352]	; (800206c <main+0x55c>)
 8001f0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
						vMBPortSerialEnable( FALSE, TRUE );
 8001f10:	2101      	movs	r1, #1
 8001f12:	2000      	movs	r0, #0
 8001f14:	f00b fe98 	bl	800dc48 <vMBPortSerialEnable>
						HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <main+0x570>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2255      	movs	r2, #85	; 0x55
 8001f1e:	4953      	ldr	r1, [pc, #332]	; (800206c <main+0x55c>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f009 ff6b 	bl	800bdfc <HAL_UART_Transmit_DMA>
 8001f26:	e001      	b.n	8001f2c <main+0x41c>
						//if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
						//	{ HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10); }
              	  }
	  }
	  else
	  {  eMBPoll(  ); } // Вызовите основной цикл опроса стека протоколов Modbus.
 8001f28:	f00b fd8c 	bl	800da44 <eMBPoll>




	  // power_procent - меняется от 2 проц до 98 проц, и от этого сдвигаются фронты TIM1_OUT3,  TIM1_OUT1 - constanta
	  if (htim16.Instance->CNT >1000) // tim16 тактуется 1 MHz, нужен для плавного старта-стопа генерации
 8001f2c:	4b55      	ldr	r3, [pc, #340]	; (8002084 <main+0x574>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f36:	f240 8114 	bls.w	8002162 <main+0x652>
	  {
		  htim16.Instance->CNT =0;
 8001f3a:	4b52      	ldr	r3, [pc, #328]	; (8002084 <main+0x574>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
		  // синяя кнопка для стопа, если был запущен с модбуса
	      if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // нажата кнопка
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	4850      	ldr	r0, [pc, #320]	; (8002088 <main+0x578>)
 8001f48:	f005 f9da 	bl	8007300 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d11c      	bne.n	8001f8c <main+0x47c>
	      { 														// HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	    	  count_press_blue_btn ++;
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <main+0x57c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	; (800208c <main+0x57c>)
 8001f5c:	701a      	strb	r2, [r3, #0]
	    	  if (count_press_blue_btn >5)
 8001f5e:	4b4b      	ldr	r3, [pc, #300]	; (800208c <main+0x57c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d915      	bls.n	8001f92 <main+0x482>
	    	  {
	    		  count_press_blue_btn=5;
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <main+0x57c>)
 8001f68:	2205      	movs	r2, #5
 8001f6a:	701a      	strb	r2, [r3, #0]
	    		  //cmd_set.cmd_flags =0;  // тотальный стоп
	    		  cmd_set.flag_ON_generation = false;
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <main+0x550>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	709a      	strb	r2, [r3, #2]
	    		  cmd_set.flag_ON_TxData_cicle = false;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <main+0x550>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	711a      	strb	r2, [r3, #4]
	    		  cmd_set.flag_ON_scan_freq = false;
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <main+0x550>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	70da      	strb	r2, [r3, #3]
	    		  cmd_set.flag_ON_scan_time = false;
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <main+0x550>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	719a      	strb	r2, [r3, #6]
	    		  cmd_set.flag_ON_autoTuning_freq = false;
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <main+0x550>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	715a      	strb	r2, [r3, #5]
 8001f8a:	e002      	b.n	8001f92 <main+0x482>
	    	  }
	      }
	      else
	      { count_press_blue_btn =0; } // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <main+0x57c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]


		  if (cmd_set.flag_ON_generation == true)// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <main+0x550>)
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d042      	beq.n	8002020 <main+0x510>
	  		{
	  			if (step_power_procent > cmd_set.proc_pwr /*power_procent*/) {step_power_procent --;}
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <main+0x550>)
 8001f9c:	895b      	ldrh	r3, [r3, #10]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <main+0x580>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d204      	bcs.n	8001fb2 <main+0x4a2>
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <main+0x580>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	4a38      	ldr	r2, [pc, #224]	; (8002090 <main+0x580>)
 8001fb0:	6013      	str	r3, [r2, #0]
	  			if (step_power_procent < cmd_set.proc_pwr /*power_procent*/) {step_power_procent ++;}
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <main+0x550>)
 8001fb4:	895b      	ldrh	r3, [r3, #10]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <main+0x580>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d904      	bls.n	8001fca <main+0x4ba>
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <main+0x580>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <main+0x580>)
 8001fc8:	6013      	str	r3, [r2, #0]
	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <main+0x584>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	4a31      	ldr	r2, [pc, #196]	; (8002098 <main+0x588>)
 8001fd2:	6013      	str	r3, [r2, #0]
					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <main+0x588>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	bf8c      	ite	hi
 8001fdc:	2301      	movhi	r3, #1
 8001fde:	2300      	movls	r3, #0
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <main+0x588>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b36      	cmp	r3, #54	; 0x36
 8001fe8:	bf94      	ite	ls
 8001fea:	2301      	movls	r3, #1
 8001fec:	2300      	movhi	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80b4 	beq.w	8002162 <main+0x652>
					{
						if (flag_generate_ON ==0)
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <main+0x58c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <main+0x502>
							{ __HAL_TIM_MOE_ENABLE(&htim1); } // програмно восстанавливается флаг MOE для подключения выходов TIM1
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <main+0x584>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <main+0x584>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
						flag_generate_ON =255;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <main+0x58c>)
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	701a      	strb	r2, [r3, #0]
						flag_generate_OFF =0;
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <main+0x590>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e0a0      	b.n	8002162 <main+0x652>
					}
	  		}
	  		else	// кнопка отпущена, СТОП
	  		{
				if (step_power_procent > 2)
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <main+0x580>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d93d      	bls.n	80020a4 <main+0x594>
					{step_power_procent --;}
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <main+0x580>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3b01      	subs	r3, #1
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <main+0x580>)
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e096      	b.n	8002162 <main+0x652>
 8002034:	2000262c 	.word	0x2000262c
 8002038:	2000462c 	.word	0x2000462c
 800203c:	2000662c 	.word	0x2000662c
 8002040:	080031fd 	.word	0x080031fd
 8002044:	2000048c 	.word	0x2000048c
 8002048:	2000062c 	.word	0x2000062c
 800204c:	2000162c 	.word	0x2000162c
 8002050:	2000f66c 	.word	0x2000f66c
 8002054:	46c35000 	.word	0x46c35000
 8002058:	2000f670 	.word	0x2000f670
 800205c:	08014f98 	.word	0x08014f98
 8002060:	20011ec8 	.word	0x20011ec8
 8002064:	20012074 	.word	0x20012074
 8002068:	20011ec6 	.word	0x20011ec6
 800206c:	20011edc 	.word	0x20011edc
 8002070:	20011ec4 	.word	0x20011ec4
 8002074:	20011edf 	.word	0x20011edf
 8002078:	2000f658 	.word	0x2000f658
 800207c:	20000468 	.word	0x20000468
 8002080:	20000610 	.word	0x20000610
 8002084:	200120c0 	.word	0x200120c0
 8002088:	48000800 	.word	0x48000800
 800208c:	20000618 	.word	0x20000618
 8002090:	20000010 	.word	0x20000010
 8002094:	20011f44 	.word	0x20011f44
 8002098:	20000614 	.word	0x20000614
 800209c:	20000629 	.word	0x20000629
 80020a0:	20000628 	.word	0x20000628
				else
				{
					step_power_procent =2;
 80020a4:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <main+0x7a8>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	601a      	str	r2, [r3, #0]
	  	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 80020aa:	4b84      	ldr	r3, [pc, #528]	; (80022bc <main+0x7ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	4a83      	ldr	r2, [pc, #524]	; (80022c0 <main+0x7b0>)
 80020b2:	6013      	str	r3, [r2, #0]
	  					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 80020b4:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <main+0x7b0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	bf8c      	ite	hi
 80020bc:	2301      	movhi	r3, #1
 80020be:	2300      	movls	r3, #0
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <main+0x7b0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b36      	cmp	r3, #54	; 0x36
 80020c8:	bf94      	ite	ls
 80020ca:	2301      	movls	r3, #1
 80020cc:	2300      	movhi	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d044      	beq.n	8002162 <main+0x652>
	  					{
							if (flag_generate_OFF ==0)
 80020d8:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <main+0x7b4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d13a      	bne.n	8002156 <main+0x646>
							{
								for(int i=0; i<100; i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	e034      	b.n	8002150 <main+0x640>
								{
									if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	4874      	ldr	r0, [pc, #464]	; (80022bc <main+0x7ac>)
 80020ea:	f008 fcb7 	bl	800aa5c <HAL_TIM_GenerateEvent>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d12a      	bne.n	800214a <main+0x63a>
									{
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 80020f4:	2300      	movs	r3, #0
 80020f6:	837b      	strh	r3, [r7, #26]
 80020f8:	e01a      	b.n	8002130 <main+0x620>
											{
												data_adc1_Tx[ic] =0;
 80020fa:	8b7b      	ldrh	r3, [r7, #26]
 80020fc:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <main+0x7b8>)
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
												data_adc2_Tx[ic] =0;
 8002108:	8b7b      	ldrh	r3, [r7, #26]
 800210a:	4a70      	ldr	r2, [pc, #448]	; (80022cc <main+0x7bc>)
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
												adc1_Tx[ic] =0;
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	4a6d      	ldr	r2, [pc, #436]	; (80022d0 <main+0x7c0>)
 800211a:	2100      	movs	r1, #0
 800211c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
												adc2_Tx[ic] =0;
 8002120:	8b7b      	ldrh	r3, [r7, #26]
 8002122:	4a6c      	ldr	r2, [pc, #432]	; (80022d4 <main+0x7c4>)
 8002124:	2100      	movs	r1, #0
 8002126:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 800212a:	8b7b      	ldrh	r3, [r7, #26]
 800212c:	3301      	adds	r3, #1
 800212e:	837b      	strh	r3, [r7, #26]
 8002130:	8b7a      	ldrh	r2, [r7, #26]
 8002132:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <main+0x7c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0fd9      	lsrs	r1, r3, #31
 8002138:	440b      	add	r3, r1
 800213a:	105b      	asrs	r3, r3, #1
 800213c:	429a      	cmp	r2, r3
 800213e:	dbdc      	blt.n	80020fa <main+0x5ea>
											}
										index_data_real_zamer =800; // подготовка для замера
 8002140:	4b66      	ldr	r3, [pc, #408]	; (80022dc <main+0x7cc>)
 8002142:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002146:	801a      	strh	r2, [r3, #0]
										break;
 8002148:	e005      	b.n	8002156 <main+0x646>
								for(int i=0; i<100; i++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b63      	cmp	r3, #99	; 0x63
 8002154:	ddc7      	ble.n	80020e6 <main+0x5d6>
									}// if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
								} // for(int i=0; i<100; i++)
							} // if (flag_generate_OFF ==0)
							flag_generate_OFF =255;
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <main+0x7b4>)
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	701a      	strb	r2, [r3, #0]
							flag_generate_ON =0;
 800215c:	4b60      	ldr	r3, [pc, #384]	; (80022e0 <main+0x7d0>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
	  					}
	  	*/
	  					// ======   А ЭТО СТОП  СТОП  ====== ======   А ЭТО START  START  ======


	  htim1.Instance->CCR1 = ccr1_tim1; // tim1->CCR1 == 63   всегда без вариантов
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <main+0x7ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a5f      	ldr	r2, [pc, #380]	; (80022e4 <main+0x7d4>)
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
	  ccr3_tim1 = (64 * step_power_procent ) / 100;
 800216c:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <main+0x7a8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	4a5d      	ldr	r2, [pc, #372]	; (80022e8 <main+0x7d8>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	4a5c      	ldr	r2, [pc, #368]	; (80022ec <main+0x7dc>)
 800217c:	6013      	str	r3, [r2, #0]
		  if(ccr3_tim1 >62) {ccr3_tim1 =62;}// 96.88%   =>   64*96.88/100=62	 deadtime фиксировано ==85 тиков от 170_МГц, Меньшая мощность будет наползать на deadtime
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <main+0x7dc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b3e      	cmp	r3, #62	; 0x3e
 8002184:	d902      	bls.n	800218c <main+0x67c>
 8002186:	4b59      	ldr	r3, [pc, #356]	; (80022ec <main+0x7dc>)
 8002188:	223e      	movs	r2, #62	; 0x3e
 800218a:	601a      	str	r2, [r3, #0]
		  if(ccr3_tim1 <2) {ccr3_tim1 =2;}  // 3.125%   =>    64* 3.125/100=2	 2 тика от TIM1  == 90(тиков от 170_МГц при 30кГц) == 106(тиков от 170_МГц при 25кГц) == 186(тиков от 170_МГц при 14,5кГц)
 800218c:	4b57      	ldr	r3, [pc, #348]	; (80022ec <main+0x7dc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d802      	bhi.n	800219a <main+0x68a>
 8002194:	4b55      	ldr	r3, [pc, #340]	; (80022ec <main+0x7dc>)
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
	  ccr4_tim1 = 64 + ccr3_tim1;
 800219a:	4b54      	ldr	r3, [pc, #336]	; (80022ec <main+0x7dc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3340      	adds	r3, #64	; 0x40
 80021a0:	4a53      	ldr	r2, [pc, #332]	; (80022f0 <main+0x7e0>)
 80021a2:	6013      	str	r3, [r2, #0]
		  if(ccr4_tim1 >125) {ccr4_tim1 =125;}
 80021a4:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <main+0x7e0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b7d      	cmp	r3, #125	; 0x7d
 80021aa:	d902      	bls.n	80021b2 <main+0x6a2>
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <main+0x7e0>)
 80021ae:	227d      	movs	r2, #125	; 0x7d
 80021b0:	601a      	str	r2, [r3, #0]
		  if(ccr4_tim1 <66) {ccr4_tim1 =66;}
 80021b2:	4b4f      	ldr	r3, [pc, #316]	; (80022f0 <main+0x7e0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b41      	cmp	r3, #65	; 0x41
 80021b8:	d802      	bhi.n	80021c0 <main+0x6b0>
 80021ba:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <main+0x7e0>)
 80021bc:	2242      	movs	r2, #66	; 0x42
 80021be:	601a      	str	r2, [r3, #0]
	  htim1.Instance->CCR3 = ccr3_tim1; //
 80021c0:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <main+0x7ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a49      	ldr	r2, [pc, #292]	; (80022ec <main+0x7dc>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance->CCR4 = ccr4_tim1; //  power_procent
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <main+0x7ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <main+0x7e0>)
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40

	  // ========================== а вот ОНО, - новая частота  ============================
	  // hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
	  if(hrtim_period_new >1000) // == 43 kHz    hrtim_period_new=2930  == 14505 Hz
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <main+0x7e4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021dc:	d904      	bls.n	80021e8 <main+0x6d8>
		  {  hhrtim1.Instance->sMasterRegs.MPER = hrtim_period_new; }
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <main+0x7e8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a44      	ldr	r2, [pc, #272]	; (80022f4 <main+0x7e4>)
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	615a      	str	r2, [r3, #20]
	  freq_tim1 = 5440000000 / (hhrtim1.Instance->sMasterRegs.MPER) / 128; // это есть выходная частота, tim1->ARR == 127  всегда ==> делитель=128
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <main+0x7e8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2200      	movs	r2, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f8:	a12d      	add	r1, pc, #180	; (adr r1, 80022b0 <main+0x7a0>)
 80021fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021fe:	f7fe fd6b 	bl	8000cd8 <__aeabi_ldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	2b00      	cmp	r3, #0
 8002208:	da05      	bge.n	8002216 <main+0x706>
 800220a:	f112 087f 	adds.w	r8, r2, #127	; 0x7f
 800220e:	f143 0900 	adc.w	r9, r3, #0
 8002212:	4642      	mov	r2, r8
 8002214:	464b      	mov	r3, r9
 8002216:	f04f 0000 	mov.w	r0, #0
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	09d0      	lsrs	r0, r2, #7
 8002220:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002224:	11d9      	asrs	r1, r3, #7
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <main+0x7ec>)
 800222c:	601a      	str	r2, [r3, #0]
	  freq_tim1_float = (float)freq_tim1;
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <main+0x7ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <main+0x7f0>)
 800223c:	edc3 7a00 	vstr	s15, [r3]

	  if ((cmd_set.flag_ON_scan_time == true) & (index_data_real_zamer >1000))
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <main+0x7f4>)
 8002242:	799a      	ldrb	r2, [r3, #6]
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <main+0x7cc>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224c:	bf8c      	ite	hi
 800224e:	2301      	movhi	r3, #1
 8002250:	2300      	movls	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4013      	ands	r3, r2
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <main+0x752>
	  	  { flag_data_complit_for_Tx = 255; }
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <main+0x7f8>)
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	801a      	strh	r2, [r3, #0]

	  if (flag_end_FFT ==0) // flag_complit_ADC ==1 означает что все замеры сделаны
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <main+0x7fc>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8474 	bne.w	8002b54 <main+0x1044>
	  {
		  flag_end_FFT =1;
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <main+0x7fc>)
 800226e:	2201      	movs	r2, #1
 8002270:	801a      	strh	r2, [r3, #0]
		//count_tic_adc_finish = DWT_CYCCNT;//смотрим сколько натикало, поскольку при старте  DWT_CYCCNT==0, то все просто
		//count_tic_adc_float_mks = (float)count_tic_adc_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 82-86 мкс
		// обнуляем счетчик тиков, для подсчета времени работы прг, и одновременно уже будет идти 256 замеров АЦП
			count_tic_ALL_finish = DWT_CYCCNT;
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <main+0x800>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a27      	ldr	r2, [pc, #156]	; (8002314 <main+0x804>)
 8002278:	6013      	str	r3, [r2, #0]
			count_tic_ALL_float_mks = (float)count_tic_ALL_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 1320 мкс 512 zamerov;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <main+0x804>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002318 <main+0x808>
 800228a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <main+0x80c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <main+0x810>)
 80022a0:	edc3 7a00 	vstr	s15, [r3]
		 DWT_CYCCNT =0;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <main+0x800>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]



//		for (uint16_t ic =32; ic < LENGTH_OTSOS; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 80022aa:	2300      	movs	r3, #0
 80022ac:	833b      	strh	r3, [r7, #24]
 80022ae:	e11d      	b.n	80024ec <main+0x9dc>
 80022b0:	443fd000 	.word	0x443fd000
 80022b4:	00000001 	.word	0x00000001
 80022b8:	20000010 	.word	0x20000010
 80022bc:	20011f44 	.word	0x20011f44
 80022c0:	20000614 	.word	0x20000614
 80022c4:	20000628 	.word	0x20000628
 80022c8:	20007630 	.word	0x20007630
 80022cc:	20008630 	.word	0x20008630
 80022d0:	20006630 	.word	0x20006630
 80022d4:	20006e30 	.word	0x20006e30
 80022d8:	2000662c 	.word	0x2000662c
 80022dc:	20011ec4 	.word	0x20011ec4
 80022e0:	20000629 	.word	0x20000629
 80022e4:	20000004 	.word	0x20000004
 80022e8:	51eb851f 	.word	0x51eb851f
 80022ec:	20000008 	.word	0x20000008
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	2000001c 	.word	0x2000001c
 80022f8:	200004ec 	.word	0x200004ec
 80022fc:	2000f654 	.word	0x2000f654
 8002300:	2000f658 	.word	0x2000f658
 8002304:	20011ec8 	.word	0x20011ec8
 8002308:	20011ec6 	.word	0x20011ec6
 800230c:	2000061a 	.word	0x2000061a
 8002310:	e0001004 	.word	0xe0001004
 8002314:	20000620 	.word	0x20000620
 8002318:	49742400 	.word	0x49742400
 800231c:	20000030 	.word	0x20000030
 8002320:	20000624 	.word	0x20000624
				//X_filter += V_filter - X_filter * L_filter;
				// ===============================================================
				// X_filter_1 += (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] & 0x0000FFFF);
				// if (zamer_tim20[ic] >50) { X_filter_1 += 1; }
				if(flag_data_complit_for_Tx>0) { adc1_Tx[ic] = zamer_adc_dma[ic] & 0x0000FFFF; }
 8002324:	4ba6      	ldr	r3, [pc, #664]	; (80025c0 <main+0xab0>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <main+0x82e>
 800232c:	8b3b      	ldrh	r3, [r7, #24]
 800232e:	4aa5      	ldr	r2, [pc, #660]	; (80025c4 <main+0xab4>)
 8002330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002334:	8b3b      	ldrh	r3, [r7, #24]
 8002336:	b291      	uxth	r1, r2
 8002338:	4aa3      	ldr	r2, [pc, #652]	; (80025c8 <main+0xab8>)
 800233a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_1 += (float) (zamer_adc_dma[ic] & 0x0000FFFF);
 800233e:	8b3b      	ldrh	r3, [r7, #24]
 8002340:	4aa0      	ldr	r2, [pc, #640]	; (80025c4 <main+0xab4>)
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	b29b      	uxth	r3, r3
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002350:	4b9e      	ldr	r3, [pc, #632]	; (80025cc <main+0xabc>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235a:	4b9c      	ldr	r3, [pc, #624]	; (80025cc <main+0xabc>)
 800235c:	edc3 7a00 	vstr	s15, [r3]
				V_filter_1 -= X_filter_1 * (R_filter);
 8002360:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <main+0xac0>)
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	4b99      	ldr	r3, [pc, #612]	; (80025cc <main+0xabc>)
 8002368:	edd3 6a00 	vldr	s13, [r3]
 800236c:	4b99      	ldr	r3, [pc, #612]	; (80025d4 <main+0xac4>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237a:	4b95      	ldr	r3, [pc, #596]	; (80025d0 <main+0xac0>)
 800237c:	edc3 7a00 	vstr	s15, [r3]
				X_filter_1 += V_filter_1 - X_filter_1 * L_filter;
 8002380:	4b93      	ldr	r3, [pc, #588]	; (80025d0 <main+0xac0>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	4b91      	ldr	r3, [pc, #580]	; (80025cc <main+0xabc>)
 8002388:	edd3 6a00 	vldr	s13, [r3]
 800238c:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <main+0xac8>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239a:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <main+0xabc>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a4:	4b89      	ldr	r3, [pc, #548]	; (80025cc <main+0xabc>)
 80023a6:	edc3 7a00 	vstr	s15, [r3]
				filter_adc1[ic] = X_filter_1;
 80023aa:	8b3b      	ldrh	r3, [r7, #24]
 80023ac:	4a87      	ldr	r2, [pc, #540]	; (80025cc <main+0xabc>)
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	498a      	ldr	r1, [pc, #552]	; (80025dc <main+0xacc>)
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	601a      	str	r2, [r3, #0]
				data_adc1[2*ic] = 0.001 * X_filter_1;
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <main+0xabc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f8eb 	bl	8000598 <__aeabi_f2d>
 80023c2:	a37d      	add	r3, pc, #500	; (adr r3, 80025b8 <main+0xaa8>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f93e 	bl	8000648 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	8b3b      	ldrh	r3, [r7, #24]
 80023d6:	005c      	lsls	r4, r3, #1
 80023d8:	f7fe fc2e 	bl	8000c38 <__aeabi_d2f>
 80023dc:	4602      	mov	r2, r0
 80023de:	4980      	ldr	r1, [pc, #512]	; (80025e0 <main+0xad0>)
 80023e0:	00a3      	lsls	r3, r4, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc1_Tx[ic] = data_adc1[2*ic]; }
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <main+0xab0>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <main+0x8f4>
 80023ee:	8b3b      	ldrh	r3, [r7, #24]
 80023f0:	005a      	lsls	r2, r3, #1
 80023f2:	8b3b      	ldrh	r3, [r7, #24]
 80023f4:	497a      	ldr	r1, [pc, #488]	; (80025e0 <main+0xad0>)
 80023f6:	0092      	lsls	r2, r2, #2
 80023f8:	440a      	add	r2, r1
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	4979      	ldr	r1, [pc, #484]	; (80025e4 <main+0xad4>)
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	601a      	str	r2, [r3, #0]
				//data_adc1[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*(ic-32+1)] =0;
				// ==================================================================
				// X_filter_2 += (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] >>16);
				if(flag_data_complit_for_Tx>0) { adc2_Tx[ic] = (zamer_adc_dma[ic] >>16); }
 8002404:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <main+0xab0>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <main+0x910>
 800240c:	8b3b      	ldrh	r3, [r7, #24]
 800240e:	4a6d      	ldr	r2, [pc, #436]	; (80025c4 <main+0xab4>)
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	0c1a      	lsrs	r2, r3, #16
 8002416:	8b3b      	ldrh	r3, [r7, #24]
 8002418:	b291      	uxth	r1, r2
 800241a:	4a73      	ldr	r2, [pc, #460]	; (80025e8 <main+0xad8>)
 800241c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_2 += (float) ((zamer_adc_dma[ic] >>16));
 8002420:	8b3b      	ldrh	r3, [r7, #24]
 8002422:	4a68      	ldr	r2, [pc, #416]	; (80025c4 <main+0xab4>)
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002432:	4b6e      	ldr	r3, [pc, #440]	; (80025ec <main+0xadc>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243c:	4b6b      	ldr	r3, [pc, #428]	; (80025ec <main+0xadc>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
				V_filter_2 -= X_filter_2 * (R_filter);
 8002442:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <main+0xae0>)
 8002444:	ed93 7a00 	vldr	s14, [r3]
 8002448:	4b68      	ldr	r3, [pc, #416]	; (80025ec <main+0xadc>)
 800244a:	edd3 6a00 	vldr	s13, [r3]
 800244e:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <main+0xac4>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245c:	4b64      	ldr	r3, [pc, #400]	; (80025f0 <main+0xae0>)
 800245e:	edc3 7a00 	vstr	s15, [r3]
				X_filter_2 += V_filter_2 - X_filter_2 * L_filter;
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <main+0xae0>)
 8002464:	ed93 7a00 	vldr	s14, [r3]
 8002468:	4b60      	ldr	r3, [pc, #384]	; (80025ec <main+0xadc>)
 800246a:	edd3 6a00 	vldr	s13, [r3]
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <main+0xac8>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <main+0xadc>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002486:	4b59      	ldr	r3, [pc, #356]	; (80025ec <main+0xadc>)
 8002488:	edc3 7a00 	vstr	s15, [r3]
				filter_adc2[ic] = X_filter_2;
 800248c:	8b3b      	ldrh	r3, [r7, #24]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <main+0xadc>)
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4958      	ldr	r1, [pc, #352]	; (80025f4 <main+0xae4>)
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	601a      	str	r2, [r3, #0]
				data_adc2[2*ic] = 0.001 * X_filter_2;
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <main+0xadc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f87a 	bl	8000598 <__aeabi_f2d>
 80024a4:	a344      	add	r3, pc, #272	; (adr r3, 80025b8 <main+0xaa8>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fe f8cd 	bl	8000648 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	8b3b      	ldrh	r3, [r7, #24]
 80024b8:	005c      	lsls	r4, r3, #1
 80024ba:	f7fe fbbd 	bl	8000c38 <__aeabi_d2f>
 80024be:	4602      	mov	r2, r0
 80024c0:	494d      	ldr	r1, [pc, #308]	; (80025f8 <main+0xae8>)
 80024c2:	00a3      	lsls	r3, r4, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc2_Tx[ic] = data_adc2[2*ic]; }
 80024c8:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <main+0xab0>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <main+0x9d6>
 80024d0:	8b3b      	ldrh	r3, [r7, #24]
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	8b3b      	ldrh	r3, [r7, #24]
 80024d6:	4948      	ldr	r1, [pc, #288]	; (80025f8 <main+0xae8>)
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	440a      	add	r2, r1
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	4947      	ldr	r1, [pc, #284]	; (80025fc <main+0xaec>)
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	601a      	str	r2, [r3, #0]
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 80024e6:	8b3b      	ldrh	r3, [r7, #24]
 80024e8:	3301      	adds	r3, #1
 80024ea:	833b      	strh	r3, [r7, #24]
 80024ec:	8b3b      	ldrh	r3, [r7, #24]
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	f4ff af17 	bcc.w	8002324 <main+0x814>
				//data_adc2[2*(ic-32)] = X_filter_2;
				//data_adc2[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*(ic-32+1)] =0;
			}

			if(flag_data_complit_for_Tx>0)
 80024f6:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <main+0xab0>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <main+0x9fa>
				{
					index_data_real_zamer =0;
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <main+0xaf0>)
 8002500:	2200      	movs	r2, #0
 8002502:	801a      	strh	r2, [r3, #0]
					flag_data_complit_for_Tx =0;
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <main+0xab0>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
//					for (uint16_t iv =0; iv < 16; iv++)
//					{ data_adc1[32*iv + ic] = 0; }
//				}
//			}

			flag_end_FFT =2; // такой флаг разрешает остановить АЦП и перекинуть массив данных, пока тут дорасчитываем до конца
 800250a:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <main+0xaf4>)
 800250c:	2202      	movs	r2, #2
 800250e:	801a      	strh	r2, [r3, #0]
							// перекид данных занимает 41мкс, и произойдет только при полном окончании N(512) замеров
			count_tic_FFT_start= DWT_CYCCNT;
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <main+0xaf8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3d      	ldr	r2, [pc, #244]	; (800260c <main+0xafc>)
 8002516:	6013      	str	r3, [r2, #0]
		  // Process the data through the CFFT/CIFFT module
			if (fft_N ==256)
 8002518:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <main+0xb00>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002520:	d114      	bne.n	800254c <main+0xa3c>
			{
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc1, ifftFlag, doBitReverse);//в реале == 361мкс(256 sampl)
 8002522:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <main+0xb04>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <main+0xb08>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	492c      	ldr	r1, [pc, #176]	; (80025e0 <main+0xad0>)
 8002530:	483a      	ldr	r0, [pc, #232]	; (800261c <main+0xb0c>)
 8002532:	f00c f8f5 	bl	800e720 <arm_cfft_f32>
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc2, ifftFlag, doBitReverse);
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <main+0xb04>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <main+0xb08>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	492d      	ldr	r1, [pc, #180]	; (80025f8 <main+0xae8>)
 8002544:	4835      	ldr	r0, [pc, #212]	; (800261c <main+0xb0c>)
 8002546:	f00c f8eb 	bl	800e720 <arm_cfft_f32>
 800254a:	e0a0      	b.n	800268e <main+0xb7e>
			}
			else
			{
				if (fft_N ==512)
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <main+0xb00>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d114      	bne.n	8002580 <main+0xa70>
				{
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc1, ifftFlag, doBitReverse);//в реале == 618мкс(512 sampl)
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <main+0xb04>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <main+0xb08>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	491f      	ldr	r1, [pc, #124]	; (80025e0 <main+0xad0>)
 8002564:	482e      	ldr	r0, [pc, #184]	; (8002620 <main+0xb10>)
 8002566:	f00c f8db 	bl	800e720 <arm_cfft_f32>
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc2, ifftFlag, doBitReverse);
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <main+0xb04>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <main+0xb08>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4920      	ldr	r1, [pc, #128]	; (80025f8 <main+0xae8>)
 8002578:	4829      	ldr	r0, [pc, #164]	; (8002620 <main+0xb10>)
 800257a:	f00c f8d1 	bl	800e720 <arm_cfft_f32>
 800257e:	e086      	b.n	800268e <main+0xb7e>
				}
				else
				{
					if (fft_N ==1024)
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <main+0xb00>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d14e      	bne.n	8002628 <main+0xb18>
					{
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(1024 sampl)
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <main+0xb04>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <main+0xb08>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4912      	ldr	r1, [pc, #72]	; (80025e0 <main+0xad0>)
 8002598:	4822      	ldr	r0, [pc, #136]	; (8002624 <main+0xb14>)
 800259a:	f00c f8c1 	bl	800e720 <arm_cfft_f32>
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc2, ifftFlag, doBitReverse);
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <main+0xb04>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <main+0xb08>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4913      	ldr	r1, [pc, #76]	; (80025f8 <main+0xae8>)
 80025ac:	481d      	ldr	r0, [pc, #116]	; (8002624 <main+0xb14>)
 80025ae:	f00c f8b7 	bl	800e720 <arm_cfft_f32>
 80025b2:	e06c      	b.n	800268e <main+0xb7e>
 80025b4:	f3af 8000 	nop.w
 80025b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025bc:	3f50624d 	.word	0x3f50624d
 80025c0:	20011ec6 	.word	0x20011ec6
 80025c4:	2000162c 	.word	0x2000162c
 80025c8:	20006630 	.word	0x20006630
 80025cc:	2000f674 	.word	0x2000f674
 80025d0:	2000f678 	.word	0x2000f678
 80025d4:	20000020 	.word	0x20000020
 80025d8:	20000024 	.word	0x20000024
 80025dc:	20009630 	.word	0x20009630
 80025e0:	2000262c 	.word	0x2000262c
 80025e4:	20007630 	.word	0x20007630
 80025e8:	20006e30 	.word	0x20006e30
 80025ec:	2000f67c 	.word	0x2000f67c
 80025f0:	2000f680 	.word	0x2000f680
 80025f4:	2000a630 	.word	0x2000a630
 80025f8:	2000462c 	.word	0x2000462c
 80025fc:	20008630 	.word	0x20008630
 8002600:	20011ec4 	.word	0x20011ec4
 8002604:	2000061a 	.word	0x2000061a
 8002608:	e0001004 	.word	0xe0001004
 800260c:	2000061c 	.word	0x2000061c
 8002610:	20000018 	.word	0x20000018
 8002614:	2000f650 	.word	0x2000f650
 8002618:	20000014 	.word	0x20000014
 800261c:	080153b0 	.word	0x080153b0
 8002620:	080153d0 	.word	0x080153d0
 8002624:	08015390 	.word	0x08015390
					}
					else
					{
						if (fft_N ==2048)
 8002628:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <main+0xcc8>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	d114      	bne.n	800265c <main+0xb4c>
						{
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(2048 sampl)
 8002632:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <main+0xccc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b69      	ldr	r3, [pc, #420]	; (80027e0 <main+0xcd0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4969      	ldr	r1, [pc, #420]	; (80027e4 <main+0xcd4>)
 8002640:	4869      	ldr	r0, [pc, #420]	; (80027e8 <main+0xcd8>)
 8002642:	f00c f86d 	bl	800e720 <arm_cfft_f32>
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc2, ifftFlag, doBitReverse);
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <main+0xccc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b64      	ldr	r3, [pc, #400]	; (80027e0 <main+0xcd0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4966      	ldr	r1, [pc, #408]	; (80027ec <main+0xcdc>)
 8002654:	4864      	ldr	r0, [pc, #400]	; (80027e8 <main+0xcd8>)
 8002656:	f00c f863 	bl	800e720 <arm_cfft_f32>
 800265a:	e018      	b.n	800268e <main+0xb7e>
						}
						else
						{
							if (fft_N ==4096)
 800265c:	4b5e      	ldr	r3, [pc, #376]	; (80027d8 <main+0xcc8>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d113      	bne.n	800268e <main+0xb7e>
							{
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc1, ifftFlag, doBitReverse);//в реале == 5461мкс(4096 sampl)
 8002666:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <main+0xccc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	4b5c      	ldr	r3, [pc, #368]	; (80027e0 <main+0xcd0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	495c      	ldr	r1, [pc, #368]	; (80027e4 <main+0xcd4>)
 8002674:	485e      	ldr	r0, [pc, #376]	; (80027f0 <main+0xce0>)
 8002676:	f00c f853 	bl	800e720 <arm_cfft_f32>
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc2, ifftFlag, doBitReverse);
 800267a:	4b58      	ldr	r3, [pc, #352]	; (80027dc <main+0xccc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <main+0xcd0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4959      	ldr	r1, [pc, #356]	; (80027ec <main+0xcdc>)
 8002688:	4859      	ldr	r0, [pc, #356]	; (80027f0 <main+0xce0>)
 800268a:	f00c f849 	bl	800e720 <arm_cfft_f32>
					} // if (fft_N ==1024)
				} // if (fft_N ==512)
			} // if (fft_N ==256)

		  // Process the data through the Complex Magnitude Module for  calculating the magnitude at each bin
		  fftSize = fft_N /64 +10; // 10 такое количество гармоник достаточно, для массива 512 без нулей
 800268e:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <main+0xcc8>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	b29b      	uxth	r3, r3
 8002696:	330a      	adds	r3, #10
 8002698:	461a      	mov	r2, r3
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <main+0xce4>)
 800269c:	601a      	str	r2, [r3, #0]
		  //ввремя вычисления Две магнитуды, в реале == 97мкс(fftSize==256) == 37мкс(fftSize==96)
		  arm_cmplx_mag_f32(data_adc1, arr1_Output_f32, fftSize);
 800269e:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <main+0xce4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4954      	ldr	r1, [pc, #336]	; (80027f8 <main+0xce8>)
 80026a6:	484f      	ldr	r0, [pc, #316]	; (80027e4 <main+0xcd4>)
 80026a8:	f00c f8d2 	bl	800e850 <arm_cmplx_mag_f32>
		  arm_cmplx_mag_f32(data_adc2, arr2_Output_f32, fftSize);
 80026ac:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <main+0xce4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4952      	ldr	r1, [pc, #328]	; (80027fc <main+0xcec>)
 80026b4:	484d      	ldr	r0, [pc, #308]	; (80027ec <main+0xcdc>)
 80026b6:	f00c f8cb 	bl	800e850 <arm_cmplx_mag_f32>
		  arr1_phase_Output_8_f32 = atan2f(data_adc1[17], data_adc1[16]);
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <main+0xcd4>)
 80026bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026c0:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <main+0xcd4>)
 80026c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80026c6:	eef0 0a47 	vmov.f32	s1, s14
 80026ca:	eeb0 0a67 	vmov.f32	s0, s15
 80026ce:	f011 fb81 	bl	8013dd4 <atan2f>
 80026d2:	eef0 7a40 	vmov.f32	s15, s0
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <main+0xcf0>)
 80026d8:	edc3 7a00 	vstr	s15, [r3]
		  	  while(arr1_phase_Output_8_f32 > M_PI ) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 - M_PI; }
 80026dc:	e012      	b.n	8002704 <main+0xbf4>
 80026de:	4b48      	ldr	r3, [pc, #288]	; (8002800 <main+0xcf0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd ff58 	bl	8000598 <__aeabi_f2d>
 80026e8:	a335      	add	r3, pc, #212	; (adr r3, 80027c0 <main+0xcb0>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd fdf3 	bl	80002d8 <__aeabi_dsub>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fa9d 	bl	8000c38 <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <main+0xcf0>)
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <main+0xcf0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff45 	bl	8000598 <__aeabi_f2d>
 800270e:	a32c      	add	r3, pc, #176	; (adr r3, 80027c0 <main+0xcb0>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fe fa28 	bl	8000b68 <__aeabi_dcmpgt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1df      	bne.n	80026de <main+0xbce>
		      while(arr1_phase_Output_8_f32 < -M_PI) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 + M_PI; }
 800271e:	e012      	b.n	8002746 <main+0xc36>
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <main+0xcf0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff37 	bl	8000598 <__aeabi_f2d>
 800272a:	a325      	add	r3, pc, #148	; (adr r3, 80027c0 <main+0xcb0>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f7fd fdd4 	bl	80002dc <__adddf3>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa7c 	bl	8000c38 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
 8002742:	4a2f      	ldr	r2, [pc, #188]	; (8002800 <main+0xcf0>)
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <main+0xcf0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff24 	bl	8000598 <__aeabi_f2d>
 8002750:	a31d      	add	r3, pc, #116	; (adr r3, 80027c8 <main+0xcb8>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	f7fe f9e9 	bl	8000b2c <__aeabi_dcmplt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1df      	bne.n	8002720 <main+0xc10>
		  arr2_phase_Output_8_f32 = atan2f(data_adc2[17], data_adc2[16]);
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <main+0xcdc>)
 8002762:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <main+0xcdc>)
 8002768:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800276c:	eef0 0a47 	vmov.f32	s1, s14
 8002770:	eeb0 0a67 	vmov.f32	s0, s15
 8002774:	f011 fb2e 	bl	8013dd4 <atan2f>
 8002778:	eef0 7a40 	vmov.f32	s15, s0
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <main+0xcf4>)
 800277e:	edc3 7a00 	vstr	s15, [r3]
			  while(arr2_phase_Output_8_f32 > 0 ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 - 2*M_PI; }
 8002782:	e012      	b.n	80027aa <main+0xc9a>
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <main+0xcf4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd ff05 	bl	8000598 <__aeabi_f2d>
 800278e:	a310      	add	r3, pc, #64	; (adr r3, 80027d0 <main+0xcc0>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fda0 	bl	80002d8 <__aeabi_dsub>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe fa4a 	bl	8000c38 <__aeabi_d2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <main+0xcf4>)
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <main+0xcf4>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	dce4      	bgt.n	8002784 <main+0xc74>
			  while(arr2_phase_Output_8_f32 < -2*M_PI ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 + 2*M_PI; }
 80027ba:	e038      	b.n	800282e <main+0xd1e>
 80027bc:	f3af 8000 	nop.w
 80027c0:	54442d18 	.word	0x54442d18
 80027c4:	400921fb 	.word	0x400921fb
 80027c8:	54442d18 	.word	0x54442d18
 80027cc:	c00921fb 	.word	0xc00921fb
 80027d0:	54442d18 	.word	0x54442d18
 80027d4:	401921fb 	.word	0x401921fb
 80027d8:	20000018 	.word	0x20000018
 80027dc:	2000f650 	.word	0x2000f650
 80027e0:	20000014 	.word	0x20000014
 80027e4:	2000262c 	.word	0x2000262c
 80027e8:	080153a0 	.word	0x080153a0
 80027ec:	2000462c 	.word	0x2000462c
 80027f0:	080153c0 	.word	0x080153c0
 80027f4:	2000f64c 	.word	0x2000f64c
 80027f8:	2000b630 	.word	0x2000b630
 80027fc:	2000d630 	.word	0x2000d630
 8002800:	2000f630 	.word	0x2000f630
 8002804:	2000f634 	.word	0x2000f634
 8002808:	4bb3      	ldr	r3, [pc, #716]	; (8002ad8 <main+0xfc8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fec3 	bl	8000598 <__aeabi_f2d>
 8002812:	a3ad      	add	r3, pc, #692	; (adr r3, 8002ac8 <main+0xfb8>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd fd60 	bl	80002dc <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe fa08 	bl	8000c38 <__aeabi_d2f>
 8002828:	4603      	mov	r3, r0
 800282a:	4aab      	ldr	r2, [pc, #684]	; (8002ad8 <main+0xfc8>)
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4baa      	ldr	r3, [pc, #680]	; (8002ad8 <main+0xfc8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd feb0 	bl	8000598 <__aeabi_f2d>
 8002838:	a3a5      	add	r3, pc, #660	; (adr r3, 8002ad0 <main+0xfc0>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fe f975 	bl	8000b2c <__aeabi_dcmplt>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1df      	bne.n	8002808 <main+0xcf8>

			  shift_phase_I8_U8_f32 = arr1_phase_Output_8_f32 - arr2_phase_Output_8_f32;
 8002848:	4ba4      	ldr	r3, [pc, #656]	; (8002adc <main+0xfcc>)
 800284a:	ed93 7a00 	vldr	s14, [r3]
 800284e:	4ba2      	ldr	r3, [pc, #648]	; (8002ad8 <main+0xfc8>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002858:	4ba1      	ldr	r3, [pc, #644]	; (8002ae0 <main+0xfd0>)
 800285a:	edc3 7a00 	vstr	s15, [r3]
//			  	  while(shift_phase_I8_U8_f32 > M_PI/2 ) {shift_phase_I8_U8_f32 = shift_phase_I8_U8_f32 - M_PI/2; }
//			  	  while(shift_phase_I8_U8_f32 < -M_PI/2 ) {shift_phase_I8_U8_f32 = shift_phase_I8_U8_f32 + M_PI/2; }
		  cos_phase_8_f32 = arm_cos_f32(shift_phase_I8_U8_f32);
 800285e:	4ba0      	ldr	r3, [pc, #640]	; (8002ae0 <main+0xfd0>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	eeb0 0a67 	vmov.f32	s0, s15
 8002868:	f00c f916 	bl	800ea98 <arm_cos_f32>
 800286c:	eef0 7a40 	vmov.f32	s15, s0
 8002870:	4b9c      	ldr	r3, [pc, #624]	; (8002ae4 <main+0xfd4>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
		  atan_phase_8_f32 = atanf(tanf(shift_phase_I8_U8_f32));
 8002876:	4b9a      	ldr	r3, [pc, #616]	; (8002ae0 <main+0xfd0>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	eeb0 0a67 	vmov.f32	s0, s15
 8002880:	f011 fa7e 	bl	8013d80 <tanf>
 8002884:	eef0 7a40 	vmov.f32	s15, s0
 8002888:	eeb0 0a67 	vmov.f32	s0, s15
 800288c:	f011 f924 	bl	8013ad8 <atanf>
 8002890:	eef0 7a40 	vmov.f32	s15, s0
 8002894:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <main+0xfd8>)
 8002896:	edc3 7a00 	vstr	s15, [r3]
		  calc_power_Output_8_f32	= arr2_Output_f32[8] * arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 800289a:	4b94      	ldr	r3, [pc, #592]	; (8002aec <main+0xfdc>)
 800289c:	ed93 7a08 	vldr	s14, [r3, #32]
 80028a0:	4b93      	ldr	r3, [pc, #588]	; (8002af0 <main+0xfe0>)
 80028a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028aa:	4b8e      	ldr	r3, [pc, #568]	; (8002ae4 <main+0xfd4>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b4:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <main+0xfe4>)
 80028b6:	edc3 7a00 	vstr	s15, [r3]
		  calc_R_Output_8_f32 		= arr2_Output_f32[8] / arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 80028ba:	4b8c      	ldr	r3, [pc, #560]	; (8002aec <main+0xfdc>)
 80028bc:	edd3 6a08 	vldr	s13, [r3, #32]
 80028c0:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <main+0xfe0>)
 80028c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80028c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ca:	4b86      	ldr	r3, [pc, #536]	; (8002ae4 <main+0xfd4>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <main+0xfe8>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
		// F_bin = F *64/256 = F / 4 ;
		// F_bin = F *64/512 = F / 8 ;
		// F_bin = F *64/1024 = F / 16 ;
		// Koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
		// freq_new = F_bin * N + Koeff * F_bin;   // для этого случая N==4
		  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <main+0xfec>)
 80028dc:	789a      	ldrb	r2, [r3, #2]
 80028de:	4b87      	ldr	r3, [pc, #540]	; (8002afc <main+0xfec>)
 80028e0:	795b      	ldrb	r3, [r3, #5]
 80028e2:	4013      	ands	r3, r2
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b84      	ldr	r3, [pc, #528]	; (8002afc <main+0xfec>)
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4013      	ands	r3, r2
 80028f4:	4a81      	ldr	r2, [pc, #516]	; (8002afc <main+0xfec>)
 80028f6:	7992      	ldrb	r2, [r2, #6]
 80028f8:	f082 0201 	eor.w	r2, r2, #1
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80dc 	beq.w	8002abe <main+0xfae>
		  {
			if (fft_N ==256)
 8002906:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <main+0xff0>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290e:	d132      	bne.n	8002976 <main+0xe66>
			{
				koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
 8002910:	4b77      	ldr	r3, [pc, #476]	; (8002af0 <main+0xfe0>)
 8002912:	ed93 7a05 	vldr	s14, [r3, #20]
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <main+0xfe0>)
 8002918:	edd3 7a03 	vldr	s15, [r3, #12]
 800291c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002920:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <main+0xfe0>)
 8002922:	edd3 7a04 	vldr	s15, [r3, #16]
 8002926:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800292a:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <main+0xfe0>)
 800292c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002934:	4b6e      	ldr	r3, [pc, #440]	; (8002af0 <main+0xfe0>)
 8002936:	edd3 7a03 	vldr	s15, [r3, #12]
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002946:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <main+0xff4>)
 8002948:	edc3 7a00 	vstr	s15, [r3]
				freq_new = freq_tim1_float + koeff * freq_tim1_float/4;   // для этого случая N==4
 800294c:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <main+0xff4>)
 800294e:	ed93 7a00 	vldr	s14, [r3]
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <main+0xff8>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002960:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <main+0xff8>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <main+0xffc>)
 8002970:	edc3 7a00 	vstr	s15, [r3]
 8002974:	e0a3      	b.n	8002abe <main+0xfae>
			}
			else
			{
				if (fft_N ==512)
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <main+0xff0>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297e:	d167      	bne.n	8002a50 <main+0xf40>
				{
					ln_x3 = 100000.f * logf((float)arr1_Output_f32[7]);
 8002980:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <main+0xfe0>)
 8002982:	edd3 7a07 	vldr	s15, [r3, #28]
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	f011 fa25 	bl	8013dd8 <logf>
 800298e:	eef0 7a40 	vmov.f32	s15, s0
 8002992:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002b10 <main+0x1000>
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299a:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <main+0x1004>)
 800299c:	edc3 7a00 	vstr	s15, [r3]
					ln_x4 = 100000.f * logf((float)arr1_Output_f32[8]);
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <main+0xfe0>)
 80029a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80029a6:	eeb0 0a67 	vmov.f32	s0, s15
 80029aa:	f011 fa15 	bl	8013dd8 <logf>
 80029ae:	eef0 7a40 	vmov.f32	s15, s0
 80029b2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002b10 <main+0x1000>
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <main+0x1008>)
 80029bc:	edc3 7a00 	vstr	s15, [r3]
					ln_x5 = 100000.f * logf((float)arr1_Output_f32[9]);
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <main+0xfe0>)
 80029c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029c6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ca:	f011 fa05 	bl	8013dd8 <logf>
 80029ce:	eef0 7a40 	vmov.f32	s15, s0
 80029d2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002b10 <main+0x1000>
 80029d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029da:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <main+0x100c>)
 80029dc:	edc3 7a00 	vstr	s15, [r3]
					// koeff = (ln_x5 -ln_x3) / (2*(2*ln_x4 -ln_x5 -ln_x3));
					koeff = (8.f + (ln_x5 -ln_x3) / 2.f / (2.f * ln_x4 -ln_x5 -ln_x3)) * 10000.f;
 80029e0:	4b4e      	ldr	r3, [pc, #312]	; (8002b1c <main+0x100c>)
 80029e2:	ed93 7a00 	vldr	s14, [r3]
 80029e6:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <main+0x1004>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029f8:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <main+0x1008>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <main+0x100c>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a0c:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <main+0x1004>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a1a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a22:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002b20 <main+0x1010>
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <main+0xff4>)
 8002a2c:	edc3 7a00 	vstr	s15, [r3]
					freq_new = koeff * ((float)freq_tim1_float)/80000.f; // для этого случая N==8
 8002a30:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <main+0xff4>)
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <main+0xff8>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a40:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b24 <main+0x1014>
 8002a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <main+0xffc>)
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
 8002a4e:	e036      	b.n	8002abe <main+0xfae>
				}
				else
				{
					if (fft_N ==1024)
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <main+0xff0>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a58:	d131      	bne.n	8002abe <main+0xfae>
					{
						koeff = (arr1_Output_f32[17] -arr1_Output_f32[15]) / (2*(2*arr1_Output_f32[16] -arr1_Output_f32[17] -arr1_Output_f32[15]));
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <main+0xfe0>)
 8002a5c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <main+0xfe0>)
 8002a62:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a66:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <main+0xfe0>)
 8002a6c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <main+0xfe0>)
 8002a76:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <main+0xfe0>)
 8002a80:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <main+0xff4>)
 8002a92:	edc3 7a00 	vstr	s15, [r3]
						freq_new = freq_tim1_float + koeff * freq_tim1_float/16;   // для этого случая N==16
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <main+0xff4>)
 8002a98:	ed93 7a00 	vldr	s14, [r3]
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <main+0xff8>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002aaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <main+0xff8>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <main+0xffc>)
 8002aba:	edc3 7a00 	vstr	s15, [r3]
			//memset(data_adc2, 0, 32764); // sizeof(float32_t)*8196);



		  	// size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002abe:	2300      	movs	r3, #0
 8002ac0:	82fb      	strh	r3, [r7, #22]
 8002ac2:	e042      	b.n	8002b4a <main+0x103a>
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	54442d18 	.word	0x54442d18
 8002acc:	401921fb 	.word	0x401921fb
 8002ad0:	54442d18 	.word	0x54442d18
 8002ad4:	c01921fb 	.word	0xc01921fb
 8002ad8:	2000f634 	.word	0x2000f634
 8002adc:	2000f630 	.word	0x2000f630
 8002ae0:	2000f63c 	.word	0x2000f63c
 8002ae4:	2000f640 	.word	0x2000f640
 8002ae8:	2000f644 	.word	0x2000f644
 8002aec:	2000d630 	.word	0x2000d630
 8002af0:	2000b630 	.word	0x2000b630
 8002af4:	2000f638 	.word	0x2000f638
 8002af8:	2000f648 	.word	0x2000f648
 8002afc:	20011ec8 	.word	0x20011ec8
 8002b00:	20000018 	.word	0x20000018
 8002b04:	2000f65c 	.word	0x2000f65c
 8002b08:	2000f658 	.word	0x2000f658
 8002b0c:	2000f66c 	.word	0x2000f66c
 8002b10:	47c35000 	.word	0x47c35000
 8002b14:	2000f660 	.word	0x2000f660
 8002b18:	2000f664 	.word	0x2000f664
 8002b1c:	2000f668 	.word	0x2000f668
 8002b20:	461c4000 	.word	0x461c4000
 8002b24:	479c4000 	.word	0x479c4000
				{
					data_adc1[ic] =0;
 8002b28:	8afb      	ldrh	r3, [r7, #22]
 8002b2a:	4a72      	ldr	r2, [pc, #456]	; (8002cf4 <main+0x11e4>)
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
					data_adc2[ic] =0;
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	4a6f      	ldr	r2, [pc, #444]	; (8002cf8 <main+0x11e8>)
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002b44:	8afb      	ldrh	r3, [r7, #22]
 8002b46:	3301      	adds	r3, #1
 8002b48:	82fb      	strh	r3, [r7, #22]
 8002b4a:	8afa      	ldrh	r2, [r7, #22]
 8002b4c:	4b6b      	ldr	r3, [pc, #428]	; (8002cfc <main+0x11ec>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	dbe9      	blt.n	8002b28 <main+0x1018>

	  // здесь будет разборка условий перехода по частоте
	  // freq_new - вычислена выше для типа автоподдержания частоты
	  // если получаем бит сканирования по частоте,  cmd_set.cmd_flags.1
	  // ============================================  сканирование по частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==true)) // скольжение по частоте
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <main+0x11f0>)
 8002b56:	789a      	ldrb	r2, [r3, #2]
 8002b58:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <main+0x11f0>)
 8002b5a:	78db      	ldrb	r3, [r3, #3]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d058      	beq.n	8002c16 <main+0x1106>
	  {
		  if (htim17.Instance->CNT > (cmd_set.time_step *10) )
 8002b64:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <main+0x11f4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <main+0x11f0>)
 8002b6c:	89db      	ldrh	r3, [r3, #14]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d94c      	bls.n	8002c16 <main+0x1106>
		  {
			  htim17.Instance->CNT =0;
 8002b7c:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <main+0x11f4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
			  old_freq_new = freq_new;
 8002b84:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <main+0x11f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a60      	ldr	r2, [pc, #384]	; (8002d0c <main+0x11fc>)
 8002b8a:	6013      	str	r3, [r2, #0]
			  freq_new = freq_new + flag_napravlenia_scan * cmd_set.step;
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <main+0x1200>)
 8002b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <main+0x11f0>)
 8002b96:	899b      	ldrh	r3, [r3, #12]
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <main+0x11f8>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bae:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <main+0x11f8>)
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
			  if (freq_new > (cmd_set.freq_start + (cmd_set.step *(cmd_set.N_step-1))))
 8002bb4:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <main+0x11f0>)
 8002bb6:	891b      	ldrh	r3, [r3, #8]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <main+0x11f0>)
 8002bbc:	899b      	ldrh	r3, [r3, #12]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	; (8002d00 <main+0x11f0>)
 8002bc2:	8a1b      	ldrh	r3, [r3, #16]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <main+0x11f8>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	d503      	bpl.n	8002bec <main+0x10dc>
			  {
				  flag_napravlenia_scan = -1; // следующий степ будет в отрицательную сторону
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <main+0x1200>)
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	801a      	strh	r2, [r3, #0]
			  }
			  if (freq_new < (cmd_set.freq_start + cmd_set.step))
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <main+0x11f0>)
 8002bee:	891b      	ldrh	r3, [r3, #8]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <main+0x11f0>)
 8002bf4:	899b      	ldrh	r3, [r3, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <main+0x11f8>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	dd02      	ble.n	8002c16 <main+0x1106>
			  {
				  flag_napravlenia_scan = 1; // следующий степ будет в положительную сторону
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <main+0x1200>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	  // ============================================  стоять на одной частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_autoTuning_freq ==false)) // стоять на одной частоте
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <main+0x11f0>)
 8002c18:	789b      	ldrb	r3, [r3, #2]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <main+0x11f0>)
 8002c1e:	78db      	ldrb	r3, [r3, #3]
 8002c20:	f083 0301 	eor.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4013      	ands	r3, r2
 8002c28:	4a35      	ldr	r2, [pc, #212]	; (8002d00 <main+0x11f0>)
 8002c2a:	7952      	ldrb	r2, [r2, #5]
 8002c2c:	f082 0201 	eor.w	r2, r2, #1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <main+0x1142>
	  {
		  old_freq_new = freq_new;		//  при  cmd_set.flag_ON_scan_freq      новая частота будет формироваться при сканировании
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <main+0x11f8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <main+0x11fc>)
 8002c3e:	6013      	str	r3, [r2, #0]
		  freq_new = cmd_set.freq_start; // при  cmd_set.flag_ON_autoTuning_freq  новую частоту будем вычислять после FFT преобразования
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <main+0x11f0>)
 8002c42:	891b      	ldrh	r3, [r3, #8]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <main+0x11f8>)
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (cmd_set.flag_ON_generation ==false)
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <main+0x11f0>)
 8002c54:	789b      	ldrb	r3, [r3, #2]
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <main+0x1158>
		  { index_data_real_zamer = 1024; } // чтобы при сканировании по времени, передача начиналась сразу, не надо было ждать
 8002c60:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <main+0x1204>)
 8002c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c66:	801a      	strh	r2, [r3, #0]

	  // ============================================  автоподстройка частоты  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <main+0x11f0>)
 8002c6a:	789a      	ldrb	r2, [r3, #2]
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <main+0x11f0>)
 8002c6e:	795b      	ldrb	r3, [r3, #5]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <main+0x11f0>)
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4013      	ands	r3, r2
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <main+0x11f0>)
 8002c84:	7992      	ldrb	r2, [r2, #6]
 8002c86:	f082 0201 	eor.w	r2, r2, #1
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80b5 	beq.w	8002dfe <main+0x12ee>
	  {
			if (old_freq_new >0)// надо проверить, чтобы не выскакивало за пределы
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <main+0x11fc>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	dd42      	ble.n	8002d2a <main+0x121a>
				{
					if (freq_new >14500)
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <main+0x11f8>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002d18 <main+0x1208>
 8002cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	dd35      	ble.n	8002d24 <main+0x1214>
						{
							if (freq_new <43000)
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <main+0x11f8>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d1c <main+0x120c>
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	d50f      	bpl.n	8002cec <main+0x11dc>
								{ freq_new = (freq_new + old_freq_new) /2;  }
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <main+0x11f8>)
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <main+0x11fc>)
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <main+0x11f8>)
 8002ce6:	edc3 7a00 	vstr	s15, [r3]
 8002cea:	e01e      	b.n	8002d2a <main+0x121a>
							else
								{ freq_new = 25000; }
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <main+0x11f8>)
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <main+0x1210>)
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e01a      	b.n	8002d2a <main+0x121a>
 8002cf4:	2000262c 	.word	0x2000262c
 8002cf8:	2000462c 	.word	0x2000462c
 8002cfc:	2000662c 	.word	0x2000662c
 8002d00:	20011ec8 	.word	0x20011ec8
 8002d04:	2001210c 	.word	0x2001210c
 8002d08:	2000f66c 	.word	0x2000f66c
 8002d0c:	2000f670 	.word	0x2000f670
 8002d10:	2000001a 	.word	0x2000001a
 8002d14:	20011ec4 	.word	0x20011ec4
 8002d18:	46629000 	.word	0x46629000
 8002d1c:	4727f800 	.word	0x4727f800
 8002d20:	46c35000 	.word	0x46c35000
						}
					else
					{ freq_new = 25000; }
 8002d24:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <main+0x1340>)
 8002d26:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <main+0x1344>)
 8002d28:	601a      	str	r2, [r3, #0]
				}
			old_freq_new = freq_new;
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <main+0x1340>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <main+0x1348>)
 8002d30:	6013      	str	r3, [r2, #0]
			err_f[9] = err_f[8];
 8002d32:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <main+0x134c>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a49      	ldr	r2, [pc, #292]	; (8002e5c <main+0x134c>)
 8002d38:	6253      	str	r3, [r2, #36]	; 0x24
			err_f[8] = err_f[7];
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <main+0x134c>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <main+0x134c>)
 8002d40:	6213      	str	r3, [r2, #32]
			err_f[7] = err_f[6];
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <main+0x134c>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4a45      	ldr	r2, [pc, #276]	; (8002e5c <main+0x134c>)
 8002d48:	61d3      	str	r3, [r2, #28]
			err_f[6] = err_f[5];
 8002d4a:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <main+0x134c>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4a43      	ldr	r2, [pc, #268]	; (8002e5c <main+0x134c>)
 8002d50:	6193      	str	r3, [r2, #24]
			err_f[5] = err_f[4];
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <main+0x134c>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	4a41      	ldr	r2, [pc, #260]	; (8002e5c <main+0x134c>)
 8002d58:	6153      	str	r3, [r2, #20]
			err_f[4] = err_f[3];
 8002d5a:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <main+0x134c>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <main+0x134c>)
 8002d60:	6113      	str	r3, [r2, #16]
			err_f[3] = err_f[2];
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <main+0x134c>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <main+0x134c>)
 8002d68:	60d3      	str	r3, [r2, #12]
			err_f[2] = err_f[1];
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <main+0x134c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <main+0x134c>)
 8002d70:	6093      	str	r3, [r2, #8]
			err_f[1] = err_f[0];
 8002d72:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <main+0x134c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <main+0x134c>)
 8002d78:	6053      	str	r3, [r2, #4]
			err_f[0] = freq_new;
 8002d7a:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <main+0x1340>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <main+0x134c>)
 8002d80:	6013      	str	r3, [r2, #0]
			delta_F = fabsf (freq_new - (err_f[0] +err_f[1] +err_f[2] +err_f[3] +err_f[4] +err_f[5] +err_f[6] +err_f[7] +err_f[8] +err_f[9])/10);
 8002d82:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <main+0x1340>)
 8002d84:	ed93 7a00 	vldr	s14, [r3]
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <main+0x134c>)
 8002d8a:	edd3 6a00 	vldr	s13, [r3]
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <main+0x134c>)
 8002d90:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d98:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <main+0x134c>)
 8002d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002da2:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <main+0x134c>)
 8002da4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <main+0x134c>)
 8002dae:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <main+0x134c>)
 8002db8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <main+0x134c>)
 8002dc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <main+0x134c>)
 8002dcc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <main+0x134c>)
 8002dd6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <main+0x134c>)
 8002de0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002de4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002de8:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002dec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df4:	eef0 7ae7 	vabs.f32	s15, s15
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <main+0x1350>)
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // ========================== а вот ОНО, - новая частота  ============================
	  hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <main+0x1340>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e08:	2300      	movs	r3, #0
 8002e0a:	ee17 5a90 	vmov	r5, s15
 8002e0e:	461e      	mov	r6, r3
 8002e10:	462a      	mov	r2, r5
 8002e12:	4633      	mov	r3, r6
 8002e14:	a10c      	add	r1, pc, #48	; (adr r1, 8002e48 <main+0x1338>)
 8002e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e1a:	f7fd ff5d 	bl	8000cd8 <__aeabi_ldivmod>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <main+0x1354>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	2200      	movs	r2, #0
 8002e30:	469a      	mov	sl, r3
 8002e32:	4693      	mov	fp, r2
 8002e34:	4652      	mov	r2, sl
 8002e36:	465b      	mov	r3, fp
 8002e38:	f7fd ff4e 	bl	8000cd8 <__aeabi_ldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <main+0x1358>)
 8002e42:	601a      	str	r2, [r3, #0]
	  if (cmd_set.flag_ON_TxData_cicle == true)// если надо, по флагу, вот тут будет включаться циклическая долбежка
 8002e44:	f7ff b808 	b.w	8001e58 <main+0x348>
 8002e48:	443fd000 	.word	0x443fd000
 8002e4c:	00000001 	.word	0x00000001
 8002e50:	2000f66c 	.word	0x2000f66c
 8002e54:	46c35000 	.word	0x46c35000
 8002e58:	2000f670 	.word	0x2000f670
 8002e5c:	2000f684 	.word	0x2000f684
 8002e60:	2000f6ac 	.word	0x2000f6ac
 8002e64:	20011f44 	.word	0x20011f44
 8002e68:	2000001c 	.word	0x2000001c

08002e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b094      	sub	sp, #80	; 0x50
 8002e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	2238      	movs	r2, #56	; 0x38
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f00c f97e 	bl	800f17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f006 f838 	bl	8008f04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e9e:	2340      	movs	r3, #64	; 0x40
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002eae:	2355      	movs	r3, #85	; 0x55
 8002eb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ebe:	f107 0318 	add.w	r3, r7, #24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 f8d2 	bl	800906c <HAL_RCC_OscConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ece:	f000 fcf1 	bl	80038b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f006 fbd6 	bl	800969c <HAL_RCC_ClockConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002ef6:	f000 fcdd 	bl	80038b4 <Error_Handler>
  }
}
 8002efa:	bf00      	nop
 8002efc:	3750      	adds	r7, #80	; 0x50
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <eMBRegInputCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   						В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	803b      	strh	r3, [r7, #0]
	// эта фун осталась как заглушка, значения в буфер  pucRegBuffer  закладываются в конце обработки замера
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
    USHORT number_data_array = usNRegs; // number_data_array - это будет номер элемента массива замеров, это будет собираться пакет из 10 массивов, из каждого этот элемент
 8002f18:	883b      	ldrh	r3, [r7, #0]
 8002f1a:	81bb      	strh	r3, [r7, #12]
    if (number_data_array > 1024) { number_data_array =1023; } // размер всех этих массивов = 1024
 8002f1c:	89bb      	ldrh	r3, [r7, #12]
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d902      	bls.n	8002f2a <eMBRegInputCB+0x26>
 8002f24:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002f28:	81bb      	strh	r3, [r7, #12]

	// DWT_CYCCNT =0;// обнуляем значение
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код
    		if (cmd_set.step ==0) {cmd_set.step =1;}
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <eMBRegInputCB+0xa0>)
 8002f2c:	899b      	ldrh	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <eMBRegInputCB+0x34>
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <eMBRegInputCB+0xa0>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	819a      	strh	r2, [r3, #12]
			 index_temp = (freq_tim1 - cmd_set.freq_start) / cmd_set.step;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <eMBRegInputCB+0xa4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <eMBRegInputCB+0xa0>)
 8002f3e:	8912      	ldrh	r2, [r2, #8]
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <eMBRegInputCB+0xa0>)
 8002f44:	8992      	ldrh	r2, [r2, #12]
 8002f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <eMBRegInputCB+0xa8>)
 8002f4e:	801a      	strh	r2, [r3, #0]
			 if (index_temp > 1000) { index_temp =1000; }
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <eMBRegInputCB+0xa8>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f58:	d903      	bls.n	8002f62 <eMBRegInputCB+0x5e>
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <eMBRegInputCB+0xa8>)
 8002f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f60:	801a      	strh	r2, [r3, #0]
			 if (index_temp < 1) { index_temp =0; }
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <eMBRegInputCB+0xa8>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <eMBRegInputCB+0x6c>
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <eMBRegInputCB+0xa8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	801a      	strh	r2, [r3, #0]

			 number_data_array=index_temp;
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <eMBRegInputCB+0xa8>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	81bb      	strh	r3, [r7, #12]


			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float = (float32_t) (freq_tim1 +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <eMBRegInputCB+0xa4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	332a      	adds	r3, #42	; 0x2a
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <eMBRegInputCB+0xac>)
 8002f86:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002f8a:	4909      	ldr	r1, [pc, #36]	; (8002fb0 <eMBRegInputCB+0xac>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	780a      	ldrb	r2, [r1, #0]
 8002f94:	701a      	strb	r2, [r3, #0]

    return eStatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	20011ec8 	.word	0x20011ec8
 8002fa8:	2000f654 	.word	0x2000f654
 8002fac:	20011ec2 	.word	0x20011ec2
 8002fb0:	20011f34 	.word	0x20011f34

08002fb4 <eMBRegHoldingCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress,  USHORT usNRegs, eMBRegisterMode eMode )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	74fb      	strb	r3, [r7, #19]
    int             iRegIndex;

    // проверка пределов, и вгон в разрешенный диапазон,
    // будет отвечать ошибочными данными, но сам дебил кто дает ошибочный запрос
    if (usNRegs ==0) 	{ usNRegs =1; }
 8002fd2:	893b      	ldrh	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <eMBRegHoldingCB+0x28>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	813b      	strh	r3, [r7, #8]
    if (usNRegs > REG_HOLDING_NREGS)	{ usNRegs =REG_HOLDING_NREGS; }
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d901      	bls.n	8002fe6 <eMBRegHoldingCB+0x32>
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	813b      	strh	r3, [r7, #8]
    if (usAddress < REG_HOLDING_START)	{ usAddress = usAddress; }
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	2b00      	cmp	r3, #0
    if ((usAddress + usNRegs) > (REG_HOLDING_START + REG_HOLDING_NREGS)) { usAddress = REG_HOLDING_START - REG_HOLDING_NREGS; }
 8002fea:	897a      	ldrh	r2, [r7, #10]
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	4413      	add	r3, r2
 8002ff0:	2b11      	cmp	r3, #17
 8002ff2:	dd02      	ble.n	8002ffa <eMBRegHoldingCB+0x46>
 8002ff4:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8002ff8:	817b      	strh	r3, [r7, #10]

        iRegIndex = ( int )( usAddress - num_reg_CMD_Start );
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	4a53      	ldr	r2, [pc, #332]	; (800314c <eMBRegHoldingCB+0x198>)
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	617b      	str	r3, [r7, #20]

            /* Pass current register values to the protocol stack.
             * Передайте текущие значения регистра в стек протоколов.*/
        if (eMode == MB_REG_READ)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11d      	bne.n	8003046 <eMBRegHoldingCB+0x92>
        {
             while( usNRegs > 0 )
 800300a:	e019      	b.n	8003040 <eMBRegHoldingCB+0x8c>
            {
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] >> 8 );
 800300c:	4a50      	ldr	r2, [pc, #320]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	b299      	uxth	r1, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	60fa      	str	r2, [r7, #12]
 800301e:	b2ca      	uxtb	r2, r1
 8003020:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] & 0xFF );
 8003022:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	60fa      	str	r2, [r7, #12]
 8003030:	b2ca      	uxtb	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3301      	adds	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
                usNRegs--;
 800303a:	893b      	ldrh	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	813b      	strh	r3, [r7, #8]
             while( usNRegs > 0 )
 8003040:	893b      	ldrh	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e2      	bne.n	800300c <eMBRegHoldingCB+0x58>
            }
        } // if (eMode == MB_REG_READ)

            /* Update current register values with new values from the  protocol stack.
             * Обновите текущие значения регистра новыми значениями из стека протоколов. */
        if (eMode == MB_REG_WRITE)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d178      	bne.n	800313e <eMBRegHoldingCB+0x18a>
        {
            while( usNRegs > 0 )
 800304c:	e01f      	b.n	800308e <eMBRegHoldingCB+0xda>
            {
                Reg_CMD_Buf[iRegIndex] = *pucRegBuffer++ << 8;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	b299      	uxth	r1, r3
 800305c:	4a3c      	ldr	r2, [pc, #240]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Reg_CMD_Buf[iRegIndex] |= *pucRegBuffer++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60fa      	str	r2, [r7, #12]
 800306a:	7819      	ldrb	r1, [r3, #0]
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003074:	b28b      	uxth	r3, r1
 8003076:	4313      	orrs	r3, r2
 8003078:	b299      	uxth	r1, r3
 800307a:	4a35      	ldr	r2, [pc, #212]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
                usNRegs--;
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	3b01      	subs	r3, #1
 800308c:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 800308e:	893b      	ldrh	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1dc      	bne.n	800304e <eMBRegHoldingCB+0x9a>
            }
            cmd_set.cmd_flags	= Reg_CMD_Buf[0];	//	Reg_CMD_Buf[0] - регистр флагов-команд, приходящих для исполнения
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003096:	881a      	ldrh	r2, [r3, #0]
 8003098:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 800309a:	801a      	strh	r2, [r3, #0]
            cmd_set.flag_ON_generation = 	Reg_CMD_Buf[0] & 0b0000000000000001;	// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 80030b0:	709a      	strb	r2, [r3, #2]
            cmd_set.flag_ON_scan_freq = 	Reg_CMD_Buf[0] & 0b0000000000000010;	// Reg_CMD_Buf[0].1 - флаг-команда Вкл. Скольжение по диапазону, в соответствии с задаными регистрами
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <eMBRegHoldingCB+0x19c>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 80030c6:	70da      	strb	r2, [r3, #3]
            cmd_set.flag_ON_TxData_cicle = 	Reg_CMD_Buf[0] & 0b0000000000000100;	// Reg_CMD_Buf[0].2 - флаг-команда Вкл. долбежку передачи данных по кругу, прием при этом прекратиться, стоповать можно будет только синей кнопкой
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <eMBRegHoldingCB+0x19c>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 80030dc:	711a      	strb	r2, [r3, #4]
            cmd_set.flag_ON_autoTuning_freq=Reg_CMD_Buf[0] & 0b0000000000001000;	// Reg_CMD_Buf[0].3 - флаг-команда при включеной генерации автоподстройка частоты будет работать, если включен флаг скольжения, этот флаг игнорится
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <eMBRegHoldingCB+0x19c>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	4b18      	ldr	r3, [pc, #96]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 80030f2:	715a      	strb	r2, [r3, #5]
            cmd_set.flag_ON_scan_time = 	Reg_CMD_Buf[0] & 0b0000000000010000;	// Reg_CMD_Buf[0].4 - флаг-команда на вкл генерации на одной частоте, и циклическую передачу сигналов КЛЮЧ�?, ТОК и НАПРЯЖЕН�?Е в реале, как есть из замера
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <eMBRegHoldingCB+0x19c>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 8003108:	719a      	strb	r2, [r3, #6]

            cmd_set.proc_pwr	= Reg_CMD_Buf[1];	//	Reg_CMD_Buf[1] - регистр мощности,  2-98% заполнения
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800310c:	885a      	ldrh	r2, [r3, #2]
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 8003110:	815a      	strh	r2, [r3, #10]
   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
            cmd_set.freq_start	= Reg_CMD_Buf[2] -42;	// Reg_CMD_Buf[2] - регистр стартовой частоты, 14500-43000
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003114:	889b      	ldrh	r3, [r3, #4]
 8003116:	3b2a      	subs	r3, #42	; 0x2a
 8003118:	b29a      	uxth	r2, r3
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 800311c:	811a      	strh	r2, [r3, #8]
            cmd_set.step 		= Reg_CMD_Buf[3];	//	Reg_CMD_Buf[3] - регистр step(1-25гц) перемещения частоты, при сканировании диапазона, при сканировании старт будет Reg_CMD_Buf[2], максимум = (Reg_CMD_Buf[2] + step*_N-количество_)
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003120:	88da      	ldrh	r2, [r3, #6]
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 8003124:	819a      	strh	r2, [r3, #12]
            cmd_set.time_step	= Reg_CMD_Buf[4];	//	Reg_CMD_Buf[4] - регистр время милисекунд, между степами (10-1000мс)
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003128:	891a      	ldrh	r2, [r3, #8]
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 800312c:	81da      	strh	r2, [r3, #14]
            cmd_set.N_step		= Reg_CMD_Buf[5];	//	Reg_CMD_Buf[5] - регистр N-количество степов при сканировании 4-1000
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003130:	895a      	ldrh	r2, [r3, #10]
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <eMBRegHoldingCB+0x1a0>)
 8003134:	821a      	strh	r2, [r3, #16]
            Reg_CMD_Buf[6] = Reg_CMD_Buf[5];
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <eMBRegHoldingCB+0x19c>)
 8003138:	895a      	ldrh	r2, [r3, #10]
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <eMBRegHoldingCB+0x19c>)
 800313c:	819a      	strh	r2, [r3, #12]
        } // if (eMode == MB_REG_WRITE)
    return eStatus;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000000 	.word	0x20000000
 8003150:	200005ec 	.word	0x200005ec
 8003154:	20011ec8 	.word	0x20011ec8

08003158 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
	// для контроля окончания передачи пакета на МВ485, используем прерывание от ножки PA11--PA12--DE--MB485
	// никаких разборок с EXTI нету,  там всего одно прерывание включено,
	xMBRTUTransmitFSM();
 8003162:	f00a ff4d 	bl	800e000 <xMBRTUTransmitFSM>
	flag_exti_stop_TX_cicles++;
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_GPIO_EXTI_Callback+0x24>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_GPIO_EXTI_Callback+0x24>)
 8003170:	701a      	strb	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000619 	.word	0x20000619

08003180 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10d      	bne.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x2e>
    	{
    		counter_Tim6_MB++;
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800319c:	801a      	strh	r2, [r3, #0]
    		if(counter_Tim6_MB >=timeout_Tim6_50us)
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d301      	bcc.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x2e>
			  { xMBRTUTimerT35Expired();   }
 80031aa:	f00a ff4f 	bl	800e04c <xMBRTUTimerT35Expired>
    	}
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40001000 	.word	0x40001000
 80031bc:	2000060e 	.word	0x2000060e
 80031c0:	2000060c 	.word	0x2000060c

080031c4 <_write>:


int _write(int file, char *ptr, int len)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e009      	b.n	80031ea <_write+0x26>
		{ ITM_SendChar(*ptr++); }
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	60ba      	str	r2, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fc34 	bl	8001a4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3301      	adds	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	dbf1      	blt.n	80031d6 <_write+0x12>
	return len;
 80031f2:	687b      	ldr	r3, [r7, #4]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <Mem_to_Mem_Complete>:


static void Mem_to_Mem_Complete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	 // а сколько это мкс? в реале == 41 мкс 1024 WORD передача Mem_to_Mem;
	LL_ADC_REG_StartConversion(hadc1.Instance);  //  - это есть старт АЦП произвольно по желанию, если был остановлен
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <Mem_to_Mem_Complete+0x20>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fc46 	bl	8001a9a <LL_ADC_REG_StartConversion>
	flag_end_FFT =0;
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <Mem_to_Mem_Complete+0x24>)
 8003210:	2200      	movs	r2, #0
 8003212:	801a      	strh	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200002cc 	.word	0x200002cc
 8003220:	2000061a 	.word	0x2000061a

08003224 <HAL_ADC_ConvCpltCallback>:
//			 какой то код
// count_tic_finish = DWT_CYCCNT - count_tic_start;//смотрим сколько натикало  - ццикл отсоса массивов данных длится 16мкс
// count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	// LL_ADC_REG_StopConversion (hadc1.Instance);
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 800322c:	4905      	ldr	r1, [pc, #20]	; (8003244 <HAL_ADC_ConvCpltCallback+0x20>)
 800322e:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_ADC_ConvCpltCallback+0x24>)
 8003230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <HAL_ADC_ConvCpltCallback+0x28>)
 8003236:	f003 fc0f 	bl	8006a58 <HAL_DMA_Start_IT>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2000062c 	.word	0x2000062c
 8003248:	2000162c 	.word	0x2000162c
 800324c:	2000048c 	.word	0x2000048c

08003250 <HAL_UART_TxCpltCallback>:
//	// status_USBcdc_TX = CDC_Transmit_FS((uint8_t *) HEAP_arr_ADC_zamer, 64);
	return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	// включаем прием LPUART, ждём настроечных данных+
//	status_RX_LPuart = HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *) cmd_array_SPI, len_cmd_array_SPI);
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
	return;
 8003258:	bf00      	nop
}
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <fun_data_time_podgotovka>:

uint16_t fun_data_time_podgotovka( uint8_t * buffer_data_time, uint16_t index_data_time_zamer )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
	if (cmd_set.flag_ON_scan_time ==false)
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <fun_data_time_podgotovka+0x20>)
 8003272:	799b      	ldrb	r3, [r3, #6]
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <fun_data_time_podgotovka+0x24>
		{ return 0;  }
 800327e:	2300      	movs	r3, #0
 8003280:	e195      	b.n	80035ae <fun_data_time_podgotovka+0x34a>
 8003282:	bf00      	nop
 8003284:	20011ec8 	.word	0x20011ec8
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код

			 // index_data_real_zamer ++; // в ноль будет сбрасываться при окончании пересчета массивов данных, �? после передачи всего пакета
			 if (index_data_time_zamer > 1022)
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800328e:	4293      	cmp	r3, r2
 8003290:	d902      	bls.n	8003298 <fun_data_time_podgotovka+0x34>
			 	 {index_data_time_zamer =1022; }
 8003292:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8003296:	807b      	strh	r3, [r7, #2]

			 temp_float = (float) index_data_time_zamer;  // index-NUMBER index-NUMBER index-NUMBER index-NUMBER index-NUMBER   если будем долбить по кругу реальные замеры по времени
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a2:	4ba1      	ldr	r3, [pc, #644]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032a4:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80032a8:	499f      	ldr	r1, [pc, #636]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	780a      	ldrb	r2, [r1, #0]
 80032b2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	4a9b      	ldr	r2, [pc, #620]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032bc:	7852      	ldrb	r2, [r2, #1]
 80032be:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	4a98      	ldr	r2, [pc, #608]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032c8:	7892      	ldrb	r2, [r2, #2]
 80032ca:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	4a95      	ldr	r2, [pc, #596]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032d4:	78d2      	ldrb	r2, [r2, #3]
 80032d6:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  X0
			 temp_float = (float) adc1_Tx[index_data_time_zamer]; //
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4a94      	ldr	r2, [pc, #592]	; (800352c <fun_data_time_podgotovka+0x2c8>)
 80032dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e8:	4b8f      	ldr	r3, [pc, #572]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032ea:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80032ee:	498e      	ldr	r1, [pc, #568]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	780a      	ldrb	r2, [r1, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	4a89      	ldr	r2, [pc, #548]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003302:	7852      	ldrb	r2, [r2, #1]
 8003304:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	4a86      	ldr	r2, [pc, #536]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800330e:	7892      	ldrb	r2, [r2, #2]
 8003310:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	4a83      	ldr	r2, [pc, #524]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800331a:	78d2      	ldrb	r2, [r2, #3]
 800331c:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  X0+1
			 temp_float = (float) adc1_Tx[index_data_time_zamer +1];
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	3301      	adds	r3, #1
 8003322:	4a82      	ldr	r2, [pc, #520]	; (800352c <fun_data_time_podgotovka+0x2c8>)
 8003324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003330:	4b7d      	ldr	r3, [pc, #500]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003332:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003336:	497c      	ldr	r1, [pc, #496]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	780a      	ldrb	r2, [r1, #0]
 8003340:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	4a77      	ldr	r2, [pc, #476]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800334a:	7852      	ldrb	r2, [r2, #1]
 800334c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	4a74      	ldr	r2, [pc, #464]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003356:	7892      	ldrb	r2, [r2, #2]
 8003358:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	4a71      	ldr	r2, [pc, #452]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003362:	78d2      	ldrb	r2, [r2, #3]
 8003364:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   X0
			 temp_float = data_adc1_Tx[index_data_time_zamer];
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	4a71      	ldr	r2, [pc, #452]	; (8003530 <fun_data_time_podgotovka+0x2cc>)
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6d      	ldr	r2, [pc, #436]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003372:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003374:	496c      	ldr	r1, [pc, #432]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	780a      	ldrb	r2, [r1, #0]
 800337e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	4a68      	ldr	r2, [pc, #416]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003388:	7852      	ldrb	r2, [r2, #1]
 800338a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	4a65      	ldr	r2, [pc, #404]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003394:	7892      	ldrb	r2, [r2, #2]
 8003396:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	4a62      	ldr	r2, [pc, #392]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033a0:	78d2      	ldrb	r2, [r2, #3]
 80033a2:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   X0+1
			 temp_float = data_adc1_Tx[index_data_time_zamer +1];
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4a61      	ldr	r2, [pc, #388]	; (8003530 <fun_data_time_podgotovka+0x2cc>)
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5d      	ldr	r2, [pc, #372]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033b2:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033b4:	495c      	ldr	r1, [pc, #368]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	780a      	ldrb	r2, [r1, #0]
 80033be:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	4a58      	ldr	r2, [pc, #352]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033c8:	7852      	ldrb	r2, [r2, #1]
 80033ca:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	4a55      	ldr	r2, [pc, #340]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033d4:	7892      	ldrb	r2, [r2, #2]
 80033d6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	4a52      	ldr	r2, [pc, #328]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033e0:	78d2      	ldrb	r2, [r2, #3]
 80033e2:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    X0
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4a53      	ldr	r2, [pc, #332]	; (8003534 <fun_data_time_podgotovka+0x2d0>)
 80033e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033f6:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033fa:	494b      	ldr	r1, [pc, #300]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	780a      	ldrb	r2, [r1, #0]
 8003404:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	4a46      	ldr	r2, [pc, #280]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800340e:	7852      	ldrb	r2, [r2, #1]
 8003410:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	4a43      	ldr	r2, [pc, #268]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800341a:	7892      	ldrb	r2, [r2, #2]
 800341c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	4a40      	ldr	r2, [pc, #256]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003426:	78d2      	ldrb	r2, [r2, #3]
 8003428:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    X0+1
			 temp_float = (float) (adc2_Tx[index_data_time_zamer +1]);
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	3301      	adds	r3, #1
 800342e:	4a41      	ldr	r2, [pc, #260]	; (8003534 <fun_data_time_podgotovka+0x2d0>)
 8003430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800343e:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003442:	4939      	ldr	r1, [pc, #228]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	780a      	ldrb	r2, [r1, #0]
 800344c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	4a34      	ldr	r2, [pc, #208]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003456:	7852      	ldrb	r2, [r2, #1]
 8003458:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	4a31      	ldr	r2, [pc, #196]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003462:	7892      	ldrb	r2, [r2, #2]
 8003464:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 3);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800346e:	78d2      	ldrb	r2, [r2, #3]
 8003470:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    X0
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	4a30      	ldr	r2, [pc, #192]	; (8003538 <fun_data_time_podgotovka+0x2d4>)
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 800347e:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003480:	4929      	ldr	r1, [pc, #164]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	780a      	ldrb	r2, [r1, #0]
 800348a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	4a25      	ldr	r2, [pc, #148]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003494:	7852      	ldrb	r2, [r2, #1]
 8003496:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034a0:	7892      	ldrb	r2, [r2, #2]
 80034a2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034ac:	78d2      	ldrb	r2, [r2, #3]
 80034ae:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    X0+1
			 temp_float = data_adc2_Tx[index_data_time_zamer +1];
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	3301      	adds	r3, #1
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <fun_data_time_podgotovka+0x2d4>)
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034be:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034c0:	4919      	ldr	r1, [pc, #100]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	780a      	ldrb	r2, [r1, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034d4:	7852      	ldrb	r2, [r2, #1]
 80034d6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	4a12      	ldr	r2, [pc, #72]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034e0:	7892      	ldrb	r2, [r2, #2]
 80034e2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 80034ec:	78d2      	ldrb	r2, [r2, #3]
 80034ee:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	4a10      	ldr	r2, [pc, #64]	; (8003534 <fun_data_time_podgotovka+0x2d0>)
 80034f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f8:	ee07 3a90 	vmov	s15, r3
 80034fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <fun_data_time_podgotovka+0x2c4>)
 8003502:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	69;//*(((uint8_t *) &temp_float) + 0); //
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	2245      	movs	r2, #69	; 0x45
 800350e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	70;//*(((uint8_t *) &temp_float) + 1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	2246      	movs	r2, #70	; 0x46
 8003518:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  71;//*(((uint8_t *) &temp_float) + 2); //
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	2247      	movs	r2, #71	; 0x47
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e00a      	b.n	800353c <fun_data_time_podgotovka+0x2d8>
 8003526:	bf00      	nop
 8003528:	20011f34 	.word	0x20011f34
 800352c:	20006630 	.word	0x20006630
 8003530:	20007630 	.word	0x20007630
 8003534:	20006e30 	.word	0x20006e30
 8003538:	20008630 	.word	0x20008630
			 *buffer_data_time++ =	72;//*(((uint8_t *) &temp_float) + 3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	2248      	movs	r2, #72	; 0x48
 8003544:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <fun_data_time_podgotovka+0x358>)
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <fun_data_time_podgotovka+0x35c>)
 8003552:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ =  73;//*(((uint8_t *) &temp_float) + 0); //
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	2249      	movs	r2, #73	; 0x49
 800355c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	74;//*(((uint8_t *) &temp_float) + 1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	224a      	movs	r2, #74	; 0x4a
 8003566:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  75;//*(((uint8_t *) &temp_float) + 2); //
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	224b      	movs	r2, #75	; 0x4b
 8003570:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	76;//*(((uint8_t *) &temp_float) + 3);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	224c      	movs	r2, #76	; 0x4c
 800357a:	701a      	strb	r2, [r3, #0]

			 temp_float = calc_power_Output_8_f32; // (float32_t) data_Y[number_data_array];
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <fun_data_time_podgotovka+0x360>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <fun_data_time_podgotovka+0x35c>)
 8003582:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	77;//*(((uint8_t *) &temp_float) + 0); //
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	224d      	movs	r2, #77	; 0x4d
 800358c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	78;//*(((uint8_t *) &temp_float) + 1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	224e      	movs	r2, #78	; 0x4e
 8003596:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  79;//*(((uint8_t *) &temp_float) + 2); //
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	224f      	movs	r2, #79	; 0x4f
 80035a0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	80;//*(((uint8_t *) &temp_float) + 3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	2250      	movs	r2, #80	; 0x50
 80035aa:	701a      	strb	r2, [r3, #0]

			//	count_tic_finish = DWT_CYCCNT;//смотрим сколько натикало -цикл формирования массивов данных длится 4.894мкс (832 тика)
			//	count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

    return index_data_time_zamer;
 80035ac:	887b      	ldrh	r3, [r7, #2]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20008630 	.word	0x20008630
 80035c0:	20011f34 	.word	0x20011f34
 80035c4:	2000f638 	.word	0x2000f638

080035c8 <fun_data_scan_freq_podgotovka>:

void fun_data_scan_freq_podgotovka( uint8_t * buffer_data_scan_freq,  float32_t freq_float )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	ed87 0a00 	vstr	s0, [r7]
	//			 какой то код

			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float =  (freq_float +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 80035d4:	edd7 7a00 	vldr	s15, [r7]
 80035d8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003838 <fun_data_scan_freq_podgotovka+0x270>
 80035dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035e0:	4b96      	ldr	r3, [pc, #600]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80035e2:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80035e6:	4995      	ldr	r1, [pc, #596]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	780a      	ldrb	r2, [r1, #0]
 80035f0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	4a90      	ldr	r2, [pc, #576]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80035fa:	7852      	ldrb	r2, [r2, #1]
 80035fc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	4a8d      	ldr	r2, [pc, #564]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003606:	7892      	ldrb	r2, [r2, #2]
 8003608:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	4a8a      	ldr	r2, [pc, #552]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003612:	78d2      	ldrb	r2, [r2, #3]
 8003614:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз
			 temp_float = (float32_t) arr1_Output_f32[8]; //
 8003616:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <fun_data_scan_freq_podgotovka+0x278>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a88      	ldr	r2, [pc, #544]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800361c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800361e:	4987      	ldr	r1, [pc, #540]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	780a      	ldrb	r2, [r1, #0]
 8003628:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	4a82      	ldr	r2, [pc, #520]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003632:	7852      	ldrb	r2, [r2, #1]
 8003634:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	4a7f      	ldr	r2, [pc, #508]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800363e:	7892      	ldrb	r2, [r2, #2]
 8003640:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	4a7c      	ldr	r2, [pc, #496]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800364a:	78d2      	ldrb	r2, [r2, #3]
 800364c:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз
			 temp_float = (float32_t) arr2_Output_f32[8]; //
 800364e:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <fun_data_scan_freq_podgotovka+0x27c>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a7a      	ldr	r2, [pc, #488]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003654:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003656:	4979      	ldr	r1, [pc, #484]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	780a      	ldrb	r2, [r1, #0]
 8003660:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	4a74      	ldr	r2, [pc, #464]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800366a:	7852      	ldrb	r2, [r2, #1]
 800366c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	4a71      	ldr	r2, [pc, #452]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003676:	7892      	ldrb	r2, [r2, #2]
 8003678:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	4a6e      	ldr	r2, [pc, #440]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003682:	78d2      	ldrb	r2, [r2, #3]
 8003684:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз
			 temp_float = arr1_phase_Output_8_f32; //
 8003686:	4b70      	ldr	r3, [pc, #448]	; (8003848 <fun_data_scan_freq_podgotovka+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6c      	ldr	r2, [pc, #432]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800368c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800368e:	496b      	ldr	r1, [pc, #428]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	780a      	ldrb	r2, [r1, #0]
 8003698:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	4a66      	ldr	r2, [pc, #408]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036a2:	7852      	ldrb	r2, [r2, #1]
 80036a4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	4a63      	ldr	r2, [pc, #396]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036ae:	7892      	ldrb	r2, [r2, #2]
 80036b0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	4a60      	ldr	r2, [pc, #384]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036ba:	78d2      	ldrb	r2, [r2, #3]
 80036bc:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз
			 temp_float = arr2_phase_Output_8_f32; //
 80036be:	4b63      	ldr	r3, [pc, #396]	; (800384c <fun_data_scan_freq_podgotovka+0x284>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5e      	ldr	r2, [pc, #376]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036c4:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036c6:	495d      	ldr	r1, [pc, #372]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	780a      	ldrb	r2, [r1, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036da:	7852      	ldrb	r2, [r2, #1]
 80036dc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	4a55      	ldr	r2, [pc, #340]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036e6:	7892      	ldrb	r2, [r2, #2]
 80036e8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036f2:	78d2      	ldrb	r2, [r2, #3]
 80036f4:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float =  shift_phase_I8_U8_f32; // (float32_t)
 80036f6:	4b56      	ldr	r3, [pc, #344]	; (8003850 <fun_data_scan_freq_podgotovka+0x288>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a50      	ldr	r2, [pc, #320]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80036fc:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036fe:	494f      	ldr	r1, [pc, #316]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	780a      	ldrb	r2, [r1, #0]
 8003708:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	4a4a      	ldr	r2, [pc, #296]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003712:	7852      	ldrb	r2, [r2, #1]
 8003714:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	4a47      	ldr	r2, [pc, #284]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800371e:	7892      	ldrb	r2, [r2, #2]
 8003720:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	4a44      	ldr	r2, [pc, #272]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800372a:	78d2      	ldrb	r2, [r2, #3]
 800372c:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз
			 temp_float =   calc_power_Output_8_f32; //
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <fun_data_scan_freq_podgotovka+0x28c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a42      	ldr	r2, [pc, #264]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003734:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003736:	4941      	ldr	r1, [pc, #260]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	780a      	ldrb	r2, [r1, #0]
 8003740:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	4a3c      	ldr	r2, [pc, #240]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800374a:	7852      	ldrb	r2, [r2, #1]
 800374c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	4a39      	ldr	r2, [pc, #228]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003756:	7892      	ldrb	r2, [r2, #2]
 8003758:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 3);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	4a36      	ldr	r2, [pc, #216]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003762:	78d2      	ldrb	r2, [r2, #3]
 8003764:	701a      	strb	r2, [r3, #0]

			 // 7 график, сверху вниз
			 temp_float = calc_R_Output_8_f32;
 8003766:	4b3c      	ldr	r3, [pc, #240]	; (8003858 <fun_data_scan_freq_podgotovka+0x290>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800376c:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800376e:	4933      	ldr	r1, [pc, #204]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	780a      	ldrb	r2, [r1, #0]
 8003778:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	4a2e      	ldr	r2, [pc, #184]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003782:	7852      	ldrb	r2, [r2, #1]
 8003784:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800378e:	7892      	ldrb	r2, [r2, #2]
 8003790:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	4a28      	ldr	r2, [pc, #160]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800379a:	78d2      	ldrb	r2, [r2, #3]
 800379c:	701a      	strb	r2, [r3, #0]

			 // 8 график, сверху вниз
			 temp_float = 8;
 800379e:	4b27      	ldr	r3, [pc, #156]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80037a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80037a4:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	65;//*(((uint8_t *) &temp_float) + 0); //
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	2241      	movs	r2, #65	; 0x41
 80037ae:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	66;//*(((uint8_t *) &temp_float) + 1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	2242      	movs	r2, #66	; 0x42
 80037b8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  67;//*(((uint8_t *) &temp_float) + 2); //
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	2243      	movs	r2, #67	; 0x43
 80037c2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	68;//*(((uint8_t *) &temp_float) + 3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	2244      	movs	r2, #68	; 0x44
 80037cc:	701a      	strb	r2, [r3, #0]

			 // 9 график, сверху вниз
			 temp_float = 9;
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80037d0:	4a22      	ldr	r2, [pc, #136]	; (800385c <fun_data_scan_freq_podgotovka+0x294>)
 80037d2:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80037d4:	4919      	ldr	r1, [pc, #100]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	780a      	ldrb	r2, [r1, #0]
 80037de:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80037e8:	7852      	ldrb	r2, [r2, #1]
 80037ea:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 80037f4:	7892      	ldrb	r2, [r2, #2]
 80037f6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003800:	78d2      	ldrb	r2, [r2, #3]
 8003802:	701a      	strb	r2, [r3, #0]

			 // 10 график, сверху вниз
			 temp_float = 10;
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 8003806:	4a16      	ldr	r2, [pc, #88]	; (8003860 <fun_data_scan_freq_podgotovka+0x298>)
 8003808:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 0); //
 800380a:	490c      	ldr	r1, [pc, #48]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	780a      	ldrb	r2, [r1, #0]
 8003814:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800381e:	7852      	ldrb	r2, [r2, #1]
 8003820:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <fun_data_scan_freq_podgotovka+0x274>)
 800382a:	7892      	ldrb	r2, [r2, #2]
 800382c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	e016      	b.n	8003864 <fun_data_scan_freq_podgotovka+0x29c>
 8003836:	bf00      	nop
 8003838:	42280000 	.word	0x42280000
 800383c:	20011f34 	.word	0x20011f34
 8003840:	2000b630 	.word	0x2000b630
 8003844:	2000d630 	.word	0x2000d630
 8003848:	2000f630 	.word	0x2000f630
 800384c:	2000f634 	.word	0x2000f634
 8003850:	2000f63c 	.word	0x2000f63c
 8003854:	2000f638 	.word	0x2000f638
 8003858:	2000f648 	.word	0x2000f648
 800385c:	41100000 	.word	0x41100000
 8003860:	41200000 	.word	0x41200000
 8003864:	4a11      	ldr	r2, [pc, #68]	; (80038ac <fun_data_scan_freq_podgotovka+0x2e4>)
 8003866:	78d2      	ldrb	r2, [r2, #3]
 8003868:	701a      	strb	r2, [r3, #0]

			 // 11 график, сверху вниз
			 temp_float = 11;
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <fun_data_scan_freq_podgotovka+0x2e4>)
 800386c:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <fun_data_scan_freq_podgotovka+0x2e8>)
 800386e:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <fun_data_scan_freq_podgotovka+0x2e4>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	780a      	ldrb	r2, [r1, #0]
 800387a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <fun_data_scan_freq_podgotovka+0x2e4>)
 8003884:	7852      	ldrb	r2, [r2, #1]
 8003886:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	4a07      	ldr	r2, [pc, #28]	; (80038ac <fun_data_scan_freq_podgotovka+0x2e4>)
 8003890:	7892      	ldrb	r2, [r2, #2]
 8003892:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <fun_data_scan_freq_podgotovka+0x2e4>)
 800389c:	78d2      	ldrb	r2, [r2, #3]
 800389e:	701a      	strb	r2, [r3, #0]

	//return HAL_OK;
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	20011f34 	.word	0x20011f34
 80038b0:	41300000 	.word	0x41300000

080038b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80038ba:	b672      	cpsid	i
}
 80038bc:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
	uint16_t count_printf;
  __disable_irq();
  while (1)
  {
	  count_printf++;
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	3301      	adds	r3, #1
 80038c2:	80fb      	strh	r3, [r7, #6]
	  if (count_printf >1000)
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ca:	d9f8      	bls.n	80038be <Error_Handler+0xa>
	  	  {
		  	printf("MAIN Error_Handler() Error_Handler_Debug\n");
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <Error_Handler+0x24>)
 80038ce:	f00c fc9f 	bl	8010210 <puts>
		  	count_printf =0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	80fb      	strh	r3, [r7, #6]
	  count_printf++;
 80038d6:	e7f2      	b.n	80038be <Error_Handler+0xa>
 80038d8:	08014fb4 	.word	0x08014fb4

080038dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_MspInit+0x44>)
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_MspInit+0x44>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6613      	str	r3, [r2, #96]	; 0x60
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_MspInit+0x44>)
 80038f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_MspInit+0x44>)
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <HAL_MspInit+0x44>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003904:	6593      	str	r3, [r2, #88]	; 0x58
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_MspInit+0x44>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003912:	f005 fb9b 	bl	800904c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000

08003924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  count_printf++;
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <NMI_Handler+0x28>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <NMI_Handler+0x28>)
 8003932:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <NMI_Handler+0x28>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393c:	d9f4      	bls.n	8003928 <NMI_Handler+0x4>
	  	  {
		  	printf("NMI Non maskable interrupt\n");
 800393e:	4804      	ldr	r0, [pc, #16]	; (8003950 <NMI_Handler+0x2c>)
 8003940:	f00c fc66 	bl	8010210 <puts>
		  	count_printf =0;
 8003944:	4b01      	ldr	r3, [pc, #4]	; (800394c <NMI_Handler+0x28>)
 8003946:	2200      	movs	r2, #0
 8003948:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 800394a:	e7ed      	b.n	8003928 <NMI_Handler+0x4>
 800394c:	20011f3c 	.word	0x20011f3c
 8003950:	08014fe0 	.word	0x08014fe0

08003954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  count_printf++;
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <HardFault_Handler+0x28>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <HardFault_Handler+0x28>)
 8003962:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HardFault_Handler+0x28>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800396c:	d9f4      	bls.n	8003958 <HardFault_Handler+0x4>
	  	  {
		  	printf("Hard fault interrupt\n");
 800396e:	4804      	ldr	r0, [pc, #16]	; (8003980 <HardFault_Handler+0x2c>)
 8003970:	f00c fc4e 	bl	8010210 <puts>
		  	count_printf =0;
 8003974:	4b01      	ldr	r3, [pc, #4]	; (800397c <HardFault_Handler+0x28>)
 8003976:	2200      	movs	r2, #0
 8003978:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 800397a:	e7ed      	b.n	8003958 <HardFault_Handler+0x4>
 800397c:	20011f3c 	.word	0x20011f3c
 8003980:	08014ffc 	.word	0x08014ffc

08003984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  count_printf++;
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <MemManage_Handler+0x28>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <MemManage_Handler+0x28>)
 8003992:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <MemManage_Handler+0x28>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800399c:	d9f4      	bls.n	8003988 <MemManage_Handler+0x4>
	  	  {
		  	printf("Memory management fault\n");
 800399e:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MemManage_Handler+0x2c>)
 80039a0:	f00c fc36 	bl	8010210 <puts>
		  	count_printf =0;
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <MemManage_Handler+0x28>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80039aa:	e7ed      	b.n	8003988 <MemManage_Handler+0x4>
 80039ac:	20011f3c 	.word	0x20011f3c
 80039b0:	08015014 	.word	0x08015014

080039b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  count_printf++;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <BusFault_Handler+0x28>)
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <BusFault_Handler+0x28>)
 80039c2:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <BusFault_Handler+0x28>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039cc:	d9f4      	bls.n	80039b8 <BusFault_Handler+0x4>
	  	  {
		  	printf("BusFault_Handler\n");
 80039ce:	4804      	ldr	r0, [pc, #16]	; (80039e0 <BusFault_Handler+0x2c>)
 80039d0:	f00c fc1e 	bl	8010210 <puts>
		  	count_printf =0;
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <BusFault_Handler+0x28>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 80039da:	e7ed      	b.n	80039b8 <BusFault_Handler+0x4>
 80039dc:	20011f3c 	.word	0x20011f3c
 80039e0:	0801502c 	.word	0x0801502c

080039e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  count_printf++;
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <UsageFault_Handler+0x28>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <UsageFault_Handler+0x28>)
 80039f2:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <UsageFault_Handler+0x28>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fc:	d9f4      	bls.n	80039e8 <UsageFault_Handler+0x4>
	  	  {
		  	printf("UsageFault_Handler\n");
 80039fe:	4804      	ldr	r0, [pc, #16]	; (8003a10 <UsageFault_Handler+0x2c>)
 8003a00:	f00c fc06 	bl	8010210 <puts>
		  	count_printf =0;
 8003a04:	4b01      	ldr	r3, [pc, #4]	; (8003a0c <UsageFault_Handler+0x28>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003a0a:	e7ed      	b.n	80039e8 <UsageFault_Handler+0x4>
 8003a0c:	20011f3c 	.word	0x20011f3c
 8003a10:	08015040 	.word	0x08015040

08003a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	printf("SVC_Handler()\n");
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <SVC_Handler+0x10>)
 8003a1a:	f00c fbf9 	bl	8010210 <puts>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	08015054 	.word	0x08015054

08003a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler()\n");
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <DebugMon_Handler+0x10>)
 8003a2e:	f00c fbef 	bl	8010210 <puts>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08015064 	.word	0x08015064

08003a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	printf("PendSV_Handler()\n");
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <PendSV_Handler+0x10>)
 8003a42:	f00c fbe5 	bl	8010210 <puts>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08015078 	.word	0x08015078

08003a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a54:	f000 ffec 	bl	8004a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <DMA1_Channel1_IRQHandler+0x10>)
 8003a62:	f003 f934 	bl	8006cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200003a4 	.word	0x200003a4

08003a70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	xMBRTUTransmitFSM();
 8003a74:	f00a fac4 	bl	800e000 <xMBRTUTransmitFSM>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Channel2_IRQHandler+0x14>)
 8003a7a:	f003 f928 	bl	8006cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200122d8 	.word	0x200122d8

08003a88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
//	if ((0U != (hdma_usart1_tx.Instance->CCR & DMA_IT_TC)) & (0U == (hdma_usart1_tx.Instance->CCR & DMA_IT_HT)))
//	{
//		xMBRTUTransmitFSM();
//	}
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA1_Channel3_IRQHandler+0x10>)
 8003a8e:	f003 f91e 	bl	8006cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20012278 	.word	0x20012278

08003a9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel4);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <DMA1_Channel4_IRQHandler+0x10>)
 8003aa2:	f003 f914 	bl	8006cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000048c 	.word	0x2000048c

08003ab0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	2300      	movs	r3, #0
 8003abc:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <USART1_IRQHandler+0x58>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <USART1_IRQHandler+0x58>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <USART1_IRQHandler+0x4a>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <USART1_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003af6:	f00a fa19 	bl	800df2c <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003afa:	4803      	ldr	r0, [pc, #12]	; (8003b08 <USART1_IRQHandler+0x58>)
 8003afc:	f008 fa10 	bl	800bf20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20012158 	.word	0x20012158

08003b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <USART2_IRQHandler+0x58>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <USART2_IRQHandler+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <USART2_IRQHandler+0x4a>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <USART2_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003b52:	f00a f9eb 	bl	800df2c <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b56:	4803      	ldr	r0, [pc, #12]	; (8003b64 <USART2_IRQHandler+0x58>)
 8003b58:	f008 f9e2 	bl	800bf20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200121e8 	.word	0x200121e8

08003b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003b6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b70:	f003 fc10 	bl	8007394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <TIM6_DAC_IRQHandler+0x10>)
 8003b7e:	f006 fcd9 	bl	800a534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20012028 	.word	0x20012028

08003b8c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <DMA2_Channel1_IRQHandler+0x10>)
 8003b92:	f003 f89c 	bl	8006cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000404 	.word	0x20000404

08003ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
	return 1;
 8003ba4:	2301      	movs	r3, #1
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_kill>:

int _kill(int pid, int sig)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bba:	f00b fa95 	bl	800f0e8 <__errno>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2216      	movs	r2, #22
 8003bc2:	601a      	str	r2, [r3, #0]
	return -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_exit>:

void _exit (int status)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ffe7 	bl	8003bb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003be2:	e7fe      	b.n	8003be2 <_exit+0x12>

08003be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e00a      	b.n	8003c0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bf6:	f3af 8000 	nop.w
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	60ba      	str	r2, [r7, #8]
 8003c02:	b2ca      	uxtb	r2, r1
 8003c04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dbf0      	blt.n	8003bf6 <_read+0x12>
	}

return len;
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
	return -1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c46:	605a      	str	r2, [r3, #4]
	return 0;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_isatty>:

int _isatty(int file)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
	return 0;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <_sbrk+0x5c>)
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <_sbrk+0x60>)
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <_sbrk+0x64>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <_sbrk+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d207      	bcs.n	8003cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb8:	f00b fa16 	bl	800f0e8 <__errno>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	220c      	movs	r2, #12
 8003cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e009      	b.n	8003cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <_sbrk+0x64>)
 8003cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20020000 	.word	0x20020000
 8003ce8:	00004000 	.word	0x00004000
 8003cec:	20011f40 	.word	0x20011f40
 8003cf0:	20013390 	.word	0x20013390

08003cf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <SystemInit+0x20>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <SystemInit+0x20>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b0a0      	sub	sp, #128	; 0x80
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	615a      	str	r2, [r3, #20]
 8003d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	2234      	movs	r2, #52	; 0x34
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f00b fa0b 	bl	800f17c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d66:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d68:	4a67      	ldr	r2, [pc, #412]	; (8003f08 <MX_TIM1_Init+0x1f0>)
 8003d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d6c:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d72:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 127;
 8003d78:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d7a:	227f      	movs	r2, #127	; 0x7f
 8003d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d7e:	4b61      	ldr	r3, [pc, #388]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d84:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d8a:	4b5e      	ldr	r3, [pc, #376]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d90:	485c      	ldr	r0, [pc, #368]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003d92:	f006 f8ed 	bl	8009f70 <HAL_TIM_Base_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003d9c:	f7ff fd8a 	bl	80038b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003da0:	4858      	ldr	r0, [pc, #352]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003da2:	f006 fa54 	bl	800a24e <HAL_TIM_PWM_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003dac:	f7ff fd82 	bl	80038b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003db0:	2307      	movs	r3, #7
 8003db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8003db4:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <MX_TIM1_Init+0x1f4>)
 8003db6:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003db8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4851      	ldr	r0, [pc, #324]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003dc0:	f006 fe73 	bl	800aaaa <HAL_TIM_SlaveConfigSynchro>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8003dca:	f7ff fd73 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003dde:	4619      	mov	r1, r3
 8003de0:	4848      	ldr	r0, [pc, #288]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003de2:	f007 fce5 	bl	800b7b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003dec:	f7ff fd62 	bl	80038b4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003df0:	2301      	movs	r3, #1
 8003df2:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003dfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e00:	461a      	mov	r2, r3
 8003e02:	2101      	movs	r1, #1
 8003e04:	483f      	ldr	r0, [pc, #252]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003e06:	f007 fe1b 	bl	800ba40 <HAL_TIMEx_ConfigBreakInput>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003e10:	f7ff fd50 	bl	80038b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003e14:	2370      	movs	r3, #112	; 0x70
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e20:	2300      	movs	r3, #0
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e36:	2200      	movs	r2, #0
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4832      	ldr	r0, [pc, #200]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003e3c:	f006 fcfa 	bl	800a834 <HAL_TIM_PWM_ConfigChannel>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8003e46:	f7ff fd35 	bl	80038b4 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e52:	2204      	movs	r2, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	482b      	ldr	r0, [pc, #172]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003e58:	f006 fcec 	bl	800a834 <HAL_TIM_PWM_ConfigChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8003e62:	f7ff fd27 	bl	80038b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM1;
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <MX_TIM1_Init+0x1f8>)
 8003e68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e72:	2208      	movs	r2, #8
 8003e74:	4619      	mov	r1, r3
 8003e76:	4823      	ldr	r0, [pc, #140]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003e78:	f006 fcdc 	bl	800a834 <HAL_TIM_PWM_ConfigChannel>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8003e82:	f7ff fd17 	bl	80038b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM2;
 8003e86:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <MX_TIM1_Init+0x1fc>)
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e8e:	220c      	movs	r2, #12
 8003e90:	4619      	mov	r1, r3
 8003e92:	481c      	ldr	r0, [pc, #112]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003e94:	f006 fcce 	bl	800a834 <HAL_TIM_PWM_ConfigChannel>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003e9e:	f7ff fd09 	bl	80038b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 85;
 8003eb2:	2355      	movs	r3, #85	; 0x55
 8003eb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4807      	ldr	r0, [pc, #28]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003ee6:	f007 fcf9 	bl	800b8dc <HAL_TIMEx_ConfigBreakDeadTime>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM1_Init+0x1dc>
  {
    Error_Handler();
 8003ef0:	f7ff fce0 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ef4:	4803      	ldr	r0, [pc, #12]	; (8003f04 <MX_TIM1_Init+0x1ec>)
 8003ef6:	f000 fa7f 	bl	80043f8 <HAL_TIM_MspPostInit>

}
 8003efa:	bf00      	nop
 8003efc:	3780      	adds	r7, #128	; 0x80
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20011f44 	.word	0x20011f44
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	00100060 	.word	0x00100060
 8003f10:	00010040 	.word	0x00010040
 8003f14:	00010050 	.word	0x00010050

08003f18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b090      	sub	sp, #64	; 0x40
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2e:	f107 0320 	add.w	r3, r7, #32
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
 8003f48:	615a      	str	r2, [r3, #20]
 8003f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f4c:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f5c:	2260      	movs	r2, #96	; 0x60
 8003f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f72:	4824      	ldr	r0, [pc, #144]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f74:	f005 fffc 	bl	8009f70 <HAL_TIM_Base_Init>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f7e:	f7ff fc99 	bl	80038b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f82:	4820      	ldr	r0, [pc, #128]	; (8004004 <MX_TIM2_Init+0xec>)
 8003f84:	f006 f963 	bl	800a24e <HAL_TIM_PWM_Init>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003f8e:	f7ff fc91 	bl	80038b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003f92:	2307      	movs	r3, #7
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <MX_TIM2_Init+0xf0>)
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4818      	ldr	r0, [pc, #96]	; (8004004 <MX_TIM2_Init+0xec>)
 8003fa2:	f006 fd82 	bl	800aaaa <HAL_TIM_SlaveConfigSynchro>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003fac:	f7ff fc82 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8003fb0:	2350      	movs	r3, #80	; 0x50
 8003fb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4811      	ldr	r0, [pc, #68]	; (8004004 <MX_TIM2_Init+0xec>)
 8003fc0:	f007 fbf6 	bl	800b7b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003fca:	f7ff fc73 	bl	80038b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fce:	2360      	movs	r3, #96	; 0x60
 8003fd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4807      	ldr	r0, [pc, #28]	; (8004004 <MX_TIM2_Init+0xec>)
 8003fe6:	f006 fc25 	bl	800a834 <HAL_TIM_PWM_ConfigChannel>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003ff0:	f7ff fc60 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ff4:	4803      	ldr	r0, [pc, #12]	; (8004004 <MX_TIM2_Init+0xec>)
 8003ff6:	f000 f9ff 	bl	80043f8 <HAL_TIM_MspPostInit>

}
 8003ffa:	bf00      	nop
 8003ffc:	3740      	adds	r7, #64	; 0x40
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20011f90 	.word	0x20011f90
 8004008:	00100060 	.word	0x00100060

0800400c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b090      	sub	sp, #64	; 0x40
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004022:	f107 0320 	add.w	r3, r7, #32
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
 800403c:	615a      	str	r2, [r3, #20]
 800403e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004042:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <MX_TIM3_Init+0xec>)
 8004044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004046:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <MX_TIM3_Init+0xe8>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 8004052:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004054:	2205      	movs	r2, #5
 8004056:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <MX_TIM3_Init+0xe8>)
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004064:	4823      	ldr	r0, [pc, #140]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004066:	f005 ff83 	bl	8009f70 <HAL_TIM_Base_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004070:	f7ff fc20 	bl	80038b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004074:	481f      	ldr	r0, [pc, #124]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004076:	f006 f8ea 	bl	800a24e <HAL_TIM_PWM_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004080:	f7ff fc18 	bl	80038b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004084:	2307      	movs	r3, #7
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004088:	2300      	movs	r3, #0
 800408a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800408c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004090:	4619      	mov	r1, r3
 8004092:	4818      	ldr	r0, [pc, #96]	; (80040f4 <MX_TIM3_Init+0xe8>)
 8004094:	f006 fd09 	bl	800aaaa <HAL_TIM_SlaveConfigSynchro>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800409e:	f7ff fc09 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80040a2:	2320      	movs	r3, #32
 80040a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040aa:	f107 0320 	add.w	r3, r7, #32
 80040ae:	4619      	mov	r1, r3
 80040b0:	4810      	ldr	r0, [pc, #64]	; (80040f4 <MX_TIM3_Init+0xe8>)
 80040b2:	f007 fb7d 	bl	800b7b0 <HAL_TIMEx_MasterConfigSynchronization>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80040bc:	f7ff fbfa 	bl	80038b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040c0:	2360      	movs	r3, #96	; 0x60
 80040c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 80040c4:	2304      	movs	r3, #4
 80040c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	2200      	movs	r2, #0
 80040d4:	4619      	mov	r1, r3
 80040d6:	4807      	ldr	r0, [pc, #28]	; (80040f4 <MX_TIM3_Init+0xe8>)
 80040d8:	f006 fbac 	bl	800a834 <HAL_TIM_PWM_ConfigChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80040e2:	f7ff fbe7 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040e6:	4803      	ldr	r0, [pc, #12]	; (80040f4 <MX_TIM3_Init+0xe8>)
 80040e8:	f000 f986 	bl	80043f8 <HAL_TIM_MspPostInit>

}
 80040ec:	bf00      	nop
 80040ee:	3740      	adds	r7, #64	; 0x40
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20011fdc 	.word	0x20011fdc
 80040f8:	40000400 	.word	0x40000400

080040fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004102:	1d3b      	adds	r3, r7, #4
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <MX_TIM6_Init+0x64>)
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <MX_TIM6_Init+0x68>)
 8004110:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <MX_TIM6_Init+0x64>)
 8004114:	22a9      	movs	r2, #169	; 0xa9
 8004116:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <MX_TIM6_Init+0x64>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <MX_TIM6_Init+0x64>)
 8004120:	2231      	movs	r2, #49	; 0x31
 8004122:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <MX_TIM6_Init+0x64>)
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800412a:	480d      	ldr	r0, [pc, #52]	; (8004160 <MX_TIM6_Init+0x64>)
 800412c:	f005 ff20 	bl	8009f70 <HAL_TIM_Base_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004136:	f7ff fbbd 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4806      	ldr	r0, [pc, #24]	; (8004160 <MX_TIM6_Init+0x64>)
 8004148:	f007 fb32 	bl	800b7b0 <HAL_TIMEx_MasterConfigSynchronization>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004152:	f7ff fbaf 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20012028 	.word	0x20012028
 8004164:	40001000 	.word	0x40001000

08004168 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <MX_TIM7_Init+0x68>)
 800417a:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <MX_TIM7_Init+0x6c>)
 800417c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16999;
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <MX_TIM7_Init+0x68>)
 8004180:	f244 2267 	movw	r2, #16999	; 0x4267
 8004184:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <MX_TIM7_Init+0x68>)
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <MX_TIM7_Init+0x68>)
 800418e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004192:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <MX_TIM7_Init+0x68>)
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800419a:	480d      	ldr	r0, [pc, #52]	; (80041d0 <MX_TIM7_Init+0x68>)
 800419c:	f005 fee8 	bl	8009f70 <HAL_TIM_Base_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80041a6:	f7ff fb85 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80041aa:	2320      	movs	r3, #32
 80041ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4806      	ldr	r0, [pc, #24]	; (80041d0 <MX_TIM7_Init+0x68>)
 80041b8:	f007 fafa 	bl	800b7b0 <HAL_TIMEx_MasterConfigSynchronization>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80041c2:	f7ff fb77 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20012074 	.word	0x20012074
 80041d4:	40001400 	.word	0x40001400

080041d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <MX_TIM16_Init+0x44>)
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <MX_TIM16_Init+0x48>)
 80041e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <MX_TIM16_Init+0x44>)
 80041e4:	22a9      	movs	r2, #169	; 0xa9
 80041e6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <MX_TIM16_Init+0x44>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <MX_TIM16_Init+0x44>)
 80041f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <MX_TIM16_Init+0x44>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <MX_TIM16_Init+0x44>)
 80041fe:	2200      	movs	r2, #0
 8004200:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <MX_TIM16_Init+0x44>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004208:	4804      	ldr	r0, [pc, #16]	; (800421c <MX_TIM16_Init+0x44>)
 800420a:	f005 feb1 	bl	8009f70 <HAL_TIM_Base_Init>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004214:	f7ff fb4e 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200120c0 	.word	0x200120c0
 8004220:	40014400 	.word	0x40014400

08004224 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <MX_TIM17_Init+0x48>)
 800422a:	4a11      	ldr	r2, [pc, #68]	; (8004270 <MX_TIM17_Init+0x4c>)
 800422c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16999;
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <MX_TIM17_Init+0x48>)
 8004230:	f244 2267 	movw	r2, #16999	; 0x4267
 8004234:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <MX_TIM17_Init+0x48>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <MX_TIM17_Init+0x48>)
 800423e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004242:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <MX_TIM17_Init+0x48>)
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <MX_TIM17_Init+0x48>)
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <MX_TIM17_Init+0x48>)
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <MX_TIM17_Init+0x48>)
 8004258:	f005 fe8a 	bl	8009f70 <HAL_TIM_Base_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8004262:	f7ff fb27 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2001210c 	.word	0x2001210c
 8004270:	40014800 	.word	0x40014800

08004274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b090      	sub	sp, #64	; 0x40
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_TIM_Base_MspInit+0x168>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d12a      	bne.n	80042ec <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004296:	4b52      	ldr	r3, [pc, #328]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4a51      	ldr	r2, [pc, #324]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 800429c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042a0:	6613      	str	r3, [r2, #96]	; 0x60
 80042a2:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ae:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ba:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042cc:	2312      	movs	r3, #18
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80042d8:	2309      	movs	r3, #9
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e0:	4619      	mov	r1, r3
 80042e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042e6:	f002 fe89 	bl	8006ffc <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80042ea:	e072      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d10c      	bne.n	8004310 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042f6:	4b3a      	ldr	r3, [pc, #232]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	4a39      	ldr	r2, [pc, #228]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
 8004302:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	6a3b      	ldr	r3, [r7, #32]
}
 800430e:	e060      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_TIM_Base_MspInit+0x170>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a30      	ldr	r2, [pc, #192]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
 8004326:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	69fb      	ldr	r3, [r7, #28]
}
 8004332:	e04e      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM6)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <HAL_TIM_Base_MspInit+0x174>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d114      	bne.n	8004368 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800433e:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	2036      	movs	r0, #54	; 0x36
 800435c:	f002 f8a1 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004360:	2036      	movs	r0, #54	; 0x36
 8004362:	f002 f8b8 	bl	80064d6 <HAL_NVIC_EnableIRQ>
}
 8004366:	e034      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM7)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <HAL_TIM_Base_MspInit+0x178>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004378:	f043 0320 	orr.w	r3, r3, #32
 800437c:	6593      	str	r3, [r2, #88]	; 0x58
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]
}
 800438a:	e022      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM16)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_TIM_Base_MspInit+0x17c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 800439c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a0:	6613      	str	r3, [r2, #96]	; 0x60
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
}
 80043ae:	e010      	b.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM17)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0f      	ldr	r2, [pc, #60]	; (80043f4 <HAL_TIM_Base_MspInit+0x180>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10b      	bne.n	80043d2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6613      	str	r3, [r2, #96]	; 0x60
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_TIM_Base_MspInit+0x16c>)
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	bf00      	nop
 80043d4:	3740      	adds	r7, #64	; 0x40
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40001000 	.word	0x40001000
 80043ec:	40001400 	.word	0x40001400
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800

080043f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08c      	sub	sp, #48	; 0x30
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a62      	ldr	r2, [pc, #392]	; (80045a0 <HAL_TIM_MspPostInit+0x1a8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d17a      	bne.n	8004510 <HAL_TIM_MspPostInit+0x118>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800441a:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	4a61      	ldr	r2, [pc, #388]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004432:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	4a5b      	ldr	r2, [pc, #364]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004438:	f043 0302 	orr.w	r3, r3, #2
 800443c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443e:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444a:	4b56      	ldr	r3, [pc, #344]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4a55      	ldr	r2, [pc, #340]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004456:	4b53      	ldr	r3, [pc, #332]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
    PB13     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004472:	2302      	movs	r3, #2
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	4619      	mov	r1, r3
 800447c:	484a      	ldr	r0, [pc, #296]	; (80045a8 <HAL_TIM_MspPostInit+0x1b0>)
 800447e:	f002 fdbd 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004488:	2302      	movs	r3, #2
 800448a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004490:	2301      	movs	r3, #1
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004494:	2306      	movs	r3, #6
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004498:	f107 031c 	add.w	r3, r7, #28
 800449c:	4619      	mov	r1, r3
 800449e:	4843      	ldr	r0, [pc, #268]	; (80045ac <HAL_TIM_MspPostInit+0x1b4>)
 80044a0:	f002 fdac 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	2302      	movs	r3, #2
 80044ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80044b6:	2306      	movs	r3, #6
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	f107 031c 	add.w	r3, r7, #28
 80044be:	4619      	mov	r1, r3
 80044c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044c4:	f002 fd9a 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80044d6:	2301      	movs	r3, #1
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80044da:	2306      	movs	r3, #6
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	4619      	mov	r1, r3
 80044e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e8:	f002 fd88 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80044fe:	230c      	movs	r3, #12
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004502:	f107 031c 	add.w	r3, r7, #28
 8004506:	4619      	mov	r1, r3
 8004508:	4828      	ldr	r0, [pc, #160]	; (80045ac <HAL_TIM_MspPostInit+0x1b4>)
 800450a:	f002 fd77 	bl	8006ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800450e:	e043      	b.n	8004598 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d11d      	bne.n	8004556 <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004526:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004532:	2302      	movs	r3, #2
 8004534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453e:	2300      	movs	r3, #0
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004542:	2301      	movs	r3, #1
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	4619      	mov	r1, r3
 800454c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004550:	f002 fd54 	bl	8006ffc <HAL_GPIO_Init>
}
 8004554:	e020      	b.n	8004598 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM3)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <HAL_TIM_MspPostInit+0x1b8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 8004566:	f043 0302 	orr.w	r3, r3, #2
 800456a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_TIM_MspPostInit+0x1ac>)
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004578:	2310      	movs	r3, #16
 800457a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004584:	2300      	movs	r3, #0
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004588:	2302      	movs	r3, #2
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458c:	f107 031c 	add.w	r3, r7, #28
 8004590:	4619      	mov	r1, r3
 8004592:	4806      	ldr	r0, [pc, #24]	; (80045ac <HAL_TIM_MspPostInit+0x1b4>)
 8004594:	f002 fd32 	bl	8006ffc <HAL_GPIO_Init>
}
 8004598:	bf00      	nop
 800459a:	3730      	adds	r7, #48	; 0x30
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40021000 	.word	0x40021000
 80045a8:	48000800 	.word	0x48000800
 80045ac:	48000400 	.word	0x48000400
 80045b0:	40000400 	.word	0x40000400

080045b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045ba:	4a25      	ldr	r2, [pc, #148]	; (8004650 <MX_USART1_UART_Init+0x9c>)
 80045bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80045be:	4b23      	ldr	r3, [pc, #140]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045c0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80045c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045d2:	4b1e      	ldr	r3, [pc, #120]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045d8:	4b1c      	ldr	r3, [pc, #112]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045da:	220c      	movs	r2, #12
 80045dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045f0:	4b16      	ldr	r3, [pc, #88]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <MX_USART1_UART_Init+0x98>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80045fc:	2300      	movs	r3, #0
 80045fe:	2200      	movs	r2, #0
 8004600:	2100      	movs	r1, #0
 8004602:	4812      	ldr	r0, [pc, #72]	; (800464c <MX_USART1_UART_Init+0x98>)
 8004604:	f008 fdf8 	bl	800d1f8 <HAL_RS485Ex_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800460e:	f7ff f951 	bl	80038b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004612:	2100      	movs	r1, #0
 8004614:	480d      	ldr	r0, [pc, #52]	; (800464c <MX_USART1_UART_Init+0x98>)
 8004616:	f008 feaf 	bl	800d378 <HAL_UARTEx_SetTxFifoThreshold>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8004620:	f7ff f948 	bl	80038b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004624:	2100      	movs	r1, #0
 8004626:	4809      	ldr	r0, [pc, #36]	; (800464c <MX_USART1_UART_Init+0x98>)
 8004628:	f008 fee4 	bl	800d3f4 <HAL_UARTEx_SetRxFifoThreshold>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8004632:	f7ff f93f 	bl	80038b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004636:	4805      	ldr	r0, [pc, #20]	; (800464c <MX_USART1_UART_Init+0x98>)
 8004638:	f008 fe65 	bl	800d306 <HAL_UARTEx_DisableFifoMode>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8004642:	f7ff f937 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20012158 	.word	0x20012158
 8004650:	40013800 	.word	0x40013800

08004654 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004658:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 800465a:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <MX_USART2_UART_Init+0x94>)
 800465c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004666:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004674:	2200      	movs	r2, #0
 8004676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 800467a:	220c      	movs	r2, #12
 800467c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004680:	2200      	movs	r2, #0
 8004682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004684:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 800468c:	2200      	movs	r2, #0
 800468e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004692:	2200      	movs	r2, #0
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 8004698:	2200      	movs	r2, #0
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800469c:	4811      	ldr	r0, [pc, #68]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 800469e:	f007 fb5c 	bl	800bd5a <HAL_UART_Init>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80046a8:	f7ff f904 	bl	80038b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046ac:	2100      	movs	r1, #0
 80046ae:	480d      	ldr	r0, [pc, #52]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 80046b0:	f008 fe62 	bl	800d378 <HAL_UARTEx_SetTxFifoThreshold>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80046ba:	f7ff f8fb 	bl	80038b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046be:	2100      	movs	r1, #0
 80046c0:	4808      	ldr	r0, [pc, #32]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 80046c2:	f008 fe97 	bl	800d3f4 <HAL_UARTEx_SetRxFifoThreshold>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80046cc:	f7ff f8f2 	bl	80038b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80046d0:	4804      	ldr	r0, [pc, #16]	; (80046e4 <MX_USART2_UART_Init+0x90>)
 80046d2:	f008 fe18 	bl	800d306 <HAL_UARTEx_DisableFifoMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80046dc:	f7ff f8ea 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200121e8 	.word	0x200121e8
 80046e8:	40004400 	.word	0x40004400

080046ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b0a2      	sub	sp, #136	; 0x88
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004704:	f107 0320 	add.w	r3, r7, #32
 8004708:	2254      	movs	r2, #84	; 0x54
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f00a fd35 	bl	800f17c <memset>
  if(uartHandle->Instance==USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a80      	ldr	r2, [pc, #512]	; (8004918 <HAL_UART_MspInit+0x22c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	f040 808a 	bne.w	8004832 <HAL_UART_MspInit+0x146>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800471e:	2301      	movs	r3, #1
 8004720:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004726:	f107 0320 	add.w	r3, r7, #32
 800472a:	4618      	mov	r0, r3
 800472c:	f005 f9d2 	bl	8009ad4 <HAL_RCCEx_PeriphCLKConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004736:	f7ff f8bd 	bl	80038b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800473a:	4b78      	ldr	r3, [pc, #480]	; (800491c <HAL_UART_MspInit+0x230>)
 800473c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473e:	4a77      	ldr	r2, [pc, #476]	; (800491c <HAL_UART_MspInit+0x230>)
 8004740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004744:	6613      	str	r3, [r2, #96]	; 0x60
 8004746:	4b75      	ldr	r3, [pc, #468]	; (800491c <HAL_UART_MspInit+0x230>)
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_UART_MspInit+0x230>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004756:	4a71      	ldr	r2, [pc, #452]	; (800491c <HAL_UART_MspInit+0x230>)
 8004758:	f043 0304 	orr.w	r3, r3, #4
 800475c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800475e:	4b6f      	ldr	r3, [pc, #444]	; (800491c <HAL_UART_MspInit+0x230>)
 8004760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476a:	4b6c      	ldr	r3, [pc, #432]	; (800491c <HAL_UART_MspInit+0x230>)
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	4a6b      	ldr	r2, [pc, #428]	; (800491c <HAL_UART_MspInit+0x230>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004776:	4b69      	ldr	r3, [pc, #420]	; (800491c <HAL_UART_MspInit+0x230>)
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004782:	2330      	movs	r3, #48	; 0x30
 8004784:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	2302      	movs	r3, #2
 8004788:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004794:	2307      	movs	r3, #7
 8004796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800479a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800479e:	4619      	mov	r1, r3
 80047a0:	485f      	ldr	r0, [pc, #380]	; (8004920 <HAL_UART_MspInit+0x234>)
 80047a2:	f002 fc2b 	bl	8006ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80047a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ac:	2302      	movs	r3, #2
 80047ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047ba:	2307      	movs	r3, #7
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047c4:	4619      	mov	r1, r3
 80047c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ca:	f002 fc17 	bl	8006ffc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 80047ce:	4b55      	ldr	r3, [pc, #340]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047d0:	4a55      	ldr	r2, [pc, #340]	; (8004928 <HAL_UART_MspInit+0x23c>)
 80047d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80047d4:	4b53      	ldr	r3, [pc, #332]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047d6:	2219      	movs	r2, #25
 80047d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047da:	4b52      	ldr	r3, [pc, #328]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047dc:	2210      	movs	r2, #16
 80047de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047e0:	4b50      	ldr	r3, [pc, #320]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047e6:	4b4f      	ldr	r3, [pc, #316]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047e8:	2280      	movs	r2, #128	; 0x80
 80047ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ec:	4b4d      	ldr	r3, [pc, #308]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047f2:	4b4c      	ldr	r3, [pc, #304]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80047f8:	4b4a      	ldr	r3, [pc, #296]	; (8004924 <HAL_UART_MspInit+0x238>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047fe:	4b49      	ldr	r3, [pc, #292]	; (8004924 <HAL_UART_MspInit+0x238>)
 8004800:	2200      	movs	r2, #0
 8004802:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004804:	4847      	ldr	r0, [pc, #284]	; (8004924 <HAL_UART_MspInit+0x238>)
 8004806:	f002 f87f 	bl	8006908 <HAL_DMA_Init>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8004810:	f7ff f850 	bl	80038b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a43      	ldr	r2, [pc, #268]	; (8004924 <HAL_UART_MspInit+0x238>)
 8004818:	679a      	str	r2, [r3, #120]	; 0x78
 800481a:	4a42      	ldr	r2, [pc, #264]	; (8004924 <HAL_UART_MspInit+0x238>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004820:	2200      	movs	r2, #0
 8004822:	2100      	movs	r1, #0
 8004824:	2025      	movs	r0, #37	; 0x25
 8004826:	f001 fe3c 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800482a:	2025      	movs	r0, #37	; 0x25
 800482c:	f001 fe53 	bl	80064d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004830:	e06e      	b.n	8004910 <HAL_UART_MspInit+0x224>
  else if(uartHandle->Instance==USART2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3d      	ldr	r2, [pc, #244]	; (800492c <HAL_UART_MspInit+0x240>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d169      	bne.n	8004910 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800483c:	2302      	movs	r3, #2
 800483e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004840:	2300      	movs	r3, #0
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004844:	f107 0320 	add.w	r3, r7, #32
 8004848:	4618      	mov	r0, r3
 800484a:	f005 f943 	bl	8009ad4 <HAL_RCCEx_PeriphCLKConfig>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8004854:	f7ff f82e 	bl	80038b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004858:	4b30      	ldr	r3, [pc, #192]	; (800491c <HAL_UART_MspInit+0x230>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a2f      	ldr	r2, [pc, #188]	; (800491c <HAL_UART_MspInit+0x230>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_UART_MspInit+0x230>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004870:	4b2a      	ldr	r3, [pc, #168]	; (800491c <HAL_UART_MspInit+0x230>)
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	4a29      	ldr	r2, [pc, #164]	; (800491c <HAL_UART_MspInit+0x230>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_UART_MspInit+0x230>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004888:	230c      	movs	r3, #12
 800488a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488c:	2302      	movs	r3, #2
 800488e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800489a:	2307      	movs	r3, #7
 800489c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80048a4:	4619      	mov	r1, r3
 80048a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048aa:	f002 fba7 	bl	8006ffc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <HAL_UART_MspInit+0x248>)
 80048b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048b6:	221b      	movs	r2, #27
 80048b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048bc:	2210      	movs	r2, #16
 80048be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c0:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048c6:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048c8:	2280      	movs	r2, #128	; 0x80
 80048ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048d2:	4b17      	ldr	r3, [pc, #92]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80048e4:	4812      	ldr	r0, [pc, #72]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048e6:	f002 f80f 	bl	8006908 <HAL_DMA_Init>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_UART_MspInit+0x208>
      Error_Handler();
 80048f0:	f7fe ffe0 	bl	80038b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048f8:	679a      	str	r2, [r3, #120]	; 0x78
 80048fa:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <HAL_UART_MspInit+0x244>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	2026      	movs	r0, #38	; 0x26
 8004906:	f001 fdcc 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800490a:	2026      	movs	r0, #38	; 0x26
 800490c:	f001 fde3 	bl	80064d6 <HAL_NVIC_EnableIRQ>
}
 8004910:	bf00      	nop
 8004912:	3788      	adds	r7, #136	; 0x88
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40013800 	.word	0x40013800
 800491c:	40021000 	.word	0x40021000
 8004920:	48000800 	.word	0x48000800
 8004924:	20012278 	.word	0x20012278
 8004928:	40020030 	.word	0x40020030
 800492c:	40004400 	.word	0x40004400
 8004930:	200122d8 	.word	0x200122d8
 8004934:	4002001c 	.word	0x4002001c

08004938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004938:	480d      	ldr	r0, [pc, #52]	; (8004970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800493a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800493c:	480d      	ldr	r0, [pc, #52]	; (8004974 <LoopForever+0x6>)
  ldr r1, =_edata
 800493e:	490e      	ldr	r1, [pc, #56]	; (8004978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004940:	4a0e      	ldr	r2, [pc, #56]	; (800497c <LoopForever+0xe>)
  movs r3, #0
 8004942:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004944:	e002      	b.n	800494c <LoopCopyDataInit>

08004946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800494a:	3304      	adds	r3, #4

0800494c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800494c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800494e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004950:	d3f9      	bcc.n	8004946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004952:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004954:	4c0b      	ldr	r4, [pc, #44]	; (8004984 <LoopForever+0x16>)
  movs r3, #0
 8004956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004958:	e001      	b.n	800495e <LoopFillZerobss>

0800495a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800495a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800495c:	3204      	adds	r2, #4

0800495e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800495e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004960:	d3fb      	bcc.n	800495a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004962:	f7ff f9c7 	bl	8003cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004966:	f00a fbd7 	bl	800f118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800496a:	f7fd f8d1 	bl	8001b10 <main>

0800496e <LoopForever>:

LoopForever:
    b LoopForever
 800496e:	e7fe      	b.n	800496e <LoopForever>
  ldr   r0, =_estack
 8004970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004978:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800497c:	0802af48 	.word	0x0802af48
  ldr r2, =_sbss
 8004980:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8004984:	2001338c 	.word	0x2001338c

08004988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004988:	e7fe      	b.n	8004988 <ADC1_2_IRQHandler>

0800498a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004994:	2003      	movs	r0, #3
 8004996:	f001 fd79 	bl	800648c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800499a:	2000      	movs	r0, #0
 800499c:	f000 f80e 	bl	80049bc <HAL_InitTick>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	71fb      	strb	r3, [r7, #7]
 80049aa:	e001      	b.n	80049b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049ac:	f7fe ff96 	bl	80038dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049b0:	79fb      	ldrb	r3, [r7, #7]

}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_InitTick+0x68>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d022      	beq.n	8004a16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <HAL_InitTick+0x6c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_InitTick+0x68>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fd84 	bl	80064f2 <HAL_SYSTICK_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10f      	bne.n	8004a10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d809      	bhi.n	8004a0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f6:	2200      	movs	r2, #0
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	f001 fd50 	bl	80064a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a02:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <HAL_InitTick+0x70>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	e007      	b.n	8004a1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e004      	b.n	8004a1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e001      	b.n	8004a1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000038 	.word	0x20000038
 8004a28:	20000030 	.word	0x20000030
 8004a2c:	20000034 	.word	0x20000034

08004a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_IncTick+0x1c>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_IncTick+0x20>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	4a03      	ldr	r2, [pc, #12]	; (8004a4c <HAL_IncTick+0x1c>)
 8004a40:	6013      	str	r3, [r2, #0]
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20012338 	.word	0x20012338
 8004a50:	20000038 	.word	0x20000038

08004a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return uwTick;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_GetTick+0x14>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20012338 	.word	0x20012338

08004a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7ff ffee 	bl	8004a54 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d004      	beq.n	8004a90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_Delay+0x40>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a90:	bf00      	nop
 8004a92:	f7ff ffdf 	bl	8004a54 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d8f7      	bhi.n	8004a92 <HAL_Delay+0x26>
  {
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000038 	.word	0x20000038

08004ab0 <LL_ADC_SetCommonClock>:
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_ADC_SetCommonPathInternalCh>:
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_GetCommonPathInternalCh>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <LL_ADC_SetOffset>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3360      	adds	r3, #96	; 0x60
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <LL_ADC_SetOffset+0x44>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	03fff000 	.word	0x03fff000

08004b60 <LL_ADC_GetOffsetChannel>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3360      	adds	r3, #96	; 0x60
 8004b6e:	461a      	mov	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_ADC_SetOffsetState>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3360      	adds	r3, #96	; 0x60
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_ADC_SetOffsetSign>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b087      	sub	sp, #28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3360      	adds	r3, #96	; 0x60
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	601a      	str	r2, [r3, #0]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_ADC_SetOffsetSaturation>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3360      	adds	r3, #96	; 0x60
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	615a      	str	r2, [r3, #20]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <LL_ADC_REG_SetSequencerRanks>:
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3330      	adds	r3, #48	; 0x30
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	4413      	add	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	211f      	movs	r1, #31
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	401a      	ands	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0e9b      	lsrs	r3, r3, #26
 8004cb2:	f003 011f 	and.w	r1, r3, #31
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_ADC_SetChannelSamplingTime>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	0e5b      	lsrs	r3, r3, #25
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	4413      	add	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	0d1b      	lsrs	r3, r3, #20
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	2107      	movs	r1, #7
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	401a      	ands	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	0d1b      	lsrs	r3, r3, #20
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	431a      	orrs	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	601a      	str	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_ADC_SetChannelSingleDiff>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10a      	bne.n	8004d52 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004d50:	e00a      	b.n	8004d68 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	401a      	ands	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	407f0000 	.word	0x407f0000

08004d78 <LL_ADC_DisableDeepPowerDown>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6093      	str	r3, [r2, #8]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_ADC_IsDeepPowerDownEnabled>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db0:	d101      	bne.n	8004db6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_ADC_EnableInternalRegulator>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_IsInternalRegulatorEnabled>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e00:	d101      	bne.n	8004e06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_ADC_Enable>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e28:	f043 0201 	orr.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_ADC_Disable>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e50:	f043 0202 	orr.w	r2, r3, #2
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_ADC_IsEnabled>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <LL_ADC_IsEnabled+0x18>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <LL_ADC_IsEnabled+0x1a>
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_ADC_IsDisableOngoing>:
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d101      	bne.n	8004ea2 <LL_ADC_IsDisableOngoing+0x18>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <LL_ADC_IsDisableOngoing+0x1a>
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d101      	bne.n	8004ec8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d101      	bne.n	8004eee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1af      	b.n	8005276 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fc f9bd 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff ff2d 	bl	8004d9c <LL_ADC_IsDeepPowerDownEnabled>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ff13 	bl	8004d78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff ff48 	bl	8004dec <LL_ADC_IsInternalRegulatorEnabled>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d115      	bne.n	8004f8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ff2c 	bl	8004dc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f6c:	4b9f      	ldr	r3, [pc, #636]	; (80051ec <HAL_ADC_Init+0x2f0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	099b      	lsrs	r3, r3, #6
 8004f72:	4a9f      	ldr	r2, [pc, #636]	; (80051f0 <HAL_ADC_Init+0x2f4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f80:	e002      	b.n	8004f88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f9      	bne.n	8004f82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ff2a 	bl	8004dec <LL_ADC_IsInternalRegulatorEnabled>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	f043 0210 	orr.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff76 	bl	8004eb0 <LL_ADC_REG_IsConversionOngoing>
 8004fc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 8148 	bne.w	8005264 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 8144 	bne.w	8005264 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004fe4:	f043 0202 	orr.w	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ff37 	bl	8004e64 <LL_ADC_IsEnabled>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d141      	bne.n	8005080 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005004:	d004      	beq.n	8005010 <HAL_ADC_Init+0x114>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7a      	ldr	r2, [pc, #488]	; (80051f4 <HAL_ADC_Init+0x2f8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10f      	bne.n	8005030 <HAL_ADC_Init+0x134>
 8005010:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005014:	f7ff ff26 	bl	8004e64 <LL_ADC_IsEnabled>
 8005018:	4604      	mov	r4, r0
 800501a:	4876      	ldr	r0, [pc, #472]	; (80051f4 <HAL_ADC_Init+0x2f8>)
 800501c:	f7ff ff22 	bl	8004e64 <LL_ADC_IsEnabled>
 8005020:	4603      	mov	r3, r0
 8005022:	4323      	orrs	r3, r4
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e012      	b.n	8005056 <HAL_ADC_Init+0x15a>
 8005030:	4871      	ldr	r0, [pc, #452]	; (80051f8 <HAL_ADC_Init+0x2fc>)
 8005032:	f7ff ff17 	bl	8004e64 <LL_ADC_IsEnabled>
 8005036:	4604      	mov	r4, r0
 8005038:	4870      	ldr	r0, [pc, #448]	; (80051fc <HAL_ADC_Init+0x300>)
 800503a:	f7ff ff13 	bl	8004e64 <LL_ADC_IsEnabled>
 800503e:	4603      	mov	r3, r0
 8005040:	431c      	orrs	r4, r3
 8005042:	486f      	ldr	r0, [pc, #444]	; (8005200 <HAL_ADC_Init+0x304>)
 8005044:	f7ff ff0e 	bl	8004e64 <LL_ADC_IsEnabled>
 8005048:	4603      	mov	r3, r0
 800504a:	4323      	orrs	r3, r4
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005062:	d004      	beq.n	800506e <HAL_ADC_Init+0x172>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a62      	ldr	r2, [pc, #392]	; (80051f4 <HAL_ADC_Init+0x2f8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <HAL_ADC_Init+0x176>
 800506e:	4a65      	ldr	r2, [pc, #404]	; (8005204 <HAL_ADC_Init+0x308>)
 8005070:	e000      	b.n	8005074 <HAL_ADC_Init+0x178>
 8005072:	4a65      	ldr	r2, [pc, #404]	; (8005208 <HAL_ADC_Init+0x30c>)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7ff fd18 	bl	8004ab0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7f5b      	ldrb	r3, [r3, #29]
 8005084:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800508a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005090:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005096:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800509e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d106      	bne.n	80050bc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	045b      	lsls	r3, r3, #17
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_ADC_Init+0x310>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	430b      	orrs	r3, r1
 80050ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fed2 	bl	8004eb0 <LL_ADC_REG_IsConversionOngoing>
 800510c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fedf 	bl	8004ed6 <LL_ADC_INJ_IsConversionOngoing>
 8005118:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d17f      	bne.n	8005220 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d17c      	bne.n	8005220 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800512a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005132:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005134:	4313      	orrs	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005142:	f023 0302 	bic.w	r3, r3, #2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	69b9      	ldr	r1, [r7, #24]
 800514c:	430b      	orrs	r3, r1
 800514e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d017      	beq.n	8005188 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005166:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005170:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6911      	ldr	r1, [r2, #16]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	430b      	orrs	r3, r1
 8005182:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005186:	e013      	b.n	80051b0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005196:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d12a      	bne.n	8005210 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051d0:	4311      	orrs	r1, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051dc:	430a      	orrs	r2, r1
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	611a      	str	r2, [r3, #16]
 80051ea:	e019      	b.n	8005220 <HAL_ADC_Init+0x324>
 80051ec:	20000030 	.word	0x20000030
 80051f0:	053e2d63 	.word	0x053e2d63
 80051f4:	50000100 	.word	0x50000100
 80051f8:	50000400 	.word	0x50000400
 80051fc:	50000500 	.word	0x50000500
 8005200:	50000600 	.word	0x50000600
 8005204:	50000300 	.word	0x50000300
 8005208:	50000700 	.word	0x50000700
 800520c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10c      	bne.n	8005242 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f023 010f 	bic.w	r1, r3, #15
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
 8005240:	e007      	b.n	8005252 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 020f 	bic.w	r2, r2, #15
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	65da      	str	r2, [r3, #92]	; 0x5c
 8005262:	e007      	b.n	8005274 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005268:	f043 0210 	orr.w	r2, r3, #16
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005274:	7ffb      	ldrb	r3, [r7, #31]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3724      	adds	r7, #36	; 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop

08005280 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b0b6      	sub	sp, #216	; 0xd8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d102      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x24>
 80052c6:	2302      	movs	r3, #2
 80052c8:	f000 bc13 	b.w	8005af2 <HAL_ADC_ConfigChannel+0x84a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fde9 	bl	8004eb0 <LL_ADC_REG_IsConversionOngoing>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 83f3 	bne.w	8005acc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7ff fcc1 	bl	8004c7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fdd7 	bl	8004eb0 <LL_ADC_REG_IsConversionOngoing>
 8005302:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fde3 	bl	8004ed6 <LL_ADC_INJ_IsConversionOngoing>
 8005310:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005314:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 81d9 	bne.w	80056d0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800531e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 81d4 	bne.w	80056d0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005330:	d10f      	bne.n	8005352 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	4619      	mov	r1, r3
 800533e:	f7ff fcc8 	bl	8004cd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fc6f 	bl	8004c2e <LL_ADC_SetSamplingTimeCommonConfig>
 8005350:	e00e      	b.n	8005370 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6819      	ldr	r1, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	461a      	mov	r2, r3
 8005360:	f7ff fcb7 	bl	8004cd2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fc5f 	bl	8004c2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	08db      	lsrs	r3, r3, #3
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d022      	beq.n	80053d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6919      	ldr	r1, [r3, #16]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053a2:	f7ff fbb9 	bl	8004b18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6919      	ldr	r1, [r3, #16]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7ff fc05 	bl	8004bc2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6919      	ldr	r1, [r3, #16]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	7f1b      	ldrb	r3, [r3, #28]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d102      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x126>
 80053c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053cc:	e000      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x128>
 80053ce:	2300      	movs	r3, #0
 80053d0:	461a      	mov	r2, r3
 80053d2:	f7ff fc11 	bl	8004bf8 <LL_ADC_SetOffsetSaturation>
 80053d6:	e17b      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fbbe 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x15c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fbb3 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 80053fa:	4603      	mov	r3, r0
 80053fc:	0e9b      	lsrs	r3, r3, #26
 80053fe:	f003 021f 	and.w	r2, r3, #31
 8005402:	e01e      	b.n	8005442 <HAL_ADC_ConfigChannel+0x19a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fba8 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 8005410:	4603      	mov	r3, r0
 8005412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005416:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800542a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005432:	2320      	movs	r3, #32
 8005434:	e004      	b.n	8005440 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_ADC_ConfigChannel+0x1b2>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	0e9b      	lsrs	r3, r3, #26
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	e018      	b.n	800548c <HAL_ADC_ConfigChannel+0x1e4>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005466:	fa93 f3a3 	rbit	r3, r3
 800546a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800546e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800547e:	2320      	movs	r3, #32
 8005480:	e004      	b.n	800548c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800548c:	429a      	cmp	r2, r3
 800548e:	d106      	bne.n	800549e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2200      	movs	r2, #0
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff fb77 	bl	8004b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fb5b 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x222>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fb50 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 80054c0:	4603      	mov	r3, r0
 80054c2:	0e9b      	lsrs	r3, r3, #26
 80054c4:	f003 021f 	and.w	r2, r3, #31
 80054c8:	e01e      	b.n	8005508 <HAL_ADC_ConfigChannel+0x260>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2101      	movs	r1, #1
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fb45 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054e0:	fa93 f3a3 	rbit	r3, r3
 80054e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80054e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80054f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80054f8:	2320      	movs	r3, #32
 80054fa:	e004      	b.n	8005506 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80054fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005500:	fab3 f383 	clz	r3, r3
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x278>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	0e9b      	lsrs	r3, r3, #26
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	e018      	b.n	8005552 <HAL_ADC_ConfigChannel+0x2aa>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800552c:	fa93 f3a3 	rbit	r3, r3
 8005530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005534:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800553c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005544:	2320      	movs	r3, #32
 8005546:	e004      	b.n	8005552 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800554c:	fab3 f383 	clz	r3, r3
 8005550:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005552:	429a      	cmp	r2, r3
 8005554:	d106      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	2101      	movs	r1, #1
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fb14 	bl	8004b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2102      	movs	r1, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff faf8 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 8005570:	4603      	mov	r3, r0
 8005572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x2e8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2102      	movs	r1, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff faed 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 8005586:	4603      	mov	r3, r0
 8005588:	0e9b      	lsrs	r3, r3, #26
 800558a:	f003 021f 	and.w	r2, r3, #31
 800558e:	e01e      	b.n	80055ce <HAL_ADC_ConfigChannel+0x326>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2102      	movs	r1, #2
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fae2 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 800559c:	4603      	mov	r3, r0
 800559e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80055ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80055b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80055be:	2320      	movs	r3, #32
 80055c0:	e004      	b.n	80055cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80055c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055c6:	fab3 f383 	clz	r3, r3
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <HAL_ADC_ConfigChannel+0x33e>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	0e9b      	lsrs	r3, r3, #26
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	e016      	b.n	8005614 <HAL_ADC_ConfigChannel+0x36c>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80055f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80055fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005606:	2320      	movs	r3, #32
 8005608:	e004      	b.n	8005614 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800560a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800560e:	fab3 f383 	clz	r3, r3
 8005612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005614:	429a      	cmp	r2, r3
 8005616:	d106      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2200      	movs	r2, #0
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fab3 	bl	8004b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2103      	movs	r1, #3
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fa97 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <HAL_ADC_ConfigChannel+0x3aa>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2103      	movs	r1, #3
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fa8c 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 8005648:	4603      	mov	r3, r0
 800564a:	0e9b      	lsrs	r3, r3, #26
 800564c:	f003 021f 	and.w	r2, r3, #31
 8005650:	e017      	b.n	8005682 <HAL_ADC_ConfigChannel+0x3da>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2103      	movs	r1, #3
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fa81 	bl	8004b60 <LL_ADC_GetOffsetChannel>
 800565e:	4603      	mov	r3, r0
 8005660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800566e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005674:	2320      	movs	r3, #32
 8005676:	e003      	b.n	8005680 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <HAL_ADC_ConfigChannel+0x3f2>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0e9b      	lsrs	r3, r3, #26
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	e011      	b.n	80056be <HAL_ADC_ConfigChannel+0x416>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80056a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80056ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80056b2:	2320      	movs	r3, #32
 80056b4:	e003      	b.n	80056be <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	fab3 f383 	clz	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056be:	429a      	cmp	r2, r3
 80056c0:	d106      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	2103      	movs	r1, #3
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fa5e 	bl	8004b8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fbc5 	bl	8004e64 <LL_ADC_IsEnabled>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 813d 	bne.w	800595c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7ff fb1a 	bl	8004d28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4aa2      	ldr	r2, [pc, #648]	; (8005984 <HAL_ADC_ConfigChannel+0x6dc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	f040 812e 	bne.w	800595c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x480>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	0e9b      	lsrs	r3, r3, #26
 8005716:	3301      	adds	r3, #1
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2b09      	cmp	r3, #9
 800571e:	bf94      	ite	ls
 8005720:	2301      	movls	r3, #1
 8005722:	2300      	movhi	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e019      	b.n	800575c <HAL_ADC_ConfigChannel+0x4b4>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	fa93 f3a3 	rbit	r3, r3
 8005734:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005738:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800573a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005740:	2320      	movs	r3, #32
 8005742:	e003      	b.n	800574c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	3301      	adds	r3, #1
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b09      	cmp	r3, #9
 8005754:	bf94      	ite	ls
 8005756:	2301      	movls	r3, #1
 8005758:	2300      	movhi	r3, #0
 800575a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800575c:	2b00      	cmp	r3, #0
 800575e:	d079      	beq.n	8005854 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005768:	2b00      	cmp	r3, #0
 800576a:	d107      	bne.n	800577c <HAL_ADC_ConfigChannel+0x4d4>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0e9b      	lsrs	r3, r3, #26
 8005772:	3301      	adds	r3, #1
 8005774:	069b      	lsls	r3, r3, #26
 8005776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800577a:	e015      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x500>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005784:	fa93 f3a3 	rbit	r3, r3
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800578a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800578e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005794:	2320      	movs	r3, #32
 8005796:	e003      	b.n	80057a0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579a:	fab3 f383 	clz	r3, r3
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	3301      	adds	r3, #1
 80057a2:	069b      	lsls	r3, r3, #26
 80057a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x520>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	0e9b      	lsrs	r3, r3, #26
 80057ba:	3301      	adds	r3, #1
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	e017      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x550>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d0:	fa93 f3a3 	rbit	r3, r3
 80057d4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80057d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80057e0:	2320      	movs	r3, #32
 80057e2:	e003      	b.n	80057ec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80057e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	3301      	adds	r3, #1
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	ea42 0103 	orr.w	r1, r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <HAL_ADC_ConfigChannel+0x576>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	0e9b      	lsrs	r3, r3, #26
 800580e:	3301      	adds	r3, #1
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	e018      	b.n	8005850 <HAL_ADC_ConfigChannel+0x5a8>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005836:	2320      	movs	r3, #32
 8005838:	e003      	b.n	8005842 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	fab3 f383 	clz	r3, r3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	3301      	adds	r3, #1
 8005844:	f003 021f 	and.w	r2, r3, #31
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005850:	430b      	orrs	r3, r1
 8005852:	e07e      	b.n	8005952 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x5c8>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0e9b      	lsrs	r3, r3, #26
 8005866:	3301      	adds	r3, #1
 8005868:	069b      	lsls	r3, r3, #26
 800586a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800586e:	e015      	b.n	800589c <HAL_ADC_ConfigChannel+0x5f4>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005888:	2320      	movs	r3, #32
 800588a:	e003      	b.n	8005894 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3301      	adds	r3, #1
 8005896:	069b      	lsls	r3, r3, #26
 8005898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x614>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	0e9b      	lsrs	r3, r3, #26
 80058ae:	3301      	adds	r3, #1
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	e017      	b.n	80058ec <HAL_ADC_ConfigChannel+0x644>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	fa93 f3a3 	rbit	r3, r3
 80058c8:	61fb      	str	r3, [r7, #28]
  return result;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80058d4:	2320      	movs	r3, #32
 80058d6:	e003      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	fab3 f383 	clz	r3, r3
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	3301      	adds	r3, #1
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	ea42 0103 	orr.w	r1, r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10d      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x670>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	0e9b      	lsrs	r3, r3, #26
 8005902:	3301      	adds	r3, #1
 8005904:	f003 021f 	and.w	r2, r3, #31
 8005908:	4613      	mov	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4413      	add	r3, r2
 800590e:	3b1e      	subs	r3, #30
 8005910:	051b      	lsls	r3, r3, #20
 8005912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005916:	e01b      	b.n	8005950 <HAL_ADC_ConfigChannel+0x6a8>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	613b      	str	r3, [r7, #16]
  return result;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005930:	2320      	movs	r3, #32
 8005932:	e003      	b.n	800593c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	3301      	adds	r3, #1
 800593e:	f003 021f 	and.w	r2, r3, #31
 8005942:	4613      	mov	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	4413      	add	r3, r2
 8005948:	3b1e      	subs	r3, #30
 800594a:	051b      	lsls	r3, r3, #20
 800594c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005950:	430b      	orrs	r3, r1
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	6892      	ldr	r2, [r2, #8]
 8005956:	4619      	mov	r1, r3
 8005958:	f7ff f9bb 	bl	8004cd2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_ADC_ConfigChannel+0x6e0>)
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80be 	beq.w	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005972:	d004      	beq.n	800597e <HAL_ADC_ConfigChannel+0x6d6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a04      	ldr	r2, [pc, #16]	; (800598c <HAL_ADC_ConfigChannel+0x6e4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10a      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x6ec>
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <HAL_ADC_ConfigChannel+0x6e8>)
 8005980:	e009      	b.n	8005996 <HAL_ADC_ConfigChannel+0x6ee>
 8005982:	bf00      	nop
 8005984:	407f0000 	.word	0x407f0000
 8005988:	80080000 	.word	0x80080000
 800598c:	50000100 	.word	0x50000100
 8005990:	50000300 	.word	0x50000300
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <HAL_ADC_ConfigChannel+0x854>)
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff f8b0 	bl	8004afc <LL_ADC_GetCommonPathInternalCh>
 800599c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a56      	ldr	r2, [pc, #344]	; (8005b00 <HAL_ADC_ConfigChannel+0x858>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_ADC_ConfigChannel+0x70c>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a55      	ldr	r2, [pc, #340]	; (8005b04 <HAL_ADC_ConfigChannel+0x85c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d13a      	bne.n	8005a2a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d134      	bne.n	8005a2a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059c8:	d005      	beq.n	80059d6 <HAL_ADC_ConfigChannel+0x72e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <HAL_ADC_ConfigChannel+0x860>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	f040 8085 	bne.w	8005ae0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059de:	d004      	beq.n	80059ea <HAL_ADC_ConfigChannel+0x742>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a49      	ldr	r2, [pc, #292]	; (8005b0c <HAL_ADC_ConfigChannel+0x864>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x746>
 80059ea:	4a49      	ldr	r2, [pc, #292]	; (8005b10 <HAL_ADC_ConfigChannel+0x868>)
 80059ec:	e000      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x748>
 80059ee:	4a43      	ldr	r2, [pc, #268]	; (8005afc <HAL_ADC_ConfigChannel+0x854>)
 80059f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7ff f86b 	bl	8004ad6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a00:	4b44      	ldr	r3, [pc, #272]	; (8005b14 <HAL_ADC_ConfigChannel+0x86c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	4a44      	ldr	r2, [pc, #272]	; (8005b18 <HAL_ADC_ConfigChannel+0x870>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	099b      	lsrs	r3, r3, #6
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a1a:	e002      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f9      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a28:	e05a      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <HAL_ADC_ConfigChannel+0x874>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d125      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x7d8>
 8005a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11f      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a31      	ldr	r2, [pc, #196]	; (8005b0c <HAL_ADC_ConfigChannel+0x864>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d104      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x7ac>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a34      	ldr	r2, [pc, #208]	; (8005b20 <HAL_ADC_ConfigChannel+0x878>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d047      	beq.n	8005ae4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a5c:	d004      	beq.n	8005a68 <HAL_ADC_ConfigChannel+0x7c0>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <HAL_ADC_ConfigChannel+0x864>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d101      	bne.n	8005a6c <HAL_ADC_ConfigChannel+0x7c4>
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <HAL_ADC_ConfigChannel+0x868>)
 8005a6a:	e000      	b.n	8005a6e <HAL_ADC_ConfigChannel+0x7c6>
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <HAL_ADC_ConfigChannel+0x854>)
 8005a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7ff f82c 	bl	8004ad6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a7e:	e031      	b.n	8005ae4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a27      	ldr	r2, [pc, #156]	; (8005b24 <HAL_ADC_ConfigChannel+0x87c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d12d      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d127      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_ADC_ConfigChannel+0x864>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa8:	d004      	beq.n	8005ab4 <HAL_ADC_ConfigChannel+0x80c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <HAL_ADC_ConfigChannel+0x864>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d101      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x810>
 8005ab4:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <HAL_ADC_ConfigChannel+0x868>)
 8005ab6:	e000      	b.n	8005aba <HAL_ADC_ConfigChannel+0x812>
 8005ab8:	4a10      	ldr	r2, [pc, #64]	; (8005afc <HAL_ADC_ConfigChannel+0x854>)
 8005aba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005abe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7ff f806 	bl	8004ad6 <LL_ADC_SetCommonPathInternalCh>
 8005aca:	e00c      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	f043 0220 	orr.w	r2, r3, #32
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005ade:	e002      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ae0:	bf00      	nop
 8005ae2:	e000      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ae4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	37d8      	adds	r7, #216	; 0xd8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	50000700 	.word	0x50000700
 8005b00:	c3210000 	.word	0xc3210000
 8005b04:	90c00010 	.word	0x90c00010
 8005b08:	50000600 	.word	0x50000600
 8005b0c:	50000100 	.word	0x50000100
 8005b10:	50000300 	.word	0x50000300
 8005b14:	20000030 	.word	0x20000030
 8005b18:	053e2d63 	.word	0x053e2d63
 8005b1c:	c7520000 	.word	0xc7520000
 8005b20:	50000500 	.word	0x50000500
 8005b24:	cb840000 	.word	0xcb840000

08005b28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff f995 	bl	8004e64 <LL_ADC_IsEnabled>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d14d      	bne.n	8005bdc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <ADC_Enable+0xc0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b52:	f043 0210 	orr.w	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5e:	f043 0201 	orr.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e039      	b.n	8005bde <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff f950 	bl	8004e14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b74:	f7fe ff6e 	bl	8004a54 <HAL_GetTick>
 8005b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b7a:	e028      	b.n	8005bce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff f96f 	bl	8004e64 <LL_ADC_IsEnabled>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff f93f 	bl	8004e14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b96:	f7fe ff5d 	bl	8004a54 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d914      	bls.n	8005bce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d00d      	beq.n	8005bce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb6:	f043 0210 	orr.w	r2, r3, #16
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc2:	f043 0201 	orr.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e007      	b.n	8005bde <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d1cf      	bne.n	8005b7c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	8000003f 	.word	0x8000003f

08005bec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff f946 	bl	8004e8a <LL_ADC_IsDisableOngoing>
 8005bfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff f92d 	bl	8004e64 <LL_ADC_IsEnabled>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d047      	beq.n	8005ca0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d144      	bne.n	8005ca0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030d 	and.w	r3, r3, #13
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d10c      	bne.n	8005c3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff f907 	bl	8004e3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2203      	movs	r2, #3
 8005c34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c36:	f7fe ff0d 	bl	8004a54 <HAL_GetTick>
 8005c3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c3c:	e029      	b.n	8005c92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c42:	f043 0210 	orr.w	r2, r3, #16
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e023      	b.n	8005ca2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c5a:	f7fe fefb 	bl	8004a54 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d914      	bls.n	8005c92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	f043 0210 	orr.w	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e007      	b.n	8005ca2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1dc      	bne.n	8005c5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d14b      	bne.n	8005d5c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d021      	beq.n	8005d22 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe ffb6 	bl	8004c54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d032      	beq.n	8005d54 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d12b      	bne.n	8005d54 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d11f      	bne.n	8005d54 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	f043 0201 	orr.w	r2, r3, #1
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d20:	e018      	b.n	8005d54 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d111      	bne.n	8005d54 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7fd fa65 	bl	8003224 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d5a:	e00e      	b.n	8005d7a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fa93 	bl	8005294 <HAL_ADC_ErrorCallback>
}
 8005d6e:	e004      	b.n	8005d7a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fa75 	bl	8005280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbc:	f043 0204 	orr.w	r2, r3, #4
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fa65 	bl	8005294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <LL_ADC_IsEnabled>:
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <LL_ADC_IsEnabled+0x18>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <LL_ADC_IsEnabled+0x1a>
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_ADC_StartCalibration>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	609a      	str	r2, [r3, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <LL_ADC_IsCalibrationOnGoing>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3e:	d101      	bne.n	8005e44 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_ADC_REG_StartConversion>:
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <LL_ADC_REG_IsConversionOngoing>:
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d101      	bne.n	8005e92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_ADCEx_Calibration_Start+0x1c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e04d      	b.n	8005f58 <HAL_ADCEx_Calibration_Start+0xb8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fe91 	bl	8005bec <ADC_Disable>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d136      	bne.n	8005f42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005edc:	f023 0302 	bic.w	r3, r3, #2
 8005ee0:	f043 0202 	orr.w	r2, r3, #2
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff ff82 	bl	8005df8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ef4:	e014      	b.n	8005f20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d90d      	bls.n	8005f20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	f023 0312 	bic.w	r3, r3, #18
 8005f0c:	f043 0210 	orr.w	r2, r3, #16
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e01b      	b.n	8005f58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff ff80 	bl	8005e2a <LL_ADC_IsCalibrationOnGoing>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e2      	bne.n	8005ef6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	f023 0303 	bic.w	r3, r3, #3
 8005f38:	f043 0201 	orr.w	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f40:	e005      	b.n	8005f4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	f043 0210 	orr.w	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	0004de01 	.word	0x0004de01

08005f64 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b0a2      	sub	sp, #136	; 0x88
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff80 	bl	8005e7a <LL_ADC_REG_IsConversionOngoing>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8005f80:	2302      	movs	r3, #2
 8005f82:	e096      	b.n	80060b2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e08f      	b.n	80060b2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005faa:	d102      	bne.n	8005fb2 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8005fac:	4b43      	ldr	r3, [pc, #268]	; (80060bc <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e009      	b.n	8005fc6 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a42      	ldr	r2, [pc, #264]	; (80060c0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d102      	bne.n	8005fc2 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 8005fbc:	4b41      	ldr	r3, [pc, #260]	; (80060c4 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e001      	b.n	8005fc6 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd0:	f043 0220 	orr.w	r2, r3, #32
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e066      	b.n	80060b2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fd9f 	bl	8005b28 <ADC_Enable>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8005ff0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fd93 	bl	8005b28 <ADC_Enable>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006008:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800600c:	2b00      	cmp	r3, #0
 800600e:	d14a      	bne.n	80060a6 <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	4a26      	ldr	r2, [pc, #152]	; (80060c8 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8006030:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	4a25      	ldr	r2, [pc, #148]	; (80060cc <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8006038:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	4a24      	ldr	r2, [pc, #144]	; (80060d0 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8006040:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800604a:	d004      	beq.n	8006056 <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 8006056:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8006058:	e000      	b.n	800605c <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 800605c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	221c      	movs	r2, #28
 8006066:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0210 	orr.w	r2, r2, #16
 800607e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006088:	330c      	adds	r3, #12
 800608a:	4619      	mov	r1, r3
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f000 fce2 	bl	8006a58 <HAL_DMA_Start_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fed7 	bl	8005e52 <LL_ADC_REG_StartConversion>
 80060a4:	e003      	b.n	80060ae <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80060ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3788      	adds	r7, #136	; 0x88
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	50000100 	.word	0x50000100
 80060c0:	50000400 	.word	0x50000400
 80060c4:	50000500 	.word	0x50000500
 80060c8:	08005cab 	.word	0x08005cab
 80060cc:	08005d83 	.word	0x08005d83
 80060d0:	08005d9f 	.word	0x08005d9f
 80060d4:	50000300 	.word	0x50000300
 80060d8:	50000700 	.word	0x50000700

080060dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b0a1      	sub	sp, #132	; 0x84
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0e7      	b.n	80062ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006102:	2300      	movs	r3, #0
 8006104:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006106:	2300      	movs	r3, #0
 8006108:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006112:	d102      	bne.n	800611a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006114:	4b6f      	ldr	r3, [pc, #444]	; (80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006116:	60bb      	str	r3, [r7, #8]
 8006118:	e009      	b.n	800612e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a6e      	ldr	r2, [pc, #440]	; (80062d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d102      	bne.n	800612a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006124:	4b6d      	ldr	r3, [pc, #436]	; (80062dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	e001      	b.n	800612e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0be      	b.n	80062ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fe93 	bl	8005e7a <LL_ADC_REG_IsConversionOngoing>
 8006154:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fe8d 	bl	8005e7a <LL_ADC_REG_IsConversionOngoing>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80a0 	bne.w	80062a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 809c 	bne.w	80062a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006178:	d004      	beq.n	8006184 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a55      	ldr	r2, [pc, #340]	; (80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d101      	bne.n	8006188 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006184:	4b56      	ldr	r3, [pc, #344]	; (80062e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006186:	e000      	b.n	800618a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006188:	4b56      	ldr	r3, [pc, #344]	; (80062e4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800618a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d04b      	beq.n	800622c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061a6:	035b      	lsls	r3, r3, #13
 80061a8:	430b      	orrs	r3, r1
 80061aa:	431a      	orrs	r2, r3
 80061ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061b8:	d004      	beq.n	80061c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a45      	ldr	r2, [pc, #276]	; (80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d10f      	bne.n	80061e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80061c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80061c8:	f7ff fe03 	bl	8005dd2 <LL_ADC_IsEnabled>
 80061cc:	4604      	mov	r4, r0
 80061ce:	4841      	ldr	r0, [pc, #260]	; (80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80061d0:	f7ff fdff 	bl	8005dd2 <LL_ADC_IsEnabled>
 80061d4:	4603      	mov	r3, r0
 80061d6:	4323      	orrs	r3, r4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e012      	b.n	800620a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80061e4:	483c      	ldr	r0, [pc, #240]	; (80062d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80061e6:	f7ff fdf4 	bl	8005dd2 <LL_ADC_IsEnabled>
 80061ea:	4604      	mov	r4, r0
 80061ec:	483b      	ldr	r0, [pc, #236]	; (80062dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80061ee:	f7ff fdf0 	bl	8005dd2 <LL_ADC_IsEnabled>
 80061f2:	4603      	mov	r3, r0
 80061f4:	431c      	orrs	r4, r3
 80061f6:	483c      	ldr	r0, [pc, #240]	; (80062e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80061f8:	f7ff fdeb 	bl	8005dd2 <LL_ADC_IsEnabled>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4323      	orrs	r3, r4
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d056      	beq.n	80062bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800620e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006216:	f023 030f 	bic.w	r3, r3, #15
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	6811      	ldr	r1, [r2, #0]
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	6892      	ldr	r2, [r2, #8]
 8006222:	430a      	orrs	r2, r1
 8006224:	431a      	orrs	r2, r3
 8006226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006228:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800622a:	e047      	b.n	80062bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800622c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006236:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006240:	d004      	beq.n	800624c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10f      	bne.n	800626c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800624c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006250:	f7ff fdbf 	bl	8005dd2 <LL_ADC_IsEnabled>
 8006254:	4604      	mov	r4, r0
 8006256:	481f      	ldr	r0, [pc, #124]	; (80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006258:	f7ff fdbb 	bl	8005dd2 <LL_ADC_IsEnabled>
 800625c:	4603      	mov	r3, r0
 800625e:	4323      	orrs	r3, r4
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e012      	b.n	8006292 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800626c:	481a      	ldr	r0, [pc, #104]	; (80062d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800626e:	f7ff fdb0 	bl	8005dd2 <LL_ADC_IsEnabled>
 8006272:	4604      	mov	r4, r0
 8006274:	4819      	ldr	r0, [pc, #100]	; (80062dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006276:	f7ff fdac 	bl	8005dd2 <LL_ADC_IsEnabled>
 800627a:	4603      	mov	r3, r0
 800627c:	431c      	orrs	r4, r3
 800627e:	481a      	ldr	r0, [pc, #104]	; (80062e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006280:	f7ff fda7 	bl	8005dd2 <LL_ADC_IsEnabled>
 8006284:	4603      	mov	r3, r0
 8006286:	4323      	orrs	r3, r4
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d012      	beq.n	80062bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800629e:	f023 030f 	bic.w	r3, r3, #15
 80062a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80062a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062a6:	e009      	b.n	80062bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	f043 0220 	orr.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80062ba:	e000      	b.n	80062be <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80062c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3784      	adds	r7, #132	; 0x84
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd90      	pop	{r4, r7, pc}
 80062d2:	bf00      	nop
 80062d4:	50000100 	.word	0x50000100
 80062d8:	50000400 	.word	0x50000400
 80062dc:	50000500 	.word	0x50000500
 80062e0:	50000300 	.word	0x50000300
 80062e4:	50000700 	.word	0x50000700
 80062e8:	50000600 	.word	0x50000600

080062ec <__NVIC_SetPriorityGrouping>:
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006308:	4013      	ands	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800631e:	4a04      	ldr	r2, [pc, #16]	; (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	60d3      	str	r3, [r2, #12]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <__NVIC_GetPriorityGrouping>:
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <__NVIC_GetPriorityGrouping+0x18>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	f003 0307 	and.w	r3, r3, #7
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <__NVIC_EnableIRQ>:
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	db0b      	blt.n	800637a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	f003 021f 	and.w	r2, r3, #31
 8006368:	4907      	ldr	r1, [pc, #28]	; (8006388 <__NVIC_EnableIRQ+0x38>)
 800636a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	2001      	movs	r0, #1
 8006372:	fa00 f202 	lsl.w	r2, r0, r2
 8006376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e000e100 	.word	0xe000e100

0800638c <__NVIC_SetPriority>:
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db0a      	blt.n	80063b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	490c      	ldr	r1, [pc, #48]	; (80063d8 <__NVIC_SetPriority+0x4c>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	440b      	add	r3, r1
 80063b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063b4:	e00a      	b.n	80063cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4908      	ldr	r1, [pc, #32]	; (80063dc <__NVIC_SetPriority+0x50>)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	3b04      	subs	r3, #4
 80063c4:	0112      	lsls	r2, r2, #4
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	440b      	add	r3, r1
 80063ca:	761a      	strb	r2, [r3, #24]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000e100 	.word	0xe000e100
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <NVIC_EncodePriority>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f1c3 0307 	rsb	r3, r3, #7
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf28      	it	cs
 80063fe:	2304      	movcs	r3, #4
 8006400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3304      	adds	r3, #4
 8006406:	2b06      	cmp	r3, #6
 8006408:	d902      	bls.n	8006410 <NVIC_EncodePriority+0x30>
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3b03      	subs	r3, #3
 800640e:	e000      	b.n	8006412 <NVIC_EncodePriority+0x32>
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006414:	f04f 32ff 	mov.w	r2, #4294967295
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43da      	mvns	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	401a      	ands	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006428:	f04f 31ff 	mov.w	r1, #4294967295
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	43d9      	mvns	r1, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006438:	4313      	orrs	r3, r2
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <SysTick_Config>:
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006458:	d301      	bcc.n	800645e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800645a:	2301      	movs	r3, #1
 800645c:	e00f      	b.n	800647e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <SysTick_Config+0x40>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006466:	210f      	movs	r1, #15
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f7ff ff8e 	bl	800638c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <SysTick_Config+0x40>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <SysTick_Config+0x40>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	e000e010 	.word	0xe000e010

0800648c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff29 	bl	80062ec <__NVIC_SetPriorityGrouping>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	4603      	mov	r3, r0
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064b0:	f7ff ff40 	bl	8006334 <__NVIC_GetPriorityGrouping>
 80064b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	6978      	ldr	r0, [r7, #20]
 80064bc:	f7ff ff90 	bl	80063e0 <NVIC_EncodePriority>
 80064c0:	4602      	mov	r2, r0
 80064c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ff5f 	bl	800638c <__NVIC_SetPriority>
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	4603      	mov	r3, r0
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ff33 	bl	8006350 <__NVIC_EnableIRQ>
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff ffa4 	bl	8006448 <SysTick_Config>
 8006500:	4603      	mov	r3, r0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e054      	b.n	80065c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	7f5b      	ldrb	r3, [r3, #29]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fa ffec 	bl	800150c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	791b      	ldrb	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10c      	bne.n	800655c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a22      	ldr	r2, [pc, #136]	; (80065d0 <HAL_CRC_Init+0xc4>)
 8006548:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0218 	bic.w	r2, r2, #24
 8006558:	609a      	str	r2, [r3, #8]
 800655a:	e00c      	b.n	8006576 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6899      	ldr	r1, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	461a      	mov	r2, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f948 	bl	80067fc <HAL_CRCEx_Polynomial_Set>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e028      	b.n	80065c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	795b      	ldrb	r3, [r3, #5]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d105      	bne.n	800658a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f04f 32ff 	mov.w	r2, #4294967295
 8006586:	611a      	str	r2, [r3, #16]
 8006588:	e004      	b.n	8006594 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6912      	ldr	r2, [r2, #16]
 8006592:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	04c11db7 	.word	0x04c11db7

080065d4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2202      	movs	r2, #2
 80065e8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0201 	orr.w	r2, r2, #1
 80065f8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d006      	beq.n	8006610 <HAL_CRC_Calculate+0x3c>
 8006602:	2b03      	cmp	r3, #3
 8006604:	d829      	bhi.n	800665a <HAL_CRC_Calculate+0x86>
 8006606:	2b01      	cmp	r3, #1
 8006608:	d019      	beq.n	800663e <HAL_CRC_Calculate+0x6a>
 800660a:	2b02      	cmp	r3, #2
 800660c:	d01e      	beq.n	800664c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800660e:	e024      	b.n	800665a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	e00a      	b.n	800662c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	3301      	adds	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3f0      	bcc.n	8006616 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]
      break;
 800663c:	e00e      	b.n	800665c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f812 	bl	800666c <CRC_Handle_8>
 8006648:	6138      	str	r0, [r7, #16]
      break;
 800664a:	e007      	b.n	800665c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f899 	bl	8006788 <CRC_Handle_16>
 8006656:	6138      	str	r0, [r7, #16]
      break;
 8006658:	e000      	b.n	800665c <HAL_CRC_Calculate+0x88>
      break;
 800665a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006662:	693b      	ldr	r3, [r7, #16]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	; 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	e023      	b.n	80066c6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4413      	add	r3, r2
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	3301      	adds	r3, #1
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	440b      	add	r3, r1
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006698:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	3302      	adds	r3, #2
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	440b      	add	r3, r1
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80066a8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	3303      	adds	r3, #3
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	440b      	add	r3, r1
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80066bc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80066be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d3d6      	bcc.n	800667e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d04d      	beq.n	8006776 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d107      	bne.n	80066f4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	4413      	add	r3, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d116      	bne.n	800672c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	b21a      	sxth	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	3301      	adds	r3, #1
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	440b      	add	r3, r1
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b21b      	sxth	r3, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	b21b      	sxth	r3, r3
 800671e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	8b7a      	ldrh	r2, [r7, #26]
 800672a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b03      	cmp	r3, #3
 8006734:	d11f      	bne.n	8006776 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4413      	add	r3, r2
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	b21a      	sxth	r2, r3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	3301      	adds	r3, #1
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	440b      	add	r3, r1
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b21b      	sxth	r3, r3
 8006752:	4313      	orrs	r3, r2
 8006754:	b21b      	sxth	r3, r3
 8006756:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	8b7a      	ldrh	r2, [r7, #26]
 8006762:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	3302      	adds	r3, #2
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3724      	adds	r7, #36	; 0x24
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e013      	b.n	80067c2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	041a      	lsls	r2, r3, #16
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	3302      	adds	r3, #2
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	440b      	add	r3, r1
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	4619      	mov	r1, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3301      	adds	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d3e6      	bcc.n	800679a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4413      	add	r3, r2
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800680c:	231f      	movs	r3, #31
 800680e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006810:	bf00      	nop
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1e5a      	subs	r2, r3, #1
 8006816:	613a      	str	r2, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_CRCEx_Polynomial_Set+0x34>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b18      	cmp	r3, #24
 8006834:	d846      	bhi.n	80068c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	080068cb 	.word	0x080068cb
 8006840:	080068c5 	.word	0x080068c5
 8006844:	080068c5 	.word	0x080068c5
 8006848:	080068c5 	.word	0x080068c5
 800684c:	080068c5 	.word	0x080068c5
 8006850:	080068c5 	.word	0x080068c5
 8006854:	080068c5 	.word	0x080068c5
 8006858:	080068c5 	.word	0x080068c5
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068c5 	.word	0x080068c5
 8006864:	080068c5 	.word	0x080068c5
 8006868:	080068c5 	.word	0x080068c5
 800686c:	080068c5 	.word	0x080068c5
 8006870:	080068c5 	.word	0x080068c5
 8006874:	080068c5 	.word	0x080068c5
 8006878:	080068c5 	.word	0x080068c5
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068c5 	.word	0x080068c5
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068c5 	.word	0x080068c5
 800688c:	080068c5 	.word	0x080068c5
 8006890:	080068c5 	.word	0x080068c5
 8006894:	080068c5 	.word	0x080068c5
 8006898:	080068c5 	.word	0x080068c5
 800689c:	080068a1 	.word	0x080068a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b06      	cmp	r3, #6
 80068a4:	d913      	bls.n	80068ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80068aa:	e010      	b.n	80068ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	d90f      	bls.n	80068d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80068b6:	e00c      	b.n	80068d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b0f      	cmp	r3, #15
 80068bc:	d90b      	bls.n	80068d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80068c2:	e008      	b.n	80068d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
      break;
 80068c8:	e006      	b.n	80068d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80068ca:	bf00      	nop
 80068cc:	e004      	b.n	80068d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80068ce:	bf00      	nop
 80068d0:	e002      	b.n	80068d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80068d2:	bf00      	nop
 80068d4:	e000      	b.n	80068d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80068d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f023 0118 	bic.w	r1, r3, #24
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e08d      	b.n	8006a36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_DMA_Init+0x138>)
 8006922:	429a      	cmp	r2, r3
 8006924:	d80f      	bhi.n	8006946 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	4b45      	ldr	r3, [pc, #276]	; (8006a44 <HAL_DMA_Init+0x13c>)
 800692e:	4413      	add	r3, r2
 8006930:	4a45      	ldr	r2, [pc, #276]	; (8006a48 <HAL_DMA_Init+0x140>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	009a      	lsls	r2, r3, #2
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <HAL_DMA_Init+0x144>)
 8006942:	641a      	str	r2, [r3, #64]	; 0x40
 8006944:	e00e      	b.n	8006964 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	4b40      	ldr	r3, [pc, #256]	; (8006a50 <HAL_DMA_Init+0x148>)
 800694e:	4413      	add	r3, r2
 8006950:	4a3d      	ldr	r2, [pc, #244]	; (8006a48 <HAL_DMA_Init+0x140>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	009a      	lsls	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a3c      	ldr	r2, [pc, #240]	; (8006a54 <HAL_DMA_Init+0x14c>)
 8006962:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fabe 	bl	8006f38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069c4:	d102      	bne.n	80069cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <HAL_DMA_Init+0x104>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d80c      	bhi.n	8006a0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fade 	bl	8006fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a08:	605a      	str	r2, [r3, #4]
 8006a0a:	e008      	b.n	8006a1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40020407 	.word	0x40020407
 8006a44:	bffdfff8 	.word	0xbffdfff8
 8006a48:	cccccccd 	.word	0xcccccccd
 8006a4c:	40020000 	.word	0x40020000
 8006a50:	bffdfbf8 	.word	0xbffdfbf8
 8006a54:	40020400 	.word	0x40020400

08006a58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_DMA_Start_IT+0x20>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e066      	b.n	8006b46 <HAL_DMA_Start_IT+0xee>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d155      	bne.n	8006b38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fa03 	bl	8006ebc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 020e 	orr.w	r2, r2, #14
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e00f      	b.n	8006af0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0204 	bic.w	r2, r2, #4
 8006ade:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 020a 	orr.w	r2, r2, #10
 8006aee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e005      	b.n	8006b44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
 8006b42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d005      	beq.n	8006b72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	e037      	b.n	8006be2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 020e 	bic.w	r2, r2, #14
 8006b80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	f003 021f 	and.w	r2, r3, #31
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	2101      	movs	r1, #1
 8006bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00c      	beq.n	8006be2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006be0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d00d      	beq.n	8006c34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e047      	b.n	8006cc4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 020e 	bic.w	r2, r2, #14
 8006c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	f003 021f 	and.w	r2, r3, #31
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f202 	lsl.w	r2, r1, r2
 8006c76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00c      	beq.n	8006ca4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006ca2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
    }
  }
  return status;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2204      	movs	r2, #4
 8006cf0:	409a      	lsls	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d026      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x7a>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d021      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d107      	bne.n	8006d22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0204 	bic.w	r2, r2, #4
 8006d20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d26:	f003 021f 	and.w	r2, r3, #31
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2104      	movs	r1, #4
 8006d30:	fa01 f202 	lsl.w	r2, r1, r2
 8006d34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d071      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d46:	e06c      	b.n	8006e22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	2202      	movs	r2, #2
 8006d52:	409a      	lsls	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d02e      	beq.n	8006dba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d029      	beq.n	8006dba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 020a 	bic.w	r2, r2, #10
 8006d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	f003 021f 	and.w	r2, r3, #31
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	2102      	movs	r1, #2
 8006d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d038      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006db8:	e033      	b.n	8006e22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d02a      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d025      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 020e 	bic.w	r2, r2, #14
 8006de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dec:	f003 021f 	and.w	r2, r3, #31
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f202 	lsl.w	r2, r1, r2
 8006dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
}
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	460b      	mov	r3, r1
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_DMA_RegisterCallback+0x20>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e031      	b.n	8006eb0 <HAL_DMA_RegisterCallback+0x84>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d120      	bne.n	8006ea2 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d81a      	bhi.n	8006e9c <HAL_DMA_RegisterCallback+0x70>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <HAL_DMA_RegisterCallback+0x40>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006e8d 	.word	0x08006e8d
 8006e78:	08006e95 	.word	0x08006e95
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8006e82:	e010      	b.n	8006ea6 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8006e8a:	e00c      	b.n	8006ea6 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8006e92:	e008      	b.n	8006ea6 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8006e9a:	e004      	b.n	8006ea6 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	75fb      	strb	r3, [r7, #23]
        break;
 8006ea0:	e001      	b.n	8006ea6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ed2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006ee4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	f003 021f 	and.w	r2, r3, #31
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b10      	cmp	r3, #16
 8006f08:	d108      	bne.n	8006f1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f1a:	e007      	b.n	8006f2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	60da      	str	r2, [r3, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d802      	bhi.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006f4c:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e001      	b.n	8006f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006f54:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	3b08      	subs	r3, #8
 8006f62:	4a12      	ldr	r2, [pc, #72]	; (8006fac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	089b      	lsrs	r3, r3, #2
 8006f72:	009a      	lsls	r2, r3, #2
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006f82:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40020407 	.word	0x40020407
 8006fa4:	40020800 	.word	0x40020800
 8006fa8:	40020820 	.word	0x40020820
 8006fac:	cccccccd 	.word	0xcccccccd
 8006fb0:	40020880 	.word	0x40020880

08006fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006fd6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	409a      	lsls	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	1000823f 	.word	0x1000823f
 8006ff8:	40020940 	.word	0x40020940

08006ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800700a:	e15a      	b.n	80072c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	2101      	movs	r1, #1
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	fa01 f303 	lsl.w	r3, r1, r3
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 814c 	beq.w	80072bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	2b01      	cmp	r3, #1
 800702e:	d005      	beq.n	800703c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007038:	2b02      	cmp	r3, #2
 800703a:	d130      	bne.n	800709e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	2203      	movs	r2, #3
 8007048:	fa02 f303 	lsl.w	r3, r2, r3
 800704c:	43db      	mvns	r3, r3
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4013      	ands	r3, r2
 8007052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007072:	2201      	movs	r2, #1
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	43db      	mvns	r3, r3
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4013      	ands	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	091b      	lsrs	r3, r3, #4
 8007088:	f003 0201 	and.w	r2, r3, #1
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d017      	beq.n	80070da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	2203      	movs	r2, #3
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	43db      	mvns	r3, r3
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4013      	ands	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d123      	bne.n	800712e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	08da      	lsrs	r2, r3, #3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3208      	adds	r2, #8
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	220f      	movs	r2, #15
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43db      	mvns	r3, r3
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4013      	ands	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	08da      	lsrs	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3208      	adds	r2, #8
 8007128:	6939      	ldr	r1, [r7, #16]
 800712a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	2203      	movs	r2, #3
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	43db      	mvns	r3, r3
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4013      	ands	r3, r2
 8007144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f003 0203 	and.w	r2, r3, #3
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80a6 	beq.w	80072bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007170:	4b5b      	ldr	r3, [pc, #364]	; (80072e0 <HAL_GPIO_Init+0x2e4>)
 8007172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007174:	4a5a      	ldr	r2, [pc, #360]	; (80072e0 <HAL_GPIO_Init+0x2e4>)
 8007176:	f043 0301 	orr.w	r3, r3, #1
 800717a:	6613      	str	r3, [r2, #96]	; 0x60
 800717c:	4b58      	ldr	r3, [pc, #352]	; (80072e0 <HAL_GPIO_Init+0x2e4>)
 800717e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007188:	4a56      	ldr	r2, [pc, #344]	; (80072e4 <HAL_GPIO_Init+0x2e8>)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	089b      	lsrs	r3, r3, #2
 800718e:	3302      	adds	r3, #2
 8007190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	220f      	movs	r2, #15
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	43db      	mvns	r3, r3
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4013      	ands	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071b2:	d01f      	beq.n	80071f4 <HAL_GPIO_Init+0x1f8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a4c      	ldr	r2, [pc, #304]	; (80072e8 <HAL_GPIO_Init+0x2ec>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d019      	beq.n	80071f0 <HAL_GPIO_Init+0x1f4>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a4b      	ldr	r2, [pc, #300]	; (80072ec <HAL_GPIO_Init+0x2f0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d013      	beq.n	80071ec <HAL_GPIO_Init+0x1f0>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <HAL_GPIO_Init+0x2f4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00d      	beq.n	80071e8 <HAL_GPIO_Init+0x1ec>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a49      	ldr	r2, [pc, #292]	; (80072f4 <HAL_GPIO_Init+0x2f8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <HAL_GPIO_Init+0x1e8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a48      	ldr	r2, [pc, #288]	; (80072f8 <HAL_GPIO_Init+0x2fc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d101      	bne.n	80071e0 <HAL_GPIO_Init+0x1e4>
 80071dc:	2305      	movs	r3, #5
 80071de:	e00a      	b.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071e0:	2306      	movs	r3, #6
 80071e2:	e008      	b.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071e4:	2304      	movs	r3, #4
 80071e6:	e006      	b.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071e8:	2303      	movs	r3, #3
 80071ea:	e004      	b.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e002      	b.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <HAL_GPIO_Init+0x1fa>
 80071f4:	2300      	movs	r3, #0
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	f002 0203 	and.w	r2, r2, #3
 80071fc:	0092      	lsls	r2, r2, #2
 80071fe:	4093      	lsls	r3, r2
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007206:	4937      	ldr	r1, [pc, #220]	; (80072e4 <HAL_GPIO_Init+0x2e8>)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	089b      	lsrs	r3, r3, #2
 800720c:	3302      	adds	r3, #2
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007214:	4b39      	ldr	r3, [pc, #228]	; (80072fc <HAL_GPIO_Init+0x300>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	43db      	mvns	r3, r3
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4013      	ands	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007238:	4a30      	ldr	r2, [pc, #192]	; (80072fc <HAL_GPIO_Init+0x300>)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800723e:	4b2f      	ldr	r3, [pc, #188]	; (80072fc <HAL_GPIO_Init+0x300>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	43db      	mvns	r3, r3
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4013      	ands	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007262:	4a26      	ldr	r2, [pc, #152]	; (80072fc <HAL_GPIO_Init+0x300>)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007268:	4b24      	ldr	r3, [pc, #144]	; (80072fc <HAL_GPIO_Init+0x300>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	43db      	mvns	r3, r3
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4013      	ands	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800728c:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <HAL_GPIO_Init+0x300>)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007292:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <HAL_GPIO_Init+0x300>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	43db      	mvns	r3, r3
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4013      	ands	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072b6:	4a11      	ldr	r2, [pc, #68]	; (80072fc <HAL_GPIO_Init+0x300>)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3301      	adds	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f47f ae9d 	bne.w	800700c <HAL_GPIO_Init+0x10>
  }
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40021000 	.word	0x40021000
 80072e4:	40010000 	.word	0x40010000
 80072e8:	48000400 	.word	0x48000400
 80072ec:	48000800 	.word	0x48000800
 80072f0:	48000c00 	.word	0x48000c00
 80072f4:	48001000 	.word	0x48001000
 80072f8:	48001400 	.word	0x48001400
 80072fc:	40010400 	.word	0x40010400

08007300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	4013      	ands	r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	e001      	b.n	8007322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	807b      	strh	r3, [r7, #2]
 800733c:	4613      	mov	r3, r2
 800733e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007340:	787b      	ldrb	r3, [r7, #1]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007346:	887a      	ldrh	r2, [r7, #2]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800734c:	e002      	b.n	8007354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007372:	887a      	ldrh	r2, [r7, #2]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4013      	ands	r3, r2
 8007378:	041a      	lsls	r2, r3, #16
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	43d9      	mvns	r1, r3
 800737e:	887b      	ldrh	r3, [r7, #2]
 8007380:	400b      	ands	r3, r1
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	619a      	str	r2, [r3, #24]
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800739e:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d006      	beq.n	80073b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073aa:	4a05      	ldr	r2, [pc, #20]	; (80073c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fb fed0 	bl	8003158 <HAL_GPIO_EXTI_Callback>
  }
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40010400 	.word	0x40010400

080073c4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e0be      	b.n	8007554 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d02e      	beq.n	8007480 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a4d      	ldr	r2, [pc, #308]	; (800755c <HAL_HRTIM_Init+0x198>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d10b      	bne.n	8007444 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800742c:	4b4c      	ldr	r3, [pc, #304]	; (8007560 <HAL_HRTIM_Init+0x19c>)
 800742e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007430:	4a4b      	ldr	r2, [pc, #300]	; (8007560 <HAL_HRTIM_Init+0x19c>)
 8007432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007436:	6613      	str	r3, [r2, #96]	; 0x60
 8007438:	4b49      	ldr	r3, [pc, #292]	; (8007560 <HAL_HRTIM_Init+0x19c>)
 800743a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007452:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007468:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fa fa8b 	bl	800199c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d012      	beq.n	80074b8 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]
 80074cc:	e03e      	b.n	800754c <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80074ce:	7dfa      	ldrb	r2, [r7, #23]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	3318      	adds	r3, #24
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80074e2:	7dfa      	ldrb	r2, [r7, #23]
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	331c      	adds	r3, #28
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80074f6:	7dfa      	ldrb	r2, [r7, #23]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	3320      	adds	r3, #32
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800750a:	7dfa      	ldrb	r2, [r7, #23]
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	3324      	adds	r3, #36	; 0x24
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800751e:	7dfa      	ldrb	r2, [r7, #23]
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	3328      	adds	r3, #40	; 0x28
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007532:	7dfa      	ldrb	r2, [r7, #23]
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	3330      	adds	r3, #48	; 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	3301      	adds	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b06      	cmp	r3, #6
 8007550:	d9bd      	bls.n	80074ce <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40016800 	.word	0x40016800
 8007560:	40021000 	.word	0x40021000

08007564 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8007578:	2302      	movs	r3, #2
 800757a:	e045      	b.n	8007608 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d114      	bne.n	80075be <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0202 	bic.w	r2, r2, #2
 80075a4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80075bc:	e01f      	b.n	80075fe <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0202 	orr.w	r2, r2, #2
 80075ce:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80075da:	f023 010c 	bic.w	r1, r3, #12
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800761e:	f7fd fa19 	bl	8004a54 <HAL_GetTick>
 8007622:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007624:	e014      	b.n	8007650 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d010      	beq.n	8007650 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800762e:	f7fd fa11 	bl	8004a54 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2207      	movs	r2, #7
 8007648:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e011      	b.n	8007674 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007660:	d1e1      	bne.n	8007626 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d101      	bne.n	8007698 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
 8007696:	e015      	b.n	80076c4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d104      	bne.n	80076b0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 ff03 	bl	80084b4 <HRTIM_MasterBase_Config>
 80076ae:	e004      	b.n	80076ba <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 ff2c 	bl	8008512 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_HRTIM_SimpleBaseStart+0x18>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e01b      	b.n	800771c <HAL_HRTIM_SimpleBaseStart+0x50>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6819      	ldr	r1, [r3, #0]
 80076fa:	4a0b      	ldr	r2, [pc, #44]	; (8007728 <HAL_HRTIM_SimpleBaseStart+0x5c>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	2000003c 	.word	0x2000003c

0800772c <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d101      	bne.n	8007748 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
 8007746:	e01c      	b.n	8007782 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_HRTIM_EventConfig+0x2a>
 8007752:	2302      	movs	r3, #2
 8007754:	e015      	b.n	8007782 <HAL_HRTIM_EventConfig+0x56>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f001 f934 	bl	80089d8 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d101      	bne.n	80077a4 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 80077a0:	2302      	movs	r3, #2
 80077a2:	e025      	b.n	80077f0 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_HRTIM_EventPrescalerConfig+0x28>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e01e      	b.n	80077f0 <HAL_HRTIM_EventPrescalerConfig+0x66>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 80077ca:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b089      	sub	sp, #36	; 0x24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d101      	bne.n	8007818 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8007814:	2302      	movs	r3, #2
 8007816:	e1aa      	b.n	8007b6e <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_HRTIM_FaultConfig+0x2a>
 8007822:	2302      	movs	r3, #2
 8007824:	e1a3      	b.n	8007b6e <HAL_HRTIM_FaultConfig+0x372>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800783e:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007848:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3b01      	subs	r3, #1
 8007864:	2b1f      	cmp	r3, #31
 8007866:	f200 813f 	bhi.w	8007ae8 <HAL_HRTIM_FaultConfig+0x2ec>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <HAL_HRTIM_FaultConfig+0x74>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	080078f1 	.word	0x080078f1
 8007874:	08007941 	.word	0x08007941
 8007878:	08007ae9 	.word	0x08007ae9
 800787c:	08007997 	.word	0x08007997
 8007880:	08007ae9 	.word	0x08007ae9
 8007884:	08007ae9 	.word	0x08007ae9
 8007888:	08007ae9 	.word	0x08007ae9
 800788c:	080079ed 	.word	0x080079ed
 8007890:	08007ae9 	.word	0x08007ae9
 8007894:	08007ae9 	.word	0x08007ae9
 8007898:	08007ae9 	.word	0x08007ae9
 800789c:	08007ae9 	.word	0x08007ae9
 80078a0:	08007ae9 	.word	0x08007ae9
 80078a4:	08007ae9 	.word	0x08007ae9
 80078a8:	08007ae9 	.word	0x08007ae9
 80078ac:	08007a43 	.word	0x08007a43
 80078b0:	08007ae9 	.word	0x08007ae9
 80078b4:	08007ae9 	.word	0x08007ae9
 80078b8:	08007ae9 	.word	0x08007ae9
 80078bc:	08007ae9 	.word	0x08007ae9
 80078c0:	08007ae9 	.word	0x08007ae9
 80078c4:	08007ae9 	.word	0x08007ae9
 80078c8:	08007ae9 	.word	0x08007ae9
 80078cc:	08007ae9 	.word	0x08007ae9
 80078d0:	08007ae9 	.word	0x08007ae9
 80078d4:	08007ae9 	.word	0x08007ae9
 80078d8:	08007ae9 	.word	0x08007ae9
 80078dc:	08007ae9 	.word	0x08007ae9
 80078e0:	08007ae9 	.word	0x08007ae9
 80078e4:	08007ae9 	.word	0x08007ae9
 80078e8:	08007ae9 	.word	0x08007ae9
 80078ec:	08007a93 	.word	0x08007a93
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80078f6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	4313      	orrs	r3, r2
 8007904:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	4313      	orrs	r3, r2
 800790e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007916:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4313      	orrs	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	4313      	orrs	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	4313      	orrs	r3, r2
 800793c:	61fb      	str	r3, [r7, #28]
      break;
 800793e:	e0dc      	b.n	8007afa <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007946:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	4313      	orrs	r3, r2
 8007956:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	029b      	lsls	r3, r3, #10
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	4313      	orrs	r3, r2
 8007960:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007968:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	045b      	lsls	r3, r3, #17
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	4313      	orrs	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	4313      	orrs	r3, r2
 8007982:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	4313      	orrs	r3, r2
 8007992:	61fb      	str	r3, [r7, #28]
      break;
 8007994:	e0b1      	b.n	8007afa <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 800799c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	041b      	lsls	r3, r3, #16
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	049b      	lsls	r3, r3, #18
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079be:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	049b      	lsls	r3, r3, #18
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	61fb      	str	r3, [r7, #28]
      break;
 80079ea:	e086      	b.n	8007afa <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80079f2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	069b      	lsls	r3, r3, #26
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007a14:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	04db      	lsls	r3, r3, #19
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61fb      	str	r3, [r7, #28]
      break;
 8007a40:	e05b      	b.n	8007afa <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007a48:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a68:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	051b      	lsls	r3, r3, #20
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
      break;
 8007a90:	e033      	b.n	8007afa <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007a98:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	029b      	lsls	r3, r3, #10
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aba:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	055b      	lsls	r3, r3, #21
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
      break;
 8007ae6:	e008      	b.n	8007afa <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2207      	movs	r2, #7
 8007aec:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007af8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b07      	cmp	r3, #7
 8007b04:	d101      	bne.n	8007b0a <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e031      	b.n	8007b6e <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007b14:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b26:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	f248 0380 	movw	r3, #32896	; 0x8080
 8007b50:	4013      	ands	r3, r2
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	430b      	orrs	r3, r1
 8007b58:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3724      	adds	r7, #36	; 0x24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop

08007b7c <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d101      	bne.n	8007b96 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007b92:	2302      	movs	r3, #2
 8007b94:	e025      	b.n	8007be2 <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d101      	bne.n	8007ba4 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	e01e      	b.n	8007be2 <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bbc:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
	...

08007bf0 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d101      	bne.n	8007c0c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e0d7      	b.n	8007dbc <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e0d0      	b.n	8007dbc <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	2b1f      	cmp	r3, #31
 8007c30:	f200 80aa 	bhi.w	8007d88 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007cbd 	.word	0x08007cbd
 8007c40:	08007cdf 	.word	0x08007cdf
 8007c44:	08007d89 	.word	0x08007d89
 8007c48:	08007d01 	.word	0x08007d01
 8007c4c:	08007d89 	.word	0x08007d89
 8007c50:	08007d89 	.word	0x08007d89
 8007c54:	08007d89 	.word	0x08007d89
 8007c58:	08007d23 	.word	0x08007d23
 8007c5c:	08007d89 	.word	0x08007d89
 8007c60:	08007d89 	.word	0x08007d89
 8007c64:	08007d89 	.word	0x08007d89
 8007c68:	08007d89 	.word	0x08007d89
 8007c6c:	08007d89 	.word	0x08007d89
 8007c70:	08007d89 	.word	0x08007d89
 8007c74:	08007d89 	.word	0x08007d89
 8007c78:	08007d45 	.word	0x08007d45
 8007c7c:	08007d89 	.word	0x08007d89
 8007c80:	08007d89 	.word	0x08007d89
 8007c84:	08007d89 	.word	0x08007d89
 8007c88:	08007d89 	.word	0x08007d89
 8007c8c:	08007d89 	.word	0x08007d89
 8007c90:	08007d89 	.word	0x08007d89
 8007c94:	08007d89 	.word	0x08007d89
 8007c98:	08007d89 	.word	0x08007d89
 8007c9c:	08007d89 	.word	0x08007d89
 8007ca0:	08007d89 	.word	0x08007d89
 8007ca4:	08007d89 	.word	0x08007d89
 8007ca8:	08007d89 	.word	0x08007d89
 8007cac:	08007d89 	.word	0x08007d89
 8007cb0:	08007d89 	.word	0x08007d89
 8007cb4:	08007d89 	.word	0x08007d89
 8007cb8:	08007d67 	.word	0x08007d67
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007cc4:	f023 0203 	bic.w	r2, r3, #3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 8007cdc:	e05d      	b.n	8007d9a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	025b      	lsls	r3, r3, #9
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cfa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 8007cfe:	e04c      	b.n	8007d9a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	045b      	lsls	r3, r3, #17
 8007d12:	431a      	orrs	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d1c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 8007d20:	e03b      	b.n	8007d9a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007d2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	065b      	lsls	r3, r3, #25
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007d3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 8007d42:	e02a      	b.n	8007d9a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007d4c:	f023 0203 	bic.w	r2, r3, #3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	431a      	orrs	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0201 	orr.w	r2, r2, #1
 8007d60:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8007d64:	e019      	b.n	8007d9a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007d6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	025b      	lsls	r3, r3, #9
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d82:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8007d86:	e008      	b.n	8007d9a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2207      	movs	r2, #7
 8007d8c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007d98:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b07      	cmp	r3, #7
 8007da4:	d101      	bne.n	8007daa <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e008      	b.n	8007dbc <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d101      	bne.n	8007de4 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 8007de0:	2302      	movs	r3, #2
 8007de2:	e0e3      	b.n	8007fac <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_HRTIM_FaultCounterConfig+0x2a>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e0dc      	b.n	8007fac <HAL_HRTIM_FaultCounterConfig+0x1e4>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	2b1f      	cmp	r3, #31
 8007e08:	f200 80b6 	bhi.w	8007f78 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e95 	.word	0x08007e95
 8007e18:	08007ebb 	.word	0x08007ebb
 8007e1c:	08007f79 	.word	0x08007f79
 8007e20:	08007ee1 	.word	0x08007ee1
 8007e24:	08007f79 	.word	0x08007f79
 8007e28:	08007f79 	.word	0x08007f79
 8007e2c:	08007f79 	.word	0x08007f79
 8007e30:	08007f07 	.word	0x08007f07
 8007e34:	08007f79 	.word	0x08007f79
 8007e38:	08007f79 	.word	0x08007f79
 8007e3c:	08007f79 	.word	0x08007f79
 8007e40:	08007f79 	.word	0x08007f79
 8007e44:	08007f79 	.word	0x08007f79
 8007e48:	08007f79 	.word	0x08007f79
 8007e4c:	08007f79 	.word	0x08007f79
 8007e50:	08007f2d 	.word	0x08007f2d
 8007e54:	08007f79 	.word	0x08007f79
 8007e58:	08007f79 	.word	0x08007f79
 8007e5c:	08007f79 	.word	0x08007f79
 8007e60:	08007f79 	.word	0x08007f79
 8007e64:	08007f79 	.word	0x08007f79
 8007e68:	08007f79 	.word	0x08007f79
 8007e6c:	08007f79 	.word	0x08007f79
 8007e70:	08007f79 	.word	0x08007f79
 8007e74:	08007f79 	.word	0x08007f79
 8007e78:	08007f79 	.word	0x08007f79
 8007e7c:	08007f79 	.word	0x08007f79
 8007e80:	08007f79 	.word	0x08007f79
 8007e84:	08007f79 	.word	0x08007f79
 8007e88:	08007f79 	.word	0x08007f79
 8007e8c:	08007f79 	.word	0x08007f79
 8007e90:	08007f53 	.word	0x08007f53
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007e9c:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	009a      	lsls	r2, r3, #2
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	01db      	lsls	r3, r3, #7
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 8007eb8:	e067      	b.n	8007f8a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007ec2:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	029a      	lsls	r2, r3, #10
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	03db      	lsls	r3, r3, #15
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 8007ede:	e054      	b.n	8007f8a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007ee8:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	049a      	lsls	r2, r3, #18
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	05db      	lsls	r3, r3, #23
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8007f04:	e041      	b.n	8007f8a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007f0e:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	069a      	lsls	r2, r3, #26
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	07db      	lsls	r3, r3, #31
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 8007f2a:	e02e      	b.n	8007f8a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007f34:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	009a      	lsls	r2, r3, #2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	01db      	lsls	r3, r3, #7
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 8007f50:	e01b      	b.n	8007f8a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007f5a:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	029a      	lsls	r2, r3, #10
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	03db      	lsls	r3, r3, #15
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 8007f76:	e008      	b.n	8007f8a <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2207      	movs	r2, #7
 8007f7c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007f88:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b07      	cmp	r3, #7
 8007f94:	d101      	bne.n	8007f9a <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e008      	b.n	8007fac <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fd6:	f023 0101 	bic.w	r1, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f003 0201 	and.w	r2, r3, #1
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00e      	beq.n	8008012 <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ffc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00e      	beq.n	800803a <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00e      	beq.n	8008062 <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800804c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	061b      	lsls	r3, r3, #24
 8008054:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f003 0310 	and.w	r3, r3, #16
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00d      	beq.n	8008088 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008074:	f023 0101 	bic.w	r1, r3, #1
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f003 0201 	and.w	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00e      	beq.n	80080b0 <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800809a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d101      	bne.n	80080d8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
 80080d6:	e07a      	b.n	80081ce <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80080e2:	2302      	movs	r3, #2
 80080e4:	e073      	b.n	80081ce <HAL_HRTIM_WaveformTimerConfig+0x112>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2202      	movs	r2, #2
 80080f2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	d104      	bne.n	8008106 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fa47 	bl	8008592 <HRTIM_MasterWaveform_Config>
 8008104:	e004      	b.n	8008110 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fade 	bl	80086cc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4403      	add	r3, r0
 8008122:	3320      	adds	r3, #32
 8008124:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6859      	ldr	r1, [r3, #4]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4403      	add	r3, r0
 8008138:	3324      	adds	r3, #36	; 0x24
 800813a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6899      	ldr	r1, [r3, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4403      	add	r3, r0
 800814e:	3328      	adds	r3, #40	; 0x28
 8008150:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4403      	add	r3, r0
 8008164:	332c      	adds	r3, #44	; 0x2c
 8008166:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6919      	ldr	r1, [r3, #16]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4403      	add	r3, r0
 800817a:	3330      	adds	r3, #48	; 0x30
 800817c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fe51 	bl	8008e28 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b06      	cmp	r3, #6
 800818a:	d017      	beq.n	80081bc <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d113      	bne.n	80081bc <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3301      	adds	r3, #1
 800819c:	01db      	lsls	r3, r3, #7
 800819e:	4413      	add	r3, r2
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081aa:	025b      	lsls	r3, r3, #9
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	6809      	ldr	r1, [r1, #0]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	3301      	adds	r3, #1
 80081b6:	01db      	lsls	r3, r3, #7
 80081b8:	440b      	add	r3, r1
 80081ba:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d101      	bne.n	80081f6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
 80081f4:	e157      	b.n	80084a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008200:	2302      	movs	r3, #2
 8008202:	e150      	b.n	80084a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b06      	cmp	r3, #6
 8008218:	d140      	bne.n	800829c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3b01      	subs	r3, #1
 800821e:	2b07      	cmp	r3, #7
 8008220:	d82a      	bhi.n	8008278 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008249 	.word	0x08008249
 800822c:	08008255 	.word	0x08008255
 8008230:	08008279 	.word	0x08008279
 8008234:	08008261 	.word	0x08008261
 8008238:	08008279 	.word	0x08008279
 800823c:	08008279 	.word	0x08008279
 8008240:	08008279 	.word	0x08008279
 8008244:	0800826d 	.word	0x0800826d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	61da      	str	r2, [r3, #28]
        break;
 8008252:	e01a      	b.n	800828a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800825e:	e014      	b.n	800828a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	6812      	ldr	r2, [r2, #0]
 8008268:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800826a:	e00e      	b.n	800828a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8008276:	e008      	b.n	800828a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2207      	movs	r2, #7
 800827c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8008288:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b07      	cmp	r3, #7
 8008294:	f040 80fe 	bne.w	8008494 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e104      	b.n	80084a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b07      	cmp	r3, #7
 80082a2:	f200 80e3 	bhi.w	800846c <HAL_HRTIM_WaveformCompareConfig+0x294>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082cd 	.word	0x080082cd
 80082b0:	080082e1 	.word	0x080082e1
 80082b4:	0800846d 	.word	0x0800846d
 80082b8:	0800839d 	.word	0x0800839d
 80082bc:	0800846d 	.word	0x0800846d
 80082c0:	0800846d 	.word	0x0800846d
 80082c4:	0800846d 	.word	0x0800846d
 80082c8:	080083b1 	.word	0x080083b1
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	440b      	add	r3, r1
 80082da:	339c      	adds	r3, #156	; 0x9c
 80082dc:	601a      	str	r2, [r3, #0]
        break;
 80082de:	e0d1      	b.n	8008484 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	01db      	lsls	r3, r3, #7
 80082ec:	440b      	add	r3, r1
 80082ee:	33a4      	adds	r3, #164	; 0xa4
 80082f0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d03f      	beq.n	800837a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	3301      	adds	r3, #1
 8008302:	01db      	lsls	r3, r3, #7
 8008304:	4413      	add	r3, r2
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	6811      	ldr	r1, [r2, #0]
 800830c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3301      	adds	r3, #1
 8008314:	01db      	lsls	r3, r3, #7
 8008316:	440b      	add	r3, r1
 8008318:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	3301      	adds	r3, #1
 8008322:	01db      	lsls	r3, r3, #7
 8008324:	4413      	add	r3, r2
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	6809      	ldr	r1, [r1, #0]
 8008330:	431a      	orrs	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	3301      	adds	r3, #1
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	440b      	add	r3, r1
 800833a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008344:	d109      	bne.n	800835a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6819      	ldr	r1, [r3, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	01db      	lsls	r3, r3, #7
 8008352:	440b      	add	r3, r1
 8008354:	339c      	adds	r3, #156	; 0x9c
 8008356:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008358:	e091      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008362:	f040 808c 	bne.w	800847e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6819      	ldr	r1, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	01db      	lsls	r3, r3, #7
 8008372:	440b      	add	r3, r1
 8008374:	33a8      	adds	r3, #168	; 0xa8
 8008376:	601a      	str	r2, [r3, #0]
         break;
 8008378:	e081      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	3301      	adds	r3, #1
 8008382:	01db      	lsls	r3, r3, #7
 8008384:	4413      	add	r3, r2
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	6811      	ldr	r1, [r2, #0]
 800838c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3301      	adds	r3, #1
 8008394:	01db      	lsls	r3, r3, #7
 8008396:	440b      	add	r3, r1
 8008398:	601a      	str	r2, [r3, #0]
         break;
 800839a:	e070      	b.n	800847e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	01db      	lsls	r3, r3, #7
 80083a8:	440b      	add	r3, r1
 80083aa:	33a8      	adds	r3, #168	; 0xa8
 80083ac:	601a      	str	r2, [r3, #0]
        break;
 80083ae:	e069      	b.n	8008484 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	01db      	lsls	r3, r3, #7
 80083bc:	440b      	add	r3, r1
 80083be:	33ac      	adds	r3, #172	; 0xac
 80083c0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d03f      	beq.n	800844a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3301      	adds	r3, #1
 80083d2:	01db      	lsls	r3, r3, #7
 80083d4:	4413      	add	r3, r2
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	6811      	ldr	r1, [r2, #0]
 80083dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	3301      	adds	r3, #1
 80083e4:	01db      	lsls	r3, r3, #7
 80083e6:	440b      	add	r3, r1
 80083e8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	3301      	adds	r3, #1
 80083f2:	01db      	lsls	r3, r3, #7
 80083f4:	4413      	add	r3, r2
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	6809      	ldr	r1, [r1, #0]
 8008402:	431a      	orrs	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3301      	adds	r3, #1
 8008408:	01db      	lsls	r3, r3, #7
 800840a:	440b      	add	r3, r1
 800840c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008416:	d109      	bne.n	800842c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	01db      	lsls	r3, r3, #7
 8008424:	440b      	add	r3, r1
 8008426:	339c      	adds	r3, #156	; 0x9c
 8008428:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800842a:	e02a      	b.n	8008482 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008434:	d125      	bne.n	8008482 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	01db      	lsls	r3, r3, #7
 8008442:	440b      	add	r3, r1
 8008444:	33a8      	adds	r3, #168	; 0xa8
 8008446:	601a      	str	r2, [r3, #0]
         break;
 8008448:	e01b      	b.n	8008482 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	3301      	adds	r3, #1
 8008452:	01db      	lsls	r3, r3, #7
 8008454:	4413      	add	r3, r2
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	6811      	ldr	r1, [r2, #0]
 800845c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3301      	adds	r3, #1
 8008464:	01db      	lsls	r3, r3, #7
 8008466:	440b      	add	r3, r1
 8008468:	601a      	str	r2, [r3, #0]
         break;
 800846a:	e00a      	b.n	8008482 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2207      	movs	r2, #7
 8008470:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 800847c:	e002      	b.n	8008484 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800847e:	bf00      	nop
 8008480:	e000      	b.n	8008484 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008482:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b07      	cmp	r3, #7
 800848e:	d101      	bne.n	8008494 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e008      	b.n	80084a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop

080084b4 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f023 0307 	bic.w	r3, r3, #7
 80084cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0318 	bic.w	r3, r3, #24
 80084de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	6852      	ldr	r2, [r2, #4]
 8008504:	619a      	str	r2, [r3, #24]
}
 8008506:	bf00      	nop
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008512:	b480      	push	{r7}
 8008514:	b087      	sub	sp, #28
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	3301      	adds	r3, #1
 8008526:	01db      	lsls	r3, r3, #7
 8008528:	4413      	add	r3, r2
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f023 0307 	bic.w	r3, r3, #7
 8008534:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f023 0318 	bic.w	r3, r3, #24
 8008546:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3301      	adds	r3, #1
 800855a:	01db      	lsls	r3, r3, #7
 800855c:	4413      	add	r3, r2
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6819      	ldr	r1, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	01db      	lsls	r3, r3, #7
 800856e:	440b      	add	r3, r1
 8008570:	3394      	adds	r3, #148	; 0x94
 8008572:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6819      	ldr	r1, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	01db      	lsls	r3, r3, #7
 8008580:	440b      	add	r3, r1
 8008582:	3398      	adds	r3, #152	; 0x98
 8008584:	601a      	str	r2, [r3, #0]
}
 8008586:	bf00      	nop
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80085ac:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0320 	bic.w	r3, r3, #32
 80085b4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085c6:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d003      	beq.n	80085d8 <HRTIM_MasterWaveform_Config+0x46>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d108      	bne.n	80085ea <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085de:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f043 0320 	orr.w	r3, r3, #32
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	e021      	b.n	800862e <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d108      	bne.n	8008604 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f8:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e014      	b.n	800862e <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	2b04      	cmp	r3, #4
 800860a:	d108      	bne.n	800861e <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008612:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e007      	b.n	800862e <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f023 0320 	bic.w	r3, r3, #32
 8008624:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800862c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008634:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008646:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008658:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800866a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800867c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008690:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a2:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b08b      	sub	sp, #44	; 0x2c
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3301      	adds	r3, #1
 80086e0:	01db      	lsls	r3, r3, #7
 80086e2:	4413      	add	r3, r2
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	6811      	ldr	r1, [r2, #0]
 80086ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	3301      	adds	r3, #1
 80086f2:	01db      	lsls	r3, r3, #7
 80086f4:	440b      	add	r3, r1
 80086f6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	3301      	adds	r3, #1
 8008700:	01db      	lsls	r3, r3, #7
 8008702:	4413      	add	r3, r2
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	01db      	lsls	r3, r3, #7
 8008710:	4413      	add	r3, r2
 8008712:	33e8      	adds	r3, #232	; 0xe8
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	01db      	lsls	r3, r3, #7
 8008720:	4413      	add	r3, r2
 8008722:	33e4      	adds	r3, #228	; 0xe4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008730:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	f023 0320 	bic.w	r3, r3, #32
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008740:	4313      	orrs	r3, r2
 8008742:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	2b20      	cmp	r3, #32
 800874a:	d003      	beq.n	8008754 <HRTIM_TimingUnitWaveform_Config+0x88>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d108      	bne.n	8008766 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	f043 0320 	orr.w	r3, r3, #32
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
 8008764:	e021      	b.n	80087aa <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	2b03      	cmp	r3, #3
 800876c:	d108      	bne.n	8008780 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
 800877e:	e014      	b.n	80087aa <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	2b04      	cmp	r3, #4
 8008786:	d108      	bne.n	800879a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
 8008798:	e007      	b.n	80087aa <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	f023 0320 	bic.w	r3, r3, #32
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b8:	4313      	orrs	r3, r2
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	4313      	orrs	r3, r2
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087dc:	4313      	orrs	r3, r2
 80087de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	4313      	orrs	r3, r2
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008800:	4313      	orrs	r3, r2
 8008802:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008814:	d103      	bne.n	800881e <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882c:	4313      	orrs	r3, r2
 800882e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	4313      	orrs	r3, r2
 8008840:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008854:	4313      	orrs	r3, r2
 8008856:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800885e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	4313      	orrs	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008874:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	4313      	orrs	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008886:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888c:	6a3a      	ldr	r2, [r7, #32]
 800888e:	4313      	orrs	r3, r2
 8008890:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008896:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800889a:	d004      	beq.n	80088a6 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a0:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80088a4:	d103      	bne.n	80088ae <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	2b40      	cmp	r3, #64	; 0x40
 80088ac:	d108      	bne.n	80088c0 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80088b4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ba:	6a3a      	ldr	r2, [r7, #32]
 80088bc:	4313      	orrs	r3, r2
 80088be:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088c6:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088cc:	6a3a      	ldr	r2, [r7, #32]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d850      	bhi.n	8008980 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <HRTIM_TimingUnitWaveform_Config+0x218>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	080088fd 	.word	0x080088fd
 80088e8:	08008913 	.word	0x08008913
 80088ec:	08008929 	.word	0x08008929
 80088f0:	0800893f 	.word	0x0800893f
 80088f4:	08008955 	.word	0x08008955
 80088f8:	0800896b 	.word	0x0800896b
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008902:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	4313      	orrs	r3, r2
 800890e:	61fb      	str	r3, [r7, #28]
      break;
 8008910:	e037      	b.n	8008982 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008918:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	4313      	orrs	r3, r2
 8008924:	61fb      	str	r3, [r7, #28]
      break;
 8008926:	e02c      	b.n	8008982 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800892e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	4313      	orrs	r3, r2
 800893a:	61fb      	str	r3, [r7, #28]
      break;
 800893c:	e021      	b.n	8008982 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008944:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	4313      	orrs	r3, r2
 8008950:	61fb      	str	r3, [r7, #28]
      break;
 8008952:	e016      	b.n	8008982 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800895a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	015b      	lsls	r3, r3, #5
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	4313      	orrs	r3, r2
 8008966:	61fb      	str	r3, [r7, #28]
      break;
 8008968:	e00b      	b.n	8008982 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008970:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	019b      	lsls	r3, r3, #6
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	4313      	orrs	r3, r2
 800897c:	61fb      	str	r3, [r7, #28]
      break;
 800897e:	e000      	b.n	8008982 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8008980:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	3301      	adds	r3, #1
 800898a:	01db      	lsls	r3, r3, #7
 800898c:	4413      	add	r3, r2
 800898e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008990:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	01db      	lsls	r3, r3, #7
 800899a:	4413      	add	r3, r2
 800899c:	33e8      	adds	r3, #232	; 0xe8
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	01db      	lsls	r3, r3, #7
 80089aa:	4413      	add	r3, r2
 80089ac:	33e4      	adds	r3, #228	; 0xe4
 80089ae:	6a3a      	ldr	r2, [r7, #32]
 80089b0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	01db      	lsls	r3, r3, #7
 80089ba:	4413      	add	r3, r2
 80089bc:	33d4      	adds	r3, #212	; 0xd4
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80089cc:	bf00      	nop
 80089ce:	372c      	adds	r7, #44	; 0x2c
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 80089d8:	b480      	push	{r7}
 80089da:	b089      	sub	sp, #36	; 0x24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 80089ec:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80089f6:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008a00:	617b      	str	r3, [r7, #20]

  switch (Event)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b0a      	cmp	r3, #10
 8008a06:	f200 8208 	bhi.w	8008e1a <HRTIM_EventConfig+0x442>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <HRTIM_EventConfig+0x38>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a3d 	.word	0x08008a3d
 8008a14:	08008a5d 	.word	0x08008a5d
 8008a18:	08008ab3 	.word	0x08008ab3
 8008a1c:	08008b0f 	.word	0x08008b0f
 8008a20:	08008b6d 	.word	0x08008b6d
 8008a24:	08008bcb 	.word	0x08008bcb
 8008a28:	08008c29 	.word	0x08008c29
 8008a2c:	08008c87 	.word	0x08008c87
 8008a30:	08008ceb 	.word	0x08008ceb
 8008a34:	08008d4f 	.word	0x08008d4f
 8008a38:	08008db5 	.word	0x08008db5
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008a5a:	e1df      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a62:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 0318 	and.w	r3, r3, #24
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008ab0:	e1b4      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8008ab8:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	019b      	lsls	r3, r3, #6
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	019b      	lsls	r3, r3, #6
 8008ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	019b      	lsls	r3, r3, #6
 8008ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	019b      	lsls	r3, r3, #6
 8008af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008b0c:	e186      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008b14:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	031b      	lsls	r3, r3, #12
 8008b1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	031b      	lsls	r3, r3, #12
 8008b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	031b      	lsls	r3, r3, #12
 8008b3c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	031b      	lsls	r3, r3, #12
 8008b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008b6a:	e157      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 8008b72:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	049b      	lsls	r3, r3, #18
 8008b7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	049b      	lsls	r3, r3, #18
 8008b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	049b      	lsls	r3, r3, #18
 8008b9a:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	049b      	lsls	r3, r3, #18
 8008bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008bc8:	e128      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008bd0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	061b      	lsls	r3, r3, #24
 8008bd8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	061b      	lsls	r3, r3, #24
 8008bf8:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008bfc:	69fa      	ldr	r2, [r7, #28]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	061b      	lsls	r3, r3, #24
 8008c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008c26:	e0f9      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	f023 031f 	bic.w	r3, r3, #31
 8008c2e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f003 0318 	and.w	r3, r3, #24
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f023 030f 	bic.w	r3, r3, #15
 8008c60:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008c84:	e0ca      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8008c8c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	019b      	lsls	r3, r3, #6
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	019b      	lsls	r3, r3, #6
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	019b      	lsls	r3, r3, #6
 8008cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8008cc2:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	019b      	lsls	r3, r3, #6
 8008cca:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008ce8:	e098      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8008cf0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	031b      	lsls	r3, r3, #12
 8008cf8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	031b      	lsls	r3, r3, #12
 8008d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	031b      	lsls	r3, r3, #12
 8008d18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d28:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	031b      	lsls	r3, r3, #12
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008d4c:	e066      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8008d54:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	049b      	lsls	r3, r3, #18
 8008d5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	049b      	lsls	r3, r3, #18
 8008d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	049b      	lsls	r3, r3, #18
 8008d7c:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8008d8c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	049b      	lsls	r3, r3, #18
 8008d94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008db2:	e033      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8008dba:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	061b      	lsls	r3, r3, #24
 8008dc2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	061b      	lsls	r3, r3, #24
 8008dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	061b      	lsls	r3, r3, #24
 8008de2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008df2:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	061b      	lsls	r3, r3, #24
 8008dfa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008e18:	e000      	b.n	8008e1c <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8008e1a:	bf00      	nop
  }
}
 8008e1c:	bf00      	nop
 8008e1e:	3724      	adds	r7, #36	; 0x24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b06      	cmp	r3, #6
 8008e36:	d85e      	bhi.n	8008ef6 <HRTIM_ForceRegistersUpdate+0xce>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <HRTIM_ForceRegistersUpdate+0x18>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e73 	.word	0x08008e73
 8008e44:	08008e89 	.word	0x08008e89
 8008e48:	08008e9f 	.word	0x08008e9f
 8008e4c:	08008eb5 	.word	0x08008eb5
 8008e50:	08008ecb 	.word	0x08008ecb
 8008e54:	08008ee1 	.word	0x08008ee1
 8008e58:	08008e5d 	.word	0x08008e5d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f042 0201 	orr.w	r2, r2, #1
 8008e6c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e70:	e042      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0202 	orr.w	r2, r2, #2
 8008e82:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e86:	e037      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0204 	orr.w	r2, r2, #4
 8008e98:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e9c:	e02c      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0208 	orr.w	r2, r2, #8
 8008eae:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008eb2:	e021      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f042 0210 	orr.w	r2, r2, #16
 8008ec4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ec8:	e016      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0220 	orr.w	r2, r2, #32
 8008eda:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ede:	e00b      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ef0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ef4:	e000      	b.n	8008ef8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8008ef6:	bf00      	nop
  }
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d141      	bne.n	8008f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f12:	4b4b      	ldr	r3, [pc, #300]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f1e:	d131      	bne.n	8008f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f20:	4b47      	ldr	r3, [pc, #284]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f26:	4a46      	ldr	r2, [pc, #280]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f30:	4b43      	ldr	r3, [pc, #268]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f38:	4a41      	ldr	r2, [pc, #260]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f40:	4b40      	ldr	r3, [pc, #256]	; (8009044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2232      	movs	r2, #50	; 0x32
 8008f46:	fb02 f303 	mul.w	r3, r2, r3
 8008f4a:	4a3f      	ldr	r2, [pc, #252]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f50:	0c9b      	lsrs	r3, r3, #18
 8008f52:	3301      	adds	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f56:	e002      	b.n	8008f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f5e:	4b38      	ldr	r3, [pc, #224]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f6a:	d102      	bne.n	8008f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1f2      	bne.n	8008f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f72:	4b33      	ldr	r3, [pc, #204]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7e:	d158      	bne.n	8009032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e057      	b.n	8009034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f84:	4b2e      	ldr	r3, [pc, #184]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8a:	4a2d      	ldr	r2, [pc, #180]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f94:	e04d      	b.n	8009032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f9c:	d141      	bne.n	8009022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f9e:	4b28      	ldr	r3, [pc, #160]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008faa:	d131      	bne.n	8009010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fac:	4b24      	ldr	r3, [pc, #144]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb2:	4a23      	ldr	r2, [pc, #140]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fbc:	4b20      	ldr	r3, [pc, #128]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008fc4:	4a1e      	ldr	r2, [pc, #120]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008fcc:	4b1d      	ldr	r3, [pc, #116]	; (8009044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2232      	movs	r2, #50	; 0x32
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	4a1c      	ldr	r2, [pc, #112]	; (8009048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fdc:	0c9b      	lsrs	r3, r3, #18
 8008fde:	3301      	adds	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fe2:	e002      	b.n	8008fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fea:	4b15      	ldr	r3, [pc, #84]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff6:	d102      	bne.n	8008ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f2      	bne.n	8008fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900a:	d112      	bne.n	8009032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e011      	b.n	8009034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009016:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800901c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009020:	e007      	b.n	8009032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800902a:	4a05      	ldr	r2, [pc, #20]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800902c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009030:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	40007000 	.word	0x40007000
 8009044:	20000030 	.word	0x20000030
 8009048:	431bde83 	.word	0x431bde83

0800904c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	4a04      	ldr	r2, [pc, #16]	; (8009068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800905a:	6093      	str	r3, [r2, #8]
}
 800905c:	bf00      	nop
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	40007000 	.word	0x40007000

0800906c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e306      	b.n	800968c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d075      	beq.n	8009176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800908a:	4b97      	ldr	r3, [pc, #604]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 030c 	and.w	r3, r3, #12
 8009092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009094:	4b94      	ldr	r3, [pc, #592]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b0c      	cmp	r3, #12
 80090a2:	d102      	bne.n	80090aa <HAL_RCC_OscConfig+0x3e>
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d002      	beq.n	80090b0 <HAL_RCC_OscConfig+0x44>
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d10b      	bne.n	80090c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090b0:	4b8d      	ldr	r3, [pc, #564]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d05b      	beq.n	8009174 <HAL_RCC_OscConfig+0x108>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d157      	bne.n	8009174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e2e1      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d0:	d106      	bne.n	80090e0 <HAL_RCC_OscConfig+0x74>
 80090d2:	4b85      	ldr	r3, [pc, #532]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a84      	ldr	r2, [pc, #528]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	e01d      	b.n	800911c <HAL_RCC_OscConfig+0xb0>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090e8:	d10c      	bne.n	8009104 <HAL_RCC_OscConfig+0x98>
 80090ea:	4b7f      	ldr	r3, [pc, #508]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a7e      	ldr	r2, [pc, #504]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	4b7c      	ldr	r3, [pc, #496]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a7b      	ldr	r2, [pc, #492]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80090fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	e00b      	b.n	800911c <HAL_RCC_OscConfig+0xb0>
 8009104:	4b78      	ldr	r3, [pc, #480]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a77      	ldr	r2, [pc, #476]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 800910a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	4b75      	ldr	r3, [pc, #468]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a74      	ldr	r2, [pc, #464]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800911a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d013      	beq.n	800914c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009124:	f7fb fc96 	bl	8004a54 <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800912a:	e008      	b.n	800913e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800912c:	f7fb fc92 	bl	8004a54 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b64      	cmp	r3, #100	; 0x64
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e2a6      	b.n	800968c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800913e:	4b6a      	ldr	r3, [pc, #424]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0f0      	beq.n	800912c <HAL_RCC_OscConfig+0xc0>
 800914a:	e014      	b.n	8009176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914c:	f7fb fc82 	bl	8004a54 <HAL_GetTick>
 8009150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009154:	f7fb fc7e 	bl	8004a54 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b64      	cmp	r3, #100	; 0x64
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e292      	b.n	800968c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009166:	4b60      	ldr	r3, [pc, #384]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1f0      	bne.n	8009154 <HAL_RCC_OscConfig+0xe8>
 8009172:	e000      	b.n	8009176 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d075      	beq.n	800926e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009182:	4b59      	ldr	r3, [pc, #356]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 030c 	and.w	r3, r3, #12
 800918a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800918c:	4b56      	ldr	r3, [pc, #344]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0303 	and.w	r3, r3, #3
 8009194:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b0c      	cmp	r3, #12
 800919a:	d102      	bne.n	80091a2 <HAL_RCC_OscConfig+0x136>
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d002      	beq.n	80091a8 <HAL_RCC_OscConfig+0x13c>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d11f      	bne.n	80091e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091a8:	4b4f      	ldr	r3, [pc, #316]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <HAL_RCC_OscConfig+0x154>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e265      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091c0:	4b49      	ldr	r3, [pc, #292]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	061b      	lsls	r3, r3, #24
 80091ce:	4946      	ldr	r1, [pc, #280]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091d4:	4b45      	ldr	r3, [pc, #276]	; (80092ec <HAL_RCC_OscConfig+0x280>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fb fbef 	bl	80049bc <HAL_InitTick>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d043      	beq.n	800926c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e251      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d023      	beq.n	8009238 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091f0:	4b3d      	ldr	r3, [pc, #244]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a3c      	ldr	r2, [pc, #240]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80091f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091fc:	f7fb fc2a 	bl	8004a54 <HAL_GetTick>
 8009200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009204:	f7fb fc26 	bl	8004a54 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e23a      	b.n	800968c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009216:	4b34      	ldr	r3, [pc, #208]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f0      	beq.n	8009204 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009222:	4b31      	ldr	r3, [pc, #196]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	061b      	lsls	r3, r3, #24
 8009230:	492d      	ldr	r1, [pc, #180]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009232:	4313      	orrs	r3, r2
 8009234:	604b      	str	r3, [r1, #4]
 8009236:	e01a      	b.n	800926e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009238:	4b2b      	ldr	r3, [pc, #172]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 800923e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009244:	f7fb fc06 	bl	8004a54 <HAL_GetTick>
 8009248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800924c:	f7fb fc02 	bl	8004a54 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e216      	b.n	800968c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800925e:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f0      	bne.n	800924c <HAL_RCC_OscConfig+0x1e0>
 800926a:	e000      	b.n	800926e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800926c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d041      	beq.n	80092fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d01c      	beq.n	80092bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009282:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 8009284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009288:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009292:	f7fb fbdf 	bl	8004a54 <HAL_GetTick>
 8009296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009298:	e008      	b.n	80092ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800929a:	f7fb fbdb 	bl	8004a54 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d901      	bls.n	80092ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e1ef      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092ac:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80092ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0ef      	beq.n	800929a <HAL_RCC_OscConfig+0x22e>
 80092ba:	e020      	b.n	80092fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80092be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c2:	4a09      	ldr	r2, [pc, #36]	; (80092e8 <HAL_RCC_OscConfig+0x27c>)
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092cc:	f7fb fbc2 	bl	8004a54 <HAL_GetTick>
 80092d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092d2:	e00d      	b.n	80092f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092d4:	f7fb fbbe 	bl	8004a54 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d906      	bls.n	80092f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e1d2      	b.n	800968c <HAL_RCC_OscConfig+0x620>
 80092e6:	bf00      	nop
 80092e8:	40021000 	.word	0x40021000
 80092ec:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092f0:	4b8c      	ldr	r3, [pc, #560]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80092f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1ea      	bne.n	80092d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 80a6 	beq.w	8009458 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800930c:	2300      	movs	r3, #0
 800930e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009310:	4b84      	ldr	r3, [pc, #528]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <HAL_RCC_OscConfig+0x2b4>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <HAL_RCC_OscConfig+0x2b6>
 8009320:	2300      	movs	r3, #0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009326:	4b7f      	ldr	r3, [pc, #508]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932a:	4a7e      	ldr	r2, [pc, #504]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 800932c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009330:	6593      	str	r3, [r2, #88]	; 0x58
 8009332:	4b7c      	ldr	r3, [pc, #496]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800933e:	2301      	movs	r3, #1
 8009340:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009342:	4b79      	ldr	r3, [pc, #484]	; (8009528 <HAL_RCC_OscConfig+0x4bc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d118      	bne.n	8009380 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800934e:	4b76      	ldr	r3, [pc, #472]	; (8009528 <HAL_RCC_OscConfig+0x4bc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a75      	ldr	r2, [pc, #468]	; (8009528 <HAL_RCC_OscConfig+0x4bc>)
 8009354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800935a:	f7fb fb7b 	bl	8004a54 <HAL_GetTick>
 800935e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009360:	e008      	b.n	8009374 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009362:	f7fb fb77 	bl	8004a54 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e18b      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009374:	4b6c      	ldr	r3, [pc, #432]	; (8009528 <HAL_RCC_OscConfig+0x4bc>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0f0      	beq.n	8009362 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d108      	bne.n	800939a <HAL_RCC_OscConfig+0x32e>
 8009388:	4b66      	ldr	r3, [pc, #408]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938e:	4a65      	ldr	r2, [pc, #404]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009390:	f043 0301 	orr.w	r3, r3, #1
 8009394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009398:	e024      	b.n	80093e4 <HAL_RCC_OscConfig+0x378>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	2b05      	cmp	r3, #5
 80093a0:	d110      	bne.n	80093c4 <HAL_RCC_OscConfig+0x358>
 80093a2:	4b60      	ldr	r3, [pc, #384]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a8:	4a5e      	ldr	r2, [pc, #376]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093aa:	f043 0304 	orr.w	r3, r3, #4
 80093ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093b2:	4b5c      	ldr	r3, [pc, #368]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b8:	4a5a      	ldr	r2, [pc, #360]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093c2:	e00f      	b.n	80093e4 <HAL_RCC_OscConfig+0x378>
 80093c4:	4b57      	ldr	r3, [pc, #348]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ca:	4a56      	ldr	r2, [pc, #344]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093cc:	f023 0301 	bic.w	r3, r3, #1
 80093d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093d4:	4b53      	ldr	r3, [pc, #332]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093da:	4a52      	ldr	r2, [pc, #328]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80093dc:	f023 0304 	bic.w	r3, r3, #4
 80093e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d016      	beq.n	800941a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ec:	f7fb fb32 	bl	8004a54 <HAL_GetTick>
 80093f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093f2:	e00a      	b.n	800940a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093f4:	f7fb fb2e 	bl	8004a54 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009402:	4293      	cmp	r3, r2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e140      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800940a:	4b46      	ldr	r3, [pc, #280]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0ed      	beq.n	80093f4 <HAL_RCC_OscConfig+0x388>
 8009418:	e015      	b.n	8009446 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800941a:	f7fb fb1b 	bl	8004a54 <HAL_GetTick>
 800941e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009420:	e00a      	b.n	8009438 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009422:	f7fb fb17 	bl	8004a54 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009430:	4293      	cmp	r3, r2
 8009432:	d901      	bls.n	8009438 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e129      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009438:	4b3a      	ldr	r3, [pc, #232]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1ed      	bne.n	8009422 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009446:	7ffb      	ldrb	r3, [r7, #31]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d105      	bne.n	8009458 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800944c:	4b35      	ldr	r3, [pc, #212]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 800944e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009450:	4a34      	ldr	r2, [pc, #208]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009456:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d03c      	beq.n	80094de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d01c      	beq.n	80094a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 800946e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009472:	4a2c      	ldr	r2, [pc, #176]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800947c:	f7fb faea 	bl	8004a54 <HAL_GetTick>
 8009480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009482:	e008      	b.n	8009496 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009484:	f7fb fae6 	bl	8004a54 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b02      	cmp	r3, #2
 8009490:	d901      	bls.n	8009496 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e0fa      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009496:	4b23      	ldr	r3, [pc, #140]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0ef      	beq.n	8009484 <HAL_RCC_OscConfig+0x418>
 80094a4:	e01b      	b.n	80094de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80094a6:	4b1f      	ldr	r3, [pc, #124]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80094a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ac:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80094ae:	f023 0301 	bic.w	r3, r3, #1
 80094b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094b6:	f7fb facd 	bl	8004a54 <HAL_GetTick>
 80094ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094bc:	e008      	b.n	80094d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094be:	f7fb fac9 	bl	8004a54 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d901      	bls.n	80094d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e0dd      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094d0:	4b14      	ldr	r3, [pc, #80]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80094d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1ef      	bne.n	80094be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 80d1 	beq.w	800968a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094e8:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f003 030c 	and.w	r3, r3, #12
 80094f0:	2b0c      	cmp	r3, #12
 80094f2:	f000 808b 	beq.w	800960c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d15e      	bne.n	80095bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094fe:	4b09      	ldr	r3, [pc, #36]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a08      	ldr	r2, [pc, #32]	; (8009524 <HAL_RCC_OscConfig+0x4b8>)
 8009504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950a:	f7fb faa3 	bl	8004a54 <HAL_GetTick>
 800950e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009510:	e00c      	b.n	800952c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009512:	f7fb fa9f 	bl	8004a54 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d905      	bls.n	800952c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e0b3      	b.n	800968c <HAL_RCC_OscConfig+0x620>
 8009524:	40021000 	.word	0x40021000
 8009528:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800952c:	4b59      	ldr	r3, [pc, #356]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1ec      	bne.n	8009512 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009538:	4b56      	ldr	r3, [pc, #344]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	4b56      	ldr	r3, [pc, #344]	; (8009698 <HAL_RCC_OscConfig+0x62c>)
 800953e:	4013      	ands	r3, r2
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6a11      	ldr	r1, [r2, #32]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009548:	3a01      	subs	r2, #1
 800954a:	0112      	lsls	r2, r2, #4
 800954c:	4311      	orrs	r1, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009552:	0212      	lsls	r2, r2, #8
 8009554:	4311      	orrs	r1, r2
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800955a:	0852      	lsrs	r2, r2, #1
 800955c:	3a01      	subs	r2, #1
 800955e:	0552      	lsls	r2, r2, #21
 8009560:	4311      	orrs	r1, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009566:	0852      	lsrs	r2, r2, #1
 8009568:	3a01      	subs	r2, #1
 800956a:	0652      	lsls	r2, r2, #25
 800956c:	4311      	orrs	r1, r2
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009572:	06d2      	lsls	r2, r2, #27
 8009574:	430a      	orrs	r2, r1
 8009576:	4947      	ldr	r1, [pc, #284]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 8009578:	4313      	orrs	r3, r2
 800957a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800957c:	4b45      	ldr	r3, [pc, #276]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a44      	ldr	r2, [pc, #272]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 8009582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009586:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009588:	4b42      	ldr	r3, [pc, #264]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4a41      	ldr	r2, [pc, #260]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 800958e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009592:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009594:	f7fb fa5e 	bl	8004a54 <HAL_GetTick>
 8009598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800959a:	e008      	b.n	80095ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800959c:	f7fb fa5a 	bl	8004a54 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d901      	bls.n	80095ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e06e      	b.n	800968c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095ae:	4b39      	ldr	r3, [pc, #228]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0f0      	beq.n	800959c <HAL_RCC_OscConfig+0x530>
 80095ba:	e066      	b.n	800968a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095bc:	4b35      	ldr	r3, [pc, #212]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a34      	ldr	r2, [pc, #208]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80095c8:	4b32      	ldr	r3, [pc, #200]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	4a31      	ldr	r2, [pc, #196]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80095d4:	4b2f      	ldr	r3, [pc, #188]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	4a2e      	ldr	r2, [pc, #184]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 80095da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80095de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e4:	f7fb fa36 	bl	8004a54 <HAL_GetTick>
 80095e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ec:	f7fb fa32 	bl	8004a54 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e046      	b.n	800968c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095fe:	4b25      	ldr	r3, [pc, #148]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1f0      	bne.n	80095ec <HAL_RCC_OscConfig+0x580>
 800960a:	e03e      	b.n	800968a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e039      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009618:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <HAL_RCC_OscConfig+0x628>)
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f003 0203 	and.w	r2, r3, #3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	429a      	cmp	r2, r3
 800962a:	d12c      	bne.n	8009686 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	3b01      	subs	r3, #1
 8009638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800963a:	429a      	cmp	r2, r3
 800963c:	d123      	bne.n	8009686 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800964a:	429a      	cmp	r2, r3
 800964c:	d11b      	bne.n	8009686 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800965a:	429a      	cmp	r2, r3
 800965c:	d113      	bne.n	8009686 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009668:	085b      	lsrs	r3, r3, #1
 800966a:	3b01      	subs	r3, #1
 800966c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800966e:	429a      	cmp	r2, r3
 8009670:	d109      	bne.n	8009686 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	085b      	lsrs	r3, r3, #1
 800967e:	3b01      	subs	r3, #1
 8009680:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009682:	429a      	cmp	r2, r3
 8009684:	d001      	beq.n	800968a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	40021000 	.word	0x40021000
 8009698:	019f800c 	.word	0x019f800c

0800969c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80096a6:	2300      	movs	r3, #0
 80096a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e11e      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096b4:	4b91      	ldr	r3, [pc, #580]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d910      	bls.n	80096e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096c2:	4b8e      	ldr	r3, [pc, #568]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f023 020f 	bic.w	r2, r3, #15
 80096ca:	498c      	ldr	r1, [pc, #560]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096d2:	4b8a      	ldr	r3, [pc, #552]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 030f 	and.w	r3, r3, #15
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d001      	beq.n	80096e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e106      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d073      	beq.n	80097d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d129      	bne.n	800974c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f8:	4b81      	ldr	r3, [pc, #516]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e0f4      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009708:	f000 f99e 	bl	8009a48 <RCC_GetSysClockFreqFromPLLSource>
 800970c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	4a7c      	ldr	r2, [pc, #496]	; (8009904 <HAL_RCC_ClockConfig+0x268>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d93f      	bls.n	8009796 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009716:	4b7a      	ldr	r3, [pc, #488]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800972a:	2b00      	cmp	r3, #0
 800972c:	d033      	beq.n	8009796 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009732:	2b00      	cmp	r3, #0
 8009734:	d12f      	bne.n	8009796 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009736:	4b72      	ldr	r3, [pc, #456]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800973e:	4a70      	ldr	r2, [pc, #448]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009744:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009746:	2380      	movs	r3, #128	; 0x80
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	e024      	b.n	8009796 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d107      	bne.n	8009764 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009754:	4b6a      	ldr	r3, [pc, #424]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e0c6      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009764:	4b66      	ldr	r3, [pc, #408]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e0be      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009774:	f000 f8ce 	bl	8009914 <HAL_RCC_GetSysClockFreq>
 8009778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4a61      	ldr	r2, [pc, #388]	; (8009904 <HAL_RCC_ClockConfig+0x268>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d909      	bls.n	8009796 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009782:	4b5f      	ldr	r3, [pc, #380]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800978a:	4a5d      	ldr	r2, [pc, #372]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 800978c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009790:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009792:	2380      	movs	r3, #128	; 0x80
 8009794:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009796:	4b5a      	ldr	r3, [pc, #360]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f023 0203 	bic.w	r2, r3, #3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	4957      	ldr	r1, [pc, #348]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a8:	f7fb f954 	bl	8004a54 <HAL_GetTick>
 80097ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ae:	e00a      	b.n	80097c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097b0:	f7fb f950 	bl	8004a54 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80097be:	4293      	cmp	r3, r2
 80097c0:	d901      	bls.n	80097c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e095      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097c6:	4b4e      	ldr	r3, [pc, #312]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 020c 	and.w	r2, r3, #12
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d1eb      	bne.n	80097b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d023      	beq.n	800982c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d005      	beq.n	80097fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097f0:	4b43      	ldr	r3, [pc, #268]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	4a42      	ldr	r2, [pc, #264]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80097f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009808:	4b3d      	ldr	r3, [pc, #244]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009810:	4a3b      	ldr	r2, [pc, #236]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009816:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009818:	4b39      	ldr	r3, [pc, #228]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	4936      	ldr	r1, [pc, #216]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009826:	4313      	orrs	r3, r2
 8009828:	608b      	str	r3, [r1, #8]
 800982a:	e008      	b.n	800983e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b80      	cmp	r3, #128	; 0x80
 8009830:	d105      	bne.n	800983e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009832:	4b33      	ldr	r3, [pc, #204]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	4a32      	ldr	r2, [pc, #200]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800983c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800983e:	4b2f      	ldr	r3, [pc, #188]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d21d      	bcs.n	8009888 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800984c:	4b2b      	ldr	r3, [pc, #172]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f023 020f 	bic.w	r2, r3, #15
 8009854:	4929      	ldr	r1, [pc, #164]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	4313      	orrs	r3, r2
 800985a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800985c:	f7fb f8fa 	bl	8004a54 <HAL_GetTick>
 8009860:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009862:	e00a      	b.n	800987a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009864:	f7fb f8f6 	bl	8004a54 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009872:	4293      	cmp	r3, r2
 8009874:	d901      	bls.n	800987a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e03b      	b.n	80098f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800987a:	4b20      	ldr	r3, [pc, #128]	; (80098fc <HAL_RCC_ClockConfig+0x260>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 030f 	and.w	r3, r3, #15
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d1ed      	bne.n	8009864 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d008      	beq.n	80098a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009894:	4b1a      	ldr	r3, [pc, #104]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4917      	ldr	r1, [pc, #92]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0308 	and.w	r3, r3, #8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d009      	beq.n	80098c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098b2:	4b13      	ldr	r3, [pc, #76]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	490f      	ldr	r1, [pc, #60]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098c6:	f000 f825 	bl	8009914 <HAL_RCC_GetSysClockFreq>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <HAL_RCC_ClockConfig+0x264>)
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	091b      	lsrs	r3, r3, #4
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	490c      	ldr	r1, [pc, #48]	; (8009908 <HAL_RCC_ClockConfig+0x26c>)
 80098d8:	5ccb      	ldrb	r3, [r1, r3]
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	fa22 f303 	lsr.w	r3, r2, r3
 80098e2:	4a0a      	ldr	r2, [pc, #40]	; (800990c <HAL_RCC_ClockConfig+0x270>)
 80098e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <HAL_RCC_ClockConfig+0x274>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fb f866 	bl	80049bc <HAL_InitTick>
 80098f0:	4603      	mov	r3, r0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40022000 	.word	0x40022000
 8009900:	40021000 	.word	0x40021000
 8009904:	04c4b400 	.word	0x04c4b400
 8009908:	0801512c 	.word	0x0801512c
 800990c:	20000030 	.word	0x20000030
 8009910:	20000034 	.word	0x20000034

08009914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800991a:	4b2c      	ldr	r3, [pc, #176]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 030c 	and.w	r3, r3, #12
 8009922:	2b04      	cmp	r3, #4
 8009924:	d102      	bne.n	800992c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009926:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	e047      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800992c:	4b27      	ldr	r3, [pc, #156]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f003 030c 	and.w	r3, r3, #12
 8009934:	2b08      	cmp	r3, #8
 8009936:	d102      	bne.n	800993e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009938:	4b26      	ldr	r3, [pc, #152]	; (80099d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	e03e      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800993e:	4b23      	ldr	r3, [pc, #140]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 030c 	and.w	r3, r3, #12
 8009946:	2b0c      	cmp	r3, #12
 8009948:	d136      	bne.n	80099b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800994a:	4b20      	ldr	r3, [pc, #128]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009954:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	091b      	lsrs	r3, r3, #4
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	3301      	adds	r3, #1
 8009960:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d10c      	bne.n	8009982 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009968:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009970:	4a16      	ldr	r2, [pc, #88]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009972:	68d2      	ldr	r2, [r2, #12]
 8009974:	0a12      	lsrs	r2, r2, #8
 8009976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800997a:	fb02 f303 	mul.w	r3, r2, r3
 800997e:	617b      	str	r3, [r7, #20]
      break;
 8009980:	e00c      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009982:	4a13      	ldr	r2, [pc, #76]	; (80099d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	fbb2 f3f3 	udiv	r3, r2, r3
 800998a:	4a10      	ldr	r2, [pc, #64]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800998c:	68d2      	ldr	r2, [r2, #12]
 800998e:	0a12      	lsrs	r2, r2, #8
 8009990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009994:	fb02 f303 	mul.w	r3, r2, r3
 8009998:	617b      	str	r3, [r7, #20]
      break;
 800999a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	0e5b      	lsrs	r3, r3, #25
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	3301      	adds	r3, #1
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b4:	613b      	str	r3, [r7, #16]
 80099b6:	e001      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80099bc:	693b      	ldr	r3, [r7, #16]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40021000 	.word	0x40021000
 80099d0:	00f42400 	.word	0x00f42400
 80099d4:	016e3600 	.word	0x016e3600

080099d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099d8:	b480      	push	{r7}
 80099da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099dc:	4b03      	ldr	r3, [pc, #12]	; (80099ec <HAL_RCC_GetHCLKFreq+0x14>)
 80099de:	681b      	ldr	r3, [r3, #0]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	20000030 	.word	0x20000030

080099f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099f4:	f7ff fff0 	bl	80099d8 <HAL_RCC_GetHCLKFreq>
 80099f8:	4602      	mov	r2, r0
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	4904      	ldr	r1, [pc, #16]	; (8009a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a06:	5ccb      	ldrb	r3, [r1, r3]
 8009a08:	f003 031f 	and.w	r3, r3, #31
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40021000 	.word	0x40021000
 8009a18:	0801513c 	.word	0x0801513c

08009a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a20:	f7ff ffda 	bl	80099d8 <HAL_RCC_GetHCLKFreq>
 8009a24:	4602      	mov	r2, r0
 8009a26:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	0adb      	lsrs	r3, r3, #11
 8009a2c:	f003 0307 	and.w	r3, r3, #7
 8009a30:	4904      	ldr	r1, [pc, #16]	; (8009a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a32:	5ccb      	ldrb	r3, [r1, r3]
 8009a34:	f003 031f 	and.w	r3, r3, #31
 8009a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40021000 	.word	0x40021000
 8009a44:	0801513c 	.word	0x0801513c

08009a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a58:	4b1b      	ldr	r3, [pc, #108]	; (8009ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	091b      	lsrs	r3, r3, #4
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	3301      	adds	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d10c      	bne.n	8009a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a6c:	4a17      	ldr	r2, [pc, #92]	; (8009acc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a74:	4a14      	ldr	r2, [pc, #80]	; (8009ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a76:	68d2      	ldr	r2, [r2, #12]
 8009a78:	0a12      	lsrs	r2, r2, #8
 8009a7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a7e:	fb02 f303 	mul.w	r3, r2, r3
 8009a82:	617b      	str	r3, [r7, #20]
    break;
 8009a84:	e00c      	b.n	8009aa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8e:	4a0e      	ldr	r2, [pc, #56]	; (8009ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a90:	68d2      	ldr	r2, [r2, #12]
 8009a92:	0a12      	lsrs	r2, r2, #8
 8009a94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a98:	fb02 f303 	mul.w	r3, r2, r3
 8009a9c:	617b      	str	r3, [r7, #20]
    break;
 8009a9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009aa0:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	0e5b      	lsrs	r3, r3, #25
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	3301      	adds	r3, #1
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009aba:	687b      	ldr	r3, [r7, #4]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	371c      	adds	r7, #28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	40021000 	.word	0x40021000
 8009acc:	016e3600 	.word	0x016e3600
 8009ad0:	00f42400 	.word	0x00f42400

08009ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009adc:	2300      	movs	r3, #0
 8009ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8098 	beq.w	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009af2:	2300      	movs	r3, #0
 8009af4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009af6:	4b43      	ldr	r3, [pc, #268]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10d      	bne.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b02:	4b40      	ldr	r3, [pc, #256]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b06:	4a3f      	ldr	r2, [pc, #252]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8009b0e:	4b3d      	ldr	r3, [pc, #244]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b16:	60bb      	str	r3, [r7, #8]
 8009b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b1e:	4b3a      	ldr	r3, [pc, #232]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a39      	ldr	r2, [pc, #228]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b2a:	f7fa ff93 	bl	8004a54 <HAL_GetTick>
 8009b2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b30:	e009      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b32:	f7fa ff8f 	bl	8004a54 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d902      	bls.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	74fb      	strb	r3, [r7, #19]
        break;
 8009b44:	e005      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b46:	4b30      	ldr	r3, [pc, #192]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0ef      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009b52:	7cfb      	ldrb	r3, [r7, #19]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d159      	bne.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b58:	4b2a      	ldr	r3, [pc, #168]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d01e      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d019      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b74:	4b23      	ldr	r3, [pc, #140]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b80:	4b20      	ldr	r3, [pc, #128]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b86:	4a1f      	ldr	r2, [pc, #124]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b90:	4b1c      	ldr	r3, [pc, #112]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b96:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ba0:	4a18      	ldr	r2, [pc, #96]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d016      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb2:	f7fa ff4f 	bl	8004a54 <HAL_GetTick>
 8009bb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bb8:	e00b      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bba:	f7fa ff4b 	bl	8004a54 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d902      	bls.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	74fb      	strb	r3, [r7, #19]
            break;
 8009bd0:	e006      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0ec      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009be0:	7cfb      	ldrb	r3, [r7, #19]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009be6:	4b07      	ldr	r3, [pc, #28]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf4:	4903      	ldr	r1, [pc, #12]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009bfc:	e008      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009bfe:	7cfb      	ldrb	r3, [r7, #19]
 8009c00:	74bb      	strb	r3, [r7, #18]
 8009c02:	e005      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009c04:	40021000 	.word	0x40021000
 8009c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c0c:	7cfb      	ldrb	r3, [r7, #19]
 8009c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c10:	7c7b      	ldrb	r3, [r7, #17]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d105      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c16:	4ba7      	ldr	r3, [pc, #668]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c1a:	4aa6      	ldr	r2, [pc, #664]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c2e:	4ba1      	ldr	r3, [pc, #644]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c34:	f023 0203 	bic.w	r2, r3, #3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	499d      	ldr	r1, [pc, #628]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00a      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c50:	4b98      	ldr	r3, [pc, #608]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c56:	f023 020c 	bic.w	r2, r3, #12
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	4995      	ldr	r1, [pc, #596]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00a      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c72:	4b90      	ldr	r3, [pc, #576]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	498c      	ldr	r1, [pc, #560]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00a      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c94:	4b87      	ldr	r3, [pc, #540]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	4984      	ldr	r1, [pc, #528]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0310 	and.w	r3, r3, #16
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009cb6:	4b7f      	ldr	r3, [pc, #508]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	497b      	ldr	r1, [pc, #492]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00a      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009cd8:	4b76      	ldr	r3, [pc, #472]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	4973      	ldr	r1, [pc, #460]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009cfa:	4b6e      	ldr	r3, [pc, #440]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	496a      	ldr	r1, [pc, #424]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d1c:	4b65      	ldr	r3, [pc, #404]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	4962      	ldr	r1, [pc, #392]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d3e:	4b5d      	ldr	r3, [pc, #372]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	4959      	ldr	r1, [pc, #356]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00a      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d60:	4b54      	ldr	r3, [pc, #336]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d66:	f023 0203 	bic.w	r2, r3, #3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6e:	4951      	ldr	r1, [pc, #324]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d82:	4b4c      	ldr	r3, [pc, #304]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	4948      	ldr	r1, [pc, #288]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d015      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009da4:	4b43      	ldr	r3, [pc, #268]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	4940      	ldr	r1, [pc, #256]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dc2:	d105      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dc4:	4b3b      	ldr	r3, [pc, #236]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	4a3a      	ldr	r2, [pc, #232]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d015      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009ddc:	4b35      	ldr	r3, [pc, #212]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dea:	4932      	ldr	r1, [pc, #200]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dfa:	d105      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dfc:	4b2d      	ldr	r3, [pc, #180]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	4a2c      	ldr	r2, [pc, #176]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d015      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e14:	4b27      	ldr	r3, [pc, #156]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	4924      	ldr	r1, [pc, #144]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e32:	d105      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e34:	4b1f      	ldr	r3, [pc, #124]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	4a1e      	ldr	r2, [pc, #120]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d015      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e4c:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5a:	4916      	ldr	r1, [pc, #88]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e6a:	d105      	bne.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e6c:	4b11      	ldr	r3, [pc, #68]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	4a10      	ldr	r2, [pc, #64]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d019      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e84:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	4908      	ldr	r1, [pc, #32]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ea2:	d109      	bne.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ea4:	4b03      	ldr	r3, [pc, #12]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	4a02      	ldr	r2, [pc, #8]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eae:	60d3      	str	r3, [r2, #12]
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009eb2:	bf00      	nop
 8009eb4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d015      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ec4:	4b29      	ldr	r3, [pc, #164]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed2:	4926      	ldr	r1, [pc, #152]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ee2:	d105      	bne.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ee4:	4b21      	ldr	r3, [pc, #132]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	4a20      	ldr	r2, [pc, #128]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d015      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009efc:	4b1b      	ldr	r3, [pc, #108]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f0a:	4918      	ldr	r1, [pc, #96]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1a:	d105      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f1c:	4b13      	ldr	r3, [pc, #76]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	4a12      	ldr	r2, [pc, #72]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d015      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009f34:	4b0d      	ldr	r3, [pc, #52]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f42:	490a      	ldr	r1, [pc, #40]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f52:	d105      	bne.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	4a04      	ldr	r2, [pc, #16]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009f60:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	40021000 	.word	0x40021000

08009f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e049      	b.n	800a016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fa f96c 	bl	8004274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f000 fde6 	bl	800ab80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b01      	cmp	r3, #1
 800a032:	d001      	beq.n	800a038 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e04c      	b.n	800a0d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a26      	ldr	r2, [pc, #152]	; (800a0e0 <HAL_TIM_Base_Start+0xc0>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d022      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a052:	d01d      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a22      	ldr	r2, [pc, #136]	; (800a0e4 <HAL_TIM_Base_Start+0xc4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d018      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a21      	ldr	r2, [pc, #132]	; (800a0e8 <HAL_TIM_Base_Start+0xc8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d013      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1f      	ldr	r2, [pc, #124]	; (800a0ec <HAL_TIM_Base_Start+0xcc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00e      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1e      	ldr	r2, [pc, #120]	; (800a0f0 <HAL_TIM_Base_Start+0xd0>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d009      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a1c      	ldr	r2, [pc, #112]	; (800a0f4 <HAL_TIM_Base_Start+0xd4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d004      	beq.n	800a090 <HAL_TIM_Base_Start+0x70>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a1b      	ldr	r2, [pc, #108]	; (800a0f8 <HAL_TIM_Base_Start+0xd8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d115      	bne.n	800a0bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	4b19      	ldr	r3, [pc, #100]	; (800a0fc <HAL_TIM_Base_Start+0xdc>)
 800a098:	4013      	ands	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d015      	beq.n	800a0ce <HAL_TIM_Base_Start+0xae>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a8:	d011      	beq.n	800a0ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	e008      	b.n	800a0ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	40012c00 	.word	0x40012c00
 800a0e4:	40000400 	.word	0x40000400
 800a0e8:	40000800 	.word	0x40000800
 800a0ec:	40000c00 	.word	0x40000c00
 800a0f0:	40013400 	.word	0x40013400
 800a0f4:	40014000 	.word	0x40014000
 800a0f8:	40015000 	.word	0x40015000
 800a0fc:	00010007 	.word	0x00010007

0800a100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	d001      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e054      	b.n	800a1c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0201 	orr.w	r2, r2, #1
 800a12e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a26      	ldr	r2, [pc, #152]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d022      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a142:	d01d      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a22      	ldr	r2, [pc, #136]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d018      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a21      	ldr	r2, [pc, #132]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d013      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1f      	ldr	r2, [pc, #124]	; (800a1dc <HAL_TIM_Base_Start_IT+0xdc>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00e      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a1e      	ldr	r2, [pc, #120]	; (800a1e0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d009      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1c      	ldr	r2, [pc, #112]	; (800a1e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d004      	beq.n	800a180 <HAL_TIM_Base_Start_IT+0x80>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a1b      	ldr	r2, [pc, #108]	; (800a1e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d115      	bne.n	800a1ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	4b19      	ldr	r3, [pc, #100]	; (800a1ec <HAL_TIM_Base_Start_IT+0xec>)
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b06      	cmp	r3, #6
 800a190:	d015      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0xbe>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a198:	d011      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f042 0201 	orr.w	r2, r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1aa:	e008      	b.n	800a1be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	e000      	b.n	800a1c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40012c00 	.word	0x40012c00
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	40013400 	.word	0x40013400
 800a1e4:	40014000 	.word	0x40014000
 800a1e8:	40015000 	.word	0x40015000
 800a1ec:	00010007 	.word	0x00010007

0800a1f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0201 	bic.w	r2, r2, #1
 800a206:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6a1a      	ldr	r2, [r3, #32]
 800a20e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a212:	4013      	ands	r3, r2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10f      	bne.n	800a238 <HAL_TIM_Base_Stop_IT+0x48>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6a1a      	ldr	r2, [r3, #32]
 800a21e:	f244 4344 	movw	r3, #17476	; 0x4444
 800a222:	4013      	ands	r3, r2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d107      	bne.n	800a238 <HAL_TIM_Base_Stop_IT+0x48>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0201 	bic.w	r2, r2, #1
 800a236:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e049      	b.n	800a2f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f841 	bl	800a2fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2202      	movs	r2, #2
 800a27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3304      	adds	r3, #4
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f000 fc77 	bl	800ab80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_TIM_PWM_Start+0x24>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b01      	cmp	r3, #1
 800a32a:	bf14      	ite	ne
 800a32c:	2301      	movne	r3, #1
 800a32e:	2300      	moveq	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	e03c      	b.n	800a3ae <HAL_TIM_PWM_Start+0x9e>
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b04      	cmp	r3, #4
 800a338:	d109      	bne.n	800a34e <HAL_TIM_PWM_Start+0x3e>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	bf14      	ite	ne
 800a346:	2301      	movne	r3, #1
 800a348:	2300      	moveq	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	e02f      	b.n	800a3ae <HAL_TIM_PWM_Start+0x9e>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b08      	cmp	r3, #8
 800a352:	d109      	bne.n	800a368 <HAL_TIM_PWM_Start+0x58>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	bf14      	ite	ne
 800a360:	2301      	movne	r3, #1
 800a362:	2300      	moveq	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	e022      	b.n	800a3ae <HAL_TIM_PWM_Start+0x9e>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	d109      	bne.n	800a382 <HAL_TIM_PWM_Start+0x72>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b01      	cmp	r3, #1
 800a378:	bf14      	ite	ne
 800a37a:	2301      	movne	r3, #1
 800a37c:	2300      	moveq	r3, #0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	e015      	b.n	800a3ae <HAL_TIM_PWM_Start+0x9e>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b10      	cmp	r3, #16
 800a386:	d109      	bne.n	800a39c <HAL_TIM_PWM_Start+0x8c>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	bf14      	ite	ne
 800a394:	2301      	movne	r3, #1
 800a396:	2300      	moveq	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	e008      	b.n	800a3ae <HAL_TIM_PWM_Start+0x9e>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e0a6      	b.n	800a504 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <HAL_TIM_PWM_Start+0xb6>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3c4:	e023      	b.n	800a40e <HAL_TIM_PWM_Start+0xfe>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d104      	bne.n	800a3d6 <HAL_TIM_PWM_Start+0xc6>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d4:	e01b      	b.n	800a40e <HAL_TIM_PWM_Start+0xfe>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d104      	bne.n	800a3e6 <HAL_TIM_PWM_Start+0xd6>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e4:	e013      	b.n	800a40e <HAL_TIM_PWM_Start+0xfe>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b0c      	cmp	r3, #12
 800a3ea:	d104      	bne.n	800a3f6 <HAL_TIM_PWM_Start+0xe6>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3f4:	e00b      	b.n	800a40e <HAL_TIM_PWM_Start+0xfe>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d104      	bne.n	800a406 <HAL_TIM_PWM_Start+0xf6>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2202      	movs	r2, #2
 800a400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a404:	e003      	b.n	800a40e <HAL_TIM_PWM_Start+0xfe>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2202      	movs	r2, #2
 800a40a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2201      	movs	r2, #1
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f001 f8e3 	bl	800b5e2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a3a      	ldr	r2, [pc, #232]	; (800a50c <HAL_TIM_PWM_Start+0x1fc>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d018      	beq.n	800a458 <HAL_TIM_PWM_Start+0x148>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a39      	ldr	r2, [pc, #228]	; (800a510 <HAL_TIM_PWM_Start+0x200>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d013      	beq.n	800a458 <HAL_TIM_PWM_Start+0x148>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a37      	ldr	r2, [pc, #220]	; (800a514 <HAL_TIM_PWM_Start+0x204>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00e      	beq.n	800a458 <HAL_TIM_PWM_Start+0x148>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a36      	ldr	r2, [pc, #216]	; (800a518 <HAL_TIM_PWM_Start+0x208>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d009      	beq.n	800a458 <HAL_TIM_PWM_Start+0x148>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a34      	ldr	r2, [pc, #208]	; (800a51c <HAL_TIM_PWM_Start+0x20c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d004      	beq.n	800a458 <HAL_TIM_PWM_Start+0x148>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a33      	ldr	r2, [pc, #204]	; (800a520 <HAL_TIM_PWM_Start+0x210>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d101      	bne.n	800a45c <HAL_TIM_PWM_Start+0x14c>
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <HAL_TIM_PWM_Start+0x14e>
 800a45c:	2300      	movs	r3, #0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d007      	beq.n	800a472 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a25      	ldr	r2, [pc, #148]	; (800a50c <HAL_TIM_PWM_Start+0x1fc>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d022      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a484:	d01d      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a26      	ldr	r2, [pc, #152]	; (800a524 <HAL_TIM_PWM_Start+0x214>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d018      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a24      	ldr	r2, [pc, #144]	; (800a528 <HAL_TIM_PWM_Start+0x218>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d013      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a23      	ldr	r2, [pc, #140]	; (800a52c <HAL_TIM_PWM_Start+0x21c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d00e      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a19      	ldr	r2, [pc, #100]	; (800a510 <HAL_TIM_PWM_Start+0x200>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d009      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a18      	ldr	r2, [pc, #96]	; (800a514 <HAL_TIM_PWM_Start+0x204>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d004      	beq.n	800a4c2 <HAL_TIM_PWM_Start+0x1b2>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a18      	ldr	r2, [pc, #96]	; (800a520 <HAL_TIM_PWM_Start+0x210>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d115      	bne.n	800a4ee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689a      	ldr	r2, [r3, #8]
 800a4c8:	4b19      	ldr	r3, [pc, #100]	; (800a530 <HAL_TIM_PWM_Start+0x220>)
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b06      	cmp	r3, #6
 800a4d2:	d015      	beq.n	800a500 <HAL_TIM_PWM_Start+0x1f0>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4da:	d011      	beq.n	800a500 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ec:	e008      	b.n	800a500 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0201 	orr.w	r2, r2, #1
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	e000      	b.n	800a502 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a500:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	40012c00 	.word	0x40012c00
 800a510:	40013400 	.word	0x40013400
 800a514:	40014000 	.word	0x40014000
 800a518:	40014400 	.word	0x40014400
 800a51c:	40014800 	.word	0x40014800
 800a520:	40015000 	.word	0x40015000
 800a524:	40000400 	.word	0x40000400
 800a528:	40000800 	.word	0x40000800
 800a52c:	40000c00 	.word	0x40000c00
 800a530:	00010007 	.word	0x00010007

0800a534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b02      	cmp	r3, #2
 800a548:	d122      	bne.n	800a590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b02      	cmp	r3, #2
 800a556:	d11b      	bne.n	800a590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f06f 0202 	mvn.w	r2, #2
 800a560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fae3 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a57c:	e005      	b.n	800a58a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fad5 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fae6 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d122      	bne.n	800a5e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d11b      	bne.n	800a5e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0204 	mvn.w	r2, #4
 800a5b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fab9 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a5d0:	e005      	b.n	800a5de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 faab 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fabc 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b08      	cmp	r3, #8
 800a5f0:	d122      	bne.n	800a638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f003 0308 	and.w	r3, r3, #8
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d11b      	bne.n	800a638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f06f 0208 	mvn.w	r2, #8
 800a608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2204      	movs	r2, #4
 800a60e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	f003 0303 	and.w	r3, r3, #3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa8f 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a624:	e005      	b.n	800a632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fa81 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fa92 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	f003 0310 	and.w	r3, r3, #16
 800a642:	2b10      	cmp	r3, #16
 800a644:	d122      	bne.n	800a68c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f003 0310 	and.w	r3, r3, #16
 800a650:	2b10      	cmp	r3, #16
 800a652:	d11b      	bne.n	800a68c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f06f 0210 	mvn.w	r2, #16
 800a65c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2208      	movs	r2, #8
 800a662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fa65 	bl	800ab42 <HAL_TIM_IC_CaptureCallback>
 800a678:	e005      	b.n	800a686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fa57 	bl	800ab2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fa68 	bl	800ab56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b01      	cmp	r3, #1
 800a698:	d10e      	bne.n	800a6b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d107      	bne.n	800a6b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f06f 0201 	mvn.w	r2, #1
 800a6b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7f8 fd64 	bl	8003180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d10e      	bne.n	800a6e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d0:	2b80      	cmp	r3, #128	; 0x80
 800a6d2:	d107      	bne.n	800a6e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f001 fada 	bl	800bc98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f2:	d10e      	bne.n	800a712 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fe:	2b80      	cmp	r3, #128	; 0x80
 800a700:	d107      	bne.n	800a712 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 facd 	bl	800bcac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71c:	2b40      	cmp	r3, #64	; 0x40
 800a71e:	d10e      	bne.n	800a73e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72a:	2b40      	cmp	r3, #64	; 0x40
 800a72c:	d107      	bne.n	800a73e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fa16 	bl	800ab6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b20      	cmp	r3, #32
 800a74a:	d10e      	bne.n	800a76a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b20      	cmp	r3, #32
 800a758:	d107      	bne.n	800a76a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f06f 0220 	mvn.w	r2, #32
 800a762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fa8d 	bl	800bc84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a778:	d10f      	bne.n	800a79a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a788:	d107      	bne.n	800a79a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 fa93 	bl	800bcc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a8:	d10f      	bne.n	800a7ca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7b8:	d107      	bne.n	800a7ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a7c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 fa85 	bl	800bcd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7d8:	d10f      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7e8:	d107      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 fa77 	bl	800bce8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a808:	d10f      	bne.n	800a82a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a814:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a818:	d107      	bne.n	800a82a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fa69 	bl	800bcfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d101      	bne.n	800a852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a84e:	2302      	movs	r3, #2
 800a850:	e0ff      	b.n	800aa52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b14      	cmp	r3, #20
 800a85e:	f200 80f0 	bhi.w	800aa42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a8bd 	.word	0x0800a8bd
 800a86c:	0800aa43 	.word	0x0800aa43
 800a870:	0800aa43 	.word	0x0800aa43
 800a874:	0800aa43 	.word	0x0800aa43
 800a878:	0800a8fd 	.word	0x0800a8fd
 800a87c:	0800aa43 	.word	0x0800aa43
 800a880:	0800aa43 	.word	0x0800aa43
 800a884:	0800aa43 	.word	0x0800aa43
 800a888:	0800a93f 	.word	0x0800a93f
 800a88c:	0800aa43 	.word	0x0800aa43
 800a890:	0800aa43 	.word	0x0800aa43
 800a894:	0800aa43 	.word	0x0800aa43
 800a898:	0800a97f 	.word	0x0800a97f
 800a89c:	0800aa43 	.word	0x0800aa43
 800a8a0:	0800aa43 	.word	0x0800aa43
 800a8a4:	0800aa43 	.word	0x0800aa43
 800a8a8:	0800a9c1 	.word	0x0800a9c1
 800a8ac:	0800aa43 	.word	0x0800aa43
 800a8b0:	0800aa43 	.word	0x0800aa43
 800a8b4:	0800aa43 	.word	0x0800aa43
 800a8b8:	0800aa01 	.word	0x0800aa01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fa04 	bl	800acd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	699a      	ldr	r2, [r3, #24]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0208 	orr.w	r2, r2, #8
 800a8d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	699a      	ldr	r2, [r3, #24]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f022 0204 	bic.w	r2, r2, #4
 800a8e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6999      	ldr	r1, [r3, #24]
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	691a      	ldr	r2, [r3, #16]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	619a      	str	r2, [r3, #24]
      break;
 800a8fa:	e0a5      	b.n	800aa48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fa7e 	bl	800ae04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	699a      	ldr	r2, [r3, #24]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6999      	ldr	r1, [r3, #24]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	021a      	lsls	r2, r3, #8
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	619a      	str	r2, [r3, #24]
      break;
 800a93c:	e084      	b.n	800aa48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68b9      	ldr	r1, [r7, #8]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 faf1 	bl	800af2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69da      	ldr	r2, [r3, #28]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f042 0208 	orr.w	r2, r2, #8
 800a958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69da      	ldr	r2, [r3, #28]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0204 	bic.w	r2, r2, #4
 800a968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	69d9      	ldr	r1, [r3, #28]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	691a      	ldr	r2, [r3, #16]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	61da      	str	r2, [r3, #28]
      break;
 800a97c:	e064      	b.n	800aa48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fb63 	bl	800b050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69da      	ldr	r2, [r3, #28]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69da      	ldr	r2, [r3, #28]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69d9      	ldr	r1, [r3, #28]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	021a      	lsls	r2, r3, #8
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	61da      	str	r2, [r3, #28]
      break;
 800a9be:	e043      	b.n	800aa48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fbd6 	bl	800b178 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0208 	orr.w	r2, r2, #8
 800a9da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f022 0204 	bic.w	r2, r2, #4
 800a9ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	691a      	ldr	r2, [r3, #16]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a9fe:	e023      	b.n	800aa48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68b9      	ldr	r1, [r7, #8]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fc20 	bl	800b24c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	021a      	lsls	r2, r3, #8
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800aa40:	e002      	b.n	800aa48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
      break;
 800aa46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop

0800aa5c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d101      	bne.n	800aa74 <HAL_TIM_GenerateEvent+0x18>
 800aa70:	2302      	movs	r3, #2
 800aa72:	e014      	b.n	800aa9e <HAL_TIM_GenerateEvent+0x42>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e031      	b.n	800ab26 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fc25 	bl	800b324 <TIM_SlaveTimer_SetConfig>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d009      	beq.n	800aaf4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e018      	b.n	800ab26 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab02:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab12:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab36:	bf00      	nop
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a46      	ldr	r2, [pc, #280]	; (800acac <TIM_Base_SetConfig+0x12c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d017      	beq.n	800abc8 <TIM_Base_SetConfig+0x48>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9e:	d013      	beq.n	800abc8 <TIM_Base_SetConfig+0x48>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a43      	ldr	r2, [pc, #268]	; (800acb0 <TIM_Base_SetConfig+0x130>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00f      	beq.n	800abc8 <TIM_Base_SetConfig+0x48>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a42      	ldr	r2, [pc, #264]	; (800acb4 <TIM_Base_SetConfig+0x134>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00b      	beq.n	800abc8 <TIM_Base_SetConfig+0x48>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a41      	ldr	r2, [pc, #260]	; (800acb8 <TIM_Base_SetConfig+0x138>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d007      	beq.n	800abc8 <TIM_Base_SetConfig+0x48>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a40      	ldr	r2, [pc, #256]	; (800acbc <TIM_Base_SetConfig+0x13c>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d003      	beq.n	800abc8 <TIM_Base_SetConfig+0x48>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a3f      	ldr	r2, [pc, #252]	; (800acc0 <TIM_Base_SetConfig+0x140>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d108      	bne.n	800abda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a33      	ldr	r2, [pc, #204]	; (800acac <TIM_Base_SetConfig+0x12c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d023      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe8:	d01f      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a30      	ldr	r2, [pc, #192]	; (800acb0 <TIM_Base_SetConfig+0x130>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01b      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2f      	ldr	r2, [pc, #188]	; (800acb4 <TIM_Base_SetConfig+0x134>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d017      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a2e      	ldr	r2, [pc, #184]	; (800acb8 <TIM_Base_SetConfig+0x138>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a2d      	ldr	r2, [pc, #180]	; (800acbc <TIM_Base_SetConfig+0x13c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00f      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a2d      	ldr	r2, [pc, #180]	; (800acc4 <TIM_Base_SetConfig+0x144>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00b      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a2c      	ldr	r2, [pc, #176]	; (800acc8 <TIM_Base_SetConfig+0x148>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d007      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a2b      	ldr	r2, [pc, #172]	; (800accc <TIM_Base_SetConfig+0x14c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d003      	beq.n	800ac2a <TIM_Base_SetConfig+0xaa>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a26      	ldr	r2, [pc, #152]	; (800acc0 <TIM_Base_SetConfig+0x140>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d108      	bne.n	800ac3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a12      	ldr	r2, [pc, #72]	; (800acac <TIM_Base_SetConfig+0x12c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d013      	beq.n	800ac90 <TIM_Base_SetConfig+0x110>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a14      	ldr	r2, [pc, #80]	; (800acbc <TIM_Base_SetConfig+0x13c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00f      	beq.n	800ac90 <TIM_Base_SetConfig+0x110>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a14      	ldr	r2, [pc, #80]	; (800acc4 <TIM_Base_SetConfig+0x144>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00b      	beq.n	800ac90 <TIM_Base_SetConfig+0x110>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a13      	ldr	r2, [pc, #76]	; (800acc8 <TIM_Base_SetConfig+0x148>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d007      	beq.n	800ac90 <TIM_Base_SetConfig+0x110>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a12      	ldr	r2, [pc, #72]	; (800accc <TIM_Base_SetConfig+0x14c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_Base_SetConfig+0x110>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a0d      	ldr	r2, [pc, #52]	; (800acc0 <TIM_Base_SetConfig+0x140>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d103      	bne.n	800ac98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	615a      	str	r2, [r3, #20]
}
 800ac9e:	bf00      	nop
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	40012c00 	.word	0x40012c00
 800acb0:	40000400 	.word	0x40000400
 800acb4:	40000800 	.word	0x40000800
 800acb8:	40000c00 	.word	0x40000c00
 800acbc:	40013400 	.word	0x40013400
 800acc0:	40015000 	.word	0x40015000
 800acc4:	40014000 	.word	0x40014000
 800acc8:	40014400 	.word	0x40014400
 800accc:	40014800 	.word	0x40014800

0800acd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	f023 0201 	bic.w	r2, r3, #1
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f023 0302 	bic.w	r3, r3, #2
 800ad1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a30      	ldr	r2, [pc, #192]	; (800adec <TIM_OC1_SetConfig+0x11c>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d013      	beq.n	800ad58 <TIM_OC1_SetConfig+0x88>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a2f      	ldr	r2, [pc, #188]	; (800adf0 <TIM_OC1_SetConfig+0x120>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d00f      	beq.n	800ad58 <TIM_OC1_SetConfig+0x88>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a2e      	ldr	r2, [pc, #184]	; (800adf4 <TIM_OC1_SetConfig+0x124>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d00b      	beq.n	800ad58 <TIM_OC1_SetConfig+0x88>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a2d      	ldr	r2, [pc, #180]	; (800adf8 <TIM_OC1_SetConfig+0x128>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d007      	beq.n	800ad58 <TIM_OC1_SetConfig+0x88>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a2c      	ldr	r2, [pc, #176]	; (800adfc <TIM_OC1_SetConfig+0x12c>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d003      	beq.n	800ad58 <TIM_OC1_SetConfig+0x88>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a2b      	ldr	r2, [pc, #172]	; (800ae00 <TIM_OC1_SetConfig+0x130>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d10c      	bne.n	800ad72 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f023 0308 	bic.w	r3, r3, #8
 800ad5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f023 0304 	bic.w	r3, r3, #4
 800ad70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a1d      	ldr	r2, [pc, #116]	; (800adec <TIM_OC1_SetConfig+0x11c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d013      	beq.n	800ada2 <TIM_OC1_SetConfig+0xd2>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a1c      	ldr	r2, [pc, #112]	; (800adf0 <TIM_OC1_SetConfig+0x120>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d00f      	beq.n	800ada2 <TIM_OC1_SetConfig+0xd2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a1b      	ldr	r2, [pc, #108]	; (800adf4 <TIM_OC1_SetConfig+0x124>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d00b      	beq.n	800ada2 <TIM_OC1_SetConfig+0xd2>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a1a      	ldr	r2, [pc, #104]	; (800adf8 <TIM_OC1_SetConfig+0x128>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d007      	beq.n	800ada2 <TIM_OC1_SetConfig+0xd2>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a19      	ldr	r2, [pc, #100]	; (800adfc <TIM_OC1_SetConfig+0x12c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d003      	beq.n	800ada2 <TIM_OC1_SetConfig+0xd2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a18      	ldr	r2, [pc, #96]	; (800ae00 <TIM_OC1_SetConfig+0x130>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d111      	bne.n	800adc6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ada8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	4313      	orrs	r3, r2
 800adba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	621a      	str	r2, [r3, #32]
}
 800ade0:	bf00      	nop
 800ade2:	371c      	adds	r7, #28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	40012c00 	.word	0x40012c00
 800adf0:	40013400 	.word	0x40013400
 800adf4:	40014000 	.word	0x40014000
 800adf8:	40014400 	.word	0x40014400
 800adfc:	40014800 	.word	0x40014800
 800ae00:	40015000 	.word	0x40015000

0800ae04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f023 0210 	bic.w	r2, r3, #16
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f023 0320 	bic.w	r3, r3, #32
 800ae52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a2c      	ldr	r2, [pc, #176]	; (800af14 <TIM_OC2_SetConfig+0x110>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d007      	beq.n	800ae78 <TIM_OC2_SetConfig+0x74>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <TIM_OC2_SetConfig+0x114>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d003      	beq.n	800ae78 <TIM_OC2_SetConfig+0x74>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a2a      	ldr	r2, [pc, #168]	; (800af1c <TIM_OC2_SetConfig+0x118>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d10d      	bne.n	800ae94 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	011b      	lsls	r3, r3, #4
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a1f      	ldr	r2, [pc, #124]	; (800af14 <TIM_OC2_SetConfig+0x110>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d013      	beq.n	800aec4 <TIM_OC2_SetConfig+0xc0>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <TIM_OC2_SetConfig+0x114>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d00f      	beq.n	800aec4 <TIM_OC2_SetConfig+0xc0>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a1e      	ldr	r2, [pc, #120]	; (800af20 <TIM_OC2_SetConfig+0x11c>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d00b      	beq.n	800aec4 <TIM_OC2_SetConfig+0xc0>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a1d      	ldr	r2, [pc, #116]	; (800af24 <TIM_OC2_SetConfig+0x120>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d007      	beq.n	800aec4 <TIM_OC2_SetConfig+0xc0>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a1c      	ldr	r2, [pc, #112]	; (800af28 <TIM_OC2_SetConfig+0x124>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d003      	beq.n	800aec4 <TIM_OC2_SetConfig+0xc0>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a17      	ldr	r2, [pc, #92]	; (800af1c <TIM_OC2_SetConfig+0x118>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d113      	bne.n	800aeec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4313      	orrs	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	621a      	str	r2, [r3, #32]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	40012c00 	.word	0x40012c00
 800af18:	40013400 	.word	0x40013400
 800af1c:	40015000 	.word	0x40015000
 800af20:	40014000 	.word	0x40014000
 800af24:	40014400 	.word	0x40014400
 800af28:	40014800 	.word	0x40014800

0800af2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	4313      	orrs	r3, r2
 800af84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a2b      	ldr	r2, [pc, #172]	; (800b038 <TIM_OC3_SetConfig+0x10c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d007      	beq.n	800af9e <TIM_OC3_SetConfig+0x72>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a2a      	ldr	r2, [pc, #168]	; (800b03c <TIM_OC3_SetConfig+0x110>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d003      	beq.n	800af9e <TIM_OC3_SetConfig+0x72>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a29      	ldr	r2, [pc, #164]	; (800b040 <TIM_OC3_SetConfig+0x114>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d10d      	bne.n	800afba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a1e      	ldr	r2, [pc, #120]	; (800b038 <TIM_OC3_SetConfig+0x10c>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d013      	beq.n	800afea <TIM_OC3_SetConfig+0xbe>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a1d      	ldr	r2, [pc, #116]	; (800b03c <TIM_OC3_SetConfig+0x110>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d00f      	beq.n	800afea <TIM_OC3_SetConfig+0xbe>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a1d      	ldr	r2, [pc, #116]	; (800b044 <TIM_OC3_SetConfig+0x118>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00b      	beq.n	800afea <TIM_OC3_SetConfig+0xbe>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a1c      	ldr	r2, [pc, #112]	; (800b048 <TIM_OC3_SetConfig+0x11c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d007      	beq.n	800afea <TIM_OC3_SetConfig+0xbe>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a1b      	ldr	r2, [pc, #108]	; (800b04c <TIM_OC3_SetConfig+0x120>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d003      	beq.n	800afea <TIM_OC3_SetConfig+0xbe>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a16      	ldr	r2, [pc, #88]	; (800b040 <TIM_OC3_SetConfig+0x114>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d113      	bne.n	800b012 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	011b      	lsls	r3, r3, #4
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	4313      	orrs	r3, r2
 800b004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	4313      	orrs	r3, r2
 800b010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	621a      	str	r2, [r3, #32]
}
 800b02c:	bf00      	nop
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	40012c00 	.word	0x40012c00
 800b03c:	40013400 	.word	0x40013400
 800b040:	40015000 	.word	0x40015000
 800b044:	40014000 	.word	0x40014000
 800b048:	40014400 	.word	0x40014400
 800b04c:	40014800 	.word	0x40014800

0800b050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b09e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	031b      	lsls	r3, r3, #12
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a2c      	ldr	r2, [pc, #176]	; (800b160 <TIM_OC4_SetConfig+0x110>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d007      	beq.n	800b0c4 <TIM_OC4_SetConfig+0x74>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a2b      	ldr	r2, [pc, #172]	; (800b164 <TIM_OC4_SetConfig+0x114>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d003      	beq.n	800b0c4 <TIM_OC4_SetConfig+0x74>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a2a      	ldr	r2, [pc, #168]	; (800b168 <TIM_OC4_SetConfig+0x118>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d10d      	bne.n	800b0e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	031b      	lsls	r3, r3, #12
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a1f      	ldr	r2, [pc, #124]	; (800b160 <TIM_OC4_SetConfig+0x110>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d013      	beq.n	800b110 <TIM_OC4_SetConfig+0xc0>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a1e      	ldr	r2, [pc, #120]	; (800b164 <TIM_OC4_SetConfig+0x114>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00f      	beq.n	800b110 <TIM_OC4_SetConfig+0xc0>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a1e      	ldr	r2, [pc, #120]	; (800b16c <TIM_OC4_SetConfig+0x11c>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d00b      	beq.n	800b110 <TIM_OC4_SetConfig+0xc0>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a1d      	ldr	r2, [pc, #116]	; (800b170 <TIM_OC4_SetConfig+0x120>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d007      	beq.n	800b110 <TIM_OC4_SetConfig+0xc0>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a1c      	ldr	r2, [pc, #112]	; (800b174 <TIM_OC4_SetConfig+0x124>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d003      	beq.n	800b110 <TIM_OC4_SetConfig+0xc0>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a17      	ldr	r2, [pc, #92]	; (800b168 <TIM_OC4_SetConfig+0x118>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d113      	bne.n	800b138 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b116:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b11e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	019b      	lsls	r3, r3, #6
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	019b      	lsls	r3, r3, #6
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	621a      	str	r2, [r3, #32]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	40012c00 	.word	0x40012c00
 800b164:	40013400 	.word	0x40013400
 800b168:	40015000 	.word	0x40015000
 800b16c:	40014000 	.word	0x40014000
 800b170:	40014400 	.word	0x40014400
 800b174:	40014800 	.word	0x40014800

0800b178 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b1bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a19      	ldr	r2, [pc, #100]	; (800b234 <TIM_OC5_SetConfig+0xbc>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d013      	beq.n	800b1fa <TIM_OC5_SetConfig+0x82>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a18      	ldr	r2, [pc, #96]	; (800b238 <TIM_OC5_SetConfig+0xc0>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00f      	beq.n	800b1fa <TIM_OC5_SetConfig+0x82>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a17      	ldr	r2, [pc, #92]	; (800b23c <TIM_OC5_SetConfig+0xc4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00b      	beq.n	800b1fa <TIM_OC5_SetConfig+0x82>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a16      	ldr	r2, [pc, #88]	; (800b240 <TIM_OC5_SetConfig+0xc8>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d007      	beq.n	800b1fa <TIM_OC5_SetConfig+0x82>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a15      	ldr	r2, [pc, #84]	; (800b244 <TIM_OC5_SetConfig+0xcc>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d003      	beq.n	800b1fa <TIM_OC5_SetConfig+0x82>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a14      	ldr	r2, [pc, #80]	; (800b248 <TIM_OC5_SetConfig+0xd0>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d109      	bne.n	800b20e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b200:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	621a      	str	r2, [r3, #32]
}
 800b228:	bf00      	nop
 800b22a:	371c      	adds	r7, #28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	40012c00 	.word	0x40012c00
 800b238:	40013400 	.word	0x40013400
 800b23c:	40014000 	.word	0x40014000
 800b240:	40014400 	.word	0x40014400
 800b244:	40014800 	.word	0x40014800
 800b248:	40015000 	.word	0x40015000

0800b24c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b27e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	021b      	lsls	r3, r3, #8
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	051b      	lsls	r3, r3, #20
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a1a      	ldr	r2, [pc, #104]	; (800b30c <TIM_OC6_SetConfig+0xc0>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d013      	beq.n	800b2d0 <TIM_OC6_SetConfig+0x84>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a19      	ldr	r2, [pc, #100]	; (800b310 <TIM_OC6_SetConfig+0xc4>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d00f      	beq.n	800b2d0 <TIM_OC6_SetConfig+0x84>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a18      	ldr	r2, [pc, #96]	; (800b314 <TIM_OC6_SetConfig+0xc8>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d00b      	beq.n	800b2d0 <TIM_OC6_SetConfig+0x84>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <TIM_OC6_SetConfig+0xcc>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d007      	beq.n	800b2d0 <TIM_OC6_SetConfig+0x84>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a16      	ldr	r2, [pc, #88]	; (800b31c <TIM_OC6_SetConfig+0xd0>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d003      	beq.n	800b2d0 <TIM_OC6_SetConfig+0x84>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a15      	ldr	r2, [pc, #84]	; (800b320 <TIM_OC6_SetConfig+0xd4>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d109      	bne.n	800b2e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	029b      	lsls	r3, r3, #10
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	621a      	str	r2, [r3, #32]
}
 800b2fe:	bf00      	nop
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	40012c00 	.word	0x40012c00
 800b310:	40013400 	.word	0x40013400
 800b314:	40014000 	.word	0x40014000
 800b318:	40014400 	.word	0x40014400
 800b31c:	40014800 	.word	0x40014800
 800b320:	40015000 	.word	0x40015000

0800b324 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b344:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b356:	f023 0307 	bic.w	r3, r3, #7
 800b35a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	4313      	orrs	r3, r2
 800b364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	4a56      	ldr	r2, [pc, #344]	; (800b4cc <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b374:	4293      	cmp	r3, r2
 800b376:	f000 80a2 	beq.w	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b37a:	4a54      	ldr	r2, [pc, #336]	; (800b4cc <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	f200 809b 	bhi.w	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b382:	4a53      	ldr	r2, [pc, #332]	; (800b4d0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b384:	4293      	cmp	r3, r2
 800b386:	f000 809a 	beq.w	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b38a:	4a51      	ldr	r2, [pc, #324]	; (800b4d0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	f200 8093 	bhi.w	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b392:	4a50      	ldr	r2, [pc, #320]	; (800b4d4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b394:	4293      	cmp	r3, r2
 800b396:	f000 8092 	beq.w	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b39a:	4a4e      	ldr	r2, [pc, #312]	; (800b4d4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	f200 808b 	bhi.w	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3a2:	4a4d      	ldr	r2, [pc, #308]	; (800b4d8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	f000 808a 	beq.w	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b3aa:	4a4b      	ldr	r2, [pc, #300]	; (800b4d8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	f200 8083 	bhi.w	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3b2:	4a4a      	ldr	r2, [pc, #296]	; (800b4dc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	f000 8082 	beq.w	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b3ba:	4a48      	ldr	r2, [pc, #288]	; (800b4dc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d87b      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3c0:	4a47      	ldr	r2, [pc, #284]	; (800b4e0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d07b      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b3c6:	4a46      	ldr	r2, [pc, #280]	; (800b4e0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d875      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3d0:	d075      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b3d2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3d6:	d86f      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3dc:	d06f      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b3de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e2:	d869      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3e4:	2b70      	cmp	r3, #112	; 0x70
 800b3e6:	d01a      	beq.n	800b41e <TIM_SlaveTimer_SetConfig+0xfa>
 800b3e8:	2b70      	cmp	r3, #112	; 0x70
 800b3ea:	d865      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3ec:	2b60      	cmp	r3, #96	; 0x60
 800b3ee:	d059      	beq.n	800b4a4 <TIM_SlaveTimer_SetConfig+0x180>
 800b3f0:	2b60      	cmp	r3, #96	; 0x60
 800b3f2:	d861      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3f4:	2b50      	cmp	r3, #80	; 0x50
 800b3f6:	d04b      	beq.n	800b490 <TIM_SlaveTimer_SetConfig+0x16c>
 800b3f8:	2b50      	cmp	r3, #80	; 0x50
 800b3fa:	d85d      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	d019      	beq.n	800b434 <TIM_SlaveTimer_SetConfig+0x110>
 800b400:	2b40      	cmp	r3, #64	; 0x40
 800b402:	d859      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b404:	2b30      	cmp	r3, #48	; 0x30
 800b406:	d05a      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b408:	2b30      	cmp	r3, #48	; 0x30
 800b40a:	d855      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d056      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b410:	2b20      	cmp	r3, #32
 800b412:	d851      	bhi.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d052      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b418:	2b10      	cmp	r3, #16
 800b41a:	d050      	beq.n	800b4be <TIM_SlaveTimer_SetConfig+0x19a>
 800b41c:	e04c      	b.n	800b4b8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	68d9      	ldr	r1, [r3, #12]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	f000 f8b8 	bl	800b5a2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b432:	e045      	b.n	800b4c0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b05      	cmp	r3, #5
 800b43a:	d004      	beq.n	800b446 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b440:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b444:	d101      	bne.n	800b44a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e03b      	b.n	800b4c2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6a1a      	ldr	r2, [r3, #32]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 0201 	bic.w	r2, r2, #1
 800b460:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b470:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	621a      	str	r2, [r3, #32]
      break;
 800b48e:	e017      	b.n	800b4c0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	6899      	ldr	r1, [r3, #8]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	461a      	mov	r2, r3
 800b49e:	f000 f821 	bl	800b4e4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b4a2:	e00d      	b.n	800b4c0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	6899      	ldr	r1, [r3, #8]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f000 f846 	bl	800b542 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b4b6:	e003      	b.n	800b4c0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b4bc:	e000      	b.n	800b4c0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800b4be:	bf00      	nop
  }

  return status;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	00100070 	.word	0x00100070
 800b4d0:	00100060 	.word	0x00100060
 800b4d4:	00100050 	.word	0x00100050
 800b4d8:	00100040 	.word	0x00100040
 800b4dc:	00100030 	.word	0x00100030
 800b4e0:	00100020 	.word	0x00100020

0800b4e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b087      	sub	sp, #28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	f023 0201 	bic.w	r2, r3, #1
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b50e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	4313      	orrs	r3, r2
 800b518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f023 030a 	bic.w	r3, r3, #10
 800b520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	4313      	orrs	r3, r2
 800b528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	621a      	str	r2, [r3, #32]
}
 800b536:	bf00      	nop
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b542:	b480      	push	{r7}
 800b544:	b087      	sub	sp, #28
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	f023 0210 	bic.w	r2, r3, #16
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b56c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	031b      	lsls	r3, r3, #12
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b57e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	4313      	orrs	r3, r2
 800b588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	621a      	str	r2, [r3, #32]
}
 800b596:	bf00      	nop
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b087      	sub	sp, #28
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
 800b5ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	021a      	lsls	r2, r3, #8
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	609a      	str	r2, [r3, #8]
}
 800b5d6:	bf00      	nop
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b087      	sub	sp, #28
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f003 031f 	and.w	r3, r3, #31
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6a1a      	ldr	r2, [r3, #32]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	43db      	mvns	r3, r3
 800b604:	401a      	ands	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a1a      	ldr	r2, [r3, #32]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f003 031f 	and.w	r3, r3, #31
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	fa01 f303 	lsl.w	r3, r1, r3
 800b61a:	431a      	orrs	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	621a      	str	r2, [r3, #32]
}
 800b620:	bf00      	nop
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d109      	bne.n	800b650 <HAL_TIMEx_PWMN_Start+0x24>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b01      	cmp	r3, #1
 800b646:	bf14      	ite	ne
 800b648:	2301      	movne	r3, #1
 800b64a:	2300      	moveq	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	e022      	b.n	800b696 <HAL_TIMEx_PWMN_Start+0x6a>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b04      	cmp	r3, #4
 800b654:	d109      	bne.n	800b66a <HAL_TIMEx_PWMN_Start+0x3e>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b01      	cmp	r3, #1
 800b660:	bf14      	ite	ne
 800b662:	2301      	movne	r3, #1
 800b664:	2300      	moveq	r3, #0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	e015      	b.n	800b696 <HAL_TIMEx_PWMN_Start+0x6a>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d109      	bne.n	800b684 <HAL_TIMEx_PWMN_Start+0x58>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b01      	cmp	r3, #1
 800b67a:	bf14      	ite	ne
 800b67c:	2301      	movne	r3, #1
 800b67e:	2300      	moveq	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	e008      	b.n	800b696 <HAL_TIMEx_PWMN_Start+0x6a>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	bf14      	ite	ne
 800b690:	2301      	movne	r3, #1
 800b692:	2300      	moveq	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e073      	b.n	800b786 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d104      	bne.n	800b6ae <HAL_TIMEx_PWMN_Start+0x82>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ac:	e013      	b.n	800b6d6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d104      	bne.n	800b6be <HAL_TIMEx_PWMN_Start+0x92>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6bc:	e00b      	b.n	800b6d6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d104      	bne.n	800b6ce <HAL_TIMEx_PWMN_Start+0xa2>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6cc:	e003      	b.n	800b6d6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2204      	movs	r2, #4
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 fb16 	bl	800bd10 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a25      	ldr	r2, [pc, #148]	; (800b790 <HAL_TIMEx_PWMN_Start+0x164>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d022      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b706:	d01d      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a21      	ldr	r2, [pc, #132]	; (800b794 <HAL_TIMEx_PWMN_Start+0x168>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d018      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a20      	ldr	r2, [pc, #128]	; (800b798 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d013      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a1e      	ldr	r2, [pc, #120]	; (800b79c <HAL_TIMEx_PWMN_Start+0x170>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d00e      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a1d      	ldr	r2, [pc, #116]	; (800b7a0 <HAL_TIMEx_PWMN_Start+0x174>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d009      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a1b      	ldr	r2, [pc, #108]	; (800b7a4 <HAL_TIMEx_PWMN_Start+0x178>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d004      	beq.n	800b744 <HAL_TIMEx_PWMN_Start+0x118>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a1a      	ldr	r2, [pc, #104]	; (800b7a8 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d115      	bne.n	800b770 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689a      	ldr	r2, [r3, #8]
 800b74a:	4b18      	ldr	r3, [pc, #96]	; (800b7ac <HAL_TIMEx_PWMN_Start+0x180>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b06      	cmp	r3, #6
 800b754:	d015      	beq.n	800b782 <HAL_TIMEx_PWMN_Start+0x156>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b75c:	d011      	beq.n	800b782 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f042 0201 	orr.w	r2, r2, #1
 800b76c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76e:	e008      	b.n	800b782 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0201 	orr.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	e000      	b.n	800b784 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	40012c00 	.word	0x40012c00
 800b794:	40000400 	.word	0x40000400
 800b798:	40000800 	.word	0x40000800
 800b79c:	40000c00 	.word	0x40000c00
 800b7a0:	40013400 	.word	0x40013400
 800b7a4:	40014000 	.word	0x40014000
 800b7a8:	40015000 	.word	0x40015000
 800b7ac:	00010007 	.word	0x00010007

0800b7b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e074      	b.n	800b8b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a34      	ldr	r2, [pc, #208]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d009      	beq.n	800b806 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a33      	ldr	r2, [pc, #204]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d004      	beq.n	800b806 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a31      	ldr	r2, [pc, #196]	; (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d108      	bne.n	800b818 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b80c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a21      	ldr	r2, [pc, #132]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d022      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b848:	d01d      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a1f      	ldr	r2, [pc, #124]	; (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d018      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a1d      	ldr	r2, [pc, #116]	; (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d013      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a1c      	ldr	r2, [pc, #112]	; (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00e      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d009      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d004      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a11      	ldr	r2, [pc, #68]	; (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d10c      	bne.n	800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b88c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	4313      	orrs	r3, r2
 800b896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	40012c00 	.word	0x40012c00
 800b8c4:	40013400 	.word	0x40013400
 800b8c8:	40015000 	.word	0x40015000
 800b8cc:	40000400 	.word	0x40000400
 800b8d0:	40000800 	.word	0x40000800
 800b8d4:	40000c00 	.word	0x40000c00
 800b8d8:	40014000 	.word	0x40014000

0800b8dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d101      	bne.n	800b8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	e096      	b.n	800ba26 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	4313      	orrs	r3, r2
 800b91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	041b      	lsls	r3, r3, #16
 800b96e:	4313      	orrs	r3, r2
 800b970:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a2f      	ldr	r2, [pc, #188]	; (800ba34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d009      	beq.n	800b990 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a2d      	ldr	r2, [pc, #180]	; (800ba38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a2c      	ldr	r2, [pc, #176]	; (800ba3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d106      	bne.n	800b99e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a24      	ldr	r2, [pc, #144]	; (800ba34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d009      	beq.n	800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a22      	ldr	r2, [pc, #136]	; (800ba38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d004      	beq.n	800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a21      	ldr	r2, [pc, #132]	; (800ba3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d12b      	bne.n	800ba14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	051b      	lsls	r3, r3, #20
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a11      	ldr	r2, [pc, #68]	; (800ba34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d009      	beq.n	800ba06 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a10      	ldr	r2, [pc, #64]	; (800ba38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d004      	beq.n	800ba06 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a0e      	ldr	r2, [pc, #56]	; (800ba3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d106      	bne.n	800ba14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	4313      	orrs	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	40012c00 	.word	0x40012c00
 800ba38:	40013400 	.word	0x40013400
 800ba3c:	40015000 	.word	0x40015000

0800ba40 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800ba40:	b480      	push	{r7}
 800ba42:	b08b      	sub	sp, #44	; 0x2c
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d101      	bne.n	800ba60 <HAL_TIMEx_ConfigBreakInput+0x20>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e10b      	b.n	800bc78 <HAL_TIMEx_ConfigBreakInput+0x238>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b80      	cmp	r3, #128	; 0x80
 800ba6e:	f000 8096 	beq.w	800bb9e <HAL_TIMEx_ConfigBreakInput+0x15e>
 800ba72:	2b80      	cmp	r3, #128	; 0x80
 800ba74:	f200 809c 	bhi.w	800bbb0 <HAL_TIMEx_ConfigBreakInput+0x170>
 800ba78:	2b20      	cmp	r3, #32
 800ba7a:	d849      	bhi.n	800bb10 <HAL_TIMEx_ConfigBreakInput+0xd0>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f000 8097 	beq.w	800bbb0 <HAL_TIMEx_ConfigBreakInput+0x170>
 800ba82:	3b01      	subs	r3, #1
 800ba84:	2b1f      	cmp	r3, #31
 800ba86:	f200 8093 	bhi.w	800bbb0 <HAL_TIMEx_ConfigBreakInput+0x170>
 800ba8a:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <HAL_TIMEx_ConfigBreakInput+0x50>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800bb17 	.word	0x0800bb17
 800ba94:	0800bb2b 	.word	0x0800bb2b
 800ba98:	0800bbb1 	.word	0x0800bbb1
 800ba9c:	0800bb3f 	.word	0x0800bb3f
 800baa0:	0800bbb1 	.word	0x0800bbb1
 800baa4:	0800bbb1 	.word	0x0800bbb1
 800baa8:	0800bbb1 	.word	0x0800bbb1
 800baac:	0800bb53 	.word	0x0800bb53
 800bab0:	0800bbb1 	.word	0x0800bbb1
 800bab4:	0800bbb1 	.word	0x0800bbb1
 800bab8:	0800bbb1 	.word	0x0800bbb1
 800babc:	0800bbb1 	.word	0x0800bbb1
 800bac0:	0800bbb1 	.word	0x0800bbb1
 800bac4:	0800bbb1 	.word	0x0800bbb1
 800bac8:	0800bbb1 	.word	0x0800bbb1
 800bacc:	0800bb67 	.word	0x0800bb67
 800bad0:	0800bbb1 	.word	0x0800bbb1
 800bad4:	0800bbb1 	.word	0x0800bbb1
 800bad8:	0800bbb1 	.word	0x0800bbb1
 800badc:	0800bbb1 	.word	0x0800bbb1
 800bae0:	0800bbb1 	.word	0x0800bbb1
 800bae4:	0800bbb1 	.word	0x0800bbb1
 800bae8:	0800bbb1 	.word	0x0800bbb1
 800baec:	0800bbb1 	.word	0x0800bbb1
 800baf0:	0800bbb1 	.word	0x0800bbb1
 800baf4:	0800bbb1 	.word	0x0800bbb1
 800baf8:	0800bbb1 	.word	0x0800bbb1
 800bafc:	0800bbb1 	.word	0x0800bbb1
 800bb00:	0800bbb1 	.word	0x0800bbb1
 800bb04:	0800bbb1 	.word	0x0800bbb1
 800bb08:	0800bbb1 	.word	0x0800bbb1
 800bb0c:	0800bb7b 	.word	0x0800bb7b
 800bb10:	2b40      	cmp	r3, #64	; 0x40
 800bb12:	d03b      	beq.n	800bb8c <HAL_TIMEx_ConfigBreakInput+0x14c>
 800bb14:	e04c      	b.n	800bbb0 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800bb16:	2301      	movs	r3, #1
 800bb18:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800bb1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb22:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800bb24:	2309      	movs	r3, #9
 800bb26:	617b      	str	r3, [r7, #20]
      break;
 800bb28:	e04b      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800bb32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb36:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800bb38:	230a      	movs	r3, #10
 800bb3a:	617b      	str	r3, [r7, #20]
      break;
 800bb3c:	e041      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800bb3e:	2304      	movs	r3, #4
 800bb40:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800bb42:	2302      	movs	r3, #2
 800bb44:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800bb46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb4a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800bb4c:	230b      	movs	r3, #11
 800bb4e:	617b      	str	r3, [r7, #20]
      break;
 800bb50:	e037      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800bb52:	2308      	movs	r3, #8
 800bb54:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800bb56:	2303      	movs	r3, #3
 800bb58:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800bb5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb5e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800bb60:	230c      	movs	r3, #12
 800bb62:	617b      	str	r3, [r7, #20]
      break;
 800bb64:	e02d      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800bb66:	2310      	movs	r3, #16
 800bb68:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800bb6a:	2304      	movs	r3, #4
 800bb6c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800bb6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb72:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800bb74:	230d      	movs	r3, #13
 800bb76:	617b      	str	r3, [r7, #20]
      break;
 800bb78:	e023      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800bb7a:	2320      	movs	r3, #32
 800bb7c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800bb7e:	2305      	movs	r3, #5
 800bb80:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	617b      	str	r3, [r7, #20]
      break;
 800bb8a:	e01a      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 800bb8c:	2340      	movs	r3, #64	; 0x40
 800bb8e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800bb90:	2306      	movs	r3, #6
 800bb92:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	617b      	str	r3, [r7, #20]
      break;
 800bb9c:	e011      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800bb9e:	2380      	movs	r3, #128	; 0x80
 800bba0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800bba2:	2307      	movs	r3, #7
 800bba4:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]
      break;
 800bbae:	e008      	b.n	800bbc2 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]
      break;
 800bbc0:	bf00      	nop
    }
  }

  switch (BreakInput)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d003      	beq.n	800bbd0 <HAL_TIMEx_ConfigBreakInput+0x190>
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d025      	beq.n	800bc1a <HAL_TIMEx_ConfigBreakInput+0x1da>
 800bbce:	e049      	b.n	800bc64 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbd6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	43db      	mvns	r3, r3
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	4013      	ands	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	409a      	lsls	r2, r3
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	4013      	ands	r3, r2
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	43db      	mvns	r3, r3
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	409a      	lsls	r2, r3
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	4013      	ands	r3, r2
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800bc18:	e028      	b.n	800bc6c <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc20:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	43db      	mvns	r3, r3
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	4013      	ands	r3, r2
 800bc2a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	409a      	lsls	r2, r3
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	4013      	ands	r3, r2
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	43db      	mvns	r3, r3
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	4013      	ands	r3, r2
 800bc46:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689a      	ldr	r2, [r3, #8]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	409a      	lsls	r2, r3
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	4013      	ands	r3, r2
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800bc62:	e003      	b.n	800bc6c <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800bc6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	372c      	adds	r7, #44	; 0x2c
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f003 031f 	and.w	r3, r3, #31
 800bd22:	2204      	movs	r2, #4
 800bd24:	fa02 f303 	lsl.w	r3, r2, r3
 800bd28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6a1a      	ldr	r2, [r3, #32]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	43db      	mvns	r3, r3
 800bd32:	401a      	ands	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6a1a      	ldr	r2, [r3, #32]
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f003 031f 	and.w	r3, r3, #31
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	fa01 f303 	lsl.w	r3, r1, r3
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	621a      	str	r2, [r3, #32]
}
 800bd4e:	bf00      	nop
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e042      	b.n	800bdf2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7f8 fcb4 	bl	80046ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2224      	movs	r2, #36	; 0x24
 800bd88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f022 0201 	bic.w	r2, r2, #1
 800bd9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fbf7 	bl	800c590 <UART_SetConfig>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d101      	bne.n	800bdac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e022      	b.n	800bdf2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fee7 	bl	800cb88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f042 0201 	orr.w	r2, r2, #1
 800bde8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 ff6e 	bl	800cccc <UART_CheckIdleState>
 800bdf0:	4603      	mov	r3, r0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
	...

0800bdfc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	; 0x28
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be10:	2b20      	cmp	r3, #32
 800be12:	d17a      	bne.n	800bf0a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <HAL_UART_Transmit_DMA+0x24>
 800be1a:	88fb      	ldrh	r3, [r7, #6]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e073      	b.n	800bf0c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d101      	bne.n	800be32 <HAL_UART_Transmit_DMA+0x36>
 800be2e:	2302      	movs	r3, #2
 800be30:	e06c      	b.n	800bf0c <HAL_UART_Transmit_DMA+0x110>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	88fa      	ldrh	r2, [r7, #6]
 800be44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	88fa      	ldrh	r2, [r7, #6]
 800be4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2221      	movs	r2, #33	; 0x21
 800be5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be64:	2b00      	cmp	r3, #0
 800be66:	d02c      	beq.n	800bec2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be6c:	4a29      	ldr	r2, [pc, #164]	; (800bf14 <HAL_UART_Transmit_DMA+0x118>)
 800be6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be74:	4a28      	ldr	r2, [pc, #160]	; (800bf18 <HAL_UART_Transmit_DMA+0x11c>)
 800be76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be7c:	4a27      	ldr	r2, [pc, #156]	; (800bf1c <HAL_UART_Transmit_DMA+0x120>)
 800be7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be84:	2200      	movs	r2, #0
 800be86:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be90:	4619      	mov	r1, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3328      	adds	r3, #40	; 0x28
 800be98:	461a      	mov	r2, r3
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	f7fa fddc 	bl	8006a58 <HAL_DMA_Start_IT>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00d      	beq.n	800bec2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2210      	movs	r2, #16
 800beaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2220      	movs	r2, #32
 800beba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e024      	b.n	800bf0c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2240      	movs	r2, #64	; 0x40
 800bec8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3308      	adds	r3, #8
 800bed8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	613b      	str	r3, [r7, #16]
   return(result);
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee8:	627b      	str	r3, [r7, #36]	; 0x24
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3308      	adds	r3, #8
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	623a      	str	r2, [r7, #32]
 800bef4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	69f9      	ldr	r1, [r7, #28]
 800bef8:	6a3a      	ldr	r2, [r7, #32]
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e5      	bne.n	800bed2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e000      	b.n	800bf0c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bf0a:	2302      	movs	r3, #2
  }
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3728      	adds	r7, #40	; 0x28
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	0800d041 	.word	0x0800d041
 800bf18:	0800d0db 	.word	0x0800d0db
 800bf1c:	0800d0f7 	.word	0x0800d0f7

0800bf20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b0ba      	sub	sp, #232	; 0xe8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf4a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf4e:	4013      	ands	r3, r2
 800bf50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11b      	bne.n	800bf94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf60:	f003 0320 	and.w	r3, r3, #32
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d015      	beq.n	800bf94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf6c:	f003 0320 	and.w	r3, r3, #32
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d105      	bne.n	800bf80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d009      	beq.n	800bf94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 82d6 	beq.w	800c536 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	4798      	blx	r3
      }
      return;
 800bf92:	e2d0      	b.n	800c536 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 811f 	beq.w	800c1dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bfa2:	4b8b      	ldr	r3, [pc, #556]	; (800c1d0 <HAL_UART_IRQHandler+0x2b0>)
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d106      	bne.n	800bfb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bfaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bfae:	4b89      	ldr	r3, [pc, #548]	; (800c1d4 <HAL_UART_IRQHandler+0x2b4>)
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 8112 	beq.w	800c1dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d011      	beq.n	800bfe8 <HAL_UART_IRQHandler+0xc8>
 800bfc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfde:	f043 0201 	orr.w	r2, r3, #1
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d011      	beq.n	800c018 <HAL_UART_IRQHandler+0xf8>
 800bff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2202      	movs	r2, #2
 800c006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00e:	f043 0204 	orr.w	r2, r3, #4
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01c:	f003 0304 	and.w	r3, r3, #4
 800c020:	2b00      	cmp	r3, #0
 800c022:	d011      	beq.n	800c048 <HAL_UART_IRQHandler+0x128>
 800c024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00b      	beq.n	800c048 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2204      	movs	r2, #4
 800c036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c03e:	f043 0202 	orr.w	r2, r3, #2
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04c:	f003 0308 	and.w	r3, r3, #8
 800c050:	2b00      	cmp	r3, #0
 800c052:	d017      	beq.n	800c084 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d105      	bne.n	800c06c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c060:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c064:	4b5a      	ldr	r3, [pc, #360]	; (800c1d0 <HAL_UART_IRQHandler+0x2b0>)
 800c066:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00b      	beq.n	800c084 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2208      	movs	r2, #8
 800c072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07a:	f043 0208 	orr.w	r2, r3, #8
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d012      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x196>
 800c090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00c      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ac:	f043 0220 	orr.w	r2, r3, #32
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 823c 	beq.w	800c53a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c6:	f003 0320 	and.w	r3, r3, #32
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d013      	beq.n	800c0f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d2:	f003 0320 	and.w	r3, r3, #32
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d007      	beq.n	800c0f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10a:	2b40      	cmp	r3, #64	; 0x40
 800c10c:	d005      	beq.n	800c11a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c10e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c112:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c116:	2b00      	cmp	r3, #0
 800c118:	d04f      	beq.n	800c1ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 ff2a 	bl	800cf74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c12a:	2b40      	cmp	r3, #64	; 0x40
 800c12c:	d141      	bne.n	800c1b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c13c:	e853 3f00 	ldrex	r3, [r3]
 800c140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3308      	adds	r3, #8
 800c156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c15a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c15e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1d9      	bne.n	800c12e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d013      	beq.n	800c1aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c186:	4a14      	ldr	r2, [pc, #80]	; (800c1d8 <HAL_UART_IRQHandler+0x2b8>)
 800c188:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fa fd36 	bl	8006c00 <HAL_DMA_Abort_IT>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d017      	beq.n	800c1ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1a8:	e00f      	b.n	800c1ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f9da 	bl	800c564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b0:	e00b      	b.n	800c1ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f9d6 	bl	800c564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b8:	e007      	b.n	800c1ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f9d2 	bl	800c564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c1c8:	e1b7      	b.n	800c53a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ca:	bf00      	nop
    return;
 800c1cc:	e1b5      	b.n	800c53a <HAL_UART_IRQHandler+0x61a>
 800c1ce:	bf00      	nop
 800c1d0:	10000001 	.word	0x10000001
 800c1d4:	04000120 	.word	0x04000120
 800c1d8:	0800d177 	.word	0x0800d177

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	f040 814a 	bne.w	800c47a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ea:	f003 0310 	and.w	r3, r3, #16
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 8143 	beq.w	800c47a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1f8:	f003 0310 	and.w	r3, r3, #16
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 813c 	beq.w	800c47a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2210      	movs	r2, #16
 800c208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c214:	2b40      	cmp	r3, #64	; 0x40
 800c216:	f040 80b5 	bne.w	800c384 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c226:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 8187 	beq.w	800c53e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c23a:	429a      	cmp	r2, r3
 800c23c:	f080 817f 	bcs.w	800c53e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c246:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0320 	and.w	r3, r3, #32
 800c256:	2b00      	cmp	r3, #0
 800c258:	f040 8086 	bne.w	800c368 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c268:	e853 3f00 	ldrex	r3, [r3]
 800c26c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c28a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c29e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1da      	bne.n	800c25c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c2b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2b8:	f023 0301 	bic.w	r3, r3, #1
 800c2bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c2ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c2ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e1      	bne.n	800c2a6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3308      	adds	r3, #8
 800c302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c306:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c308:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c30c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c30e:	e841 2300 	strex	r3, r2, [r1]
 800c312:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e3      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c338:	f023 0310 	bic.w	r3, r3, #16
 800c33c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	461a      	mov	r2, r3
 800c346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c34a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c34c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e4      	bne.n	800c328 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c362:	4618      	mov	r0, r3
 800c364:	f7fa fbf3 	bl	8006b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c374:	b29b      	uxth	r3, r3
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	b29b      	uxth	r3, r3
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f8fb 	bl	800c578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c382:	e0dc      	b.n	800c53e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c390:	b29b      	uxth	r3, r3
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 80ce 	beq.w	800c542 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c3a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80c9 	beq.w	800c542 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	e853 3f00 	ldrex	r3, [r3]
 800c3bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c3d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e4      	bne.n	800c3b0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	e853 3f00 	ldrex	r3, [r3]
 800c3f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c3f6:	6a3b      	ldr	r3, [r7, #32]
 800c3f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3fc:	f023 0301 	bic.w	r3, r3, #1
 800c400:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3308      	adds	r3, #8
 800c40a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c40e:	633a      	str	r2, [r7, #48]	; 0x30
 800c410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c416:	e841 2300 	strex	r3, r2, [r1]
 800c41a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1e1      	bne.n	800c3e6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2220      	movs	r2, #32
 800c426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	e853 3f00 	ldrex	r3, [r3]
 800c442:	60fb      	str	r3, [r7, #12]
   return(result);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0310 	bic.w	r3, r3, #16
 800c44a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	461a      	mov	r2, r3
 800c454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c458:	61fb      	str	r3, [r7, #28]
 800c45a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45c:	69b9      	ldr	r1, [r7, #24]
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	e841 2300 	strex	r3, r2, [r1]
 800c464:	617b      	str	r3, [r7, #20]
   return(result);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1e4      	bne.n	800c436 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c46c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f880 	bl	800c578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c478:	e063      	b.n	800c542 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c47e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00e      	beq.n	800c4a4 <HAL_UART_IRQHandler+0x584>
 800c486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c48a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d008      	beq.n	800c4a4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c49a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 ff14 	bl	800d2ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4a2:	e051      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d014      	beq.n	800c4da <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d105      	bne.n	800c4c8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c4bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d008      	beq.n	800c4da <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d03a      	beq.n	800c546 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	4798      	blx	r3
    }
    return;
 800c4d8:	e035      	b.n	800c546 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d009      	beq.n	800c4fa <HAL_UART_IRQHandler+0x5da>
 800c4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fe55 	bl	800d1a2 <UART_EndTransmit_IT>
    return;
 800c4f8:	e026      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d009      	beq.n	800c51a <HAL_UART_IRQHandler+0x5fa>
 800c506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c50a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 feed 	bl	800d2f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c518:	e016      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c51e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d010      	beq.n	800c548 <HAL_UART_IRQHandler+0x628>
 800c526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da0c      	bge.n	800c548 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fed5 	bl	800d2de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c534:	e008      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
      return;
 800c536:	bf00      	nop
 800c538:	e006      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
    return;
 800c53a:	bf00      	nop
 800c53c:	e004      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
      return;
 800c53e:	bf00      	nop
 800c540:	e002      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
      return;
 800c542:	bf00      	nop
 800c544:	e000      	b.n	800c548 <HAL_UART_IRQHandler+0x628>
    return;
 800c546:	bf00      	nop
  }
}
 800c548:	37e8      	adds	r7, #232	; 0xe8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop

0800c550 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c56c:	bf00      	nop
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c584:	bf00      	nop
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c594:	b08c      	sub	sp, #48	; 0x30
 800c596:	af00      	add	r7, sp, #0
 800c598:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	431a      	orrs	r2, r3
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4baa      	ldr	r3, [pc, #680]	; (800c868 <UART_SetConfig+0x2d8>)
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	6812      	ldr	r2, [r2, #0]
 800c5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	430a      	orrs	r2, r1
 800c5e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a9f      	ldr	r2, [pc, #636]	; (800c86c <UART_SetConfig+0x2dc>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d004      	beq.n	800c5fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c606:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	6812      	ldr	r2, [r2, #0]
 800c60e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c610:	430b      	orrs	r3, r1
 800c612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61a:	f023 010f 	bic.w	r1, r3, #15
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	430a      	orrs	r2, r1
 800c628:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a90      	ldr	r2, [pc, #576]	; (800c870 <UART_SetConfig+0x2e0>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d125      	bne.n	800c680 <UART_SetConfig+0xf0>
 800c634:	4b8f      	ldr	r3, [pc, #572]	; (800c874 <UART_SetConfig+0x2e4>)
 800c636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63a:	f003 0303 	and.w	r3, r3, #3
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d81a      	bhi.n	800c678 <UART_SetConfig+0xe8>
 800c642:	a201      	add	r2, pc, #4	; (adr r2, 800c648 <UART_SetConfig+0xb8>)
 800c644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c648:	0800c659 	.word	0x0800c659
 800c64c:	0800c669 	.word	0x0800c669
 800c650:	0800c661 	.word	0x0800c661
 800c654:	0800c671 	.word	0x0800c671
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c65e:	e116      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c660:	2302      	movs	r3, #2
 800c662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c666:	e112      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c668:	2304      	movs	r3, #4
 800c66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c66e:	e10e      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c670:	2308      	movs	r3, #8
 800c672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c676:	e10a      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c678:	2310      	movs	r3, #16
 800c67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c67e:	e106      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a7c      	ldr	r2, [pc, #496]	; (800c878 <UART_SetConfig+0x2e8>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d138      	bne.n	800c6fc <UART_SetConfig+0x16c>
 800c68a:	4b7a      	ldr	r3, [pc, #488]	; (800c874 <UART_SetConfig+0x2e4>)
 800c68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c690:	f003 030c 	and.w	r3, r3, #12
 800c694:	2b0c      	cmp	r3, #12
 800c696:	d82d      	bhi.n	800c6f4 <UART_SetConfig+0x164>
 800c698:	a201      	add	r2, pc, #4	; (adr r2, 800c6a0 <UART_SetConfig+0x110>)
 800c69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69e:	bf00      	nop
 800c6a0:	0800c6d5 	.word	0x0800c6d5
 800c6a4:	0800c6f5 	.word	0x0800c6f5
 800c6a8:	0800c6f5 	.word	0x0800c6f5
 800c6ac:	0800c6f5 	.word	0x0800c6f5
 800c6b0:	0800c6e5 	.word	0x0800c6e5
 800c6b4:	0800c6f5 	.word	0x0800c6f5
 800c6b8:	0800c6f5 	.word	0x0800c6f5
 800c6bc:	0800c6f5 	.word	0x0800c6f5
 800c6c0:	0800c6dd 	.word	0x0800c6dd
 800c6c4:	0800c6f5 	.word	0x0800c6f5
 800c6c8:	0800c6f5 	.word	0x0800c6f5
 800c6cc:	0800c6f5 	.word	0x0800c6f5
 800c6d0:	0800c6ed 	.word	0x0800c6ed
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6da:	e0d8      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c6dc:	2302      	movs	r3, #2
 800c6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6e2:	e0d4      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6ea:	e0d0      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c6ec:	2308      	movs	r3, #8
 800c6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6f2:	e0cc      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c6f4:	2310      	movs	r3, #16
 800c6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6fa:	e0c8      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a5e      	ldr	r2, [pc, #376]	; (800c87c <UART_SetConfig+0x2ec>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d125      	bne.n	800c752 <UART_SetConfig+0x1c2>
 800c706:	4b5b      	ldr	r3, [pc, #364]	; (800c874 <UART_SetConfig+0x2e4>)
 800c708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c70c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c710:	2b30      	cmp	r3, #48	; 0x30
 800c712:	d016      	beq.n	800c742 <UART_SetConfig+0x1b2>
 800c714:	2b30      	cmp	r3, #48	; 0x30
 800c716:	d818      	bhi.n	800c74a <UART_SetConfig+0x1ba>
 800c718:	2b20      	cmp	r3, #32
 800c71a:	d00a      	beq.n	800c732 <UART_SetConfig+0x1a2>
 800c71c:	2b20      	cmp	r3, #32
 800c71e:	d814      	bhi.n	800c74a <UART_SetConfig+0x1ba>
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <UART_SetConfig+0x19a>
 800c724:	2b10      	cmp	r3, #16
 800c726:	d008      	beq.n	800c73a <UART_SetConfig+0x1aa>
 800c728:	e00f      	b.n	800c74a <UART_SetConfig+0x1ba>
 800c72a:	2300      	movs	r3, #0
 800c72c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c730:	e0ad      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c732:	2302      	movs	r3, #2
 800c734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c738:	e0a9      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c73a:	2304      	movs	r3, #4
 800c73c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c740:	e0a5      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c742:	2308      	movs	r3, #8
 800c744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c748:	e0a1      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c74a:	2310      	movs	r3, #16
 800c74c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c750:	e09d      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a4a      	ldr	r2, [pc, #296]	; (800c880 <UART_SetConfig+0x2f0>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d125      	bne.n	800c7a8 <UART_SetConfig+0x218>
 800c75c:	4b45      	ldr	r3, [pc, #276]	; (800c874 <UART_SetConfig+0x2e4>)
 800c75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c762:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c766:	2bc0      	cmp	r3, #192	; 0xc0
 800c768:	d016      	beq.n	800c798 <UART_SetConfig+0x208>
 800c76a:	2bc0      	cmp	r3, #192	; 0xc0
 800c76c:	d818      	bhi.n	800c7a0 <UART_SetConfig+0x210>
 800c76e:	2b80      	cmp	r3, #128	; 0x80
 800c770:	d00a      	beq.n	800c788 <UART_SetConfig+0x1f8>
 800c772:	2b80      	cmp	r3, #128	; 0x80
 800c774:	d814      	bhi.n	800c7a0 <UART_SetConfig+0x210>
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <UART_SetConfig+0x1f0>
 800c77a:	2b40      	cmp	r3, #64	; 0x40
 800c77c:	d008      	beq.n	800c790 <UART_SetConfig+0x200>
 800c77e:	e00f      	b.n	800c7a0 <UART_SetConfig+0x210>
 800c780:	2300      	movs	r3, #0
 800c782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c786:	e082      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c788:	2302      	movs	r3, #2
 800c78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c78e:	e07e      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c790:	2304      	movs	r3, #4
 800c792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c796:	e07a      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c798:	2308      	movs	r3, #8
 800c79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c79e:	e076      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7a6:	e072      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a35      	ldr	r2, [pc, #212]	; (800c884 <UART_SetConfig+0x2f4>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d12a      	bne.n	800c808 <UART_SetConfig+0x278>
 800c7b2:	4b30      	ldr	r3, [pc, #192]	; (800c874 <UART_SetConfig+0x2e4>)
 800c7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7c0:	d01a      	beq.n	800c7f8 <UART_SetConfig+0x268>
 800c7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7c6:	d81b      	bhi.n	800c800 <UART_SetConfig+0x270>
 800c7c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7cc:	d00c      	beq.n	800c7e8 <UART_SetConfig+0x258>
 800c7ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d2:	d815      	bhi.n	800c800 <UART_SetConfig+0x270>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <UART_SetConfig+0x250>
 800c7d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7dc:	d008      	beq.n	800c7f0 <UART_SetConfig+0x260>
 800c7de:	e00f      	b.n	800c800 <UART_SetConfig+0x270>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7e6:	e052      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ee:	e04e      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c7f0:	2304      	movs	r3, #4
 800c7f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7f6:	e04a      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c7f8:	2308      	movs	r3, #8
 800c7fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7fe:	e046      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c800:	2310      	movs	r3, #16
 800c802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c806:	e042      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a17      	ldr	r2, [pc, #92]	; (800c86c <UART_SetConfig+0x2dc>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d13a      	bne.n	800c888 <UART_SetConfig+0x2f8>
 800c812:	4b18      	ldr	r3, [pc, #96]	; (800c874 <UART_SetConfig+0x2e4>)
 800c814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c818:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c81c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c820:	d01a      	beq.n	800c858 <UART_SetConfig+0x2c8>
 800c822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c826:	d81b      	bhi.n	800c860 <UART_SetConfig+0x2d0>
 800c828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c82c:	d00c      	beq.n	800c848 <UART_SetConfig+0x2b8>
 800c82e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c832:	d815      	bhi.n	800c860 <UART_SetConfig+0x2d0>
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <UART_SetConfig+0x2b0>
 800c838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c83c:	d008      	beq.n	800c850 <UART_SetConfig+0x2c0>
 800c83e:	e00f      	b.n	800c860 <UART_SetConfig+0x2d0>
 800c840:	2300      	movs	r3, #0
 800c842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c846:	e022      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c848:	2302      	movs	r3, #2
 800c84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c84e:	e01e      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c850:	2304      	movs	r3, #4
 800c852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c856:	e01a      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c858:	2308      	movs	r3, #8
 800c85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c85e:	e016      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c860:	2310      	movs	r3, #16
 800c862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c866:	e012      	b.n	800c88e <UART_SetConfig+0x2fe>
 800c868:	cfff69f3 	.word	0xcfff69f3
 800c86c:	40008000 	.word	0x40008000
 800c870:	40013800 	.word	0x40013800
 800c874:	40021000 	.word	0x40021000
 800c878:	40004400 	.word	0x40004400
 800c87c:	40004800 	.word	0x40004800
 800c880:	40004c00 	.word	0x40004c00
 800c884:	40005000 	.word	0x40005000
 800c888:	2310      	movs	r3, #16
 800c88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4aae      	ldr	r2, [pc, #696]	; (800cb4c <UART_SetConfig+0x5bc>)
 800c894:	4293      	cmp	r3, r2
 800c896:	f040 8097 	bne.w	800c9c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c89a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c89e:	2b08      	cmp	r3, #8
 800c8a0:	d823      	bhi.n	800c8ea <UART_SetConfig+0x35a>
 800c8a2:	a201      	add	r2, pc, #4	; (adr r2, 800c8a8 <UART_SetConfig+0x318>)
 800c8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a8:	0800c8cd 	.word	0x0800c8cd
 800c8ac:	0800c8eb 	.word	0x0800c8eb
 800c8b0:	0800c8d5 	.word	0x0800c8d5
 800c8b4:	0800c8eb 	.word	0x0800c8eb
 800c8b8:	0800c8db 	.word	0x0800c8db
 800c8bc:	0800c8eb 	.word	0x0800c8eb
 800c8c0:	0800c8eb 	.word	0x0800c8eb
 800c8c4:	0800c8eb 	.word	0x0800c8eb
 800c8c8:	0800c8e3 	.word	0x0800c8e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8cc:	f7fd f890 	bl	80099f0 <HAL_RCC_GetPCLK1Freq>
 800c8d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8d2:	e010      	b.n	800c8f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8d4:	4b9e      	ldr	r3, [pc, #632]	; (800cb50 <UART_SetConfig+0x5c0>)
 800c8d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8d8:	e00d      	b.n	800c8f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8da:	f7fd f81b 	bl	8009914 <HAL_RCC_GetSysClockFreq>
 800c8de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8e0:	e009      	b.n	800c8f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8e8:	e005      	b.n	800c8f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c8f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 8130 	beq.w	800cb5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c902:	4a94      	ldr	r2, [pc, #592]	; (800cb54 <UART_SetConfig+0x5c4>)
 800c904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c908:	461a      	mov	r2, r3
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c910:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	4413      	add	r3, r2
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d305      	bcc.n	800c92e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d903      	bls.n	800c936 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c934:	e113      	b.n	800cb5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	2200      	movs	r2, #0
 800c93a:	60bb      	str	r3, [r7, #8]
 800c93c:	60fa      	str	r2, [r7, #12]
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c942:	4a84      	ldr	r2, [pc, #528]	; (800cb54 <UART_SetConfig+0x5c4>)
 800c944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	2200      	movs	r2, #0
 800c94c:	603b      	str	r3, [r7, #0]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c954:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c958:	f7f4 fa0e 	bl	8000d78 <__aeabi_uldivmod>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4610      	mov	r0, r2
 800c962:	4619      	mov	r1, r3
 800c964:	f04f 0200 	mov.w	r2, #0
 800c968:	f04f 0300 	mov.w	r3, #0
 800c96c:	020b      	lsls	r3, r1, #8
 800c96e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c972:	0202      	lsls	r2, r0, #8
 800c974:	6979      	ldr	r1, [r7, #20]
 800c976:	6849      	ldr	r1, [r1, #4]
 800c978:	0849      	lsrs	r1, r1, #1
 800c97a:	2000      	movs	r0, #0
 800c97c:	460c      	mov	r4, r1
 800c97e:	4605      	mov	r5, r0
 800c980:	eb12 0804 	adds.w	r8, r2, r4
 800c984:	eb43 0905 	adc.w	r9, r3, r5
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	469a      	mov	sl, r3
 800c990:	4693      	mov	fp, r2
 800c992:	4652      	mov	r2, sl
 800c994:	465b      	mov	r3, fp
 800c996:	4640      	mov	r0, r8
 800c998:	4649      	mov	r1, r9
 800c99a:	f7f4 f9ed 	bl	8000d78 <__aeabi_uldivmod>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9a6:	6a3b      	ldr	r3, [r7, #32]
 800c9a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9ac:	d308      	bcc.n	800c9c0 <UART_SetConfig+0x430>
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9b4:	d204      	bcs.n	800c9c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6a3a      	ldr	r2, [r7, #32]
 800c9bc:	60da      	str	r2, [r3, #12]
 800c9be:	e0ce      	b.n	800cb5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c9c6:	e0ca      	b.n	800cb5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	69db      	ldr	r3, [r3, #28]
 800c9cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9d0:	d166      	bne.n	800caa0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c9d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c9d6:	2b08      	cmp	r3, #8
 800c9d8:	d827      	bhi.n	800ca2a <UART_SetConfig+0x49a>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0x450>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800ca05 	.word	0x0800ca05
 800c9e4:	0800ca0d 	.word	0x0800ca0d
 800c9e8:	0800ca15 	.word	0x0800ca15
 800c9ec:	0800ca2b 	.word	0x0800ca2b
 800c9f0:	0800ca1b 	.word	0x0800ca1b
 800c9f4:	0800ca2b 	.word	0x0800ca2b
 800c9f8:	0800ca2b 	.word	0x0800ca2b
 800c9fc:	0800ca2b 	.word	0x0800ca2b
 800ca00:	0800ca23 	.word	0x0800ca23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca04:	f7fc fff4 	bl	80099f0 <HAL_RCC_GetPCLK1Freq>
 800ca08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca0a:	e014      	b.n	800ca36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca0c:	f7fd f806 	bl	8009a1c <HAL_RCC_GetPCLK2Freq>
 800ca10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca12:	e010      	b.n	800ca36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca14:	4b4e      	ldr	r3, [pc, #312]	; (800cb50 <UART_SetConfig+0x5c0>)
 800ca16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca18:	e00d      	b.n	800ca36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca1a:	f7fc ff7b 	bl	8009914 <HAL_RCC_GetSysClockFreq>
 800ca1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca20:	e009      	b.n	800ca36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca28:	e005      	b.n	800ca36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ca34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 8090 	beq.w	800cb5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca42:	4a44      	ldr	r2, [pc, #272]	; (800cb54 <UART_SetConfig+0x5c4>)
 800ca44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca50:	005a      	lsls	r2, r3, #1
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	085b      	lsrs	r3, r3, #1
 800ca58:	441a      	add	r2, r3
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	2b0f      	cmp	r3, #15
 800ca68:	d916      	bls.n	800ca98 <UART_SetConfig+0x508>
 800ca6a:	6a3b      	ldr	r3, [r7, #32]
 800ca6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca70:	d212      	bcs.n	800ca98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	f023 030f 	bic.w	r3, r3, #15
 800ca7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	085b      	lsrs	r3, r3, #1
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	f003 0307 	and.w	r3, r3, #7
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	8bfb      	ldrh	r3, [r7, #30]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	8bfa      	ldrh	r2, [r7, #30]
 800ca94:	60da      	str	r2, [r3, #12]
 800ca96:	e062      	b.n	800cb5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ca9e:	e05e      	b.n	800cb5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800caa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	d828      	bhi.n	800cafa <UART_SetConfig+0x56a>
 800caa8:	a201      	add	r2, pc, #4	; (adr r2, 800cab0 <UART_SetConfig+0x520>)
 800caaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caae:	bf00      	nop
 800cab0:	0800cad5 	.word	0x0800cad5
 800cab4:	0800cadd 	.word	0x0800cadd
 800cab8:	0800cae5 	.word	0x0800cae5
 800cabc:	0800cafb 	.word	0x0800cafb
 800cac0:	0800caeb 	.word	0x0800caeb
 800cac4:	0800cafb 	.word	0x0800cafb
 800cac8:	0800cafb 	.word	0x0800cafb
 800cacc:	0800cafb 	.word	0x0800cafb
 800cad0:	0800caf3 	.word	0x0800caf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cad4:	f7fc ff8c 	bl	80099f0 <HAL_RCC_GetPCLK1Freq>
 800cad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cada:	e014      	b.n	800cb06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cadc:	f7fc ff9e 	bl	8009a1c <HAL_RCC_GetPCLK2Freq>
 800cae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cae2:	e010      	b.n	800cb06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cae4:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <UART_SetConfig+0x5c0>)
 800cae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cae8:	e00d      	b.n	800cb06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caea:	f7fc ff13 	bl	8009914 <HAL_RCC_GetSysClockFreq>
 800caee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800caf0:	e009      	b.n	800cb06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800caf8:	e005      	b.n	800cb06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cafa:	2300      	movs	r3, #0
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cb04:	bf00      	nop
    }

    if (pclk != 0U)
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d028      	beq.n	800cb5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	4a10      	ldr	r2, [pc, #64]	; (800cb54 <UART_SetConfig+0x5c4>)
 800cb12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb16:	461a      	mov	r2, r3
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	085b      	lsrs	r3, r3, #1
 800cb24:	441a      	add	r2, r3
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	2b0f      	cmp	r3, #15
 800cb34:	d910      	bls.n	800cb58 <UART_SetConfig+0x5c8>
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb3c:	d20c      	bcs.n	800cb58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60da      	str	r2, [r3, #12]
 800cb48:	e009      	b.n	800cb5e <UART_SetConfig+0x5ce>
 800cb4a:	bf00      	nop
 800cb4c:	40008000 	.word	0x40008000
 800cb50:	00f42400 	.word	0x00f42400
 800cb54:	08015144 	.word	0x08015144
      }
      else
      {
        ret = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2201      	movs	r2, #1
 800cb62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	2200      	movs	r2, #0
 800cb72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2200      	movs	r2, #0
 800cb78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cb7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3730      	adds	r7, #48	; 0x30
 800cb82:	46bd      	mov	sp, r7
 800cb84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00a      	beq.n	800cbb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00a      	beq.n	800cbf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfa:	f003 0308 	and.w	r3, r3, #8
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	430a      	orrs	r2, r1
 800cc16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1c:	f003 0310 	and.w	r3, r3, #16
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	430a      	orrs	r2, r1
 800cc38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3e:	f003 0320 	and.w	r3, r3, #32
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00a      	beq.n	800cc5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	430a      	orrs	r2, r1
 800cc5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d01a      	beq.n	800cc9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	430a      	orrs	r2, r1
 800cc7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc86:	d10a      	bne.n	800cc9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	605a      	str	r2, [r3, #4]
  }
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af02      	add	r7, sp, #8
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ccdc:	f7f7 feba 	bl	8004a54 <HAL_GetTick>
 800cce0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0308 	and.w	r3, r3, #8
 800ccec:	2b08      	cmp	r3, #8
 800ccee:	d10e      	bne.n	800cd0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f82f 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e025      	b.n	800cd5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	d10e      	bne.n	800cd3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f819 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d001      	beq.n	800cd3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e00f      	b.n	800cd5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2220      	movs	r2, #32
 800cd46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b09c      	sub	sp, #112	; 0x70
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	603b      	str	r3, [r7, #0]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd72:	e0a9      	b.n	800cec8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7a:	f000 80a5 	beq.w	800cec8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd7e:	f7f7 fe69 	bl	8004a54 <HAL_GetTick>
 800cd82:	4602      	mov	r2, r0
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d302      	bcc.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x32>
 800cd8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d140      	bne.n	800ce16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd9c:	e853 3f00 	ldrex	r3, [r3]
 800cda0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cda2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cda8:	667b      	str	r3, [r7, #100]	; 0x64
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdba:	e841 2300 	strex	r3, r2, [r1]
 800cdbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cdc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1e6      	bne.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3308      	adds	r3, #8
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd0:	e853 3f00 	ldrex	r3, [r3]
 800cdd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	f023 0301 	bic.w	r3, r3, #1
 800cddc:	663b      	str	r3, [r7, #96]	; 0x60
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3308      	adds	r3, #8
 800cde4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cde6:	64ba      	str	r2, [r7, #72]	; 0x48
 800cde8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdee:	e841 2300 	strex	r3, r2, [r1]
 800cdf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1e5      	bne.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2220      	movs	r2, #32
 800ce06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ce12:	2303      	movs	r3, #3
 800ce14:	e069      	b.n	800ceea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d051      	beq.n	800cec8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce32:	d149      	bne.n	800cec8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce64:	e841 2300 	strex	r3, r2, [r1]
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1e6      	bne.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3308      	adds	r3, #8
 800ce76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	e853 3f00 	ldrex	r3, [r3]
 800ce7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	f023 0301 	bic.w	r3, r3, #1
 800ce86:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce90:	623a      	str	r2, [r7, #32]
 800ce92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce94:	69f9      	ldr	r1, [r7, #28]
 800ce96:	6a3a      	ldr	r2, [r7, #32]
 800ce98:	e841 2300 	strex	r3, r2, [r1]
 800ce9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1e5      	bne.n	800ce70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2220      	movs	r2, #32
 800cea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2220      	movs	r2, #32
 800ceb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e010      	b.n	800ceea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	69da      	ldr	r2, [r3, #28]
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	4013      	ands	r3, r2
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	bf0c      	ite	eq
 800ced8:	2301      	moveq	r3, #1
 800ceda:	2300      	movne	r3, #0
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	461a      	mov	r2, r3
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	f43f af46 	beq.w	800cd74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3770      	adds	r7, #112	; 0x70
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b08f      	sub	sp, #60	; 0x3c
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	e853 3f00 	ldrex	r3, [r3]
 800cf06:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cf0e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	461a      	mov	r2, r3
 800cf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf20:	e841 2300 	strex	r3, r2, [r1]
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1e6      	bne.n	800cefa <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3308      	adds	r3, #8
 800cf32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf42:	633b      	str	r3, [r7, #48]	; 0x30
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3308      	adds	r3, #8
 800cf4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf4c:	61ba      	str	r2, [r7, #24]
 800cf4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf50:	6979      	ldr	r1, [r7, #20]
 800cf52:	69ba      	ldr	r2, [r7, #24]
 800cf54:	e841 2300 	strex	r3, r2, [r1]
 800cf58:	613b      	str	r3, [r7, #16]
   return(result);
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e5      	bne.n	800cf2c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2220      	movs	r2, #32
 800cf64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cf68:	bf00      	nop
 800cf6a:	373c      	adds	r7, #60	; 0x3c
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b095      	sub	sp, #84	; 0x54
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf84:	e853 3f00 	ldrex	r3, [r3]
 800cf88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf9a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfa2:	e841 2300 	strex	r3, r2, [r1]
 800cfa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1e6      	bne.n	800cf7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3308      	adds	r3, #8
 800cfb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	e853 3f00 	ldrex	r3, [r3]
 800cfbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfc4:	f023 0301 	bic.w	r3, r3, #1
 800cfc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3308      	adds	r3, #8
 800cfd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfda:	e841 2300 	strex	r3, r2, [r1]
 800cfde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1e3      	bne.n	800cfae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d118      	bne.n	800d020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	e853 3f00 	ldrex	r3, [r3]
 800cffa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f023 0310 	bic.w	r3, r3, #16
 800d002:	647b      	str	r3, [r7, #68]	; 0x44
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00c:	61bb      	str	r3, [r7, #24]
 800d00e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6979      	ldr	r1, [r7, #20]
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	613b      	str	r3, [r7, #16]
   return(result);
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e6      	bne.n	800cfee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2220      	movs	r2, #32
 800d024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d034:	bf00      	nop
 800d036:	3754      	adds	r7, #84	; 0x54
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b090      	sub	sp, #64	; 0x40
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 0320 	and.w	r3, r3, #32
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d137      	bne.n	800d0cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d05e:	2200      	movs	r2, #0
 800d060:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	e853 3f00 	ldrex	r3, [r3]
 800d072:	623b      	str	r3, [r7, #32]
   return(result);
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d07a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3308      	adds	r3, #8
 800d082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d084:	633a      	str	r2, [r7, #48]	; 0x30
 800d086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d08a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d08c:	e841 2300 	strex	r3, r2, [r1]
 800d090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e5      	bne.n	800d064 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	e853 3f00 	ldrex	r3, [r3]
 800d0a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ba:	69b9      	ldr	r1, [r7, #24]
 800d0bc:	69fa      	ldr	r2, [r7, #28]
 800d0be:	e841 2300 	strex	r3, r2, [r1]
 800d0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1e6      	bne.n	800d098 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d0ca:	e002      	b.n	800d0d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d0cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d0ce:	f7f6 f8bf 	bl	8003250 <HAL_UART_TxCpltCallback>
}
 800d0d2:	bf00      	nop
 800d0d4:	3740      	adds	r7, #64	; 0x40
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b084      	sub	sp, #16
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff fa31 	bl	800c550 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b086      	sub	sp, #24
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d102:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d10a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d112:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d11e:	2b80      	cmp	r3, #128	; 0x80
 800d120:	d109      	bne.n	800d136 <UART_DMAError+0x40>
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	2b21      	cmp	r3, #33	; 0x21
 800d126:	d106      	bne.n	800d136 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d130:	6978      	ldr	r0, [r7, #20]
 800d132:	f7ff fede 	bl	800cef2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d140:	2b40      	cmp	r3, #64	; 0x40
 800d142:	d109      	bne.n	800d158 <UART_DMAError+0x62>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b22      	cmp	r3, #34	; 0x22
 800d148:	d106      	bne.n	800d158 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d152:	6978      	ldr	r0, [r7, #20]
 800d154:	f7ff ff0e 	bl	800cf74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d15e:	f043 0210 	orr.w	r2, r3, #16
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d168:	6978      	ldr	r0, [r7, #20]
 800d16a:	f7ff f9fb 	bl	800c564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d16e:	bf00      	nop
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2200      	movs	r2, #0
 800d188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7ff f9e5 	bl	800c564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b088      	sub	sp, #32
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1be:	61fb      	str	r3, [r7, #28]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	61bb      	str	r3, [r7, #24]
 800d1ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6979      	ldr	r1, [r7, #20]
 800d1ce:	69ba      	ldr	r2, [r7, #24]
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e6      	bne.n	800d1aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2220      	movs	r2, #32
 800d1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f6 f830 	bl	8003250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1f0:	bf00      	nop
 800d1f2:	3720      	adds	r7, #32
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e058      	b.n	800d2c2 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f7f7 fa62 	bl	80046ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2224      	movs	r2, #36	; 0x24
 800d22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0201 	bic.w	r2, r2, #1
 800d23e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f7ff f9a5 	bl	800c590 <UART_SetConfig>
 800d246:	4603      	mov	r3, r0
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d101      	bne.n	800d250 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e038      	b.n	800d2c2 <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f7ff fc95 	bl	800cb88 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	689a      	ldr	r2, [r3, #8]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d26c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	430a      	orrs	r2, r1
 800d280:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	055b      	lsls	r3, r3, #21
 800d286:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	041b      	lsls	r3, r3, #16
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	4313      	orrs	r3, r2
 800d290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800d29c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	6812      	ldr	r2, [r2, #0]
 800d2a4:	6979      	ldr	r1, [r7, #20]
 800d2a6:	430b      	orrs	r3, r1
 800d2a8:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f042 0201 	orr.w	r2, r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7ff fd06 	bl	800cccc <UART_CheckIdleState>
 800d2c0:	4603      	mov	r3, r0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d2d2:	bf00      	nop
 800d2d4:	370c      	adds	r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b083      	sub	sp, #12
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d2e6:	bf00      	nop
 800d2e8:	370c      	adds	r7, #12
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b083      	sub	sp, #12
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d2fa:	bf00      	nop
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d306:	b480      	push	{r7}
 800d308:	b085      	sub	sp, #20
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d314:	2b01      	cmp	r3, #1
 800d316:	d101      	bne.n	800d31c <HAL_UARTEx_DisableFifoMode+0x16>
 800d318:	2302      	movs	r3, #2
 800d31a:	e027      	b.n	800d36c <HAL_UARTEx_DisableFifoMode+0x66>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2224      	movs	r2, #36	; 0x24
 800d328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f022 0201 	bic.w	r2, r2, #1
 800d342:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d34a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2220      	movs	r2, #32
 800d35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d101      	bne.n	800d390 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d38c:	2302      	movs	r3, #2
 800d38e:	e02d      	b.n	800d3ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2224      	movs	r2, #36	; 0x24
 800d39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f022 0201 	bic.w	r2, r2, #1
 800d3b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f84f 	bl	800d470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d404:	2b01      	cmp	r3, #1
 800d406:	d101      	bne.n	800d40c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d408:	2302      	movs	r3, #2
 800d40a:	e02d      	b.n	800d468 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2224      	movs	r2, #36	; 0x24
 800d418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f022 0201 	bic.w	r2, r2, #1
 800d432:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	430a      	orrs	r2, r1
 800d446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f811 	bl	800d470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2220      	movs	r2, #32
 800d45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d108      	bne.n	800d492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d490:	e031      	b.n	800d4f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d492:	2308      	movs	r3, #8
 800d494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d496:	2308      	movs	r3, #8
 800d498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	0e5b      	lsrs	r3, r3, #25
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	f003 0307 	and.w	r3, r3, #7
 800d4a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	0f5b      	lsrs	r3, r3, #29
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	f003 0307 	and.w	r3, r3, #7
 800d4b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4ba:	7bbb      	ldrb	r3, [r7, #14]
 800d4bc:	7b3a      	ldrb	r2, [r7, #12]
 800d4be:	4911      	ldr	r1, [pc, #68]	; (800d504 <UARTEx_SetNbDataToProcess+0x94>)
 800d4c0:	5c8a      	ldrb	r2, [r1, r2]
 800d4c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d4c6:	7b3a      	ldrb	r2, [r7, #12]
 800d4c8:	490f      	ldr	r1, [pc, #60]	; (800d508 <UARTEx_SetNbDataToProcess+0x98>)
 800d4ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
 800d4da:	7b7a      	ldrb	r2, [r7, #13]
 800d4dc:	4909      	ldr	r1, [pc, #36]	; (800d504 <UARTEx_SetNbDataToProcess+0x94>)
 800d4de:	5c8a      	ldrb	r2, [r1, r2]
 800d4e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d4e4:	7b7a      	ldrb	r2, [r7, #13]
 800d4e6:	4908      	ldr	r1, [pc, #32]	; (800d508 <UARTEx_SetNbDataToProcess+0x98>)
 800d4e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d4f6:	bf00      	nop
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	0801515c 	.word	0x0801515c
 800d508:	08015164 	.word	0x08015164

0800d50c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	2b05      	cmp	r3, #5
 800d520:	d122      	bne.n	800d568 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	3301      	adds	r3, #1
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	b29b      	uxth	r3, r3
 800d52a:	021b      	lsls	r3, r3, #8
 800d52c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	3302      	adds	r3, #2
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	b29a      	uxth	r2, r3
 800d536:	89bb      	ldrh	r3, [r7, #12]
 800d538:	4313      	orrs	r3, r2
 800d53a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d53c:	89bb      	ldrh	r3, [r7, #12]
 800d53e:	3301      	adds	r3, #1
 800d540:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF], usRegAddress, 1, MB_REG_WRITE );
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	1cd8      	adds	r0, r3, #3
 800d546:	89b9      	ldrh	r1, [r7, #12]
 800d548:	2301      	movs	r3, #1
 800d54a:	2201      	movs	r2, #1
 800d54c:	f7f5 fd32 	bl	8002fb4 <eMBRegHoldingCB>
 800d550:	4603      	mov	r3, r0
 800d552:	72fb      	strb	r3, [r7, #11]

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d008      	beq.n	800d56c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800d55a:	7afb      	ldrb	r3, [r7, #11]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 fa09 	bl	800d974 <prveMBError2Exception>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]
 800d566:	e001      	b.n	800d56c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d568:	2303      	movs	r3, #3
 800d56a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800d580:	2300      	movs	r3, #0
 800d582:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	881b      	ldrh	r3, [r3, #0]
 800d588:	2b05      	cmp	r3, #5
 800d58a:	d946      	bls.n	800d61a <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3301      	adds	r3, #1
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	b29b      	uxth	r3, r3
 800d594:	021b      	lsls	r3, r3, #8
 800d596:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3302      	adds	r3, #2
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	89bb      	ldrh	r3, [r7, #12]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d5a6:	89bb      	ldrh	r3, [r7, #12]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3303      	adds	r3, #3
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	021b      	lsls	r3, r3, #8
 800d5b6:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	b29a      	uxth	r2, r3
 800d5c0:	897b      	ldrh	r3, [r7, #10]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	795b      	ldrb	r3, [r3, #5]
 800d5ca:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800d5cc:	897b      	ldrh	r3, [r7, #10]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d020      	beq.n	800d614 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 800d5d2:	897b      	ldrh	r3, [r7, #10]
 800d5d4:	2b78      	cmp	r3, #120	; 0x78
 800d5d6:	d81d      	bhi.n	800d614 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800d5d8:	897b      	ldrh	r3, [r7, #10]
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800d5e0:	7a7a      	ldrb	r2, [r7, #9]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d116      	bne.n	800d614 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],  usRegAddress, usRegCount, MB_REG_WRITE );
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	1d98      	adds	r0, r3, #6
 800d5ea:	897a      	ldrh	r2, [r7, #10]
 800d5ec:	89b9      	ldrh	r1, [r7, #12]
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	f7f5 fce0 	bl	8002fb4 <eMBRegHoldingCB>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	723b      	strb	r3, [r7, #8]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d5f8:	7a3b      	ldrb	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d006      	beq.n	800d60c <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d5fe:	7a3b      	ldrb	r3, [r7, #8]
 800d600:	4618      	mov	r0, r3
 800d602:	f000 f9b7 	bl	800d974 <prveMBError2Exception>
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800d60a:	e008      	b.n	800d61e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2205      	movs	r2, #5
 800d610:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d612:	e004      	b.n	800d61e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d614:	2303      	movs	r3, #3
 800d616:	73fb      	strb	r3, [r7, #15]
 800d618:	e001      	b.n	800d61e <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d61a:	2303      	movs	r3, #3
 800d61c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d632:	2300      	movs	r3, #0
 800d634:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	2b05      	cmp	r3, #5
 800d63c:	d15c      	bne.n	800d6f8 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3301      	adds	r3, #1
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	b29b      	uxth	r3, r3
 800d646:	021b      	lsls	r3, r3, #8
 800d648:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	3302      	adds	r3, #2
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	b29a      	uxth	r2, r3
 800d652:	8abb      	ldrh	r3, [r7, #20]
 800d654:	4313      	orrs	r3, r2
 800d656:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800d658:	8abb      	ldrh	r3, [r7, #20]
 800d65a:	3301      	adds	r3, #1
 800d65c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	3303      	adds	r3, #3
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	b29b      	uxth	r3, r3
 800d666:	021b      	lsls	r3, r3, #8
 800d668:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	3304      	adds	r3, #4
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800d672:	8a7b      	ldrh	r3, [r7, #18]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d03c      	beq.n	800d6f2 <eMBFuncReadHoldingRegister+0xca>
 800d678:	8a7b      	ldrh	r3, [r7, #18]
 800d67a:	2b7d      	cmp	r3, #125	; 0x7d
 800d67c:	d839      	bhi.n	800d6f2 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2200      	movs	r2, #0
 800d686:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	60fa      	str	r2, [r7, #12]
 800d68e:	2203      	movs	r2, #3
 800d690:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	3301      	adds	r3, #1
 800d698:	b29a      	uxth	r2, r3
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800d69e:	8a7b      	ldrh	r3, [r7, #18]
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	1c59      	adds	r1, r3, #1
 800d6a6:	60f9      	str	r1, [r7, #12]
 800d6a8:	0052      	lsls	r2, r2, #1
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800d6ba:	8a7a      	ldrh	r2, [r7, #18]
 800d6bc:	8ab9      	ldrh	r1, [r7, #20]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7f5 fc77 	bl	8002fb4 <eMBRegHoldingCB>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800d6ca:	7afb      	ldrb	r3, [r7, #11]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d006      	beq.n	800d6de <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d6d0:	7afb      	ldrb	r3, [r7, #11]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 f94e 	bl	800d974 <prveMBError2Exception>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d6dc:	e00e      	b.n	800d6fc <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	881a      	ldrh	r2, [r3, #0]
 800d6e2:	8a7b      	ldrh	r3, [r7, #18]
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	4413      	add	r3, r2
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d6f0:	e004      	b.n	800d6fc <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	75fb      	strb	r3, [r7, #23]
 800d6f6:	e001      	b.n	800d6fc <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d6f8:	2303      	movs	r3, #3
 800d6fa:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d710:	2300      	movs	r3, #0
 800d712:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	2b09      	cmp	r3, #9
 800d71a:	f240 8099 	bls.w	800d850 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	3301      	adds	r3, #1
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	b29b      	uxth	r3, r3
 800d726:	021b      	lsls	r3, r3, #8
 800d728:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3302      	adds	r3, #2
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	b29a      	uxth	r2, r3
 800d732:	8abb      	ldrh	r3, [r7, #20]
 800d734:	4313      	orrs	r3, r2
 800d736:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800d738:	8abb      	ldrh	r3, [r7, #20]
 800d73a:	3301      	adds	r3, #1
 800d73c:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3303      	adds	r3, #3
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	b29b      	uxth	r3, r3
 800d746:	021b      	lsls	r3, r3, #8
 800d748:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3304      	adds	r3, #4
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	b29a      	uxth	r2, r3
 800d752:	8a7b      	ldrh	r3, [r7, #18]
 800d754:	4313      	orrs	r3, r2
 800d756:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	3305      	adds	r3, #5
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	b29b      	uxth	r3, r3
 800d760:	021b      	lsls	r3, r3, #8
 800d762:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3306      	adds	r3, #6
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	8a3b      	ldrh	r3, [r7, #16]
 800d76e:	4313      	orrs	r3, r2
 800d770:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800d772:	8a3b      	ldrh	r3, [r7, #16]
 800d774:	3301      	adds	r3, #1
 800d776:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3307      	adds	r3, #7
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	021b      	lsls	r3, r3, #8
 800d782:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	3308      	adds	r3, #8
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	89fb      	ldrh	r3, [r7, #14]
 800d78e:	4313      	orrs	r3, r2
 800d790:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	7a5b      	ldrb	r3, [r3, #9]
 800d796:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800d798:	8a7b      	ldrh	r3, [r7, #18]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d056      	beq.n	800d84c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800d79e:	8a7b      	ldrh	r3, [r7, #18]
 800d7a0:	2b7d      	cmp	r3, #125	; 0x7d
 800d7a2:	d853      	bhi.n	800d84c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800d7a4:	89fb      	ldrh	r3, [r7, #14]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d050      	beq.n	800d84c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800d7aa:	89fb      	ldrh	r3, [r7, #14]
 800d7ac:	2b79      	cmp	r3, #121	; 0x79
 800d7ae:	d84d      	bhi.n	800d84c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800d7b0:	89fb      	ldrh	r3, [r7, #14]
 800d7b2:	005a      	lsls	r2, r3, #1
 800d7b4:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d148      	bne.n	800d84c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF], usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f103 000a 	add.w	r0, r3, #10
 800d7c0:	89fa      	ldrh	r2, [r7, #14]
 800d7c2:	8a39      	ldrh	r1, [r7, #16]
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	f7f5 fbf5 	bl	8002fb4 <eMBRegHoldingCB>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	75bb      	strb	r3, [r7, #22]

            if( eRegStatus == MB_ENOERR )
 800d7ce:	7dbb      	ldrb	r3, [r7, #22]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d131      	bne.n	800d838 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	60ba      	str	r2, [r7, #8]
 800d7e4:	2217      	movs	r2, #23
 800d7e6:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800d7f4:	8a7b      	ldrh	r3, [r7, #18]
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	1c59      	adds	r1, r3, #1
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	0052      	lsls	r2, r2, #1
 800d800:	b2d2      	uxtb	r2, r2
 800d802:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800d810:	8a7a      	ldrh	r2, [r7, #18]
 800d812:	8ab9      	ldrh	r1, [r7, #20]
 800d814:	2300      	movs	r3, #0
 800d816:	68b8      	ldr	r0, [r7, #8]
 800d818:	f7f5 fbcc 	bl	8002fb4 <eMBRegHoldingCB>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 800d820:	7dbb      	ldrb	r3, [r7, #22]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d108      	bne.n	800d838 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	881a      	ldrh	r2, [r3, #0]
 800d82a:	8a7b      	ldrh	r3, [r7, #18]
 800d82c:	005b      	lsls	r3, r3, #1
 800d82e:	b29b      	uxth	r3, r3
 800d830:	4413      	add	r3, r2
 800d832:	b29a      	uxth	r2, r3
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800d838:	7dbb      	ldrb	r3, [r7, #22]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d008      	beq.n	800d850 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d83e:	7dbb      	ldrb	r3, [r7, #22]
 800d840:	4618      	mov	r0, r3
 800d842:	f000 f897 	bl	800d974 <prveMBError2Exception>
 800d846:	4603      	mov	r3, r0
 800d848:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d84a:	e001      	b.n	800d850 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d84c:	2303      	movs	r3, #3
 800d84e:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800d850:	7dfb      	ldrb	r3, [r7, #23]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3718      	adds	r7, #24
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b086      	sub	sp, #24
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800d864:	2300      	movs	r3, #0
 800d866:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	2b05      	cmp	r3, #5
 800d86e:	d15d      	bne.n	800d92c <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3301      	adds	r3, #1
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	b29b      	uxth	r3, r3
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	3302      	adds	r3, #2
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	b29a      	uxth	r2, r3
 800d884:	8abb      	ldrh	r3, [r7, #20]
 800d886:	4313      	orrs	r3, r2
 800d888:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800d88a:	8abb      	ldrh	r3, [r7, #20]
 800d88c:	3301      	adds	r3, #1
 800d88e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3303      	adds	r3, #3
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	b29b      	uxth	r3, r3
 800d898:	021b      	lsls	r3, r3, #8
 800d89a:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	3304      	adds	r3, #4
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	827b      	strh	r3, [r7, #18]

        /* Проверьте, является ли допустимым количество регистров для чтения.
         * Если нет, верните исключение недопустимого значения данных Modbus.
         */
        if( ( usRegCount >= 1 ) && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800d8aa:	8a7b      	ldrh	r3, [r7, #18]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d03a      	beq.n	800d926 <eMBFuncReadInputRegister+0xcc>
 800d8b0:	8a7b      	ldrh	r3, [r7, #18]
 800d8b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d8b6:	d236      	bcs.n	800d926 <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	801a      	strh	r2, [r3, #0]

            /* Первый байт содержит код функции. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	60fa      	str	r2, [r7, #12]
 800d8c8:	2204      	movs	r2, #4
 800d8ca:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	881b      	ldrh	r3, [r3, #0]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	801a      	strh	r2, [r3, #0]

            /* Второй байт в ответе содержит количество байтов. */
            /////////////////////////////////////////////////////// МОЁ изменение ///////////////
            // *pucFrameCur++ =  ( UCHAR )( usRegCount * 2 );
            // usRegCount =1; // МОЁ изменение, всегда будет 1 пакет данных, пакет состоит из 40_WORD это значит 80 байт
            *pucFrameCur++ = 80; // МОЁ изменение, все коментарии почему , в   main.c => eMBRegInputCB()
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	1c5a      	adds	r2, r3, #1
 800d8dc:	60fa      	str	r2, [r7, #12]
 800d8de:	2250      	movs	r2, #80	; 0x50
 800d8e0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	881b      	ldrh	r3, [r3, #0]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	801a      	strh	r2, [r3, #0]

            eRegStatus = eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800d8ee:	8a7a      	ldrh	r2, [r7, #18]
 800d8f0:	8abb      	ldrh	r3, [r7, #20]
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f7f5 fb05 	bl	8002f04 <eMBRegInputCB>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	72fb      	strb	r3, [r7, #11]

            /* Если произошла ошибка, преобразуйте ее в исключение Modbus. */
            if( eRegStatus != MB_ENOERR )
 800d8fe:	7afb      	ldrb	r3, [r7, #11]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d006      	beq.n	800d912 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800d904:	7afb      	ldrb	r3, [r7, #11]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 f834 	bl	800d974 <prveMBError2Exception>
 800d90c:	4603      	mov	r3, r0
 800d90e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800d910:	e00e      	b.n	800d930 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	881a      	ldrh	r2, [r3, #0]
 800d916:	8a7b      	ldrh	r3, [r7, #18]
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4413      	add	r3, r2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800d924:	e004      	b.n	800d930 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d926:	2303      	movs	r3, #3
 800d928:	75fb      	strb	r3, [r7, #23]
 800d92a:	e001      	b.n	800d930 <eMBFuncReadInputRegister+0xd6>
        }
    }
    else
    {
        /* Не может быть допустимым запросом на чтение входного регистра, поскольку длина указана неверно. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d92c:	2303      	movs	r3, #3
 800d92e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800d930:	7dfb      	ldrb	r3, [r7, #23]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
	...

0800d93c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3301      	adds	r3, #1
 800d94a:	4a08      	ldr	r2, [pc, #32]	; (800d96c <eMBFuncReportSlaveID+0x30>)
 800d94c:	8812      	ldrh	r2, [r2, #0]
 800d94e:	4908      	ldr	r1, [pc, #32]	; (800d970 <eMBFuncReportSlaveID+0x34>)
 800d950:	4618      	mov	r0, r3
 800d952:	f001 fc05 	bl	800f160 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800d956:	4b05      	ldr	r3, [pc, #20]	; (800d96c <eMBFuncReportSlaveID+0x30>)
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	2001235c 	.word	0x2001235c
 800d970:	2001233c 	.word	0x2001233c

0800d974 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	2b07      	cmp	r3, #7
 800d982:	d00c      	beq.n	800d99e <prveMBError2Exception+0x2a>
 800d984:	2b07      	cmp	r3, #7
 800d986:	dc0d      	bgt.n	800d9a4 <prveMBError2Exception+0x30>
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <prveMBError2Exception+0x1e>
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d003      	beq.n	800d998 <prveMBError2Exception+0x24>
 800d990:	e008      	b.n	800d9a4 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]
            break;
 800d996:	e008      	b.n	800d9aa <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800d998:	2302      	movs	r3, #2
 800d99a:	73fb      	strb	r3, [r7, #15]
            break;
 800d99c:	e005      	b.n	800d9aa <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800d99e:	2306      	movs	r3, #6
 800d9a0:	73fb      	strb	r3, [r7, #15]
            break;
 800d9a2:	e002      	b.n	800d9aa <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800d9a4:	2304      	movs	r3, #4
 800d9a6:	73fb      	strb	r3, [r7, #15]
            break;
 800d9a8:	bf00      	nop
    }

    return eStatus;
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	71fb      	strb	r3, [r7, #7]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	71bb      	strb	r3, [r7, #6]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	717b      	strb	r3, [r7, #5]
    /* проверка предварительных условий */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||  ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800d9cc:	79bb      	ldrb	r3, [r7, #6]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d005      	beq.n	800d9de <eMBInit+0x26>
 800d9d2:	79bb      	ldrb	r3, [r7, #6]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <eMBInit+0x26>
 800d9d8:	79bb      	ldrb	r3, [r7, #6]
 800d9da:	2bf7      	cmp	r3, #247	; 0xf7
 800d9dc:	d901      	bls.n	800d9e2 <eMBInit+0x2a>
    	{ ucSlaveAddress = 7;  } // по умолчанию такой адрес будет, а потому что
 800d9de:	2307      	movs	r3, #7
 800d9e0:	71bb      	strb	r3, [r7, #6]

    ucMBAddress = ucSlaveAddress; // раскинули адрес по этому файлу
 800d9e2:	4a08      	ldr	r2, [pc, #32]	; (800da04 <eMBInit+0x4c>)
 800d9e4:	79bb      	ldrb	r3, [r7, #6]
 800d9e6:	7013      	strb	r3, [r2, #0]
    timeout_Tim6_50us = 35; // на нашей скорости здесь будет только такой таймаут //////////eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity ); // здесь остался только инит времени тайаута TIM6
 800d9e8:	4b07      	ldr	r3, [pc, #28]	; (800da08 <eMBInit+0x50>)
 800d9ea:	2223      	movs	r2, #35	; 0x23
 800d9ec:	801a      	strh	r2, [r3, #0]

    xMBPortEventInit(  ); // сброс очереди событий  ==> в файле portevent.c
 800d9ee:	f000 f8e9 	bl	800dbc4 <xMBPortEventInit>
    eMBState = STATE_DISABLED;
 800d9f2:	4b06      	ldr	r3, [pc, #24]	; (800da0c <eMBInit+0x54>)
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	701a      	strb	r2, [r3, #0]

    return MB_ENOERR;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	2001235e 	.word	0x2001235e
 800da08:	2000060c 	.word	0x2000060c
 800da0c:	20000058 	.word	0x20000058

0800da10 <eMBEnable>:



eMBErrorCode
eMBEnable( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
        /* Activate the protocol stack. */
    ENTER_CRITICAL_SECTION(  );
 800da14:	f7f4 f856 	bl	8001ac4 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800da18:	4b08      	ldr	r3, [pc, #32]	; (800da3c <eMBEnable+0x2c>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE ); // перевод порта в режим приема
 800da1e:	2100      	movs	r1, #0
 800da20:	2001      	movs	r0, #1
 800da22:	f000 f911 	bl	800dc48 <vMBPortSerialEnable>
    vMBPortTimersEnable(  ); // старт таймера TIM6 и сброс счетчика в ноль
 800da26:	f000 f96b 	bl	800dd00 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800da2a:	f7f4 f85b 	bl	8001ae4 <__critical_exit>

    eMBState = STATE_ENABLED;
 800da2e:	4b04      	ldr	r3, [pc, #16]	; (800da40 <eMBEnable+0x30>)
 800da30:	2200      	movs	r2, #0
 800da32:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	200005e8 	.word	0x200005e8
 800da40:	20000058 	.word	0x20000058

0800da44 <eMBPoll>:


eMBErrorCode
eMBPoll( void )
{
 800da44:	b590      	push	{r4, r7, lr}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800da4a:	2300      	movs	r3, #0
 800da4c:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    BOOL  flag_event = xMBPortEventGet( &eEvent );
 800da4e:	1c7b      	adds	r3, r7, #1
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f8db 	bl	800dc0c <xMBPortEventGet>
 800da56:	4603      	mov	r3, r0
 800da58:	70bb      	strb	r3, [r7, #2]

    /* Проверьте, есть ли доступное событие.
     * Если нет, верните управление вызывающему абоненту.
     * В противном случае мы будем обрабатывать это событие. */

    if( flag_event == TRUE ) // если там в файле portevent.c  кемто чемто сформировано событие, тО сейчас мы его обработаем
 800da5a:	78bb      	ldrb	r3, [r7, #2]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	f040 8096 	bne.w	800db8e <eMBPoll+0x14a>
    {
    	count_eMBPool=0;
 800da62:	4b50      	ldr	r3, [pc, #320]	; (800dba4 <eMBPoll+0x160>)
 800da64:	2200      	movs	r2, #0
 800da66:	701a      	strb	r2, [r3, #0]
    	//printf("eMBPoll-STARTevent _eMBState=%d, _eEvent=%d \n", eMBState, eEvent);
        switch ( eEvent )
 800da68:	787b      	ldrb	r3, [r7, #1]
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	f200 8094 	bhi.w	800db98 <eMBPoll+0x154>
 800da70:	a201      	add	r2, pc, #4	; (adr r2, 800da78 <eMBPoll+0x34>)
 800da72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da76:	bf00      	nop
 800da78:	0800db99 	.word	0x0800db99
 800da7c:	0800da89 	.word	0x0800da89
 800da80:	0800dab9 	.word	0x0800dab9
 800da84:	0800db99 	.word	0x0800db99
        case EV_READY:
        	//printf( "eMBPoll eEvent <= EV_READY \n");
            break;

        case EV_FRAME_RECEIVED:
            eStatus = eMBRTUReceive( &ucRcvAddress, &ucMBFrame, &usLength );
 800da88:	4a47      	ldr	r2, [pc, #284]	; (800dba8 <eMBPoll+0x164>)
 800da8a:	4948      	ldr	r1, [pc, #288]	; (800dbac <eMBPoll+0x168>)
 800da8c:	4848      	ldr	r0, [pc, #288]	; (800dbb0 <eMBPoll+0x16c>)
 800da8e:	f000 f989 	bl	800dda4 <eMBRTUReceive>
 800da92:	4603      	mov	r3, r0
 800da94:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800da96:	78fb      	ldrb	r3, [r7, #3]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d17a      	bne.n	800db92 <eMBPoll+0x14e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800da9c:	4b44      	ldr	r3, [pc, #272]	; (800dbb0 <eMBPoll+0x16c>)
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	4b44      	ldr	r3, [pc, #272]	; (800dbb4 <eMBPoll+0x170>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d003      	beq.n	800dab0 <eMBPoll+0x6c>
 800daa8:	4b41      	ldr	r3, [pc, #260]	; (800dbb0 <eMBPoll+0x16c>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d170      	bne.n	800db92 <eMBPoll+0x14e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );  // значит фрейм принят, адрес норм, формируем событие - начало обработки
 800dab0:	2002      	movs	r0, #2
 800dab2:	f000 f895 	bl	800dbe0 <xMBPortEventPost>
                }
            }
            break;
 800dab6:	e06c      	b.n	800db92 <eMBPoll+0x14e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800dab8:	4b3c      	ldr	r3, [pc, #240]	; (800dbac <eMBPoll+0x168>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	781a      	ldrb	r2, [r3, #0]
 800dabe:	4b3e      	ldr	r3, [pc, #248]	; (800dbb8 <eMBPoll+0x174>)
 800dac0:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800dac2:	4b3e      	ldr	r3, [pc, #248]	; (800dbbc <eMBPoll+0x178>)
 800dac4:	2201      	movs	r2, #1
 800dac6:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800dac8:	2300      	movs	r3, #0
 800daca:	607b      	str	r3, [r7, #4]
 800dacc:	e01f      	b.n	800db0e <eMBPoll+0xca>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800dace:	4a3c      	ldr	r2, [pc, #240]	; (800dbc0 <eMBPoll+0x17c>)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d01d      	beq.n	800db16 <eMBPoll+0xd2>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800dada:	4a39      	ldr	r2, [pc, #228]	; (800dbc0 <eMBPoll+0x17c>)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dae2:	4b35      	ldr	r3, [pc, #212]	; (800dbb8 <eMBPoll+0x174>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d10e      	bne.n	800db08 <eMBPoll+0xc4>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800daea:	4a35      	ldr	r2, [pc, #212]	; (800dbc0 <eMBPoll+0x17c>)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	00db      	lsls	r3, r3, #3
 800daf0:	4413      	add	r3, r2
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4a2d      	ldr	r2, [pc, #180]	; (800dbac <eMBPoll+0x168>)
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	492b      	ldr	r1, [pc, #172]	; (800dba8 <eMBPoll+0x164>)
 800dafa:	4610      	mov	r0, r2
 800dafc:	4798      	blx	r3
 800dafe:	4603      	mov	r3, r0
 800db00:	461a      	mov	r2, r3
 800db02:	4b2e      	ldr	r3, [pc, #184]	; (800dbbc <eMBPoll+0x178>)
 800db04:	701a      	strb	r2, [r3, #0]
                    break;
 800db06:	e007      	b.n	800db18 <eMBPoll+0xd4>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3301      	adds	r3, #1
 800db0c:	607b      	str	r3, [r7, #4]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b0f      	cmp	r3, #15
 800db12:	dddc      	ble.n	800dace <eMBPoll+0x8a>
 800db14:	e000      	b.n	800db18 <eMBPoll+0xd4>
                    break;
 800db16:	bf00      	nop
                }
            }
            //printf("eMBPoll eEvent==EV_EXECUTE  ucFunctionCode=%d \n", ucFunctionCode);

            /* Если запрос не был отправлен на широковещательный адрес, мы возвращаем ответ. !!!!!!!! ВОТ ЗДЕСЬ передача !!!!!!!!!!  */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800db18:	4b25      	ldr	r3, [pc, #148]	; (800dbb0 <eMBPoll+0x16c>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d03a      	beq.n	800db96 <eMBPoll+0x152>
            {
                if( eException != MB_EX_NONE )
 800db20:	4b26      	ldr	r3, [pc, #152]	; (800dbbc <eMBPoll+0x178>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01d      	beq.n	800db64 <eMBPoll+0x120>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800db28:	4b1f      	ldr	r3, [pc, #124]	; (800dba8 <eMBPoll+0x164>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800db2e:	4b22      	ldr	r3, [pc, #136]	; (800dbb8 <eMBPoll+0x174>)
 800db30:	781a      	ldrb	r2, [r3, #0]
 800db32:	4b1e      	ldr	r3, [pc, #120]	; (800dbac <eMBPoll+0x168>)
 800db34:	6819      	ldr	r1, [r3, #0]
 800db36:	4b1c      	ldr	r3, [pc, #112]	; (800dba8 <eMBPoll+0x164>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	1c58      	adds	r0, r3, #1
 800db3c:	b284      	uxth	r4, r0
 800db3e:	481a      	ldr	r0, [pc, #104]	; (800dba8 <eMBPoll+0x164>)
 800db40:	8004      	strh	r4, [r0, #0]
 800db42:	440b      	add	r3, r1
 800db44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db48:	b2d2      	uxtb	r2, r2
 800db4a:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800db4c:	4b17      	ldr	r3, [pc, #92]	; (800dbac <eMBPoll+0x168>)
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	4b15      	ldr	r3, [pc, #84]	; (800dba8 <eMBPoll+0x164>)
 800db52:	881b      	ldrh	r3, [r3, #0]
 800db54:	1c59      	adds	r1, r3, #1
 800db56:	b288      	uxth	r0, r1
 800db58:	4913      	ldr	r1, [pc, #76]	; (800dba8 <eMBPoll+0x164>)
 800db5a:	8008      	strh	r0, [r1, #0]
 800db5c:	4413      	add	r3, r2
 800db5e:	4a17      	ldr	r2, [pc, #92]	; (800dbbc <eMBPoll+0x178>)
 800db60:	7812      	ldrb	r2, [r2, #0]
 800db62:	701a      	strb	r2, [r3, #0]
                }

                // МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////
                if (ucMBFrame[MB_PDU_FUNC_OFF] == 4) { usLength =82; }// МОЁ изменение ///////////////// МОЁ изменение ///////////////
 800db64:	4b11      	ldr	r3, [pc, #68]	; (800dbac <eMBPoll+0x168>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b04      	cmp	r3, #4
 800db6c:	d102      	bne.n	800db74 <eMBPoll+0x130>
 800db6e:	4b0e      	ldr	r3, [pc, #56]	; (800dba8 <eMBPoll+0x164>)
 800db70:	2252      	movs	r2, #82	; 0x52
 800db72:	801a      	strh	r2, [r3, #0]
                eStatus = eMBRTUSend( ucMBAddress, ucMBFrame, usLength );
 800db74:	4b0f      	ldr	r3, [pc, #60]	; (800dbb4 <eMBPoll+0x170>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	4618      	mov	r0, r3
 800db7a:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <eMBPoll+0x168>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a0a      	ldr	r2, [pc, #40]	; (800dba8 <eMBPoll+0x164>)
 800db80:	8812      	ldrh	r2, [r2, #0]
 800db82:	4619      	mov	r1, r3
 800db84:	f000 f958 	bl	800de38 <eMBRTUSend>
 800db88:	4603      	mov	r3, r0
 800db8a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800db8c:	e003      	b.n	800db96 <eMBPoll+0x152>

        case EV_FRAME_SENT:
            break;
        }
    }
 800db8e:	bf00      	nop
 800db90:	e002      	b.n	800db98 <eMBPoll+0x154>
            break;
 800db92:	bf00      	nop
 800db94:	e000      	b.n	800db98 <eMBPoll+0x154>
            break;
 800db96:	bf00      	nop
    return MB_ENOERR;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd90      	pop	{r4, r7, pc}
 800dba2:	bf00      	nop
 800dba4:	2001235f 	.word	0x2001235f
 800dba8:	20012368 	.word	0x20012368
 800dbac:	20012364 	.word	0x20012364
 800dbb0:	20012360 	.word	0x20012360
 800dbb4:	2001235e 	.word	0x2001235e
 800dbb8:	2001236a 	.word	0x2001236a
 800dbbc:	2001236b 	.word	0x2001236b
 800dbc0:	2000005c 	.word	0x2000005c

0800dbc4 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800dbc8:	4b04      	ldr	r3, [pc, #16]	; (800dbdc <xMBPortEventInit+0x18>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800dbce:	2301      	movs	r3, #1
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	2001236d 	.word	0x2001236d

0800dbe0 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800dbea:	4b06      	ldr	r3, [pc, #24]	; (800dc04 <xMBPortEventPost+0x24>)
 800dbec:	2201      	movs	r2, #1
 800dbee:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800dbf0:	4a05      	ldr	r2, [pc, #20]	; (800dc08 <xMBPortEventPost+0x28>)
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800dbf6:	2301      	movs	r3, #1
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	2001236d 	.word	0x2001236d
 800dc08:	2001236c 	.word	0x2001236c

0800dc0c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800dc14:	2300      	movs	r3, #0
 800dc16:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 800dc18:	4b09      	ldr	r3, [pc, #36]	; (800dc40 <xMBPortEventGet+0x34>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d008      	beq.n	800dc32 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800dc20:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <xMBPortEventGet+0x38>)
 800dc22:	781a      	ldrb	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <xMBPortEventGet+0x34>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3714      	adds	r7, #20
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	2001236d 	.word	0x2001236d
 800dc44:	2001236c 	.word	0x2001236c

0800dc48 <vMBPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/
extern	UART_HandleTypeDef * adr_huart_MB;
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	460a      	mov	r2, r1
 800dc52:	71fb      	strb	r3, [r7, #7]
 800dc54:	4613      	mov	r3, r2
 800dc56:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
    if(xRxEnable)
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <vMBPortSerialEnable+0x2c>
  {
    __HAL_UART_ENABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800dc5e:	4b15      	ldr	r3, [pc, #84]	; (800dcb4 <vMBPortSerialEnable+0x6c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <vMBPortSerialEnable+0x6c>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f042 0220 	orr.w	r2, r2, #32
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e009      	b.n	800dc88 <vMBPortSerialEnable+0x40>
  }
  else
  {
    __HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800dc74:	4b0f      	ldr	r3, [pc, #60]	; (800dcb4 <vMBPortSerialEnable+0x6c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <vMBPortSerialEnable+0x6c>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f022 0220 	bic.w	r2, r2, #32
 800dc86:	601a      	str	r2, [r3, #0]
  }

  if(xTxEnable)
 800dc88:	79bb      	ldrb	r3, [r7, #6]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d007      	beq.n	800dc9e <vMBPortSerialEnable+0x56>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dc98:	f7f9 fb4a 	bl	8007330 <HAL_GPIO_WritePin>
  else
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    //__HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_TXE);
  }
}
 800dc9c:	e006      	b.n	800dcac <vMBPortSerialEnable+0x64>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dca8:	f7f9 fb42 	bl	8007330 <HAL_GPIO_WritePin>
}
 800dcac:	bf00      	nop
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20000610 	.word	0x20000610

0800dcb8 <xMBPortSerialGetByte>:
      return TRUE;
}

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(adr_huart_MB->Init.Parity == UART_PARITY_NONE)
 800dcc0:	4b0e      	ldr	r3, [pc, #56]	; (800dcfc <xMBPortSerialGetByte+0x44>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d107      	bne.n	800dcda <xMBPortSerialGetByte+0x22>
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x00FF);
 800dcca:	4b0c      	ldr	r3, [pc, #48]	; (800dcfc <xMBPortSerialGetByte+0x44>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	701a      	strb	r2, [r3, #0]
 800dcd8:	e009      	b.n	800dcee <xMBPortSerialGetByte+0x36>
    }
    else
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x007F);
 800dcda:	4b08      	ldr	r3, [pc, #32]	; (800dcfc <xMBPortSerialGetByte+0x44>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	701a      	strb	r2, [r3, #0]
    }
    return TRUE;
 800dcee:	2301      	movs	r3, #1
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr
 800dcfc:	20000610 	.word	0x20000610

0800dd00 <vMBPortTimersEnable>:
extern uint16_t counter_Tim6_MB ;
/* ----------------------- Start implementation -----------------------------*/

inline void
vMBPortTimersEnable(  )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
	/*  Включите таймер с таймаутом, переданным xMBPortTimersInit( )  */
	/*  Если baudrate > 19200, то мы должны использовать фиксированные значения таймера usTim1Timerout50us = 1750 us.
	 *  В противном случае usTim1Timerout50us должно быть в 3,5 раза больше времени символа. */
	counter_Tim6_MB=0;
 800dd04:	4b03      	ldr	r3, [pc, #12]	; (800dd14 <vMBPortTimersEnable+0x14>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800dd0a:	4803      	ldr	r0, [pc, #12]	; (800dd18 <vMBPortTimersEnable+0x18>)
 800dd0c:	f7fc f9f8 	bl	800a100 <HAL_TIM_Base_Start_IT>
}
 800dd10:	bf00      	nop
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	2000060e 	.word	0x2000060e
 800dd18:	20012028 	.word	0x20012028

0800dd1c <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim6);
 800dd20:	4803      	ldr	r0, [pc, #12]	; (800dd30 <vMBPortTimersDisable+0x14>)
 800dd22:	f7fc fa65 	bl	800a1f0 <HAL_TIM_Base_Stop_IT>
	counter_Tim6_MB =0;
 800dd26:	4b03      	ldr	r3, [pc, #12]	; (800dd34 <vMBPortTimersDisable+0x18>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	801a      	strh	r2, [r3, #0]
}
 800dd2c:	bf00      	nop
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20012028 	.word	0x20012028
 800dd34:	2000060e 	.word	0x2000060e

0800dd38 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	460b      	mov	r3, r1
 800dd42:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800dd44:	23ff      	movs	r3, #255	; 0xff
 800dd46:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800dd48:	23ff      	movs	r3, #255	; 0xff
 800dd4a:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800dd4c:	e013      	b.n	800dd76 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	1c5a      	adds	r2, r3, #1
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	781a      	ldrb	r2, [r3, #0]
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
 800dd58:	4053      	eors	r3, r2
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800dd5e:	4a0f      	ldr	r2, [pc, #60]	; (800dd9c <usMBCRC16+0x64>)
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	4413      	add	r3, r2
 800dd64:	781a      	ldrb	r2, [r3, #0]
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	4053      	eors	r3, r2
 800dd6a:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800dd6c:	4a0c      	ldr	r2, [pc, #48]	; (800dda0 <usMBCRC16+0x68>)
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	4413      	add	r3, r2
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800dd76:	887b      	ldrh	r3, [r7, #2]
 800dd78:	1e5a      	subs	r2, r3, #1
 800dd7a:	807a      	strh	r2, [r7, #2]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e6      	bne.n	800dd4e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	021b      	lsls	r3, r3, #8
 800dd84:	b21a      	sxth	r2, r3
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
 800dd88:	b21b      	sxth	r3, r3
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	b21b      	sxth	r3, r3
 800dd8e:	b29b      	uxth	r3, r3
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3714      	adds	r7, #20
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr
 800dd9c:	0801516c 	.word	0x0801516c
 800dda0:	0801526c 	.word	0x0801526c

0800dda4 <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]

    eMBErrorCode    eStatus = MB_ENOERR;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800ddb4:	f7f3 fe86 	bl	8001ac4 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800ddb8:	4b19      	ldr	r3, [pc, #100]	; (800de20 <eMBRTUReceive+0x7c>)
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddc2:	d305      	bcc.n	800ddd0 <eMBRTUReceive+0x2c>
 800ddc4:	4b17      	ldr	r3, [pc, #92]	; (800de24 <eMBRTUReceive+0x80>)
 800ddc6:	4a18      	ldr	r2, [pc, #96]	; (800de28 <eMBRTUReceive+0x84>)
 800ddc8:	2163      	movs	r1, #99	; 0x63
 800ddca:	4818      	ldr	r0, [pc, #96]	; (800de2c <eMBRTUReceive+0x88>)
 800ddcc:	f001 f96e 	bl	800f0ac <__assert_func>

    /* Length and CRC check */
    //printf("eMBRTUReceive ucRTUBuf %d %d %d %d %d %d \n", ucRTUBuf[0], ucRTUBuf[1], ucRTUBuf[2], ucRTUBuf[3], ucRTUBuf[4], ucRTUBuf[5]);
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN ) && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800ddd0:	4b13      	ldr	r3, [pc, #76]	; (800de20 <eMBRTUReceive+0x7c>)
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d919      	bls.n	800de0e <eMBRTUReceive+0x6a>
 800ddda:	4b11      	ldr	r3, [pc, #68]	; (800de20 <eMBRTUReceive+0x7c>)
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	4619      	mov	r1, r3
 800dde2:	4813      	ldr	r0, [pc, #76]	; (800de30 <eMBRTUReceive+0x8c>)
 800dde4:	f7ff ffa8 	bl	800dd38 <usMBCRC16>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10f      	bne.n	800de0e <eMBRTUReceive+0x6a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800ddee:	4b10      	ldr	r3, [pc, #64]	; (800de30 <eMBRTUReceive+0x8c>)
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800ddf8:	4b09      	ldr	r3, [pc, #36]	; (800de20 <eMBRTUReceive+0x7c>)
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	3b03      	subs	r3, #3
 800de00:	b29a      	uxth	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	4a0a      	ldr	r2, [pc, #40]	; (800de34 <eMBRTUReceive+0x90>)
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	e001      	b.n	800de12 <eMBRTUReceive+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 800de0e:	2305      	movs	r3, #5
 800de10:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800de12:	f7f3 fe67 	bl	8001ae4 <__critical_exit>
    return eStatus;
 800de16:	7dfb      	ldrb	r3, [r7, #23]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20013376 	.word	0x20013376
 800de24:	0801508c 	.word	0x0801508c
 800de28:	0801536c 	.word	0x0801536c
 800de2c:	080150b4 	.word	0x080150b4
 800de30:	20012370 	.word	0x20012370
 800de34:	20012371 	.word	0x20012371

0800de38 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	4603      	mov	r3, r0
 800de40:	6039      	str	r1, [r7, #0]
 800de42:	71fb      	strb	r3, [r7, #7]
 800de44:	4613      	mov	r3, r2
 800de46:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
     * Проверьте, находится ли приемник все еще в режиме ожидания. В противном случае мы должны были
		замедлить обработку полученного кадра, и мастер отправил другой кадр по сети.
		Мы должны прервать отправку фрейма.
     */
    //printf("eMBRTUSend_eRcvState = %d \n", eRcvState);
    if( eRcvState == STATE_RX_IDLE )
 800de4c:	4b2f      	ldr	r3, [pc, #188]	; (800df0c <eMBRTUSend+0xd4>)
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b01      	cmp	r3, #1
 800de54:	d152      	bne.n	800defc <eMBRTUSend+0xc4>
    {
        /* Первый байт перед Modbus-PDU - это адрес SLAVE. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	3b01      	subs	r3, #1
 800de5a:	4a2d      	ldr	r2, [pc, #180]	; (800df10 <eMBRTUSend+0xd8>)
 800de5c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800de5e:	4b2d      	ldr	r3, [pc, #180]	; (800df14 <eMBRTUSend+0xdc>)
 800de60:	2201      	movs	r2, #1
 800de62:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800de64:	4b2a      	ldr	r3, [pc, #168]	; (800df10 <eMBRTUSend+0xd8>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	79fa      	ldrb	r2, [r7, #7]
 800de6a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800de6c:	4b29      	ldr	r3, [pc, #164]	; (800df14 <eMBRTUSend+0xdc>)
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	b29a      	uxth	r2, r3
 800de72:	88bb      	ldrh	r3, [r7, #4]
 800de74:	4413      	add	r3, r2
 800de76:	b29a      	uxth	r2, r3
 800de78:	4b26      	ldr	r3, [pc, #152]	; (800df14 <eMBRTUSend+0xdc>)
 800de7a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
		usCRC16 = HAL_CRC_Calculate(&hcrc, ( UCHAR * ) pucSndBufferCur, usSndBufferCount);
 800de7c:	4b24      	ldr	r3, [pc, #144]	; (800df10 <eMBRTUSend+0xd8>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a24      	ldr	r2, [pc, #144]	; (800df14 <eMBRTUSend+0xdc>)
 800de82:	8812      	ldrh	r2, [r2, #0]
 800de84:	b292      	uxth	r2, r2
 800de86:	4619      	mov	r1, r3
 800de88:	4823      	ldr	r0, [pc, #140]	; (800df18 <eMBRTUSend+0xe0>)
 800de8a:	f7f8 fba3 	bl	80065d4 <HAL_CRC_Calculate>
 800de8e:	4603      	mov	r3, r0
 800de90:	b29a      	uxth	r2, r3
 800de92:	4b22      	ldr	r3, [pc, #136]	; (800df1c <eMBRTUSend+0xe4>)
 800de94:	801a      	strh	r2, [r3, #0]
				//смотрим сколько натикало -цикл usMBCRC16(85char) длится 28.629мкс (4867 тика)
				//usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );

        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800de96:	4b21      	ldr	r3, [pc, #132]	; (800df1c <eMBRTUSend+0xe4>)
 800de98:	8819      	ldrh	r1, [r3, #0]
 800de9a:	4b1e      	ldr	r3, [pc, #120]	; (800df14 <eMBRTUSend+0xdc>)
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	1c5a      	adds	r2, r3, #1
 800dea2:	b290      	uxth	r0, r2
 800dea4:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <eMBRTUSend+0xdc>)
 800dea6:	8010      	strh	r0, [r2, #0]
 800dea8:	461a      	mov	r2, r3
 800deaa:	b2c9      	uxtb	r1, r1
 800deac:	4b1c      	ldr	r3, [pc, #112]	; (800df20 <eMBRTUSend+0xe8>)
 800deae:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800deb0:	4b1a      	ldr	r3, [pc, #104]	; (800df1c <eMBRTUSend+0xe4>)
 800deb2:	881b      	ldrh	r3, [r3, #0]
 800deb4:	0a1b      	lsrs	r3, r3, #8
 800deb6:	b299      	uxth	r1, r3
 800deb8:	4b16      	ldr	r3, [pc, #88]	; (800df14 <eMBRTUSend+0xdc>)
 800deba:	881b      	ldrh	r3, [r3, #0]
 800debc:	b29b      	uxth	r3, r3
 800debe:	1c5a      	adds	r2, r3, #1
 800dec0:	b290      	uxth	r0, r2
 800dec2:	4a14      	ldr	r2, [pc, #80]	; (800df14 <eMBRTUSend+0xdc>)
 800dec4:	8010      	strh	r0, [r2, #0]
 800dec6:	461a      	mov	r2, r3
 800dec8:	b2c9      	uxtb	r1, r1
 800deca:	4b15      	ldr	r3, [pc, #84]	; (800df20 <eMBRTUSend+0xe8>)
 800decc:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        if( usSndBufferCount != 0 )
 800dece:	4b11      	ldr	r3, [pc, #68]	; (800df14 <eMBRTUSend+0xdc>)
 800ded0:	881b      	ldrh	r3, [r3, #0]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d013      	beq.n	800df00 <eMBRTUSend+0xc8>
        {
        	eSndState = STATE_TX_XMIT;
 800ded8:	4b12      	ldr	r3, [pc, #72]	; (800df24 <eMBRTUSend+0xec>)
 800deda:	2201      	movs	r2, #1
 800dedc:	701a      	strb	r2, [r3, #0]
        	vMBPortSerialEnable( FALSE, TRUE );
 800dede:	2101      	movs	r1, #1
 800dee0:	2000      	movs	r0, #0
 800dee2:	f7ff feb1 	bl	800dc48 <vMBPortSerialEnable>
        	HAL_UART_Transmit_DMA(adr_huart_MB, pucSndBufferCur, usSndBufferCount);
 800dee6:	4b10      	ldr	r3, [pc, #64]	; (800df28 <eMBRTUSend+0xf0>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a09      	ldr	r2, [pc, #36]	; (800df10 <eMBRTUSend+0xd8>)
 800deec:	6811      	ldr	r1, [r2, #0]
 800deee:	4a09      	ldr	r2, [pc, #36]	; (800df14 <eMBRTUSend+0xdc>)
 800def0:	8812      	ldrh	r2, [r2, #0]
 800def2:	b292      	uxth	r2, r2
 800def4:	4618      	mov	r0, r3
 800def6:	f7fd ff81 	bl	800bdfc <HAL_UART_Transmit_DMA>
 800defa:	e001      	b.n	800df00 <eMBRTUSend+0xc8>
        	//printf("_transmit_DMA %d_ \n", usSndBufferCount);
        }
    }
    else
    {
        eStatus = MB_EIO;
 800defc:	2305      	movs	r3, #5
 800defe:	73fb      	strb	r3, [r7, #15]
    }
//    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800df00:	7bfb      	ldrb	r3, [r7, #15]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	200005e8 	.word	0x200005e8
 800df10:	20013370 	.word	0x20013370
 800df14:	20013374 	.word	0x20013374
 800df18:	20000468 	.word	0x20000468
 800df1c:	20013378 	.word	0x20013378
 800df20:	20012370 	.word	0x20012370
 800df24:	200005e9 	.word	0x200005e9
 800df28:	20000610 	.word	0x20000610

0800df2c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800df32:	2300      	movs	r3, #0
 800df34:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800df36:	4b2b      	ldr	r3, [pc, #172]	; (800dfe4 <xMBRTUReceiveFSM+0xb8>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <xMBRTUReceiveFSM+0x20>
 800df40:	4b29      	ldr	r3, [pc, #164]	; (800dfe8 <xMBRTUReceiveFSM+0xbc>)
 800df42:	4a2a      	ldr	r2, [pc, #168]	; (800dfec <xMBRTUReceiveFSM+0xc0>)
 800df44:	21b9      	movs	r1, #185	; 0xb9
 800df46:	482a      	ldr	r0, [pc, #168]	; (800dff0 <xMBRTUReceiveFSM+0xc4>)
 800df48:	f001 f8b0 	bl	800f0ac <__assert_func>

    /* Всегда читайте  character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800df4c:	1dbb      	adds	r3, r7, #6
 800df4e:	4618      	mov	r0, r3
 800df50:	f7ff feb2 	bl	800dcb8 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800df54:	4b27      	ldr	r3, [pc, #156]	; (800dff4 <xMBRTUReceiveFSM+0xc8>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d83c      	bhi.n	800dfd8 <xMBRTUReceiveFSM+0xac>
 800df5e:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <xMBRTUReceiveFSM+0x38>)
 800df60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df64:	0800df75 	.word	0x0800df75
 800df68:	0800df81 	.word	0x0800df81
 800df6c:	0800dfa9 	.word	0x0800dfa9
 800df70:	0800df7b 	.word	0x0800df7b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800df74:	f7ff fec4 	bl	800dd00 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_INIT\n");
        break;
 800df78:	e02e      	b.n	800dfd8 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800df7a:	f7ff fec1 	bl	800dd00 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        break;
 800df7e:	e02b      	b.n	800dfd8 <xMBRTUReceiveFSM+0xac>
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
    	//printf("xMBRTUReceiveFSM eRcvState =STATE_RX_IDLE\n");
        usRcvBufferPos = 0;
 800df80:	4b1d      	ldr	r3, [pc, #116]	; (800dff8 <xMBRTUReceiveFSM+0xcc>)
 800df82:	2200      	movs	r2, #0
 800df84:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800df86:	4b1c      	ldr	r3, [pc, #112]	; (800dff8 <xMBRTUReceiveFSM+0xcc>)
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	b291      	uxth	r1, r2
 800df90:	4a19      	ldr	r2, [pc, #100]	; (800dff8 <xMBRTUReceiveFSM+0xcc>)
 800df92:	8011      	strh	r1, [r2, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	79b9      	ldrb	r1, [r7, #6]
 800df98:	4b18      	ldr	r3, [pc, #96]	; (800dffc <xMBRTUReceiveFSM+0xd0>)
 800df9a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800df9c:	4b15      	ldr	r3, [pc, #84]	; (800dff4 <xMBRTUReceiveFSM+0xc8>)
 800df9e:	2202      	movs	r2, #2
 800dfa0:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800dfa2:	f7ff fead 	bl	800dd00 <vMBPortTimersEnable>
        break;
 800dfa6:	e017      	b.n	800dfd8 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800dfa8:	4b13      	ldr	r3, [pc, #76]	; (800dff8 <xMBRTUReceiveFSM+0xcc>)
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfb2:	d20b      	bcs.n	800dfcc <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800dfb4:	4b10      	ldr	r3, [pc, #64]	; (800dff8 <xMBRTUReceiveFSM+0xcc>)
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	1c5a      	adds	r2, r3, #1
 800dfbc:	b291      	uxth	r1, r2
 800dfbe:	4a0e      	ldr	r2, [pc, #56]	; (800dff8 <xMBRTUReceiveFSM+0xcc>)
 800dfc0:	8011      	strh	r1, [r2, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	79b9      	ldrb	r1, [r7, #6]
 800dfc6:	4b0d      	ldr	r3, [pc, #52]	; (800dffc <xMBRTUReceiveFSM+0xd0>)
 800dfc8:	5499      	strb	r1, [r3, r2]
 800dfca:	e002      	b.n	800dfd2 <xMBRTUReceiveFSM+0xa6>
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_RCV\n");
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800dfcc:	4b09      	ldr	r3, [pc, #36]	; (800dff4 <xMBRTUReceiveFSM+0xc8>)
 800dfce:	2203      	movs	r2, #3
 800dfd0:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        }
        vMBPortTimersEnable(  );
 800dfd2:	f7ff fe95 	bl	800dd00 <vMBPortTimersEnable>
        break;
 800dfd6:	bf00      	nop
    }
    // printf("xMBRTUReceiveFSM eRcvState_OUT %d \n", eRcvState);
    return xTaskNeedSwitch;
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	200005e9 	.word	0x200005e9
 800dfe8:	080150d4 	.word	0x080150d4
 800dfec:	0801537c 	.word	0x0801537c
 800dff0:	080150b4 	.word	0x080150b4
 800dff4:	200005e8 	.word	0x200005e8
 800dff8:	20013376 	.word	0x20013376
 800dffc:	20012370 	.word	0x20012370

0800e000 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e006:	2300      	movs	r3, #0
 800e008:	71fb      	strb	r3, [r7, #7]

    // assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 800e00a:	4b0f      	ldr	r3, [pc, #60]	; (800e048 <xMBRTUTransmitFSM+0x48>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <xMBRTUTransmitFSM+0x1a>
 800e014:	2b01      	cmp	r3, #1
 800e016:	d005      	beq.n	800e024 <xMBRTUTransmitFSM+0x24>
 800e018:	e011      	b.n	800e03e <xMBRTUTransmitFSM+0x3e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800e01a:	2100      	movs	r1, #0
 800e01c:	2001      	movs	r0, #1
 800e01e:	f7ff fe13 	bl	800dc48 <vMBPortSerialEnable>
        //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e022:	e00c      	b.n	800e03e <xMBRTUTransmitFSM+0x3e>

    case STATE_TX_XMIT:
        /* проверьте, закончили ли мы. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800e024:	2003      	movs	r0, #3
 800e026:	f7ff fddb 	bl	800dbe0 <xMBPortEventPost>
 800e02a:	4603      	mov	r3, r0
 800e02c:	71fb      	strb	r3, [r7, #7]
            /* Отключите передатчик.
             * Это предотвращает еще одно прерывание пустого буфера передачи.*/
            vMBPortSerialEnable( TRUE, FALSE );
 800e02e:	2100      	movs	r1, #0
 800e030:	2001      	movs	r0, #1
 800e032:	f7ff fe09 	bl	800dc48 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800e036:	4b04      	ldr	r3, [pc, #16]	; (800e048 <xMBRTUTransmitFSM+0x48>)
 800e038:	2200      	movs	r2, #0
 800e03a:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e03c:	bf00      	nop
    }

    return xNeedPoll;
 800e03e:	79fb      	ldrb	r3, [r7, #7]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	200005e9 	.word	0x200005e9

0800e04c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )  // вызывается только по 35 событию преполнения TIM6
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800e056:	4b1d      	ldr	r3, [pc, #116]	; (800e0cc <xMBRTUTimerT35Expired+0x80>)
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d817      	bhi.n	800e090 <xMBRTUTimerT35Expired+0x44>
 800e060:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <xMBRTUTimerT35Expired+0x1c>)
 800e062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e066:	bf00      	nop
 800e068:	0800e079 	.word	0x0800e079
 800e06c:	0800e0b7 	.word	0x0800e0b7
 800e070:	0800e085 	.word	0x0800e085
 800e074:	0800e0b7 	.word	0x0800e0b7
    {
        /* Timer t35 expired. Startup phase is finished. Таймер t35 истек. Этап запуска завершен.*/
    case STATE_RX_INIT:   // приемник в режиме инициализации
        xNeedPoll = xMBPortEventPost( EV_READY );
 800e078:	2000      	movs	r0, #0
 800e07a:	f7ff fdb1 	bl	800dbe0 <xMBPortEventPost>
 800e07e:	4603      	mov	r3, r0
 800e080:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_INIT \n");
        break;
 800e082:	e019      	b.n	800e0b8 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that a new frame was received.
         *  Был получен кадр, и срок действия t35 истек. Уведомите слушателя о том, что был получен новый кадр.*/
    case STATE_RX_RCV:    // приемник в режиме приема
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800e084:	2001      	movs	r0, #1
 800e086:	f7ff fdab 	bl	800dbe0 <xMBPortEventPost>
 800e08a:	4603      	mov	r3, r0
 800e08c:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_RCV, _xNeedPoll=%d \n", xNeedPoll);
        break;
 800e08e:	e013      	b.n	800e0b8 <xMBRTUTimerT35Expired+0x6c>
    	//printf("xMBRTUTimerT35Expired eRcvState=_RX_IDLE \n");
        break;

        /* Function called in an illegal state. Функция вызывается в illegal состоянии. */
    default:
    	if ( ( eRcvState == STATE_RX_INIT ) ||  ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) )
 800e090:	4b0e      	ldr	r3, [pc, #56]	; (800e0cc <xMBRTUTimerT35Expired+0x80>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	b2db      	uxtb	r3, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d009      	beq.n	800e0ae <xMBRTUTimerT35Expired+0x62>
 800e09a:	4b0c      	ldr	r3, [pc, #48]	; (800e0cc <xMBRTUTimerT35Expired+0x80>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d004      	beq.n	800e0ae <xMBRTUTimerT35Expired+0x62>
 800e0a4:	4b09      	ldr	r3, [pc, #36]	; (800e0cc <xMBRTUTimerT35Expired+0x80>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d104      	bne.n	800e0b8 <xMBRTUTimerT35Expired+0x6c>
    	{
    		printf("xMBRTUTimerT35Expired  Function called in an illegal state \n");
 800e0ae:	4808      	ldr	r0, [pc, #32]	; (800e0d0 <xMBRTUTimerT35Expired+0x84>)
 800e0b0:	f002 f8ae 	bl	8010210 <puts>
 800e0b4:	e000      	b.n	800e0b8 <xMBRTUTimerT35Expired+0x6c>
        break;
 800e0b6:	bf00      	nop
    	}
    }

    vMBPortTimersDisable(  );
 800e0b8:	f7ff fe30 	bl	800dd1c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE; // всегда, при каждом срабатывании TIM6 статус приемника переводится в это состояние
 800e0bc:	4b03      	ldr	r3, [pc, #12]	; (800e0cc <xMBRTUTimerT35Expired+0x80>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	200005e8 	.word	0x200005e8
 800e0d0:	080150f0 	.word	0x080150f0

0800e0d4 <arm_cfft_radix8by2_f32>:
 800e0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d8:	ed2d 8b08 	vpush	{d8-d11}
 800e0dc:	4607      	mov	r7, r0
 800e0de:	4608      	mov	r0, r1
 800e0e0:	f8b7 c000 	ldrh.w	ip, [r7]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e0ea:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e0ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e0f2:	f000 80b0 	beq.w	800e256 <arm_cfft_radix8by2_f32+0x182>
 800e0f6:	008c      	lsls	r4, r1, #2
 800e0f8:	3410      	adds	r4, #16
 800e0fa:	f100 0310 	add.w	r3, r0, #16
 800e0fe:	1906      	adds	r6, r0, r4
 800e100:	3210      	adds	r2, #16
 800e102:	4444      	add	r4, r8
 800e104:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800e108:	f108 0510 	add.w	r5, r8, #16
 800e10c:	ed15 2a04 	vldr	s4, [r5, #-16]
 800e110:	ed55 2a03 	vldr	s5, [r5, #-12]
 800e114:	ed54 4a04 	vldr	s9, [r4, #-16]
 800e118:	ed14 4a03 	vldr	s8, [r4, #-12]
 800e11c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800e120:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e124:	ed53 3a04 	vldr	s7, [r3, #-16]
 800e128:	ed15 0a02 	vldr	s0, [r5, #-8]
 800e12c:	ed55 0a01 	vldr	s1, [r5, #-4]
 800e130:	ed56 6a04 	vldr	s13, [r6, #-16]
 800e134:	ed16 3a03 	vldr	s6, [r6, #-12]
 800e138:	ed13 7a03 	vldr	s14, [r3, #-12]
 800e13c:	ed13 5a02 	vldr	s10, [r3, #-8]
 800e140:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e144:	ed16 1a02 	vldr	s2, [r6, #-8]
 800e148:	ed56 1a01 	vldr	s3, [r6, #-4]
 800e14c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800e150:	ee37 ba22 	vadd.f32	s22, s14, s5
 800e154:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800e158:	ee33 9a04 	vadd.f32	s18, s6, s8
 800e15c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800e160:	ee75 aa00 	vadd.f32	s21, s10, s0
 800e164:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800e168:	ee71 8a06 	vadd.f32	s17, s2, s12
 800e16c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800e170:	ed03 ba03 	vstr	s22, [r3, #-12]
 800e174:	ed43 aa02 	vstr	s21, [r3, #-8]
 800e178:	ed03 aa01 	vstr	s20, [r3, #-4]
 800e17c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e180:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e184:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e188:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e18c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800e190:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800e194:	ee34 4a43 	vsub.f32	s8, s8, s6
 800e198:	ed52 6a03 	vldr	s13, [r2, #-12]
 800e19c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800e1a0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e1a4:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e1a8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800e1ac:	ee23 2a83 	vmul.f32	s4, s7, s6
 800e1b0:	ee64 4a83 	vmul.f32	s9, s9, s6
 800e1b4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e1b8:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e1bc:	ee64 6a26 	vmul.f32	s13, s8, s13
 800e1c0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e1c4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800e1c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e1cc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800e1d0:	ee32 3a08 	vadd.f32	s6, s4, s16
 800e1d4:	ed05 7a03 	vstr	s14, [r5, #-12]
 800e1d8:	ed05 3a04 	vstr	s6, [r5, #-16]
 800e1dc:	ed04 4a04 	vstr	s8, [r4, #-16]
 800e1e0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e1e4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e1e8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800e1ec:	ee35 5a40 	vsub.f32	s10, s10, s0
 800e1f0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800e1f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e1f8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e1fc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e200:	ee66 4a87 	vmul.f32	s9, s13, s14
 800e204:	ee25 4a25 	vmul.f32	s8, s10, s11
 800e208:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e20c:	ee25 5a07 	vmul.f32	s10, s10, s14
 800e210:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e214:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e218:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e21c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e220:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e224:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800e228:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e22c:	3310      	adds	r3, #16
 800e22e:	4563      	cmp	r3, ip
 800e230:	ed45 5a02 	vstr	s11, [r5, #-8]
 800e234:	f106 0610 	add.w	r6, r6, #16
 800e238:	ed45 7a01 	vstr	s15, [r5, #-4]
 800e23c:	f102 0210 	add.w	r2, r2, #16
 800e240:	ed04 6a02 	vstr	s12, [r4, #-8]
 800e244:	ed04 7a01 	vstr	s14, [r4, #-4]
 800e248:	f105 0510 	add.w	r5, r5, #16
 800e24c:	f104 0410 	add.w	r4, r4, #16
 800e250:	f47f af5c 	bne.w	800e10c <arm_cfft_radix8by2_f32+0x38>
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	b28c      	uxth	r4, r1
 800e258:	4621      	mov	r1, r4
 800e25a:	2302      	movs	r3, #2
 800e25c:	f000 fc66 	bl	800eb2c <arm_radix8_butterfly_f32>
 800e260:	ecbd 8b08 	vpop	{d8-d11}
 800e264:	4621      	mov	r1, r4
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	4640      	mov	r0, r8
 800e26a:	2302      	movs	r3, #2
 800e26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e270:	f000 bc5c 	b.w	800eb2c <arm_radix8_butterfly_f32>

0800e274 <arm_cfft_radix8by4_f32>:
 800e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	ed2d 8b0a 	vpush	{d8-d12}
 800e27c:	b08d      	sub	sp, #52	; 0x34
 800e27e:	460d      	mov	r5, r1
 800e280:	910b      	str	r1, [sp, #44]	; 0x2c
 800e282:	8801      	ldrh	r1, [r0, #0]
 800e284:	6842      	ldr	r2, [r0, #4]
 800e286:	900a      	str	r0, [sp, #40]	; 0x28
 800e288:	0849      	lsrs	r1, r1, #1
 800e28a:	008b      	lsls	r3, r1, #2
 800e28c:	18ee      	adds	r6, r5, r3
 800e28e:	18f0      	adds	r0, r6, r3
 800e290:	edd0 5a00 	vldr	s11, [r0]
 800e294:	edd5 7a00 	vldr	s15, [r5]
 800e298:	ed96 7a00 	vldr	s14, [r6]
 800e29c:	edd0 3a01 	vldr	s7, [r0, #4]
 800e2a0:	ed96 4a01 	vldr	s8, [r6, #4]
 800e2a4:	ed95 5a01 	vldr	s10, [r5, #4]
 800e2a8:	9008      	str	r0, [sp, #32]
 800e2aa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800e2ae:	18c7      	adds	r7, r0, r3
 800e2b0:	edd7 4a00 	vldr	s9, [r7]
 800e2b4:	ed97 3a01 	vldr	s6, [r7, #4]
 800e2b8:	9701      	str	r7, [sp, #4]
 800e2ba:	ee77 6a06 	vadd.f32	s13, s14, s12
 800e2be:	462c      	mov	r4, r5
 800e2c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e2c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e2c8:	ee16 ca90 	vmov	ip, s13
 800e2cc:	f844 cb08 	str.w	ip, [r4], #8
 800e2d0:	ee75 6a23 	vadd.f32	s13, s10, s7
 800e2d4:	edd6 5a01 	vldr	s11, [r6, #4]
 800e2d8:	edd7 2a01 	vldr	s5, [r7, #4]
 800e2dc:	9404      	str	r4, [sp, #16]
 800e2de:	ee35 5a63 	vsub.f32	s10, s10, s7
 800e2e2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800e2e6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e2ea:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800e2ee:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e2f2:	0849      	lsrs	r1, r1, #1
 800e2f4:	f102 0e08 	add.w	lr, r2, #8
 800e2f8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800e2fc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e300:	9109      	str	r1, [sp, #36]	; 0x24
 800e302:	ee35 4a47 	vsub.f32	s8, s10, s14
 800e306:	f1a1 0902 	sub.w	r9, r1, #2
 800e30a:	f8cd e00c 	str.w	lr, [sp, #12]
 800e30e:	4631      	mov	r1, r6
 800e310:	ee13 ea90 	vmov	lr, s7
 800e314:	ee36 6a64 	vsub.f32	s12, s12, s9
 800e318:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800e31c:	4604      	mov	r4, r0
 800e31e:	edc5 5a01 	vstr	s11, [r5, #4]
 800e322:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e326:	f841 eb08 	str.w	lr, [r1], #8
 800e32a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800e32e:	ee16 ea10 	vmov	lr, s12
 800e332:	ed86 5a01 	vstr	s10, [r6, #4]
 800e336:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e33a:	f844 eb08 	str.w	lr, [r4], #8
 800e33e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e342:	edc0 6a01 	vstr	s13, [r0, #4]
 800e346:	9405      	str	r4, [sp, #20]
 800e348:	4604      	mov	r4, r0
 800e34a:	ee17 0a90 	vmov	r0, s15
 800e34e:	9106      	str	r1, [sp, #24]
 800e350:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e354:	f102 0110 	add.w	r1, r2, #16
 800e358:	46bc      	mov	ip, r7
 800e35a:	9100      	str	r1, [sp, #0]
 800e35c:	f847 0b08 	str.w	r0, [r7], #8
 800e360:	f102 0118 	add.w	r1, r2, #24
 800e364:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800e368:	9102      	str	r1, [sp, #8]
 800e36a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e36e:	9007      	str	r0, [sp, #28]
 800e370:	f000 8134 	beq.w	800e5dc <arm_cfft_radix8by4_f32+0x368>
 800e374:	f102 0920 	add.w	r9, r2, #32
 800e378:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800e37c:	9a01      	ldr	r2, [sp, #4]
 800e37e:	f8dd a000 	ldr.w	sl, [sp]
 800e382:	3b0c      	subs	r3, #12
 800e384:	4683      	mov	fp, r0
 800e386:	4463      	add	r3, ip
 800e388:	f105 0e10 	add.w	lr, r5, #16
 800e38c:	f1a4 010c 	sub.w	r1, r4, #12
 800e390:	f104 0510 	add.w	r5, r4, #16
 800e394:	f1a6 0c0c 	sub.w	ip, r6, #12
 800e398:	f1a2 040c 	sub.w	r4, r2, #12
 800e39c:	f106 0010 	add.w	r0, r6, #16
 800e3a0:	3210      	adds	r2, #16
 800e3a2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800e3a6:	ed55 5a02 	vldr	s11, [r5, #-8]
 800e3aa:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e3ae:	ed52 1a02 	vldr	s3, [r2, #-8]
 800e3b2:	ed55 6a01 	vldr	s13, [r5, #-4]
 800e3b6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800e3ba:	ed12 1a01 	vldr	s2, [r2, #-4]
 800e3be:	ed10 8a01 	vldr	s16, [r0, #-4]
 800e3c2:	ee35 4a25 	vadd.f32	s8, s10, s11
 800e3c6:	ee30 6a26 	vadd.f32	s12, s0, s13
 800e3ca:	ee37 7a84 	vadd.f32	s14, s15, s8
 800e3ce:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e3d2:	ee37 7a21 	vadd.f32	s14, s14, s3
 800e3d6:	ee75 5a65 	vsub.f32	s11, s10, s11
 800e3da:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800e3de:	ed10 7a01 	vldr	s14, [r0, #-4]
 800e3e2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800e3e6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800e3ea:	ee78 aa25 	vadd.f32	s21, s16, s11
 800e3ee:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e3f2:	ee70 3a67 	vsub.f32	s7, s0, s15
 800e3f6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800e3fa:	ed94 7a02 	vldr	s14, [r4, #8]
 800e3fe:	ed9c 2a02 	vldr	s4, [ip, #8]
 800e402:	ed91 ba02 	vldr	s22, [r1, #8]
 800e406:	edd3 9a02 	vldr	s19, [r3, #8]
 800e40a:	edd4 2a01 	vldr	s5, [r4, #4]
 800e40e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800e412:	ed93 5a01 	vldr	s10, [r3, #4]
 800e416:	edd1 0a01 	vldr	s1, [r1, #4]
 800e41a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800e41e:	ee32 2a47 	vsub.f32	s4, s4, s14
 800e422:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800e426:	ee79 4a22 	vadd.f32	s9, s18, s5
 800e42a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800e42e:	ee79 2a62 	vsub.f32	s5, s18, s5
 800e432:	ed8c 7a02 	vstr	s14, [ip, #8]
 800e436:	ed91 7a01 	vldr	s14, [r1, #4]
 800e43a:	edd3 8a01 	vldr	s17, [r3, #4]
 800e43e:	ee34 7a87 	vadd.f32	s14, s9, s14
 800e442:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800e446:	ee37 7a28 	vadd.f32	s14, s14, s17
 800e44a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800e44e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e452:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800e456:	ed1a aa02 	vldr	s20, [sl, #-8]
 800e45a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800e45e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800e462:	ee7a aac1 	vsub.f32	s21, s21, s2
 800e466:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e46a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800e46e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800e472:	ee6a aa87 	vmul.f32	s21, s21, s14
 800e476:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800e47a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800e47e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800e482:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800e486:	ee68 8a87 	vmul.f32	s17, s17, s14
 800e48a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800e48e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e492:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800e496:	ee3b aaca 	vsub.f32	s20, s23, s20
 800e49a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800e49e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800e4a2:	ee36 6a48 	vsub.f32	s12, s12, s16
 800e4a6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800e4aa:	ed00 7a02 	vstr	s14, [r0, #-8]
 800e4ae:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e4b2:	edc1 8a01 	vstr	s17, [r1, #4]
 800e4b6:	ed81 aa02 	vstr	s20, [r1, #8]
 800e4ba:	ed59 3a04 	vldr	s7, [r9, #-16]
 800e4be:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800e4c2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800e4c6:	ed59 6a03 	vldr	s13, [r9, #-12]
 800e4ca:	ee34 4a61 	vsub.f32	s8, s8, s3
 800e4ce:	ee36 6a41 	vsub.f32	s12, s12, s2
 800e4d2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800e4d6:	ee66 9a26 	vmul.f32	s19, s12, s13
 800e4da:	ee24 9a23 	vmul.f32	s18, s8, s7
 800e4de:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e4e2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800e4e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e4ea:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800e4ee:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800e4f2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e4f6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e4fa:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800e4fe:	ee79 3a29 	vadd.f32	s7, s18, s19
 800e502:	ee75 6a60 	vsub.f32	s13, s10, s1
 800e506:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800e50a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e50e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800e512:	ed05 6a01 	vstr	s12, [r5, #-4]
 800e516:	ed84 7a01 	vstr	s14, [r4, #4]
 800e51a:	ed84 4a02 	vstr	s8, [r4, #8]
 800e51e:	ee35 6a81 	vadd.f32	s12, s11, s2
 800e522:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800e526:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800e52a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800e52e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e532:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800e536:	ee67 2a26 	vmul.f32	s5, s14, s13
 800e53a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e53e:	ee26 5a25 	vmul.f32	s10, s12, s11
 800e542:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e546:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e54a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e54e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800e552:	ee23 3a25 	vmul.f32	s6, s6, s11
 800e556:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e55a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800e55e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800e562:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e566:	f1bb 0b01 	subs.w	fp, fp, #1
 800e56a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800e56e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e572:	f10e 0e08 	add.w	lr, lr, #8
 800e576:	ed83 3a02 	vstr	s6, [r3, #8]
 800e57a:	ed83 7a01 	vstr	s14, [r3, #4]
 800e57e:	f1ac 0c08 	sub.w	ip, ip, #8
 800e582:	f10a 0a08 	add.w	sl, sl, #8
 800e586:	f100 0008 	add.w	r0, r0, #8
 800e58a:	f1a1 0108 	sub.w	r1, r1, #8
 800e58e:	f109 0910 	add.w	r9, r9, #16
 800e592:	f105 0508 	add.w	r5, r5, #8
 800e596:	f1a4 0408 	sub.w	r4, r4, #8
 800e59a:	f108 0818 	add.w	r8, r8, #24
 800e59e:	f102 0208 	add.w	r2, r2, #8
 800e5a2:	f1a3 0308 	sub.w	r3, r3, #8
 800e5a6:	f47f aefc 	bne.w	800e3a2 <arm_cfft_radix8by4_f32+0x12e>
 800e5aa:	9907      	ldr	r1, [sp, #28]
 800e5ac:	9800      	ldr	r0, [sp, #0]
 800e5ae:	00cb      	lsls	r3, r1, #3
 800e5b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800e5b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800e5b8:	9100      	str	r1, [sp, #0]
 800e5ba:	9904      	ldr	r1, [sp, #16]
 800e5bc:	4419      	add	r1, r3
 800e5be:	9104      	str	r1, [sp, #16]
 800e5c0:	9903      	ldr	r1, [sp, #12]
 800e5c2:	4419      	add	r1, r3
 800e5c4:	9103      	str	r1, [sp, #12]
 800e5c6:	9906      	ldr	r1, [sp, #24]
 800e5c8:	4419      	add	r1, r3
 800e5ca:	9106      	str	r1, [sp, #24]
 800e5cc:	9905      	ldr	r1, [sp, #20]
 800e5ce:	441f      	add	r7, r3
 800e5d0:	4419      	add	r1, r3
 800e5d2:	9b02      	ldr	r3, [sp, #8]
 800e5d4:	9105      	str	r1, [sp, #20]
 800e5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5da:	9302      	str	r3, [sp, #8]
 800e5dc:	9904      	ldr	r1, [sp, #16]
 800e5de:	9805      	ldr	r0, [sp, #20]
 800e5e0:	ed91 4a00 	vldr	s8, [r1]
 800e5e4:	edd0 6a00 	vldr	s13, [r0]
 800e5e8:	9b06      	ldr	r3, [sp, #24]
 800e5ea:	ed97 3a00 	vldr	s6, [r7]
 800e5ee:	edd3 7a00 	vldr	s15, [r3]
 800e5f2:	edd0 4a01 	vldr	s9, [r0, #4]
 800e5f6:	edd1 3a01 	vldr	s7, [r1, #4]
 800e5fa:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5fe:	ed93 7a01 	vldr	s14, [r3, #4]
 800e602:	9a03      	ldr	r2, [sp, #12]
 800e604:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800e608:	ee34 6a26 	vadd.f32	s12, s8, s13
 800e60c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800e610:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e614:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800e618:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e61c:	ee74 6a66 	vsub.f32	s13, s8, s13
 800e620:	ed81 5a00 	vstr	s10, [r1]
 800e624:	ed93 5a01 	vldr	s10, [r3, #4]
 800e628:	edd7 4a01 	vldr	s9, [r7, #4]
 800e62c:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e630:	ee37 4a26 	vadd.f32	s8, s14, s13
 800e634:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e638:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800e63c:	ed81 5a01 	vstr	s10, [r1, #4]
 800e640:	edd2 1a00 	vldr	s3, [r2]
 800e644:	edd2 2a01 	vldr	s5, [r2, #4]
 800e648:	ee34 5a83 	vadd.f32	s10, s9, s6
 800e64c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e650:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e654:	ee64 4a21 	vmul.f32	s9, s8, s3
 800e658:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e65c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e660:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e664:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800e668:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e66c:	edc3 2a00 	vstr	s5, [r3]
 800e670:	ed83 5a01 	vstr	s10, [r3, #4]
 800e674:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800e678:	9b00      	ldr	r3, [sp, #0]
 800e67a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e67e:	ed93 4a01 	vldr	s8, [r3, #4]
 800e682:	ed93 5a00 	vldr	s10, [r3]
 800e686:	9b02      	ldr	r3, [sp, #8]
 800e688:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800e68c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800e690:	ee25 5a85 	vmul.f32	s10, s11, s10
 800e694:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e698:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e69c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e6a0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800e6a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e6a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e6ac:	ed80 6a01 	vstr	s12, [r0, #4]
 800e6b0:	edc0 5a00 	vstr	s11, [r0]
 800e6b4:	edd3 5a01 	vldr	s11, [r3, #4]
 800e6b8:	edd3 6a00 	vldr	s13, [r3]
 800e6bc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e6c0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800e6c4:	ee27 6a26 	vmul.f32	s12, s14, s13
 800e6c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e6cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e6d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e6d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e6d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e6dc:	ed87 7a01 	vstr	s14, [r7, #4]
 800e6e0:	edc7 7a00 	vstr	s15, [r7]
 800e6e4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	686a      	ldr	r2, [r5, #4]
 800e6ec:	2304      	movs	r3, #4
 800e6ee:	f000 fa1d 	bl	800eb2c <arm_radix8_butterfly_f32>
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	686a      	ldr	r2, [r5, #4]
 800e6f8:	2304      	movs	r3, #4
 800e6fa:	f000 fa17 	bl	800eb2c <arm_radix8_butterfly_f32>
 800e6fe:	9808      	ldr	r0, [sp, #32]
 800e700:	686a      	ldr	r2, [r5, #4]
 800e702:	4621      	mov	r1, r4
 800e704:	2304      	movs	r3, #4
 800e706:	f000 fa11 	bl	800eb2c <arm_radix8_butterfly_f32>
 800e70a:	686a      	ldr	r2, [r5, #4]
 800e70c:	9801      	ldr	r0, [sp, #4]
 800e70e:	4621      	mov	r1, r4
 800e710:	2304      	movs	r3, #4
 800e712:	b00d      	add	sp, #52	; 0x34
 800e714:	ecbd 8b0a 	vpop	{d8-d12}
 800e718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	f000 ba06 	b.w	800eb2c <arm_radix8_butterfly_f32>

0800e720 <arm_cfft_f32>:
 800e720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e724:	2a01      	cmp	r2, #1
 800e726:	4606      	mov	r6, r0
 800e728:	4617      	mov	r7, r2
 800e72a:	460c      	mov	r4, r1
 800e72c:	4698      	mov	r8, r3
 800e72e:	8805      	ldrh	r5, [r0, #0]
 800e730:	d056      	beq.n	800e7e0 <arm_cfft_f32+0xc0>
 800e732:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e736:	d063      	beq.n	800e800 <arm_cfft_f32+0xe0>
 800e738:	d916      	bls.n	800e768 <arm_cfft_f32+0x48>
 800e73a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e73e:	d01a      	beq.n	800e776 <arm_cfft_f32+0x56>
 800e740:	d947      	bls.n	800e7d2 <arm_cfft_f32+0xb2>
 800e742:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800e746:	d05b      	beq.n	800e800 <arm_cfft_f32+0xe0>
 800e748:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800e74c:	d105      	bne.n	800e75a <arm_cfft_f32+0x3a>
 800e74e:	2301      	movs	r3, #1
 800e750:	6872      	ldr	r2, [r6, #4]
 800e752:	4629      	mov	r1, r5
 800e754:	4620      	mov	r0, r4
 800e756:	f000 f9e9 	bl	800eb2c <arm_radix8_butterfly_f32>
 800e75a:	f1b8 0f00 	cmp.w	r8, #0
 800e75e:	d111      	bne.n	800e784 <arm_cfft_f32+0x64>
 800e760:	2f01      	cmp	r7, #1
 800e762:	d016      	beq.n	800e792 <arm_cfft_f32+0x72>
 800e764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e768:	2d20      	cmp	r5, #32
 800e76a:	d049      	beq.n	800e800 <arm_cfft_f32+0xe0>
 800e76c:	d935      	bls.n	800e7da <arm_cfft_f32+0xba>
 800e76e:	2d40      	cmp	r5, #64	; 0x40
 800e770:	d0ed      	beq.n	800e74e <arm_cfft_f32+0x2e>
 800e772:	2d80      	cmp	r5, #128	; 0x80
 800e774:	d1f1      	bne.n	800e75a <arm_cfft_f32+0x3a>
 800e776:	4621      	mov	r1, r4
 800e778:	4630      	mov	r0, r6
 800e77a:	f7ff fcab 	bl	800e0d4 <arm_cfft_radix8by2_f32>
 800e77e:	f1b8 0f00 	cmp.w	r8, #0
 800e782:	d0ed      	beq.n	800e760 <arm_cfft_f32+0x40>
 800e784:	68b2      	ldr	r2, [r6, #8]
 800e786:	89b1      	ldrh	r1, [r6, #12]
 800e788:	4620      	mov	r0, r4
 800e78a:	f000 f841 	bl	800e810 <arm_bitreversal_32>
 800e78e:	2f01      	cmp	r7, #1
 800e790:	d1e8      	bne.n	800e764 <arm_cfft_f32+0x44>
 800e792:	ee07 5a90 	vmov	s15, r5
 800e796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e79a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e79e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e7a2:	2d00      	cmp	r5, #0
 800e7a4:	d0de      	beq.n	800e764 <arm_cfft_f32+0x44>
 800e7a6:	f104 0108 	add.w	r1, r4, #8
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	429d      	cmp	r5, r3
 800e7b0:	f101 0108 	add.w	r1, r1, #8
 800e7b4:	ed11 7a04 	vldr	s14, [r1, #-16]
 800e7b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800e7bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e7c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e7c4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800e7c8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800e7cc:	d1ee      	bne.n	800e7ac <arm_cfft_f32+0x8c>
 800e7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800e7d6:	d0ba      	beq.n	800e74e <arm_cfft_f32+0x2e>
 800e7d8:	e7bf      	b.n	800e75a <arm_cfft_f32+0x3a>
 800e7da:	2d10      	cmp	r5, #16
 800e7dc:	d0cb      	beq.n	800e776 <arm_cfft_f32+0x56>
 800e7de:	e7bc      	b.n	800e75a <arm_cfft_f32+0x3a>
 800e7e0:	b19d      	cbz	r5, 800e80a <arm_cfft_f32+0xea>
 800e7e2:	f101 030c 	add.w	r3, r1, #12
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800e7ec:	3201      	adds	r2, #1
 800e7ee:	eef1 7a67 	vneg.f32	s15, s15
 800e7f2:	4295      	cmp	r5, r2
 800e7f4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800e7f8:	f103 0308 	add.w	r3, r3, #8
 800e7fc:	d1f4      	bne.n	800e7e8 <arm_cfft_f32+0xc8>
 800e7fe:	e798      	b.n	800e732 <arm_cfft_f32+0x12>
 800e800:	4621      	mov	r1, r4
 800e802:	4630      	mov	r0, r6
 800e804:	f7ff fd36 	bl	800e274 <arm_cfft_radix8by4_f32>
 800e808:	e7a7      	b.n	800e75a <arm_cfft_f32+0x3a>
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0aa      	beq.n	800e764 <arm_cfft_f32+0x44>
 800e80e:	e7b9      	b.n	800e784 <arm_cfft_f32+0x64>

0800e810 <arm_bitreversal_32>:
 800e810:	b1e9      	cbz	r1, 800e84e <arm_bitreversal_32+0x3e>
 800e812:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e814:	2500      	movs	r5, #0
 800e816:	f102 0e02 	add.w	lr, r2, #2
 800e81a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800e81e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800e822:	08a4      	lsrs	r4, r4, #2
 800e824:	089b      	lsrs	r3, r3, #2
 800e826:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800e82a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800e82e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800e832:	00a6      	lsls	r6, r4, #2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800e83a:	3304      	adds	r3, #4
 800e83c:	1d34      	adds	r4, r6, #4
 800e83e:	3502      	adds	r5, #2
 800e840:	58c6      	ldr	r6, [r0, r3]
 800e842:	5907      	ldr	r7, [r0, r4]
 800e844:	50c7      	str	r7, [r0, r3]
 800e846:	428d      	cmp	r5, r1
 800e848:	5106      	str	r6, [r0, r4]
 800e84a:	d3e6      	bcc.n	800e81a <arm_bitreversal_32+0xa>
 800e84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e84e:	4770      	bx	lr

0800e850 <arm_cmplx_mag_f32>:
 800e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e854:	ed2d 8b02 	vpush	{d8}
 800e858:	0897      	lsrs	r7, r2, #2
 800e85a:	b084      	sub	sp, #16
 800e85c:	d077      	beq.n	800e94e <arm_cmplx_mag_f32+0xfe>
 800e85e:	f04f 0800 	mov.w	r8, #0
 800e862:	f100 0420 	add.w	r4, r0, #32
 800e866:	f101 0510 	add.w	r5, r1, #16
 800e86a:	463e      	mov	r6, r7
 800e86c:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800e870:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800e874:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e878:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e87c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e880:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e888:	f2c0 80c5 	blt.w	800ea16 <arm_cmplx_mag_f32+0x1c6>
 800e88c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e894:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e898:	f100 80cb 	bmi.w	800ea32 <arm_cmplx_mag_f32+0x1e2>
 800e89c:	ed05 8a04 	vstr	s16, [r5, #-16]
 800e8a0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800e8a4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800e8a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e8ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e8b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8bc:	f2c0 80a8 	blt.w	800ea10 <arm_cmplx_mag_f32+0x1c0>
 800e8c0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e8cc:	f100 80a8 	bmi.w	800ea20 <arm_cmplx_mag_f32+0x1d0>
 800e8d0:	ed05 8a03 	vstr	s16, [r5, #-12]
 800e8d4:	ed14 0a04 	vldr	s0, [r4, #-16]
 800e8d8:	ed54 7a03 	vldr	s15, [r4, #-12]
 800e8dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e8e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e8e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f0:	f2c0 808b 	blt.w	800ea0a <arm_cmplx_mag_f32+0x1ba>
 800e8f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e900:	f100 80a9 	bmi.w	800ea56 <arm_cmplx_mag_f32+0x206>
 800e904:	ed05 8a02 	vstr	s16, [r5, #-8]
 800e908:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e90c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800e910:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e918:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e91c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e924:	db6e      	blt.n	800ea04 <arm_cmplx_mag_f32+0x1b4>
 800e926:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e932:	f100 8087 	bmi.w	800ea44 <arm_cmplx_mag_f32+0x1f4>
 800e936:	ed05 8a01 	vstr	s16, [r5, #-4]
 800e93a:	3e01      	subs	r6, #1
 800e93c:	f104 0420 	add.w	r4, r4, #32
 800e940:	f105 0510 	add.w	r5, r5, #16
 800e944:	d192      	bne.n	800e86c <arm_cmplx_mag_f32+0x1c>
 800e946:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800e94a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800e94e:	f012 0203 	ands.w	r2, r2, #3
 800e952:	d052      	beq.n	800e9fa <arm_cmplx_mag_f32+0x1aa>
 800e954:	ed90 0a00 	vldr	s0, [r0]
 800e958:	edd0 7a01 	vldr	s15, [r0, #4]
 800e95c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e964:	2300      	movs	r3, #0
 800e966:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e96a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e972:	bfb8      	it	lt
 800e974:	600b      	strlt	r3, [r1, #0]
 800e976:	db08      	blt.n	800e98a <arm_cmplx_mag_f32+0x13a>
 800e978:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e980:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e984:	d479      	bmi.n	800ea7a <arm_cmplx_mag_f32+0x22a>
 800e986:	ed81 8a00 	vstr	s16, [r1]
 800e98a:	3a01      	subs	r2, #1
 800e98c:	d035      	beq.n	800e9fa <arm_cmplx_mag_f32+0x1aa>
 800e98e:	ed90 0a02 	vldr	s0, [r0, #8]
 800e992:	edd0 7a03 	vldr	s15, [r0, #12]
 800e996:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e99a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e99e:	2300      	movs	r3, #0
 800e9a0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e9a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ac:	bfb8      	it	lt
 800e9ae:	604b      	strlt	r3, [r1, #4]
 800e9b0:	db08      	blt.n	800e9c4 <arm_cmplx_mag_f32+0x174>
 800e9b2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ba:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e9be:	d453      	bmi.n	800ea68 <arm_cmplx_mag_f32+0x218>
 800e9c0:	ed81 8a01 	vstr	s16, [r1, #4]
 800e9c4:	2a01      	cmp	r2, #1
 800e9c6:	d018      	beq.n	800e9fa <arm_cmplx_mag_f32+0x1aa>
 800e9c8:	ed90 0a04 	vldr	s0, [r0, #16]
 800e9cc:	edd0 7a05 	vldr	s15, [r0, #20]
 800e9d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e9d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e9d8:	2300      	movs	r3, #0
 800e9da:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e9de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e6:	db19      	blt.n	800ea1c <arm_cmplx_mag_f32+0x1cc>
 800e9e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e9f4:	d44a      	bmi.n	800ea8c <arm_cmplx_mag_f32+0x23c>
 800e9f6:	ed81 8a02 	vstr	s16, [r1, #8]
 800e9fa:	b004      	add	sp, #16
 800e9fc:	ecbd 8b02 	vpop	{d8}
 800ea00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea04:	f845 8c04 	str.w	r8, [r5, #-4]
 800ea08:	e797      	b.n	800e93a <arm_cmplx_mag_f32+0xea>
 800ea0a:	f845 8c08 	str.w	r8, [r5, #-8]
 800ea0e:	e77b      	b.n	800e908 <arm_cmplx_mag_f32+0xb8>
 800ea10:	f845 8c0c 	str.w	r8, [r5, #-12]
 800ea14:	e75e      	b.n	800e8d4 <arm_cmplx_mag_f32+0x84>
 800ea16:	f845 8c10 	str.w	r8, [r5, #-16]
 800ea1a:	e741      	b.n	800e8a0 <arm_cmplx_mag_f32+0x50>
 800ea1c:	608b      	str	r3, [r1, #8]
 800ea1e:	e7ec      	b.n	800e9fa <arm_cmplx_mag_f32+0x1aa>
 800ea20:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ea24:	9001      	str	r0, [sp, #4]
 800ea26:	f005 fa07 	bl	8013e38 <sqrtf>
 800ea2a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ea2e:	9801      	ldr	r0, [sp, #4]
 800ea30:	e74e      	b.n	800e8d0 <arm_cmplx_mag_f32+0x80>
 800ea32:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ea36:	9001      	str	r0, [sp, #4]
 800ea38:	f005 f9fe 	bl	8013e38 <sqrtf>
 800ea3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ea40:	9801      	ldr	r0, [sp, #4]
 800ea42:	e72b      	b.n	800e89c <arm_cmplx_mag_f32+0x4c>
 800ea44:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ea48:	9001      	str	r0, [sp, #4]
 800ea4a:	f005 f9f5 	bl	8013e38 <sqrtf>
 800ea4e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ea52:	9801      	ldr	r0, [sp, #4]
 800ea54:	e76f      	b.n	800e936 <arm_cmplx_mag_f32+0xe6>
 800ea56:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ea5a:	9001      	str	r0, [sp, #4]
 800ea5c:	f005 f9ec 	bl	8013e38 <sqrtf>
 800ea60:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ea64:	9801      	ldr	r0, [sp, #4]
 800ea66:	e74d      	b.n	800e904 <arm_cmplx_mag_f32+0xb4>
 800ea68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6c:	9201      	str	r2, [sp, #4]
 800ea6e:	f005 f9e3 	bl	8013e38 <sqrtf>
 800ea72:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ea76:	9903      	ldr	r1, [sp, #12]
 800ea78:	e7a2      	b.n	800e9c0 <arm_cmplx_mag_f32+0x170>
 800ea7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea7e:	9201      	str	r2, [sp, #4]
 800ea80:	f005 f9da 	bl	8013e38 <sqrtf>
 800ea84:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ea88:	9903      	ldr	r1, [sp, #12]
 800ea8a:	e77c      	b.n	800e986 <arm_cmplx_mag_f32+0x136>
 800ea8c:	9101      	str	r1, [sp, #4]
 800ea8e:	f005 f9d3 	bl	8013e38 <sqrtf>
 800ea92:	9901      	ldr	r1, [sp, #4]
 800ea94:	e7af      	b.n	800e9f6 <arm_cmplx_mag_f32+0x1a6>
 800ea96:	bf00      	nop

0800ea98 <arm_cos_f32>:
 800ea98:	eddf 7a21 	vldr	s15, [pc, #132]	; 800eb20 <arm_cos_f32+0x88>
 800ea9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eaa0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800eaa4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eaa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eab4:	d504      	bpl.n	800eac0 <arm_cos_f32+0x28>
 800eab6:	ee17 3a90 	vmov	r3, s15
 800eaba:	3b01      	subs	r3, #1
 800eabc:	ee07 3a90 	vmov	s15, r3
 800eac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eac4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800eb24 <arm_cos_f32+0x8c>
 800eac8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eacc:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ead0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ead4:	ee17 3a90 	vmov	r3, s15
 800ead8:	b29b      	uxth	r3, r3
 800eada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eade:	d21a      	bcs.n	800eb16 <arm_cos_f32+0x7e>
 800eae0:	ee07 3a90 	vmov	s15, r3
 800eae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eae8:	1c59      	adds	r1, r3, #1
 800eaea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eaee:	4a0e      	ldr	r2, [pc, #56]	; (800eb28 <arm_cos_f32+0x90>)
 800eaf0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eaf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eaf8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eafc:	ed93 7a00 	vldr	s14, [r3]
 800eb00:	edd2 6a00 	vldr	s13, [r2]
 800eb04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800eb08:	ee20 0a26 	vmul.f32	s0, s0, s13
 800eb0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb10:	ee37 0a80 	vadd.f32	s0, s15, s0
 800eb14:	4770      	bx	lr
 800eb16:	ee30 0a47 	vsub.f32	s0, s0, s14
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	e7e6      	b.n	800eaee <arm_cos_f32+0x56>
 800eb20:	3e22f983 	.word	0x3e22f983
 800eb24:	44000000 	.word	0x44000000
 800eb28:	0801a620 	.word	0x0801a620

0800eb2c <arm_radix8_butterfly_f32>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	ed2d 8b10 	vpush	{d8-d15}
 800eb34:	b095      	sub	sp, #84	; 0x54
 800eb36:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	ed9f bab9 	vldr	s22, [pc, #740]	; 800ee24 <arm_radix8_butterfly_f32+0x2f8>
 800eb42:	9012      	str	r0, [sp, #72]	; 0x48
 800eb44:	468b      	mov	fp, r1
 800eb46:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb48:	4689      	mov	r9, r1
 800eb4a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800eb4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb50:	960f      	str	r6, [sp, #60]	; 0x3c
 800eb52:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800eb56:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800eb5a:	eb03 0508 	add.w	r5, r3, r8
 800eb5e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800eb62:	eb05 040e 	add.w	r4, r5, lr
 800eb66:	0137      	lsls	r7, r6, #4
 800eb68:	eba6 030a 	sub.w	r3, r6, sl
 800eb6c:	eb04 000e 	add.w	r0, r4, lr
 800eb70:	44b2      	add	sl, r6
 800eb72:	1d3a      	adds	r2, r7, #4
 800eb74:	9702      	str	r7, [sp, #8]
 800eb76:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800eb7a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800eb7e:	ebae 0c06 	sub.w	ip, lr, r6
 800eb82:	9703      	str	r7, [sp, #12]
 800eb84:	eb03 0708 	add.w	r7, r3, r8
 800eb88:	9701      	str	r7, [sp, #4]
 800eb8a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800eb8e:	9706      	str	r7, [sp, #24]
 800eb90:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800eb92:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800eb96:	f10e 0104 	add.w	r1, lr, #4
 800eb9a:	4439      	add	r1, r7
 800eb9c:	443a      	add	r2, r7
 800eb9e:	0137      	lsls	r7, r6, #4
 800eba0:	00f6      	lsls	r6, r6, #3
 800eba2:	9704      	str	r7, [sp, #16]
 800eba4:	9605      	str	r6, [sp, #20]
 800eba6:	9f01      	ldr	r7, [sp, #4]
 800eba8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ebaa:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ebae:	f04f 0c00 	mov.w	ip, #0
 800ebb2:	edd4 6a00 	vldr	s13, [r4]
 800ebb6:	edd7 1a00 	vldr	s3, [r7]
 800ebba:	ed16 aa01 	vldr	s20, [r6, #-4]
 800ebbe:	edd5 5a00 	vldr	s11, [r5]
 800ebc2:	ed52 9a01 	vldr	s19, [r2, #-4]
 800ebc6:	ed90 6a00 	vldr	s12, [r0]
 800ebca:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ebce:	ed93 3a00 	vldr	s6, [r3]
 800ebd2:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ebd6:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ebda:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ebde:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ebe2:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ebe6:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ebea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ebee:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ebf2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ebf6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800ebfa:	ed85 4a00 	vstr	s8, [r5]
 800ebfe:	edd1 6a00 	vldr	s13, [r1]
 800ec02:	ed94 9a01 	vldr	s18, [r4, #4]
 800ec06:	edd3 2a01 	vldr	s5, [r3, #4]
 800ec0a:	edd7 8a01 	vldr	s17, [r7, #4]
 800ec0e:	edd6 0a00 	vldr	s1, [r6]
 800ec12:	edd5 3a01 	vldr	s7, [r5, #4]
 800ec16:	ed90 8a01 	vldr	s16, [r0, #4]
 800ec1a:	ed92 7a00 	vldr	s14, [r2]
 800ec1e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ec22:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800ec26:	ee72 aae8 	vsub.f32	s21, s5, s17
 800ec2a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800ec2e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800ec32:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ec36:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800ec3a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800ec3e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800ec42:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800ec46:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800ec4a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800ec4e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800ec52:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ec56:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800ec5a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800ec5e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ec62:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ec66:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ec6a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ec6e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ec72:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800ec76:	ee33 2a20 	vadd.f32	s4, s6, s1
 800ec7a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ec7e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ec82:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800ec86:	ee77 0a01 	vadd.f32	s1, s14, s2
 800ec8a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800ec8e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800ec92:	ee73 1a84 	vadd.f32	s3, s7, s8
 800ec96:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ec9a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800ec9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eca2:	ee32 8a00 	vadd.f32	s16, s4, s0
 800eca6:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ecaa:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ecae:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ecb2:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ecb6:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800ecba:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800ecbe:	ee34 6a67 	vsub.f32	s12, s8, s15
 800ecc2:	ee75 4a87 	vadd.f32	s9, s11, s14
 800ecc6:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800ecca:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ecce:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ecd2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800ecd6:	44dc      	add	ip, fp
 800ecd8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ecdc:	45e1      	cmp	r9, ip
 800ecde:	ed86 8a00 	vstr	s16, [r6]
 800ece2:	ed85 2a01 	vstr	s4, [r5, #4]
 800ece6:	4456      	add	r6, sl
 800ece8:	ed02 0a01 	vstr	s0, [r2, #-4]
 800ecec:	4455      	add	r5, sl
 800ecee:	edc0 6a00 	vstr	s13, [r0]
 800ecf2:	ed82 1a00 	vstr	s2, [r2]
 800ecf6:	ed80 5a01 	vstr	s10, [r0, #4]
 800ecfa:	4452      	add	r2, sl
 800ecfc:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ed00:	4450      	add	r0, sl
 800ed02:	edc7 2a00 	vstr	s5, [r7]
 800ed06:	edc4 4a00 	vstr	s9, [r4]
 800ed0a:	ed83 7a00 	vstr	s14, [r3]
 800ed0e:	edc1 5a00 	vstr	s11, [r1]
 800ed12:	edc7 3a01 	vstr	s7, [r7, #4]
 800ed16:	4451      	add	r1, sl
 800ed18:	ed84 6a01 	vstr	s12, [r4, #4]
 800ed1c:	4457      	add	r7, sl
 800ed1e:	edc3 7a01 	vstr	s15, [r3, #4]
 800ed22:	4454      	add	r4, sl
 800ed24:	4453      	add	r3, sl
 800ed26:	f63f af44 	bhi.w	800ebb2 <arm_radix8_butterfly_f32+0x86>
 800ed2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed2c:	2b07      	cmp	r3, #7
 800ed2e:	f240 81b7 	bls.w	800f0a0 <arm_radix8_butterfly_f32+0x574>
 800ed32:	9b06      	ldr	r3, [sp, #24]
 800ed34:	9903      	ldr	r1, [sp, #12]
 800ed36:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ed38:	9e05      	ldr	r6, [sp, #20]
 800ed3a:	9a04      	ldr	r2, [sp, #16]
 800ed3c:	f103 0c08 	add.w	ip, r3, #8
 800ed40:	9b02      	ldr	r3, [sp, #8]
 800ed42:	3108      	adds	r1, #8
 800ed44:	f108 0808 	add.w	r8, r8, #8
 800ed48:	1841      	adds	r1, r0, r1
 800ed4a:	3608      	adds	r6, #8
 800ed4c:	330c      	adds	r3, #12
 800ed4e:	4604      	mov	r4, r0
 800ed50:	4444      	add	r4, r8
 800ed52:	18c3      	adds	r3, r0, r3
 800ed54:	9109      	str	r1, [sp, #36]	; 0x24
 800ed56:	1981      	adds	r1, r0, r6
 800ed58:	f10e 0e08 	add.w	lr, lr, #8
 800ed5c:	3208      	adds	r2, #8
 800ed5e:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed60:	9107      	str	r1, [sp, #28]
 800ed62:	4604      	mov	r4, r0
 800ed64:	4601      	mov	r1, r0
 800ed66:	9304      	str	r3, [sp, #16]
 800ed68:	f100 030c 	add.w	r3, r0, #12
 800ed6c:	4474      	add	r4, lr
 800ed6e:	f04f 0801 	mov.w	r8, #1
 800ed72:	1882      	adds	r2, r0, r2
 800ed74:	4461      	add	r1, ip
 800ed76:	9305      	str	r3, [sp, #20]
 800ed78:	464b      	mov	r3, r9
 800ed7a:	940a      	str	r4, [sp, #40]	; 0x28
 800ed7c:	46c1      	mov	r9, r8
 800ed7e:	9208      	str	r2, [sp, #32]
 800ed80:	46d8      	mov	r8, fp
 800ed82:	9106      	str	r1, [sp, #24]
 800ed84:	f04f 0e00 	mov.w	lr, #0
 800ed88:	469b      	mov	fp, r3
 800ed8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed8e:	449e      	add	lr, r3
 800ed90:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800ed94:	441a      	add	r2, r3
 800ed96:	920e      	str	r2, [sp, #56]	; 0x38
 800ed98:	441a      	add	r2, r3
 800ed9a:	18d4      	adds	r4, r2, r3
 800ed9c:	18e5      	adds	r5, r4, r3
 800ed9e:	18ee      	adds	r6, r5, r3
 800eda0:	18f7      	adds	r7, r6, r3
 800eda2:	eb07 0c03 	add.w	ip, r7, r3
 800eda6:	920d      	str	r2, [sp, #52]	; 0x34
 800eda8:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800edac:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800edb0:	910c      	str	r1, [sp, #48]	; 0x30
 800edb2:	4419      	add	r1, r3
 800edb4:	9103      	str	r1, [sp, #12]
 800edb6:	4419      	add	r1, r3
 800edb8:	18ca      	adds	r2, r1, r3
 800edba:	9202      	str	r2, [sp, #8]
 800edbc:	441a      	add	r2, r3
 800edbe:	18d0      	adds	r0, r2, r3
 800edc0:	ed92 ea01 	vldr	s28, [r2, #4]
 800edc4:	9a02      	ldr	r2, [sp, #8]
 800edc6:	edd4 7a00 	vldr	s15, [r4]
 800edca:	edd2 da01 	vldr	s27, [r2, #4]
 800edce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edd0:	ed91 da01 	vldr	s26, [r1, #4]
 800edd4:	ed92 ca01 	vldr	s24, [r2, #4]
 800edd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800edda:	9903      	ldr	r1, [sp, #12]
 800eddc:	edcd 7a03 	vstr	s15, [sp, #12]
 800ede0:	edd2 7a00 	vldr	s15, [r2]
 800ede4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ede6:	edcd 7a02 	vstr	s15, [sp, #8]
 800edea:	edd2 7a00 	vldr	s15, [r2]
 800edee:	edd0 ea01 	vldr	s29, [r0, #4]
 800edf2:	edd1 ca01 	vldr	s25, [r1, #4]
 800edf6:	eddc ba00 	vldr	s23, [ip]
 800edfa:	edd7 aa00 	vldr	s21, [r7]
 800edfe:	ed96 aa00 	vldr	s20, [r6]
 800ee02:	edd5 9a00 	vldr	s19, [r5]
 800ee06:	edcd 7a01 	vstr	s15, [sp, #4]
 800ee0a:	4403      	add	r3, r0
 800ee0c:	ed93 fa01 	vldr	s30, [r3, #4]
 800ee10:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800ee14:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800ee18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ee20:	46cc      	mov	ip, r9
 800ee22:	e001      	b.n	800ee28 <arm_radix8_butterfly_f32+0x2fc>
 800ee24:	3f3504f3 	.word	0x3f3504f3
 800ee28:	ed91 6a00 	vldr	s12, [r1]
 800ee2c:	ed93 5a00 	vldr	s10, [r3]
 800ee30:	edd0 fa00 	vldr	s31, [r0]
 800ee34:	edd4 7a00 	vldr	s15, [r4]
 800ee38:	ed95 7a00 	vldr	s14, [r5]
 800ee3c:	ed56 3a01 	vldr	s7, [r6, #-4]
 800ee40:	ed17 3a01 	vldr	s6, [r7, #-4]
 800ee44:	ed92 2a00 	vldr	s4, [r2]
 800ee48:	ed96 0a00 	vldr	s0, [r6]
 800ee4c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ee50:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ee54:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800ee58:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ee5c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800ee60:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ee64:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ee68:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ee6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee70:	ed06 6a01 	vstr	s12, [r6, #-4]
 800ee74:	edd4 8a01 	vldr	s17, [r4, #4]
 800ee78:	ed92 9a01 	vldr	s18, [r2, #4]
 800ee7c:	edd7 0a00 	vldr	s1, [r7]
 800ee80:	edd1 2a01 	vldr	s5, [r1, #4]
 800ee84:	ed95 7a01 	vldr	s14, [r5, #4]
 800ee88:	ed93 6a01 	vldr	s12, [r3, #4]
 800ee8c:	edd0 5a01 	vldr	s11, [r0, #4]
 800ee90:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ee94:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800ee98:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ee9c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800eea0:	ee38 4a44 	vsub.f32	s8, s16, s8
 800eea4:	ee38 7a87 	vadd.f32	s14, s17, s14
 800eea8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800eeac:	ee79 2a22 	vadd.f32	s5, s18, s5
 800eeb0:	ee32 9a27 	vadd.f32	s18, s4, s15
 800eeb4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800eeb8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800eebc:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800eec0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800eec4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800eec8:	ee32 1a08 	vadd.f32	s2, s4, s16
 800eecc:	ee72 fa87 	vadd.f32	s31, s5, s14
 800eed0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800eed4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800eed8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800eedc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800eee0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800eee4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800eee8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800eeec:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800eef0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800eef4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800eef8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800eefc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800ef00:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ef04:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ef08:	ee32 4a64 	vsub.f32	s8, s4, s9
 800ef0c:	ee73 8a09 	vadd.f32	s17, s6, s18
 800ef10:	ee74 4a82 	vadd.f32	s9, s9, s4
 800ef14:	ee33 9a49 	vsub.f32	s18, s6, s18
 800ef18:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800ef1c:	ee35 3a85 	vadd.f32	s6, s11, s10
 800ef20:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ef24:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800ef28:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800ef2c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800ef30:	ee30 7a68 	vsub.f32	s14, s0, s17
 800ef34:	ee35 8a03 	vadd.f32	s16, s10, s6
 800ef38:	ee38 0a80 	vadd.f32	s0, s17, s0
 800ef3c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ef40:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800ef44:	ed9d 2a01 	vldr	s4, [sp, #4]
 800ef48:	eddd 1a02 	vldr	s3, [sp, #8]
 800ef4c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800ef50:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800ef54:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800ef58:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800ef5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ef60:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800ef64:	ee76 5a49 	vsub.f32	s11, s12, s18
 800ef68:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800ef6c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800ef70:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800ef74:	ee21 4a84 	vmul.f32	s8, s3, s8
 800ef78:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800ef7c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800ef80:	ee22 2a08 	vmul.f32	s4, s4, s16
 800ef84:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800ef88:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800ef8c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800ef90:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800ef94:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800ef98:	ee74 0a60 	vsub.f32	s1, s8, s1
 800ef9c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800efa0:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800efa4:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800efa8:	ee72 1a21 	vadd.f32	s3, s4, s3
 800efac:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800efb0:	ee38 2a89 	vadd.f32	s4, s17, s18
 800efb4:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800efb8:	ee38 8a04 	vadd.f32	s16, s16, s8
 800efbc:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800efc0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800efc4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800efc8:	eddd 5a03 	vldr	s11, [sp, #12]
 800efcc:	edc6 fa00 	vstr	s31, [r6]
 800efd0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800efd4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800efd8:	ee30 0a45 	vsub.f32	s0, s0, s10
 800efdc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800efe0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800efe4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800efe8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800efec:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800eff0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800eff4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800eff8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800effc:	ee78 8a85 	vadd.f32	s17, s17, s10
 800f000:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f004:	44c4      	add	ip, r8
 800f006:	45e3      	cmp	fp, ip
 800f008:	edc3 3a00 	vstr	s7, [r3]
 800f00c:	edc3 6a01 	vstr	s13, [r3, #4]
 800f010:	4456      	add	r6, sl
 800f012:	ed07 1a01 	vstr	s2, [r7, #-4]
 800f016:	edc7 0a00 	vstr	s1, [r7]
 800f01a:	4453      	add	r3, sl
 800f01c:	ed80 2a00 	vstr	s4, [r0]
 800f020:	edc0 2a01 	vstr	s5, [r0, #4]
 800f024:	4457      	add	r7, sl
 800f026:	edc2 1a00 	vstr	s3, [r2]
 800f02a:	ed82 7a01 	vstr	s14, [r2, #4]
 800f02e:	4450      	add	r0, sl
 800f030:	ed85 8a00 	vstr	s16, [r5]
 800f034:	ed85 0a01 	vstr	s0, [r5, #4]
 800f038:	4452      	add	r2, sl
 800f03a:	edc1 4a00 	vstr	s9, [r1]
 800f03e:	4455      	add	r5, sl
 800f040:	ed81 3a01 	vstr	s6, [r1, #4]
 800f044:	edc4 8a00 	vstr	s17, [r4]
 800f048:	ed84 6a01 	vstr	s12, [r4, #4]
 800f04c:	4451      	add	r1, sl
 800f04e:	4454      	add	r4, sl
 800f050:	f63f aeea 	bhi.w	800ee28 <arm_radix8_butterfly_f32+0x2fc>
 800f054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f056:	3308      	adds	r3, #8
 800f058:	930b      	str	r3, [sp, #44]	; 0x2c
 800f05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f05c:	3308      	adds	r3, #8
 800f05e:	930a      	str	r3, [sp, #40]	; 0x28
 800f060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f062:	3308      	adds	r3, #8
 800f064:	9309      	str	r3, [sp, #36]	; 0x24
 800f066:	9b08      	ldr	r3, [sp, #32]
 800f068:	3308      	adds	r3, #8
 800f06a:	9308      	str	r3, [sp, #32]
 800f06c:	9b07      	ldr	r3, [sp, #28]
 800f06e:	3308      	adds	r3, #8
 800f070:	9307      	str	r3, [sp, #28]
 800f072:	9b06      	ldr	r3, [sp, #24]
 800f074:	3308      	adds	r3, #8
 800f076:	9306      	str	r3, [sp, #24]
 800f078:	9b05      	ldr	r3, [sp, #20]
 800f07a:	3308      	adds	r3, #8
 800f07c:	9305      	str	r3, [sp, #20]
 800f07e:	9b04      	ldr	r3, [sp, #16]
 800f080:	3308      	adds	r3, #8
 800f082:	9304      	str	r3, [sp, #16]
 800f084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f086:	f109 0901 	add.w	r9, r9, #1
 800f08a:	454b      	cmp	r3, r9
 800f08c:	f47f ae7d 	bne.w	800ed8a <arm_radix8_butterfly_f32+0x25e>
 800f090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	b29b      	uxth	r3, r3
 800f096:	46d9      	mov	r9, fp
 800f098:	9310      	str	r3, [sp, #64]	; 0x40
 800f09a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800f09e:	e554      	b.n	800eb4a <arm_radix8_butterfly_f32+0x1e>
 800f0a0:	b015      	add	sp, #84	; 0x54
 800f0a2:	ecbd 8b10 	vpop	{d8-d15}
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	bf00      	nop

0800f0ac <__assert_func>:
 800f0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0ae:	4614      	mov	r4, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4b09      	ldr	r3, [pc, #36]	; (800f0d8 <__assert_func+0x2c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	68d8      	ldr	r0, [r3, #12]
 800f0ba:	b14c      	cbz	r4, 800f0d0 <__assert_func+0x24>
 800f0bc:	4b07      	ldr	r3, [pc, #28]	; (800f0dc <__assert_func+0x30>)
 800f0be:	9100      	str	r1, [sp, #0]
 800f0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0c4:	4906      	ldr	r1, [pc, #24]	; (800f0e0 <__assert_func+0x34>)
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	f000 f814 	bl	800f0f4 <fiprintf>
 800f0cc:	f002 f83c 	bl	8011148 <abort>
 800f0d0:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <__assert_func+0x38>)
 800f0d2:	461c      	mov	r4, r3
 800f0d4:	e7f3      	b.n	800f0be <__assert_func+0x12>
 800f0d6:	bf00      	nop
 800f0d8:	200000dc 	.word	0x200000dc
 800f0dc:	0802a624 	.word	0x0802a624
 800f0e0:	0802a631 	.word	0x0802a631
 800f0e4:	0802a65f 	.word	0x0802a65f

0800f0e8 <__errno>:
 800f0e8:	4b01      	ldr	r3, [pc, #4]	; (800f0f0 <__errno+0x8>)
 800f0ea:	6818      	ldr	r0, [r3, #0]
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	200000dc 	.word	0x200000dc

0800f0f4 <fiprintf>:
 800f0f4:	b40e      	push	{r1, r2, r3}
 800f0f6:	b503      	push	{r0, r1, lr}
 800f0f8:	4601      	mov	r1, r0
 800f0fa:	ab03      	add	r3, sp, #12
 800f0fc:	4805      	ldr	r0, [pc, #20]	; (800f114 <fiprintf+0x20>)
 800f0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f102:	6800      	ldr	r0, [r0, #0]
 800f104:	9301      	str	r3, [sp, #4]
 800f106:	f000 f86b 	bl	800f1e0 <_vfiprintf_r>
 800f10a:	b002      	add	sp, #8
 800f10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f110:	b003      	add	sp, #12
 800f112:	4770      	bx	lr
 800f114:	200000dc 	.word	0x200000dc

0800f118 <__libc_init_array>:
 800f118:	b570      	push	{r4, r5, r6, lr}
 800f11a:	4d0d      	ldr	r5, [pc, #52]	; (800f150 <__libc_init_array+0x38>)
 800f11c:	4c0d      	ldr	r4, [pc, #52]	; (800f154 <__libc_init_array+0x3c>)
 800f11e:	1b64      	subs	r4, r4, r5
 800f120:	10a4      	asrs	r4, r4, #2
 800f122:	2600      	movs	r6, #0
 800f124:	42a6      	cmp	r6, r4
 800f126:	d109      	bne.n	800f13c <__libc_init_array+0x24>
 800f128:	4d0b      	ldr	r5, [pc, #44]	; (800f158 <__libc_init_array+0x40>)
 800f12a:	4c0c      	ldr	r4, [pc, #48]	; (800f15c <__libc_init_array+0x44>)
 800f12c:	f005 ff20 	bl	8014f70 <_init>
 800f130:	1b64      	subs	r4, r4, r5
 800f132:	10a4      	asrs	r4, r4, #2
 800f134:	2600      	movs	r6, #0
 800f136:	42a6      	cmp	r6, r4
 800f138:	d105      	bne.n	800f146 <__libc_init_array+0x2e>
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f140:	4798      	blx	r3
 800f142:	3601      	adds	r6, #1
 800f144:	e7ee      	b.n	800f124 <__libc_init_array+0xc>
 800f146:	f855 3b04 	ldr.w	r3, [r5], #4
 800f14a:	4798      	blx	r3
 800f14c:	3601      	adds	r6, #1
 800f14e:	e7f2      	b.n	800f136 <__libc_init_array+0x1e>
 800f150:	0802af40 	.word	0x0802af40
 800f154:	0802af40 	.word	0x0802af40
 800f158:	0802af40 	.word	0x0802af40
 800f15c:	0802af44 	.word	0x0802af44

0800f160 <memcpy>:
 800f160:	440a      	add	r2, r1
 800f162:	4291      	cmp	r1, r2
 800f164:	f100 33ff 	add.w	r3, r0, #4294967295
 800f168:	d100      	bne.n	800f16c <memcpy+0xc>
 800f16a:	4770      	bx	lr
 800f16c:	b510      	push	{r4, lr}
 800f16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f176:	4291      	cmp	r1, r2
 800f178:	d1f9      	bne.n	800f16e <memcpy+0xe>
 800f17a:	bd10      	pop	{r4, pc}

0800f17c <memset>:
 800f17c:	4402      	add	r2, r0
 800f17e:	4603      	mov	r3, r0
 800f180:	4293      	cmp	r3, r2
 800f182:	d100      	bne.n	800f186 <memset+0xa>
 800f184:	4770      	bx	lr
 800f186:	f803 1b01 	strb.w	r1, [r3], #1
 800f18a:	e7f9      	b.n	800f180 <memset+0x4>

0800f18c <__sfputc_r>:
 800f18c:	6893      	ldr	r3, [r2, #8]
 800f18e:	3b01      	subs	r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	b410      	push	{r4}
 800f194:	6093      	str	r3, [r2, #8]
 800f196:	da08      	bge.n	800f1aa <__sfputc_r+0x1e>
 800f198:	6994      	ldr	r4, [r2, #24]
 800f19a:	42a3      	cmp	r3, r4
 800f19c:	db01      	blt.n	800f1a2 <__sfputc_r+0x16>
 800f19e:	290a      	cmp	r1, #10
 800f1a0:	d103      	bne.n	800f1aa <__sfputc_r+0x1e>
 800f1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1a6:	f001 bf0f 	b.w	8010fc8 <__swbuf_r>
 800f1aa:	6813      	ldr	r3, [r2, #0]
 800f1ac:	1c58      	adds	r0, r3, #1
 800f1ae:	6010      	str	r0, [r2, #0]
 800f1b0:	7019      	strb	r1, [r3, #0]
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <__sfputs_r>:
 800f1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1bc:	4606      	mov	r6, r0
 800f1be:	460f      	mov	r7, r1
 800f1c0:	4614      	mov	r4, r2
 800f1c2:	18d5      	adds	r5, r2, r3
 800f1c4:	42ac      	cmp	r4, r5
 800f1c6:	d101      	bne.n	800f1cc <__sfputs_r+0x12>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	e007      	b.n	800f1dc <__sfputs_r+0x22>
 800f1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d0:	463a      	mov	r2, r7
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7ff ffda 	bl	800f18c <__sfputc_r>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d1f3      	bne.n	800f1c4 <__sfputs_r+0xa>
 800f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1e0 <_vfiprintf_r>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	b09d      	sub	sp, #116	; 0x74
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	4698      	mov	r8, r3
 800f1ec:	4606      	mov	r6, r0
 800f1ee:	b118      	cbz	r0, 800f1f8 <_vfiprintf_r+0x18>
 800f1f0:	6983      	ldr	r3, [r0, #24]
 800f1f2:	b90b      	cbnz	r3, 800f1f8 <_vfiprintf_r+0x18>
 800f1f4:	f002 ff44 	bl	8012080 <__sinit>
 800f1f8:	4b89      	ldr	r3, [pc, #548]	; (800f420 <_vfiprintf_r+0x240>)
 800f1fa:	429d      	cmp	r5, r3
 800f1fc:	d11b      	bne.n	800f236 <_vfiprintf_r+0x56>
 800f1fe:	6875      	ldr	r5, [r6, #4]
 800f200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f202:	07d9      	lsls	r1, r3, #31
 800f204:	d405      	bmi.n	800f212 <_vfiprintf_r+0x32>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	059a      	lsls	r2, r3, #22
 800f20a:	d402      	bmi.n	800f212 <_vfiprintf_r+0x32>
 800f20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f20e:	f003 fb48 	bl	80128a2 <__retarget_lock_acquire_recursive>
 800f212:	89ab      	ldrh	r3, [r5, #12]
 800f214:	071b      	lsls	r3, r3, #28
 800f216:	d501      	bpl.n	800f21c <_vfiprintf_r+0x3c>
 800f218:	692b      	ldr	r3, [r5, #16]
 800f21a:	b9eb      	cbnz	r3, 800f258 <_vfiprintf_r+0x78>
 800f21c:	4629      	mov	r1, r5
 800f21e:	4630      	mov	r0, r6
 800f220:	f001 ff24 	bl	801106c <__swsetup_r>
 800f224:	b1c0      	cbz	r0, 800f258 <_vfiprintf_r+0x78>
 800f226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f228:	07dc      	lsls	r4, r3, #31
 800f22a:	d50e      	bpl.n	800f24a <_vfiprintf_r+0x6a>
 800f22c:	f04f 30ff 	mov.w	r0, #4294967295
 800f230:	b01d      	add	sp, #116	; 0x74
 800f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f236:	4b7b      	ldr	r3, [pc, #492]	; (800f424 <_vfiprintf_r+0x244>)
 800f238:	429d      	cmp	r5, r3
 800f23a:	d101      	bne.n	800f240 <_vfiprintf_r+0x60>
 800f23c:	68b5      	ldr	r5, [r6, #8]
 800f23e:	e7df      	b.n	800f200 <_vfiprintf_r+0x20>
 800f240:	4b79      	ldr	r3, [pc, #484]	; (800f428 <_vfiprintf_r+0x248>)
 800f242:	429d      	cmp	r5, r3
 800f244:	bf08      	it	eq
 800f246:	68f5      	ldreq	r5, [r6, #12]
 800f248:	e7da      	b.n	800f200 <_vfiprintf_r+0x20>
 800f24a:	89ab      	ldrh	r3, [r5, #12]
 800f24c:	0598      	lsls	r0, r3, #22
 800f24e:	d4ed      	bmi.n	800f22c <_vfiprintf_r+0x4c>
 800f250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f252:	f003 fb27 	bl	80128a4 <__retarget_lock_release_recursive>
 800f256:	e7e9      	b.n	800f22c <_vfiprintf_r+0x4c>
 800f258:	2300      	movs	r3, #0
 800f25a:	9309      	str	r3, [sp, #36]	; 0x24
 800f25c:	2320      	movs	r3, #32
 800f25e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f262:	f8cd 800c 	str.w	r8, [sp, #12]
 800f266:	2330      	movs	r3, #48	; 0x30
 800f268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f42c <_vfiprintf_r+0x24c>
 800f26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f270:	f04f 0901 	mov.w	r9, #1
 800f274:	4623      	mov	r3, r4
 800f276:	469a      	mov	sl, r3
 800f278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f27c:	b10a      	cbz	r2, 800f282 <_vfiprintf_r+0xa2>
 800f27e:	2a25      	cmp	r2, #37	; 0x25
 800f280:	d1f9      	bne.n	800f276 <_vfiprintf_r+0x96>
 800f282:	ebba 0b04 	subs.w	fp, sl, r4
 800f286:	d00b      	beq.n	800f2a0 <_vfiprintf_r+0xc0>
 800f288:	465b      	mov	r3, fp
 800f28a:	4622      	mov	r2, r4
 800f28c:	4629      	mov	r1, r5
 800f28e:	4630      	mov	r0, r6
 800f290:	f7ff ff93 	bl	800f1ba <__sfputs_r>
 800f294:	3001      	adds	r0, #1
 800f296:	f000 80aa 	beq.w	800f3ee <_vfiprintf_r+0x20e>
 800f29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f29c:	445a      	add	r2, fp
 800f29e:	9209      	str	r2, [sp, #36]	; 0x24
 800f2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 80a2 	beq.w	800f3ee <_vfiprintf_r+0x20e>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2b4:	f10a 0a01 	add.w	sl, sl, #1
 800f2b8:	9304      	str	r3, [sp, #16]
 800f2ba:	9307      	str	r3, [sp, #28]
 800f2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f2c2:	4654      	mov	r4, sl
 800f2c4:	2205      	movs	r2, #5
 800f2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ca:	4858      	ldr	r0, [pc, #352]	; (800f42c <_vfiprintf_r+0x24c>)
 800f2cc:	f7f0 ffb0 	bl	8000230 <memchr>
 800f2d0:	9a04      	ldr	r2, [sp, #16]
 800f2d2:	b9d8      	cbnz	r0, 800f30c <_vfiprintf_r+0x12c>
 800f2d4:	06d1      	lsls	r1, r2, #27
 800f2d6:	bf44      	itt	mi
 800f2d8:	2320      	movmi	r3, #32
 800f2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2de:	0713      	lsls	r3, r2, #28
 800f2e0:	bf44      	itt	mi
 800f2e2:	232b      	movmi	r3, #43	; 0x2b
 800f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ee:	d015      	beq.n	800f31c <_vfiprintf_r+0x13c>
 800f2f0:	9a07      	ldr	r2, [sp, #28]
 800f2f2:	4654      	mov	r4, sl
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	f04f 0c0a 	mov.w	ip, #10
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f300:	3b30      	subs	r3, #48	; 0x30
 800f302:	2b09      	cmp	r3, #9
 800f304:	d94e      	bls.n	800f3a4 <_vfiprintf_r+0x1c4>
 800f306:	b1b0      	cbz	r0, 800f336 <_vfiprintf_r+0x156>
 800f308:	9207      	str	r2, [sp, #28]
 800f30a:	e014      	b.n	800f336 <_vfiprintf_r+0x156>
 800f30c:	eba0 0308 	sub.w	r3, r0, r8
 800f310:	fa09 f303 	lsl.w	r3, r9, r3
 800f314:	4313      	orrs	r3, r2
 800f316:	9304      	str	r3, [sp, #16]
 800f318:	46a2      	mov	sl, r4
 800f31a:	e7d2      	b.n	800f2c2 <_vfiprintf_r+0xe2>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	1d19      	adds	r1, r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	9103      	str	r1, [sp, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	bfbb      	ittet	lt
 800f328:	425b      	neglt	r3, r3
 800f32a:	f042 0202 	orrlt.w	r2, r2, #2
 800f32e:	9307      	strge	r3, [sp, #28]
 800f330:	9307      	strlt	r3, [sp, #28]
 800f332:	bfb8      	it	lt
 800f334:	9204      	strlt	r2, [sp, #16]
 800f336:	7823      	ldrb	r3, [r4, #0]
 800f338:	2b2e      	cmp	r3, #46	; 0x2e
 800f33a:	d10c      	bne.n	800f356 <_vfiprintf_r+0x176>
 800f33c:	7863      	ldrb	r3, [r4, #1]
 800f33e:	2b2a      	cmp	r3, #42	; 0x2a
 800f340:	d135      	bne.n	800f3ae <_vfiprintf_r+0x1ce>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	1d1a      	adds	r2, r3, #4
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	9203      	str	r2, [sp, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	bfb8      	it	lt
 800f34e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f352:	3402      	adds	r4, #2
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f43c <_vfiprintf_r+0x25c>
 800f35a:	7821      	ldrb	r1, [r4, #0]
 800f35c:	2203      	movs	r2, #3
 800f35e:	4650      	mov	r0, sl
 800f360:	f7f0 ff66 	bl	8000230 <memchr>
 800f364:	b140      	cbz	r0, 800f378 <_vfiprintf_r+0x198>
 800f366:	2340      	movs	r3, #64	; 0x40
 800f368:	eba0 000a 	sub.w	r0, r0, sl
 800f36c:	fa03 f000 	lsl.w	r0, r3, r0
 800f370:	9b04      	ldr	r3, [sp, #16]
 800f372:	4303      	orrs	r3, r0
 800f374:	3401      	adds	r4, #1
 800f376:	9304      	str	r3, [sp, #16]
 800f378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f37c:	482c      	ldr	r0, [pc, #176]	; (800f430 <_vfiprintf_r+0x250>)
 800f37e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f382:	2206      	movs	r2, #6
 800f384:	f7f0 ff54 	bl	8000230 <memchr>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d03f      	beq.n	800f40c <_vfiprintf_r+0x22c>
 800f38c:	4b29      	ldr	r3, [pc, #164]	; (800f434 <_vfiprintf_r+0x254>)
 800f38e:	bb1b      	cbnz	r3, 800f3d8 <_vfiprintf_r+0x1f8>
 800f390:	9b03      	ldr	r3, [sp, #12]
 800f392:	3307      	adds	r3, #7
 800f394:	f023 0307 	bic.w	r3, r3, #7
 800f398:	3308      	adds	r3, #8
 800f39a:	9303      	str	r3, [sp, #12]
 800f39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f39e:	443b      	add	r3, r7
 800f3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a2:	e767      	b.n	800f274 <_vfiprintf_r+0x94>
 800f3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	2001      	movs	r0, #1
 800f3ac:	e7a5      	b.n	800f2fa <_vfiprintf_r+0x11a>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	3401      	adds	r4, #1
 800f3b2:	9305      	str	r3, [sp, #20]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	f04f 0c0a 	mov.w	ip, #10
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3c0:	3a30      	subs	r2, #48	; 0x30
 800f3c2:	2a09      	cmp	r2, #9
 800f3c4:	d903      	bls.n	800f3ce <_vfiprintf_r+0x1ee>
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0c5      	beq.n	800f356 <_vfiprintf_r+0x176>
 800f3ca:	9105      	str	r1, [sp, #20]
 800f3cc:	e7c3      	b.n	800f356 <_vfiprintf_r+0x176>
 800f3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e7f0      	b.n	800f3ba <_vfiprintf_r+0x1da>
 800f3d8:	ab03      	add	r3, sp, #12
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	462a      	mov	r2, r5
 800f3de:	4b16      	ldr	r3, [pc, #88]	; (800f438 <_vfiprintf_r+0x258>)
 800f3e0:	a904      	add	r1, sp, #16
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f000 f8cc 	bl	800f580 <_printf_float>
 800f3e8:	4607      	mov	r7, r0
 800f3ea:	1c78      	adds	r0, r7, #1
 800f3ec:	d1d6      	bne.n	800f39c <_vfiprintf_r+0x1bc>
 800f3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3f0:	07d9      	lsls	r1, r3, #31
 800f3f2:	d405      	bmi.n	800f400 <_vfiprintf_r+0x220>
 800f3f4:	89ab      	ldrh	r3, [r5, #12]
 800f3f6:	059a      	lsls	r2, r3, #22
 800f3f8:	d402      	bmi.n	800f400 <_vfiprintf_r+0x220>
 800f3fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3fc:	f003 fa52 	bl	80128a4 <__retarget_lock_release_recursive>
 800f400:	89ab      	ldrh	r3, [r5, #12]
 800f402:	065b      	lsls	r3, r3, #25
 800f404:	f53f af12 	bmi.w	800f22c <_vfiprintf_r+0x4c>
 800f408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f40a:	e711      	b.n	800f230 <_vfiprintf_r+0x50>
 800f40c:	ab03      	add	r3, sp, #12
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	462a      	mov	r2, r5
 800f412:	4b09      	ldr	r3, [pc, #36]	; (800f438 <_vfiprintf_r+0x258>)
 800f414:	a904      	add	r1, sp, #16
 800f416:	4630      	mov	r0, r6
 800f418:	f000 fb56 	bl	800fac8 <_printf_i>
 800f41c:	e7e4      	b.n	800f3e8 <_vfiprintf_r+0x208>
 800f41e:	bf00      	nop
 800f420:	0802a8d4 	.word	0x0802a8d4
 800f424:	0802a8f4 	.word	0x0802a8f4
 800f428:	0802a8b4 	.word	0x0802a8b4
 800f42c:	0802a664 	.word	0x0802a664
 800f430:	0802a66e 	.word	0x0802a66e
 800f434:	0800f581 	.word	0x0800f581
 800f438:	0800f1bb 	.word	0x0800f1bb
 800f43c:	0802a66a 	.word	0x0802a66a

0800f440 <__cvt>:
 800f440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f444:	ec55 4b10 	vmov	r4, r5, d0
 800f448:	2d00      	cmp	r5, #0
 800f44a:	460e      	mov	r6, r1
 800f44c:	4619      	mov	r1, r3
 800f44e:	462b      	mov	r3, r5
 800f450:	bfbb      	ittet	lt
 800f452:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f456:	461d      	movlt	r5, r3
 800f458:	2300      	movge	r3, #0
 800f45a:	232d      	movlt	r3, #45	; 0x2d
 800f45c:	700b      	strb	r3, [r1, #0]
 800f45e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f460:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f464:	4691      	mov	r9, r2
 800f466:	f023 0820 	bic.w	r8, r3, #32
 800f46a:	bfbc      	itt	lt
 800f46c:	4622      	movlt	r2, r4
 800f46e:	4614      	movlt	r4, r2
 800f470:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f474:	d005      	beq.n	800f482 <__cvt+0x42>
 800f476:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f47a:	d100      	bne.n	800f47e <__cvt+0x3e>
 800f47c:	3601      	adds	r6, #1
 800f47e:	2102      	movs	r1, #2
 800f480:	e000      	b.n	800f484 <__cvt+0x44>
 800f482:	2103      	movs	r1, #3
 800f484:	ab03      	add	r3, sp, #12
 800f486:	9301      	str	r3, [sp, #4]
 800f488:	ab02      	add	r3, sp, #8
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	ec45 4b10 	vmov	d0, r4, r5
 800f490:	4653      	mov	r3, sl
 800f492:	4632      	mov	r2, r6
 800f494:	f001 feec 	bl	8011270 <_dtoa_r>
 800f498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f49c:	4607      	mov	r7, r0
 800f49e:	d102      	bne.n	800f4a6 <__cvt+0x66>
 800f4a0:	f019 0f01 	tst.w	r9, #1
 800f4a4:	d022      	beq.n	800f4ec <__cvt+0xac>
 800f4a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4aa:	eb07 0906 	add.w	r9, r7, r6
 800f4ae:	d110      	bne.n	800f4d2 <__cvt+0x92>
 800f4b0:	783b      	ldrb	r3, [r7, #0]
 800f4b2:	2b30      	cmp	r3, #48	; 0x30
 800f4b4:	d10a      	bne.n	800f4cc <__cvt+0x8c>
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	4629      	mov	r1, r5
 800f4be:	f7f1 fb2b 	bl	8000b18 <__aeabi_dcmpeq>
 800f4c2:	b918      	cbnz	r0, 800f4cc <__cvt+0x8c>
 800f4c4:	f1c6 0601 	rsb	r6, r6, #1
 800f4c8:	f8ca 6000 	str.w	r6, [sl]
 800f4cc:	f8da 3000 	ldr.w	r3, [sl]
 800f4d0:	4499      	add	r9, r3
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7f1 fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 800f4de:	b108      	cbz	r0, 800f4e4 <__cvt+0xa4>
 800f4e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4e4:	2230      	movs	r2, #48	; 0x30
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	454b      	cmp	r3, r9
 800f4ea:	d307      	bcc.n	800f4fc <__cvt+0xbc>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4f0:	1bdb      	subs	r3, r3, r7
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	6013      	str	r3, [r2, #0]
 800f4f6:	b004      	add	sp, #16
 800f4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fc:	1c59      	adds	r1, r3, #1
 800f4fe:	9103      	str	r1, [sp, #12]
 800f500:	701a      	strb	r2, [r3, #0]
 800f502:	e7f0      	b.n	800f4e6 <__cvt+0xa6>

0800f504 <__exponent>:
 800f504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f506:	4603      	mov	r3, r0
 800f508:	2900      	cmp	r1, #0
 800f50a:	bfb8      	it	lt
 800f50c:	4249      	neglt	r1, r1
 800f50e:	f803 2b02 	strb.w	r2, [r3], #2
 800f512:	bfb4      	ite	lt
 800f514:	222d      	movlt	r2, #45	; 0x2d
 800f516:	222b      	movge	r2, #43	; 0x2b
 800f518:	2909      	cmp	r1, #9
 800f51a:	7042      	strb	r2, [r0, #1]
 800f51c:	dd2a      	ble.n	800f574 <__exponent+0x70>
 800f51e:	f10d 0407 	add.w	r4, sp, #7
 800f522:	46a4      	mov	ip, r4
 800f524:	270a      	movs	r7, #10
 800f526:	46a6      	mov	lr, r4
 800f528:	460a      	mov	r2, r1
 800f52a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f52e:	fb07 1516 	mls	r5, r7, r6, r1
 800f532:	3530      	adds	r5, #48	; 0x30
 800f534:	2a63      	cmp	r2, #99	; 0x63
 800f536:	f104 34ff 	add.w	r4, r4, #4294967295
 800f53a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f53e:	4631      	mov	r1, r6
 800f540:	dcf1      	bgt.n	800f526 <__exponent+0x22>
 800f542:	3130      	adds	r1, #48	; 0x30
 800f544:	f1ae 0502 	sub.w	r5, lr, #2
 800f548:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f54c:	1c44      	adds	r4, r0, #1
 800f54e:	4629      	mov	r1, r5
 800f550:	4561      	cmp	r1, ip
 800f552:	d30a      	bcc.n	800f56a <__exponent+0x66>
 800f554:	f10d 0209 	add.w	r2, sp, #9
 800f558:	eba2 020e 	sub.w	r2, r2, lr
 800f55c:	4565      	cmp	r5, ip
 800f55e:	bf88      	it	hi
 800f560:	2200      	movhi	r2, #0
 800f562:	4413      	add	r3, r2
 800f564:	1a18      	subs	r0, r3, r0
 800f566:	b003      	add	sp, #12
 800f568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f56e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f572:	e7ed      	b.n	800f550 <__exponent+0x4c>
 800f574:	2330      	movs	r3, #48	; 0x30
 800f576:	3130      	adds	r1, #48	; 0x30
 800f578:	7083      	strb	r3, [r0, #2]
 800f57a:	70c1      	strb	r1, [r0, #3]
 800f57c:	1d03      	adds	r3, r0, #4
 800f57e:	e7f1      	b.n	800f564 <__exponent+0x60>

0800f580 <_printf_float>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	ed2d 8b02 	vpush	{d8}
 800f588:	b08d      	sub	sp, #52	; 0x34
 800f58a:	460c      	mov	r4, r1
 800f58c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f590:	4616      	mov	r6, r2
 800f592:	461f      	mov	r7, r3
 800f594:	4605      	mov	r5, r0
 800f596:	f003 f97f 	bl	8012898 <_localeconv_r>
 800f59a:	f8d0 a000 	ldr.w	sl, [r0]
 800f59e:	4650      	mov	r0, sl
 800f5a0:	f7f0 fe3e 	bl	8000220 <strlen>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f5a8:	6823      	ldr	r3, [r4, #0]
 800f5aa:	9305      	str	r3, [sp, #20]
 800f5ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5b4:	3307      	adds	r3, #7
 800f5b6:	f023 0307 	bic.w	r3, r3, #7
 800f5ba:	f103 0208 	add.w	r2, r3, #8
 800f5be:	f8c8 2000 	str.w	r2, [r8]
 800f5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5d2:	9307      	str	r3, [sp, #28]
 800f5d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5d8:	ee08 0a10 	vmov	s16, r0
 800f5dc:	4b9f      	ldr	r3, [pc, #636]	; (800f85c <_printf_float+0x2dc>)
 800f5de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e6:	f7f1 fac9 	bl	8000b7c <__aeabi_dcmpun>
 800f5ea:	bb88      	cbnz	r0, 800f650 <_printf_float+0xd0>
 800f5ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5f0:	4b9a      	ldr	r3, [pc, #616]	; (800f85c <_printf_float+0x2dc>)
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f6:	f7f1 faa3 	bl	8000b40 <__aeabi_dcmple>
 800f5fa:	bb48      	cbnz	r0, 800f650 <_printf_float+0xd0>
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	2300      	movs	r3, #0
 800f600:	4640      	mov	r0, r8
 800f602:	4649      	mov	r1, r9
 800f604:	f7f1 fa92 	bl	8000b2c <__aeabi_dcmplt>
 800f608:	b110      	cbz	r0, 800f610 <_printf_float+0x90>
 800f60a:	232d      	movs	r3, #45	; 0x2d
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	4b93      	ldr	r3, [pc, #588]	; (800f860 <_printf_float+0x2e0>)
 800f612:	4894      	ldr	r0, [pc, #592]	; (800f864 <_printf_float+0x2e4>)
 800f614:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f618:	bf94      	ite	ls
 800f61a:	4698      	movls	r8, r3
 800f61c:	4680      	movhi	r8, r0
 800f61e:	2303      	movs	r3, #3
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	f023 0204 	bic.w	r2, r3, #4
 800f628:	6022      	str	r2, [r4, #0]
 800f62a:	f04f 0900 	mov.w	r9, #0
 800f62e:	9700      	str	r7, [sp, #0]
 800f630:	4633      	mov	r3, r6
 800f632:	aa0b      	add	r2, sp, #44	; 0x2c
 800f634:	4621      	mov	r1, r4
 800f636:	4628      	mov	r0, r5
 800f638:	f000 f9d8 	bl	800f9ec <_printf_common>
 800f63c:	3001      	adds	r0, #1
 800f63e:	f040 8090 	bne.w	800f762 <_printf_float+0x1e2>
 800f642:	f04f 30ff 	mov.w	r0, #4294967295
 800f646:	b00d      	add	sp, #52	; 0x34
 800f648:	ecbd 8b02 	vpop	{d8}
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	4642      	mov	r2, r8
 800f652:	464b      	mov	r3, r9
 800f654:	4640      	mov	r0, r8
 800f656:	4649      	mov	r1, r9
 800f658:	f7f1 fa90 	bl	8000b7c <__aeabi_dcmpun>
 800f65c:	b140      	cbz	r0, 800f670 <_printf_float+0xf0>
 800f65e:	464b      	mov	r3, r9
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfbc      	itt	lt
 800f664:	232d      	movlt	r3, #45	; 0x2d
 800f666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f66a:	487f      	ldr	r0, [pc, #508]	; (800f868 <_printf_float+0x2e8>)
 800f66c:	4b7f      	ldr	r3, [pc, #508]	; (800f86c <_printf_float+0x2ec>)
 800f66e:	e7d1      	b.n	800f614 <_printf_float+0x94>
 800f670:	6863      	ldr	r3, [r4, #4]
 800f672:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f676:	9206      	str	r2, [sp, #24]
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	d13f      	bne.n	800f6fc <_printf_float+0x17c>
 800f67c:	2306      	movs	r3, #6
 800f67e:	6063      	str	r3, [r4, #4]
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	6861      	ldr	r1, [r4, #4]
 800f684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f688:	2300      	movs	r3, #0
 800f68a:	9303      	str	r3, [sp, #12]
 800f68c:	ab0a      	add	r3, sp, #40	; 0x28
 800f68e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f692:	ab09      	add	r3, sp, #36	; 0x24
 800f694:	ec49 8b10 	vmov	d0, r8, r9
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f7ff fecd 	bl	800f440 <__cvt>
 800f6a6:	9b06      	ldr	r3, [sp, #24]
 800f6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6aa:	2b47      	cmp	r3, #71	; 0x47
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	d108      	bne.n	800f6c2 <_printf_float+0x142>
 800f6b0:	1cc8      	adds	r0, r1, #3
 800f6b2:	db02      	blt.n	800f6ba <_printf_float+0x13a>
 800f6b4:	6863      	ldr	r3, [r4, #4]
 800f6b6:	4299      	cmp	r1, r3
 800f6b8:	dd41      	ble.n	800f73e <_printf_float+0x1be>
 800f6ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800f6be:	fa5f fb8b 	uxtb.w	fp, fp
 800f6c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6c6:	d820      	bhi.n	800f70a <_printf_float+0x18a>
 800f6c8:	3901      	subs	r1, #1
 800f6ca:	465a      	mov	r2, fp
 800f6cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6d0:	9109      	str	r1, [sp, #36]	; 0x24
 800f6d2:	f7ff ff17 	bl	800f504 <__exponent>
 800f6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6d8:	1813      	adds	r3, r2, r0
 800f6da:	2a01      	cmp	r2, #1
 800f6dc:	4681      	mov	r9, r0
 800f6de:	6123      	str	r3, [r4, #16]
 800f6e0:	dc02      	bgt.n	800f6e8 <_printf_float+0x168>
 800f6e2:	6822      	ldr	r2, [r4, #0]
 800f6e4:	07d2      	lsls	r2, r2, #31
 800f6e6:	d501      	bpl.n	800f6ec <_printf_float+0x16c>
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d09c      	beq.n	800f62e <_printf_float+0xae>
 800f6f4:	232d      	movs	r3, #45	; 0x2d
 800f6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6fa:	e798      	b.n	800f62e <_printf_float+0xae>
 800f6fc:	9a06      	ldr	r2, [sp, #24]
 800f6fe:	2a47      	cmp	r2, #71	; 0x47
 800f700:	d1be      	bne.n	800f680 <_printf_float+0x100>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1bc      	bne.n	800f680 <_printf_float+0x100>
 800f706:	2301      	movs	r3, #1
 800f708:	e7b9      	b.n	800f67e <_printf_float+0xfe>
 800f70a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f70e:	d118      	bne.n	800f742 <_printf_float+0x1c2>
 800f710:	2900      	cmp	r1, #0
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	dd0b      	ble.n	800f72e <_printf_float+0x1ae>
 800f716:	6121      	str	r1, [r4, #16]
 800f718:	b913      	cbnz	r3, 800f720 <_printf_float+0x1a0>
 800f71a:	6822      	ldr	r2, [r4, #0]
 800f71c:	07d0      	lsls	r0, r2, #31
 800f71e:	d502      	bpl.n	800f726 <_printf_float+0x1a6>
 800f720:	3301      	adds	r3, #1
 800f722:	440b      	add	r3, r1
 800f724:	6123      	str	r3, [r4, #16]
 800f726:	65a1      	str	r1, [r4, #88]	; 0x58
 800f728:	f04f 0900 	mov.w	r9, #0
 800f72c:	e7de      	b.n	800f6ec <_printf_float+0x16c>
 800f72e:	b913      	cbnz	r3, 800f736 <_printf_float+0x1b6>
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	07d2      	lsls	r2, r2, #31
 800f734:	d501      	bpl.n	800f73a <_printf_float+0x1ba>
 800f736:	3302      	adds	r3, #2
 800f738:	e7f4      	b.n	800f724 <_printf_float+0x1a4>
 800f73a:	2301      	movs	r3, #1
 800f73c:	e7f2      	b.n	800f724 <_printf_float+0x1a4>
 800f73e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f744:	4299      	cmp	r1, r3
 800f746:	db05      	blt.n	800f754 <_printf_float+0x1d4>
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	6121      	str	r1, [r4, #16]
 800f74c:	07d8      	lsls	r0, r3, #31
 800f74e:	d5ea      	bpl.n	800f726 <_printf_float+0x1a6>
 800f750:	1c4b      	adds	r3, r1, #1
 800f752:	e7e7      	b.n	800f724 <_printf_float+0x1a4>
 800f754:	2900      	cmp	r1, #0
 800f756:	bfd4      	ite	le
 800f758:	f1c1 0202 	rsble	r2, r1, #2
 800f75c:	2201      	movgt	r2, #1
 800f75e:	4413      	add	r3, r2
 800f760:	e7e0      	b.n	800f724 <_printf_float+0x1a4>
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	055a      	lsls	r2, r3, #21
 800f766:	d407      	bmi.n	800f778 <_printf_float+0x1f8>
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	4642      	mov	r2, r8
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d12c      	bne.n	800f7d0 <_printf_float+0x250>
 800f776:	e764      	b.n	800f642 <_printf_float+0xc2>
 800f778:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f77c:	f240 80e0 	bls.w	800f940 <_printf_float+0x3c0>
 800f780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f784:	2200      	movs	r2, #0
 800f786:	2300      	movs	r3, #0
 800f788:	f7f1 f9c6 	bl	8000b18 <__aeabi_dcmpeq>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d034      	beq.n	800f7fa <_printf_float+0x27a>
 800f790:	4a37      	ldr	r2, [pc, #220]	; (800f870 <_printf_float+0x2f0>)
 800f792:	2301      	movs	r3, #1
 800f794:	4631      	mov	r1, r6
 800f796:	4628      	mov	r0, r5
 800f798:	47b8      	blx	r7
 800f79a:	3001      	adds	r0, #1
 800f79c:	f43f af51 	beq.w	800f642 <_printf_float+0xc2>
 800f7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	db02      	blt.n	800f7ae <_printf_float+0x22e>
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	07d8      	lsls	r0, r3, #31
 800f7ac:	d510      	bpl.n	800f7d0 <_printf_float+0x250>
 800f7ae:	ee18 3a10 	vmov	r3, s16
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af41 	beq.w	800f642 <_printf_float+0xc2>
 800f7c0:	f04f 0800 	mov.w	r8, #0
 800f7c4:	f104 091a 	add.w	r9, r4, #26
 800f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	4543      	cmp	r3, r8
 800f7ce:	dc09      	bgt.n	800f7e4 <_printf_float+0x264>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	079b      	lsls	r3, r3, #30
 800f7d4:	f100 8105 	bmi.w	800f9e2 <_printf_float+0x462>
 800f7d8:	68e0      	ldr	r0, [r4, #12]
 800f7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	4618      	movlt	r0, r3
 800f7e2:	e730      	b.n	800f646 <_printf_float+0xc6>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	464a      	mov	r2, r9
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	f43f af27 	beq.w	800f642 <_printf_float+0xc2>
 800f7f4:	f108 0801 	add.w	r8, r8, #1
 800f7f8:	e7e6      	b.n	800f7c8 <_printf_float+0x248>
 800f7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dc39      	bgt.n	800f874 <_printf_float+0x2f4>
 800f800:	4a1b      	ldr	r2, [pc, #108]	; (800f870 <_printf_float+0x2f0>)
 800f802:	2301      	movs	r3, #1
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	47b8      	blx	r7
 800f80a:	3001      	adds	r0, #1
 800f80c:	f43f af19 	beq.w	800f642 <_printf_float+0xc2>
 800f810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f814:	4313      	orrs	r3, r2
 800f816:	d102      	bne.n	800f81e <_printf_float+0x29e>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	07d9      	lsls	r1, r3, #31
 800f81c:	d5d8      	bpl.n	800f7d0 <_printf_float+0x250>
 800f81e:	ee18 3a10 	vmov	r3, s16
 800f822:	4652      	mov	r2, sl
 800f824:	4631      	mov	r1, r6
 800f826:	4628      	mov	r0, r5
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	f43f af09 	beq.w	800f642 <_printf_float+0xc2>
 800f830:	f04f 0900 	mov.w	r9, #0
 800f834:	f104 0a1a 	add.w	sl, r4, #26
 800f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f83a:	425b      	negs	r3, r3
 800f83c:	454b      	cmp	r3, r9
 800f83e:	dc01      	bgt.n	800f844 <_printf_float+0x2c4>
 800f840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f842:	e792      	b.n	800f76a <_printf_float+0x1ea>
 800f844:	2301      	movs	r3, #1
 800f846:	4652      	mov	r2, sl
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f aef7 	beq.w	800f642 <_printf_float+0xc2>
 800f854:	f109 0901 	add.w	r9, r9, #1
 800f858:	e7ee      	b.n	800f838 <_printf_float+0x2b8>
 800f85a:	bf00      	nop
 800f85c:	7fefffff 	.word	0x7fefffff
 800f860:	0802a675 	.word	0x0802a675
 800f864:	0802a679 	.word	0x0802a679
 800f868:	0802a681 	.word	0x0802a681
 800f86c:	0802a67d 	.word	0x0802a67d
 800f870:	0802a685 	.word	0x0802a685
 800f874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f878:	429a      	cmp	r2, r3
 800f87a:	bfa8      	it	ge
 800f87c:	461a      	movge	r2, r3
 800f87e:	2a00      	cmp	r2, #0
 800f880:	4691      	mov	r9, r2
 800f882:	dc37      	bgt.n	800f8f4 <_printf_float+0x374>
 800f884:	f04f 0b00 	mov.w	fp, #0
 800f888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f88c:	f104 021a 	add.w	r2, r4, #26
 800f890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f892:	9305      	str	r3, [sp, #20]
 800f894:	eba3 0309 	sub.w	r3, r3, r9
 800f898:	455b      	cmp	r3, fp
 800f89a:	dc33      	bgt.n	800f904 <_printf_float+0x384>
 800f89c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	db3b      	blt.n	800f91c <_printf_float+0x39c>
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	07da      	lsls	r2, r3, #31
 800f8a8:	d438      	bmi.n	800f91c <_printf_float+0x39c>
 800f8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ac:	9a05      	ldr	r2, [sp, #20]
 800f8ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8b0:	1a9a      	subs	r2, r3, r2
 800f8b2:	eba3 0901 	sub.w	r9, r3, r1
 800f8b6:	4591      	cmp	r9, r2
 800f8b8:	bfa8      	it	ge
 800f8ba:	4691      	movge	r9, r2
 800f8bc:	f1b9 0f00 	cmp.w	r9, #0
 800f8c0:	dc35      	bgt.n	800f92e <_printf_float+0x3ae>
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ca:	f104 0a1a 	add.w	sl, r4, #26
 800f8ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8d2:	1a9b      	subs	r3, r3, r2
 800f8d4:	eba3 0309 	sub.w	r3, r3, r9
 800f8d8:	4543      	cmp	r3, r8
 800f8da:	f77f af79 	ble.w	800f7d0 <_printf_float+0x250>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	4652      	mov	r2, sl
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	f43f aeaa 	beq.w	800f642 <_printf_float+0xc2>
 800f8ee:	f108 0801 	add.w	r8, r8, #1
 800f8f2:	e7ec      	b.n	800f8ce <_printf_float+0x34e>
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b8      	blx	r7
 800f8fe:	3001      	adds	r0, #1
 800f900:	d1c0      	bne.n	800f884 <_printf_float+0x304>
 800f902:	e69e      	b.n	800f642 <_printf_float+0xc2>
 800f904:	2301      	movs	r3, #1
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	9205      	str	r2, [sp, #20]
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f ae97 	beq.w	800f642 <_printf_float+0xc2>
 800f914:	9a05      	ldr	r2, [sp, #20]
 800f916:	f10b 0b01 	add.w	fp, fp, #1
 800f91a:	e7b9      	b.n	800f890 <_printf_float+0x310>
 800f91c:	ee18 3a10 	vmov	r3, s16
 800f920:	4652      	mov	r2, sl
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	d1be      	bne.n	800f8aa <_printf_float+0x32a>
 800f92c:	e689      	b.n	800f642 <_printf_float+0xc2>
 800f92e:	9a05      	ldr	r2, [sp, #20]
 800f930:	464b      	mov	r3, r9
 800f932:	4442      	add	r2, r8
 800f934:	4631      	mov	r1, r6
 800f936:	4628      	mov	r0, r5
 800f938:	47b8      	blx	r7
 800f93a:	3001      	adds	r0, #1
 800f93c:	d1c1      	bne.n	800f8c2 <_printf_float+0x342>
 800f93e:	e680      	b.n	800f642 <_printf_float+0xc2>
 800f940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f942:	2a01      	cmp	r2, #1
 800f944:	dc01      	bgt.n	800f94a <_printf_float+0x3ca>
 800f946:	07db      	lsls	r3, r3, #31
 800f948:	d538      	bpl.n	800f9bc <_printf_float+0x43c>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4642      	mov	r2, r8
 800f94e:	4631      	mov	r1, r6
 800f950:	4628      	mov	r0, r5
 800f952:	47b8      	blx	r7
 800f954:	3001      	adds	r0, #1
 800f956:	f43f ae74 	beq.w	800f642 <_printf_float+0xc2>
 800f95a:	ee18 3a10 	vmov	r3, s16
 800f95e:	4652      	mov	r2, sl
 800f960:	4631      	mov	r1, r6
 800f962:	4628      	mov	r0, r5
 800f964:	47b8      	blx	r7
 800f966:	3001      	adds	r0, #1
 800f968:	f43f ae6b 	beq.w	800f642 <_printf_float+0xc2>
 800f96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f970:	2200      	movs	r2, #0
 800f972:	2300      	movs	r3, #0
 800f974:	f7f1 f8d0 	bl	8000b18 <__aeabi_dcmpeq>
 800f978:	b9d8      	cbnz	r0, 800f9b2 <_printf_float+0x432>
 800f97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f97c:	f108 0201 	add.w	r2, r8, #1
 800f980:	3b01      	subs	r3, #1
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	d10e      	bne.n	800f9aa <_printf_float+0x42a>
 800f98c:	e659      	b.n	800f642 <_printf_float+0xc2>
 800f98e:	2301      	movs	r3, #1
 800f990:	4652      	mov	r2, sl
 800f992:	4631      	mov	r1, r6
 800f994:	4628      	mov	r0, r5
 800f996:	47b8      	blx	r7
 800f998:	3001      	adds	r0, #1
 800f99a:	f43f ae52 	beq.w	800f642 <_printf_float+0xc2>
 800f99e:	f108 0801 	add.w	r8, r8, #1
 800f9a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	4543      	cmp	r3, r8
 800f9a8:	dcf1      	bgt.n	800f98e <_printf_float+0x40e>
 800f9aa:	464b      	mov	r3, r9
 800f9ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9b0:	e6dc      	b.n	800f76c <_printf_float+0x1ec>
 800f9b2:	f04f 0800 	mov.w	r8, #0
 800f9b6:	f104 0a1a 	add.w	sl, r4, #26
 800f9ba:	e7f2      	b.n	800f9a2 <_printf_float+0x422>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	4642      	mov	r2, r8
 800f9c0:	e7df      	b.n	800f982 <_printf_float+0x402>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	464a      	mov	r2, r9
 800f9c6:	4631      	mov	r1, r6
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	47b8      	blx	r7
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	f43f ae38 	beq.w	800f642 <_printf_float+0xc2>
 800f9d2:	f108 0801 	add.w	r8, r8, #1
 800f9d6:	68e3      	ldr	r3, [r4, #12]
 800f9d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9da:	1a5b      	subs	r3, r3, r1
 800f9dc:	4543      	cmp	r3, r8
 800f9de:	dcf0      	bgt.n	800f9c2 <_printf_float+0x442>
 800f9e0:	e6fa      	b.n	800f7d8 <_printf_float+0x258>
 800f9e2:	f04f 0800 	mov.w	r8, #0
 800f9e6:	f104 0919 	add.w	r9, r4, #25
 800f9ea:	e7f4      	b.n	800f9d6 <_printf_float+0x456>

0800f9ec <_printf_common>:
 800f9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f0:	4616      	mov	r6, r2
 800f9f2:	4699      	mov	r9, r3
 800f9f4:	688a      	ldr	r2, [r1, #8]
 800f9f6:	690b      	ldr	r3, [r1, #16]
 800f9f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	bfb8      	it	lt
 800fa00:	4613      	movlt	r3, r2
 800fa02:	6033      	str	r3, [r6, #0]
 800fa04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa08:	4607      	mov	r7, r0
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	b10a      	cbz	r2, 800fa12 <_printf_common+0x26>
 800fa0e:	3301      	adds	r3, #1
 800fa10:	6033      	str	r3, [r6, #0]
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	0699      	lsls	r1, r3, #26
 800fa16:	bf42      	ittt	mi
 800fa18:	6833      	ldrmi	r3, [r6, #0]
 800fa1a:	3302      	addmi	r3, #2
 800fa1c:	6033      	strmi	r3, [r6, #0]
 800fa1e:	6825      	ldr	r5, [r4, #0]
 800fa20:	f015 0506 	ands.w	r5, r5, #6
 800fa24:	d106      	bne.n	800fa34 <_printf_common+0x48>
 800fa26:	f104 0a19 	add.w	sl, r4, #25
 800fa2a:	68e3      	ldr	r3, [r4, #12]
 800fa2c:	6832      	ldr	r2, [r6, #0]
 800fa2e:	1a9b      	subs	r3, r3, r2
 800fa30:	42ab      	cmp	r3, r5
 800fa32:	dc26      	bgt.n	800fa82 <_printf_common+0x96>
 800fa34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa38:	1e13      	subs	r3, r2, #0
 800fa3a:	6822      	ldr	r2, [r4, #0]
 800fa3c:	bf18      	it	ne
 800fa3e:	2301      	movne	r3, #1
 800fa40:	0692      	lsls	r2, r2, #26
 800fa42:	d42b      	bmi.n	800fa9c <_printf_common+0xb0>
 800fa44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa48:	4649      	mov	r1, r9
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	47c0      	blx	r8
 800fa4e:	3001      	adds	r0, #1
 800fa50:	d01e      	beq.n	800fa90 <_printf_common+0xa4>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	68e5      	ldr	r5, [r4, #12]
 800fa56:	6832      	ldr	r2, [r6, #0]
 800fa58:	f003 0306 	and.w	r3, r3, #6
 800fa5c:	2b04      	cmp	r3, #4
 800fa5e:	bf08      	it	eq
 800fa60:	1aad      	subeq	r5, r5, r2
 800fa62:	68a3      	ldr	r3, [r4, #8]
 800fa64:	6922      	ldr	r2, [r4, #16]
 800fa66:	bf0c      	ite	eq
 800fa68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa6c:	2500      	movne	r5, #0
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	bfc4      	itt	gt
 800fa72:	1a9b      	subgt	r3, r3, r2
 800fa74:	18ed      	addgt	r5, r5, r3
 800fa76:	2600      	movs	r6, #0
 800fa78:	341a      	adds	r4, #26
 800fa7a:	42b5      	cmp	r5, r6
 800fa7c:	d11a      	bne.n	800fab4 <_printf_common+0xc8>
 800fa7e:	2000      	movs	r0, #0
 800fa80:	e008      	b.n	800fa94 <_printf_common+0xa8>
 800fa82:	2301      	movs	r3, #1
 800fa84:	4652      	mov	r2, sl
 800fa86:	4649      	mov	r1, r9
 800fa88:	4638      	mov	r0, r7
 800fa8a:	47c0      	blx	r8
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	d103      	bne.n	800fa98 <_printf_common+0xac>
 800fa90:	f04f 30ff 	mov.w	r0, #4294967295
 800fa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa98:	3501      	adds	r5, #1
 800fa9a:	e7c6      	b.n	800fa2a <_printf_common+0x3e>
 800fa9c:	18e1      	adds	r1, r4, r3
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	2030      	movs	r0, #48	; 0x30
 800faa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800faa6:	4422      	add	r2, r4
 800faa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800faac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fab0:	3302      	adds	r3, #2
 800fab2:	e7c7      	b.n	800fa44 <_printf_common+0x58>
 800fab4:	2301      	movs	r3, #1
 800fab6:	4622      	mov	r2, r4
 800fab8:	4649      	mov	r1, r9
 800faba:	4638      	mov	r0, r7
 800fabc:	47c0      	blx	r8
 800fabe:	3001      	adds	r0, #1
 800fac0:	d0e6      	beq.n	800fa90 <_printf_common+0xa4>
 800fac2:	3601      	adds	r6, #1
 800fac4:	e7d9      	b.n	800fa7a <_printf_common+0x8e>
	...

0800fac8 <_printf_i>:
 800fac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	7e0f      	ldrb	r7, [r1, #24]
 800face:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fad0:	2f78      	cmp	r7, #120	; 0x78
 800fad2:	4691      	mov	r9, r2
 800fad4:	4680      	mov	r8, r0
 800fad6:	460c      	mov	r4, r1
 800fad8:	469a      	mov	sl, r3
 800fada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fade:	d807      	bhi.n	800faf0 <_printf_i+0x28>
 800fae0:	2f62      	cmp	r7, #98	; 0x62
 800fae2:	d80a      	bhi.n	800fafa <_printf_i+0x32>
 800fae4:	2f00      	cmp	r7, #0
 800fae6:	f000 80d8 	beq.w	800fc9a <_printf_i+0x1d2>
 800faea:	2f58      	cmp	r7, #88	; 0x58
 800faec:	f000 80a3 	beq.w	800fc36 <_printf_i+0x16e>
 800faf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800faf8:	e03a      	b.n	800fb70 <_printf_i+0xa8>
 800fafa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fafe:	2b15      	cmp	r3, #21
 800fb00:	d8f6      	bhi.n	800faf0 <_printf_i+0x28>
 800fb02:	a101      	add	r1, pc, #4	; (adr r1, 800fb08 <_printf_i+0x40>)
 800fb04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb08:	0800fb61 	.word	0x0800fb61
 800fb0c:	0800fb75 	.word	0x0800fb75
 800fb10:	0800faf1 	.word	0x0800faf1
 800fb14:	0800faf1 	.word	0x0800faf1
 800fb18:	0800faf1 	.word	0x0800faf1
 800fb1c:	0800faf1 	.word	0x0800faf1
 800fb20:	0800fb75 	.word	0x0800fb75
 800fb24:	0800faf1 	.word	0x0800faf1
 800fb28:	0800faf1 	.word	0x0800faf1
 800fb2c:	0800faf1 	.word	0x0800faf1
 800fb30:	0800faf1 	.word	0x0800faf1
 800fb34:	0800fc81 	.word	0x0800fc81
 800fb38:	0800fba5 	.word	0x0800fba5
 800fb3c:	0800fc63 	.word	0x0800fc63
 800fb40:	0800faf1 	.word	0x0800faf1
 800fb44:	0800faf1 	.word	0x0800faf1
 800fb48:	0800fca3 	.word	0x0800fca3
 800fb4c:	0800faf1 	.word	0x0800faf1
 800fb50:	0800fba5 	.word	0x0800fba5
 800fb54:	0800faf1 	.word	0x0800faf1
 800fb58:	0800faf1 	.word	0x0800faf1
 800fb5c:	0800fc6b 	.word	0x0800fc6b
 800fb60:	682b      	ldr	r3, [r5, #0]
 800fb62:	1d1a      	adds	r2, r3, #4
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	602a      	str	r2, [r5, #0]
 800fb68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb70:	2301      	movs	r3, #1
 800fb72:	e0a3      	b.n	800fcbc <_printf_i+0x1f4>
 800fb74:	6820      	ldr	r0, [r4, #0]
 800fb76:	6829      	ldr	r1, [r5, #0]
 800fb78:	0606      	lsls	r6, r0, #24
 800fb7a:	f101 0304 	add.w	r3, r1, #4
 800fb7e:	d50a      	bpl.n	800fb96 <_printf_i+0xce>
 800fb80:	680e      	ldr	r6, [r1, #0]
 800fb82:	602b      	str	r3, [r5, #0]
 800fb84:	2e00      	cmp	r6, #0
 800fb86:	da03      	bge.n	800fb90 <_printf_i+0xc8>
 800fb88:	232d      	movs	r3, #45	; 0x2d
 800fb8a:	4276      	negs	r6, r6
 800fb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb90:	485e      	ldr	r0, [pc, #376]	; (800fd0c <_printf_i+0x244>)
 800fb92:	230a      	movs	r3, #10
 800fb94:	e019      	b.n	800fbca <_printf_i+0x102>
 800fb96:	680e      	ldr	r6, [r1, #0]
 800fb98:	602b      	str	r3, [r5, #0]
 800fb9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb9e:	bf18      	it	ne
 800fba0:	b236      	sxthne	r6, r6
 800fba2:	e7ef      	b.n	800fb84 <_printf_i+0xbc>
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	6820      	ldr	r0, [r4, #0]
 800fba8:	1d19      	adds	r1, r3, #4
 800fbaa:	6029      	str	r1, [r5, #0]
 800fbac:	0601      	lsls	r1, r0, #24
 800fbae:	d501      	bpl.n	800fbb4 <_printf_i+0xec>
 800fbb0:	681e      	ldr	r6, [r3, #0]
 800fbb2:	e002      	b.n	800fbba <_printf_i+0xf2>
 800fbb4:	0646      	lsls	r6, r0, #25
 800fbb6:	d5fb      	bpl.n	800fbb0 <_printf_i+0xe8>
 800fbb8:	881e      	ldrh	r6, [r3, #0]
 800fbba:	4854      	ldr	r0, [pc, #336]	; (800fd0c <_printf_i+0x244>)
 800fbbc:	2f6f      	cmp	r7, #111	; 0x6f
 800fbbe:	bf0c      	ite	eq
 800fbc0:	2308      	moveq	r3, #8
 800fbc2:	230a      	movne	r3, #10
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbca:	6865      	ldr	r5, [r4, #4]
 800fbcc:	60a5      	str	r5, [r4, #8]
 800fbce:	2d00      	cmp	r5, #0
 800fbd0:	bfa2      	ittt	ge
 800fbd2:	6821      	ldrge	r1, [r4, #0]
 800fbd4:	f021 0104 	bicge.w	r1, r1, #4
 800fbd8:	6021      	strge	r1, [r4, #0]
 800fbda:	b90e      	cbnz	r6, 800fbe0 <_printf_i+0x118>
 800fbdc:	2d00      	cmp	r5, #0
 800fbde:	d04d      	beq.n	800fc7c <_printf_i+0x1b4>
 800fbe0:	4615      	mov	r5, r2
 800fbe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbe6:	fb03 6711 	mls	r7, r3, r1, r6
 800fbea:	5dc7      	ldrb	r7, [r0, r7]
 800fbec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbf0:	4637      	mov	r7, r6
 800fbf2:	42bb      	cmp	r3, r7
 800fbf4:	460e      	mov	r6, r1
 800fbf6:	d9f4      	bls.n	800fbe2 <_printf_i+0x11a>
 800fbf8:	2b08      	cmp	r3, #8
 800fbfa:	d10b      	bne.n	800fc14 <_printf_i+0x14c>
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	07de      	lsls	r6, r3, #31
 800fc00:	d508      	bpl.n	800fc14 <_printf_i+0x14c>
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	6861      	ldr	r1, [r4, #4]
 800fc06:	4299      	cmp	r1, r3
 800fc08:	bfde      	ittt	le
 800fc0a:	2330      	movle	r3, #48	; 0x30
 800fc0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc14:	1b52      	subs	r2, r2, r5
 800fc16:	6122      	str	r2, [r4, #16]
 800fc18:	f8cd a000 	str.w	sl, [sp]
 800fc1c:	464b      	mov	r3, r9
 800fc1e:	aa03      	add	r2, sp, #12
 800fc20:	4621      	mov	r1, r4
 800fc22:	4640      	mov	r0, r8
 800fc24:	f7ff fee2 	bl	800f9ec <_printf_common>
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d14c      	bne.n	800fcc6 <_printf_i+0x1fe>
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc30:	b004      	add	sp, #16
 800fc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc36:	4835      	ldr	r0, [pc, #212]	; (800fd0c <_printf_i+0x244>)
 800fc38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc3c:	6829      	ldr	r1, [r5, #0]
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc44:	6029      	str	r1, [r5, #0]
 800fc46:	061d      	lsls	r5, r3, #24
 800fc48:	d514      	bpl.n	800fc74 <_printf_i+0x1ac>
 800fc4a:	07df      	lsls	r7, r3, #31
 800fc4c:	bf44      	itt	mi
 800fc4e:	f043 0320 	orrmi.w	r3, r3, #32
 800fc52:	6023      	strmi	r3, [r4, #0]
 800fc54:	b91e      	cbnz	r6, 800fc5e <_printf_i+0x196>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	f023 0320 	bic.w	r3, r3, #32
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	2310      	movs	r3, #16
 800fc60:	e7b0      	b.n	800fbc4 <_printf_i+0xfc>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	f043 0320 	orr.w	r3, r3, #32
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	2378      	movs	r3, #120	; 0x78
 800fc6c:	4828      	ldr	r0, [pc, #160]	; (800fd10 <_printf_i+0x248>)
 800fc6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc72:	e7e3      	b.n	800fc3c <_printf_i+0x174>
 800fc74:	0659      	lsls	r1, r3, #25
 800fc76:	bf48      	it	mi
 800fc78:	b2b6      	uxthmi	r6, r6
 800fc7a:	e7e6      	b.n	800fc4a <_printf_i+0x182>
 800fc7c:	4615      	mov	r5, r2
 800fc7e:	e7bb      	b.n	800fbf8 <_printf_i+0x130>
 800fc80:	682b      	ldr	r3, [r5, #0]
 800fc82:	6826      	ldr	r6, [r4, #0]
 800fc84:	6961      	ldr	r1, [r4, #20]
 800fc86:	1d18      	adds	r0, r3, #4
 800fc88:	6028      	str	r0, [r5, #0]
 800fc8a:	0635      	lsls	r5, r6, #24
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	d501      	bpl.n	800fc94 <_printf_i+0x1cc>
 800fc90:	6019      	str	r1, [r3, #0]
 800fc92:	e002      	b.n	800fc9a <_printf_i+0x1d2>
 800fc94:	0670      	lsls	r0, r6, #25
 800fc96:	d5fb      	bpl.n	800fc90 <_printf_i+0x1c8>
 800fc98:	8019      	strh	r1, [r3, #0]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	4615      	mov	r5, r2
 800fca0:	e7ba      	b.n	800fc18 <_printf_i+0x150>
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	1d1a      	adds	r2, r3, #4
 800fca6:	602a      	str	r2, [r5, #0]
 800fca8:	681d      	ldr	r5, [r3, #0]
 800fcaa:	6862      	ldr	r2, [r4, #4]
 800fcac:	2100      	movs	r1, #0
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f7f0 fabe 	bl	8000230 <memchr>
 800fcb4:	b108      	cbz	r0, 800fcba <_printf_i+0x1f2>
 800fcb6:	1b40      	subs	r0, r0, r5
 800fcb8:	6060      	str	r0, [r4, #4]
 800fcba:	6863      	ldr	r3, [r4, #4]
 800fcbc:	6123      	str	r3, [r4, #16]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc4:	e7a8      	b.n	800fc18 <_printf_i+0x150>
 800fcc6:	6923      	ldr	r3, [r4, #16]
 800fcc8:	462a      	mov	r2, r5
 800fcca:	4649      	mov	r1, r9
 800fccc:	4640      	mov	r0, r8
 800fcce:	47d0      	blx	sl
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d0ab      	beq.n	800fc2c <_printf_i+0x164>
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	079b      	lsls	r3, r3, #30
 800fcd8:	d413      	bmi.n	800fd02 <_printf_i+0x23a>
 800fcda:	68e0      	ldr	r0, [r4, #12]
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	4298      	cmp	r0, r3
 800fce0:	bfb8      	it	lt
 800fce2:	4618      	movlt	r0, r3
 800fce4:	e7a4      	b.n	800fc30 <_printf_i+0x168>
 800fce6:	2301      	movs	r3, #1
 800fce8:	4632      	mov	r2, r6
 800fcea:	4649      	mov	r1, r9
 800fcec:	4640      	mov	r0, r8
 800fcee:	47d0      	blx	sl
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d09b      	beq.n	800fc2c <_printf_i+0x164>
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	68e3      	ldr	r3, [r4, #12]
 800fcf8:	9903      	ldr	r1, [sp, #12]
 800fcfa:	1a5b      	subs	r3, r3, r1
 800fcfc:	42ab      	cmp	r3, r5
 800fcfe:	dcf2      	bgt.n	800fce6 <_printf_i+0x21e>
 800fd00:	e7eb      	b.n	800fcda <_printf_i+0x212>
 800fd02:	2500      	movs	r5, #0
 800fd04:	f104 0619 	add.w	r6, r4, #25
 800fd08:	e7f5      	b.n	800fcf6 <_printf_i+0x22e>
 800fd0a:	bf00      	nop
 800fd0c:	0802a687 	.word	0x0802a687
 800fd10:	0802a698 	.word	0x0802a698

0800fd14 <_scanf_float>:
 800fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	b087      	sub	sp, #28
 800fd1a:	4617      	mov	r7, r2
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	688b      	ldr	r3, [r1, #8]
 800fd20:	1e5a      	subs	r2, r3, #1
 800fd22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd26:	bf83      	ittte	hi
 800fd28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd2c:	195b      	addhi	r3, r3, r5
 800fd2e:	9302      	strhi	r3, [sp, #8]
 800fd30:	2300      	movls	r3, #0
 800fd32:	bf86      	itte	hi
 800fd34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd38:	608b      	strhi	r3, [r1, #8]
 800fd3a:	9302      	strls	r3, [sp, #8]
 800fd3c:	680b      	ldr	r3, [r1, #0]
 800fd3e:	468b      	mov	fp, r1
 800fd40:	2500      	movs	r5, #0
 800fd42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fd46:	f84b 3b1c 	str.w	r3, [fp], #28
 800fd4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fd4e:	4680      	mov	r8, r0
 800fd50:	460c      	mov	r4, r1
 800fd52:	465e      	mov	r6, fp
 800fd54:	46aa      	mov	sl, r5
 800fd56:	46a9      	mov	r9, r5
 800fd58:	9501      	str	r5, [sp, #4]
 800fd5a:	68a2      	ldr	r2, [r4, #8]
 800fd5c:	b152      	cbz	r2, 800fd74 <_scanf_float+0x60>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b4e      	cmp	r3, #78	; 0x4e
 800fd64:	d864      	bhi.n	800fe30 <_scanf_float+0x11c>
 800fd66:	2b40      	cmp	r3, #64	; 0x40
 800fd68:	d83c      	bhi.n	800fde4 <_scanf_float+0xd0>
 800fd6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fd6e:	b2c8      	uxtb	r0, r1
 800fd70:	280e      	cmp	r0, #14
 800fd72:	d93a      	bls.n	800fdea <_scanf_float+0xd6>
 800fd74:	f1b9 0f00 	cmp.w	r9, #0
 800fd78:	d003      	beq.n	800fd82 <_scanf_float+0x6e>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd86:	f1ba 0f01 	cmp.w	sl, #1
 800fd8a:	f200 8113 	bhi.w	800ffb4 <_scanf_float+0x2a0>
 800fd8e:	455e      	cmp	r6, fp
 800fd90:	f200 8105 	bhi.w	800ff9e <_scanf_float+0x28a>
 800fd94:	2501      	movs	r5, #1
 800fd96:	4628      	mov	r0, r5
 800fd98:	b007      	add	sp, #28
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fda2:	2a0d      	cmp	r2, #13
 800fda4:	d8e6      	bhi.n	800fd74 <_scanf_float+0x60>
 800fda6:	a101      	add	r1, pc, #4	; (adr r1, 800fdac <_scanf_float+0x98>)
 800fda8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fdac:	0800feeb 	.word	0x0800feeb
 800fdb0:	0800fd75 	.word	0x0800fd75
 800fdb4:	0800fd75 	.word	0x0800fd75
 800fdb8:	0800fd75 	.word	0x0800fd75
 800fdbc:	0800ff4b 	.word	0x0800ff4b
 800fdc0:	0800ff23 	.word	0x0800ff23
 800fdc4:	0800fd75 	.word	0x0800fd75
 800fdc8:	0800fd75 	.word	0x0800fd75
 800fdcc:	0800fef9 	.word	0x0800fef9
 800fdd0:	0800fd75 	.word	0x0800fd75
 800fdd4:	0800fd75 	.word	0x0800fd75
 800fdd8:	0800fd75 	.word	0x0800fd75
 800fddc:	0800fd75 	.word	0x0800fd75
 800fde0:	0800feb1 	.word	0x0800feb1
 800fde4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fde8:	e7db      	b.n	800fda2 <_scanf_float+0x8e>
 800fdea:	290e      	cmp	r1, #14
 800fdec:	d8c2      	bhi.n	800fd74 <_scanf_float+0x60>
 800fdee:	a001      	add	r0, pc, #4	; (adr r0, 800fdf4 <_scanf_float+0xe0>)
 800fdf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fdf4:	0800fea3 	.word	0x0800fea3
 800fdf8:	0800fd75 	.word	0x0800fd75
 800fdfc:	0800fea3 	.word	0x0800fea3
 800fe00:	0800ff37 	.word	0x0800ff37
 800fe04:	0800fd75 	.word	0x0800fd75
 800fe08:	0800fe51 	.word	0x0800fe51
 800fe0c:	0800fe8d 	.word	0x0800fe8d
 800fe10:	0800fe8d 	.word	0x0800fe8d
 800fe14:	0800fe8d 	.word	0x0800fe8d
 800fe18:	0800fe8d 	.word	0x0800fe8d
 800fe1c:	0800fe8d 	.word	0x0800fe8d
 800fe20:	0800fe8d 	.word	0x0800fe8d
 800fe24:	0800fe8d 	.word	0x0800fe8d
 800fe28:	0800fe8d 	.word	0x0800fe8d
 800fe2c:	0800fe8d 	.word	0x0800fe8d
 800fe30:	2b6e      	cmp	r3, #110	; 0x6e
 800fe32:	d809      	bhi.n	800fe48 <_scanf_float+0x134>
 800fe34:	2b60      	cmp	r3, #96	; 0x60
 800fe36:	d8b2      	bhi.n	800fd9e <_scanf_float+0x8a>
 800fe38:	2b54      	cmp	r3, #84	; 0x54
 800fe3a:	d077      	beq.n	800ff2c <_scanf_float+0x218>
 800fe3c:	2b59      	cmp	r3, #89	; 0x59
 800fe3e:	d199      	bne.n	800fd74 <_scanf_float+0x60>
 800fe40:	2d07      	cmp	r5, #7
 800fe42:	d197      	bne.n	800fd74 <_scanf_float+0x60>
 800fe44:	2508      	movs	r5, #8
 800fe46:	e029      	b.n	800fe9c <_scanf_float+0x188>
 800fe48:	2b74      	cmp	r3, #116	; 0x74
 800fe4a:	d06f      	beq.n	800ff2c <_scanf_float+0x218>
 800fe4c:	2b79      	cmp	r3, #121	; 0x79
 800fe4e:	e7f6      	b.n	800fe3e <_scanf_float+0x12a>
 800fe50:	6821      	ldr	r1, [r4, #0]
 800fe52:	05c8      	lsls	r0, r1, #23
 800fe54:	d51a      	bpl.n	800fe8c <_scanf_float+0x178>
 800fe56:	9b02      	ldr	r3, [sp, #8]
 800fe58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fe5c:	6021      	str	r1, [r4, #0]
 800fe5e:	f109 0901 	add.w	r9, r9, #1
 800fe62:	b11b      	cbz	r3, 800fe6c <_scanf_float+0x158>
 800fe64:	3b01      	subs	r3, #1
 800fe66:	3201      	adds	r2, #1
 800fe68:	9302      	str	r3, [sp, #8]
 800fe6a:	60a2      	str	r2, [r4, #8]
 800fe6c:	68a3      	ldr	r3, [r4, #8]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	60a3      	str	r3, [r4, #8]
 800fe72:	6923      	ldr	r3, [r4, #16]
 800fe74:	3301      	adds	r3, #1
 800fe76:	6123      	str	r3, [r4, #16]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	607b      	str	r3, [r7, #4]
 800fe80:	f340 8084 	ble.w	800ff8c <_scanf_float+0x278>
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	3301      	adds	r3, #1
 800fe88:	603b      	str	r3, [r7, #0]
 800fe8a:	e766      	b.n	800fd5a <_scanf_float+0x46>
 800fe8c:	eb1a 0f05 	cmn.w	sl, r5
 800fe90:	f47f af70 	bne.w	800fd74 <_scanf_float+0x60>
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fe9a:	6022      	str	r2, [r4, #0]
 800fe9c:	f806 3b01 	strb.w	r3, [r6], #1
 800fea0:	e7e4      	b.n	800fe6c <_scanf_float+0x158>
 800fea2:	6822      	ldr	r2, [r4, #0]
 800fea4:	0610      	lsls	r0, r2, #24
 800fea6:	f57f af65 	bpl.w	800fd74 <_scanf_float+0x60>
 800feaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800feae:	e7f4      	b.n	800fe9a <_scanf_float+0x186>
 800feb0:	f1ba 0f00 	cmp.w	sl, #0
 800feb4:	d10e      	bne.n	800fed4 <_scanf_float+0x1c0>
 800feb6:	f1b9 0f00 	cmp.w	r9, #0
 800feba:	d10e      	bne.n	800feda <_scanf_float+0x1c6>
 800febc:	6822      	ldr	r2, [r4, #0]
 800febe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fec2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fec6:	d108      	bne.n	800feda <_scanf_float+0x1c6>
 800fec8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fecc:	6022      	str	r2, [r4, #0]
 800fece:	f04f 0a01 	mov.w	sl, #1
 800fed2:	e7e3      	b.n	800fe9c <_scanf_float+0x188>
 800fed4:	f1ba 0f02 	cmp.w	sl, #2
 800fed8:	d055      	beq.n	800ff86 <_scanf_float+0x272>
 800feda:	2d01      	cmp	r5, #1
 800fedc:	d002      	beq.n	800fee4 <_scanf_float+0x1d0>
 800fede:	2d04      	cmp	r5, #4
 800fee0:	f47f af48 	bne.w	800fd74 <_scanf_float+0x60>
 800fee4:	3501      	adds	r5, #1
 800fee6:	b2ed      	uxtb	r5, r5
 800fee8:	e7d8      	b.n	800fe9c <_scanf_float+0x188>
 800feea:	f1ba 0f01 	cmp.w	sl, #1
 800feee:	f47f af41 	bne.w	800fd74 <_scanf_float+0x60>
 800fef2:	f04f 0a02 	mov.w	sl, #2
 800fef6:	e7d1      	b.n	800fe9c <_scanf_float+0x188>
 800fef8:	b97d      	cbnz	r5, 800ff1a <_scanf_float+0x206>
 800fefa:	f1b9 0f00 	cmp.w	r9, #0
 800fefe:	f47f af3c 	bne.w	800fd7a <_scanf_float+0x66>
 800ff02:	6822      	ldr	r2, [r4, #0]
 800ff04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ff08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ff0c:	f47f af39 	bne.w	800fd82 <_scanf_float+0x6e>
 800ff10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff14:	6022      	str	r2, [r4, #0]
 800ff16:	2501      	movs	r5, #1
 800ff18:	e7c0      	b.n	800fe9c <_scanf_float+0x188>
 800ff1a:	2d03      	cmp	r5, #3
 800ff1c:	d0e2      	beq.n	800fee4 <_scanf_float+0x1d0>
 800ff1e:	2d05      	cmp	r5, #5
 800ff20:	e7de      	b.n	800fee0 <_scanf_float+0x1cc>
 800ff22:	2d02      	cmp	r5, #2
 800ff24:	f47f af26 	bne.w	800fd74 <_scanf_float+0x60>
 800ff28:	2503      	movs	r5, #3
 800ff2a:	e7b7      	b.n	800fe9c <_scanf_float+0x188>
 800ff2c:	2d06      	cmp	r5, #6
 800ff2e:	f47f af21 	bne.w	800fd74 <_scanf_float+0x60>
 800ff32:	2507      	movs	r5, #7
 800ff34:	e7b2      	b.n	800fe9c <_scanf_float+0x188>
 800ff36:	6822      	ldr	r2, [r4, #0]
 800ff38:	0591      	lsls	r1, r2, #22
 800ff3a:	f57f af1b 	bpl.w	800fd74 <_scanf_float+0x60>
 800ff3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ff42:	6022      	str	r2, [r4, #0]
 800ff44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff48:	e7a8      	b.n	800fe9c <_scanf_float+0x188>
 800ff4a:	6822      	ldr	r2, [r4, #0]
 800ff4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ff50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ff54:	d006      	beq.n	800ff64 <_scanf_float+0x250>
 800ff56:	0550      	lsls	r0, r2, #21
 800ff58:	f57f af0c 	bpl.w	800fd74 <_scanf_float+0x60>
 800ff5c:	f1b9 0f00 	cmp.w	r9, #0
 800ff60:	f43f af0f 	beq.w	800fd82 <_scanf_float+0x6e>
 800ff64:	0591      	lsls	r1, r2, #22
 800ff66:	bf58      	it	pl
 800ff68:	9901      	ldrpl	r1, [sp, #4]
 800ff6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff6e:	bf58      	it	pl
 800ff70:	eba9 0101 	subpl.w	r1, r9, r1
 800ff74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ff78:	bf58      	it	pl
 800ff7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ff7e:	6022      	str	r2, [r4, #0]
 800ff80:	f04f 0900 	mov.w	r9, #0
 800ff84:	e78a      	b.n	800fe9c <_scanf_float+0x188>
 800ff86:	f04f 0a03 	mov.w	sl, #3
 800ff8a:	e787      	b.n	800fe9c <_scanf_float+0x188>
 800ff8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff90:	4639      	mov	r1, r7
 800ff92:	4640      	mov	r0, r8
 800ff94:	4798      	blx	r3
 800ff96:	2800      	cmp	r0, #0
 800ff98:	f43f aedf 	beq.w	800fd5a <_scanf_float+0x46>
 800ff9c:	e6ea      	b.n	800fd74 <_scanf_float+0x60>
 800ff9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffa6:	463a      	mov	r2, r7
 800ffa8:	4640      	mov	r0, r8
 800ffaa:	4798      	blx	r3
 800ffac:	6923      	ldr	r3, [r4, #16]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	6123      	str	r3, [r4, #16]
 800ffb2:	e6ec      	b.n	800fd8e <_scanf_float+0x7a>
 800ffb4:	1e6b      	subs	r3, r5, #1
 800ffb6:	2b06      	cmp	r3, #6
 800ffb8:	d825      	bhi.n	8010006 <_scanf_float+0x2f2>
 800ffba:	2d02      	cmp	r5, #2
 800ffbc:	d836      	bhi.n	801002c <_scanf_float+0x318>
 800ffbe:	455e      	cmp	r6, fp
 800ffc0:	f67f aee8 	bls.w	800fd94 <_scanf_float+0x80>
 800ffc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffcc:	463a      	mov	r2, r7
 800ffce:	4640      	mov	r0, r8
 800ffd0:	4798      	blx	r3
 800ffd2:	6923      	ldr	r3, [r4, #16]
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	6123      	str	r3, [r4, #16]
 800ffd8:	e7f1      	b.n	800ffbe <_scanf_float+0x2aa>
 800ffda:	9802      	ldr	r0, [sp, #8]
 800ffdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffe0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ffe4:	9002      	str	r0, [sp, #8]
 800ffe6:	463a      	mov	r2, r7
 800ffe8:	4640      	mov	r0, r8
 800ffea:	4798      	blx	r3
 800ffec:	6923      	ldr	r3, [r4, #16]
 800ffee:	3b01      	subs	r3, #1
 800fff0:	6123      	str	r3, [r4, #16]
 800fff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fff6:	fa5f fa8a 	uxtb.w	sl, sl
 800fffa:	f1ba 0f02 	cmp.w	sl, #2
 800fffe:	d1ec      	bne.n	800ffda <_scanf_float+0x2c6>
 8010000:	3d03      	subs	r5, #3
 8010002:	b2ed      	uxtb	r5, r5
 8010004:	1b76      	subs	r6, r6, r5
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	05da      	lsls	r2, r3, #23
 801000a:	d52f      	bpl.n	801006c <_scanf_float+0x358>
 801000c:	055b      	lsls	r3, r3, #21
 801000e:	d510      	bpl.n	8010032 <_scanf_float+0x31e>
 8010010:	455e      	cmp	r6, fp
 8010012:	f67f aebf 	bls.w	800fd94 <_scanf_float+0x80>
 8010016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801001a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801001e:	463a      	mov	r2, r7
 8010020:	4640      	mov	r0, r8
 8010022:	4798      	blx	r3
 8010024:	6923      	ldr	r3, [r4, #16]
 8010026:	3b01      	subs	r3, #1
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	e7f1      	b.n	8010010 <_scanf_float+0x2fc>
 801002c:	46aa      	mov	sl, r5
 801002e:	9602      	str	r6, [sp, #8]
 8010030:	e7df      	b.n	800fff2 <_scanf_float+0x2de>
 8010032:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010036:	6923      	ldr	r3, [r4, #16]
 8010038:	2965      	cmp	r1, #101	; 0x65
 801003a:	f103 33ff 	add.w	r3, r3, #4294967295
 801003e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	d00c      	beq.n	8010060 <_scanf_float+0x34c>
 8010046:	2945      	cmp	r1, #69	; 0x45
 8010048:	d00a      	beq.n	8010060 <_scanf_float+0x34c>
 801004a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801004e:	463a      	mov	r2, r7
 8010050:	4640      	mov	r0, r8
 8010052:	4798      	blx	r3
 8010054:	6923      	ldr	r3, [r4, #16]
 8010056:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801005a:	3b01      	subs	r3, #1
 801005c:	1eb5      	subs	r5, r6, #2
 801005e:	6123      	str	r3, [r4, #16]
 8010060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010064:	463a      	mov	r2, r7
 8010066:	4640      	mov	r0, r8
 8010068:	4798      	blx	r3
 801006a:	462e      	mov	r6, r5
 801006c:	6825      	ldr	r5, [r4, #0]
 801006e:	f015 0510 	ands.w	r5, r5, #16
 8010072:	d159      	bne.n	8010128 <_scanf_float+0x414>
 8010074:	7035      	strb	r5, [r6, #0]
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801007c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010080:	d11b      	bne.n	80100ba <_scanf_float+0x3a6>
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	454b      	cmp	r3, r9
 8010086:	eba3 0209 	sub.w	r2, r3, r9
 801008a:	d123      	bne.n	80100d4 <_scanf_float+0x3c0>
 801008c:	2200      	movs	r2, #0
 801008e:	4659      	mov	r1, fp
 8010090:	4640      	mov	r0, r8
 8010092:	f000 ff0f 	bl	8010eb4 <_strtod_r>
 8010096:	6822      	ldr	r2, [r4, #0]
 8010098:	9b03      	ldr	r3, [sp, #12]
 801009a:	f012 0f02 	tst.w	r2, #2
 801009e:	ec57 6b10 	vmov	r6, r7, d0
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	d021      	beq.n	80100ea <_scanf_float+0x3d6>
 80100a6:	9903      	ldr	r1, [sp, #12]
 80100a8:	1d1a      	adds	r2, r3, #4
 80100aa:	600a      	str	r2, [r1, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	e9c3 6700 	strd	r6, r7, [r3]
 80100b2:	68e3      	ldr	r3, [r4, #12]
 80100b4:	3301      	adds	r3, #1
 80100b6:	60e3      	str	r3, [r4, #12]
 80100b8:	e66d      	b.n	800fd96 <_scanf_float+0x82>
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0e5      	beq.n	801008c <_scanf_float+0x378>
 80100c0:	9905      	ldr	r1, [sp, #20]
 80100c2:	230a      	movs	r3, #10
 80100c4:	462a      	mov	r2, r5
 80100c6:	3101      	adds	r1, #1
 80100c8:	4640      	mov	r0, r8
 80100ca:	f000 ff7b 	bl	8010fc4 <_strtol_r>
 80100ce:	9b04      	ldr	r3, [sp, #16]
 80100d0:	9e05      	ldr	r6, [sp, #20]
 80100d2:	1ac2      	subs	r2, r0, r3
 80100d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80100d8:	429e      	cmp	r6, r3
 80100da:	bf28      	it	cs
 80100dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80100e0:	4912      	ldr	r1, [pc, #72]	; (801012c <_scanf_float+0x418>)
 80100e2:	4630      	mov	r0, r6
 80100e4:	f000 f8a2 	bl	801022c <siprintf>
 80100e8:	e7d0      	b.n	801008c <_scanf_float+0x378>
 80100ea:	9903      	ldr	r1, [sp, #12]
 80100ec:	f012 0f04 	tst.w	r2, #4
 80100f0:	f103 0204 	add.w	r2, r3, #4
 80100f4:	600a      	str	r2, [r1, #0]
 80100f6:	d1d9      	bne.n	80100ac <_scanf_float+0x398>
 80100f8:	f8d3 8000 	ldr.w	r8, [r3]
 80100fc:	ee10 2a10 	vmov	r2, s0
 8010100:	ee10 0a10 	vmov	r0, s0
 8010104:	463b      	mov	r3, r7
 8010106:	4639      	mov	r1, r7
 8010108:	f7f0 fd38 	bl	8000b7c <__aeabi_dcmpun>
 801010c:	b128      	cbz	r0, 801011a <_scanf_float+0x406>
 801010e:	4808      	ldr	r0, [pc, #32]	; (8010130 <_scanf_float+0x41c>)
 8010110:	f000 f886 	bl	8010220 <nanf>
 8010114:	ed88 0a00 	vstr	s0, [r8]
 8010118:	e7cb      	b.n	80100b2 <_scanf_float+0x39e>
 801011a:	4630      	mov	r0, r6
 801011c:	4639      	mov	r1, r7
 801011e:	f7f0 fd8b 	bl	8000c38 <__aeabi_d2f>
 8010122:	f8c8 0000 	str.w	r0, [r8]
 8010126:	e7c4      	b.n	80100b2 <_scanf_float+0x39e>
 8010128:	2500      	movs	r5, #0
 801012a:	e634      	b.n	800fd96 <_scanf_float+0x82>
 801012c:	0802a6a9 	.word	0x0802a6a9
 8010130:	0802a65f 	.word	0x0802a65f

08010134 <_puts_r>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	460e      	mov	r6, r1
 8010138:	4605      	mov	r5, r0
 801013a:	b118      	cbz	r0, 8010144 <_puts_r+0x10>
 801013c:	6983      	ldr	r3, [r0, #24]
 801013e:	b90b      	cbnz	r3, 8010144 <_puts_r+0x10>
 8010140:	f001 ff9e 	bl	8012080 <__sinit>
 8010144:	69ab      	ldr	r3, [r5, #24]
 8010146:	68ac      	ldr	r4, [r5, #8]
 8010148:	b913      	cbnz	r3, 8010150 <_puts_r+0x1c>
 801014a:	4628      	mov	r0, r5
 801014c:	f001 ff98 	bl	8012080 <__sinit>
 8010150:	4b2c      	ldr	r3, [pc, #176]	; (8010204 <_puts_r+0xd0>)
 8010152:	429c      	cmp	r4, r3
 8010154:	d120      	bne.n	8010198 <_puts_r+0x64>
 8010156:	686c      	ldr	r4, [r5, #4]
 8010158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801015a:	07db      	lsls	r3, r3, #31
 801015c:	d405      	bmi.n	801016a <_puts_r+0x36>
 801015e:	89a3      	ldrh	r3, [r4, #12]
 8010160:	0598      	lsls	r0, r3, #22
 8010162:	d402      	bmi.n	801016a <_puts_r+0x36>
 8010164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010166:	f002 fb9c 	bl	80128a2 <__retarget_lock_acquire_recursive>
 801016a:	89a3      	ldrh	r3, [r4, #12]
 801016c:	0719      	lsls	r1, r3, #28
 801016e:	d51d      	bpl.n	80101ac <_puts_r+0x78>
 8010170:	6923      	ldr	r3, [r4, #16]
 8010172:	b1db      	cbz	r3, 80101ac <_puts_r+0x78>
 8010174:	3e01      	subs	r6, #1
 8010176:	68a3      	ldr	r3, [r4, #8]
 8010178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801017c:	3b01      	subs	r3, #1
 801017e:	60a3      	str	r3, [r4, #8]
 8010180:	bb39      	cbnz	r1, 80101d2 <_puts_r+0x9e>
 8010182:	2b00      	cmp	r3, #0
 8010184:	da38      	bge.n	80101f8 <_puts_r+0xc4>
 8010186:	4622      	mov	r2, r4
 8010188:	210a      	movs	r1, #10
 801018a:	4628      	mov	r0, r5
 801018c:	f000 ff1c 	bl	8010fc8 <__swbuf_r>
 8010190:	3001      	adds	r0, #1
 8010192:	d011      	beq.n	80101b8 <_puts_r+0x84>
 8010194:	250a      	movs	r5, #10
 8010196:	e011      	b.n	80101bc <_puts_r+0x88>
 8010198:	4b1b      	ldr	r3, [pc, #108]	; (8010208 <_puts_r+0xd4>)
 801019a:	429c      	cmp	r4, r3
 801019c:	d101      	bne.n	80101a2 <_puts_r+0x6e>
 801019e:	68ac      	ldr	r4, [r5, #8]
 80101a0:	e7da      	b.n	8010158 <_puts_r+0x24>
 80101a2:	4b1a      	ldr	r3, [pc, #104]	; (801020c <_puts_r+0xd8>)
 80101a4:	429c      	cmp	r4, r3
 80101a6:	bf08      	it	eq
 80101a8:	68ec      	ldreq	r4, [r5, #12]
 80101aa:	e7d5      	b.n	8010158 <_puts_r+0x24>
 80101ac:	4621      	mov	r1, r4
 80101ae:	4628      	mov	r0, r5
 80101b0:	f000 ff5c 	bl	801106c <__swsetup_r>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	d0dd      	beq.n	8010174 <_puts_r+0x40>
 80101b8:	f04f 35ff 	mov.w	r5, #4294967295
 80101bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101be:	07da      	lsls	r2, r3, #31
 80101c0:	d405      	bmi.n	80101ce <_puts_r+0x9a>
 80101c2:	89a3      	ldrh	r3, [r4, #12]
 80101c4:	059b      	lsls	r3, r3, #22
 80101c6:	d402      	bmi.n	80101ce <_puts_r+0x9a>
 80101c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101ca:	f002 fb6b 	bl	80128a4 <__retarget_lock_release_recursive>
 80101ce:	4628      	mov	r0, r5
 80101d0:	bd70      	pop	{r4, r5, r6, pc}
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	da04      	bge.n	80101e0 <_puts_r+0xac>
 80101d6:	69a2      	ldr	r2, [r4, #24]
 80101d8:	429a      	cmp	r2, r3
 80101da:	dc06      	bgt.n	80101ea <_puts_r+0xb6>
 80101dc:	290a      	cmp	r1, #10
 80101de:	d004      	beq.n	80101ea <_puts_r+0xb6>
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	1c5a      	adds	r2, r3, #1
 80101e4:	6022      	str	r2, [r4, #0]
 80101e6:	7019      	strb	r1, [r3, #0]
 80101e8:	e7c5      	b.n	8010176 <_puts_r+0x42>
 80101ea:	4622      	mov	r2, r4
 80101ec:	4628      	mov	r0, r5
 80101ee:	f000 feeb 	bl	8010fc8 <__swbuf_r>
 80101f2:	3001      	adds	r0, #1
 80101f4:	d1bf      	bne.n	8010176 <_puts_r+0x42>
 80101f6:	e7df      	b.n	80101b8 <_puts_r+0x84>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	250a      	movs	r5, #10
 80101fc:	1c5a      	adds	r2, r3, #1
 80101fe:	6022      	str	r2, [r4, #0]
 8010200:	701d      	strb	r5, [r3, #0]
 8010202:	e7db      	b.n	80101bc <_puts_r+0x88>
 8010204:	0802a8d4 	.word	0x0802a8d4
 8010208:	0802a8f4 	.word	0x0802a8f4
 801020c:	0802a8b4 	.word	0x0802a8b4

08010210 <puts>:
 8010210:	4b02      	ldr	r3, [pc, #8]	; (801021c <puts+0xc>)
 8010212:	4601      	mov	r1, r0
 8010214:	6818      	ldr	r0, [r3, #0]
 8010216:	f7ff bf8d 	b.w	8010134 <_puts_r>
 801021a:	bf00      	nop
 801021c:	200000dc 	.word	0x200000dc

08010220 <nanf>:
 8010220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010228 <nanf+0x8>
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	7fc00000 	.word	0x7fc00000

0801022c <siprintf>:
 801022c:	b40e      	push	{r1, r2, r3}
 801022e:	b500      	push	{lr}
 8010230:	b09c      	sub	sp, #112	; 0x70
 8010232:	ab1d      	add	r3, sp, #116	; 0x74
 8010234:	9002      	str	r0, [sp, #8]
 8010236:	9006      	str	r0, [sp, #24]
 8010238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801023c:	4809      	ldr	r0, [pc, #36]	; (8010264 <siprintf+0x38>)
 801023e:	9107      	str	r1, [sp, #28]
 8010240:	9104      	str	r1, [sp, #16]
 8010242:	4909      	ldr	r1, [pc, #36]	; (8010268 <siprintf+0x3c>)
 8010244:	f853 2b04 	ldr.w	r2, [r3], #4
 8010248:	9105      	str	r1, [sp, #20]
 801024a:	6800      	ldr	r0, [r0, #0]
 801024c:	9301      	str	r3, [sp, #4]
 801024e:	a902      	add	r1, sp, #8
 8010250:	f003 fa04 	bl	801365c <_svfiprintf_r>
 8010254:	9b02      	ldr	r3, [sp, #8]
 8010256:	2200      	movs	r2, #0
 8010258:	701a      	strb	r2, [r3, #0]
 801025a:	b01c      	add	sp, #112	; 0x70
 801025c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010260:	b003      	add	sp, #12
 8010262:	4770      	bx	lr
 8010264:	200000dc 	.word	0x200000dc
 8010268:	ffff0208 	.word	0xffff0208

0801026c <sulp>:
 801026c:	b570      	push	{r4, r5, r6, lr}
 801026e:	4604      	mov	r4, r0
 8010270:	460d      	mov	r5, r1
 8010272:	ec45 4b10 	vmov	d0, r4, r5
 8010276:	4616      	mov	r6, r2
 8010278:	f002 ff20 	bl	80130bc <__ulp>
 801027c:	ec51 0b10 	vmov	r0, r1, d0
 8010280:	b17e      	cbz	r6, 80102a2 <sulp+0x36>
 8010282:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010286:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801028a:	2b00      	cmp	r3, #0
 801028c:	dd09      	ble.n	80102a2 <sulp+0x36>
 801028e:	051b      	lsls	r3, r3, #20
 8010290:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010294:	2400      	movs	r4, #0
 8010296:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801029a:	4622      	mov	r2, r4
 801029c:	462b      	mov	r3, r5
 801029e:	f7f0 f9d3 	bl	8000648 <__aeabi_dmul>
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
 80102a4:	0000      	movs	r0, r0
	...

080102a8 <_strtod_l>:
 80102a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ac:	ed2d 8b02 	vpush	{d8}
 80102b0:	b09d      	sub	sp, #116	; 0x74
 80102b2:	461f      	mov	r7, r3
 80102b4:	2300      	movs	r3, #0
 80102b6:	9318      	str	r3, [sp, #96]	; 0x60
 80102b8:	4ba2      	ldr	r3, [pc, #648]	; (8010544 <_strtod_l+0x29c>)
 80102ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	9305      	str	r3, [sp, #20]
 80102c0:	4604      	mov	r4, r0
 80102c2:	4618      	mov	r0, r3
 80102c4:	4688      	mov	r8, r1
 80102c6:	f7ef ffab 	bl	8000220 <strlen>
 80102ca:	f04f 0a00 	mov.w	sl, #0
 80102ce:	4605      	mov	r5, r0
 80102d0:	f04f 0b00 	mov.w	fp, #0
 80102d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80102d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80102da:	781a      	ldrb	r2, [r3, #0]
 80102dc:	2a2b      	cmp	r2, #43	; 0x2b
 80102de:	d04e      	beq.n	801037e <_strtod_l+0xd6>
 80102e0:	d83b      	bhi.n	801035a <_strtod_l+0xb2>
 80102e2:	2a0d      	cmp	r2, #13
 80102e4:	d834      	bhi.n	8010350 <_strtod_l+0xa8>
 80102e6:	2a08      	cmp	r2, #8
 80102e8:	d834      	bhi.n	8010354 <_strtod_l+0xac>
 80102ea:	2a00      	cmp	r2, #0
 80102ec:	d03e      	beq.n	801036c <_strtod_l+0xc4>
 80102ee:	2300      	movs	r3, #0
 80102f0:	930a      	str	r3, [sp, #40]	; 0x28
 80102f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80102f4:	7833      	ldrb	r3, [r6, #0]
 80102f6:	2b30      	cmp	r3, #48	; 0x30
 80102f8:	f040 80b0 	bne.w	801045c <_strtod_l+0x1b4>
 80102fc:	7873      	ldrb	r3, [r6, #1]
 80102fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010302:	2b58      	cmp	r3, #88	; 0x58
 8010304:	d168      	bne.n	80103d8 <_strtod_l+0x130>
 8010306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	ab18      	add	r3, sp, #96	; 0x60
 801030c:	9702      	str	r7, [sp, #8]
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	4a8d      	ldr	r2, [pc, #564]	; (8010548 <_strtod_l+0x2a0>)
 8010312:	ab19      	add	r3, sp, #100	; 0x64
 8010314:	a917      	add	r1, sp, #92	; 0x5c
 8010316:	4620      	mov	r0, r4
 8010318:	f001 ffb6 	bl	8012288 <__gethex>
 801031c:	f010 0707 	ands.w	r7, r0, #7
 8010320:	4605      	mov	r5, r0
 8010322:	d005      	beq.n	8010330 <_strtod_l+0x88>
 8010324:	2f06      	cmp	r7, #6
 8010326:	d12c      	bne.n	8010382 <_strtod_l+0xda>
 8010328:	3601      	adds	r6, #1
 801032a:	2300      	movs	r3, #0
 801032c:	9617      	str	r6, [sp, #92]	; 0x5c
 801032e:	930a      	str	r3, [sp, #40]	; 0x28
 8010330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010332:	2b00      	cmp	r3, #0
 8010334:	f040 8590 	bne.w	8010e58 <_strtod_l+0xbb0>
 8010338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801033a:	b1eb      	cbz	r3, 8010378 <_strtod_l+0xd0>
 801033c:	4652      	mov	r2, sl
 801033e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010342:	ec43 2b10 	vmov	d0, r2, r3
 8010346:	b01d      	add	sp, #116	; 0x74
 8010348:	ecbd 8b02 	vpop	{d8}
 801034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010350:	2a20      	cmp	r2, #32
 8010352:	d1cc      	bne.n	80102ee <_strtod_l+0x46>
 8010354:	3301      	adds	r3, #1
 8010356:	9317      	str	r3, [sp, #92]	; 0x5c
 8010358:	e7be      	b.n	80102d8 <_strtod_l+0x30>
 801035a:	2a2d      	cmp	r2, #45	; 0x2d
 801035c:	d1c7      	bne.n	80102ee <_strtod_l+0x46>
 801035e:	2201      	movs	r2, #1
 8010360:	920a      	str	r2, [sp, #40]	; 0x28
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	9217      	str	r2, [sp, #92]	; 0x5c
 8010366:	785b      	ldrb	r3, [r3, #1]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1c2      	bne.n	80102f2 <_strtod_l+0x4a>
 801036c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801036e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010372:	2b00      	cmp	r3, #0
 8010374:	f040 856e 	bne.w	8010e54 <_strtod_l+0xbac>
 8010378:	4652      	mov	r2, sl
 801037a:	465b      	mov	r3, fp
 801037c:	e7e1      	b.n	8010342 <_strtod_l+0x9a>
 801037e:	2200      	movs	r2, #0
 8010380:	e7ee      	b.n	8010360 <_strtod_l+0xb8>
 8010382:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010384:	b13a      	cbz	r2, 8010396 <_strtod_l+0xee>
 8010386:	2135      	movs	r1, #53	; 0x35
 8010388:	a81a      	add	r0, sp, #104	; 0x68
 801038a:	f002 ffa2 	bl	80132d2 <__copybits>
 801038e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010390:	4620      	mov	r0, r4
 8010392:	f002 fb61 	bl	8012a58 <_Bfree>
 8010396:	3f01      	subs	r7, #1
 8010398:	2f04      	cmp	r7, #4
 801039a:	d806      	bhi.n	80103aa <_strtod_l+0x102>
 801039c:	e8df f007 	tbb	[pc, r7]
 80103a0:	1714030a 	.word	0x1714030a
 80103a4:	0a          	.byte	0x0a
 80103a5:	00          	.byte	0x00
 80103a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80103aa:	0728      	lsls	r0, r5, #28
 80103ac:	d5c0      	bpl.n	8010330 <_strtod_l+0x88>
 80103ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80103b2:	e7bd      	b.n	8010330 <_strtod_l+0x88>
 80103b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80103b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80103ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80103be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80103c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103c6:	e7f0      	b.n	80103aa <_strtod_l+0x102>
 80103c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801054c <_strtod_l+0x2a4>
 80103cc:	e7ed      	b.n	80103aa <_strtod_l+0x102>
 80103ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80103d2:	f04f 3aff 	mov.w	sl, #4294967295
 80103d6:	e7e8      	b.n	80103aa <_strtod_l+0x102>
 80103d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103da:	1c5a      	adds	r2, r3, #1
 80103dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80103de:	785b      	ldrb	r3, [r3, #1]
 80103e0:	2b30      	cmp	r3, #48	; 0x30
 80103e2:	d0f9      	beq.n	80103d8 <_strtod_l+0x130>
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d0a3      	beq.n	8010330 <_strtod_l+0x88>
 80103e8:	2301      	movs	r3, #1
 80103ea:	f04f 0900 	mov.w	r9, #0
 80103ee:	9304      	str	r3, [sp, #16]
 80103f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103f2:	9308      	str	r3, [sp, #32]
 80103f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80103f8:	464f      	mov	r7, r9
 80103fa:	220a      	movs	r2, #10
 80103fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80103fe:	7806      	ldrb	r6, [r0, #0]
 8010400:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010404:	b2d9      	uxtb	r1, r3
 8010406:	2909      	cmp	r1, #9
 8010408:	d92a      	bls.n	8010460 <_strtod_l+0x1b8>
 801040a:	9905      	ldr	r1, [sp, #20]
 801040c:	462a      	mov	r2, r5
 801040e:	f003 fac6 	bl	801399e <strncmp>
 8010412:	b398      	cbz	r0, 801047c <_strtod_l+0x1d4>
 8010414:	2000      	movs	r0, #0
 8010416:	4632      	mov	r2, r6
 8010418:	463d      	mov	r5, r7
 801041a:	9005      	str	r0, [sp, #20]
 801041c:	4603      	mov	r3, r0
 801041e:	2a65      	cmp	r2, #101	; 0x65
 8010420:	d001      	beq.n	8010426 <_strtod_l+0x17e>
 8010422:	2a45      	cmp	r2, #69	; 0x45
 8010424:	d118      	bne.n	8010458 <_strtod_l+0x1b0>
 8010426:	b91d      	cbnz	r5, 8010430 <_strtod_l+0x188>
 8010428:	9a04      	ldr	r2, [sp, #16]
 801042a:	4302      	orrs	r2, r0
 801042c:	d09e      	beq.n	801036c <_strtod_l+0xc4>
 801042e:	2500      	movs	r5, #0
 8010430:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010434:	f108 0201 	add.w	r2, r8, #1
 8010438:	9217      	str	r2, [sp, #92]	; 0x5c
 801043a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801043e:	2a2b      	cmp	r2, #43	; 0x2b
 8010440:	d075      	beq.n	801052e <_strtod_l+0x286>
 8010442:	2a2d      	cmp	r2, #45	; 0x2d
 8010444:	d07b      	beq.n	801053e <_strtod_l+0x296>
 8010446:	f04f 0c00 	mov.w	ip, #0
 801044a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801044e:	2909      	cmp	r1, #9
 8010450:	f240 8082 	bls.w	8010558 <_strtod_l+0x2b0>
 8010454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010458:	2600      	movs	r6, #0
 801045a:	e09d      	b.n	8010598 <_strtod_l+0x2f0>
 801045c:	2300      	movs	r3, #0
 801045e:	e7c4      	b.n	80103ea <_strtod_l+0x142>
 8010460:	2f08      	cmp	r7, #8
 8010462:	bfd8      	it	le
 8010464:	9907      	ldrle	r1, [sp, #28]
 8010466:	f100 0001 	add.w	r0, r0, #1
 801046a:	bfda      	itte	le
 801046c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010470:	9307      	strle	r3, [sp, #28]
 8010472:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010476:	3701      	adds	r7, #1
 8010478:	9017      	str	r0, [sp, #92]	; 0x5c
 801047a:	e7bf      	b.n	80103fc <_strtod_l+0x154>
 801047c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801047e:	195a      	adds	r2, r3, r5
 8010480:	9217      	str	r2, [sp, #92]	; 0x5c
 8010482:	5d5a      	ldrb	r2, [r3, r5]
 8010484:	2f00      	cmp	r7, #0
 8010486:	d037      	beq.n	80104f8 <_strtod_l+0x250>
 8010488:	9005      	str	r0, [sp, #20]
 801048a:	463d      	mov	r5, r7
 801048c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010490:	2b09      	cmp	r3, #9
 8010492:	d912      	bls.n	80104ba <_strtod_l+0x212>
 8010494:	2301      	movs	r3, #1
 8010496:	e7c2      	b.n	801041e <_strtod_l+0x176>
 8010498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801049a:	1c5a      	adds	r2, r3, #1
 801049c:	9217      	str	r2, [sp, #92]	; 0x5c
 801049e:	785a      	ldrb	r2, [r3, #1]
 80104a0:	3001      	adds	r0, #1
 80104a2:	2a30      	cmp	r2, #48	; 0x30
 80104a4:	d0f8      	beq.n	8010498 <_strtod_l+0x1f0>
 80104a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80104aa:	2b08      	cmp	r3, #8
 80104ac:	f200 84d9 	bhi.w	8010e62 <_strtod_l+0xbba>
 80104b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104b2:	9005      	str	r0, [sp, #20]
 80104b4:	2000      	movs	r0, #0
 80104b6:	9308      	str	r3, [sp, #32]
 80104b8:	4605      	mov	r5, r0
 80104ba:	3a30      	subs	r2, #48	; 0x30
 80104bc:	f100 0301 	add.w	r3, r0, #1
 80104c0:	d014      	beq.n	80104ec <_strtod_l+0x244>
 80104c2:	9905      	ldr	r1, [sp, #20]
 80104c4:	4419      	add	r1, r3
 80104c6:	9105      	str	r1, [sp, #20]
 80104c8:	462b      	mov	r3, r5
 80104ca:	eb00 0e05 	add.w	lr, r0, r5
 80104ce:	210a      	movs	r1, #10
 80104d0:	4573      	cmp	r3, lr
 80104d2:	d113      	bne.n	80104fc <_strtod_l+0x254>
 80104d4:	182b      	adds	r3, r5, r0
 80104d6:	2b08      	cmp	r3, #8
 80104d8:	f105 0501 	add.w	r5, r5, #1
 80104dc:	4405      	add	r5, r0
 80104de:	dc1c      	bgt.n	801051a <_strtod_l+0x272>
 80104e0:	9907      	ldr	r1, [sp, #28]
 80104e2:	230a      	movs	r3, #10
 80104e4:	fb03 2301 	mla	r3, r3, r1, r2
 80104e8:	9307      	str	r3, [sp, #28]
 80104ea:	2300      	movs	r3, #0
 80104ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80104ee:	1c51      	adds	r1, r2, #1
 80104f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80104f2:	7852      	ldrb	r2, [r2, #1]
 80104f4:	4618      	mov	r0, r3
 80104f6:	e7c9      	b.n	801048c <_strtod_l+0x1e4>
 80104f8:	4638      	mov	r0, r7
 80104fa:	e7d2      	b.n	80104a2 <_strtod_l+0x1fa>
 80104fc:	2b08      	cmp	r3, #8
 80104fe:	dc04      	bgt.n	801050a <_strtod_l+0x262>
 8010500:	9e07      	ldr	r6, [sp, #28]
 8010502:	434e      	muls	r6, r1
 8010504:	9607      	str	r6, [sp, #28]
 8010506:	3301      	adds	r3, #1
 8010508:	e7e2      	b.n	80104d0 <_strtod_l+0x228>
 801050a:	f103 0c01 	add.w	ip, r3, #1
 801050e:	f1bc 0f10 	cmp.w	ip, #16
 8010512:	bfd8      	it	le
 8010514:	fb01 f909 	mulle.w	r9, r1, r9
 8010518:	e7f5      	b.n	8010506 <_strtod_l+0x25e>
 801051a:	2d10      	cmp	r5, #16
 801051c:	bfdc      	itt	le
 801051e:	230a      	movle	r3, #10
 8010520:	fb03 2909 	mlale	r9, r3, r9, r2
 8010524:	e7e1      	b.n	80104ea <_strtod_l+0x242>
 8010526:	2300      	movs	r3, #0
 8010528:	9305      	str	r3, [sp, #20]
 801052a:	2301      	movs	r3, #1
 801052c:	e77c      	b.n	8010428 <_strtod_l+0x180>
 801052e:	f04f 0c00 	mov.w	ip, #0
 8010532:	f108 0202 	add.w	r2, r8, #2
 8010536:	9217      	str	r2, [sp, #92]	; 0x5c
 8010538:	f898 2002 	ldrb.w	r2, [r8, #2]
 801053c:	e785      	b.n	801044a <_strtod_l+0x1a2>
 801053e:	f04f 0c01 	mov.w	ip, #1
 8010542:	e7f6      	b.n	8010532 <_strtod_l+0x28a>
 8010544:	0802a99c 	.word	0x0802a99c
 8010548:	0802a6b0 	.word	0x0802a6b0
 801054c:	7ff00000 	.word	0x7ff00000
 8010550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010552:	1c51      	adds	r1, r2, #1
 8010554:	9117      	str	r1, [sp, #92]	; 0x5c
 8010556:	7852      	ldrb	r2, [r2, #1]
 8010558:	2a30      	cmp	r2, #48	; 0x30
 801055a:	d0f9      	beq.n	8010550 <_strtod_l+0x2a8>
 801055c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010560:	2908      	cmp	r1, #8
 8010562:	f63f af79 	bhi.w	8010458 <_strtod_l+0x1b0>
 8010566:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801056a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801056c:	9206      	str	r2, [sp, #24]
 801056e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010570:	1c51      	adds	r1, r2, #1
 8010572:	9117      	str	r1, [sp, #92]	; 0x5c
 8010574:	7852      	ldrb	r2, [r2, #1]
 8010576:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801057a:	2e09      	cmp	r6, #9
 801057c:	d937      	bls.n	80105ee <_strtod_l+0x346>
 801057e:	9e06      	ldr	r6, [sp, #24]
 8010580:	1b89      	subs	r1, r1, r6
 8010582:	2908      	cmp	r1, #8
 8010584:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010588:	dc02      	bgt.n	8010590 <_strtod_l+0x2e8>
 801058a:	4576      	cmp	r6, lr
 801058c:	bfa8      	it	ge
 801058e:	4676      	movge	r6, lr
 8010590:	f1bc 0f00 	cmp.w	ip, #0
 8010594:	d000      	beq.n	8010598 <_strtod_l+0x2f0>
 8010596:	4276      	negs	r6, r6
 8010598:	2d00      	cmp	r5, #0
 801059a:	d14d      	bne.n	8010638 <_strtod_l+0x390>
 801059c:	9904      	ldr	r1, [sp, #16]
 801059e:	4301      	orrs	r1, r0
 80105a0:	f47f aec6 	bne.w	8010330 <_strtod_l+0x88>
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f47f aee1 	bne.w	801036c <_strtod_l+0xc4>
 80105aa:	2a69      	cmp	r2, #105	; 0x69
 80105ac:	d027      	beq.n	80105fe <_strtod_l+0x356>
 80105ae:	dc24      	bgt.n	80105fa <_strtod_l+0x352>
 80105b0:	2a49      	cmp	r2, #73	; 0x49
 80105b2:	d024      	beq.n	80105fe <_strtod_l+0x356>
 80105b4:	2a4e      	cmp	r2, #78	; 0x4e
 80105b6:	f47f aed9 	bne.w	801036c <_strtod_l+0xc4>
 80105ba:	499f      	ldr	r1, [pc, #636]	; (8010838 <_strtod_l+0x590>)
 80105bc:	a817      	add	r0, sp, #92	; 0x5c
 80105be:	f002 f8bb 	bl	8012738 <__match>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	f43f aed2 	beq.w	801036c <_strtod_l+0xc4>
 80105c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2b28      	cmp	r3, #40	; 0x28
 80105ce:	d12d      	bne.n	801062c <_strtod_l+0x384>
 80105d0:	499a      	ldr	r1, [pc, #616]	; (801083c <_strtod_l+0x594>)
 80105d2:	aa1a      	add	r2, sp, #104	; 0x68
 80105d4:	a817      	add	r0, sp, #92	; 0x5c
 80105d6:	f002 f8c3 	bl	8012760 <__hexnan>
 80105da:	2805      	cmp	r0, #5
 80105dc:	d126      	bne.n	801062c <_strtod_l+0x384>
 80105de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80105e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80105e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80105ec:	e6a0      	b.n	8010330 <_strtod_l+0x88>
 80105ee:	210a      	movs	r1, #10
 80105f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80105f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80105f8:	e7b9      	b.n	801056e <_strtod_l+0x2c6>
 80105fa:	2a6e      	cmp	r2, #110	; 0x6e
 80105fc:	e7db      	b.n	80105b6 <_strtod_l+0x30e>
 80105fe:	4990      	ldr	r1, [pc, #576]	; (8010840 <_strtod_l+0x598>)
 8010600:	a817      	add	r0, sp, #92	; 0x5c
 8010602:	f002 f899 	bl	8012738 <__match>
 8010606:	2800      	cmp	r0, #0
 8010608:	f43f aeb0 	beq.w	801036c <_strtod_l+0xc4>
 801060c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801060e:	498d      	ldr	r1, [pc, #564]	; (8010844 <_strtod_l+0x59c>)
 8010610:	3b01      	subs	r3, #1
 8010612:	a817      	add	r0, sp, #92	; 0x5c
 8010614:	9317      	str	r3, [sp, #92]	; 0x5c
 8010616:	f002 f88f 	bl	8012738 <__match>
 801061a:	b910      	cbnz	r0, 8010622 <_strtod_l+0x37a>
 801061c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801061e:	3301      	adds	r3, #1
 8010620:	9317      	str	r3, [sp, #92]	; 0x5c
 8010622:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010854 <_strtod_l+0x5ac>
 8010626:	f04f 0a00 	mov.w	sl, #0
 801062a:	e681      	b.n	8010330 <_strtod_l+0x88>
 801062c:	4886      	ldr	r0, [pc, #536]	; (8010848 <_strtod_l+0x5a0>)
 801062e:	f003 f917 	bl	8013860 <nan>
 8010632:	ec5b ab10 	vmov	sl, fp, d0
 8010636:	e67b      	b.n	8010330 <_strtod_l+0x88>
 8010638:	9b05      	ldr	r3, [sp, #20]
 801063a:	9807      	ldr	r0, [sp, #28]
 801063c:	1af3      	subs	r3, r6, r3
 801063e:	2f00      	cmp	r7, #0
 8010640:	bf08      	it	eq
 8010642:	462f      	moveq	r7, r5
 8010644:	2d10      	cmp	r5, #16
 8010646:	9306      	str	r3, [sp, #24]
 8010648:	46a8      	mov	r8, r5
 801064a:	bfa8      	it	ge
 801064c:	f04f 0810 	movge.w	r8, #16
 8010650:	f7ef ff80 	bl	8000554 <__aeabi_ui2d>
 8010654:	2d09      	cmp	r5, #9
 8010656:	4682      	mov	sl, r0
 8010658:	468b      	mov	fp, r1
 801065a:	dd13      	ble.n	8010684 <_strtod_l+0x3dc>
 801065c:	4b7b      	ldr	r3, [pc, #492]	; (801084c <_strtod_l+0x5a4>)
 801065e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010662:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010666:	f7ef ffef 	bl	8000648 <__aeabi_dmul>
 801066a:	4682      	mov	sl, r0
 801066c:	4648      	mov	r0, r9
 801066e:	468b      	mov	fp, r1
 8010670:	f7ef ff70 	bl	8000554 <__aeabi_ui2d>
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	4650      	mov	r0, sl
 801067a:	4659      	mov	r1, fp
 801067c:	f7ef fe2e 	bl	80002dc <__adddf3>
 8010680:	4682      	mov	sl, r0
 8010682:	468b      	mov	fp, r1
 8010684:	2d0f      	cmp	r5, #15
 8010686:	dc38      	bgt.n	80106fa <_strtod_l+0x452>
 8010688:	9b06      	ldr	r3, [sp, #24]
 801068a:	2b00      	cmp	r3, #0
 801068c:	f43f ae50 	beq.w	8010330 <_strtod_l+0x88>
 8010690:	dd24      	ble.n	80106dc <_strtod_l+0x434>
 8010692:	2b16      	cmp	r3, #22
 8010694:	dc0b      	bgt.n	80106ae <_strtod_l+0x406>
 8010696:	496d      	ldr	r1, [pc, #436]	; (801084c <_strtod_l+0x5a4>)
 8010698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801069c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106a0:	4652      	mov	r2, sl
 80106a2:	465b      	mov	r3, fp
 80106a4:	f7ef ffd0 	bl	8000648 <__aeabi_dmul>
 80106a8:	4682      	mov	sl, r0
 80106aa:	468b      	mov	fp, r1
 80106ac:	e640      	b.n	8010330 <_strtod_l+0x88>
 80106ae:	9a06      	ldr	r2, [sp, #24]
 80106b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80106b4:	4293      	cmp	r3, r2
 80106b6:	db20      	blt.n	80106fa <_strtod_l+0x452>
 80106b8:	4c64      	ldr	r4, [pc, #400]	; (801084c <_strtod_l+0x5a4>)
 80106ba:	f1c5 050f 	rsb	r5, r5, #15
 80106be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80106c2:	4652      	mov	r2, sl
 80106c4:	465b      	mov	r3, fp
 80106c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106ca:	f7ef ffbd 	bl	8000648 <__aeabi_dmul>
 80106ce:	9b06      	ldr	r3, [sp, #24]
 80106d0:	1b5d      	subs	r5, r3, r5
 80106d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80106d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80106da:	e7e3      	b.n	80106a4 <_strtod_l+0x3fc>
 80106dc:	9b06      	ldr	r3, [sp, #24]
 80106de:	3316      	adds	r3, #22
 80106e0:	db0b      	blt.n	80106fa <_strtod_l+0x452>
 80106e2:	9b05      	ldr	r3, [sp, #20]
 80106e4:	1b9e      	subs	r6, r3, r6
 80106e6:	4b59      	ldr	r3, [pc, #356]	; (801084c <_strtod_l+0x5a4>)
 80106e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80106ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80106f0:	4650      	mov	r0, sl
 80106f2:	4659      	mov	r1, fp
 80106f4:	f7f0 f8d2 	bl	800089c <__aeabi_ddiv>
 80106f8:	e7d6      	b.n	80106a8 <_strtod_l+0x400>
 80106fa:	9b06      	ldr	r3, [sp, #24]
 80106fc:	eba5 0808 	sub.w	r8, r5, r8
 8010700:	4498      	add	r8, r3
 8010702:	f1b8 0f00 	cmp.w	r8, #0
 8010706:	dd74      	ble.n	80107f2 <_strtod_l+0x54a>
 8010708:	f018 030f 	ands.w	r3, r8, #15
 801070c:	d00a      	beq.n	8010724 <_strtod_l+0x47c>
 801070e:	494f      	ldr	r1, [pc, #316]	; (801084c <_strtod_l+0x5a4>)
 8010710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010714:	4652      	mov	r2, sl
 8010716:	465b      	mov	r3, fp
 8010718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801071c:	f7ef ff94 	bl	8000648 <__aeabi_dmul>
 8010720:	4682      	mov	sl, r0
 8010722:	468b      	mov	fp, r1
 8010724:	f038 080f 	bics.w	r8, r8, #15
 8010728:	d04f      	beq.n	80107ca <_strtod_l+0x522>
 801072a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801072e:	dd22      	ble.n	8010776 <_strtod_l+0x4ce>
 8010730:	2500      	movs	r5, #0
 8010732:	462e      	mov	r6, r5
 8010734:	9507      	str	r5, [sp, #28]
 8010736:	9505      	str	r5, [sp, #20]
 8010738:	2322      	movs	r3, #34	; 0x22
 801073a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010854 <_strtod_l+0x5ac>
 801073e:	6023      	str	r3, [r4, #0]
 8010740:	f04f 0a00 	mov.w	sl, #0
 8010744:	9b07      	ldr	r3, [sp, #28]
 8010746:	2b00      	cmp	r3, #0
 8010748:	f43f adf2 	beq.w	8010330 <_strtod_l+0x88>
 801074c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801074e:	4620      	mov	r0, r4
 8010750:	f002 f982 	bl	8012a58 <_Bfree>
 8010754:	9905      	ldr	r1, [sp, #20]
 8010756:	4620      	mov	r0, r4
 8010758:	f002 f97e 	bl	8012a58 <_Bfree>
 801075c:	4631      	mov	r1, r6
 801075e:	4620      	mov	r0, r4
 8010760:	f002 f97a 	bl	8012a58 <_Bfree>
 8010764:	9907      	ldr	r1, [sp, #28]
 8010766:	4620      	mov	r0, r4
 8010768:	f002 f976 	bl	8012a58 <_Bfree>
 801076c:	4629      	mov	r1, r5
 801076e:	4620      	mov	r0, r4
 8010770:	f002 f972 	bl	8012a58 <_Bfree>
 8010774:	e5dc      	b.n	8010330 <_strtod_l+0x88>
 8010776:	4b36      	ldr	r3, [pc, #216]	; (8010850 <_strtod_l+0x5a8>)
 8010778:	9304      	str	r3, [sp, #16]
 801077a:	2300      	movs	r3, #0
 801077c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010780:	4650      	mov	r0, sl
 8010782:	4659      	mov	r1, fp
 8010784:	4699      	mov	r9, r3
 8010786:	f1b8 0f01 	cmp.w	r8, #1
 801078a:	dc21      	bgt.n	80107d0 <_strtod_l+0x528>
 801078c:	b10b      	cbz	r3, 8010792 <_strtod_l+0x4ea>
 801078e:	4682      	mov	sl, r0
 8010790:	468b      	mov	fp, r1
 8010792:	4b2f      	ldr	r3, [pc, #188]	; (8010850 <_strtod_l+0x5a8>)
 8010794:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010798:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801079c:	4652      	mov	r2, sl
 801079e:	465b      	mov	r3, fp
 80107a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80107a4:	f7ef ff50 	bl	8000648 <__aeabi_dmul>
 80107a8:	4b2a      	ldr	r3, [pc, #168]	; (8010854 <_strtod_l+0x5ac>)
 80107aa:	460a      	mov	r2, r1
 80107ac:	400b      	ands	r3, r1
 80107ae:	492a      	ldr	r1, [pc, #168]	; (8010858 <_strtod_l+0x5b0>)
 80107b0:	428b      	cmp	r3, r1
 80107b2:	4682      	mov	sl, r0
 80107b4:	d8bc      	bhi.n	8010730 <_strtod_l+0x488>
 80107b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80107ba:	428b      	cmp	r3, r1
 80107bc:	bf86      	itte	hi
 80107be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801085c <_strtod_l+0x5b4>
 80107c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80107c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80107ca:	2300      	movs	r3, #0
 80107cc:	9304      	str	r3, [sp, #16]
 80107ce:	e084      	b.n	80108da <_strtod_l+0x632>
 80107d0:	f018 0f01 	tst.w	r8, #1
 80107d4:	d005      	beq.n	80107e2 <_strtod_l+0x53a>
 80107d6:	9b04      	ldr	r3, [sp, #16]
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	f7ef ff34 	bl	8000648 <__aeabi_dmul>
 80107e0:	2301      	movs	r3, #1
 80107e2:	9a04      	ldr	r2, [sp, #16]
 80107e4:	3208      	adds	r2, #8
 80107e6:	f109 0901 	add.w	r9, r9, #1
 80107ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80107ee:	9204      	str	r2, [sp, #16]
 80107f0:	e7c9      	b.n	8010786 <_strtod_l+0x4de>
 80107f2:	d0ea      	beq.n	80107ca <_strtod_l+0x522>
 80107f4:	f1c8 0800 	rsb	r8, r8, #0
 80107f8:	f018 020f 	ands.w	r2, r8, #15
 80107fc:	d00a      	beq.n	8010814 <_strtod_l+0x56c>
 80107fe:	4b13      	ldr	r3, [pc, #76]	; (801084c <_strtod_l+0x5a4>)
 8010800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010804:	4650      	mov	r0, sl
 8010806:	4659      	mov	r1, fp
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	f7f0 f846 	bl	800089c <__aeabi_ddiv>
 8010810:	4682      	mov	sl, r0
 8010812:	468b      	mov	fp, r1
 8010814:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010818:	d0d7      	beq.n	80107ca <_strtod_l+0x522>
 801081a:	f1b8 0f1f 	cmp.w	r8, #31
 801081e:	dd1f      	ble.n	8010860 <_strtod_l+0x5b8>
 8010820:	2500      	movs	r5, #0
 8010822:	462e      	mov	r6, r5
 8010824:	9507      	str	r5, [sp, #28]
 8010826:	9505      	str	r5, [sp, #20]
 8010828:	2322      	movs	r3, #34	; 0x22
 801082a:	f04f 0a00 	mov.w	sl, #0
 801082e:	f04f 0b00 	mov.w	fp, #0
 8010832:	6023      	str	r3, [r4, #0]
 8010834:	e786      	b.n	8010744 <_strtod_l+0x49c>
 8010836:	bf00      	nop
 8010838:	0802a682 	.word	0x0802a682
 801083c:	0802a6c4 	.word	0x0802a6c4
 8010840:	0802a67a 	.word	0x0802a67a
 8010844:	0802a804 	.word	0x0802a804
 8010848:	0802a65f 	.word	0x0802a65f
 801084c:	0802aa58 	.word	0x0802aa58
 8010850:	0802aa30 	.word	0x0802aa30
 8010854:	7ff00000 	.word	0x7ff00000
 8010858:	7ca00000 	.word	0x7ca00000
 801085c:	7fefffff 	.word	0x7fefffff
 8010860:	f018 0310 	ands.w	r3, r8, #16
 8010864:	bf18      	it	ne
 8010866:	236a      	movne	r3, #106	; 0x6a
 8010868:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010c18 <_strtod_l+0x970>
 801086c:	9304      	str	r3, [sp, #16]
 801086e:	4650      	mov	r0, sl
 8010870:	4659      	mov	r1, fp
 8010872:	2300      	movs	r3, #0
 8010874:	f018 0f01 	tst.w	r8, #1
 8010878:	d004      	beq.n	8010884 <_strtod_l+0x5dc>
 801087a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801087e:	f7ef fee3 	bl	8000648 <__aeabi_dmul>
 8010882:	2301      	movs	r3, #1
 8010884:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010888:	f109 0908 	add.w	r9, r9, #8
 801088c:	d1f2      	bne.n	8010874 <_strtod_l+0x5cc>
 801088e:	b10b      	cbz	r3, 8010894 <_strtod_l+0x5ec>
 8010890:	4682      	mov	sl, r0
 8010892:	468b      	mov	fp, r1
 8010894:	9b04      	ldr	r3, [sp, #16]
 8010896:	b1c3      	cbz	r3, 80108ca <_strtod_l+0x622>
 8010898:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801089c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	4659      	mov	r1, fp
 80108a4:	dd11      	ble.n	80108ca <_strtod_l+0x622>
 80108a6:	2b1f      	cmp	r3, #31
 80108a8:	f340 8124 	ble.w	8010af4 <_strtod_l+0x84c>
 80108ac:	2b34      	cmp	r3, #52	; 0x34
 80108ae:	bfde      	ittt	le
 80108b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80108b4:	f04f 33ff 	movle.w	r3, #4294967295
 80108b8:	fa03 f202 	lslle.w	r2, r3, r2
 80108bc:	f04f 0a00 	mov.w	sl, #0
 80108c0:	bfcc      	ite	gt
 80108c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80108c6:	ea02 0b01 	andle.w	fp, r2, r1
 80108ca:	2200      	movs	r2, #0
 80108cc:	2300      	movs	r3, #0
 80108ce:	4650      	mov	r0, sl
 80108d0:	4659      	mov	r1, fp
 80108d2:	f7f0 f921 	bl	8000b18 <__aeabi_dcmpeq>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d1a2      	bne.n	8010820 <_strtod_l+0x578>
 80108da:	9b07      	ldr	r3, [sp, #28]
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	9908      	ldr	r1, [sp, #32]
 80108e0:	462b      	mov	r3, r5
 80108e2:	463a      	mov	r2, r7
 80108e4:	4620      	mov	r0, r4
 80108e6:	f002 f91f 	bl	8012b28 <__s2b>
 80108ea:	9007      	str	r0, [sp, #28]
 80108ec:	2800      	cmp	r0, #0
 80108ee:	f43f af1f 	beq.w	8010730 <_strtod_l+0x488>
 80108f2:	9b05      	ldr	r3, [sp, #20]
 80108f4:	1b9e      	subs	r6, r3, r6
 80108f6:	9b06      	ldr	r3, [sp, #24]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	bfb4      	ite	lt
 80108fc:	4633      	movlt	r3, r6
 80108fe:	2300      	movge	r3, #0
 8010900:	930c      	str	r3, [sp, #48]	; 0x30
 8010902:	9b06      	ldr	r3, [sp, #24]
 8010904:	2500      	movs	r5, #0
 8010906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801090a:	9312      	str	r3, [sp, #72]	; 0x48
 801090c:	462e      	mov	r6, r5
 801090e:	9b07      	ldr	r3, [sp, #28]
 8010910:	4620      	mov	r0, r4
 8010912:	6859      	ldr	r1, [r3, #4]
 8010914:	f002 f860 	bl	80129d8 <_Balloc>
 8010918:	9005      	str	r0, [sp, #20]
 801091a:	2800      	cmp	r0, #0
 801091c:	f43f af0c 	beq.w	8010738 <_strtod_l+0x490>
 8010920:	9b07      	ldr	r3, [sp, #28]
 8010922:	691a      	ldr	r2, [r3, #16]
 8010924:	3202      	adds	r2, #2
 8010926:	f103 010c 	add.w	r1, r3, #12
 801092a:	0092      	lsls	r2, r2, #2
 801092c:	300c      	adds	r0, #12
 801092e:	f7fe fc17 	bl	800f160 <memcpy>
 8010932:	ec4b ab10 	vmov	d0, sl, fp
 8010936:	aa1a      	add	r2, sp, #104	; 0x68
 8010938:	a919      	add	r1, sp, #100	; 0x64
 801093a:	4620      	mov	r0, r4
 801093c:	f002 fc3a 	bl	80131b4 <__d2b>
 8010940:	ec4b ab18 	vmov	d8, sl, fp
 8010944:	9018      	str	r0, [sp, #96]	; 0x60
 8010946:	2800      	cmp	r0, #0
 8010948:	f43f aef6 	beq.w	8010738 <_strtod_l+0x490>
 801094c:	2101      	movs	r1, #1
 801094e:	4620      	mov	r0, r4
 8010950:	f002 f984 	bl	8012c5c <__i2b>
 8010954:	4606      	mov	r6, r0
 8010956:	2800      	cmp	r0, #0
 8010958:	f43f aeee 	beq.w	8010738 <_strtod_l+0x490>
 801095c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801095e:	9904      	ldr	r1, [sp, #16]
 8010960:	2b00      	cmp	r3, #0
 8010962:	bfab      	itete	ge
 8010964:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010966:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010968:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801096a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801096e:	bfac      	ite	ge
 8010970:	eb03 0902 	addge.w	r9, r3, r2
 8010974:	1ad7      	sublt	r7, r2, r3
 8010976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010978:	eba3 0801 	sub.w	r8, r3, r1
 801097c:	4490      	add	r8, r2
 801097e:	4ba1      	ldr	r3, [pc, #644]	; (8010c04 <_strtod_l+0x95c>)
 8010980:	f108 38ff 	add.w	r8, r8, #4294967295
 8010984:	4598      	cmp	r8, r3
 8010986:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801098a:	f280 80c7 	bge.w	8010b1c <_strtod_l+0x874>
 801098e:	eba3 0308 	sub.w	r3, r3, r8
 8010992:	2b1f      	cmp	r3, #31
 8010994:	eba2 0203 	sub.w	r2, r2, r3
 8010998:	f04f 0101 	mov.w	r1, #1
 801099c:	f300 80b1 	bgt.w	8010b02 <_strtod_l+0x85a>
 80109a0:	fa01 f303 	lsl.w	r3, r1, r3
 80109a4:	930d      	str	r3, [sp, #52]	; 0x34
 80109a6:	2300      	movs	r3, #0
 80109a8:	9308      	str	r3, [sp, #32]
 80109aa:	eb09 0802 	add.w	r8, r9, r2
 80109ae:	9b04      	ldr	r3, [sp, #16]
 80109b0:	45c1      	cmp	r9, r8
 80109b2:	4417      	add	r7, r2
 80109b4:	441f      	add	r7, r3
 80109b6:	464b      	mov	r3, r9
 80109b8:	bfa8      	it	ge
 80109ba:	4643      	movge	r3, r8
 80109bc:	42bb      	cmp	r3, r7
 80109be:	bfa8      	it	ge
 80109c0:	463b      	movge	r3, r7
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	bfc2      	ittt	gt
 80109c6:	eba8 0803 	subgt.w	r8, r8, r3
 80109ca:	1aff      	subgt	r7, r7, r3
 80109cc:	eba9 0903 	subgt.w	r9, r9, r3
 80109d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	dd17      	ble.n	8010a06 <_strtod_l+0x75e>
 80109d6:	4631      	mov	r1, r6
 80109d8:	461a      	mov	r2, r3
 80109da:	4620      	mov	r0, r4
 80109dc:	f002 f9fe 	bl	8012ddc <__pow5mult>
 80109e0:	4606      	mov	r6, r0
 80109e2:	2800      	cmp	r0, #0
 80109e4:	f43f aea8 	beq.w	8010738 <_strtod_l+0x490>
 80109e8:	4601      	mov	r1, r0
 80109ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80109ec:	4620      	mov	r0, r4
 80109ee:	f002 f94b 	bl	8012c88 <__multiply>
 80109f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80109f4:	2800      	cmp	r0, #0
 80109f6:	f43f ae9f 	beq.w	8010738 <_strtod_l+0x490>
 80109fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80109fc:	4620      	mov	r0, r4
 80109fe:	f002 f82b 	bl	8012a58 <_Bfree>
 8010a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a04:	9318      	str	r3, [sp, #96]	; 0x60
 8010a06:	f1b8 0f00 	cmp.w	r8, #0
 8010a0a:	f300 808c 	bgt.w	8010b26 <_strtod_l+0x87e>
 8010a0e:	9b06      	ldr	r3, [sp, #24]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	dd08      	ble.n	8010a26 <_strtod_l+0x77e>
 8010a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a16:	9905      	ldr	r1, [sp, #20]
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f002 f9df 	bl	8012ddc <__pow5mult>
 8010a1e:	9005      	str	r0, [sp, #20]
 8010a20:	2800      	cmp	r0, #0
 8010a22:	f43f ae89 	beq.w	8010738 <_strtod_l+0x490>
 8010a26:	2f00      	cmp	r7, #0
 8010a28:	dd08      	ble.n	8010a3c <_strtod_l+0x794>
 8010a2a:	9905      	ldr	r1, [sp, #20]
 8010a2c:	463a      	mov	r2, r7
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f002 fa2e 	bl	8012e90 <__lshift>
 8010a34:	9005      	str	r0, [sp, #20]
 8010a36:	2800      	cmp	r0, #0
 8010a38:	f43f ae7e 	beq.w	8010738 <_strtod_l+0x490>
 8010a3c:	f1b9 0f00 	cmp.w	r9, #0
 8010a40:	dd08      	ble.n	8010a54 <_strtod_l+0x7ac>
 8010a42:	4631      	mov	r1, r6
 8010a44:	464a      	mov	r2, r9
 8010a46:	4620      	mov	r0, r4
 8010a48:	f002 fa22 	bl	8012e90 <__lshift>
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	f43f ae72 	beq.w	8010738 <_strtod_l+0x490>
 8010a54:	9a05      	ldr	r2, [sp, #20]
 8010a56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f002 faa5 	bl	8012fa8 <__mdiff>
 8010a5e:	4605      	mov	r5, r0
 8010a60:	2800      	cmp	r0, #0
 8010a62:	f43f ae69 	beq.w	8010738 <_strtod_l+0x490>
 8010a66:	68c3      	ldr	r3, [r0, #12]
 8010a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	60c3      	str	r3, [r0, #12]
 8010a6e:	4631      	mov	r1, r6
 8010a70:	f002 fa7e 	bl	8012f70 <__mcmp>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	da60      	bge.n	8010b3a <_strtod_l+0x892>
 8010a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8010a7e:	f040 8082 	bne.w	8010b86 <_strtod_l+0x8de>
 8010a82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d17d      	bne.n	8010b86 <_strtod_l+0x8de>
 8010a8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a8e:	0d1b      	lsrs	r3, r3, #20
 8010a90:	051b      	lsls	r3, r3, #20
 8010a92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010a96:	d976      	bls.n	8010b86 <_strtod_l+0x8de>
 8010a98:	696b      	ldr	r3, [r5, #20]
 8010a9a:	b913      	cbnz	r3, 8010aa2 <_strtod_l+0x7fa>
 8010a9c:	692b      	ldr	r3, [r5, #16]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	dd71      	ble.n	8010b86 <_strtod_l+0x8de>
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f002 f9f2 	bl	8012e90 <__lshift>
 8010aac:	4631      	mov	r1, r6
 8010aae:	4605      	mov	r5, r0
 8010ab0:	f002 fa5e 	bl	8012f70 <__mcmp>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	dd66      	ble.n	8010b86 <_strtod_l+0x8de>
 8010ab8:	9904      	ldr	r1, [sp, #16]
 8010aba:	4a53      	ldr	r2, [pc, #332]	; (8010c08 <_strtod_l+0x960>)
 8010abc:	465b      	mov	r3, fp
 8010abe:	2900      	cmp	r1, #0
 8010ac0:	f000 8081 	beq.w	8010bc6 <_strtod_l+0x91e>
 8010ac4:	ea02 010b 	and.w	r1, r2, fp
 8010ac8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010acc:	dc7b      	bgt.n	8010bc6 <_strtod_l+0x91e>
 8010ace:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010ad2:	f77f aea9 	ble.w	8010828 <_strtod_l+0x580>
 8010ad6:	4b4d      	ldr	r3, [pc, #308]	; (8010c0c <_strtod_l+0x964>)
 8010ad8:	4650      	mov	r0, sl
 8010ada:	4659      	mov	r1, fp
 8010adc:	2200      	movs	r2, #0
 8010ade:	f7ef fdb3 	bl	8000648 <__aeabi_dmul>
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	4303      	orrs	r3, r0
 8010ae6:	bf08      	it	eq
 8010ae8:	2322      	moveq	r3, #34	; 0x22
 8010aea:	4682      	mov	sl, r0
 8010aec:	468b      	mov	fp, r1
 8010aee:	bf08      	it	eq
 8010af0:	6023      	streq	r3, [r4, #0]
 8010af2:	e62b      	b.n	801074c <_strtod_l+0x4a4>
 8010af4:	f04f 32ff 	mov.w	r2, #4294967295
 8010af8:	fa02 f303 	lsl.w	r3, r2, r3
 8010afc:	ea03 0a0a 	and.w	sl, r3, sl
 8010b00:	e6e3      	b.n	80108ca <_strtod_l+0x622>
 8010b02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010b06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010b0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010b0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010b12:	fa01 f308 	lsl.w	r3, r1, r8
 8010b16:	9308      	str	r3, [sp, #32]
 8010b18:	910d      	str	r1, [sp, #52]	; 0x34
 8010b1a:	e746      	b.n	80109aa <_strtod_l+0x702>
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	9308      	str	r3, [sp, #32]
 8010b20:	2301      	movs	r3, #1
 8010b22:	930d      	str	r3, [sp, #52]	; 0x34
 8010b24:	e741      	b.n	80109aa <_strtod_l+0x702>
 8010b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b28:	4642      	mov	r2, r8
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f002 f9b0 	bl	8012e90 <__lshift>
 8010b30:	9018      	str	r0, [sp, #96]	; 0x60
 8010b32:	2800      	cmp	r0, #0
 8010b34:	f47f af6b 	bne.w	8010a0e <_strtod_l+0x766>
 8010b38:	e5fe      	b.n	8010738 <_strtod_l+0x490>
 8010b3a:	465f      	mov	r7, fp
 8010b3c:	d16e      	bne.n	8010c1c <_strtod_l+0x974>
 8010b3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b44:	b342      	cbz	r2, 8010b98 <_strtod_l+0x8f0>
 8010b46:	4a32      	ldr	r2, [pc, #200]	; (8010c10 <_strtod_l+0x968>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d128      	bne.n	8010b9e <_strtod_l+0x8f6>
 8010b4c:	9b04      	ldr	r3, [sp, #16]
 8010b4e:	4651      	mov	r1, sl
 8010b50:	b1eb      	cbz	r3, 8010b8e <_strtod_l+0x8e6>
 8010b52:	4b2d      	ldr	r3, [pc, #180]	; (8010c08 <_strtod_l+0x960>)
 8010b54:	403b      	ands	r3, r7
 8010b56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5e:	d819      	bhi.n	8010b94 <_strtod_l+0x8ec>
 8010b60:	0d1b      	lsrs	r3, r3, #20
 8010b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010b66:	fa02 f303 	lsl.w	r3, r2, r3
 8010b6a:	4299      	cmp	r1, r3
 8010b6c:	d117      	bne.n	8010b9e <_strtod_l+0x8f6>
 8010b6e:	4b29      	ldr	r3, [pc, #164]	; (8010c14 <_strtod_l+0x96c>)
 8010b70:	429f      	cmp	r7, r3
 8010b72:	d102      	bne.n	8010b7a <_strtod_l+0x8d2>
 8010b74:	3101      	adds	r1, #1
 8010b76:	f43f addf 	beq.w	8010738 <_strtod_l+0x490>
 8010b7a:	4b23      	ldr	r3, [pc, #140]	; (8010c08 <_strtod_l+0x960>)
 8010b7c:	403b      	ands	r3, r7
 8010b7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010b82:	f04f 0a00 	mov.w	sl, #0
 8010b86:	9b04      	ldr	r3, [sp, #16]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d1a4      	bne.n	8010ad6 <_strtod_l+0x82e>
 8010b8c:	e5de      	b.n	801074c <_strtod_l+0x4a4>
 8010b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b92:	e7ea      	b.n	8010b6a <_strtod_l+0x8c2>
 8010b94:	4613      	mov	r3, r2
 8010b96:	e7e8      	b.n	8010b6a <_strtod_l+0x8c2>
 8010b98:	ea53 030a 	orrs.w	r3, r3, sl
 8010b9c:	d08c      	beq.n	8010ab8 <_strtod_l+0x810>
 8010b9e:	9b08      	ldr	r3, [sp, #32]
 8010ba0:	b1db      	cbz	r3, 8010bda <_strtod_l+0x932>
 8010ba2:	423b      	tst	r3, r7
 8010ba4:	d0ef      	beq.n	8010b86 <_strtod_l+0x8de>
 8010ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ba8:	9a04      	ldr	r2, [sp, #16]
 8010baa:	4650      	mov	r0, sl
 8010bac:	4659      	mov	r1, fp
 8010bae:	b1c3      	cbz	r3, 8010be2 <_strtod_l+0x93a>
 8010bb0:	f7ff fb5c 	bl	801026c <sulp>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	ec51 0b18 	vmov	r0, r1, d8
 8010bbc:	f7ef fb8e 	bl	80002dc <__adddf3>
 8010bc0:	4682      	mov	sl, r0
 8010bc2:	468b      	mov	fp, r1
 8010bc4:	e7df      	b.n	8010b86 <_strtod_l+0x8de>
 8010bc6:	4013      	ands	r3, r2
 8010bc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010bcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010bd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010bd4:	f04f 3aff 	mov.w	sl, #4294967295
 8010bd8:	e7d5      	b.n	8010b86 <_strtod_l+0x8de>
 8010bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bdc:	ea13 0f0a 	tst.w	r3, sl
 8010be0:	e7e0      	b.n	8010ba4 <_strtod_l+0x8fc>
 8010be2:	f7ff fb43 	bl	801026c <sulp>
 8010be6:	4602      	mov	r2, r0
 8010be8:	460b      	mov	r3, r1
 8010bea:	ec51 0b18 	vmov	r0, r1, d8
 8010bee:	f7ef fb73 	bl	80002d8 <__aeabi_dsub>
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	4682      	mov	sl, r0
 8010bf8:	468b      	mov	fp, r1
 8010bfa:	f7ef ff8d 	bl	8000b18 <__aeabi_dcmpeq>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	d0c1      	beq.n	8010b86 <_strtod_l+0x8de>
 8010c02:	e611      	b.n	8010828 <_strtod_l+0x580>
 8010c04:	fffffc02 	.word	0xfffffc02
 8010c08:	7ff00000 	.word	0x7ff00000
 8010c0c:	39500000 	.word	0x39500000
 8010c10:	000fffff 	.word	0x000fffff
 8010c14:	7fefffff 	.word	0x7fefffff
 8010c18:	0802a6d8 	.word	0x0802a6d8
 8010c1c:	4631      	mov	r1, r6
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f002 fb24 	bl	801326c <__ratio>
 8010c24:	ec59 8b10 	vmov	r8, r9, d0
 8010c28:	ee10 0a10 	vmov	r0, s0
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c32:	4649      	mov	r1, r9
 8010c34:	f7ef ff84 	bl	8000b40 <__aeabi_dcmple>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d07a      	beq.n	8010d32 <_strtod_l+0xa8a>
 8010c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d04a      	beq.n	8010cd8 <_strtod_l+0xa30>
 8010c42:	4b95      	ldr	r3, [pc, #596]	; (8010e98 <_strtod_l+0xbf0>)
 8010c44:	2200      	movs	r2, #0
 8010c46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010c4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010e98 <_strtod_l+0xbf0>
 8010c4e:	f04f 0800 	mov.w	r8, #0
 8010c52:	4b92      	ldr	r3, [pc, #584]	; (8010e9c <_strtod_l+0xbf4>)
 8010c54:	403b      	ands	r3, r7
 8010c56:	930d      	str	r3, [sp, #52]	; 0x34
 8010c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c5a:	4b91      	ldr	r3, [pc, #580]	; (8010ea0 <_strtod_l+0xbf8>)
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	f040 80b0 	bne.w	8010dc2 <_strtod_l+0xb1a>
 8010c62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010c66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010c6a:	ec4b ab10 	vmov	d0, sl, fp
 8010c6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010c72:	f002 fa23 	bl	80130bc <__ulp>
 8010c76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010c7a:	ec53 2b10 	vmov	r2, r3, d0
 8010c7e:	f7ef fce3 	bl	8000648 <__aeabi_dmul>
 8010c82:	4652      	mov	r2, sl
 8010c84:	465b      	mov	r3, fp
 8010c86:	f7ef fb29 	bl	80002dc <__adddf3>
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	4983      	ldr	r1, [pc, #524]	; (8010e9c <_strtod_l+0xbf4>)
 8010c8e:	4a85      	ldr	r2, [pc, #532]	; (8010ea4 <_strtod_l+0xbfc>)
 8010c90:	4019      	ands	r1, r3
 8010c92:	4291      	cmp	r1, r2
 8010c94:	4682      	mov	sl, r0
 8010c96:	d960      	bls.n	8010d5a <_strtod_l+0xab2>
 8010c98:	ee18 3a90 	vmov	r3, s17
 8010c9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d104      	bne.n	8010cae <_strtod_l+0xa06>
 8010ca4:	ee18 3a10 	vmov	r3, s16
 8010ca8:	3301      	adds	r3, #1
 8010caa:	f43f ad45 	beq.w	8010738 <_strtod_l+0x490>
 8010cae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010eb0 <_strtod_l+0xc08>
 8010cb2:	f04f 3aff 	mov.w	sl, #4294967295
 8010cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f001 fecd 	bl	8012a58 <_Bfree>
 8010cbe:	9905      	ldr	r1, [sp, #20]
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f001 fec9 	bl	8012a58 <_Bfree>
 8010cc6:	4631      	mov	r1, r6
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f001 fec5 	bl	8012a58 <_Bfree>
 8010cce:	4629      	mov	r1, r5
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f001 fec1 	bl	8012a58 <_Bfree>
 8010cd6:	e61a      	b.n	801090e <_strtod_l+0x666>
 8010cd8:	f1ba 0f00 	cmp.w	sl, #0
 8010cdc:	d11b      	bne.n	8010d16 <_strtod_l+0xa6e>
 8010cde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ce2:	b9f3      	cbnz	r3, 8010d22 <_strtod_l+0xa7a>
 8010ce4:	4b6c      	ldr	r3, [pc, #432]	; (8010e98 <_strtod_l+0xbf0>)
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	4640      	mov	r0, r8
 8010cea:	4649      	mov	r1, r9
 8010cec:	f7ef ff1e 	bl	8000b2c <__aeabi_dcmplt>
 8010cf0:	b9d0      	cbnz	r0, 8010d28 <_strtod_l+0xa80>
 8010cf2:	4640      	mov	r0, r8
 8010cf4:	4649      	mov	r1, r9
 8010cf6:	4b6c      	ldr	r3, [pc, #432]	; (8010ea8 <_strtod_l+0xc00>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f7ef fca5 	bl	8000648 <__aeabi_dmul>
 8010cfe:	4680      	mov	r8, r0
 8010d00:	4689      	mov	r9, r1
 8010d02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010d06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010d0a:	9315      	str	r3, [sp, #84]	; 0x54
 8010d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d14:	e79d      	b.n	8010c52 <_strtod_l+0x9aa>
 8010d16:	f1ba 0f01 	cmp.w	sl, #1
 8010d1a:	d102      	bne.n	8010d22 <_strtod_l+0xa7a>
 8010d1c:	2f00      	cmp	r7, #0
 8010d1e:	f43f ad83 	beq.w	8010828 <_strtod_l+0x580>
 8010d22:	4b62      	ldr	r3, [pc, #392]	; (8010eac <_strtod_l+0xc04>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	e78e      	b.n	8010c46 <_strtod_l+0x99e>
 8010d28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010ea8 <_strtod_l+0xc00>
 8010d2c:	f04f 0800 	mov.w	r8, #0
 8010d30:	e7e7      	b.n	8010d02 <_strtod_l+0xa5a>
 8010d32:	4b5d      	ldr	r3, [pc, #372]	; (8010ea8 <_strtod_l+0xc00>)
 8010d34:	4640      	mov	r0, r8
 8010d36:	4649      	mov	r1, r9
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f7ef fc85 	bl	8000648 <__aeabi_dmul>
 8010d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d40:	4680      	mov	r8, r0
 8010d42:	4689      	mov	r9, r1
 8010d44:	b933      	cbnz	r3, 8010d54 <_strtod_l+0xaac>
 8010d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d4a:	900e      	str	r0, [sp, #56]	; 0x38
 8010d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010d52:	e7dd      	b.n	8010d10 <_strtod_l+0xa68>
 8010d54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010d58:	e7f9      	b.n	8010d4e <_strtod_l+0xaa6>
 8010d5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010d5e:	9b04      	ldr	r3, [sp, #16]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1a8      	bne.n	8010cb6 <_strtod_l+0xa0e>
 8010d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d6a:	0d1b      	lsrs	r3, r3, #20
 8010d6c:	051b      	lsls	r3, r3, #20
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d1a1      	bne.n	8010cb6 <_strtod_l+0xa0e>
 8010d72:	4640      	mov	r0, r8
 8010d74:	4649      	mov	r1, r9
 8010d76:	f7f0 f817 	bl	8000da8 <__aeabi_d2lz>
 8010d7a:	f7ef fc37 	bl	80005ec <__aeabi_l2d>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	460b      	mov	r3, r1
 8010d82:	4640      	mov	r0, r8
 8010d84:	4649      	mov	r1, r9
 8010d86:	f7ef faa7 	bl	80002d8 <__aeabi_dsub>
 8010d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d90:	ea43 030a 	orr.w	r3, r3, sl
 8010d94:	4313      	orrs	r3, r2
 8010d96:	4680      	mov	r8, r0
 8010d98:	4689      	mov	r9, r1
 8010d9a:	d055      	beq.n	8010e48 <_strtod_l+0xba0>
 8010d9c:	a336      	add	r3, pc, #216	; (adr r3, 8010e78 <_strtod_l+0xbd0>)
 8010d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da2:	f7ef fec3 	bl	8000b2c <__aeabi_dcmplt>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	f47f acd0 	bne.w	801074c <_strtod_l+0x4a4>
 8010dac:	a334      	add	r3, pc, #208	; (adr r3, 8010e80 <_strtod_l+0xbd8>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	4640      	mov	r0, r8
 8010db4:	4649      	mov	r1, r9
 8010db6:	f7ef fed7 	bl	8000b68 <__aeabi_dcmpgt>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	f43f af7b 	beq.w	8010cb6 <_strtod_l+0xa0e>
 8010dc0:	e4c4      	b.n	801074c <_strtod_l+0x4a4>
 8010dc2:	9b04      	ldr	r3, [sp, #16]
 8010dc4:	b333      	cbz	r3, 8010e14 <_strtod_l+0xb6c>
 8010dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010dcc:	d822      	bhi.n	8010e14 <_strtod_l+0xb6c>
 8010dce:	a32e      	add	r3, pc, #184	; (adr r3, 8010e88 <_strtod_l+0xbe0>)
 8010dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd4:	4640      	mov	r0, r8
 8010dd6:	4649      	mov	r1, r9
 8010dd8:	f7ef feb2 	bl	8000b40 <__aeabi_dcmple>
 8010ddc:	b1a0      	cbz	r0, 8010e08 <_strtod_l+0xb60>
 8010dde:	4649      	mov	r1, r9
 8010de0:	4640      	mov	r0, r8
 8010de2:	f7ef ff09 	bl	8000bf8 <__aeabi_d2uiz>
 8010de6:	2801      	cmp	r0, #1
 8010de8:	bf38      	it	cc
 8010dea:	2001      	movcc	r0, #1
 8010dec:	f7ef fbb2 	bl	8000554 <__aeabi_ui2d>
 8010df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010df2:	4680      	mov	r8, r0
 8010df4:	4689      	mov	r9, r1
 8010df6:	bb23      	cbnz	r3, 8010e42 <_strtod_l+0xb9a>
 8010df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dfc:	9010      	str	r0, [sp, #64]	; 0x40
 8010dfe:	9311      	str	r3, [sp, #68]	; 0x44
 8010e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010e10:	1a9b      	subs	r3, r3, r2
 8010e12:	9309      	str	r3, [sp, #36]	; 0x24
 8010e14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e18:	eeb0 0a48 	vmov.f32	s0, s16
 8010e1c:	eef0 0a68 	vmov.f32	s1, s17
 8010e20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e24:	f002 f94a 	bl	80130bc <__ulp>
 8010e28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e2c:	ec53 2b10 	vmov	r2, r3, d0
 8010e30:	f7ef fc0a 	bl	8000648 <__aeabi_dmul>
 8010e34:	ec53 2b18 	vmov	r2, r3, d8
 8010e38:	f7ef fa50 	bl	80002dc <__adddf3>
 8010e3c:	4682      	mov	sl, r0
 8010e3e:	468b      	mov	fp, r1
 8010e40:	e78d      	b.n	8010d5e <_strtod_l+0xab6>
 8010e42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010e46:	e7db      	b.n	8010e00 <_strtod_l+0xb58>
 8010e48:	a311      	add	r3, pc, #68	; (adr r3, 8010e90 <_strtod_l+0xbe8>)
 8010e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4e:	f7ef fe6d 	bl	8000b2c <__aeabi_dcmplt>
 8010e52:	e7b2      	b.n	8010dba <_strtod_l+0xb12>
 8010e54:	2300      	movs	r3, #0
 8010e56:	930a      	str	r3, [sp, #40]	; 0x28
 8010e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e5c:	6013      	str	r3, [r2, #0]
 8010e5e:	f7ff ba6b 	b.w	8010338 <_strtod_l+0x90>
 8010e62:	2a65      	cmp	r2, #101	; 0x65
 8010e64:	f43f ab5f 	beq.w	8010526 <_strtod_l+0x27e>
 8010e68:	2a45      	cmp	r2, #69	; 0x45
 8010e6a:	f43f ab5c 	beq.w	8010526 <_strtod_l+0x27e>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f7ff bb94 	b.w	801059c <_strtod_l+0x2f4>
 8010e74:	f3af 8000 	nop.w
 8010e78:	94a03595 	.word	0x94a03595
 8010e7c:	3fdfffff 	.word	0x3fdfffff
 8010e80:	35afe535 	.word	0x35afe535
 8010e84:	3fe00000 	.word	0x3fe00000
 8010e88:	ffc00000 	.word	0xffc00000
 8010e8c:	41dfffff 	.word	0x41dfffff
 8010e90:	94a03595 	.word	0x94a03595
 8010e94:	3fcfffff 	.word	0x3fcfffff
 8010e98:	3ff00000 	.word	0x3ff00000
 8010e9c:	7ff00000 	.word	0x7ff00000
 8010ea0:	7fe00000 	.word	0x7fe00000
 8010ea4:	7c9fffff 	.word	0x7c9fffff
 8010ea8:	3fe00000 	.word	0x3fe00000
 8010eac:	bff00000 	.word	0xbff00000
 8010eb0:	7fefffff 	.word	0x7fefffff

08010eb4 <_strtod_r>:
 8010eb4:	4b01      	ldr	r3, [pc, #4]	; (8010ebc <_strtod_r+0x8>)
 8010eb6:	f7ff b9f7 	b.w	80102a8 <_strtod_l>
 8010eba:	bf00      	nop
 8010ebc:	20000144 	.word	0x20000144

08010ec0 <_strtol_l.constprop.0>:
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec6:	d001      	beq.n	8010ecc <_strtol_l.constprop.0+0xc>
 8010ec8:	2b24      	cmp	r3, #36	; 0x24
 8010eca:	d906      	bls.n	8010eda <_strtol_l.constprop.0+0x1a>
 8010ecc:	f7fe f90c 	bl	800f0e8 <__errno>
 8010ed0:	2316      	movs	r3, #22
 8010ed2:	6003      	str	r3, [r0, #0]
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010fc0 <_strtol_l.constprop.0+0x100>
 8010ede:	460d      	mov	r5, r1
 8010ee0:	462e      	mov	r6, r5
 8010ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ee6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010eea:	f017 0708 	ands.w	r7, r7, #8
 8010eee:	d1f7      	bne.n	8010ee0 <_strtol_l.constprop.0+0x20>
 8010ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8010ef2:	d132      	bne.n	8010f5a <_strtol_l.constprop.0+0x9a>
 8010ef4:	782c      	ldrb	r4, [r5, #0]
 8010ef6:	2701      	movs	r7, #1
 8010ef8:	1cb5      	adds	r5, r6, #2
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d05b      	beq.n	8010fb6 <_strtol_l.constprop.0+0xf6>
 8010efe:	2b10      	cmp	r3, #16
 8010f00:	d109      	bne.n	8010f16 <_strtol_l.constprop.0+0x56>
 8010f02:	2c30      	cmp	r4, #48	; 0x30
 8010f04:	d107      	bne.n	8010f16 <_strtol_l.constprop.0+0x56>
 8010f06:	782c      	ldrb	r4, [r5, #0]
 8010f08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010f0c:	2c58      	cmp	r4, #88	; 0x58
 8010f0e:	d14d      	bne.n	8010fac <_strtol_l.constprop.0+0xec>
 8010f10:	786c      	ldrb	r4, [r5, #1]
 8010f12:	2310      	movs	r3, #16
 8010f14:	3502      	adds	r5, #2
 8010f16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010f1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f1e:	f04f 0c00 	mov.w	ip, #0
 8010f22:	fbb8 f9f3 	udiv	r9, r8, r3
 8010f26:	4666      	mov	r6, ip
 8010f28:	fb03 8a19 	mls	sl, r3, r9, r8
 8010f2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010f30:	f1be 0f09 	cmp.w	lr, #9
 8010f34:	d816      	bhi.n	8010f64 <_strtol_l.constprop.0+0xa4>
 8010f36:	4674      	mov	r4, lr
 8010f38:	42a3      	cmp	r3, r4
 8010f3a:	dd24      	ble.n	8010f86 <_strtol_l.constprop.0+0xc6>
 8010f3c:	f1bc 0f00 	cmp.w	ip, #0
 8010f40:	db1e      	blt.n	8010f80 <_strtol_l.constprop.0+0xc0>
 8010f42:	45b1      	cmp	r9, r6
 8010f44:	d31c      	bcc.n	8010f80 <_strtol_l.constprop.0+0xc0>
 8010f46:	d101      	bne.n	8010f4c <_strtol_l.constprop.0+0x8c>
 8010f48:	45a2      	cmp	sl, r4
 8010f4a:	db19      	blt.n	8010f80 <_strtol_l.constprop.0+0xc0>
 8010f4c:	fb06 4603 	mla	r6, r6, r3, r4
 8010f50:	f04f 0c01 	mov.w	ip, #1
 8010f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f58:	e7e8      	b.n	8010f2c <_strtol_l.constprop.0+0x6c>
 8010f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8010f5c:	bf04      	itt	eq
 8010f5e:	782c      	ldrbeq	r4, [r5, #0]
 8010f60:	1cb5      	addeq	r5, r6, #2
 8010f62:	e7ca      	b.n	8010efa <_strtol_l.constprop.0+0x3a>
 8010f64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010f68:	f1be 0f19 	cmp.w	lr, #25
 8010f6c:	d801      	bhi.n	8010f72 <_strtol_l.constprop.0+0xb2>
 8010f6e:	3c37      	subs	r4, #55	; 0x37
 8010f70:	e7e2      	b.n	8010f38 <_strtol_l.constprop.0+0x78>
 8010f72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010f76:	f1be 0f19 	cmp.w	lr, #25
 8010f7a:	d804      	bhi.n	8010f86 <_strtol_l.constprop.0+0xc6>
 8010f7c:	3c57      	subs	r4, #87	; 0x57
 8010f7e:	e7db      	b.n	8010f38 <_strtol_l.constprop.0+0x78>
 8010f80:	f04f 3cff 	mov.w	ip, #4294967295
 8010f84:	e7e6      	b.n	8010f54 <_strtol_l.constprop.0+0x94>
 8010f86:	f1bc 0f00 	cmp.w	ip, #0
 8010f8a:	da05      	bge.n	8010f98 <_strtol_l.constprop.0+0xd8>
 8010f8c:	2322      	movs	r3, #34	; 0x22
 8010f8e:	6003      	str	r3, [r0, #0]
 8010f90:	4646      	mov	r6, r8
 8010f92:	b942      	cbnz	r2, 8010fa6 <_strtol_l.constprop.0+0xe6>
 8010f94:	4630      	mov	r0, r6
 8010f96:	e79e      	b.n	8010ed6 <_strtol_l.constprop.0+0x16>
 8010f98:	b107      	cbz	r7, 8010f9c <_strtol_l.constprop.0+0xdc>
 8010f9a:	4276      	negs	r6, r6
 8010f9c:	2a00      	cmp	r2, #0
 8010f9e:	d0f9      	beq.n	8010f94 <_strtol_l.constprop.0+0xd4>
 8010fa0:	f1bc 0f00 	cmp.w	ip, #0
 8010fa4:	d000      	beq.n	8010fa8 <_strtol_l.constprop.0+0xe8>
 8010fa6:	1e69      	subs	r1, r5, #1
 8010fa8:	6011      	str	r1, [r2, #0]
 8010faa:	e7f3      	b.n	8010f94 <_strtol_l.constprop.0+0xd4>
 8010fac:	2430      	movs	r4, #48	; 0x30
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1b1      	bne.n	8010f16 <_strtol_l.constprop.0+0x56>
 8010fb2:	2308      	movs	r3, #8
 8010fb4:	e7af      	b.n	8010f16 <_strtol_l.constprop.0+0x56>
 8010fb6:	2c30      	cmp	r4, #48	; 0x30
 8010fb8:	d0a5      	beq.n	8010f06 <_strtol_l.constprop.0+0x46>
 8010fba:	230a      	movs	r3, #10
 8010fbc:	e7ab      	b.n	8010f16 <_strtol_l.constprop.0+0x56>
 8010fbe:	bf00      	nop
 8010fc0:	0802a701 	.word	0x0802a701

08010fc4 <_strtol_r>:
 8010fc4:	f7ff bf7c 	b.w	8010ec0 <_strtol_l.constprop.0>

08010fc8 <__swbuf_r>:
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	460e      	mov	r6, r1
 8010fcc:	4614      	mov	r4, r2
 8010fce:	4605      	mov	r5, r0
 8010fd0:	b118      	cbz	r0, 8010fda <__swbuf_r+0x12>
 8010fd2:	6983      	ldr	r3, [r0, #24]
 8010fd4:	b90b      	cbnz	r3, 8010fda <__swbuf_r+0x12>
 8010fd6:	f001 f853 	bl	8012080 <__sinit>
 8010fda:	4b21      	ldr	r3, [pc, #132]	; (8011060 <__swbuf_r+0x98>)
 8010fdc:	429c      	cmp	r4, r3
 8010fde:	d12b      	bne.n	8011038 <__swbuf_r+0x70>
 8010fe0:	686c      	ldr	r4, [r5, #4]
 8010fe2:	69a3      	ldr	r3, [r4, #24]
 8010fe4:	60a3      	str	r3, [r4, #8]
 8010fe6:	89a3      	ldrh	r3, [r4, #12]
 8010fe8:	071a      	lsls	r2, r3, #28
 8010fea:	d52f      	bpl.n	801104c <__swbuf_r+0x84>
 8010fec:	6923      	ldr	r3, [r4, #16]
 8010fee:	b36b      	cbz	r3, 801104c <__swbuf_r+0x84>
 8010ff0:	6923      	ldr	r3, [r4, #16]
 8010ff2:	6820      	ldr	r0, [r4, #0]
 8010ff4:	1ac0      	subs	r0, r0, r3
 8010ff6:	6963      	ldr	r3, [r4, #20]
 8010ff8:	b2f6      	uxtb	r6, r6
 8010ffa:	4283      	cmp	r3, r0
 8010ffc:	4637      	mov	r7, r6
 8010ffe:	dc04      	bgt.n	801100a <__swbuf_r+0x42>
 8011000:	4621      	mov	r1, r4
 8011002:	4628      	mov	r0, r5
 8011004:	f000 ffa8 	bl	8011f58 <_fflush_r>
 8011008:	bb30      	cbnz	r0, 8011058 <__swbuf_r+0x90>
 801100a:	68a3      	ldr	r3, [r4, #8]
 801100c:	3b01      	subs	r3, #1
 801100e:	60a3      	str	r3, [r4, #8]
 8011010:	6823      	ldr	r3, [r4, #0]
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	6022      	str	r2, [r4, #0]
 8011016:	701e      	strb	r6, [r3, #0]
 8011018:	6963      	ldr	r3, [r4, #20]
 801101a:	3001      	adds	r0, #1
 801101c:	4283      	cmp	r3, r0
 801101e:	d004      	beq.n	801102a <__swbuf_r+0x62>
 8011020:	89a3      	ldrh	r3, [r4, #12]
 8011022:	07db      	lsls	r3, r3, #31
 8011024:	d506      	bpl.n	8011034 <__swbuf_r+0x6c>
 8011026:	2e0a      	cmp	r6, #10
 8011028:	d104      	bne.n	8011034 <__swbuf_r+0x6c>
 801102a:	4621      	mov	r1, r4
 801102c:	4628      	mov	r0, r5
 801102e:	f000 ff93 	bl	8011f58 <_fflush_r>
 8011032:	b988      	cbnz	r0, 8011058 <__swbuf_r+0x90>
 8011034:	4638      	mov	r0, r7
 8011036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011038:	4b0a      	ldr	r3, [pc, #40]	; (8011064 <__swbuf_r+0x9c>)
 801103a:	429c      	cmp	r4, r3
 801103c:	d101      	bne.n	8011042 <__swbuf_r+0x7a>
 801103e:	68ac      	ldr	r4, [r5, #8]
 8011040:	e7cf      	b.n	8010fe2 <__swbuf_r+0x1a>
 8011042:	4b09      	ldr	r3, [pc, #36]	; (8011068 <__swbuf_r+0xa0>)
 8011044:	429c      	cmp	r4, r3
 8011046:	bf08      	it	eq
 8011048:	68ec      	ldreq	r4, [r5, #12]
 801104a:	e7ca      	b.n	8010fe2 <__swbuf_r+0x1a>
 801104c:	4621      	mov	r1, r4
 801104e:	4628      	mov	r0, r5
 8011050:	f000 f80c 	bl	801106c <__swsetup_r>
 8011054:	2800      	cmp	r0, #0
 8011056:	d0cb      	beq.n	8010ff0 <__swbuf_r+0x28>
 8011058:	f04f 37ff 	mov.w	r7, #4294967295
 801105c:	e7ea      	b.n	8011034 <__swbuf_r+0x6c>
 801105e:	bf00      	nop
 8011060:	0802a8d4 	.word	0x0802a8d4
 8011064:	0802a8f4 	.word	0x0802a8f4
 8011068:	0802a8b4 	.word	0x0802a8b4

0801106c <__swsetup_r>:
 801106c:	4b32      	ldr	r3, [pc, #200]	; (8011138 <__swsetup_r+0xcc>)
 801106e:	b570      	push	{r4, r5, r6, lr}
 8011070:	681d      	ldr	r5, [r3, #0]
 8011072:	4606      	mov	r6, r0
 8011074:	460c      	mov	r4, r1
 8011076:	b125      	cbz	r5, 8011082 <__swsetup_r+0x16>
 8011078:	69ab      	ldr	r3, [r5, #24]
 801107a:	b913      	cbnz	r3, 8011082 <__swsetup_r+0x16>
 801107c:	4628      	mov	r0, r5
 801107e:	f000 ffff 	bl	8012080 <__sinit>
 8011082:	4b2e      	ldr	r3, [pc, #184]	; (801113c <__swsetup_r+0xd0>)
 8011084:	429c      	cmp	r4, r3
 8011086:	d10f      	bne.n	80110a8 <__swsetup_r+0x3c>
 8011088:	686c      	ldr	r4, [r5, #4]
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011090:	0719      	lsls	r1, r3, #28
 8011092:	d42c      	bmi.n	80110ee <__swsetup_r+0x82>
 8011094:	06dd      	lsls	r5, r3, #27
 8011096:	d411      	bmi.n	80110bc <__swsetup_r+0x50>
 8011098:	2309      	movs	r3, #9
 801109a:	6033      	str	r3, [r6, #0]
 801109c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110a0:	81a3      	strh	r3, [r4, #12]
 80110a2:	f04f 30ff 	mov.w	r0, #4294967295
 80110a6:	e03e      	b.n	8011126 <__swsetup_r+0xba>
 80110a8:	4b25      	ldr	r3, [pc, #148]	; (8011140 <__swsetup_r+0xd4>)
 80110aa:	429c      	cmp	r4, r3
 80110ac:	d101      	bne.n	80110b2 <__swsetup_r+0x46>
 80110ae:	68ac      	ldr	r4, [r5, #8]
 80110b0:	e7eb      	b.n	801108a <__swsetup_r+0x1e>
 80110b2:	4b24      	ldr	r3, [pc, #144]	; (8011144 <__swsetup_r+0xd8>)
 80110b4:	429c      	cmp	r4, r3
 80110b6:	bf08      	it	eq
 80110b8:	68ec      	ldreq	r4, [r5, #12]
 80110ba:	e7e6      	b.n	801108a <__swsetup_r+0x1e>
 80110bc:	0758      	lsls	r0, r3, #29
 80110be:	d512      	bpl.n	80110e6 <__swsetup_r+0x7a>
 80110c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110c2:	b141      	cbz	r1, 80110d6 <__swsetup_r+0x6a>
 80110c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110c8:	4299      	cmp	r1, r3
 80110ca:	d002      	beq.n	80110d2 <__swsetup_r+0x66>
 80110cc:	4630      	mov	r0, r6
 80110ce:	f002 f95b 	bl	8013388 <_free_r>
 80110d2:	2300      	movs	r3, #0
 80110d4:	6363      	str	r3, [r4, #52]	; 0x34
 80110d6:	89a3      	ldrh	r3, [r4, #12]
 80110d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	2300      	movs	r3, #0
 80110e0:	6063      	str	r3, [r4, #4]
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	6023      	str	r3, [r4, #0]
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	f043 0308 	orr.w	r3, r3, #8
 80110ec:	81a3      	strh	r3, [r4, #12]
 80110ee:	6923      	ldr	r3, [r4, #16]
 80110f0:	b94b      	cbnz	r3, 8011106 <__swsetup_r+0x9a>
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110fc:	d003      	beq.n	8011106 <__swsetup_r+0x9a>
 80110fe:	4621      	mov	r1, r4
 8011100:	4630      	mov	r0, r6
 8011102:	f001 fbf5 	bl	80128f0 <__smakebuf_r>
 8011106:	89a0      	ldrh	r0, [r4, #12]
 8011108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801110c:	f010 0301 	ands.w	r3, r0, #1
 8011110:	d00a      	beq.n	8011128 <__swsetup_r+0xbc>
 8011112:	2300      	movs	r3, #0
 8011114:	60a3      	str	r3, [r4, #8]
 8011116:	6963      	ldr	r3, [r4, #20]
 8011118:	425b      	negs	r3, r3
 801111a:	61a3      	str	r3, [r4, #24]
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	b943      	cbnz	r3, 8011132 <__swsetup_r+0xc6>
 8011120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011124:	d1ba      	bne.n	801109c <__swsetup_r+0x30>
 8011126:	bd70      	pop	{r4, r5, r6, pc}
 8011128:	0781      	lsls	r1, r0, #30
 801112a:	bf58      	it	pl
 801112c:	6963      	ldrpl	r3, [r4, #20]
 801112e:	60a3      	str	r3, [r4, #8]
 8011130:	e7f4      	b.n	801111c <__swsetup_r+0xb0>
 8011132:	2000      	movs	r0, #0
 8011134:	e7f7      	b.n	8011126 <__swsetup_r+0xba>
 8011136:	bf00      	nop
 8011138:	200000dc 	.word	0x200000dc
 801113c:	0802a8d4 	.word	0x0802a8d4
 8011140:	0802a8f4 	.word	0x0802a8f4
 8011144:	0802a8b4 	.word	0x0802a8b4

08011148 <abort>:
 8011148:	b508      	push	{r3, lr}
 801114a:	2006      	movs	r0, #6
 801114c:	f002 fbc8 	bl	80138e0 <raise>
 8011150:	2001      	movs	r0, #1
 8011152:	f7f2 fd3d 	bl	8003bd0 <_exit>

08011156 <quorem>:
 8011156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115a:	6903      	ldr	r3, [r0, #16]
 801115c:	690c      	ldr	r4, [r1, #16]
 801115e:	42a3      	cmp	r3, r4
 8011160:	4607      	mov	r7, r0
 8011162:	f2c0 8081 	blt.w	8011268 <quorem+0x112>
 8011166:	3c01      	subs	r4, #1
 8011168:	f101 0814 	add.w	r8, r1, #20
 801116c:	f100 0514 	add.w	r5, r0, #20
 8011170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011174:	9301      	str	r3, [sp, #4]
 8011176:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801117a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801117e:	3301      	adds	r3, #1
 8011180:	429a      	cmp	r2, r3
 8011182:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011186:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801118a:	fbb2 f6f3 	udiv	r6, r2, r3
 801118e:	d331      	bcc.n	80111f4 <quorem+0x9e>
 8011190:	f04f 0e00 	mov.w	lr, #0
 8011194:	4640      	mov	r0, r8
 8011196:	46ac      	mov	ip, r5
 8011198:	46f2      	mov	sl, lr
 801119a:	f850 2b04 	ldr.w	r2, [r0], #4
 801119e:	b293      	uxth	r3, r2
 80111a0:	fb06 e303 	mla	r3, r6, r3, lr
 80111a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	ebaa 0303 	sub.w	r3, sl, r3
 80111ae:	f8dc a000 	ldr.w	sl, [ip]
 80111b2:	0c12      	lsrs	r2, r2, #16
 80111b4:	fa13 f38a 	uxtah	r3, r3, sl
 80111b8:	fb06 e202 	mla	r2, r6, r2, lr
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	9b00      	ldr	r3, [sp, #0]
 80111c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80111c4:	b292      	uxth	r2, r2
 80111c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80111ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80111d2:	4581      	cmp	r9, r0
 80111d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111d8:	f84c 3b04 	str.w	r3, [ip], #4
 80111dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80111e0:	d2db      	bcs.n	801119a <quorem+0x44>
 80111e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80111e6:	b92b      	cbnz	r3, 80111f4 <quorem+0x9e>
 80111e8:	9b01      	ldr	r3, [sp, #4]
 80111ea:	3b04      	subs	r3, #4
 80111ec:	429d      	cmp	r5, r3
 80111ee:	461a      	mov	r2, r3
 80111f0:	d32e      	bcc.n	8011250 <quorem+0xfa>
 80111f2:	613c      	str	r4, [r7, #16]
 80111f4:	4638      	mov	r0, r7
 80111f6:	f001 febb 	bl	8012f70 <__mcmp>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	db24      	blt.n	8011248 <quorem+0xf2>
 80111fe:	3601      	adds	r6, #1
 8011200:	4628      	mov	r0, r5
 8011202:	f04f 0c00 	mov.w	ip, #0
 8011206:	f858 2b04 	ldr.w	r2, [r8], #4
 801120a:	f8d0 e000 	ldr.w	lr, [r0]
 801120e:	b293      	uxth	r3, r2
 8011210:	ebac 0303 	sub.w	r3, ip, r3
 8011214:	0c12      	lsrs	r2, r2, #16
 8011216:	fa13 f38e 	uxtah	r3, r3, lr
 801121a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801121e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011222:	b29b      	uxth	r3, r3
 8011224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011228:	45c1      	cmp	r9, r8
 801122a:	f840 3b04 	str.w	r3, [r0], #4
 801122e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011232:	d2e8      	bcs.n	8011206 <quorem+0xb0>
 8011234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801123c:	b922      	cbnz	r2, 8011248 <quorem+0xf2>
 801123e:	3b04      	subs	r3, #4
 8011240:	429d      	cmp	r5, r3
 8011242:	461a      	mov	r2, r3
 8011244:	d30a      	bcc.n	801125c <quorem+0x106>
 8011246:	613c      	str	r4, [r7, #16]
 8011248:	4630      	mov	r0, r6
 801124a:	b003      	add	sp, #12
 801124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011250:	6812      	ldr	r2, [r2, #0]
 8011252:	3b04      	subs	r3, #4
 8011254:	2a00      	cmp	r2, #0
 8011256:	d1cc      	bne.n	80111f2 <quorem+0x9c>
 8011258:	3c01      	subs	r4, #1
 801125a:	e7c7      	b.n	80111ec <quorem+0x96>
 801125c:	6812      	ldr	r2, [r2, #0]
 801125e:	3b04      	subs	r3, #4
 8011260:	2a00      	cmp	r2, #0
 8011262:	d1f0      	bne.n	8011246 <quorem+0xf0>
 8011264:	3c01      	subs	r4, #1
 8011266:	e7eb      	b.n	8011240 <quorem+0xea>
 8011268:	2000      	movs	r0, #0
 801126a:	e7ee      	b.n	801124a <quorem+0xf4>
 801126c:	0000      	movs	r0, r0
	...

08011270 <_dtoa_r>:
 8011270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	ed2d 8b04 	vpush	{d8-d9}
 8011278:	ec57 6b10 	vmov	r6, r7, d0
 801127c:	b093      	sub	sp, #76	; 0x4c
 801127e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011284:	9106      	str	r1, [sp, #24]
 8011286:	ee10 aa10 	vmov	sl, s0
 801128a:	4604      	mov	r4, r0
 801128c:	9209      	str	r2, [sp, #36]	; 0x24
 801128e:	930c      	str	r3, [sp, #48]	; 0x30
 8011290:	46bb      	mov	fp, r7
 8011292:	b975      	cbnz	r5, 80112b2 <_dtoa_r+0x42>
 8011294:	2010      	movs	r0, #16
 8011296:	f001 fb6b 	bl	8012970 <malloc>
 801129a:	4602      	mov	r2, r0
 801129c:	6260      	str	r0, [r4, #36]	; 0x24
 801129e:	b920      	cbnz	r0, 80112aa <_dtoa_r+0x3a>
 80112a0:	4ba7      	ldr	r3, [pc, #668]	; (8011540 <_dtoa_r+0x2d0>)
 80112a2:	21ea      	movs	r1, #234	; 0xea
 80112a4:	48a7      	ldr	r0, [pc, #668]	; (8011544 <_dtoa_r+0x2d4>)
 80112a6:	f7fd ff01 	bl	800f0ac <__assert_func>
 80112aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112ae:	6005      	str	r5, [r0, #0]
 80112b0:	60c5      	str	r5, [r0, #12]
 80112b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112b4:	6819      	ldr	r1, [r3, #0]
 80112b6:	b151      	cbz	r1, 80112ce <_dtoa_r+0x5e>
 80112b8:	685a      	ldr	r2, [r3, #4]
 80112ba:	604a      	str	r2, [r1, #4]
 80112bc:	2301      	movs	r3, #1
 80112be:	4093      	lsls	r3, r2
 80112c0:	608b      	str	r3, [r1, #8]
 80112c2:	4620      	mov	r0, r4
 80112c4:	f001 fbc8 	bl	8012a58 <_Bfree>
 80112c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	1e3b      	subs	r3, r7, #0
 80112d0:	bfaa      	itet	ge
 80112d2:	2300      	movge	r3, #0
 80112d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80112d8:	f8c8 3000 	strge.w	r3, [r8]
 80112dc:	4b9a      	ldr	r3, [pc, #616]	; (8011548 <_dtoa_r+0x2d8>)
 80112de:	bfbc      	itt	lt
 80112e0:	2201      	movlt	r2, #1
 80112e2:	f8c8 2000 	strlt.w	r2, [r8]
 80112e6:	ea33 030b 	bics.w	r3, r3, fp
 80112ea:	d11b      	bne.n	8011324 <_dtoa_r+0xb4>
 80112ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80112f2:	6013      	str	r3, [r2, #0]
 80112f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112f8:	4333      	orrs	r3, r6
 80112fa:	f000 8592 	beq.w	8011e22 <_dtoa_r+0xbb2>
 80112fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011300:	b963      	cbnz	r3, 801131c <_dtoa_r+0xac>
 8011302:	4b92      	ldr	r3, [pc, #584]	; (801154c <_dtoa_r+0x2dc>)
 8011304:	e022      	b.n	801134c <_dtoa_r+0xdc>
 8011306:	4b92      	ldr	r3, [pc, #584]	; (8011550 <_dtoa_r+0x2e0>)
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	3308      	adds	r3, #8
 801130c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801130e:	6013      	str	r3, [r2, #0]
 8011310:	9801      	ldr	r0, [sp, #4]
 8011312:	b013      	add	sp, #76	; 0x4c
 8011314:	ecbd 8b04 	vpop	{d8-d9}
 8011318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131c:	4b8b      	ldr	r3, [pc, #556]	; (801154c <_dtoa_r+0x2dc>)
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	3303      	adds	r3, #3
 8011322:	e7f3      	b.n	801130c <_dtoa_r+0x9c>
 8011324:	2200      	movs	r2, #0
 8011326:	2300      	movs	r3, #0
 8011328:	4650      	mov	r0, sl
 801132a:	4659      	mov	r1, fp
 801132c:	f7ef fbf4 	bl	8000b18 <__aeabi_dcmpeq>
 8011330:	ec4b ab19 	vmov	d9, sl, fp
 8011334:	4680      	mov	r8, r0
 8011336:	b158      	cbz	r0, 8011350 <_dtoa_r+0xe0>
 8011338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801133a:	2301      	movs	r3, #1
 801133c:	6013      	str	r3, [r2, #0]
 801133e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011340:	2b00      	cmp	r3, #0
 8011342:	f000 856b 	beq.w	8011e1c <_dtoa_r+0xbac>
 8011346:	4883      	ldr	r0, [pc, #524]	; (8011554 <_dtoa_r+0x2e4>)
 8011348:	6018      	str	r0, [r3, #0]
 801134a:	1e43      	subs	r3, r0, #1
 801134c:	9301      	str	r3, [sp, #4]
 801134e:	e7df      	b.n	8011310 <_dtoa_r+0xa0>
 8011350:	ec4b ab10 	vmov	d0, sl, fp
 8011354:	aa10      	add	r2, sp, #64	; 0x40
 8011356:	a911      	add	r1, sp, #68	; 0x44
 8011358:	4620      	mov	r0, r4
 801135a:	f001 ff2b 	bl	80131b4 <__d2b>
 801135e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011362:	ee08 0a10 	vmov	s16, r0
 8011366:	2d00      	cmp	r5, #0
 8011368:	f000 8084 	beq.w	8011474 <_dtoa_r+0x204>
 801136c:	ee19 3a90 	vmov	r3, s19
 8011370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011378:	4656      	mov	r6, sl
 801137a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801137e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011386:	4b74      	ldr	r3, [pc, #464]	; (8011558 <_dtoa_r+0x2e8>)
 8011388:	2200      	movs	r2, #0
 801138a:	4630      	mov	r0, r6
 801138c:	4639      	mov	r1, r7
 801138e:	f7ee ffa3 	bl	80002d8 <__aeabi_dsub>
 8011392:	a365      	add	r3, pc, #404	; (adr r3, 8011528 <_dtoa_r+0x2b8>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ef f956 	bl	8000648 <__aeabi_dmul>
 801139c:	a364      	add	r3, pc, #400	; (adr r3, 8011530 <_dtoa_r+0x2c0>)
 801139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a2:	f7ee ff9b 	bl	80002dc <__adddf3>
 80113a6:	4606      	mov	r6, r0
 80113a8:	4628      	mov	r0, r5
 80113aa:	460f      	mov	r7, r1
 80113ac:	f7ef f8e2 	bl	8000574 <__aeabi_i2d>
 80113b0:	a361      	add	r3, pc, #388	; (adr r3, 8011538 <_dtoa_r+0x2c8>)
 80113b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b6:	f7ef f947 	bl	8000648 <__aeabi_dmul>
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	4630      	mov	r0, r6
 80113c0:	4639      	mov	r1, r7
 80113c2:	f7ee ff8b 	bl	80002dc <__adddf3>
 80113c6:	4606      	mov	r6, r0
 80113c8:	460f      	mov	r7, r1
 80113ca:	f7ef fbed 	bl	8000ba8 <__aeabi_d2iz>
 80113ce:	2200      	movs	r2, #0
 80113d0:	9000      	str	r0, [sp, #0]
 80113d2:	2300      	movs	r3, #0
 80113d4:	4630      	mov	r0, r6
 80113d6:	4639      	mov	r1, r7
 80113d8:	f7ef fba8 	bl	8000b2c <__aeabi_dcmplt>
 80113dc:	b150      	cbz	r0, 80113f4 <_dtoa_r+0x184>
 80113de:	9800      	ldr	r0, [sp, #0]
 80113e0:	f7ef f8c8 	bl	8000574 <__aeabi_i2d>
 80113e4:	4632      	mov	r2, r6
 80113e6:	463b      	mov	r3, r7
 80113e8:	f7ef fb96 	bl	8000b18 <__aeabi_dcmpeq>
 80113ec:	b910      	cbnz	r0, 80113f4 <_dtoa_r+0x184>
 80113ee:	9b00      	ldr	r3, [sp, #0]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	9300      	str	r3, [sp, #0]
 80113f4:	9b00      	ldr	r3, [sp, #0]
 80113f6:	2b16      	cmp	r3, #22
 80113f8:	d85a      	bhi.n	80114b0 <_dtoa_r+0x240>
 80113fa:	9a00      	ldr	r2, [sp, #0]
 80113fc:	4b57      	ldr	r3, [pc, #348]	; (801155c <_dtoa_r+0x2ec>)
 80113fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011406:	ec51 0b19 	vmov	r0, r1, d9
 801140a:	f7ef fb8f 	bl	8000b2c <__aeabi_dcmplt>
 801140e:	2800      	cmp	r0, #0
 8011410:	d050      	beq.n	80114b4 <_dtoa_r+0x244>
 8011412:	9b00      	ldr	r3, [sp, #0]
 8011414:	3b01      	subs	r3, #1
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2300      	movs	r3, #0
 801141a:	930b      	str	r3, [sp, #44]	; 0x2c
 801141c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801141e:	1b5d      	subs	r5, r3, r5
 8011420:	1e6b      	subs	r3, r5, #1
 8011422:	9305      	str	r3, [sp, #20]
 8011424:	bf45      	ittet	mi
 8011426:	f1c5 0301 	rsbmi	r3, r5, #1
 801142a:	9304      	strmi	r3, [sp, #16]
 801142c:	2300      	movpl	r3, #0
 801142e:	2300      	movmi	r3, #0
 8011430:	bf4c      	ite	mi
 8011432:	9305      	strmi	r3, [sp, #20]
 8011434:	9304      	strpl	r3, [sp, #16]
 8011436:	9b00      	ldr	r3, [sp, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	db3d      	blt.n	80114b8 <_dtoa_r+0x248>
 801143c:	9b05      	ldr	r3, [sp, #20]
 801143e:	9a00      	ldr	r2, [sp, #0]
 8011440:	920a      	str	r2, [sp, #40]	; 0x28
 8011442:	4413      	add	r3, r2
 8011444:	9305      	str	r3, [sp, #20]
 8011446:	2300      	movs	r3, #0
 8011448:	9307      	str	r3, [sp, #28]
 801144a:	9b06      	ldr	r3, [sp, #24]
 801144c:	2b09      	cmp	r3, #9
 801144e:	f200 8089 	bhi.w	8011564 <_dtoa_r+0x2f4>
 8011452:	2b05      	cmp	r3, #5
 8011454:	bfc4      	itt	gt
 8011456:	3b04      	subgt	r3, #4
 8011458:	9306      	strgt	r3, [sp, #24]
 801145a:	9b06      	ldr	r3, [sp, #24]
 801145c:	f1a3 0302 	sub.w	r3, r3, #2
 8011460:	bfcc      	ite	gt
 8011462:	2500      	movgt	r5, #0
 8011464:	2501      	movle	r5, #1
 8011466:	2b03      	cmp	r3, #3
 8011468:	f200 8087 	bhi.w	801157a <_dtoa_r+0x30a>
 801146c:	e8df f003 	tbb	[pc, r3]
 8011470:	59383a2d 	.word	0x59383a2d
 8011474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011478:	441d      	add	r5, r3
 801147a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801147e:	2b20      	cmp	r3, #32
 8011480:	bfc1      	itttt	gt
 8011482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801148a:	fa0b f303 	lslgt.w	r3, fp, r3
 801148e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011492:	bfda      	itte	le
 8011494:	f1c3 0320 	rsble	r3, r3, #32
 8011498:	fa06 f003 	lslle.w	r0, r6, r3
 801149c:	4318      	orrgt	r0, r3
 801149e:	f7ef f859 	bl	8000554 <__aeabi_ui2d>
 80114a2:	2301      	movs	r3, #1
 80114a4:	4606      	mov	r6, r0
 80114a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80114aa:	3d01      	subs	r5, #1
 80114ac:	930e      	str	r3, [sp, #56]	; 0x38
 80114ae:	e76a      	b.n	8011386 <_dtoa_r+0x116>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e7b2      	b.n	801141a <_dtoa_r+0x1aa>
 80114b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80114b6:	e7b1      	b.n	801141c <_dtoa_r+0x1ac>
 80114b8:	9b04      	ldr	r3, [sp, #16]
 80114ba:	9a00      	ldr	r2, [sp, #0]
 80114bc:	1a9b      	subs	r3, r3, r2
 80114be:	9304      	str	r3, [sp, #16]
 80114c0:	4253      	negs	r3, r2
 80114c2:	9307      	str	r3, [sp, #28]
 80114c4:	2300      	movs	r3, #0
 80114c6:	930a      	str	r3, [sp, #40]	; 0x28
 80114c8:	e7bf      	b.n	801144a <_dtoa_r+0x1da>
 80114ca:	2300      	movs	r3, #0
 80114cc:	9308      	str	r3, [sp, #32]
 80114ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dc55      	bgt.n	8011580 <_dtoa_r+0x310>
 80114d4:	2301      	movs	r3, #1
 80114d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80114da:	461a      	mov	r2, r3
 80114dc:	9209      	str	r2, [sp, #36]	; 0x24
 80114de:	e00c      	b.n	80114fa <_dtoa_r+0x28a>
 80114e0:	2301      	movs	r3, #1
 80114e2:	e7f3      	b.n	80114cc <_dtoa_r+0x25c>
 80114e4:	2300      	movs	r3, #0
 80114e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e8:	9308      	str	r3, [sp, #32]
 80114ea:	9b00      	ldr	r3, [sp, #0]
 80114ec:	4413      	add	r3, r2
 80114ee:	9302      	str	r3, [sp, #8]
 80114f0:	3301      	adds	r3, #1
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	9303      	str	r3, [sp, #12]
 80114f6:	bfb8      	it	lt
 80114f8:	2301      	movlt	r3, #1
 80114fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80114fc:	2200      	movs	r2, #0
 80114fe:	6042      	str	r2, [r0, #4]
 8011500:	2204      	movs	r2, #4
 8011502:	f102 0614 	add.w	r6, r2, #20
 8011506:	429e      	cmp	r6, r3
 8011508:	6841      	ldr	r1, [r0, #4]
 801150a:	d93d      	bls.n	8011588 <_dtoa_r+0x318>
 801150c:	4620      	mov	r0, r4
 801150e:	f001 fa63 	bl	80129d8 <_Balloc>
 8011512:	9001      	str	r0, [sp, #4]
 8011514:	2800      	cmp	r0, #0
 8011516:	d13b      	bne.n	8011590 <_dtoa_r+0x320>
 8011518:	4b11      	ldr	r3, [pc, #68]	; (8011560 <_dtoa_r+0x2f0>)
 801151a:	4602      	mov	r2, r0
 801151c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011520:	e6c0      	b.n	80112a4 <_dtoa_r+0x34>
 8011522:	2301      	movs	r3, #1
 8011524:	e7df      	b.n	80114e6 <_dtoa_r+0x276>
 8011526:	bf00      	nop
 8011528:	636f4361 	.word	0x636f4361
 801152c:	3fd287a7 	.word	0x3fd287a7
 8011530:	8b60c8b3 	.word	0x8b60c8b3
 8011534:	3fc68a28 	.word	0x3fc68a28
 8011538:	509f79fb 	.word	0x509f79fb
 801153c:	3fd34413 	.word	0x3fd34413
 8011540:	0802a80e 	.word	0x0802a80e
 8011544:	0802a825 	.word	0x0802a825
 8011548:	7ff00000 	.word	0x7ff00000
 801154c:	0802a80a 	.word	0x0802a80a
 8011550:	0802a801 	.word	0x0802a801
 8011554:	0802a686 	.word	0x0802a686
 8011558:	3ff80000 	.word	0x3ff80000
 801155c:	0802aa58 	.word	0x0802aa58
 8011560:	0802a8a3 	.word	0x0802a8a3
 8011564:	2501      	movs	r5, #1
 8011566:	2300      	movs	r3, #0
 8011568:	9306      	str	r3, [sp, #24]
 801156a:	9508      	str	r5, [sp, #32]
 801156c:	f04f 33ff 	mov.w	r3, #4294967295
 8011570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011574:	2200      	movs	r2, #0
 8011576:	2312      	movs	r3, #18
 8011578:	e7b0      	b.n	80114dc <_dtoa_r+0x26c>
 801157a:	2301      	movs	r3, #1
 801157c:	9308      	str	r3, [sp, #32]
 801157e:	e7f5      	b.n	801156c <_dtoa_r+0x2fc>
 8011580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011586:	e7b8      	b.n	80114fa <_dtoa_r+0x28a>
 8011588:	3101      	adds	r1, #1
 801158a:	6041      	str	r1, [r0, #4]
 801158c:	0052      	lsls	r2, r2, #1
 801158e:	e7b8      	b.n	8011502 <_dtoa_r+0x292>
 8011590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011592:	9a01      	ldr	r2, [sp, #4]
 8011594:	601a      	str	r2, [r3, #0]
 8011596:	9b03      	ldr	r3, [sp, #12]
 8011598:	2b0e      	cmp	r3, #14
 801159a:	f200 809d 	bhi.w	80116d8 <_dtoa_r+0x468>
 801159e:	2d00      	cmp	r5, #0
 80115a0:	f000 809a 	beq.w	80116d8 <_dtoa_r+0x468>
 80115a4:	9b00      	ldr	r3, [sp, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	dd32      	ble.n	8011610 <_dtoa_r+0x3a0>
 80115aa:	4ab7      	ldr	r2, [pc, #732]	; (8011888 <_dtoa_r+0x618>)
 80115ac:	f003 030f 	and.w	r3, r3, #15
 80115b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80115b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115b8:	9b00      	ldr	r3, [sp, #0]
 80115ba:	05d8      	lsls	r0, r3, #23
 80115bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80115c0:	d516      	bpl.n	80115f0 <_dtoa_r+0x380>
 80115c2:	4bb2      	ldr	r3, [pc, #712]	; (801188c <_dtoa_r+0x61c>)
 80115c4:	ec51 0b19 	vmov	r0, r1, d9
 80115c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80115cc:	f7ef f966 	bl	800089c <__aeabi_ddiv>
 80115d0:	f007 070f 	and.w	r7, r7, #15
 80115d4:	4682      	mov	sl, r0
 80115d6:	468b      	mov	fp, r1
 80115d8:	2503      	movs	r5, #3
 80115da:	4eac      	ldr	r6, [pc, #688]	; (801188c <_dtoa_r+0x61c>)
 80115dc:	b957      	cbnz	r7, 80115f4 <_dtoa_r+0x384>
 80115de:	4642      	mov	r2, r8
 80115e0:	464b      	mov	r3, r9
 80115e2:	4650      	mov	r0, sl
 80115e4:	4659      	mov	r1, fp
 80115e6:	f7ef f959 	bl	800089c <__aeabi_ddiv>
 80115ea:	4682      	mov	sl, r0
 80115ec:	468b      	mov	fp, r1
 80115ee:	e028      	b.n	8011642 <_dtoa_r+0x3d2>
 80115f0:	2502      	movs	r5, #2
 80115f2:	e7f2      	b.n	80115da <_dtoa_r+0x36a>
 80115f4:	07f9      	lsls	r1, r7, #31
 80115f6:	d508      	bpl.n	801160a <_dtoa_r+0x39a>
 80115f8:	4640      	mov	r0, r8
 80115fa:	4649      	mov	r1, r9
 80115fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011600:	f7ef f822 	bl	8000648 <__aeabi_dmul>
 8011604:	3501      	adds	r5, #1
 8011606:	4680      	mov	r8, r0
 8011608:	4689      	mov	r9, r1
 801160a:	107f      	asrs	r7, r7, #1
 801160c:	3608      	adds	r6, #8
 801160e:	e7e5      	b.n	80115dc <_dtoa_r+0x36c>
 8011610:	f000 809b 	beq.w	801174a <_dtoa_r+0x4da>
 8011614:	9b00      	ldr	r3, [sp, #0]
 8011616:	4f9d      	ldr	r7, [pc, #628]	; (801188c <_dtoa_r+0x61c>)
 8011618:	425e      	negs	r6, r3
 801161a:	4b9b      	ldr	r3, [pc, #620]	; (8011888 <_dtoa_r+0x618>)
 801161c:	f006 020f 	and.w	r2, r6, #15
 8011620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011628:	ec51 0b19 	vmov	r0, r1, d9
 801162c:	f7ef f80c 	bl	8000648 <__aeabi_dmul>
 8011630:	1136      	asrs	r6, r6, #4
 8011632:	4682      	mov	sl, r0
 8011634:	468b      	mov	fp, r1
 8011636:	2300      	movs	r3, #0
 8011638:	2502      	movs	r5, #2
 801163a:	2e00      	cmp	r6, #0
 801163c:	d17a      	bne.n	8011734 <_dtoa_r+0x4c4>
 801163e:	2b00      	cmp	r3, #0
 8011640:	d1d3      	bne.n	80115ea <_dtoa_r+0x37a>
 8011642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011644:	2b00      	cmp	r3, #0
 8011646:	f000 8082 	beq.w	801174e <_dtoa_r+0x4de>
 801164a:	4b91      	ldr	r3, [pc, #580]	; (8011890 <_dtoa_r+0x620>)
 801164c:	2200      	movs	r2, #0
 801164e:	4650      	mov	r0, sl
 8011650:	4659      	mov	r1, fp
 8011652:	f7ef fa6b 	bl	8000b2c <__aeabi_dcmplt>
 8011656:	2800      	cmp	r0, #0
 8011658:	d079      	beq.n	801174e <_dtoa_r+0x4de>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d076      	beq.n	801174e <_dtoa_r+0x4de>
 8011660:	9b02      	ldr	r3, [sp, #8]
 8011662:	2b00      	cmp	r3, #0
 8011664:	dd36      	ble.n	80116d4 <_dtoa_r+0x464>
 8011666:	9b00      	ldr	r3, [sp, #0]
 8011668:	4650      	mov	r0, sl
 801166a:	4659      	mov	r1, fp
 801166c:	1e5f      	subs	r7, r3, #1
 801166e:	2200      	movs	r2, #0
 8011670:	4b88      	ldr	r3, [pc, #544]	; (8011894 <_dtoa_r+0x624>)
 8011672:	f7ee ffe9 	bl	8000648 <__aeabi_dmul>
 8011676:	9e02      	ldr	r6, [sp, #8]
 8011678:	4682      	mov	sl, r0
 801167a:	468b      	mov	fp, r1
 801167c:	3501      	adds	r5, #1
 801167e:	4628      	mov	r0, r5
 8011680:	f7ee ff78 	bl	8000574 <__aeabi_i2d>
 8011684:	4652      	mov	r2, sl
 8011686:	465b      	mov	r3, fp
 8011688:	f7ee ffde 	bl	8000648 <__aeabi_dmul>
 801168c:	4b82      	ldr	r3, [pc, #520]	; (8011898 <_dtoa_r+0x628>)
 801168e:	2200      	movs	r2, #0
 8011690:	f7ee fe24 	bl	80002dc <__adddf3>
 8011694:	46d0      	mov	r8, sl
 8011696:	46d9      	mov	r9, fp
 8011698:	4682      	mov	sl, r0
 801169a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801169e:	2e00      	cmp	r6, #0
 80116a0:	d158      	bne.n	8011754 <_dtoa_r+0x4e4>
 80116a2:	4b7e      	ldr	r3, [pc, #504]	; (801189c <_dtoa_r+0x62c>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	4640      	mov	r0, r8
 80116a8:	4649      	mov	r1, r9
 80116aa:	f7ee fe15 	bl	80002d8 <__aeabi_dsub>
 80116ae:	4652      	mov	r2, sl
 80116b0:	465b      	mov	r3, fp
 80116b2:	4680      	mov	r8, r0
 80116b4:	4689      	mov	r9, r1
 80116b6:	f7ef fa57 	bl	8000b68 <__aeabi_dcmpgt>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	f040 8295 	bne.w	8011bea <_dtoa_r+0x97a>
 80116c0:	4652      	mov	r2, sl
 80116c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80116c6:	4640      	mov	r0, r8
 80116c8:	4649      	mov	r1, r9
 80116ca:	f7ef fa2f 	bl	8000b2c <__aeabi_dcmplt>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	f040 8289 	bne.w	8011be6 <_dtoa_r+0x976>
 80116d4:	ec5b ab19 	vmov	sl, fp, d9
 80116d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f2c0 8148 	blt.w	8011970 <_dtoa_r+0x700>
 80116e0:	9a00      	ldr	r2, [sp, #0]
 80116e2:	2a0e      	cmp	r2, #14
 80116e4:	f300 8144 	bgt.w	8011970 <_dtoa_r+0x700>
 80116e8:	4b67      	ldr	r3, [pc, #412]	; (8011888 <_dtoa_r+0x618>)
 80116ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f280 80d5 	bge.w	80118a4 <_dtoa_r+0x634>
 80116fa:	9b03      	ldr	r3, [sp, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f300 80d1 	bgt.w	80118a4 <_dtoa_r+0x634>
 8011702:	f040 826f 	bne.w	8011be4 <_dtoa_r+0x974>
 8011706:	4b65      	ldr	r3, [pc, #404]	; (801189c <_dtoa_r+0x62c>)
 8011708:	2200      	movs	r2, #0
 801170a:	4640      	mov	r0, r8
 801170c:	4649      	mov	r1, r9
 801170e:	f7ee ff9b 	bl	8000648 <__aeabi_dmul>
 8011712:	4652      	mov	r2, sl
 8011714:	465b      	mov	r3, fp
 8011716:	f7ef fa1d 	bl	8000b54 <__aeabi_dcmpge>
 801171a:	9e03      	ldr	r6, [sp, #12]
 801171c:	4637      	mov	r7, r6
 801171e:	2800      	cmp	r0, #0
 8011720:	f040 8245 	bne.w	8011bae <_dtoa_r+0x93e>
 8011724:	9d01      	ldr	r5, [sp, #4]
 8011726:	2331      	movs	r3, #49	; 0x31
 8011728:	f805 3b01 	strb.w	r3, [r5], #1
 801172c:	9b00      	ldr	r3, [sp, #0]
 801172e:	3301      	adds	r3, #1
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	e240      	b.n	8011bb6 <_dtoa_r+0x946>
 8011734:	07f2      	lsls	r2, r6, #31
 8011736:	d505      	bpl.n	8011744 <_dtoa_r+0x4d4>
 8011738:	e9d7 2300 	ldrd	r2, r3, [r7]
 801173c:	f7ee ff84 	bl	8000648 <__aeabi_dmul>
 8011740:	3501      	adds	r5, #1
 8011742:	2301      	movs	r3, #1
 8011744:	1076      	asrs	r6, r6, #1
 8011746:	3708      	adds	r7, #8
 8011748:	e777      	b.n	801163a <_dtoa_r+0x3ca>
 801174a:	2502      	movs	r5, #2
 801174c:	e779      	b.n	8011642 <_dtoa_r+0x3d2>
 801174e:	9f00      	ldr	r7, [sp, #0]
 8011750:	9e03      	ldr	r6, [sp, #12]
 8011752:	e794      	b.n	801167e <_dtoa_r+0x40e>
 8011754:	9901      	ldr	r1, [sp, #4]
 8011756:	4b4c      	ldr	r3, [pc, #304]	; (8011888 <_dtoa_r+0x618>)
 8011758:	4431      	add	r1, r6
 801175a:	910d      	str	r1, [sp, #52]	; 0x34
 801175c:	9908      	ldr	r1, [sp, #32]
 801175e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011766:	2900      	cmp	r1, #0
 8011768:	d043      	beq.n	80117f2 <_dtoa_r+0x582>
 801176a:	494d      	ldr	r1, [pc, #308]	; (80118a0 <_dtoa_r+0x630>)
 801176c:	2000      	movs	r0, #0
 801176e:	f7ef f895 	bl	800089c <__aeabi_ddiv>
 8011772:	4652      	mov	r2, sl
 8011774:	465b      	mov	r3, fp
 8011776:	f7ee fdaf 	bl	80002d8 <__aeabi_dsub>
 801177a:	9d01      	ldr	r5, [sp, #4]
 801177c:	4682      	mov	sl, r0
 801177e:	468b      	mov	fp, r1
 8011780:	4649      	mov	r1, r9
 8011782:	4640      	mov	r0, r8
 8011784:	f7ef fa10 	bl	8000ba8 <__aeabi_d2iz>
 8011788:	4606      	mov	r6, r0
 801178a:	f7ee fef3 	bl	8000574 <__aeabi_i2d>
 801178e:	4602      	mov	r2, r0
 8011790:	460b      	mov	r3, r1
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	f7ee fd9f 	bl	80002d8 <__aeabi_dsub>
 801179a:	3630      	adds	r6, #48	; 0x30
 801179c:	f805 6b01 	strb.w	r6, [r5], #1
 80117a0:	4652      	mov	r2, sl
 80117a2:	465b      	mov	r3, fp
 80117a4:	4680      	mov	r8, r0
 80117a6:	4689      	mov	r9, r1
 80117a8:	f7ef f9c0 	bl	8000b2c <__aeabi_dcmplt>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d163      	bne.n	8011878 <_dtoa_r+0x608>
 80117b0:	4642      	mov	r2, r8
 80117b2:	464b      	mov	r3, r9
 80117b4:	4936      	ldr	r1, [pc, #216]	; (8011890 <_dtoa_r+0x620>)
 80117b6:	2000      	movs	r0, #0
 80117b8:	f7ee fd8e 	bl	80002d8 <__aeabi_dsub>
 80117bc:	4652      	mov	r2, sl
 80117be:	465b      	mov	r3, fp
 80117c0:	f7ef f9b4 	bl	8000b2c <__aeabi_dcmplt>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	f040 80b5 	bne.w	8011934 <_dtoa_r+0x6c4>
 80117ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117cc:	429d      	cmp	r5, r3
 80117ce:	d081      	beq.n	80116d4 <_dtoa_r+0x464>
 80117d0:	4b30      	ldr	r3, [pc, #192]	; (8011894 <_dtoa_r+0x624>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	4650      	mov	r0, sl
 80117d6:	4659      	mov	r1, fp
 80117d8:	f7ee ff36 	bl	8000648 <__aeabi_dmul>
 80117dc:	4b2d      	ldr	r3, [pc, #180]	; (8011894 <_dtoa_r+0x624>)
 80117de:	4682      	mov	sl, r0
 80117e0:	468b      	mov	fp, r1
 80117e2:	4640      	mov	r0, r8
 80117e4:	4649      	mov	r1, r9
 80117e6:	2200      	movs	r2, #0
 80117e8:	f7ee ff2e 	bl	8000648 <__aeabi_dmul>
 80117ec:	4680      	mov	r8, r0
 80117ee:	4689      	mov	r9, r1
 80117f0:	e7c6      	b.n	8011780 <_dtoa_r+0x510>
 80117f2:	4650      	mov	r0, sl
 80117f4:	4659      	mov	r1, fp
 80117f6:	f7ee ff27 	bl	8000648 <__aeabi_dmul>
 80117fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117fc:	9d01      	ldr	r5, [sp, #4]
 80117fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011800:	4682      	mov	sl, r0
 8011802:	468b      	mov	fp, r1
 8011804:	4649      	mov	r1, r9
 8011806:	4640      	mov	r0, r8
 8011808:	f7ef f9ce 	bl	8000ba8 <__aeabi_d2iz>
 801180c:	4606      	mov	r6, r0
 801180e:	f7ee feb1 	bl	8000574 <__aeabi_i2d>
 8011812:	3630      	adds	r6, #48	; 0x30
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	4640      	mov	r0, r8
 801181a:	4649      	mov	r1, r9
 801181c:	f7ee fd5c 	bl	80002d8 <__aeabi_dsub>
 8011820:	f805 6b01 	strb.w	r6, [r5], #1
 8011824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011826:	429d      	cmp	r5, r3
 8011828:	4680      	mov	r8, r0
 801182a:	4689      	mov	r9, r1
 801182c:	f04f 0200 	mov.w	r2, #0
 8011830:	d124      	bne.n	801187c <_dtoa_r+0x60c>
 8011832:	4b1b      	ldr	r3, [pc, #108]	; (80118a0 <_dtoa_r+0x630>)
 8011834:	4650      	mov	r0, sl
 8011836:	4659      	mov	r1, fp
 8011838:	f7ee fd50 	bl	80002dc <__adddf3>
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	4640      	mov	r0, r8
 8011842:	4649      	mov	r1, r9
 8011844:	f7ef f990 	bl	8000b68 <__aeabi_dcmpgt>
 8011848:	2800      	cmp	r0, #0
 801184a:	d173      	bne.n	8011934 <_dtoa_r+0x6c4>
 801184c:	4652      	mov	r2, sl
 801184e:	465b      	mov	r3, fp
 8011850:	4913      	ldr	r1, [pc, #76]	; (80118a0 <_dtoa_r+0x630>)
 8011852:	2000      	movs	r0, #0
 8011854:	f7ee fd40 	bl	80002d8 <__aeabi_dsub>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	4640      	mov	r0, r8
 801185e:	4649      	mov	r1, r9
 8011860:	f7ef f964 	bl	8000b2c <__aeabi_dcmplt>
 8011864:	2800      	cmp	r0, #0
 8011866:	f43f af35 	beq.w	80116d4 <_dtoa_r+0x464>
 801186a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801186c:	1e6b      	subs	r3, r5, #1
 801186e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011874:	2b30      	cmp	r3, #48	; 0x30
 8011876:	d0f8      	beq.n	801186a <_dtoa_r+0x5fa>
 8011878:	9700      	str	r7, [sp, #0]
 801187a:	e049      	b.n	8011910 <_dtoa_r+0x6a0>
 801187c:	4b05      	ldr	r3, [pc, #20]	; (8011894 <_dtoa_r+0x624>)
 801187e:	f7ee fee3 	bl	8000648 <__aeabi_dmul>
 8011882:	4680      	mov	r8, r0
 8011884:	4689      	mov	r9, r1
 8011886:	e7bd      	b.n	8011804 <_dtoa_r+0x594>
 8011888:	0802aa58 	.word	0x0802aa58
 801188c:	0802aa30 	.word	0x0802aa30
 8011890:	3ff00000 	.word	0x3ff00000
 8011894:	40240000 	.word	0x40240000
 8011898:	401c0000 	.word	0x401c0000
 801189c:	40140000 	.word	0x40140000
 80118a0:	3fe00000 	.word	0x3fe00000
 80118a4:	9d01      	ldr	r5, [sp, #4]
 80118a6:	4656      	mov	r6, sl
 80118a8:	465f      	mov	r7, fp
 80118aa:	4642      	mov	r2, r8
 80118ac:	464b      	mov	r3, r9
 80118ae:	4630      	mov	r0, r6
 80118b0:	4639      	mov	r1, r7
 80118b2:	f7ee fff3 	bl	800089c <__aeabi_ddiv>
 80118b6:	f7ef f977 	bl	8000ba8 <__aeabi_d2iz>
 80118ba:	4682      	mov	sl, r0
 80118bc:	f7ee fe5a 	bl	8000574 <__aeabi_i2d>
 80118c0:	4642      	mov	r2, r8
 80118c2:	464b      	mov	r3, r9
 80118c4:	f7ee fec0 	bl	8000648 <__aeabi_dmul>
 80118c8:	4602      	mov	r2, r0
 80118ca:	460b      	mov	r3, r1
 80118cc:	4630      	mov	r0, r6
 80118ce:	4639      	mov	r1, r7
 80118d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80118d4:	f7ee fd00 	bl	80002d8 <__aeabi_dsub>
 80118d8:	f805 6b01 	strb.w	r6, [r5], #1
 80118dc:	9e01      	ldr	r6, [sp, #4]
 80118de:	9f03      	ldr	r7, [sp, #12]
 80118e0:	1bae      	subs	r6, r5, r6
 80118e2:	42b7      	cmp	r7, r6
 80118e4:	4602      	mov	r2, r0
 80118e6:	460b      	mov	r3, r1
 80118e8:	d135      	bne.n	8011956 <_dtoa_r+0x6e6>
 80118ea:	f7ee fcf7 	bl	80002dc <__adddf3>
 80118ee:	4642      	mov	r2, r8
 80118f0:	464b      	mov	r3, r9
 80118f2:	4606      	mov	r6, r0
 80118f4:	460f      	mov	r7, r1
 80118f6:	f7ef f937 	bl	8000b68 <__aeabi_dcmpgt>
 80118fa:	b9d0      	cbnz	r0, 8011932 <_dtoa_r+0x6c2>
 80118fc:	4642      	mov	r2, r8
 80118fe:	464b      	mov	r3, r9
 8011900:	4630      	mov	r0, r6
 8011902:	4639      	mov	r1, r7
 8011904:	f7ef f908 	bl	8000b18 <__aeabi_dcmpeq>
 8011908:	b110      	cbz	r0, 8011910 <_dtoa_r+0x6a0>
 801190a:	f01a 0f01 	tst.w	sl, #1
 801190e:	d110      	bne.n	8011932 <_dtoa_r+0x6c2>
 8011910:	4620      	mov	r0, r4
 8011912:	ee18 1a10 	vmov	r1, s16
 8011916:	f001 f89f 	bl	8012a58 <_Bfree>
 801191a:	2300      	movs	r3, #0
 801191c:	9800      	ldr	r0, [sp, #0]
 801191e:	702b      	strb	r3, [r5, #0]
 8011920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011922:	3001      	adds	r0, #1
 8011924:	6018      	str	r0, [r3, #0]
 8011926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011928:	2b00      	cmp	r3, #0
 801192a:	f43f acf1 	beq.w	8011310 <_dtoa_r+0xa0>
 801192e:	601d      	str	r5, [r3, #0]
 8011930:	e4ee      	b.n	8011310 <_dtoa_r+0xa0>
 8011932:	9f00      	ldr	r7, [sp, #0]
 8011934:	462b      	mov	r3, r5
 8011936:	461d      	mov	r5, r3
 8011938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801193c:	2a39      	cmp	r2, #57	; 0x39
 801193e:	d106      	bne.n	801194e <_dtoa_r+0x6de>
 8011940:	9a01      	ldr	r2, [sp, #4]
 8011942:	429a      	cmp	r2, r3
 8011944:	d1f7      	bne.n	8011936 <_dtoa_r+0x6c6>
 8011946:	9901      	ldr	r1, [sp, #4]
 8011948:	2230      	movs	r2, #48	; 0x30
 801194a:	3701      	adds	r7, #1
 801194c:	700a      	strb	r2, [r1, #0]
 801194e:	781a      	ldrb	r2, [r3, #0]
 8011950:	3201      	adds	r2, #1
 8011952:	701a      	strb	r2, [r3, #0]
 8011954:	e790      	b.n	8011878 <_dtoa_r+0x608>
 8011956:	4ba6      	ldr	r3, [pc, #664]	; (8011bf0 <_dtoa_r+0x980>)
 8011958:	2200      	movs	r2, #0
 801195a:	f7ee fe75 	bl	8000648 <__aeabi_dmul>
 801195e:	2200      	movs	r2, #0
 8011960:	2300      	movs	r3, #0
 8011962:	4606      	mov	r6, r0
 8011964:	460f      	mov	r7, r1
 8011966:	f7ef f8d7 	bl	8000b18 <__aeabi_dcmpeq>
 801196a:	2800      	cmp	r0, #0
 801196c:	d09d      	beq.n	80118aa <_dtoa_r+0x63a>
 801196e:	e7cf      	b.n	8011910 <_dtoa_r+0x6a0>
 8011970:	9a08      	ldr	r2, [sp, #32]
 8011972:	2a00      	cmp	r2, #0
 8011974:	f000 80d7 	beq.w	8011b26 <_dtoa_r+0x8b6>
 8011978:	9a06      	ldr	r2, [sp, #24]
 801197a:	2a01      	cmp	r2, #1
 801197c:	f300 80ba 	bgt.w	8011af4 <_dtoa_r+0x884>
 8011980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011982:	2a00      	cmp	r2, #0
 8011984:	f000 80b2 	beq.w	8011aec <_dtoa_r+0x87c>
 8011988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801198c:	9e07      	ldr	r6, [sp, #28]
 801198e:	9d04      	ldr	r5, [sp, #16]
 8011990:	9a04      	ldr	r2, [sp, #16]
 8011992:	441a      	add	r2, r3
 8011994:	9204      	str	r2, [sp, #16]
 8011996:	9a05      	ldr	r2, [sp, #20]
 8011998:	2101      	movs	r1, #1
 801199a:	441a      	add	r2, r3
 801199c:	4620      	mov	r0, r4
 801199e:	9205      	str	r2, [sp, #20]
 80119a0:	f001 f95c 	bl	8012c5c <__i2b>
 80119a4:	4607      	mov	r7, r0
 80119a6:	2d00      	cmp	r5, #0
 80119a8:	dd0c      	ble.n	80119c4 <_dtoa_r+0x754>
 80119aa:	9b05      	ldr	r3, [sp, #20]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	dd09      	ble.n	80119c4 <_dtoa_r+0x754>
 80119b0:	42ab      	cmp	r3, r5
 80119b2:	9a04      	ldr	r2, [sp, #16]
 80119b4:	bfa8      	it	ge
 80119b6:	462b      	movge	r3, r5
 80119b8:	1ad2      	subs	r2, r2, r3
 80119ba:	9204      	str	r2, [sp, #16]
 80119bc:	9a05      	ldr	r2, [sp, #20]
 80119be:	1aed      	subs	r5, r5, r3
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	9305      	str	r3, [sp, #20]
 80119c4:	9b07      	ldr	r3, [sp, #28]
 80119c6:	b31b      	cbz	r3, 8011a10 <_dtoa_r+0x7a0>
 80119c8:	9b08      	ldr	r3, [sp, #32]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f000 80af 	beq.w	8011b2e <_dtoa_r+0x8be>
 80119d0:	2e00      	cmp	r6, #0
 80119d2:	dd13      	ble.n	80119fc <_dtoa_r+0x78c>
 80119d4:	4639      	mov	r1, r7
 80119d6:	4632      	mov	r2, r6
 80119d8:	4620      	mov	r0, r4
 80119da:	f001 f9ff 	bl	8012ddc <__pow5mult>
 80119de:	ee18 2a10 	vmov	r2, s16
 80119e2:	4601      	mov	r1, r0
 80119e4:	4607      	mov	r7, r0
 80119e6:	4620      	mov	r0, r4
 80119e8:	f001 f94e 	bl	8012c88 <__multiply>
 80119ec:	ee18 1a10 	vmov	r1, s16
 80119f0:	4680      	mov	r8, r0
 80119f2:	4620      	mov	r0, r4
 80119f4:	f001 f830 	bl	8012a58 <_Bfree>
 80119f8:	ee08 8a10 	vmov	s16, r8
 80119fc:	9b07      	ldr	r3, [sp, #28]
 80119fe:	1b9a      	subs	r2, r3, r6
 8011a00:	d006      	beq.n	8011a10 <_dtoa_r+0x7a0>
 8011a02:	ee18 1a10 	vmov	r1, s16
 8011a06:	4620      	mov	r0, r4
 8011a08:	f001 f9e8 	bl	8012ddc <__pow5mult>
 8011a0c:	ee08 0a10 	vmov	s16, r0
 8011a10:	2101      	movs	r1, #1
 8011a12:	4620      	mov	r0, r4
 8011a14:	f001 f922 	bl	8012c5c <__i2b>
 8011a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	f340 8088 	ble.w	8011b32 <_dtoa_r+0x8c2>
 8011a22:	461a      	mov	r2, r3
 8011a24:	4601      	mov	r1, r0
 8011a26:	4620      	mov	r0, r4
 8011a28:	f001 f9d8 	bl	8012ddc <__pow5mult>
 8011a2c:	9b06      	ldr	r3, [sp, #24]
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	4606      	mov	r6, r0
 8011a32:	f340 8081 	ble.w	8011b38 <_dtoa_r+0x8c8>
 8011a36:	f04f 0800 	mov.w	r8, #0
 8011a3a:	6933      	ldr	r3, [r6, #16]
 8011a3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a40:	6918      	ldr	r0, [r3, #16]
 8011a42:	f001 f8bb 	bl	8012bbc <__hi0bits>
 8011a46:	f1c0 0020 	rsb	r0, r0, #32
 8011a4a:	9b05      	ldr	r3, [sp, #20]
 8011a4c:	4418      	add	r0, r3
 8011a4e:	f010 001f 	ands.w	r0, r0, #31
 8011a52:	f000 8092 	beq.w	8011b7a <_dtoa_r+0x90a>
 8011a56:	f1c0 0320 	rsb	r3, r0, #32
 8011a5a:	2b04      	cmp	r3, #4
 8011a5c:	f340 808a 	ble.w	8011b74 <_dtoa_r+0x904>
 8011a60:	f1c0 001c 	rsb	r0, r0, #28
 8011a64:	9b04      	ldr	r3, [sp, #16]
 8011a66:	4403      	add	r3, r0
 8011a68:	9304      	str	r3, [sp, #16]
 8011a6a:	9b05      	ldr	r3, [sp, #20]
 8011a6c:	4403      	add	r3, r0
 8011a6e:	4405      	add	r5, r0
 8011a70:	9305      	str	r3, [sp, #20]
 8011a72:	9b04      	ldr	r3, [sp, #16]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	dd07      	ble.n	8011a88 <_dtoa_r+0x818>
 8011a78:	ee18 1a10 	vmov	r1, s16
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f001 fa06 	bl	8012e90 <__lshift>
 8011a84:	ee08 0a10 	vmov	s16, r0
 8011a88:	9b05      	ldr	r3, [sp, #20]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	dd05      	ble.n	8011a9a <_dtoa_r+0x82a>
 8011a8e:	4631      	mov	r1, r6
 8011a90:	461a      	mov	r2, r3
 8011a92:	4620      	mov	r0, r4
 8011a94:	f001 f9fc 	bl	8012e90 <__lshift>
 8011a98:	4606      	mov	r6, r0
 8011a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d06e      	beq.n	8011b7e <_dtoa_r+0x90e>
 8011aa0:	ee18 0a10 	vmov	r0, s16
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	f001 fa63 	bl	8012f70 <__mcmp>
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	da67      	bge.n	8011b7e <_dtoa_r+0x90e>
 8011aae:	9b00      	ldr	r3, [sp, #0]
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	ee18 1a10 	vmov	r1, s16
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	220a      	movs	r2, #10
 8011aba:	2300      	movs	r3, #0
 8011abc:	4620      	mov	r0, r4
 8011abe:	f000 ffed 	bl	8012a9c <__multadd>
 8011ac2:	9b08      	ldr	r3, [sp, #32]
 8011ac4:	ee08 0a10 	vmov	s16, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 81b1 	beq.w	8011e30 <_dtoa_r+0xbc0>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	4639      	mov	r1, r7
 8011ad2:	220a      	movs	r2, #10
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f000 ffe1 	bl	8012a9c <__multadd>
 8011ada:	9b02      	ldr	r3, [sp, #8]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	4607      	mov	r7, r0
 8011ae0:	f300 808e 	bgt.w	8011c00 <_dtoa_r+0x990>
 8011ae4:	9b06      	ldr	r3, [sp, #24]
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	dc51      	bgt.n	8011b8e <_dtoa_r+0x91e>
 8011aea:	e089      	b.n	8011c00 <_dtoa_r+0x990>
 8011aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011af2:	e74b      	b.n	801198c <_dtoa_r+0x71c>
 8011af4:	9b03      	ldr	r3, [sp, #12]
 8011af6:	1e5e      	subs	r6, r3, #1
 8011af8:	9b07      	ldr	r3, [sp, #28]
 8011afa:	42b3      	cmp	r3, r6
 8011afc:	bfbf      	itttt	lt
 8011afe:	9b07      	ldrlt	r3, [sp, #28]
 8011b00:	9607      	strlt	r6, [sp, #28]
 8011b02:	1af2      	sublt	r2, r6, r3
 8011b04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011b06:	bfb6      	itet	lt
 8011b08:	189b      	addlt	r3, r3, r2
 8011b0a:	1b9e      	subge	r6, r3, r6
 8011b0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011b0e:	9b03      	ldr	r3, [sp, #12]
 8011b10:	bfb8      	it	lt
 8011b12:	2600      	movlt	r6, #0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	bfb7      	itett	lt
 8011b18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011b1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011b20:	1a9d      	sublt	r5, r3, r2
 8011b22:	2300      	movlt	r3, #0
 8011b24:	e734      	b.n	8011990 <_dtoa_r+0x720>
 8011b26:	9e07      	ldr	r6, [sp, #28]
 8011b28:	9d04      	ldr	r5, [sp, #16]
 8011b2a:	9f08      	ldr	r7, [sp, #32]
 8011b2c:	e73b      	b.n	80119a6 <_dtoa_r+0x736>
 8011b2e:	9a07      	ldr	r2, [sp, #28]
 8011b30:	e767      	b.n	8011a02 <_dtoa_r+0x792>
 8011b32:	9b06      	ldr	r3, [sp, #24]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	dc18      	bgt.n	8011b6a <_dtoa_r+0x8fa>
 8011b38:	f1ba 0f00 	cmp.w	sl, #0
 8011b3c:	d115      	bne.n	8011b6a <_dtoa_r+0x8fa>
 8011b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b42:	b993      	cbnz	r3, 8011b6a <_dtoa_r+0x8fa>
 8011b44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b48:	0d1b      	lsrs	r3, r3, #20
 8011b4a:	051b      	lsls	r3, r3, #20
 8011b4c:	b183      	cbz	r3, 8011b70 <_dtoa_r+0x900>
 8011b4e:	9b04      	ldr	r3, [sp, #16]
 8011b50:	3301      	adds	r3, #1
 8011b52:	9304      	str	r3, [sp, #16]
 8011b54:	9b05      	ldr	r3, [sp, #20]
 8011b56:	3301      	adds	r3, #1
 8011b58:	9305      	str	r3, [sp, #20]
 8011b5a:	f04f 0801 	mov.w	r8, #1
 8011b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f47f af6a 	bne.w	8011a3a <_dtoa_r+0x7ca>
 8011b66:	2001      	movs	r0, #1
 8011b68:	e76f      	b.n	8011a4a <_dtoa_r+0x7da>
 8011b6a:	f04f 0800 	mov.w	r8, #0
 8011b6e:	e7f6      	b.n	8011b5e <_dtoa_r+0x8ee>
 8011b70:	4698      	mov	r8, r3
 8011b72:	e7f4      	b.n	8011b5e <_dtoa_r+0x8ee>
 8011b74:	f43f af7d 	beq.w	8011a72 <_dtoa_r+0x802>
 8011b78:	4618      	mov	r0, r3
 8011b7a:	301c      	adds	r0, #28
 8011b7c:	e772      	b.n	8011a64 <_dtoa_r+0x7f4>
 8011b7e:	9b03      	ldr	r3, [sp, #12]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	dc37      	bgt.n	8011bf4 <_dtoa_r+0x984>
 8011b84:	9b06      	ldr	r3, [sp, #24]
 8011b86:	2b02      	cmp	r3, #2
 8011b88:	dd34      	ble.n	8011bf4 <_dtoa_r+0x984>
 8011b8a:	9b03      	ldr	r3, [sp, #12]
 8011b8c:	9302      	str	r3, [sp, #8]
 8011b8e:	9b02      	ldr	r3, [sp, #8]
 8011b90:	b96b      	cbnz	r3, 8011bae <_dtoa_r+0x93e>
 8011b92:	4631      	mov	r1, r6
 8011b94:	2205      	movs	r2, #5
 8011b96:	4620      	mov	r0, r4
 8011b98:	f000 ff80 	bl	8012a9c <__multadd>
 8011b9c:	4601      	mov	r1, r0
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	ee18 0a10 	vmov	r0, s16
 8011ba4:	f001 f9e4 	bl	8012f70 <__mcmp>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	f73f adbb 	bgt.w	8011724 <_dtoa_r+0x4b4>
 8011bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb0:	9d01      	ldr	r5, [sp, #4]
 8011bb2:	43db      	mvns	r3, r3
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	f04f 0800 	mov.w	r8, #0
 8011bba:	4631      	mov	r1, r6
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f000 ff4b 	bl	8012a58 <_Bfree>
 8011bc2:	2f00      	cmp	r7, #0
 8011bc4:	f43f aea4 	beq.w	8011910 <_dtoa_r+0x6a0>
 8011bc8:	f1b8 0f00 	cmp.w	r8, #0
 8011bcc:	d005      	beq.n	8011bda <_dtoa_r+0x96a>
 8011bce:	45b8      	cmp	r8, r7
 8011bd0:	d003      	beq.n	8011bda <_dtoa_r+0x96a>
 8011bd2:	4641      	mov	r1, r8
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f000 ff3f 	bl	8012a58 <_Bfree>
 8011bda:	4639      	mov	r1, r7
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f000 ff3b 	bl	8012a58 <_Bfree>
 8011be2:	e695      	b.n	8011910 <_dtoa_r+0x6a0>
 8011be4:	2600      	movs	r6, #0
 8011be6:	4637      	mov	r7, r6
 8011be8:	e7e1      	b.n	8011bae <_dtoa_r+0x93e>
 8011bea:	9700      	str	r7, [sp, #0]
 8011bec:	4637      	mov	r7, r6
 8011bee:	e599      	b.n	8011724 <_dtoa_r+0x4b4>
 8011bf0:	40240000 	.word	0x40240000
 8011bf4:	9b08      	ldr	r3, [sp, #32]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f000 80ca 	beq.w	8011d90 <_dtoa_r+0xb20>
 8011bfc:	9b03      	ldr	r3, [sp, #12]
 8011bfe:	9302      	str	r3, [sp, #8]
 8011c00:	2d00      	cmp	r5, #0
 8011c02:	dd05      	ble.n	8011c10 <_dtoa_r+0x9a0>
 8011c04:	4639      	mov	r1, r7
 8011c06:	462a      	mov	r2, r5
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f001 f941 	bl	8012e90 <__lshift>
 8011c0e:	4607      	mov	r7, r0
 8011c10:	f1b8 0f00 	cmp.w	r8, #0
 8011c14:	d05b      	beq.n	8011cce <_dtoa_r+0xa5e>
 8011c16:	6879      	ldr	r1, [r7, #4]
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f000 fedd 	bl	80129d8 <_Balloc>
 8011c1e:	4605      	mov	r5, r0
 8011c20:	b928      	cbnz	r0, 8011c2e <_dtoa_r+0x9be>
 8011c22:	4b87      	ldr	r3, [pc, #540]	; (8011e40 <_dtoa_r+0xbd0>)
 8011c24:	4602      	mov	r2, r0
 8011c26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011c2a:	f7ff bb3b 	b.w	80112a4 <_dtoa_r+0x34>
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	3202      	adds	r2, #2
 8011c32:	0092      	lsls	r2, r2, #2
 8011c34:	f107 010c 	add.w	r1, r7, #12
 8011c38:	300c      	adds	r0, #12
 8011c3a:	f7fd fa91 	bl	800f160 <memcpy>
 8011c3e:	2201      	movs	r2, #1
 8011c40:	4629      	mov	r1, r5
 8011c42:	4620      	mov	r0, r4
 8011c44:	f001 f924 	bl	8012e90 <__lshift>
 8011c48:	9b01      	ldr	r3, [sp, #4]
 8011c4a:	f103 0901 	add.w	r9, r3, #1
 8011c4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011c52:	4413      	add	r3, r2
 8011c54:	9305      	str	r3, [sp, #20]
 8011c56:	f00a 0301 	and.w	r3, sl, #1
 8011c5a:	46b8      	mov	r8, r7
 8011c5c:	9304      	str	r3, [sp, #16]
 8011c5e:	4607      	mov	r7, r0
 8011c60:	4631      	mov	r1, r6
 8011c62:	ee18 0a10 	vmov	r0, s16
 8011c66:	f7ff fa76 	bl	8011156 <quorem>
 8011c6a:	4641      	mov	r1, r8
 8011c6c:	9002      	str	r0, [sp, #8]
 8011c6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011c72:	ee18 0a10 	vmov	r0, s16
 8011c76:	f001 f97b 	bl	8012f70 <__mcmp>
 8011c7a:	463a      	mov	r2, r7
 8011c7c:	9003      	str	r0, [sp, #12]
 8011c7e:	4631      	mov	r1, r6
 8011c80:	4620      	mov	r0, r4
 8011c82:	f001 f991 	bl	8012fa8 <__mdiff>
 8011c86:	68c2      	ldr	r2, [r0, #12]
 8011c88:	f109 3bff 	add.w	fp, r9, #4294967295
 8011c8c:	4605      	mov	r5, r0
 8011c8e:	bb02      	cbnz	r2, 8011cd2 <_dtoa_r+0xa62>
 8011c90:	4601      	mov	r1, r0
 8011c92:	ee18 0a10 	vmov	r0, s16
 8011c96:	f001 f96b 	bl	8012f70 <__mcmp>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	9207      	str	r2, [sp, #28]
 8011ca2:	f000 fed9 	bl	8012a58 <_Bfree>
 8011ca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011caa:	ea43 0102 	orr.w	r1, r3, r2
 8011cae:	9b04      	ldr	r3, [sp, #16]
 8011cb0:	430b      	orrs	r3, r1
 8011cb2:	464d      	mov	r5, r9
 8011cb4:	d10f      	bne.n	8011cd6 <_dtoa_r+0xa66>
 8011cb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011cba:	d02a      	beq.n	8011d12 <_dtoa_r+0xaa2>
 8011cbc:	9b03      	ldr	r3, [sp, #12]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	dd02      	ble.n	8011cc8 <_dtoa_r+0xa58>
 8011cc2:	9b02      	ldr	r3, [sp, #8]
 8011cc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011cc8:	f88b a000 	strb.w	sl, [fp]
 8011ccc:	e775      	b.n	8011bba <_dtoa_r+0x94a>
 8011cce:	4638      	mov	r0, r7
 8011cd0:	e7ba      	b.n	8011c48 <_dtoa_r+0x9d8>
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	e7e2      	b.n	8011c9c <_dtoa_r+0xa2c>
 8011cd6:	9b03      	ldr	r3, [sp, #12]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	db04      	blt.n	8011ce6 <_dtoa_r+0xa76>
 8011cdc:	9906      	ldr	r1, [sp, #24]
 8011cde:	430b      	orrs	r3, r1
 8011ce0:	9904      	ldr	r1, [sp, #16]
 8011ce2:	430b      	orrs	r3, r1
 8011ce4:	d122      	bne.n	8011d2c <_dtoa_r+0xabc>
 8011ce6:	2a00      	cmp	r2, #0
 8011ce8:	ddee      	ble.n	8011cc8 <_dtoa_r+0xa58>
 8011cea:	ee18 1a10 	vmov	r1, s16
 8011cee:	2201      	movs	r2, #1
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f001 f8cd 	bl	8012e90 <__lshift>
 8011cf6:	4631      	mov	r1, r6
 8011cf8:	ee08 0a10 	vmov	s16, r0
 8011cfc:	f001 f938 	bl	8012f70 <__mcmp>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	dc03      	bgt.n	8011d0c <_dtoa_r+0xa9c>
 8011d04:	d1e0      	bne.n	8011cc8 <_dtoa_r+0xa58>
 8011d06:	f01a 0f01 	tst.w	sl, #1
 8011d0a:	d0dd      	beq.n	8011cc8 <_dtoa_r+0xa58>
 8011d0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011d10:	d1d7      	bne.n	8011cc2 <_dtoa_r+0xa52>
 8011d12:	2339      	movs	r3, #57	; 0x39
 8011d14:	f88b 3000 	strb.w	r3, [fp]
 8011d18:	462b      	mov	r3, r5
 8011d1a:	461d      	mov	r5, r3
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d22:	2a39      	cmp	r2, #57	; 0x39
 8011d24:	d071      	beq.n	8011e0a <_dtoa_r+0xb9a>
 8011d26:	3201      	adds	r2, #1
 8011d28:	701a      	strb	r2, [r3, #0]
 8011d2a:	e746      	b.n	8011bba <_dtoa_r+0x94a>
 8011d2c:	2a00      	cmp	r2, #0
 8011d2e:	dd07      	ble.n	8011d40 <_dtoa_r+0xad0>
 8011d30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011d34:	d0ed      	beq.n	8011d12 <_dtoa_r+0xaa2>
 8011d36:	f10a 0301 	add.w	r3, sl, #1
 8011d3a:	f88b 3000 	strb.w	r3, [fp]
 8011d3e:	e73c      	b.n	8011bba <_dtoa_r+0x94a>
 8011d40:	9b05      	ldr	r3, [sp, #20]
 8011d42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011d46:	4599      	cmp	r9, r3
 8011d48:	d047      	beq.n	8011dda <_dtoa_r+0xb6a>
 8011d4a:	ee18 1a10 	vmov	r1, s16
 8011d4e:	2300      	movs	r3, #0
 8011d50:	220a      	movs	r2, #10
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 fea2 	bl	8012a9c <__multadd>
 8011d58:	45b8      	cmp	r8, r7
 8011d5a:	ee08 0a10 	vmov	s16, r0
 8011d5e:	f04f 0300 	mov.w	r3, #0
 8011d62:	f04f 020a 	mov.w	r2, #10
 8011d66:	4641      	mov	r1, r8
 8011d68:	4620      	mov	r0, r4
 8011d6a:	d106      	bne.n	8011d7a <_dtoa_r+0xb0a>
 8011d6c:	f000 fe96 	bl	8012a9c <__multadd>
 8011d70:	4680      	mov	r8, r0
 8011d72:	4607      	mov	r7, r0
 8011d74:	f109 0901 	add.w	r9, r9, #1
 8011d78:	e772      	b.n	8011c60 <_dtoa_r+0x9f0>
 8011d7a:	f000 fe8f 	bl	8012a9c <__multadd>
 8011d7e:	4639      	mov	r1, r7
 8011d80:	4680      	mov	r8, r0
 8011d82:	2300      	movs	r3, #0
 8011d84:	220a      	movs	r2, #10
 8011d86:	4620      	mov	r0, r4
 8011d88:	f000 fe88 	bl	8012a9c <__multadd>
 8011d8c:	4607      	mov	r7, r0
 8011d8e:	e7f1      	b.n	8011d74 <_dtoa_r+0xb04>
 8011d90:	9b03      	ldr	r3, [sp, #12]
 8011d92:	9302      	str	r3, [sp, #8]
 8011d94:	9d01      	ldr	r5, [sp, #4]
 8011d96:	ee18 0a10 	vmov	r0, s16
 8011d9a:	4631      	mov	r1, r6
 8011d9c:	f7ff f9db 	bl	8011156 <quorem>
 8011da0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011da4:	9b01      	ldr	r3, [sp, #4]
 8011da6:	f805 ab01 	strb.w	sl, [r5], #1
 8011daa:	1aea      	subs	r2, r5, r3
 8011dac:	9b02      	ldr	r3, [sp, #8]
 8011dae:	4293      	cmp	r3, r2
 8011db0:	dd09      	ble.n	8011dc6 <_dtoa_r+0xb56>
 8011db2:	ee18 1a10 	vmov	r1, s16
 8011db6:	2300      	movs	r3, #0
 8011db8:	220a      	movs	r2, #10
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f000 fe6e 	bl	8012a9c <__multadd>
 8011dc0:	ee08 0a10 	vmov	s16, r0
 8011dc4:	e7e7      	b.n	8011d96 <_dtoa_r+0xb26>
 8011dc6:	9b02      	ldr	r3, [sp, #8]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	bfc8      	it	gt
 8011dcc:	461d      	movgt	r5, r3
 8011dce:	9b01      	ldr	r3, [sp, #4]
 8011dd0:	bfd8      	it	le
 8011dd2:	2501      	movle	r5, #1
 8011dd4:	441d      	add	r5, r3
 8011dd6:	f04f 0800 	mov.w	r8, #0
 8011dda:	ee18 1a10 	vmov	r1, s16
 8011dde:	2201      	movs	r2, #1
 8011de0:	4620      	mov	r0, r4
 8011de2:	f001 f855 	bl	8012e90 <__lshift>
 8011de6:	4631      	mov	r1, r6
 8011de8:	ee08 0a10 	vmov	s16, r0
 8011dec:	f001 f8c0 	bl	8012f70 <__mcmp>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	dc91      	bgt.n	8011d18 <_dtoa_r+0xaa8>
 8011df4:	d102      	bne.n	8011dfc <_dtoa_r+0xb8c>
 8011df6:	f01a 0f01 	tst.w	sl, #1
 8011dfa:	d18d      	bne.n	8011d18 <_dtoa_r+0xaa8>
 8011dfc:	462b      	mov	r3, r5
 8011dfe:	461d      	mov	r5, r3
 8011e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e04:	2a30      	cmp	r2, #48	; 0x30
 8011e06:	d0fa      	beq.n	8011dfe <_dtoa_r+0xb8e>
 8011e08:	e6d7      	b.n	8011bba <_dtoa_r+0x94a>
 8011e0a:	9a01      	ldr	r2, [sp, #4]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d184      	bne.n	8011d1a <_dtoa_r+0xaaa>
 8011e10:	9b00      	ldr	r3, [sp, #0]
 8011e12:	3301      	adds	r3, #1
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	2331      	movs	r3, #49	; 0x31
 8011e18:	7013      	strb	r3, [r2, #0]
 8011e1a:	e6ce      	b.n	8011bba <_dtoa_r+0x94a>
 8011e1c:	4b09      	ldr	r3, [pc, #36]	; (8011e44 <_dtoa_r+0xbd4>)
 8011e1e:	f7ff ba95 	b.w	801134c <_dtoa_r+0xdc>
 8011e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f47f aa6e 	bne.w	8011306 <_dtoa_r+0x96>
 8011e2a:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <_dtoa_r+0xbd8>)
 8011e2c:	f7ff ba8e 	b.w	801134c <_dtoa_r+0xdc>
 8011e30:	9b02      	ldr	r3, [sp, #8]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	dcae      	bgt.n	8011d94 <_dtoa_r+0xb24>
 8011e36:	9b06      	ldr	r3, [sp, #24]
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	f73f aea8 	bgt.w	8011b8e <_dtoa_r+0x91e>
 8011e3e:	e7a9      	b.n	8011d94 <_dtoa_r+0xb24>
 8011e40:	0802a8a3 	.word	0x0802a8a3
 8011e44:	0802a685 	.word	0x0802a685
 8011e48:	0802a801 	.word	0x0802a801

08011e4c <__sflush_r>:
 8011e4c:	898a      	ldrh	r2, [r1, #12]
 8011e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e52:	4605      	mov	r5, r0
 8011e54:	0710      	lsls	r0, r2, #28
 8011e56:	460c      	mov	r4, r1
 8011e58:	d458      	bmi.n	8011f0c <__sflush_r+0xc0>
 8011e5a:	684b      	ldr	r3, [r1, #4]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	dc05      	bgt.n	8011e6c <__sflush_r+0x20>
 8011e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dc02      	bgt.n	8011e6c <__sflush_r+0x20>
 8011e66:	2000      	movs	r0, #0
 8011e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e6e:	2e00      	cmp	r6, #0
 8011e70:	d0f9      	beq.n	8011e66 <__sflush_r+0x1a>
 8011e72:	2300      	movs	r3, #0
 8011e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e78:	682f      	ldr	r7, [r5, #0]
 8011e7a:	602b      	str	r3, [r5, #0]
 8011e7c:	d032      	beq.n	8011ee4 <__sflush_r+0x98>
 8011e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e80:	89a3      	ldrh	r3, [r4, #12]
 8011e82:	075a      	lsls	r2, r3, #29
 8011e84:	d505      	bpl.n	8011e92 <__sflush_r+0x46>
 8011e86:	6863      	ldr	r3, [r4, #4]
 8011e88:	1ac0      	subs	r0, r0, r3
 8011e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e8c:	b10b      	cbz	r3, 8011e92 <__sflush_r+0x46>
 8011e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e90:	1ac0      	subs	r0, r0, r3
 8011e92:	2300      	movs	r3, #0
 8011e94:	4602      	mov	r2, r0
 8011e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e98:	6a21      	ldr	r1, [r4, #32]
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	47b0      	blx	r6
 8011e9e:	1c43      	adds	r3, r0, #1
 8011ea0:	89a3      	ldrh	r3, [r4, #12]
 8011ea2:	d106      	bne.n	8011eb2 <__sflush_r+0x66>
 8011ea4:	6829      	ldr	r1, [r5, #0]
 8011ea6:	291d      	cmp	r1, #29
 8011ea8:	d82c      	bhi.n	8011f04 <__sflush_r+0xb8>
 8011eaa:	4a2a      	ldr	r2, [pc, #168]	; (8011f54 <__sflush_r+0x108>)
 8011eac:	40ca      	lsrs	r2, r1
 8011eae:	07d6      	lsls	r6, r2, #31
 8011eb0:	d528      	bpl.n	8011f04 <__sflush_r+0xb8>
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	6062      	str	r2, [r4, #4]
 8011eb6:	04d9      	lsls	r1, r3, #19
 8011eb8:	6922      	ldr	r2, [r4, #16]
 8011eba:	6022      	str	r2, [r4, #0]
 8011ebc:	d504      	bpl.n	8011ec8 <__sflush_r+0x7c>
 8011ebe:	1c42      	adds	r2, r0, #1
 8011ec0:	d101      	bne.n	8011ec6 <__sflush_r+0x7a>
 8011ec2:	682b      	ldr	r3, [r5, #0]
 8011ec4:	b903      	cbnz	r3, 8011ec8 <__sflush_r+0x7c>
 8011ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8011ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011eca:	602f      	str	r7, [r5, #0]
 8011ecc:	2900      	cmp	r1, #0
 8011ece:	d0ca      	beq.n	8011e66 <__sflush_r+0x1a>
 8011ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ed4:	4299      	cmp	r1, r3
 8011ed6:	d002      	beq.n	8011ede <__sflush_r+0x92>
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f001 fa55 	bl	8013388 <_free_r>
 8011ede:	2000      	movs	r0, #0
 8011ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8011ee2:	e7c1      	b.n	8011e68 <__sflush_r+0x1c>
 8011ee4:	6a21      	ldr	r1, [r4, #32]
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	4628      	mov	r0, r5
 8011eea:	47b0      	blx	r6
 8011eec:	1c41      	adds	r1, r0, #1
 8011eee:	d1c7      	bne.n	8011e80 <__sflush_r+0x34>
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d0c4      	beq.n	8011e80 <__sflush_r+0x34>
 8011ef6:	2b1d      	cmp	r3, #29
 8011ef8:	d001      	beq.n	8011efe <__sflush_r+0xb2>
 8011efa:	2b16      	cmp	r3, #22
 8011efc:	d101      	bne.n	8011f02 <__sflush_r+0xb6>
 8011efe:	602f      	str	r7, [r5, #0]
 8011f00:	e7b1      	b.n	8011e66 <__sflush_r+0x1a>
 8011f02:	89a3      	ldrh	r3, [r4, #12]
 8011f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f08:	81a3      	strh	r3, [r4, #12]
 8011f0a:	e7ad      	b.n	8011e68 <__sflush_r+0x1c>
 8011f0c:	690f      	ldr	r7, [r1, #16]
 8011f0e:	2f00      	cmp	r7, #0
 8011f10:	d0a9      	beq.n	8011e66 <__sflush_r+0x1a>
 8011f12:	0793      	lsls	r3, r2, #30
 8011f14:	680e      	ldr	r6, [r1, #0]
 8011f16:	bf08      	it	eq
 8011f18:	694b      	ldreq	r3, [r1, #20]
 8011f1a:	600f      	str	r7, [r1, #0]
 8011f1c:	bf18      	it	ne
 8011f1e:	2300      	movne	r3, #0
 8011f20:	eba6 0807 	sub.w	r8, r6, r7
 8011f24:	608b      	str	r3, [r1, #8]
 8011f26:	f1b8 0f00 	cmp.w	r8, #0
 8011f2a:	dd9c      	ble.n	8011e66 <__sflush_r+0x1a>
 8011f2c:	6a21      	ldr	r1, [r4, #32]
 8011f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f30:	4643      	mov	r3, r8
 8011f32:	463a      	mov	r2, r7
 8011f34:	4628      	mov	r0, r5
 8011f36:	47b0      	blx	r6
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	dc06      	bgt.n	8011f4a <__sflush_r+0xfe>
 8011f3c:	89a3      	ldrh	r3, [r4, #12]
 8011f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	f04f 30ff 	mov.w	r0, #4294967295
 8011f48:	e78e      	b.n	8011e68 <__sflush_r+0x1c>
 8011f4a:	4407      	add	r7, r0
 8011f4c:	eba8 0800 	sub.w	r8, r8, r0
 8011f50:	e7e9      	b.n	8011f26 <__sflush_r+0xda>
 8011f52:	bf00      	nop
 8011f54:	20400001 	.word	0x20400001

08011f58 <_fflush_r>:
 8011f58:	b538      	push	{r3, r4, r5, lr}
 8011f5a:	690b      	ldr	r3, [r1, #16]
 8011f5c:	4605      	mov	r5, r0
 8011f5e:	460c      	mov	r4, r1
 8011f60:	b913      	cbnz	r3, 8011f68 <_fflush_r+0x10>
 8011f62:	2500      	movs	r5, #0
 8011f64:	4628      	mov	r0, r5
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	b118      	cbz	r0, 8011f72 <_fflush_r+0x1a>
 8011f6a:	6983      	ldr	r3, [r0, #24]
 8011f6c:	b90b      	cbnz	r3, 8011f72 <_fflush_r+0x1a>
 8011f6e:	f000 f887 	bl	8012080 <__sinit>
 8011f72:	4b14      	ldr	r3, [pc, #80]	; (8011fc4 <_fflush_r+0x6c>)
 8011f74:	429c      	cmp	r4, r3
 8011f76:	d11b      	bne.n	8011fb0 <_fflush_r+0x58>
 8011f78:	686c      	ldr	r4, [r5, #4]
 8011f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d0ef      	beq.n	8011f62 <_fflush_r+0xa>
 8011f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f84:	07d0      	lsls	r0, r2, #31
 8011f86:	d404      	bmi.n	8011f92 <_fflush_r+0x3a>
 8011f88:	0599      	lsls	r1, r3, #22
 8011f8a:	d402      	bmi.n	8011f92 <_fflush_r+0x3a>
 8011f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f8e:	f000 fc88 	bl	80128a2 <__retarget_lock_acquire_recursive>
 8011f92:	4628      	mov	r0, r5
 8011f94:	4621      	mov	r1, r4
 8011f96:	f7ff ff59 	bl	8011e4c <__sflush_r>
 8011f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f9c:	07da      	lsls	r2, r3, #31
 8011f9e:	4605      	mov	r5, r0
 8011fa0:	d4e0      	bmi.n	8011f64 <_fflush_r+0xc>
 8011fa2:	89a3      	ldrh	r3, [r4, #12]
 8011fa4:	059b      	lsls	r3, r3, #22
 8011fa6:	d4dd      	bmi.n	8011f64 <_fflush_r+0xc>
 8011fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011faa:	f000 fc7b 	bl	80128a4 <__retarget_lock_release_recursive>
 8011fae:	e7d9      	b.n	8011f64 <_fflush_r+0xc>
 8011fb0:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <_fflush_r+0x70>)
 8011fb2:	429c      	cmp	r4, r3
 8011fb4:	d101      	bne.n	8011fba <_fflush_r+0x62>
 8011fb6:	68ac      	ldr	r4, [r5, #8]
 8011fb8:	e7df      	b.n	8011f7a <_fflush_r+0x22>
 8011fba:	4b04      	ldr	r3, [pc, #16]	; (8011fcc <_fflush_r+0x74>)
 8011fbc:	429c      	cmp	r4, r3
 8011fbe:	bf08      	it	eq
 8011fc0:	68ec      	ldreq	r4, [r5, #12]
 8011fc2:	e7da      	b.n	8011f7a <_fflush_r+0x22>
 8011fc4:	0802a8d4 	.word	0x0802a8d4
 8011fc8:	0802a8f4 	.word	0x0802a8f4
 8011fcc:	0802a8b4 	.word	0x0802a8b4

08011fd0 <std>:
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	b510      	push	{r4, lr}
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8011fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011fde:	6083      	str	r3, [r0, #8]
 8011fe0:	8181      	strh	r1, [r0, #12]
 8011fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8011fe4:	81c2      	strh	r2, [r0, #14]
 8011fe6:	6183      	str	r3, [r0, #24]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	2208      	movs	r2, #8
 8011fec:	305c      	adds	r0, #92	; 0x5c
 8011fee:	f7fd f8c5 	bl	800f17c <memset>
 8011ff2:	4b05      	ldr	r3, [pc, #20]	; (8012008 <std+0x38>)
 8011ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8011ff6:	4b05      	ldr	r3, [pc, #20]	; (801200c <std+0x3c>)
 8011ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ffa:	4b05      	ldr	r3, [pc, #20]	; (8012010 <std+0x40>)
 8011ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011ffe:	4b05      	ldr	r3, [pc, #20]	; (8012014 <std+0x44>)
 8012000:	6224      	str	r4, [r4, #32]
 8012002:	6323      	str	r3, [r4, #48]	; 0x30
 8012004:	bd10      	pop	{r4, pc}
 8012006:	bf00      	nop
 8012008:	08013919 	.word	0x08013919
 801200c:	0801393b 	.word	0x0801393b
 8012010:	08013973 	.word	0x08013973
 8012014:	08013997 	.word	0x08013997

08012018 <_cleanup_r>:
 8012018:	4901      	ldr	r1, [pc, #4]	; (8012020 <_cleanup_r+0x8>)
 801201a:	f000 b8af 	b.w	801217c <_fwalk_reent>
 801201e:	bf00      	nop
 8012020:	08011f59 	.word	0x08011f59

08012024 <__sfmoreglue>:
 8012024:	b570      	push	{r4, r5, r6, lr}
 8012026:	2268      	movs	r2, #104	; 0x68
 8012028:	1e4d      	subs	r5, r1, #1
 801202a:	4355      	muls	r5, r2
 801202c:	460e      	mov	r6, r1
 801202e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012032:	f001 fa15 	bl	8013460 <_malloc_r>
 8012036:	4604      	mov	r4, r0
 8012038:	b140      	cbz	r0, 801204c <__sfmoreglue+0x28>
 801203a:	2100      	movs	r1, #0
 801203c:	e9c0 1600 	strd	r1, r6, [r0]
 8012040:	300c      	adds	r0, #12
 8012042:	60a0      	str	r0, [r4, #8]
 8012044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012048:	f7fd f898 	bl	800f17c <memset>
 801204c:	4620      	mov	r0, r4
 801204e:	bd70      	pop	{r4, r5, r6, pc}

08012050 <__sfp_lock_acquire>:
 8012050:	4801      	ldr	r0, [pc, #4]	; (8012058 <__sfp_lock_acquire+0x8>)
 8012052:	f000 bc26 	b.w	80128a2 <__retarget_lock_acquire_recursive>
 8012056:	bf00      	nop
 8012058:	2001337b 	.word	0x2001337b

0801205c <__sfp_lock_release>:
 801205c:	4801      	ldr	r0, [pc, #4]	; (8012064 <__sfp_lock_release+0x8>)
 801205e:	f000 bc21 	b.w	80128a4 <__retarget_lock_release_recursive>
 8012062:	bf00      	nop
 8012064:	2001337b 	.word	0x2001337b

08012068 <__sinit_lock_acquire>:
 8012068:	4801      	ldr	r0, [pc, #4]	; (8012070 <__sinit_lock_acquire+0x8>)
 801206a:	f000 bc1a 	b.w	80128a2 <__retarget_lock_acquire_recursive>
 801206e:	bf00      	nop
 8012070:	2001337c 	.word	0x2001337c

08012074 <__sinit_lock_release>:
 8012074:	4801      	ldr	r0, [pc, #4]	; (801207c <__sinit_lock_release+0x8>)
 8012076:	f000 bc15 	b.w	80128a4 <__retarget_lock_release_recursive>
 801207a:	bf00      	nop
 801207c:	2001337c 	.word	0x2001337c

08012080 <__sinit>:
 8012080:	b510      	push	{r4, lr}
 8012082:	4604      	mov	r4, r0
 8012084:	f7ff fff0 	bl	8012068 <__sinit_lock_acquire>
 8012088:	69a3      	ldr	r3, [r4, #24]
 801208a:	b11b      	cbz	r3, 8012094 <__sinit+0x14>
 801208c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012090:	f7ff bff0 	b.w	8012074 <__sinit_lock_release>
 8012094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012098:	6523      	str	r3, [r4, #80]	; 0x50
 801209a:	4b13      	ldr	r3, [pc, #76]	; (80120e8 <__sinit+0x68>)
 801209c:	4a13      	ldr	r2, [pc, #76]	; (80120ec <__sinit+0x6c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80120a2:	42a3      	cmp	r3, r4
 80120a4:	bf04      	itt	eq
 80120a6:	2301      	moveq	r3, #1
 80120a8:	61a3      	streq	r3, [r4, #24]
 80120aa:	4620      	mov	r0, r4
 80120ac:	f000 f820 	bl	80120f0 <__sfp>
 80120b0:	6060      	str	r0, [r4, #4]
 80120b2:	4620      	mov	r0, r4
 80120b4:	f000 f81c 	bl	80120f0 <__sfp>
 80120b8:	60a0      	str	r0, [r4, #8]
 80120ba:	4620      	mov	r0, r4
 80120bc:	f000 f818 	bl	80120f0 <__sfp>
 80120c0:	2200      	movs	r2, #0
 80120c2:	60e0      	str	r0, [r4, #12]
 80120c4:	2104      	movs	r1, #4
 80120c6:	6860      	ldr	r0, [r4, #4]
 80120c8:	f7ff ff82 	bl	8011fd0 <std>
 80120cc:	68a0      	ldr	r0, [r4, #8]
 80120ce:	2201      	movs	r2, #1
 80120d0:	2109      	movs	r1, #9
 80120d2:	f7ff ff7d 	bl	8011fd0 <std>
 80120d6:	68e0      	ldr	r0, [r4, #12]
 80120d8:	2202      	movs	r2, #2
 80120da:	2112      	movs	r1, #18
 80120dc:	f7ff ff78 	bl	8011fd0 <std>
 80120e0:	2301      	movs	r3, #1
 80120e2:	61a3      	str	r3, [r4, #24]
 80120e4:	e7d2      	b.n	801208c <__sinit+0xc>
 80120e6:	bf00      	nop
 80120e8:	0802a660 	.word	0x0802a660
 80120ec:	08012019 	.word	0x08012019

080120f0 <__sfp>:
 80120f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f2:	4607      	mov	r7, r0
 80120f4:	f7ff ffac 	bl	8012050 <__sfp_lock_acquire>
 80120f8:	4b1e      	ldr	r3, [pc, #120]	; (8012174 <__sfp+0x84>)
 80120fa:	681e      	ldr	r6, [r3, #0]
 80120fc:	69b3      	ldr	r3, [r6, #24]
 80120fe:	b913      	cbnz	r3, 8012106 <__sfp+0x16>
 8012100:	4630      	mov	r0, r6
 8012102:	f7ff ffbd 	bl	8012080 <__sinit>
 8012106:	3648      	adds	r6, #72	; 0x48
 8012108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801210c:	3b01      	subs	r3, #1
 801210e:	d503      	bpl.n	8012118 <__sfp+0x28>
 8012110:	6833      	ldr	r3, [r6, #0]
 8012112:	b30b      	cbz	r3, 8012158 <__sfp+0x68>
 8012114:	6836      	ldr	r6, [r6, #0]
 8012116:	e7f7      	b.n	8012108 <__sfp+0x18>
 8012118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801211c:	b9d5      	cbnz	r5, 8012154 <__sfp+0x64>
 801211e:	4b16      	ldr	r3, [pc, #88]	; (8012178 <__sfp+0x88>)
 8012120:	60e3      	str	r3, [r4, #12]
 8012122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012126:	6665      	str	r5, [r4, #100]	; 0x64
 8012128:	f000 fbba 	bl	80128a0 <__retarget_lock_init_recursive>
 801212c:	f7ff ff96 	bl	801205c <__sfp_lock_release>
 8012130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012138:	6025      	str	r5, [r4, #0]
 801213a:	61a5      	str	r5, [r4, #24]
 801213c:	2208      	movs	r2, #8
 801213e:	4629      	mov	r1, r5
 8012140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012144:	f7fd f81a 	bl	800f17c <memset>
 8012148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801214c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012150:	4620      	mov	r0, r4
 8012152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012154:	3468      	adds	r4, #104	; 0x68
 8012156:	e7d9      	b.n	801210c <__sfp+0x1c>
 8012158:	2104      	movs	r1, #4
 801215a:	4638      	mov	r0, r7
 801215c:	f7ff ff62 	bl	8012024 <__sfmoreglue>
 8012160:	4604      	mov	r4, r0
 8012162:	6030      	str	r0, [r6, #0]
 8012164:	2800      	cmp	r0, #0
 8012166:	d1d5      	bne.n	8012114 <__sfp+0x24>
 8012168:	f7ff ff78 	bl	801205c <__sfp_lock_release>
 801216c:	230c      	movs	r3, #12
 801216e:	603b      	str	r3, [r7, #0]
 8012170:	e7ee      	b.n	8012150 <__sfp+0x60>
 8012172:	bf00      	nop
 8012174:	0802a660 	.word	0x0802a660
 8012178:	ffff0001 	.word	0xffff0001

0801217c <_fwalk_reent>:
 801217c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012180:	4606      	mov	r6, r0
 8012182:	4688      	mov	r8, r1
 8012184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012188:	2700      	movs	r7, #0
 801218a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801218e:	f1b9 0901 	subs.w	r9, r9, #1
 8012192:	d505      	bpl.n	80121a0 <_fwalk_reent+0x24>
 8012194:	6824      	ldr	r4, [r4, #0]
 8012196:	2c00      	cmp	r4, #0
 8012198:	d1f7      	bne.n	801218a <_fwalk_reent+0xe>
 801219a:	4638      	mov	r0, r7
 801219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121a0:	89ab      	ldrh	r3, [r5, #12]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d907      	bls.n	80121b6 <_fwalk_reent+0x3a>
 80121a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121aa:	3301      	adds	r3, #1
 80121ac:	d003      	beq.n	80121b6 <_fwalk_reent+0x3a>
 80121ae:	4629      	mov	r1, r5
 80121b0:	4630      	mov	r0, r6
 80121b2:	47c0      	blx	r8
 80121b4:	4307      	orrs	r7, r0
 80121b6:	3568      	adds	r5, #104	; 0x68
 80121b8:	e7e9      	b.n	801218e <_fwalk_reent+0x12>

080121ba <rshift>:
 80121ba:	6903      	ldr	r3, [r0, #16]
 80121bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80121c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80121c8:	f100 0414 	add.w	r4, r0, #20
 80121cc:	dd45      	ble.n	801225a <rshift+0xa0>
 80121ce:	f011 011f 	ands.w	r1, r1, #31
 80121d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80121d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80121da:	d10c      	bne.n	80121f6 <rshift+0x3c>
 80121dc:	f100 0710 	add.w	r7, r0, #16
 80121e0:	4629      	mov	r1, r5
 80121e2:	42b1      	cmp	r1, r6
 80121e4:	d334      	bcc.n	8012250 <rshift+0x96>
 80121e6:	1a9b      	subs	r3, r3, r2
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	1eea      	subs	r2, r5, #3
 80121ec:	4296      	cmp	r6, r2
 80121ee:	bf38      	it	cc
 80121f0:	2300      	movcc	r3, #0
 80121f2:	4423      	add	r3, r4
 80121f4:	e015      	b.n	8012222 <rshift+0x68>
 80121f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80121fa:	f1c1 0820 	rsb	r8, r1, #32
 80121fe:	40cf      	lsrs	r7, r1
 8012200:	f105 0e04 	add.w	lr, r5, #4
 8012204:	46a1      	mov	r9, r4
 8012206:	4576      	cmp	r6, lr
 8012208:	46f4      	mov	ip, lr
 801220a:	d815      	bhi.n	8012238 <rshift+0x7e>
 801220c:	1a9a      	subs	r2, r3, r2
 801220e:	0092      	lsls	r2, r2, #2
 8012210:	3a04      	subs	r2, #4
 8012212:	3501      	adds	r5, #1
 8012214:	42ae      	cmp	r6, r5
 8012216:	bf38      	it	cc
 8012218:	2200      	movcc	r2, #0
 801221a:	18a3      	adds	r3, r4, r2
 801221c:	50a7      	str	r7, [r4, r2]
 801221e:	b107      	cbz	r7, 8012222 <rshift+0x68>
 8012220:	3304      	adds	r3, #4
 8012222:	1b1a      	subs	r2, r3, r4
 8012224:	42a3      	cmp	r3, r4
 8012226:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801222a:	bf08      	it	eq
 801222c:	2300      	moveq	r3, #0
 801222e:	6102      	str	r2, [r0, #16]
 8012230:	bf08      	it	eq
 8012232:	6143      	streq	r3, [r0, #20]
 8012234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012238:	f8dc c000 	ldr.w	ip, [ip]
 801223c:	fa0c fc08 	lsl.w	ip, ip, r8
 8012240:	ea4c 0707 	orr.w	r7, ip, r7
 8012244:	f849 7b04 	str.w	r7, [r9], #4
 8012248:	f85e 7b04 	ldr.w	r7, [lr], #4
 801224c:	40cf      	lsrs	r7, r1
 801224e:	e7da      	b.n	8012206 <rshift+0x4c>
 8012250:	f851 cb04 	ldr.w	ip, [r1], #4
 8012254:	f847 cf04 	str.w	ip, [r7, #4]!
 8012258:	e7c3      	b.n	80121e2 <rshift+0x28>
 801225a:	4623      	mov	r3, r4
 801225c:	e7e1      	b.n	8012222 <rshift+0x68>

0801225e <__hexdig_fun>:
 801225e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012262:	2b09      	cmp	r3, #9
 8012264:	d802      	bhi.n	801226c <__hexdig_fun+0xe>
 8012266:	3820      	subs	r0, #32
 8012268:	b2c0      	uxtb	r0, r0
 801226a:	4770      	bx	lr
 801226c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012270:	2b05      	cmp	r3, #5
 8012272:	d801      	bhi.n	8012278 <__hexdig_fun+0x1a>
 8012274:	3847      	subs	r0, #71	; 0x47
 8012276:	e7f7      	b.n	8012268 <__hexdig_fun+0xa>
 8012278:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801227c:	2b05      	cmp	r3, #5
 801227e:	d801      	bhi.n	8012284 <__hexdig_fun+0x26>
 8012280:	3827      	subs	r0, #39	; 0x27
 8012282:	e7f1      	b.n	8012268 <__hexdig_fun+0xa>
 8012284:	2000      	movs	r0, #0
 8012286:	4770      	bx	lr

08012288 <__gethex>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	ed2d 8b02 	vpush	{d8}
 8012290:	b089      	sub	sp, #36	; 0x24
 8012292:	ee08 0a10 	vmov	s16, r0
 8012296:	9304      	str	r3, [sp, #16]
 8012298:	4bb4      	ldr	r3, [pc, #720]	; (801256c <__gethex+0x2e4>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	4618      	mov	r0, r3
 80122a0:	468b      	mov	fp, r1
 80122a2:	4690      	mov	r8, r2
 80122a4:	f7ed ffbc 	bl	8000220 <strlen>
 80122a8:	9b01      	ldr	r3, [sp, #4]
 80122aa:	f8db 2000 	ldr.w	r2, [fp]
 80122ae:	4403      	add	r3, r0
 80122b0:	4682      	mov	sl, r0
 80122b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80122b6:	9305      	str	r3, [sp, #20]
 80122b8:	1c93      	adds	r3, r2, #2
 80122ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80122be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80122c2:	32fe      	adds	r2, #254	; 0xfe
 80122c4:	18d1      	adds	r1, r2, r3
 80122c6:	461f      	mov	r7, r3
 80122c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80122cc:	9100      	str	r1, [sp, #0]
 80122ce:	2830      	cmp	r0, #48	; 0x30
 80122d0:	d0f8      	beq.n	80122c4 <__gethex+0x3c>
 80122d2:	f7ff ffc4 	bl	801225e <__hexdig_fun>
 80122d6:	4604      	mov	r4, r0
 80122d8:	2800      	cmp	r0, #0
 80122da:	d13a      	bne.n	8012352 <__gethex+0xca>
 80122dc:	9901      	ldr	r1, [sp, #4]
 80122de:	4652      	mov	r2, sl
 80122e0:	4638      	mov	r0, r7
 80122e2:	f001 fb5c 	bl	801399e <strncmp>
 80122e6:	4605      	mov	r5, r0
 80122e8:	2800      	cmp	r0, #0
 80122ea:	d168      	bne.n	80123be <__gethex+0x136>
 80122ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80122f0:	eb07 060a 	add.w	r6, r7, sl
 80122f4:	f7ff ffb3 	bl	801225e <__hexdig_fun>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d062      	beq.n	80123c2 <__gethex+0x13a>
 80122fc:	4633      	mov	r3, r6
 80122fe:	7818      	ldrb	r0, [r3, #0]
 8012300:	2830      	cmp	r0, #48	; 0x30
 8012302:	461f      	mov	r7, r3
 8012304:	f103 0301 	add.w	r3, r3, #1
 8012308:	d0f9      	beq.n	80122fe <__gethex+0x76>
 801230a:	f7ff ffa8 	bl	801225e <__hexdig_fun>
 801230e:	2301      	movs	r3, #1
 8012310:	fab0 f480 	clz	r4, r0
 8012314:	0964      	lsrs	r4, r4, #5
 8012316:	4635      	mov	r5, r6
 8012318:	9300      	str	r3, [sp, #0]
 801231a:	463a      	mov	r2, r7
 801231c:	4616      	mov	r6, r2
 801231e:	3201      	adds	r2, #1
 8012320:	7830      	ldrb	r0, [r6, #0]
 8012322:	f7ff ff9c 	bl	801225e <__hexdig_fun>
 8012326:	2800      	cmp	r0, #0
 8012328:	d1f8      	bne.n	801231c <__gethex+0x94>
 801232a:	9901      	ldr	r1, [sp, #4]
 801232c:	4652      	mov	r2, sl
 801232e:	4630      	mov	r0, r6
 8012330:	f001 fb35 	bl	801399e <strncmp>
 8012334:	b980      	cbnz	r0, 8012358 <__gethex+0xd0>
 8012336:	b94d      	cbnz	r5, 801234c <__gethex+0xc4>
 8012338:	eb06 050a 	add.w	r5, r6, sl
 801233c:	462a      	mov	r2, r5
 801233e:	4616      	mov	r6, r2
 8012340:	3201      	adds	r2, #1
 8012342:	7830      	ldrb	r0, [r6, #0]
 8012344:	f7ff ff8b 	bl	801225e <__hexdig_fun>
 8012348:	2800      	cmp	r0, #0
 801234a:	d1f8      	bne.n	801233e <__gethex+0xb6>
 801234c:	1bad      	subs	r5, r5, r6
 801234e:	00ad      	lsls	r5, r5, #2
 8012350:	e004      	b.n	801235c <__gethex+0xd4>
 8012352:	2400      	movs	r4, #0
 8012354:	4625      	mov	r5, r4
 8012356:	e7e0      	b.n	801231a <__gethex+0x92>
 8012358:	2d00      	cmp	r5, #0
 801235a:	d1f7      	bne.n	801234c <__gethex+0xc4>
 801235c:	7833      	ldrb	r3, [r6, #0]
 801235e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012362:	2b50      	cmp	r3, #80	; 0x50
 8012364:	d13b      	bne.n	80123de <__gethex+0x156>
 8012366:	7873      	ldrb	r3, [r6, #1]
 8012368:	2b2b      	cmp	r3, #43	; 0x2b
 801236a:	d02c      	beq.n	80123c6 <__gethex+0x13e>
 801236c:	2b2d      	cmp	r3, #45	; 0x2d
 801236e:	d02e      	beq.n	80123ce <__gethex+0x146>
 8012370:	1c71      	adds	r1, r6, #1
 8012372:	f04f 0900 	mov.w	r9, #0
 8012376:	7808      	ldrb	r0, [r1, #0]
 8012378:	f7ff ff71 	bl	801225e <__hexdig_fun>
 801237c:	1e43      	subs	r3, r0, #1
 801237e:	b2db      	uxtb	r3, r3
 8012380:	2b18      	cmp	r3, #24
 8012382:	d82c      	bhi.n	80123de <__gethex+0x156>
 8012384:	f1a0 0210 	sub.w	r2, r0, #16
 8012388:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801238c:	f7ff ff67 	bl	801225e <__hexdig_fun>
 8012390:	1e43      	subs	r3, r0, #1
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b18      	cmp	r3, #24
 8012396:	d91d      	bls.n	80123d4 <__gethex+0x14c>
 8012398:	f1b9 0f00 	cmp.w	r9, #0
 801239c:	d000      	beq.n	80123a0 <__gethex+0x118>
 801239e:	4252      	negs	r2, r2
 80123a0:	4415      	add	r5, r2
 80123a2:	f8cb 1000 	str.w	r1, [fp]
 80123a6:	b1e4      	cbz	r4, 80123e2 <__gethex+0x15a>
 80123a8:	9b00      	ldr	r3, [sp, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	bf14      	ite	ne
 80123ae:	2700      	movne	r7, #0
 80123b0:	2706      	moveq	r7, #6
 80123b2:	4638      	mov	r0, r7
 80123b4:	b009      	add	sp, #36	; 0x24
 80123b6:	ecbd 8b02 	vpop	{d8}
 80123ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123be:	463e      	mov	r6, r7
 80123c0:	4625      	mov	r5, r4
 80123c2:	2401      	movs	r4, #1
 80123c4:	e7ca      	b.n	801235c <__gethex+0xd4>
 80123c6:	f04f 0900 	mov.w	r9, #0
 80123ca:	1cb1      	adds	r1, r6, #2
 80123cc:	e7d3      	b.n	8012376 <__gethex+0xee>
 80123ce:	f04f 0901 	mov.w	r9, #1
 80123d2:	e7fa      	b.n	80123ca <__gethex+0x142>
 80123d4:	230a      	movs	r3, #10
 80123d6:	fb03 0202 	mla	r2, r3, r2, r0
 80123da:	3a10      	subs	r2, #16
 80123dc:	e7d4      	b.n	8012388 <__gethex+0x100>
 80123de:	4631      	mov	r1, r6
 80123e0:	e7df      	b.n	80123a2 <__gethex+0x11a>
 80123e2:	1bf3      	subs	r3, r6, r7
 80123e4:	3b01      	subs	r3, #1
 80123e6:	4621      	mov	r1, r4
 80123e8:	2b07      	cmp	r3, #7
 80123ea:	dc0b      	bgt.n	8012404 <__gethex+0x17c>
 80123ec:	ee18 0a10 	vmov	r0, s16
 80123f0:	f000 faf2 	bl	80129d8 <_Balloc>
 80123f4:	4604      	mov	r4, r0
 80123f6:	b940      	cbnz	r0, 801240a <__gethex+0x182>
 80123f8:	4b5d      	ldr	r3, [pc, #372]	; (8012570 <__gethex+0x2e8>)
 80123fa:	4602      	mov	r2, r0
 80123fc:	21de      	movs	r1, #222	; 0xde
 80123fe:	485d      	ldr	r0, [pc, #372]	; (8012574 <__gethex+0x2ec>)
 8012400:	f7fc fe54 	bl	800f0ac <__assert_func>
 8012404:	3101      	adds	r1, #1
 8012406:	105b      	asrs	r3, r3, #1
 8012408:	e7ee      	b.n	80123e8 <__gethex+0x160>
 801240a:	f100 0914 	add.w	r9, r0, #20
 801240e:	f04f 0b00 	mov.w	fp, #0
 8012412:	f1ca 0301 	rsb	r3, sl, #1
 8012416:	f8cd 9008 	str.w	r9, [sp, #8]
 801241a:	f8cd b000 	str.w	fp, [sp]
 801241e:	9306      	str	r3, [sp, #24]
 8012420:	42b7      	cmp	r7, r6
 8012422:	d340      	bcc.n	80124a6 <__gethex+0x21e>
 8012424:	9802      	ldr	r0, [sp, #8]
 8012426:	9b00      	ldr	r3, [sp, #0]
 8012428:	f840 3b04 	str.w	r3, [r0], #4
 801242c:	eba0 0009 	sub.w	r0, r0, r9
 8012430:	1080      	asrs	r0, r0, #2
 8012432:	0146      	lsls	r6, r0, #5
 8012434:	6120      	str	r0, [r4, #16]
 8012436:	4618      	mov	r0, r3
 8012438:	f000 fbc0 	bl	8012bbc <__hi0bits>
 801243c:	1a30      	subs	r0, r6, r0
 801243e:	f8d8 6000 	ldr.w	r6, [r8]
 8012442:	42b0      	cmp	r0, r6
 8012444:	dd63      	ble.n	801250e <__gethex+0x286>
 8012446:	1b87      	subs	r7, r0, r6
 8012448:	4639      	mov	r1, r7
 801244a:	4620      	mov	r0, r4
 801244c:	f000 ff64 	bl	8013318 <__any_on>
 8012450:	4682      	mov	sl, r0
 8012452:	b1a8      	cbz	r0, 8012480 <__gethex+0x1f8>
 8012454:	1e7b      	subs	r3, r7, #1
 8012456:	1159      	asrs	r1, r3, #5
 8012458:	f003 021f 	and.w	r2, r3, #31
 801245c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012460:	f04f 0a01 	mov.w	sl, #1
 8012464:	fa0a f202 	lsl.w	r2, sl, r2
 8012468:	420a      	tst	r2, r1
 801246a:	d009      	beq.n	8012480 <__gethex+0x1f8>
 801246c:	4553      	cmp	r3, sl
 801246e:	dd05      	ble.n	801247c <__gethex+0x1f4>
 8012470:	1eb9      	subs	r1, r7, #2
 8012472:	4620      	mov	r0, r4
 8012474:	f000 ff50 	bl	8013318 <__any_on>
 8012478:	2800      	cmp	r0, #0
 801247a:	d145      	bne.n	8012508 <__gethex+0x280>
 801247c:	f04f 0a02 	mov.w	sl, #2
 8012480:	4639      	mov	r1, r7
 8012482:	4620      	mov	r0, r4
 8012484:	f7ff fe99 	bl	80121ba <rshift>
 8012488:	443d      	add	r5, r7
 801248a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801248e:	42ab      	cmp	r3, r5
 8012490:	da4c      	bge.n	801252c <__gethex+0x2a4>
 8012492:	ee18 0a10 	vmov	r0, s16
 8012496:	4621      	mov	r1, r4
 8012498:	f000 fade 	bl	8012a58 <_Bfree>
 801249c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801249e:	2300      	movs	r3, #0
 80124a0:	6013      	str	r3, [r2, #0]
 80124a2:	27a3      	movs	r7, #163	; 0xa3
 80124a4:	e785      	b.n	80123b2 <__gethex+0x12a>
 80124a6:	1e73      	subs	r3, r6, #1
 80124a8:	9a05      	ldr	r2, [sp, #20]
 80124aa:	9303      	str	r3, [sp, #12]
 80124ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d019      	beq.n	80124e8 <__gethex+0x260>
 80124b4:	f1bb 0f20 	cmp.w	fp, #32
 80124b8:	d107      	bne.n	80124ca <__gethex+0x242>
 80124ba:	9b02      	ldr	r3, [sp, #8]
 80124bc:	9a00      	ldr	r2, [sp, #0]
 80124be:	f843 2b04 	str.w	r2, [r3], #4
 80124c2:	9302      	str	r3, [sp, #8]
 80124c4:	2300      	movs	r3, #0
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	469b      	mov	fp, r3
 80124ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80124ce:	f7ff fec6 	bl	801225e <__hexdig_fun>
 80124d2:	9b00      	ldr	r3, [sp, #0]
 80124d4:	f000 000f 	and.w	r0, r0, #15
 80124d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80124dc:	4303      	orrs	r3, r0
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	f10b 0b04 	add.w	fp, fp, #4
 80124e4:	9b03      	ldr	r3, [sp, #12]
 80124e6:	e00d      	b.n	8012504 <__gethex+0x27c>
 80124e8:	9b03      	ldr	r3, [sp, #12]
 80124ea:	9a06      	ldr	r2, [sp, #24]
 80124ec:	4413      	add	r3, r2
 80124ee:	42bb      	cmp	r3, r7
 80124f0:	d3e0      	bcc.n	80124b4 <__gethex+0x22c>
 80124f2:	4618      	mov	r0, r3
 80124f4:	9901      	ldr	r1, [sp, #4]
 80124f6:	9307      	str	r3, [sp, #28]
 80124f8:	4652      	mov	r2, sl
 80124fa:	f001 fa50 	bl	801399e <strncmp>
 80124fe:	9b07      	ldr	r3, [sp, #28]
 8012500:	2800      	cmp	r0, #0
 8012502:	d1d7      	bne.n	80124b4 <__gethex+0x22c>
 8012504:	461e      	mov	r6, r3
 8012506:	e78b      	b.n	8012420 <__gethex+0x198>
 8012508:	f04f 0a03 	mov.w	sl, #3
 801250c:	e7b8      	b.n	8012480 <__gethex+0x1f8>
 801250e:	da0a      	bge.n	8012526 <__gethex+0x29e>
 8012510:	1a37      	subs	r7, r6, r0
 8012512:	4621      	mov	r1, r4
 8012514:	ee18 0a10 	vmov	r0, s16
 8012518:	463a      	mov	r2, r7
 801251a:	f000 fcb9 	bl	8012e90 <__lshift>
 801251e:	1bed      	subs	r5, r5, r7
 8012520:	4604      	mov	r4, r0
 8012522:	f100 0914 	add.w	r9, r0, #20
 8012526:	f04f 0a00 	mov.w	sl, #0
 801252a:	e7ae      	b.n	801248a <__gethex+0x202>
 801252c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012530:	42a8      	cmp	r0, r5
 8012532:	dd72      	ble.n	801261a <__gethex+0x392>
 8012534:	1b45      	subs	r5, r0, r5
 8012536:	42ae      	cmp	r6, r5
 8012538:	dc36      	bgt.n	80125a8 <__gethex+0x320>
 801253a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801253e:	2b02      	cmp	r3, #2
 8012540:	d02a      	beq.n	8012598 <__gethex+0x310>
 8012542:	2b03      	cmp	r3, #3
 8012544:	d02c      	beq.n	80125a0 <__gethex+0x318>
 8012546:	2b01      	cmp	r3, #1
 8012548:	d11c      	bne.n	8012584 <__gethex+0x2fc>
 801254a:	42ae      	cmp	r6, r5
 801254c:	d11a      	bne.n	8012584 <__gethex+0x2fc>
 801254e:	2e01      	cmp	r6, #1
 8012550:	d112      	bne.n	8012578 <__gethex+0x2f0>
 8012552:	9a04      	ldr	r2, [sp, #16]
 8012554:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012558:	6013      	str	r3, [r2, #0]
 801255a:	2301      	movs	r3, #1
 801255c:	6123      	str	r3, [r4, #16]
 801255e:	f8c9 3000 	str.w	r3, [r9]
 8012562:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012564:	2762      	movs	r7, #98	; 0x62
 8012566:	601c      	str	r4, [r3, #0]
 8012568:	e723      	b.n	80123b2 <__gethex+0x12a>
 801256a:	bf00      	nop
 801256c:	0802a99c 	.word	0x0802a99c
 8012570:	0802a8a3 	.word	0x0802a8a3
 8012574:	0802a914 	.word	0x0802a914
 8012578:	1e71      	subs	r1, r6, #1
 801257a:	4620      	mov	r0, r4
 801257c:	f000 fecc 	bl	8013318 <__any_on>
 8012580:	2800      	cmp	r0, #0
 8012582:	d1e6      	bne.n	8012552 <__gethex+0x2ca>
 8012584:	ee18 0a10 	vmov	r0, s16
 8012588:	4621      	mov	r1, r4
 801258a:	f000 fa65 	bl	8012a58 <_Bfree>
 801258e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012590:	2300      	movs	r3, #0
 8012592:	6013      	str	r3, [r2, #0]
 8012594:	2750      	movs	r7, #80	; 0x50
 8012596:	e70c      	b.n	80123b2 <__gethex+0x12a>
 8012598:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801259a:	2b00      	cmp	r3, #0
 801259c:	d1f2      	bne.n	8012584 <__gethex+0x2fc>
 801259e:	e7d8      	b.n	8012552 <__gethex+0x2ca>
 80125a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1d5      	bne.n	8012552 <__gethex+0x2ca>
 80125a6:	e7ed      	b.n	8012584 <__gethex+0x2fc>
 80125a8:	1e6f      	subs	r7, r5, #1
 80125aa:	f1ba 0f00 	cmp.w	sl, #0
 80125ae:	d131      	bne.n	8012614 <__gethex+0x38c>
 80125b0:	b127      	cbz	r7, 80125bc <__gethex+0x334>
 80125b2:	4639      	mov	r1, r7
 80125b4:	4620      	mov	r0, r4
 80125b6:	f000 feaf 	bl	8013318 <__any_on>
 80125ba:	4682      	mov	sl, r0
 80125bc:	117b      	asrs	r3, r7, #5
 80125be:	2101      	movs	r1, #1
 80125c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80125c4:	f007 071f 	and.w	r7, r7, #31
 80125c8:	fa01 f707 	lsl.w	r7, r1, r7
 80125cc:	421f      	tst	r7, r3
 80125ce:	4629      	mov	r1, r5
 80125d0:	4620      	mov	r0, r4
 80125d2:	bf18      	it	ne
 80125d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80125d8:	1b76      	subs	r6, r6, r5
 80125da:	f7ff fdee 	bl	80121ba <rshift>
 80125de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80125e2:	2702      	movs	r7, #2
 80125e4:	f1ba 0f00 	cmp.w	sl, #0
 80125e8:	d048      	beq.n	801267c <__gethex+0x3f4>
 80125ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125ee:	2b02      	cmp	r3, #2
 80125f0:	d015      	beq.n	801261e <__gethex+0x396>
 80125f2:	2b03      	cmp	r3, #3
 80125f4:	d017      	beq.n	8012626 <__gethex+0x39e>
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d109      	bne.n	801260e <__gethex+0x386>
 80125fa:	f01a 0f02 	tst.w	sl, #2
 80125fe:	d006      	beq.n	801260e <__gethex+0x386>
 8012600:	f8d9 0000 	ldr.w	r0, [r9]
 8012604:	ea4a 0a00 	orr.w	sl, sl, r0
 8012608:	f01a 0f01 	tst.w	sl, #1
 801260c:	d10e      	bne.n	801262c <__gethex+0x3a4>
 801260e:	f047 0710 	orr.w	r7, r7, #16
 8012612:	e033      	b.n	801267c <__gethex+0x3f4>
 8012614:	f04f 0a01 	mov.w	sl, #1
 8012618:	e7d0      	b.n	80125bc <__gethex+0x334>
 801261a:	2701      	movs	r7, #1
 801261c:	e7e2      	b.n	80125e4 <__gethex+0x35c>
 801261e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012620:	f1c3 0301 	rsb	r3, r3, #1
 8012624:	9315      	str	r3, [sp, #84]	; 0x54
 8012626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012628:	2b00      	cmp	r3, #0
 801262a:	d0f0      	beq.n	801260e <__gethex+0x386>
 801262c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012630:	f104 0314 	add.w	r3, r4, #20
 8012634:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012638:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801263c:	f04f 0c00 	mov.w	ip, #0
 8012640:	4618      	mov	r0, r3
 8012642:	f853 2b04 	ldr.w	r2, [r3], #4
 8012646:	f1b2 3fff 	cmp.w	r2, #4294967295
 801264a:	d01c      	beq.n	8012686 <__gethex+0x3fe>
 801264c:	3201      	adds	r2, #1
 801264e:	6002      	str	r2, [r0, #0]
 8012650:	2f02      	cmp	r7, #2
 8012652:	f104 0314 	add.w	r3, r4, #20
 8012656:	d13f      	bne.n	80126d8 <__gethex+0x450>
 8012658:	f8d8 2000 	ldr.w	r2, [r8]
 801265c:	3a01      	subs	r2, #1
 801265e:	42b2      	cmp	r2, r6
 8012660:	d10a      	bne.n	8012678 <__gethex+0x3f0>
 8012662:	1171      	asrs	r1, r6, #5
 8012664:	2201      	movs	r2, #1
 8012666:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801266a:	f006 061f 	and.w	r6, r6, #31
 801266e:	fa02 f606 	lsl.w	r6, r2, r6
 8012672:	421e      	tst	r6, r3
 8012674:	bf18      	it	ne
 8012676:	4617      	movne	r7, r2
 8012678:	f047 0720 	orr.w	r7, r7, #32
 801267c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801267e:	601c      	str	r4, [r3, #0]
 8012680:	9b04      	ldr	r3, [sp, #16]
 8012682:	601d      	str	r5, [r3, #0]
 8012684:	e695      	b.n	80123b2 <__gethex+0x12a>
 8012686:	4299      	cmp	r1, r3
 8012688:	f843 cc04 	str.w	ip, [r3, #-4]
 801268c:	d8d8      	bhi.n	8012640 <__gethex+0x3b8>
 801268e:	68a3      	ldr	r3, [r4, #8]
 8012690:	459b      	cmp	fp, r3
 8012692:	db19      	blt.n	80126c8 <__gethex+0x440>
 8012694:	6861      	ldr	r1, [r4, #4]
 8012696:	ee18 0a10 	vmov	r0, s16
 801269a:	3101      	adds	r1, #1
 801269c:	f000 f99c 	bl	80129d8 <_Balloc>
 80126a0:	4681      	mov	r9, r0
 80126a2:	b918      	cbnz	r0, 80126ac <__gethex+0x424>
 80126a4:	4b1a      	ldr	r3, [pc, #104]	; (8012710 <__gethex+0x488>)
 80126a6:	4602      	mov	r2, r0
 80126a8:	2184      	movs	r1, #132	; 0x84
 80126aa:	e6a8      	b.n	80123fe <__gethex+0x176>
 80126ac:	6922      	ldr	r2, [r4, #16]
 80126ae:	3202      	adds	r2, #2
 80126b0:	f104 010c 	add.w	r1, r4, #12
 80126b4:	0092      	lsls	r2, r2, #2
 80126b6:	300c      	adds	r0, #12
 80126b8:	f7fc fd52 	bl	800f160 <memcpy>
 80126bc:	4621      	mov	r1, r4
 80126be:	ee18 0a10 	vmov	r0, s16
 80126c2:	f000 f9c9 	bl	8012a58 <_Bfree>
 80126c6:	464c      	mov	r4, r9
 80126c8:	6923      	ldr	r3, [r4, #16]
 80126ca:	1c5a      	adds	r2, r3, #1
 80126cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80126d0:	6122      	str	r2, [r4, #16]
 80126d2:	2201      	movs	r2, #1
 80126d4:	615a      	str	r2, [r3, #20]
 80126d6:	e7bb      	b.n	8012650 <__gethex+0x3c8>
 80126d8:	6922      	ldr	r2, [r4, #16]
 80126da:	455a      	cmp	r2, fp
 80126dc:	dd0b      	ble.n	80126f6 <__gethex+0x46e>
 80126de:	2101      	movs	r1, #1
 80126e0:	4620      	mov	r0, r4
 80126e2:	f7ff fd6a 	bl	80121ba <rshift>
 80126e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126ea:	3501      	adds	r5, #1
 80126ec:	42ab      	cmp	r3, r5
 80126ee:	f6ff aed0 	blt.w	8012492 <__gethex+0x20a>
 80126f2:	2701      	movs	r7, #1
 80126f4:	e7c0      	b.n	8012678 <__gethex+0x3f0>
 80126f6:	f016 061f 	ands.w	r6, r6, #31
 80126fa:	d0fa      	beq.n	80126f2 <__gethex+0x46a>
 80126fc:	4453      	add	r3, sl
 80126fe:	f1c6 0620 	rsb	r6, r6, #32
 8012702:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012706:	f000 fa59 	bl	8012bbc <__hi0bits>
 801270a:	42b0      	cmp	r0, r6
 801270c:	dbe7      	blt.n	80126de <__gethex+0x456>
 801270e:	e7f0      	b.n	80126f2 <__gethex+0x46a>
 8012710:	0802a8a3 	.word	0x0802a8a3

08012714 <L_shift>:
 8012714:	f1c2 0208 	rsb	r2, r2, #8
 8012718:	0092      	lsls	r2, r2, #2
 801271a:	b570      	push	{r4, r5, r6, lr}
 801271c:	f1c2 0620 	rsb	r6, r2, #32
 8012720:	6843      	ldr	r3, [r0, #4]
 8012722:	6804      	ldr	r4, [r0, #0]
 8012724:	fa03 f506 	lsl.w	r5, r3, r6
 8012728:	432c      	orrs	r4, r5
 801272a:	40d3      	lsrs	r3, r2
 801272c:	6004      	str	r4, [r0, #0]
 801272e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012732:	4288      	cmp	r0, r1
 8012734:	d3f4      	bcc.n	8012720 <L_shift+0xc>
 8012736:	bd70      	pop	{r4, r5, r6, pc}

08012738 <__match>:
 8012738:	b530      	push	{r4, r5, lr}
 801273a:	6803      	ldr	r3, [r0, #0]
 801273c:	3301      	adds	r3, #1
 801273e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012742:	b914      	cbnz	r4, 801274a <__match+0x12>
 8012744:	6003      	str	r3, [r0, #0]
 8012746:	2001      	movs	r0, #1
 8012748:	bd30      	pop	{r4, r5, pc}
 801274a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801274e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012752:	2d19      	cmp	r5, #25
 8012754:	bf98      	it	ls
 8012756:	3220      	addls	r2, #32
 8012758:	42a2      	cmp	r2, r4
 801275a:	d0f0      	beq.n	801273e <__match+0x6>
 801275c:	2000      	movs	r0, #0
 801275e:	e7f3      	b.n	8012748 <__match+0x10>

08012760 <__hexnan>:
 8012760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012764:	680b      	ldr	r3, [r1, #0]
 8012766:	115e      	asrs	r6, r3, #5
 8012768:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801276c:	f013 031f 	ands.w	r3, r3, #31
 8012770:	b087      	sub	sp, #28
 8012772:	bf18      	it	ne
 8012774:	3604      	addne	r6, #4
 8012776:	2500      	movs	r5, #0
 8012778:	1f37      	subs	r7, r6, #4
 801277a:	4690      	mov	r8, r2
 801277c:	6802      	ldr	r2, [r0, #0]
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	4682      	mov	sl, r0
 8012782:	f846 5c04 	str.w	r5, [r6, #-4]
 8012786:	46b9      	mov	r9, r7
 8012788:	463c      	mov	r4, r7
 801278a:	9502      	str	r5, [sp, #8]
 801278c:	46ab      	mov	fp, r5
 801278e:	7851      	ldrb	r1, [r2, #1]
 8012790:	1c53      	adds	r3, r2, #1
 8012792:	9303      	str	r3, [sp, #12]
 8012794:	b341      	cbz	r1, 80127e8 <__hexnan+0x88>
 8012796:	4608      	mov	r0, r1
 8012798:	9205      	str	r2, [sp, #20]
 801279a:	9104      	str	r1, [sp, #16]
 801279c:	f7ff fd5f 	bl	801225e <__hexdig_fun>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d14f      	bne.n	8012844 <__hexnan+0xe4>
 80127a4:	9904      	ldr	r1, [sp, #16]
 80127a6:	9a05      	ldr	r2, [sp, #20]
 80127a8:	2920      	cmp	r1, #32
 80127aa:	d818      	bhi.n	80127de <__hexnan+0x7e>
 80127ac:	9b02      	ldr	r3, [sp, #8]
 80127ae:	459b      	cmp	fp, r3
 80127b0:	dd13      	ble.n	80127da <__hexnan+0x7a>
 80127b2:	454c      	cmp	r4, r9
 80127b4:	d206      	bcs.n	80127c4 <__hexnan+0x64>
 80127b6:	2d07      	cmp	r5, #7
 80127b8:	dc04      	bgt.n	80127c4 <__hexnan+0x64>
 80127ba:	462a      	mov	r2, r5
 80127bc:	4649      	mov	r1, r9
 80127be:	4620      	mov	r0, r4
 80127c0:	f7ff ffa8 	bl	8012714 <L_shift>
 80127c4:	4544      	cmp	r4, r8
 80127c6:	d950      	bls.n	801286a <__hexnan+0x10a>
 80127c8:	2300      	movs	r3, #0
 80127ca:	f1a4 0904 	sub.w	r9, r4, #4
 80127ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80127d2:	f8cd b008 	str.w	fp, [sp, #8]
 80127d6:	464c      	mov	r4, r9
 80127d8:	461d      	mov	r5, r3
 80127da:	9a03      	ldr	r2, [sp, #12]
 80127dc:	e7d7      	b.n	801278e <__hexnan+0x2e>
 80127de:	2929      	cmp	r1, #41	; 0x29
 80127e0:	d156      	bne.n	8012890 <__hexnan+0x130>
 80127e2:	3202      	adds	r2, #2
 80127e4:	f8ca 2000 	str.w	r2, [sl]
 80127e8:	f1bb 0f00 	cmp.w	fp, #0
 80127ec:	d050      	beq.n	8012890 <__hexnan+0x130>
 80127ee:	454c      	cmp	r4, r9
 80127f0:	d206      	bcs.n	8012800 <__hexnan+0xa0>
 80127f2:	2d07      	cmp	r5, #7
 80127f4:	dc04      	bgt.n	8012800 <__hexnan+0xa0>
 80127f6:	462a      	mov	r2, r5
 80127f8:	4649      	mov	r1, r9
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7ff ff8a 	bl	8012714 <L_shift>
 8012800:	4544      	cmp	r4, r8
 8012802:	d934      	bls.n	801286e <__hexnan+0x10e>
 8012804:	f1a8 0204 	sub.w	r2, r8, #4
 8012808:	4623      	mov	r3, r4
 801280a:	f853 1b04 	ldr.w	r1, [r3], #4
 801280e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012812:	429f      	cmp	r7, r3
 8012814:	d2f9      	bcs.n	801280a <__hexnan+0xaa>
 8012816:	1b3b      	subs	r3, r7, r4
 8012818:	f023 0303 	bic.w	r3, r3, #3
 801281c:	3304      	adds	r3, #4
 801281e:	3401      	adds	r4, #1
 8012820:	3e03      	subs	r6, #3
 8012822:	42b4      	cmp	r4, r6
 8012824:	bf88      	it	hi
 8012826:	2304      	movhi	r3, #4
 8012828:	4443      	add	r3, r8
 801282a:	2200      	movs	r2, #0
 801282c:	f843 2b04 	str.w	r2, [r3], #4
 8012830:	429f      	cmp	r7, r3
 8012832:	d2fb      	bcs.n	801282c <__hexnan+0xcc>
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	b91b      	cbnz	r3, 8012840 <__hexnan+0xe0>
 8012838:	4547      	cmp	r7, r8
 801283a:	d127      	bne.n	801288c <__hexnan+0x12c>
 801283c:	2301      	movs	r3, #1
 801283e:	603b      	str	r3, [r7, #0]
 8012840:	2005      	movs	r0, #5
 8012842:	e026      	b.n	8012892 <__hexnan+0x132>
 8012844:	3501      	adds	r5, #1
 8012846:	2d08      	cmp	r5, #8
 8012848:	f10b 0b01 	add.w	fp, fp, #1
 801284c:	dd06      	ble.n	801285c <__hexnan+0xfc>
 801284e:	4544      	cmp	r4, r8
 8012850:	d9c3      	bls.n	80127da <__hexnan+0x7a>
 8012852:	2300      	movs	r3, #0
 8012854:	f844 3c04 	str.w	r3, [r4, #-4]
 8012858:	2501      	movs	r5, #1
 801285a:	3c04      	subs	r4, #4
 801285c:	6822      	ldr	r2, [r4, #0]
 801285e:	f000 000f 	and.w	r0, r0, #15
 8012862:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012866:	6022      	str	r2, [r4, #0]
 8012868:	e7b7      	b.n	80127da <__hexnan+0x7a>
 801286a:	2508      	movs	r5, #8
 801286c:	e7b5      	b.n	80127da <__hexnan+0x7a>
 801286e:	9b01      	ldr	r3, [sp, #4]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d0df      	beq.n	8012834 <__hexnan+0xd4>
 8012874:	f04f 32ff 	mov.w	r2, #4294967295
 8012878:	f1c3 0320 	rsb	r3, r3, #32
 801287c:	fa22 f303 	lsr.w	r3, r2, r3
 8012880:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012884:	401a      	ands	r2, r3
 8012886:	f846 2c04 	str.w	r2, [r6, #-4]
 801288a:	e7d3      	b.n	8012834 <__hexnan+0xd4>
 801288c:	3f04      	subs	r7, #4
 801288e:	e7d1      	b.n	8012834 <__hexnan+0xd4>
 8012890:	2004      	movs	r0, #4
 8012892:	b007      	add	sp, #28
 8012894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012898 <_localeconv_r>:
 8012898:	4800      	ldr	r0, [pc, #0]	; (801289c <_localeconv_r+0x4>)
 801289a:	4770      	bx	lr
 801289c:	20000234 	.word	0x20000234

080128a0 <__retarget_lock_init_recursive>:
 80128a0:	4770      	bx	lr

080128a2 <__retarget_lock_acquire_recursive>:
 80128a2:	4770      	bx	lr

080128a4 <__retarget_lock_release_recursive>:
 80128a4:	4770      	bx	lr

080128a6 <__swhatbuf_r>:
 80128a6:	b570      	push	{r4, r5, r6, lr}
 80128a8:	460e      	mov	r6, r1
 80128aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ae:	2900      	cmp	r1, #0
 80128b0:	b096      	sub	sp, #88	; 0x58
 80128b2:	4614      	mov	r4, r2
 80128b4:	461d      	mov	r5, r3
 80128b6:	da08      	bge.n	80128ca <__swhatbuf_r+0x24>
 80128b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80128bc:	2200      	movs	r2, #0
 80128be:	602a      	str	r2, [r5, #0]
 80128c0:	061a      	lsls	r2, r3, #24
 80128c2:	d410      	bmi.n	80128e6 <__swhatbuf_r+0x40>
 80128c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128c8:	e00e      	b.n	80128e8 <__swhatbuf_r+0x42>
 80128ca:	466a      	mov	r2, sp
 80128cc:	f001 f8aa 	bl	8013a24 <_fstat_r>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	dbf1      	blt.n	80128b8 <__swhatbuf_r+0x12>
 80128d4:	9a01      	ldr	r2, [sp, #4]
 80128d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80128da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80128de:	425a      	negs	r2, r3
 80128e0:	415a      	adcs	r2, r3
 80128e2:	602a      	str	r2, [r5, #0]
 80128e4:	e7ee      	b.n	80128c4 <__swhatbuf_r+0x1e>
 80128e6:	2340      	movs	r3, #64	; 0x40
 80128e8:	2000      	movs	r0, #0
 80128ea:	6023      	str	r3, [r4, #0]
 80128ec:	b016      	add	sp, #88	; 0x58
 80128ee:	bd70      	pop	{r4, r5, r6, pc}

080128f0 <__smakebuf_r>:
 80128f0:	898b      	ldrh	r3, [r1, #12]
 80128f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128f4:	079d      	lsls	r5, r3, #30
 80128f6:	4606      	mov	r6, r0
 80128f8:	460c      	mov	r4, r1
 80128fa:	d507      	bpl.n	801290c <__smakebuf_r+0x1c>
 80128fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012900:	6023      	str	r3, [r4, #0]
 8012902:	6123      	str	r3, [r4, #16]
 8012904:	2301      	movs	r3, #1
 8012906:	6163      	str	r3, [r4, #20]
 8012908:	b002      	add	sp, #8
 801290a:	bd70      	pop	{r4, r5, r6, pc}
 801290c:	ab01      	add	r3, sp, #4
 801290e:	466a      	mov	r2, sp
 8012910:	f7ff ffc9 	bl	80128a6 <__swhatbuf_r>
 8012914:	9900      	ldr	r1, [sp, #0]
 8012916:	4605      	mov	r5, r0
 8012918:	4630      	mov	r0, r6
 801291a:	f000 fda1 	bl	8013460 <_malloc_r>
 801291e:	b948      	cbnz	r0, 8012934 <__smakebuf_r+0x44>
 8012920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012924:	059a      	lsls	r2, r3, #22
 8012926:	d4ef      	bmi.n	8012908 <__smakebuf_r+0x18>
 8012928:	f023 0303 	bic.w	r3, r3, #3
 801292c:	f043 0302 	orr.w	r3, r3, #2
 8012930:	81a3      	strh	r3, [r4, #12]
 8012932:	e7e3      	b.n	80128fc <__smakebuf_r+0xc>
 8012934:	4b0d      	ldr	r3, [pc, #52]	; (801296c <__smakebuf_r+0x7c>)
 8012936:	62b3      	str	r3, [r6, #40]	; 0x28
 8012938:	89a3      	ldrh	r3, [r4, #12]
 801293a:	6020      	str	r0, [r4, #0]
 801293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012940:	81a3      	strh	r3, [r4, #12]
 8012942:	9b00      	ldr	r3, [sp, #0]
 8012944:	6163      	str	r3, [r4, #20]
 8012946:	9b01      	ldr	r3, [sp, #4]
 8012948:	6120      	str	r0, [r4, #16]
 801294a:	b15b      	cbz	r3, 8012964 <__smakebuf_r+0x74>
 801294c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012950:	4630      	mov	r0, r6
 8012952:	f001 f879 	bl	8013a48 <_isatty_r>
 8012956:	b128      	cbz	r0, 8012964 <__smakebuf_r+0x74>
 8012958:	89a3      	ldrh	r3, [r4, #12]
 801295a:	f023 0303 	bic.w	r3, r3, #3
 801295e:	f043 0301 	orr.w	r3, r3, #1
 8012962:	81a3      	strh	r3, [r4, #12]
 8012964:	89a0      	ldrh	r0, [r4, #12]
 8012966:	4305      	orrs	r5, r0
 8012968:	81a5      	strh	r5, [r4, #12]
 801296a:	e7cd      	b.n	8012908 <__smakebuf_r+0x18>
 801296c:	08012019 	.word	0x08012019

08012970 <malloc>:
 8012970:	4b02      	ldr	r3, [pc, #8]	; (801297c <malloc+0xc>)
 8012972:	4601      	mov	r1, r0
 8012974:	6818      	ldr	r0, [r3, #0]
 8012976:	f000 bd73 	b.w	8013460 <_malloc_r>
 801297a:	bf00      	nop
 801297c:	200000dc 	.word	0x200000dc

08012980 <__ascii_mbtowc>:
 8012980:	b082      	sub	sp, #8
 8012982:	b901      	cbnz	r1, 8012986 <__ascii_mbtowc+0x6>
 8012984:	a901      	add	r1, sp, #4
 8012986:	b142      	cbz	r2, 801299a <__ascii_mbtowc+0x1a>
 8012988:	b14b      	cbz	r3, 801299e <__ascii_mbtowc+0x1e>
 801298a:	7813      	ldrb	r3, [r2, #0]
 801298c:	600b      	str	r3, [r1, #0]
 801298e:	7812      	ldrb	r2, [r2, #0]
 8012990:	1e10      	subs	r0, r2, #0
 8012992:	bf18      	it	ne
 8012994:	2001      	movne	r0, #1
 8012996:	b002      	add	sp, #8
 8012998:	4770      	bx	lr
 801299a:	4610      	mov	r0, r2
 801299c:	e7fb      	b.n	8012996 <__ascii_mbtowc+0x16>
 801299e:	f06f 0001 	mvn.w	r0, #1
 80129a2:	e7f8      	b.n	8012996 <__ascii_mbtowc+0x16>

080129a4 <memmove>:
 80129a4:	4288      	cmp	r0, r1
 80129a6:	b510      	push	{r4, lr}
 80129a8:	eb01 0402 	add.w	r4, r1, r2
 80129ac:	d902      	bls.n	80129b4 <memmove+0x10>
 80129ae:	4284      	cmp	r4, r0
 80129b0:	4623      	mov	r3, r4
 80129b2:	d807      	bhi.n	80129c4 <memmove+0x20>
 80129b4:	1e43      	subs	r3, r0, #1
 80129b6:	42a1      	cmp	r1, r4
 80129b8:	d008      	beq.n	80129cc <memmove+0x28>
 80129ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129c2:	e7f8      	b.n	80129b6 <memmove+0x12>
 80129c4:	4402      	add	r2, r0
 80129c6:	4601      	mov	r1, r0
 80129c8:	428a      	cmp	r2, r1
 80129ca:	d100      	bne.n	80129ce <memmove+0x2a>
 80129cc:	bd10      	pop	{r4, pc}
 80129ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129d6:	e7f7      	b.n	80129c8 <memmove+0x24>

080129d8 <_Balloc>:
 80129d8:	b570      	push	{r4, r5, r6, lr}
 80129da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80129dc:	4604      	mov	r4, r0
 80129de:	460d      	mov	r5, r1
 80129e0:	b976      	cbnz	r6, 8012a00 <_Balloc+0x28>
 80129e2:	2010      	movs	r0, #16
 80129e4:	f7ff ffc4 	bl	8012970 <malloc>
 80129e8:	4602      	mov	r2, r0
 80129ea:	6260      	str	r0, [r4, #36]	; 0x24
 80129ec:	b920      	cbnz	r0, 80129f8 <_Balloc+0x20>
 80129ee:	4b18      	ldr	r3, [pc, #96]	; (8012a50 <_Balloc+0x78>)
 80129f0:	4818      	ldr	r0, [pc, #96]	; (8012a54 <_Balloc+0x7c>)
 80129f2:	2166      	movs	r1, #102	; 0x66
 80129f4:	f7fc fb5a 	bl	800f0ac <__assert_func>
 80129f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129fc:	6006      	str	r6, [r0, #0]
 80129fe:	60c6      	str	r6, [r0, #12]
 8012a00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a02:	68f3      	ldr	r3, [r6, #12]
 8012a04:	b183      	cbz	r3, 8012a28 <_Balloc+0x50>
 8012a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a0e:	b9b8      	cbnz	r0, 8012a40 <_Balloc+0x68>
 8012a10:	2101      	movs	r1, #1
 8012a12:	fa01 f605 	lsl.w	r6, r1, r5
 8012a16:	1d72      	adds	r2, r6, #5
 8012a18:	0092      	lsls	r2, r2, #2
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f000 fc9d 	bl	801335a <_calloc_r>
 8012a20:	b160      	cbz	r0, 8012a3c <_Balloc+0x64>
 8012a22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a26:	e00e      	b.n	8012a46 <_Balloc+0x6e>
 8012a28:	2221      	movs	r2, #33	; 0x21
 8012a2a:	2104      	movs	r1, #4
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f000 fc94 	bl	801335a <_calloc_r>
 8012a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a34:	60f0      	str	r0, [r6, #12]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d1e4      	bne.n	8012a06 <_Balloc+0x2e>
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	6802      	ldr	r2, [r0, #0]
 8012a42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a46:	2300      	movs	r3, #0
 8012a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a4c:	e7f7      	b.n	8012a3e <_Balloc+0x66>
 8012a4e:	bf00      	nop
 8012a50:	0802a80e 	.word	0x0802a80e
 8012a54:	0802a9b0 	.word	0x0802a9b0

08012a58 <_Bfree>:
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012a5c:	4605      	mov	r5, r0
 8012a5e:	460c      	mov	r4, r1
 8012a60:	b976      	cbnz	r6, 8012a80 <_Bfree+0x28>
 8012a62:	2010      	movs	r0, #16
 8012a64:	f7ff ff84 	bl	8012970 <malloc>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	6268      	str	r0, [r5, #36]	; 0x24
 8012a6c:	b920      	cbnz	r0, 8012a78 <_Bfree+0x20>
 8012a6e:	4b09      	ldr	r3, [pc, #36]	; (8012a94 <_Bfree+0x3c>)
 8012a70:	4809      	ldr	r0, [pc, #36]	; (8012a98 <_Bfree+0x40>)
 8012a72:	218a      	movs	r1, #138	; 0x8a
 8012a74:	f7fc fb1a 	bl	800f0ac <__assert_func>
 8012a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a7c:	6006      	str	r6, [r0, #0]
 8012a7e:	60c6      	str	r6, [r0, #12]
 8012a80:	b13c      	cbz	r4, 8012a92 <_Bfree+0x3a>
 8012a82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012a84:	6862      	ldr	r2, [r4, #4]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a8c:	6021      	str	r1, [r4, #0]
 8012a8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012a92:	bd70      	pop	{r4, r5, r6, pc}
 8012a94:	0802a80e 	.word	0x0802a80e
 8012a98:	0802a9b0 	.word	0x0802a9b0

08012a9c <__multadd>:
 8012a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa0:	690d      	ldr	r5, [r1, #16]
 8012aa2:	4607      	mov	r7, r0
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	461e      	mov	r6, r3
 8012aa8:	f101 0c14 	add.w	ip, r1, #20
 8012aac:	2000      	movs	r0, #0
 8012aae:	f8dc 3000 	ldr.w	r3, [ip]
 8012ab2:	b299      	uxth	r1, r3
 8012ab4:	fb02 6101 	mla	r1, r2, r1, r6
 8012ab8:	0c1e      	lsrs	r6, r3, #16
 8012aba:	0c0b      	lsrs	r3, r1, #16
 8012abc:	fb02 3306 	mla	r3, r2, r6, r3
 8012ac0:	b289      	uxth	r1, r1
 8012ac2:	3001      	adds	r0, #1
 8012ac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ac8:	4285      	cmp	r5, r0
 8012aca:	f84c 1b04 	str.w	r1, [ip], #4
 8012ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012ad2:	dcec      	bgt.n	8012aae <__multadd+0x12>
 8012ad4:	b30e      	cbz	r6, 8012b1a <__multadd+0x7e>
 8012ad6:	68a3      	ldr	r3, [r4, #8]
 8012ad8:	42ab      	cmp	r3, r5
 8012ada:	dc19      	bgt.n	8012b10 <__multadd+0x74>
 8012adc:	6861      	ldr	r1, [r4, #4]
 8012ade:	4638      	mov	r0, r7
 8012ae0:	3101      	adds	r1, #1
 8012ae2:	f7ff ff79 	bl	80129d8 <_Balloc>
 8012ae6:	4680      	mov	r8, r0
 8012ae8:	b928      	cbnz	r0, 8012af6 <__multadd+0x5a>
 8012aea:	4602      	mov	r2, r0
 8012aec:	4b0c      	ldr	r3, [pc, #48]	; (8012b20 <__multadd+0x84>)
 8012aee:	480d      	ldr	r0, [pc, #52]	; (8012b24 <__multadd+0x88>)
 8012af0:	21b5      	movs	r1, #181	; 0xb5
 8012af2:	f7fc fadb 	bl	800f0ac <__assert_func>
 8012af6:	6922      	ldr	r2, [r4, #16]
 8012af8:	3202      	adds	r2, #2
 8012afa:	f104 010c 	add.w	r1, r4, #12
 8012afe:	0092      	lsls	r2, r2, #2
 8012b00:	300c      	adds	r0, #12
 8012b02:	f7fc fb2d 	bl	800f160 <memcpy>
 8012b06:	4621      	mov	r1, r4
 8012b08:	4638      	mov	r0, r7
 8012b0a:	f7ff ffa5 	bl	8012a58 <_Bfree>
 8012b0e:	4644      	mov	r4, r8
 8012b10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012b14:	3501      	adds	r5, #1
 8012b16:	615e      	str	r6, [r3, #20]
 8012b18:	6125      	str	r5, [r4, #16]
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b20:	0802a8a3 	.word	0x0802a8a3
 8012b24:	0802a9b0 	.word	0x0802a9b0

08012b28 <__s2b>:
 8012b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b2c:	460c      	mov	r4, r1
 8012b2e:	4615      	mov	r5, r2
 8012b30:	461f      	mov	r7, r3
 8012b32:	2209      	movs	r2, #9
 8012b34:	3308      	adds	r3, #8
 8012b36:	4606      	mov	r6, r0
 8012b38:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	2201      	movs	r2, #1
 8012b40:	429a      	cmp	r2, r3
 8012b42:	db09      	blt.n	8012b58 <__s2b+0x30>
 8012b44:	4630      	mov	r0, r6
 8012b46:	f7ff ff47 	bl	80129d8 <_Balloc>
 8012b4a:	b940      	cbnz	r0, 8012b5e <__s2b+0x36>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	4b19      	ldr	r3, [pc, #100]	; (8012bb4 <__s2b+0x8c>)
 8012b50:	4819      	ldr	r0, [pc, #100]	; (8012bb8 <__s2b+0x90>)
 8012b52:	21ce      	movs	r1, #206	; 0xce
 8012b54:	f7fc faaa 	bl	800f0ac <__assert_func>
 8012b58:	0052      	lsls	r2, r2, #1
 8012b5a:	3101      	adds	r1, #1
 8012b5c:	e7f0      	b.n	8012b40 <__s2b+0x18>
 8012b5e:	9b08      	ldr	r3, [sp, #32]
 8012b60:	6143      	str	r3, [r0, #20]
 8012b62:	2d09      	cmp	r5, #9
 8012b64:	f04f 0301 	mov.w	r3, #1
 8012b68:	6103      	str	r3, [r0, #16]
 8012b6a:	dd16      	ble.n	8012b9a <__s2b+0x72>
 8012b6c:	f104 0909 	add.w	r9, r4, #9
 8012b70:	46c8      	mov	r8, r9
 8012b72:	442c      	add	r4, r5
 8012b74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012b78:	4601      	mov	r1, r0
 8012b7a:	3b30      	subs	r3, #48	; 0x30
 8012b7c:	220a      	movs	r2, #10
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f7ff ff8c 	bl	8012a9c <__multadd>
 8012b84:	45a0      	cmp	r8, r4
 8012b86:	d1f5      	bne.n	8012b74 <__s2b+0x4c>
 8012b88:	f1a5 0408 	sub.w	r4, r5, #8
 8012b8c:	444c      	add	r4, r9
 8012b8e:	1b2d      	subs	r5, r5, r4
 8012b90:	1963      	adds	r3, r4, r5
 8012b92:	42bb      	cmp	r3, r7
 8012b94:	db04      	blt.n	8012ba0 <__s2b+0x78>
 8012b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b9a:	340a      	adds	r4, #10
 8012b9c:	2509      	movs	r5, #9
 8012b9e:	e7f6      	b.n	8012b8e <__s2b+0x66>
 8012ba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ba4:	4601      	mov	r1, r0
 8012ba6:	3b30      	subs	r3, #48	; 0x30
 8012ba8:	220a      	movs	r2, #10
 8012baa:	4630      	mov	r0, r6
 8012bac:	f7ff ff76 	bl	8012a9c <__multadd>
 8012bb0:	e7ee      	b.n	8012b90 <__s2b+0x68>
 8012bb2:	bf00      	nop
 8012bb4:	0802a8a3 	.word	0x0802a8a3
 8012bb8:	0802a9b0 	.word	0x0802a9b0

08012bbc <__hi0bits>:
 8012bbc:	0c03      	lsrs	r3, r0, #16
 8012bbe:	041b      	lsls	r3, r3, #16
 8012bc0:	b9d3      	cbnz	r3, 8012bf8 <__hi0bits+0x3c>
 8012bc2:	0400      	lsls	r0, r0, #16
 8012bc4:	2310      	movs	r3, #16
 8012bc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012bca:	bf04      	itt	eq
 8012bcc:	0200      	lsleq	r0, r0, #8
 8012bce:	3308      	addeq	r3, #8
 8012bd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012bd4:	bf04      	itt	eq
 8012bd6:	0100      	lsleq	r0, r0, #4
 8012bd8:	3304      	addeq	r3, #4
 8012bda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012bde:	bf04      	itt	eq
 8012be0:	0080      	lsleq	r0, r0, #2
 8012be2:	3302      	addeq	r3, #2
 8012be4:	2800      	cmp	r0, #0
 8012be6:	db05      	blt.n	8012bf4 <__hi0bits+0x38>
 8012be8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012bec:	f103 0301 	add.w	r3, r3, #1
 8012bf0:	bf08      	it	eq
 8012bf2:	2320      	moveq	r3, #32
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	4770      	bx	lr
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	e7e4      	b.n	8012bc6 <__hi0bits+0xa>

08012bfc <__lo0bits>:
 8012bfc:	6803      	ldr	r3, [r0, #0]
 8012bfe:	f013 0207 	ands.w	r2, r3, #7
 8012c02:	4601      	mov	r1, r0
 8012c04:	d00b      	beq.n	8012c1e <__lo0bits+0x22>
 8012c06:	07da      	lsls	r2, r3, #31
 8012c08:	d423      	bmi.n	8012c52 <__lo0bits+0x56>
 8012c0a:	0798      	lsls	r0, r3, #30
 8012c0c:	bf49      	itett	mi
 8012c0e:	085b      	lsrmi	r3, r3, #1
 8012c10:	089b      	lsrpl	r3, r3, #2
 8012c12:	2001      	movmi	r0, #1
 8012c14:	600b      	strmi	r3, [r1, #0]
 8012c16:	bf5c      	itt	pl
 8012c18:	600b      	strpl	r3, [r1, #0]
 8012c1a:	2002      	movpl	r0, #2
 8012c1c:	4770      	bx	lr
 8012c1e:	b298      	uxth	r0, r3
 8012c20:	b9a8      	cbnz	r0, 8012c4e <__lo0bits+0x52>
 8012c22:	0c1b      	lsrs	r3, r3, #16
 8012c24:	2010      	movs	r0, #16
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	b90a      	cbnz	r2, 8012c2e <__lo0bits+0x32>
 8012c2a:	3008      	adds	r0, #8
 8012c2c:	0a1b      	lsrs	r3, r3, #8
 8012c2e:	071a      	lsls	r2, r3, #28
 8012c30:	bf04      	itt	eq
 8012c32:	091b      	lsreq	r3, r3, #4
 8012c34:	3004      	addeq	r0, #4
 8012c36:	079a      	lsls	r2, r3, #30
 8012c38:	bf04      	itt	eq
 8012c3a:	089b      	lsreq	r3, r3, #2
 8012c3c:	3002      	addeq	r0, #2
 8012c3e:	07da      	lsls	r2, r3, #31
 8012c40:	d403      	bmi.n	8012c4a <__lo0bits+0x4e>
 8012c42:	085b      	lsrs	r3, r3, #1
 8012c44:	f100 0001 	add.w	r0, r0, #1
 8012c48:	d005      	beq.n	8012c56 <__lo0bits+0x5a>
 8012c4a:	600b      	str	r3, [r1, #0]
 8012c4c:	4770      	bx	lr
 8012c4e:	4610      	mov	r0, r2
 8012c50:	e7e9      	b.n	8012c26 <__lo0bits+0x2a>
 8012c52:	2000      	movs	r0, #0
 8012c54:	4770      	bx	lr
 8012c56:	2020      	movs	r0, #32
 8012c58:	4770      	bx	lr
	...

08012c5c <__i2b>:
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	460c      	mov	r4, r1
 8012c60:	2101      	movs	r1, #1
 8012c62:	f7ff feb9 	bl	80129d8 <_Balloc>
 8012c66:	4602      	mov	r2, r0
 8012c68:	b928      	cbnz	r0, 8012c76 <__i2b+0x1a>
 8012c6a:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <__i2b+0x24>)
 8012c6c:	4805      	ldr	r0, [pc, #20]	; (8012c84 <__i2b+0x28>)
 8012c6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012c72:	f7fc fa1b 	bl	800f0ac <__assert_func>
 8012c76:	2301      	movs	r3, #1
 8012c78:	6144      	str	r4, [r0, #20]
 8012c7a:	6103      	str	r3, [r0, #16]
 8012c7c:	bd10      	pop	{r4, pc}
 8012c7e:	bf00      	nop
 8012c80:	0802a8a3 	.word	0x0802a8a3
 8012c84:	0802a9b0 	.word	0x0802a9b0

08012c88 <__multiply>:
 8012c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c8c:	4691      	mov	r9, r2
 8012c8e:	690a      	ldr	r2, [r1, #16]
 8012c90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	bfb8      	it	lt
 8012c98:	460b      	movlt	r3, r1
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	bfbc      	itt	lt
 8012c9e:	464c      	movlt	r4, r9
 8012ca0:	4699      	movlt	r9, r3
 8012ca2:	6927      	ldr	r7, [r4, #16]
 8012ca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012ca8:	68a3      	ldr	r3, [r4, #8]
 8012caa:	6861      	ldr	r1, [r4, #4]
 8012cac:	eb07 060a 	add.w	r6, r7, sl
 8012cb0:	42b3      	cmp	r3, r6
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	bfb8      	it	lt
 8012cb6:	3101      	addlt	r1, #1
 8012cb8:	f7ff fe8e 	bl	80129d8 <_Balloc>
 8012cbc:	b930      	cbnz	r0, 8012ccc <__multiply+0x44>
 8012cbe:	4602      	mov	r2, r0
 8012cc0:	4b44      	ldr	r3, [pc, #272]	; (8012dd4 <__multiply+0x14c>)
 8012cc2:	4845      	ldr	r0, [pc, #276]	; (8012dd8 <__multiply+0x150>)
 8012cc4:	f240 115d 	movw	r1, #349	; 0x15d
 8012cc8:	f7fc f9f0 	bl	800f0ac <__assert_func>
 8012ccc:	f100 0514 	add.w	r5, r0, #20
 8012cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012cd4:	462b      	mov	r3, r5
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	4543      	cmp	r3, r8
 8012cda:	d321      	bcc.n	8012d20 <__multiply+0x98>
 8012cdc:	f104 0314 	add.w	r3, r4, #20
 8012ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012ce4:	f109 0314 	add.w	r3, r9, #20
 8012ce8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012cec:	9202      	str	r2, [sp, #8]
 8012cee:	1b3a      	subs	r2, r7, r4
 8012cf0:	3a15      	subs	r2, #21
 8012cf2:	f022 0203 	bic.w	r2, r2, #3
 8012cf6:	3204      	adds	r2, #4
 8012cf8:	f104 0115 	add.w	r1, r4, #21
 8012cfc:	428f      	cmp	r7, r1
 8012cfe:	bf38      	it	cc
 8012d00:	2204      	movcc	r2, #4
 8012d02:	9201      	str	r2, [sp, #4]
 8012d04:	9a02      	ldr	r2, [sp, #8]
 8012d06:	9303      	str	r3, [sp, #12]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d80c      	bhi.n	8012d26 <__multiply+0x9e>
 8012d0c:	2e00      	cmp	r6, #0
 8012d0e:	dd03      	ble.n	8012d18 <__multiply+0x90>
 8012d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d05a      	beq.n	8012dce <__multiply+0x146>
 8012d18:	6106      	str	r6, [r0, #16]
 8012d1a:	b005      	add	sp, #20
 8012d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d20:	f843 2b04 	str.w	r2, [r3], #4
 8012d24:	e7d8      	b.n	8012cd8 <__multiply+0x50>
 8012d26:	f8b3 a000 	ldrh.w	sl, [r3]
 8012d2a:	f1ba 0f00 	cmp.w	sl, #0
 8012d2e:	d024      	beq.n	8012d7a <__multiply+0xf2>
 8012d30:	f104 0e14 	add.w	lr, r4, #20
 8012d34:	46a9      	mov	r9, r5
 8012d36:	f04f 0c00 	mov.w	ip, #0
 8012d3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012d3e:	f8d9 1000 	ldr.w	r1, [r9]
 8012d42:	fa1f fb82 	uxth.w	fp, r2
 8012d46:	b289      	uxth	r1, r1
 8012d48:	fb0a 110b 	mla	r1, sl, fp, r1
 8012d4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012d50:	f8d9 2000 	ldr.w	r2, [r9]
 8012d54:	4461      	add	r1, ip
 8012d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8012d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012d62:	b289      	uxth	r1, r1
 8012d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012d68:	4577      	cmp	r7, lr
 8012d6a:	f849 1b04 	str.w	r1, [r9], #4
 8012d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d72:	d8e2      	bhi.n	8012d3a <__multiply+0xb2>
 8012d74:	9a01      	ldr	r2, [sp, #4]
 8012d76:	f845 c002 	str.w	ip, [r5, r2]
 8012d7a:	9a03      	ldr	r2, [sp, #12]
 8012d7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012d80:	3304      	adds	r3, #4
 8012d82:	f1b9 0f00 	cmp.w	r9, #0
 8012d86:	d020      	beq.n	8012dca <__multiply+0x142>
 8012d88:	6829      	ldr	r1, [r5, #0]
 8012d8a:	f104 0c14 	add.w	ip, r4, #20
 8012d8e:	46ae      	mov	lr, r5
 8012d90:	f04f 0a00 	mov.w	sl, #0
 8012d94:	f8bc b000 	ldrh.w	fp, [ip]
 8012d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012d9c:	fb09 220b 	mla	r2, r9, fp, r2
 8012da0:	4492      	add	sl, r2
 8012da2:	b289      	uxth	r1, r1
 8012da4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012da8:	f84e 1b04 	str.w	r1, [lr], #4
 8012dac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012db0:	f8be 1000 	ldrh.w	r1, [lr]
 8012db4:	0c12      	lsrs	r2, r2, #16
 8012db6:	fb09 1102 	mla	r1, r9, r2, r1
 8012dba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012dbe:	4567      	cmp	r7, ip
 8012dc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012dc4:	d8e6      	bhi.n	8012d94 <__multiply+0x10c>
 8012dc6:	9a01      	ldr	r2, [sp, #4]
 8012dc8:	50a9      	str	r1, [r5, r2]
 8012dca:	3504      	adds	r5, #4
 8012dcc:	e79a      	b.n	8012d04 <__multiply+0x7c>
 8012dce:	3e01      	subs	r6, #1
 8012dd0:	e79c      	b.n	8012d0c <__multiply+0x84>
 8012dd2:	bf00      	nop
 8012dd4:	0802a8a3 	.word	0x0802a8a3
 8012dd8:	0802a9b0 	.word	0x0802a9b0

08012ddc <__pow5mult>:
 8012ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de0:	4615      	mov	r5, r2
 8012de2:	f012 0203 	ands.w	r2, r2, #3
 8012de6:	4606      	mov	r6, r0
 8012de8:	460f      	mov	r7, r1
 8012dea:	d007      	beq.n	8012dfc <__pow5mult+0x20>
 8012dec:	4c25      	ldr	r4, [pc, #148]	; (8012e84 <__pow5mult+0xa8>)
 8012dee:	3a01      	subs	r2, #1
 8012df0:	2300      	movs	r3, #0
 8012df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012df6:	f7ff fe51 	bl	8012a9c <__multadd>
 8012dfa:	4607      	mov	r7, r0
 8012dfc:	10ad      	asrs	r5, r5, #2
 8012dfe:	d03d      	beq.n	8012e7c <__pow5mult+0xa0>
 8012e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012e02:	b97c      	cbnz	r4, 8012e24 <__pow5mult+0x48>
 8012e04:	2010      	movs	r0, #16
 8012e06:	f7ff fdb3 	bl	8012970 <malloc>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8012e0e:	b928      	cbnz	r0, 8012e1c <__pow5mult+0x40>
 8012e10:	4b1d      	ldr	r3, [pc, #116]	; (8012e88 <__pow5mult+0xac>)
 8012e12:	481e      	ldr	r0, [pc, #120]	; (8012e8c <__pow5mult+0xb0>)
 8012e14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012e18:	f7fc f948 	bl	800f0ac <__assert_func>
 8012e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e20:	6004      	str	r4, [r0, #0]
 8012e22:	60c4      	str	r4, [r0, #12]
 8012e24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e2c:	b94c      	cbnz	r4, 8012e42 <__pow5mult+0x66>
 8012e2e:	f240 2171 	movw	r1, #625	; 0x271
 8012e32:	4630      	mov	r0, r6
 8012e34:	f7ff ff12 	bl	8012c5c <__i2b>
 8012e38:	2300      	movs	r3, #0
 8012e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e3e:	4604      	mov	r4, r0
 8012e40:	6003      	str	r3, [r0, #0]
 8012e42:	f04f 0900 	mov.w	r9, #0
 8012e46:	07eb      	lsls	r3, r5, #31
 8012e48:	d50a      	bpl.n	8012e60 <__pow5mult+0x84>
 8012e4a:	4639      	mov	r1, r7
 8012e4c:	4622      	mov	r2, r4
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f7ff ff1a 	bl	8012c88 <__multiply>
 8012e54:	4639      	mov	r1, r7
 8012e56:	4680      	mov	r8, r0
 8012e58:	4630      	mov	r0, r6
 8012e5a:	f7ff fdfd 	bl	8012a58 <_Bfree>
 8012e5e:	4647      	mov	r7, r8
 8012e60:	106d      	asrs	r5, r5, #1
 8012e62:	d00b      	beq.n	8012e7c <__pow5mult+0xa0>
 8012e64:	6820      	ldr	r0, [r4, #0]
 8012e66:	b938      	cbnz	r0, 8012e78 <__pow5mult+0x9c>
 8012e68:	4622      	mov	r2, r4
 8012e6a:	4621      	mov	r1, r4
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f7ff ff0b 	bl	8012c88 <__multiply>
 8012e72:	6020      	str	r0, [r4, #0]
 8012e74:	f8c0 9000 	str.w	r9, [r0]
 8012e78:	4604      	mov	r4, r0
 8012e7a:	e7e4      	b.n	8012e46 <__pow5mult+0x6a>
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e82:	bf00      	nop
 8012e84:	0802ab20 	.word	0x0802ab20
 8012e88:	0802a80e 	.word	0x0802a80e
 8012e8c:	0802a9b0 	.word	0x0802a9b0

08012e90 <__lshift>:
 8012e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e94:	460c      	mov	r4, r1
 8012e96:	6849      	ldr	r1, [r1, #4]
 8012e98:	6923      	ldr	r3, [r4, #16]
 8012e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012e9e:	68a3      	ldr	r3, [r4, #8]
 8012ea0:	4607      	mov	r7, r0
 8012ea2:	4691      	mov	r9, r2
 8012ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ea8:	f108 0601 	add.w	r6, r8, #1
 8012eac:	42b3      	cmp	r3, r6
 8012eae:	db0b      	blt.n	8012ec8 <__lshift+0x38>
 8012eb0:	4638      	mov	r0, r7
 8012eb2:	f7ff fd91 	bl	80129d8 <_Balloc>
 8012eb6:	4605      	mov	r5, r0
 8012eb8:	b948      	cbnz	r0, 8012ece <__lshift+0x3e>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	4b2a      	ldr	r3, [pc, #168]	; (8012f68 <__lshift+0xd8>)
 8012ebe:	482b      	ldr	r0, [pc, #172]	; (8012f6c <__lshift+0xdc>)
 8012ec0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012ec4:	f7fc f8f2 	bl	800f0ac <__assert_func>
 8012ec8:	3101      	adds	r1, #1
 8012eca:	005b      	lsls	r3, r3, #1
 8012ecc:	e7ee      	b.n	8012eac <__lshift+0x1c>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	f100 0114 	add.w	r1, r0, #20
 8012ed4:	f100 0210 	add.w	r2, r0, #16
 8012ed8:	4618      	mov	r0, r3
 8012eda:	4553      	cmp	r3, sl
 8012edc:	db37      	blt.n	8012f4e <__lshift+0xbe>
 8012ede:	6920      	ldr	r0, [r4, #16]
 8012ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ee4:	f104 0314 	add.w	r3, r4, #20
 8012ee8:	f019 091f 	ands.w	r9, r9, #31
 8012eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ef0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012ef4:	d02f      	beq.n	8012f56 <__lshift+0xc6>
 8012ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8012efa:	468a      	mov	sl, r1
 8012efc:	f04f 0c00 	mov.w	ip, #0
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	fa02 f209 	lsl.w	r2, r2, r9
 8012f06:	ea42 020c 	orr.w	r2, r2, ip
 8012f0a:	f84a 2b04 	str.w	r2, [sl], #4
 8012f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f12:	4298      	cmp	r0, r3
 8012f14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012f18:	d8f2      	bhi.n	8012f00 <__lshift+0x70>
 8012f1a:	1b03      	subs	r3, r0, r4
 8012f1c:	3b15      	subs	r3, #21
 8012f1e:	f023 0303 	bic.w	r3, r3, #3
 8012f22:	3304      	adds	r3, #4
 8012f24:	f104 0215 	add.w	r2, r4, #21
 8012f28:	4290      	cmp	r0, r2
 8012f2a:	bf38      	it	cc
 8012f2c:	2304      	movcc	r3, #4
 8012f2e:	f841 c003 	str.w	ip, [r1, r3]
 8012f32:	f1bc 0f00 	cmp.w	ip, #0
 8012f36:	d001      	beq.n	8012f3c <__lshift+0xac>
 8012f38:	f108 0602 	add.w	r6, r8, #2
 8012f3c:	3e01      	subs	r6, #1
 8012f3e:	4638      	mov	r0, r7
 8012f40:	612e      	str	r6, [r5, #16]
 8012f42:	4621      	mov	r1, r4
 8012f44:	f7ff fd88 	bl	8012a58 <_Bfree>
 8012f48:	4628      	mov	r0, r5
 8012f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f52:	3301      	adds	r3, #1
 8012f54:	e7c1      	b.n	8012eda <__lshift+0x4a>
 8012f56:	3904      	subs	r1, #4
 8012f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f60:	4298      	cmp	r0, r3
 8012f62:	d8f9      	bhi.n	8012f58 <__lshift+0xc8>
 8012f64:	e7ea      	b.n	8012f3c <__lshift+0xac>
 8012f66:	bf00      	nop
 8012f68:	0802a8a3 	.word	0x0802a8a3
 8012f6c:	0802a9b0 	.word	0x0802a9b0

08012f70 <__mcmp>:
 8012f70:	b530      	push	{r4, r5, lr}
 8012f72:	6902      	ldr	r2, [r0, #16]
 8012f74:	690c      	ldr	r4, [r1, #16]
 8012f76:	1b12      	subs	r2, r2, r4
 8012f78:	d10e      	bne.n	8012f98 <__mcmp+0x28>
 8012f7a:	f100 0314 	add.w	r3, r0, #20
 8012f7e:	3114      	adds	r1, #20
 8012f80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012f84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012f88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012f8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012f90:	42a5      	cmp	r5, r4
 8012f92:	d003      	beq.n	8012f9c <__mcmp+0x2c>
 8012f94:	d305      	bcc.n	8012fa2 <__mcmp+0x32>
 8012f96:	2201      	movs	r2, #1
 8012f98:	4610      	mov	r0, r2
 8012f9a:	bd30      	pop	{r4, r5, pc}
 8012f9c:	4283      	cmp	r3, r0
 8012f9e:	d3f3      	bcc.n	8012f88 <__mcmp+0x18>
 8012fa0:	e7fa      	b.n	8012f98 <__mcmp+0x28>
 8012fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa6:	e7f7      	b.n	8012f98 <__mcmp+0x28>

08012fa8 <__mdiff>:
 8012fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	460c      	mov	r4, r1
 8012fae:	4606      	mov	r6, r0
 8012fb0:	4611      	mov	r1, r2
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	4690      	mov	r8, r2
 8012fb6:	f7ff ffdb 	bl	8012f70 <__mcmp>
 8012fba:	1e05      	subs	r5, r0, #0
 8012fbc:	d110      	bne.n	8012fe0 <__mdiff+0x38>
 8012fbe:	4629      	mov	r1, r5
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	f7ff fd09 	bl	80129d8 <_Balloc>
 8012fc6:	b930      	cbnz	r0, 8012fd6 <__mdiff+0x2e>
 8012fc8:	4b3a      	ldr	r3, [pc, #232]	; (80130b4 <__mdiff+0x10c>)
 8012fca:	4602      	mov	r2, r0
 8012fcc:	f240 2132 	movw	r1, #562	; 0x232
 8012fd0:	4839      	ldr	r0, [pc, #228]	; (80130b8 <__mdiff+0x110>)
 8012fd2:	f7fc f86b 	bl	800f0ac <__assert_func>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe0:	bfa4      	itt	ge
 8012fe2:	4643      	movge	r3, r8
 8012fe4:	46a0      	movge	r8, r4
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012fec:	bfa6      	itte	ge
 8012fee:	461c      	movge	r4, r3
 8012ff0:	2500      	movge	r5, #0
 8012ff2:	2501      	movlt	r5, #1
 8012ff4:	f7ff fcf0 	bl	80129d8 <_Balloc>
 8012ff8:	b920      	cbnz	r0, 8013004 <__mdiff+0x5c>
 8012ffa:	4b2e      	ldr	r3, [pc, #184]	; (80130b4 <__mdiff+0x10c>)
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013002:	e7e5      	b.n	8012fd0 <__mdiff+0x28>
 8013004:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013008:	6926      	ldr	r6, [r4, #16]
 801300a:	60c5      	str	r5, [r0, #12]
 801300c:	f104 0914 	add.w	r9, r4, #20
 8013010:	f108 0514 	add.w	r5, r8, #20
 8013014:	f100 0e14 	add.w	lr, r0, #20
 8013018:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801301c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013020:	f108 0210 	add.w	r2, r8, #16
 8013024:	46f2      	mov	sl, lr
 8013026:	2100      	movs	r1, #0
 8013028:	f859 3b04 	ldr.w	r3, [r9], #4
 801302c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013030:	fa1f f883 	uxth.w	r8, r3
 8013034:	fa11 f18b 	uxtah	r1, r1, fp
 8013038:	0c1b      	lsrs	r3, r3, #16
 801303a:	eba1 0808 	sub.w	r8, r1, r8
 801303e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013046:	fa1f f888 	uxth.w	r8, r8
 801304a:	1419      	asrs	r1, r3, #16
 801304c:	454e      	cmp	r6, r9
 801304e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013052:	f84a 3b04 	str.w	r3, [sl], #4
 8013056:	d8e7      	bhi.n	8013028 <__mdiff+0x80>
 8013058:	1b33      	subs	r3, r6, r4
 801305a:	3b15      	subs	r3, #21
 801305c:	f023 0303 	bic.w	r3, r3, #3
 8013060:	3304      	adds	r3, #4
 8013062:	3415      	adds	r4, #21
 8013064:	42a6      	cmp	r6, r4
 8013066:	bf38      	it	cc
 8013068:	2304      	movcc	r3, #4
 801306a:	441d      	add	r5, r3
 801306c:	4473      	add	r3, lr
 801306e:	469e      	mov	lr, r3
 8013070:	462e      	mov	r6, r5
 8013072:	4566      	cmp	r6, ip
 8013074:	d30e      	bcc.n	8013094 <__mdiff+0xec>
 8013076:	f10c 0203 	add.w	r2, ip, #3
 801307a:	1b52      	subs	r2, r2, r5
 801307c:	f022 0203 	bic.w	r2, r2, #3
 8013080:	3d03      	subs	r5, #3
 8013082:	45ac      	cmp	ip, r5
 8013084:	bf38      	it	cc
 8013086:	2200      	movcc	r2, #0
 8013088:	441a      	add	r2, r3
 801308a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801308e:	b17b      	cbz	r3, 80130b0 <__mdiff+0x108>
 8013090:	6107      	str	r7, [r0, #16]
 8013092:	e7a3      	b.n	8012fdc <__mdiff+0x34>
 8013094:	f856 8b04 	ldr.w	r8, [r6], #4
 8013098:	fa11 f288 	uxtah	r2, r1, r8
 801309c:	1414      	asrs	r4, r2, #16
 801309e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80130a2:	b292      	uxth	r2, r2
 80130a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80130a8:	f84e 2b04 	str.w	r2, [lr], #4
 80130ac:	1421      	asrs	r1, r4, #16
 80130ae:	e7e0      	b.n	8013072 <__mdiff+0xca>
 80130b0:	3f01      	subs	r7, #1
 80130b2:	e7ea      	b.n	801308a <__mdiff+0xe2>
 80130b4:	0802a8a3 	.word	0x0802a8a3
 80130b8:	0802a9b0 	.word	0x0802a9b0

080130bc <__ulp>:
 80130bc:	b082      	sub	sp, #8
 80130be:	ed8d 0b00 	vstr	d0, [sp]
 80130c2:	9b01      	ldr	r3, [sp, #4]
 80130c4:	4912      	ldr	r1, [pc, #72]	; (8013110 <__ulp+0x54>)
 80130c6:	4019      	ands	r1, r3
 80130c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80130cc:	2900      	cmp	r1, #0
 80130ce:	dd05      	ble.n	80130dc <__ulp+0x20>
 80130d0:	2200      	movs	r2, #0
 80130d2:	460b      	mov	r3, r1
 80130d4:	ec43 2b10 	vmov	d0, r2, r3
 80130d8:	b002      	add	sp, #8
 80130da:	4770      	bx	lr
 80130dc:	4249      	negs	r1, r1
 80130de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80130e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80130e6:	f04f 0200 	mov.w	r2, #0
 80130ea:	f04f 0300 	mov.w	r3, #0
 80130ee:	da04      	bge.n	80130fa <__ulp+0x3e>
 80130f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80130f4:	fa41 f300 	asr.w	r3, r1, r0
 80130f8:	e7ec      	b.n	80130d4 <__ulp+0x18>
 80130fa:	f1a0 0114 	sub.w	r1, r0, #20
 80130fe:	291e      	cmp	r1, #30
 8013100:	bfda      	itte	le
 8013102:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013106:	fa20 f101 	lsrle.w	r1, r0, r1
 801310a:	2101      	movgt	r1, #1
 801310c:	460a      	mov	r2, r1
 801310e:	e7e1      	b.n	80130d4 <__ulp+0x18>
 8013110:	7ff00000 	.word	0x7ff00000

08013114 <__b2d>:
 8013114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013116:	6905      	ldr	r5, [r0, #16]
 8013118:	f100 0714 	add.w	r7, r0, #20
 801311c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013120:	1f2e      	subs	r6, r5, #4
 8013122:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013126:	4620      	mov	r0, r4
 8013128:	f7ff fd48 	bl	8012bbc <__hi0bits>
 801312c:	f1c0 0320 	rsb	r3, r0, #32
 8013130:	280a      	cmp	r0, #10
 8013132:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80131b0 <__b2d+0x9c>
 8013136:	600b      	str	r3, [r1, #0]
 8013138:	dc14      	bgt.n	8013164 <__b2d+0x50>
 801313a:	f1c0 0e0b 	rsb	lr, r0, #11
 801313e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013142:	42b7      	cmp	r7, r6
 8013144:	ea41 030c 	orr.w	r3, r1, ip
 8013148:	bf34      	ite	cc
 801314a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801314e:	2100      	movcs	r1, #0
 8013150:	3015      	adds	r0, #21
 8013152:	fa04 f000 	lsl.w	r0, r4, r0
 8013156:	fa21 f10e 	lsr.w	r1, r1, lr
 801315a:	ea40 0201 	orr.w	r2, r0, r1
 801315e:	ec43 2b10 	vmov	d0, r2, r3
 8013162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013164:	42b7      	cmp	r7, r6
 8013166:	bf3a      	itte	cc
 8013168:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801316c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013170:	2100      	movcs	r1, #0
 8013172:	380b      	subs	r0, #11
 8013174:	d017      	beq.n	80131a6 <__b2d+0x92>
 8013176:	f1c0 0c20 	rsb	ip, r0, #32
 801317a:	fa04 f500 	lsl.w	r5, r4, r0
 801317e:	42be      	cmp	r6, r7
 8013180:	fa21 f40c 	lsr.w	r4, r1, ip
 8013184:	ea45 0504 	orr.w	r5, r5, r4
 8013188:	bf8c      	ite	hi
 801318a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801318e:	2400      	movls	r4, #0
 8013190:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013194:	fa01 f000 	lsl.w	r0, r1, r0
 8013198:	fa24 f40c 	lsr.w	r4, r4, ip
 801319c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80131a0:	ea40 0204 	orr.w	r2, r0, r4
 80131a4:	e7db      	b.n	801315e <__b2d+0x4a>
 80131a6:	ea44 030c 	orr.w	r3, r4, ip
 80131aa:	460a      	mov	r2, r1
 80131ac:	e7d7      	b.n	801315e <__b2d+0x4a>
 80131ae:	bf00      	nop
 80131b0:	3ff00000 	.word	0x3ff00000

080131b4 <__d2b>:
 80131b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131b8:	4689      	mov	r9, r1
 80131ba:	2101      	movs	r1, #1
 80131bc:	ec57 6b10 	vmov	r6, r7, d0
 80131c0:	4690      	mov	r8, r2
 80131c2:	f7ff fc09 	bl	80129d8 <_Balloc>
 80131c6:	4604      	mov	r4, r0
 80131c8:	b930      	cbnz	r0, 80131d8 <__d2b+0x24>
 80131ca:	4602      	mov	r2, r0
 80131cc:	4b25      	ldr	r3, [pc, #148]	; (8013264 <__d2b+0xb0>)
 80131ce:	4826      	ldr	r0, [pc, #152]	; (8013268 <__d2b+0xb4>)
 80131d0:	f240 310a 	movw	r1, #778	; 0x30a
 80131d4:	f7fb ff6a 	bl	800f0ac <__assert_func>
 80131d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80131dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80131e0:	bb35      	cbnz	r5, 8013230 <__d2b+0x7c>
 80131e2:	2e00      	cmp	r6, #0
 80131e4:	9301      	str	r3, [sp, #4]
 80131e6:	d028      	beq.n	801323a <__d2b+0x86>
 80131e8:	4668      	mov	r0, sp
 80131ea:	9600      	str	r6, [sp, #0]
 80131ec:	f7ff fd06 	bl	8012bfc <__lo0bits>
 80131f0:	9900      	ldr	r1, [sp, #0]
 80131f2:	b300      	cbz	r0, 8013236 <__d2b+0x82>
 80131f4:	9a01      	ldr	r2, [sp, #4]
 80131f6:	f1c0 0320 	rsb	r3, r0, #32
 80131fa:	fa02 f303 	lsl.w	r3, r2, r3
 80131fe:	430b      	orrs	r3, r1
 8013200:	40c2      	lsrs	r2, r0
 8013202:	6163      	str	r3, [r4, #20]
 8013204:	9201      	str	r2, [sp, #4]
 8013206:	9b01      	ldr	r3, [sp, #4]
 8013208:	61a3      	str	r3, [r4, #24]
 801320a:	2b00      	cmp	r3, #0
 801320c:	bf14      	ite	ne
 801320e:	2202      	movne	r2, #2
 8013210:	2201      	moveq	r2, #1
 8013212:	6122      	str	r2, [r4, #16]
 8013214:	b1d5      	cbz	r5, 801324c <__d2b+0x98>
 8013216:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801321a:	4405      	add	r5, r0
 801321c:	f8c9 5000 	str.w	r5, [r9]
 8013220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013224:	f8c8 0000 	str.w	r0, [r8]
 8013228:	4620      	mov	r0, r4
 801322a:	b003      	add	sp, #12
 801322c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013234:	e7d5      	b.n	80131e2 <__d2b+0x2e>
 8013236:	6161      	str	r1, [r4, #20]
 8013238:	e7e5      	b.n	8013206 <__d2b+0x52>
 801323a:	a801      	add	r0, sp, #4
 801323c:	f7ff fcde 	bl	8012bfc <__lo0bits>
 8013240:	9b01      	ldr	r3, [sp, #4]
 8013242:	6163      	str	r3, [r4, #20]
 8013244:	2201      	movs	r2, #1
 8013246:	6122      	str	r2, [r4, #16]
 8013248:	3020      	adds	r0, #32
 801324a:	e7e3      	b.n	8013214 <__d2b+0x60>
 801324c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013254:	f8c9 0000 	str.w	r0, [r9]
 8013258:	6918      	ldr	r0, [r3, #16]
 801325a:	f7ff fcaf 	bl	8012bbc <__hi0bits>
 801325e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013262:	e7df      	b.n	8013224 <__d2b+0x70>
 8013264:	0802a8a3 	.word	0x0802a8a3
 8013268:	0802a9b0 	.word	0x0802a9b0

0801326c <__ratio>:
 801326c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013270:	4688      	mov	r8, r1
 8013272:	4669      	mov	r1, sp
 8013274:	4681      	mov	r9, r0
 8013276:	f7ff ff4d 	bl	8013114 <__b2d>
 801327a:	a901      	add	r1, sp, #4
 801327c:	4640      	mov	r0, r8
 801327e:	ec55 4b10 	vmov	r4, r5, d0
 8013282:	f7ff ff47 	bl	8013114 <__b2d>
 8013286:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801328a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801328e:	eba3 0c02 	sub.w	ip, r3, r2
 8013292:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013296:	1a9b      	subs	r3, r3, r2
 8013298:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801329c:	ec51 0b10 	vmov	r0, r1, d0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	bfd6      	itet	le
 80132a4:	460a      	movle	r2, r1
 80132a6:	462a      	movgt	r2, r5
 80132a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80132ac:	468b      	mov	fp, r1
 80132ae:	462f      	mov	r7, r5
 80132b0:	bfd4      	ite	le
 80132b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80132b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80132ba:	4620      	mov	r0, r4
 80132bc:	ee10 2a10 	vmov	r2, s0
 80132c0:	465b      	mov	r3, fp
 80132c2:	4639      	mov	r1, r7
 80132c4:	f7ed faea 	bl	800089c <__aeabi_ddiv>
 80132c8:	ec41 0b10 	vmov	d0, r0, r1
 80132cc:	b003      	add	sp, #12
 80132ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132d2 <__copybits>:
 80132d2:	3901      	subs	r1, #1
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	1149      	asrs	r1, r1, #5
 80132d8:	6914      	ldr	r4, [r2, #16]
 80132da:	3101      	adds	r1, #1
 80132dc:	f102 0314 	add.w	r3, r2, #20
 80132e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80132e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80132e8:	1f05      	subs	r5, r0, #4
 80132ea:	42a3      	cmp	r3, r4
 80132ec:	d30c      	bcc.n	8013308 <__copybits+0x36>
 80132ee:	1aa3      	subs	r3, r4, r2
 80132f0:	3b11      	subs	r3, #17
 80132f2:	f023 0303 	bic.w	r3, r3, #3
 80132f6:	3211      	adds	r2, #17
 80132f8:	42a2      	cmp	r2, r4
 80132fa:	bf88      	it	hi
 80132fc:	2300      	movhi	r3, #0
 80132fe:	4418      	add	r0, r3
 8013300:	2300      	movs	r3, #0
 8013302:	4288      	cmp	r0, r1
 8013304:	d305      	bcc.n	8013312 <__copybits+0x40>
 8013306:	bd70      	pop	{r4, r5, r6, pc}
 8013308:	f853 6b04 	ldr.w	r6, [r3], #4
 801330c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013310:	e7eb      	b.n	80132ea <__copybits+0x18>
 8013312:	f840 3b04 	str.w	r3, [r0], #4
 8013316:	e7f4      	b.n	8013302 <__copybits+0x30>

08013318 <__any_on>:
 8013318:	f100 0214 	add.w	r2, r0, #20
 801331c:	6900      	ldr	r0, [r0, #16]
 801331e:	114b      	asrs	r3, r1, #5
 8013320:	4298      	cmp	r0, r3
 8013322:	b510      	push	{r4, lr}
 8013324:	db11      	blt.n	801334a <__any_on+0x32>
 8013326:	dd0a      	ble.n	801333e <__any_on+0x26>
 8013328:	f011 011f 	ands.w	r1, r1, #31
 801332c:	d007      	beq.n	801333e <__any_on+0x26>
 801332e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013332:	fa24 f001 	lsr.w	r0, r4, r1
 8013336:	fa00 f101 	lsl.w	r1, r0, r1
 801333a:	428c      	cmp	r4, r1
 801333c:	d10b      	bne.n	8013356 <__any_on+0x3e>
 801333e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013342:	4293      	cmp	r3, r2
 8013344:	d803      	bhi.n	801334e <__any_on+0x36>
 8013346:	2000      	movs	r0, #0
 8013348:	bd10      	pop	{r4, pc}
 801334a:	4603      	mov	r3, r0
 801334c:	e7f7      	b.n	801333e <__any_on+0x26>
 801334e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013352:	2900      	cmp	r1, #0
 8013354:	d0f5      	beq.n	8013342 <__any_on+0x2a>
 8013356:	2001      	movs	r0, #1
 8013358:	e7f6      	b.n	8013348 <__any_on+0x30>

0801335a <_calloc_r>:
 801335a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801335c:	fba1 2402 	umull	r2, r4, r1, r2
 8013360:	b94c      	cbnz	r4, 8013376 <_calloc_r+0x1c>
 8013362:	4611      	mov	r1, r2
 8013364:	9201      	str	r2, [sp, #4]
 8013366:	f000 f87b 	bl	8013460 <_malloc_r>
 801336a:	9a01      	ldr	r2, [sp, #4]
 801336c:	4605      	mov	r5, r0
 801336e:	b930      	cbnz	r0, 801337e <_calloc_r+0x24>
 8013370:	4628      	mov	r0, r5
 8013372:	b003      	add	sp, #12
 8013374:	bd30      	pop	{r4, r5, pc}
 8013376:	220c      	movs	r2, #12
 8013378:	6002      	str	r2, [r0, #0]
 801337a:	2500      	movs	r5, #0
 801337c:	e7f8      	b.n	8013370 <_calloc_r+0x16>
 801337e:	4621      	mov	r1, r4
 8013380:	f7fb fefc 	bl	800f17c <memset>
 8013384:	e7f4      	b.n	8013370 <_calloc_r+0x16>
	...

08013388 <_free_r>:
 8013388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801338a:	2900      	cmp	r1, #0
 801338c:	d044      	beq.n	8013418 <_free_r+0x90>
 801338e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013392:	9001      	str	r0, [sp, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	f1a1 0404 	sub.w	r4, r1, #4
 801339a:	bfb8      	it	lt
 801339c:	18e4      	addlt	r4, r4, r3
 801339e:	f000 fb75 	bl	8013a8c <__malloc_lock>
 80133a2:	4a1e      	ldr	r2, [pc, #120]	; (801341c <_free_r+0x94>)
 80133a4:	9801      	ldr	r0, [sp, #4]
 80133a6:	6813      	ldr	r3, [r2, #0]
 80133a8:	b933      	cbnz	r3, 80133b8 <_free_r+0x30>
 80133aa:	6063      	str	r3, [r4, #4]
 80133ac:	6014      	str	r4, [r2, #0]
 80133ae:	b003      	add	sp, #12
 80133b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133b4:	f000 bb70 	b.w	8013a98 <__malloc_unlock>
 80133b8:	42a3      	cmp	r3, r4
 80133ba:	d908      	bls.n	80133ce <_free_r+0x46>
 80133bc:	6825      	ldr	r5, [r4, #0]
 80133be:	1961      	adds	r1, r4, r5
 80133c0:	428b      	cmp	r3, r1
 80133c2:	bf01      	itttt	eq
 80133c4:	6819      	ldreq	r1, [r3, #0]
 80133c6:	685b      	ldreq	r3, [r3, #4]
 80133c8:	1949      	addeq	r1, r1, r5
 80133ca:	6021      	streq	r1, [r4, #0]
 80133cc:	e7ed      	b.n	80133aa <_free_r+0x22>
 80133ce:	461a      	mov	r2, r3
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	b10b      	cbz	r3, 80133d8 <_free_r+0x50>
 80133d4:	42a3      	cmp	r3, r4
 80133d6:	d9fa      	bls.n	80133ce <_free_r+0x46>
 80133d8:	6811      	ldr	r1, [r2, #0]
 80133da:	1855      	adds	r5, r2, r1
 80133dc:	42a5      	cmp	r5, r4
 80133de:	d10b      	bne.n	80133f8 <_free_r+0x70>
 80133e0:	6824      	ldr	r4, [r4, #0]
 80133e2:	4421      	add	r1, r4
 80133e4:	1854      	adds	r4, r2, r1
 80133e6:	42a3      	cmp	r3, r4
 80133e8:	6011      	str	r1, [r2, #0]
 80133ea:	d1e0      	bne.n	80133ae <_free_r+0x26>
 80133ec:	681c      	ldr	r4, [r3, #0]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	6053      	str	r3, [r2, #4]
 80133f2:	4421      	add	r1, r4
 80133f4:	6011      	str	r1, [r2, #0]
 80133f6:	e7da      	b.n	80133ae <_free_r+0x26>
 80133f8:	d902      	bls.n	8013400 <_free_r+0x78>
 80133fa:	230c      	movs	r3, #12
 80133fc:	6003      	str	r3, [r0, #0]
 80133fe:	e7d6      	b.n	80133ae <_free_r+0x26>
 8013400:	6825      	ldr	r5, [r4, #0]
 8013402:	1961      	adds	r1, r4, r5
 8013404:	428b      	cmp	r3, r1
 8013406:	bf04      	itt	eq
 8013408:	6819      	ldreq	r1, [r3, #0]
 801340a:	685b      	ldreq	r3, [r3, #4]
 801340c:	6063      	str	r3, [r4, #4]
 801340e:	bf04      	itt	eq
 8013410:	1949      	addeq	r1, r1, r5
 8013412:	6021      	streq	r1, [r4, #0]
 8013414:	6054      	str	r4, [r2, #4]
 8013416:	e7ca      	b.n	80133ae <_free_r+0x26>
 8013418:	b003      	add	sp, #12
 801341a:	bd30      	pop	{r4, r5, pc}
 801341c:	20013380 	.word	0x20013380

08013420 <sbrk_aligned>:
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	4e0e      	ldr	r6, [pc, #56]	; (801345c <sbrk_aligned+0x3c>)
 8013424:	460c      	mov	r4, r1
 8013426:	6831      	ldr	r1, [r6, #0]
 8013428:	4605      	mov	r5, r0
 801342a:	b911      	cbnz	r1, 8013432 <sbrk_aligned+0x12>
 801342c:	f000 fa20 	bl	8013870 <_sbrk_r>
 8013430:	6030      	str	r0, [r6, #0]
 8013432:	4621      	mov	r1, r4
 8013434:	4628      	mov	r0, r5
 8013436:	f000 fa1b 	bl	8013870 <_sbrk_r>
 801343a:	1c43      	adds	r3, r0, #1
 801343c:	d00a      	beq.n	8013454 <sbrk_aligned+0x34>
 801343e:	1cc4      	adds	r4, r0, #3
 8013440:	f024 0403 	bic.w	r4, r4, #3
 8013444:	42a0      	cmp	r0, r4
 8013446:	d007      	beq.n	8013458 <sbrk_aligned+0x38>
 8013448:	1a21      	subs	r1, r4, r0
 801344a:	4628      	mov	r0, r5
 801344c:	f000 fa10 	bl	8013870 <_sbrk_r>
 8013450:	3001      	adds	r0, #1
 8013452:	d101      	bne.n	8013458 <sbrk_aligned+0x38>
 8013454:	f04f 34ff 	mov.w	r4, #4294967295
 8013458:	4620      	mov	r0, r4
 801345a:	bd70      	pop	{r4, r5, r6, pc}
 801345c:	20013384 	.word	0x20013384

08013460 <_malloc_r>:
 8013460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013464:	1ccd      	adds	r5, r1, #3
 8013466:	f025 0503 	bic.w	r5, r5, #3
 801346a:	3508      	adds	r5, #8
 801346c:	2d0c      	cmp	r5, #12
 801346e:	bf38      	it	cc
 8013470:	250c      	movcc	r5, #12
 8013472:	2d00      	cmp	r5, #0
 8013474:	4607      	mov	r7, r0
 8013476:	db01      	blt.n	801347c <_malloc_r+0x1c>
 8013478:	42a9      	cmp	r1, r5
 801347a:	d905      	bls.n	8013488 <_malloc_r+0x28>
 801347c:	230c      	movs	r3, #12
 801347e:	603b      	str	r3, [r7, #0]
 8013480:	2600      	movs	r6, #0
 8013482:	4630      	mov	r0, r6
 8013484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013488:	4e2e      	ldr	r6, [pc, #184]	; (8013544 <_malloc_r+0xe4>)
 801348a:	f000 faff 	bl	8013a8c <__malloc_lock>
 801348e:	6833      	ldr	r3, [r6, #0]
 8013490:	461c      	mov	r4, r3
 8013492:	bb34      	cbnz	r4, 80134e2 <_malloc_r+0x82>
 8013494:	4629      	mov	r1, r5
 8013496:	4638      	mov	r0, r7
 8013498:	f7ff ffc2 	bl	8013420 <sbrk_aligned>
 801349c:	1c43      	adds	r3, r0, #1
 801349e:	4604      	mov	r4, r0
 80134a0:	d14d      	bne.n	801353e <_malloc_r+0xde>
 80134a2:	6834      	ldr	r4, [r6, #0]
 80134a4:	4626      	mov	r6, r4
 80134a6:	2e00      	cmp	r6, #0
 80134a8:	d140      	bne.n	801352c <_malloc_r+0xcc>
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	4631      	mov	r1, r6
 80134ae:	4638      	mov	r0, r7
 80134b0:	eb04 0803 	add.w	r8, r4, r3
 80134b4:	f000 f9dc 	bl	8013870 <_sbrk_r>
 80134b8:	4580      	cmp	r8, r0
 80134ba:	d13a      	bne.n	8013532 <_malloc_r+0xd2>
 80134bc:	6821      	ldr	r1, [r4, #0]
 80134be:	3503      	adds	r5, #3
 80134c0:	1a6d      	subs	r5, r5, r1
 80134c2:	f025 0503 	bic.w	r5, r5, #3
 80134c6:	3508      	adds	r5, #8
 80134c8:	2d0c      	cmp	r5, #12
 80134ca:	bf38      	it	cc
 80134cc:	250c      	movcc	r5, #12
 80134ce:	4629      	mov	r1, r5
 80134d0:	4638      	mov	r0, r7
 80134d2:	f7ff ffa5 	bl	8013420 <sbrk_aligned>
 80134d6:	3001      	adds	r0, #1
 80134d8:	d02b      	beq.n	8013532 <_malloc_r+0xd2>
 80134da:	6823      	ldr	r3, [r4, #0]
 80134dc:	442b      	add	r3, r5
 80134de:	6023      	str	r3, [r4, #0]
 80134e0:	e00e      	b.n	8013500 <_malloc_r+0xa0>
 80134e2:	6822      	ldr	r2, [r4, #0]
 80134e4:	1b52      	subs	r2, r2, r5
 80134e6:	d41e      	bmi.n	8013526 <_malloc_r+0xc6>
 80134e8:	2a0b      	cmp	r2, #11
 80134ea:	d916      	bls.n	801351a <_malloc_r+0xba>
 80134ec:	1961      	adds	r1, r4, r5
 80134ee:	42a3      	cmp	r3, r4
 80134f0:	6025      	str	r5, [r4, #0]
 80134f2:	bf18      	it	ne
 80134f4:	6059      	strne	r1, [r3, #4]
 80134f6:	6863      	ldr	r3, [r4, #4]
 80134f8:	bf08      	it	eq
 80134fa:	6031      	streq	r1, [r6, #0]
 80134fc:	5162      	str	r2, [r4, r5]
 80134fe:	604b      	str	r3, [r1, #4]
 8013500:	4638      	mov	r0, r7
 8013502:	f104 060b 	add.w	r6, r4, #11
 8013506:	f000 fac7 	bl	8013a98 <__malloc_unlock>
 801350a:	f026 0607 	bic.w	r6, r6, #7
 801350e:	1d23      	adds	r3, r4, #4
 8013510:	1af2      	subs	r2, r6, r3
 8013512:	d0b6      	beq.n	8013482 <_malloc_r+0x22>
 8013514:	1b9b      	subs	r3, r3, r6
 8013516:	50a3      	str	r3, [r4, r2]
 8013518:	e7b3      	b.n	8013482 <_malloc_r+0x22>
 801351a:	6862      	ldr	r2, [r4, #4]
 801351c:	42a3      	cmp	r3, r4
 801351e:	bf0c      	ite	eq
 8013520:	6032      	streq	r2, [r6, #0]
 8013522:	605a      	strne	r2, [r3, #4]
 8013524:	e7ec      	b.n	8013500 <_malloc_r+0xa0>
 8013526:	4623      	mov	r3, r4
 8013528:	6864      	ldr	r4, [r4, #4]
 801352a:	e7b2      	b.n	8013492 <_malloc_r+0x32>
 801352c:	4634      	mov	r4, r6
 801352e:	6876      	ldr	r6, [r6, #4]
 8013530:	e7b9      	b.n	80134a6 <_malloc_r+0x46>
 8013532:	230c      	movs	r3, #12
 8013534:	603b      	str	r3, [r7, #0]
 8013536:	4638      	mov	r0, r7
 8013538:	f000 faae 	bl	8013a98 <__malloc_unlock>
 801353c:	e7a1      	b.n	8013482 <_malloc_r+0x22>
 801353e:	6025      	str	r5, [r4, #0]
 8013540:	e7de      	b.n	8013500 <_malloc_r+0xa0>
 8013542:	bf00      	nop
 8013544:	20013380 	.word	0x20013380

08013548 <_realloc_r>:
 8013548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801354c:	4680      	mov	r8, r0
 801354e:	4614      	mov	r4, r2
 8013550:	460e      	mov	r6, r1
 8013552:	b921      	cbnz	r1, 801355e <_realloc_r+0x16>
 8013554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013558:	4611      	mov	r1, r2
 801355a:	f7ff bf81 	b.w	8013460 <_malloc_r>
 801355e:	b92a      	cbnz	r2, 801356c <_realloc_r+0x24>
 8013560:	f7ff ff12 	bl	8013388 <_free_r>
 8013564:	4625      	mov	r5, r4
 8013566:	4628      	mov	r0, r5
 8013568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801356c:	f000 fa9a 	bl	8013aa4 <_malloc_usable_size_r>
 8013570:	4284      	cmp	r4, r0
 8013572:	4607      	mov	r7, r0
 8013574:	d802      	bhi.n	801357c <_realloc_r+0x34>
 8013576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801357a:	d812      	bhi.n	80135a2 <_realloc_r+0x5a>
 801357c:	4621      	mov	r1, r4
 801357e:	4640      	mov	r0, r8
 8013580:	f7ff ff6e 	bl	8013460 <_malloc_r>
 8013584:	4605      	mov	r5, r0
 8013586:	2800      	cmp	r0, #0
 8013588:	d0ed      	beq.n	8013566 <_realloc_r+0x1e>
 801358a:	42bc      	cmp	r4, r7
 801358c:	4622      	mov	r2, r4
 801358e:	4631      	mov	r1, r6
 8013590:	bf28      	it	cs
 8013592:	463a      	movcs	r2, r7
 8013594:	f7fb fde4 	bl	800f160 <memcpy>
 8013598:	4631      	mov	r1, r6
 801359a:	4640      	mov	r0, r8
 801359c:	f7ff fef4 	bl	8013388 <_free_r>
 80135a0:	e7e1      	b.n	8013566 <_realloc_r+0x1e>
 80135a2:	4635      	mov	r5, r6
 80135a4:	e7df      	b.n	8013566 <_realloc_r+0x1e>

080135a6 <__ssputs_r>:
 80135a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135aa:	688e      	ldr	r6, [r1, #8]
 80135ac:	429e      	cmp	r6, r3
 80135ae:	4682      	mov	sl, r0
 80135b0:	460c      	mov	r4, r1
 80135b2:	4690      	mov	r8, r2
 80135b4:	461f      	mov	r7, r3
 80135b6:	d838      	bhi.n	801362a <__ssputs_r+0x84>
 80135b8:	898a      	ldrh	r2, [r1, #12]
 80135ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135be:	d032      	beq.n	8013626 <__ssputs_r+0x80>
 80135c0:	6825      	ldr	r5, [r4, #0]
 80135c2:	6909      	ldr	r1, [r1, #16]
 80135c4:	eba5 0901 	sub.w	r9, r5, r1
 80135c8:	6965      	ldr	r5, [r4, #20]
 80135ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135d2:	3301      	adds	r3, #1
 80135d4:	444b      	add	r3, r9
 80135d6:	106d      	asrs	r5, r5, #1
 80135d8:	429d      	cmp	r5, r3
 80135da:	bf38      	it	cc
 80135dc:	461d      	movcc	r5, r3
 80135de:	0553      	lsls	r3, r2, #21
 80135e0:	d531      	bpl.n	8013646 <__ssputs_r+0xa0>
 80135e2:	4629      	mov	r1, r5
 80135e4:	f7ff ff3c 	bl	8013460 <_malloc_r>
 80135e8:	4606      	mov	r6, r0
 80135ea:	b950      	cbnz	r0, 8013602 <__ssputs_r+0x5c>
 80135ec:	230c      	movs	r3, #12
 80135ee:	f8ca 3000 	str.w	r3, [sl]
 80135f2:	89a3      	ldrh	r3, [r4, #12]
 80135f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135f8:	81a3      	strh	r3, [r4, #12]
 80135fa:	f04f 30ff 	mov.w	r0, #4294967295
 80135fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013602:	6921      	ldr	r1, [r4, #16]
 8013604:	464a      	mov	r2, r9
 8013606:	f7fb fdab 	bl	800f160 <memcpy>
 801360a:	89a3      	ldrh	r3, [r4, #12]
 801360c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013614:	81a3      	strh	r3, [r4, #12]
 8013616:	6126      	str	r6, [r4, #16]
 8013618:	6165      	str	r5, [r4, #20]
 801361a:	444e      	add	r6, r9
 801361c:	eba5 0509 	sub.w	r5, r5, r9
 8013620:	6026      	str	r6, [r4, #0]
 8013622:	60a5      	str	r5, [r4, #8]
 8013624:	463e      	mov	r6, r7
 8013626:	42be      	cmp	r6, r7
 8013628:	d900      	bls.n	801362c <__ssputs_r+0x86>
 801362a:	463e      	mov	r6, r7
 801362c:	6820      	ldr	r0, [r4, #0]
 801362e:	4632      	mov	r2, r6
 8013630:	4641      	mov	r1, r8
 8013632:	f7ff f9b7 	bl	80129a4 <memmove>
 8013636:	68a3      	ldr	r3, [r4, #8]
 8013638:	1b9b      	subs	r3, r3, r6
 801363a:	60a3      	str	r3, [r4, #8]
 801363c:	6823      	ldr	r3, [r4, #0]
 801363e:	4433      	add	r3, r6
 8013640:	6023      	str	r3, [r4, #0]
 8013642:	2000      	movs	r0, #0
 8013644:	e7db      	b.n	80135fe <__ssputs_r+0x58>
 8013646:	462a      	mov	r2, r5
 8013648:	f7ff ff7e 	bl	8013548 <_realloc_r>
 801364c:	4606      	mov	r6, r0
 801364e:	2800      	cmp	r0, #0
 8013650:	d1e1      	bne.n	8013616 <__ssputs_r+0x70>
 8013652:	6921      	ldr	r1, [r4, #16]
 8013654:	4650      	mov	r0, sl
 8013656:	f7ff fe97 	bl	8013388 <_free_r>
 801365a:	e7c7      	b.n	80135ec <__ssputs_r+0x46>

0801365c <_svfiprintf_r>:
 801365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013660:	4698      	mov	r8, r3
 8013662:	898b      	ldrh	r3, [r1, #12]
 8013664:	061b      	lsls	r3, r3, #24
 8013666:	b09d      	sub	sp, #116	; 0x74
 8013668:	4607      	mov	r7, r0
 801366a:	460d      	mov	r5, r1
 801366c:	4614      	mov	r4, r2
 801366e:	d50e      	bpl.n	801368e <_svfiprintf_r+0x32>
 8013670:	690b      	ldr	r3, [r1, #16]
 8013672:	b963      	cbnz	r3, 801368e <_svfiprintf_r+0x32>
 8013674:	2140      	movs	r1, #64	; 0x40
 8013676:	f7ff fef3 	bl	8013460 <_malloc_r>
 801367a:	6028      	str	r0, [r5, #0]
 801367c:	6128      	str	r0, [r5, #16]
 801367e:	b920      	cbnz	r0, 801368a <_svfiprintf_r+0x2e>
 8013680:	230c      	movs	r3, #12
 8013682:	603b      	str	r3, [r7, #0]
 8013684:	f04f 30ff 	mov.w	r0, #4294967295
 8013688:	e0d1      	b.n	801382e <_svfiprintf_r+0x1d2>
 801368a:	2340      	movs	r3, #64	; 0x40
 801368c:	616b      	str	r3, [r5, #20]
 801368e:	2300      	movs	r3, #0
 8013690:	9309      	str	r3, [sp, #36]	; 0x24
 8013692:	2320      	movs	r3, #32
 8013694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013698:	f8cd 800c 	str.w	r8, [sp, #12]
 801369c:	2330      	movs	r3, #48	; 0x30
 801369e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013848 <_svfiprintf_r+0x1ec>
 80136a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136a6:	f04f 0901 	mov.w	r9, #1
 80136aa:	4623      	mov	r3, r4
 80136ac:	469a      	mov	sl, r3
 80136ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136b2:	b10a      	cbz	r2, 80136b8 <_svfiprintf_r+0x5c>
 80136b4:	2a25      	cmp	r2, #37	; 0x25
 80136b6:	d1f9      	bne.n	80136ac <_svfiprintf_r+0x50>
 80136b8:	ebba 0b04 	subs.w	fp, sl, r4
 80136bc:	d00b      	beq.n	80136d6 <_svfiprintf_r+0x7a>
 80136be:	465b      	mov	r3, fp
 80136c0:	4622      	mov	r2, r4
 80136c2:	4629      	mov	r1, r5
 80136c4:	4638      	mov	r0, r7
 80136c6:	f7ff ff6e 	bl	80135a6 <__ssputs_r>
 80136ca:	3001      	adds	r0, #1
 80136cc:	f000 80aa 	beq.w	8013824 <_svfiprintf_r+0x1c8>
 80136d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136d2:	445a      	add	r2, fp
 80136d4:	9209      	str	r2, [sp, #36]	; 0x24
 80136d6:	f89a 3000 	ldrb.w	r3, [sl]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	f000 80a2 	beq.w	8013824 <_svfiprintf_r+0x1c8>
 80136e0:	2300      	movs	r3, #0
 80136e2:	f04f 32ff 	mov.w	r2, #4294967295
 80136e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136ea:	f10a 0a01 	add.w	sl, sl, #1
 80136ee:	9304      	str	r3, [sp, #16]
 80136f0:	9307      	str	r3, [sp, #28]
 80136f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136f6:	931a      	str	r3, [sp, #104]	; 0x68
 80136f8:	4654      	mov	r4, sl
 80136fa:	2205      	movs	r2, #5
 80136fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013700:	4851      	ldr	r0, [pc, #324]	; (8013848 <_svfiprintf_r+0x1ec>)
 8013702:	f7ec fd95 	bl	8000230 <memchr>
 8013706:	9a04      	ldr	r2, [sp, #16]
 8013708:	b9d8      	cbnz	r0, 8013742 <_svfiprintf_r+0xe6>
 801370a:	06d0      	lsls	r0, r2, #27
 801370c:	bf44      	itt	mi
 801370e:	2320      	movmi	r3, #32
 8013710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013714:	0711      	lsls	r1, r2, #28
 8013716:	bf44      	itt	mi
 8013718:	232b      	movmi	r3, #43	; 0x2b
 801371a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801371e:	f89a 3000 	ldrb.w	r3, [sl]
 8013722:	2b2a      	cmp	r3, #42	; 0x2a
 8013724:	d015      	beq.n	8013752 <_svfiprintf_r+0xf6>
 8013726:	9a07      	ldr	r2, [sp, #28]
 8013728:	4654      	mov	r4, sl
 801372a:	2000      	movs	r0, #0
 801372c:	f04f 0c0a 	mov.w	ip, #10
 8013730:	4621      	mov	r1, r4
 8013732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013736:	3b30      	subs	r3, #48	; 0x30
 8013738:	2b09      	cmp	r3, #9
 801373a:	d94e      	bls.n	80137da <_svfiprintf_r+0x17e>
 801373c:	b1b0      	cbz	r0, 801376c <_svfiprintf_r+0x110>
 801373e:	9207      	str	r2, [sp, #28]
 8013740:	e014      	b.n	801376c <_svfiprintf_r+0x110>
 8013742:	eba0 0308 	sub.w	r3, r0, r8
 8013746:	fa09 f303 	lsl.w	r3, r9, r3
 801374a:	4313      	orrs	r3, r2
 801374c:	9304      	str	r3, [sp, #16]
 801374e:	46a2      	mov	sl, r4
 8013750:	e7d2      	b.n	80136f8 <_svfiprintf_r+0x9c>
 8013752:	9b03      	ldr	r3, [sp, #12]
 8013754:	1d19      	adds	r1, r3, #4
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	9103      	str	r1, [sp, #12]
 801375a:	2b00      	cmp	r3, #0
 801375c:	bfbb      	ittet	lt
 801375e:	425b      	neglt	r3, r3
 8013760:	f042 0202 	orrlt.w	r2, r2, #2
 8013764:	9307      	strge	r3, [sp, #28]
 8013766:	9307      	strlt	r3, [sp, #28]
 8013768:	bfb8      	it	lt
 801376a:	9204      	strlt	r2, [sp, #16]
 801376c:	7823      	ldrb	r3, [r4, #0]
 801376e:	2b2e      	cmp	r3, #46	; 0x2e
 8013770:	d10c      	bne.n	801378c <_svfiprintf_r+0x130>
 8013772:	7863      	ldrb	r3, [r4, #1]
 8013774:	2b2a      	cmp	r3, #42	; 0x2a
 8013776:	d135      	bne.n	80137e4 <_svfiprintf_r+0x188>
 8013778:	9b03      	ldr	r3, [sp, #12]
 801377a:	1d1a      	adds	r2, r3, #4
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	9203      	str	r2, [sp, #12]
 8013780:	2b00      	cmp	r3, #0
 8013782:	bfb8      	it	lt
 8013784:	f04f 33ff 	movlt.w	r3, #4294967295
 8013788:	3402      	adds	r4, #2
 801378a:	9305      	str	r3, [sp, #20]
 801378c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013858 <_svfiprintf_r+0x1fc>
 8013790:	7821      	ldrb	r1, [r4, #0]
 8013792:	2203      	movs	r2, #3
 8013794:	4650      	mov	r0, sl
 8013796:	f7ec fd4b 	bl	8000230 <memchr>
 801379a:	b140      	cbz	r0, 80137ae <_svfiprintf_r+0x152>
 801379c:	2340      	movs	r3, #64	; 0x40
 801379e:	eba0 000a 	sub.w	r0, r0, sl
 80137a2:	fa03 f000 	lsl.w	r0, r3, r0
 80137a6:	9b04      	ldr	r3, [sp, #16]
 80137a8:	4303      	orrs	r3, r0
 80137aa:	3401      	adds	r4, #1
 80137ac:	9304      	str	r3, [sp, #16]
 80137ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137b2:	4826      	ldr	r0, [pc, #152]	; (801384c <_svfiprintf_r+0x1f0>)
 80137b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137b8:	2206      	movs	r2, #6
 80137ba:	f7ec fd39 	bl	8000230 <memchr>
 80137be:	2800      	cmp	r0, #0
 80137c0:	d038      	beq.n	8013834 <_svfiprintf_r+0x1d8>
 80137c2:	4b23      	ldr	r3, [pc, #140]	; (8013850 <_svfiprintf_r+0x1f4>)
 80137c4:	bb1b      	cbnz	r3, 801380e <_svfiprintf_r+0x1b2>
 80137c6:	9b03      	ldr	r3, [sp, #12]
 80137c8:	3307      	adds	r3, #7
 80137ca:	f023 0307 	bic.w	r3, r3, #7
 80137ce:	3308      	adds	r3, #8
 80137d0:	9303      	str	r3, [sp, #12]
 80137d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d4:	4433      	add	r3, r6
 80137d6:	9309      	str	r3, [sp, #36]	; 0x24
 80137d8:	e767      	b.n	80136aa <_svfiprintf_r+0x4e>
 80137da:	fb0c 3202 	mla	r2, ip, r2, r3
 80137de:	460c      	mov	r4, r1
 80137e0:	2001      	movs	r0, #1
 80137e2:	e7a5      	b.n	8013730 <_svfiprintf_r+0xd4>
 80137e4:	2300      	movs	r3, #0
 80137e6:	3401      	adds	r4, #1
 80137e8:	9305      	str	r3, [sp, #20]
 80137ea:	4619      	mov	r1, r3
 80137ec:	f04f 0c0a 	mov.w	ip, #10
 80137f0:	4620      	mov	r0, r4
 80137f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137f6:	3a30      	subs	r2, #48	; 0x30
 80137f8:	2a09      	cmp	r2, #9
 80137fa:	d903      	bls.n	8013804 <_svfiprintf_r+0x1a8>
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d0c5      	beq.n	801378c <_svfiprintf_r+0x130>
 8013800:	9105      	str	r1, [sp, #20]
 8013802:	e7c3      	b.n	801378c <_svfiprintf_r+0x130>
 8013804:	fb0c 2101 	mla	r1, ip, r1, r2
 8013808:	4604      	mov	r4, r0
 801380a:	2301      	movs	r3, #1
 801380c:	e7f0      	b.n	80137f0 <_svfiprintf_r+0x194>
 801380e:	ab03      	add	r3, sp, #12
 8013810:	9300      	str	r3, [sp, #0]
 8013812:	462a      	mov	r2, r5
 8013814:	4b0f      	ldr	r3, [pc, #60]	; (8013854 <_svfiprintf_r+0x1f8>)
 8013816:	a904      	add	r1, sp, #16
 8013818:	4638      	mov	r0, r7
 801381a:	f7fb feb1 	bl	800f580 <_printf_float>
 801381e:	1c42      	adds	r2, r0, #1
 8013820:	4606      	mov	r6, r0
 8013822:	d1d6      	bne.n	80137d2 <_svfiprintf_r+0x176>
 8013824:	89ab      	ldrh	r3, [r5, #12]
 8013826:	065b      	lsls	r3, r3, #25
 8013828:	f53f af2c 	bmi.w	8013684 <_svfiprintf_r+0x28>
 801382c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801382e:	b01d      	add	sp, #116	; 0x74
 8013830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013834:	ab03      	add	r3, sp, #12
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	462a      	mov	r2, r5
 801383a:	4b06      	ldr	r3, [pc, #24]	; (8013854 <_svfiprintf_r+0x1f8>)
 801383c:	a904      	add	r1, sp, #16
 801383e:	4638      	mov	r0, r7
 8013840:	f7fc f942 	bl	800fac8 <_printf_i>
 8013844:	e7eb      	b.n	801381e <_svfiprintf_r+0x1c2>
 8013846:	bf00      	nop
 8013848:	0802a664 	.word	0x0802a664
 801384c:	0802a66e 	.word	0x0802a66e
 8013850:	0800f581 	.word	0x0800f581
 8013854:	080135a7 	.word	0x080135a7
 8013858:	0802a66a 	.word	0x0802a66a
 801385c:	00000000 	.word	0x00000000

08013860 <nan>:
 8013860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013868 <nan+0x8>
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	00000000 	.word	0x00000000
 801386c:	7ff80000 	.word	0x7ff80000

08013870 <_sbrk_r>:
 8013870:	b538      	push	{r3, r4, r5, lr}
 8013872:	4d06      	ldr	r5, [pc, #24]	; (801388c <_sbrk_r+0x1c>)
 8013874:	2300      	movs	r3, #0
 8013876:	4604      	mov	r4, r0
 8013878:	4608      	mov	r0, r1
 801387a:	602b      	str	r3, [r5, #0]
 801387c:	f7f0 fa04 	bl	8003c88 <_sbrk>
 8013880:	1c43      	adds	r3, r0, #1
 8013882:	d102      	bne.n	801388a <_sbrk_r+0x1a>
 8013884:	682b      	ldr	r3, [r5, #0]
 8013886:	b103      	cbz	r3, 801388a <_sbrk_r+0x1a>
 8013888:	6023      	str	r3, [r4, #0]
 801388a:	bd38      	pop	{r3, r4, r5, pc}
 801388c:	20013388 	.word	0x20013388

08013890 <_raise_r>:
 8013890:	291f      	cmp	r1, #31
 8013892:	b538      	push	{r3, r4, r5, lr}
 8013894:	4604      	mov	r4, r0
 8013896:	460d      	mov	r5, r1
 8013898:	d904      	bls.n	80138a4 <_raise_r+0x14>
 801389a:	2316      	movs	r3, #22
 801389c:	6003      	str	r3, [r0, #0]
 801389e:	f04f 30ff 	mov.w	r0, #4294967295
 80138a2:	bd38      	pop	{r3, r4, r5, pc}
 80138a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80138a6:	b112      	cbz	r2, 80138ae <_raise_r+0x1e>
 80138a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138ac:	b94b      	cbnz	r3, 80138c2 <_raise_r+0x32>
 80138ae:	4620      	mov	r0, r4
 80138b0:	f000 f830 	bl	8013914 <_getpid_r>
 80138b4:	462a      	mov	r2, r5
 80138b6:	4601      	mov	r1, r0
 80138b8:	4620      	mov	r0, r4
 80138ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138be:	f000 b817 	b.w	80138f0 <_kill_r>
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d00a      	beq.n	80138dc <_raise_r+0x4c>
 80138c6:	1c59      	adds	r1, r3, #1
 80138c8:	d103      	bne.n	80138d2 <_raise_r+0x42>
 80138ca:	2316      	movs	r3, #22
 80138cc:	6003      	str	r3, [r0, #0]
 80138ce:	2001      	movs	r0, #1
 80138d0:	e7e7      	b.n	80138a2 <_raise_r+0x12>
 80138d2:	2400      	movs	r4, #0
 80138d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138d8:	4628      	mov	r0, r5
 80138da:	4798      	blx	r3
 80138dc:	2000      	movs	r0, #0
 80138de:	e7e0      	b.n	80138a2 <_raise_r+0x12>

080138e0 <raise>:
 80138e0:	4b02      	ldr	r3, [pc, #8]	; (80138ec <raise+0xc>)
 80138e2:	4601      	mov	r1, r0
 80138e4:	6818      	ldr	r0, [r3, #0]
 80138e6:	f7ff bfd3 	b.w	8013890 <_raise_r>
 80138ea:	bf00      	nop
 80138ec:	200000dc 	.word	0x200000dc

080138f0 <_kill_r>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	4d07      	ldr	r5, [pc, #28]	; (8013910 <_kill_r+0x20>)
 80138f4:	2300      	movs	r3, #0
 80138f6:	4604      	mov	r4, r0
 80138f8:	4608      	mov	r0, r1
 80138fa:	4611      	mov	r1, r2
 80138fc:	602b      	str	r3, [r5, #0]
 80138fe:	f7f0 f957 	bl	8003bb0 <_kill>
 8013902:	1c43      	adds	r3, r0, #1
 8013904:	d102      	bne.n	801390c <_kill_r+0x1c>
 8013906:	682b      	ldr	r3, [r5, #0]
 8013908:	b103      	cbz	r3, 801390c <_kill_r+0x1c>
 801390a:	6023      	str	r3, [r4, #0]
 801390c:	bd38      	pop	{r3, r4, r5, pc}
 801390e:	bf00      	nop
 8013910:	20013388 	.word	0x20013388

08013914 <_getpid_r>:
 8013914:	f7f0 b944 	b.w	8003ba0 <_getpid>

08013918 <__sread>:
 8013918:	b510      	push	{r4, lr}
 801391a:	460c      	mov	r4, r1
 801391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013920:	f000 f8c8 	bl	8013ab4 <_read_r>
 8013924:	2800      	cmp	r0, #0
 8013926:	bfab      	itete	ge
 8013928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801392a:	89a3      	ldrhlt	r3, [r4, #12]
 801392c:	181b      	addge	r3, r3, r0
 801392e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013932:	bfac      	ite	ge
 8013934:	6563      	strge	r3, [r4, #84]	; 0x54
 8013936:	81a3      	strhlt	r3, [r4, #12]
 8013938:	bd10      	pop	{r4, pc}

0801393a <__swrite>:
 801393a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801393e:	461f      	mov	r7, r3
 8013940:	898b      	ldrh	r3, [r1, #12]
 8013942:	05db      	lsls	r3, r3, #23
 8013944:	4605      	mov	r5, r0
 8013946:	460c      	mov	r4, r1
 8013948:	4616      	mov	r6, r2
 801394a:	d505      	bpl.n	8013958 <__swrite+0x1e>
 801394c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013950:	2302      	movs	r3, #2
 8013952:	2200      	movs	r2, #0
 8013954:	f000 f888 	bl	8013a68 <_lseek_r>
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801395e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013962:	81a3      	strh	r3, [r4, #12]
 8013964:	4632      	mov	r2, r6
 8013966:	463b      	mov	r3, r7
 8013968:	4628      	mov	r0, r5
 801396a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801396e:	f000 b837 	b.w	80139e0 <_write_r>

08013972 <__sseek>:
 8013972:	b510      	push	{r4, lr}
 8013974:	460c      	mov	r4, r1
 8013976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801397a:	f000 f875 	bl	8013a68 <_lseek_r>
 801397e:	1c43      	adds	r3, r0, #1
 8013980:	89a3      	ldrh	r3, [r4, #12]
 8013982:	bf15      	itete	ne
 8013984:	6560      	strne	r0, [r4, #84]	; 0x54
 8013986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801398a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801398e:	81a3      	strheq	r3, [r4, #12]
 8013990:	bf18      	it	ne
 8013992:	81a3      	strhne	r3, [r4, #12]
 8013994:	bd10      	pop	{r4, pc}

08013996 <__sclose>:
 8013996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801399a:	f000 b833 	b.w	8013a04 <_close_r>

0801399e <strncmp>:
 801399e:	b510      	push	{r4, lr}
 80139a0:	b17a      	cbz	r2, 80139c2 <strncmp+0x24>
 80139a2:	4603      	mov	r3, r0
 80139a4:	3901      	subs	r1, #1
 80139a6:	1884      	adds	r4, r0, r2
 80139a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80139ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80139b0:	4290      	cmp	r0, r2
 80139b2:	d101      	bne.n	80139b8 <strncmp+0x1a>
 80139b4:	42a3      	cmp	r3, r4
 80139b6:	d101      	bne.n	80139bc <strncmp+0x1e>
 80139b8:	1a80      	subs	r0, r0, r2
 80139ba:	bd10      	pop	{r4, pc}
 80139bc:	2800      	cmp	r0, #0
 80139be:	d1f3      	bne.n	80139a8 <strncmp+0xa>
 80139c0:	e7fa      	b.n	80139b8 <strncmp+0x1a>
 80139c2:	4610      	mov	r0, r2
 80139c4:	e7f9      	b.n	80139ba <strncmp+0x1c>

080139c6 <__ascii_wctomb>:
 80139c6:	b149      	cbz	r1, 80139dc <__ascii_wctomb+0x16>
 80139c8:	2aff      	cmp	r2, #255	; 0xff
 80139ca:	bf85      	ittet	hi
 80139cc:	238a      	movhi	r3, #138	; 0x8a
 80139ce:	6003      	strhi	r3, [r0, #0]
 80139d0:	700a      	strbls	r2, [r1, #0]
 80139d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80139d6:	bf98      	it	ls
 80139d8:	2001      	movls	r0, #1
 80139da:	4770      	bx	lr
 80139dc:	4608      	mov	r0, r1
 80139de:	4770      	bx	lr

080139e0 <_write_r>:
 80139e0:	b538      	push	{r3, r4, r5, lr}
 80139e2:	4d07      	ldr	r5, [pc, #28]	; (8013a00 <_write_r+0x20>)
 80139e4:	4604      	mov	r4, r0
 80139e6:	4608      	mov	r0, r1
 80139e8:	4611      	mov	r1, r2
 80139ea:	2200      	movs	r2, #0
 80139ec:	602a      	str	r2, [r5, #0]
 80139ee:	461a      	mov	r2, r3
 80139f0:	f7ef fbe8 	bl	80031c4 <_write>
 80139f4:	1c43      	adds	r3, r0, #1
 80139f6:	d102      	bne.n	80139fe <_write_r+0x1e>
 80139f8:	682b      	ldr	r3, [r5, #0]
 80139fa:	b103      	cbz	r3, 80139fe <_write_r+0x1e>
 80139fc:	6023      	str	r3, [r4, #0]
 80139fe:	bd38      	pop	{r3, r4, r5, pc}
 8013a00:	20013388 	.word	0x20013388

08013a04 <_close_r>:
 8013a04:	b538      	push	{r3, r4, r5, lr}
 8013a06:	4d06      	ldr	r5, [pc, #24]	; (8013a20 <_close_r+0x1c>)
 8013a08:	2300      	movs	r3, #0
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	4608      	mov	r0, r1
 8013a0e:	602b      	str	r3, [r5, #0]
 8013a10:	f7f0 f905 	bl	8003c1e <_close>
 8013a14:	1c43      	adds	r3, r0, #1
 8013a16:	d102      	bne.n	8013a1e <_close_r+0x1a>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	b103      	cbz	r3, 8013a1e <_close_r+0x1a>
 8013a1c:	6023      	str	r3, [r4, #0]
 8013a1e:	bd38      	pop	{r3, r4, r5, pc}
 8013a20:	20013388 	.word	0x20013388

08013a24 <_fstat_r>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	4d07      	ldr	r5, [pc, #28]	; (8013a44 <_fstat_r+0x20>)
 8013a28:	2300      	movs	r3, #0
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	4608      	mov	r0, r1
 8013a2e:	4611      	mov	r1, r2
 8013a30:	602b      	str	r3, [r5, #0]
 8013a32:	f7f0 f900 	bl	8003c36 <_fstat>
 8013a36:	1c43      	adds	r3, r0, #1
 8013a38:	d102      	bne.n	8013a40 <_fstat_r+0x1c>
 8013a3a:	682b      	ldr	r3, [r5, #0]
 8013a3c:	b103      	cbz	r3, 8013a40 <_fstat_r+0x1c>
 8013a3e:	6023      	str	r3, [r4, #0]
 8013a40:	bd38      	pop	{r3, r4, r5, pc}
 8013a42:	bf00      	nop
 8013a44:	20013388 	.word	0x20013388

08013a48 <_isatty_r>:
 8013a48:	b538      	push	{r3, r4, r5, lr}
 8013a4a:	4d06      	ldr	r5, [pc, #24]	; (8013a64 <_isatty_r+0x1c>)
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	4604      	mov	r4, r0
 8013a50:	4608      	mov	r0, r1
 8013a52:	602b      	str	r3, [r5, #0]
 8013a54:	f7f0 f8ff 	bl	8003c56 <_isatty>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_isatty_r+0x1a>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_isatty_r+0x1a>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	20013388 	.word	0x20013388

08013a68 <_lseek_r>:
 8013a68:	b538      	push	{r3, r4, r5, lr}
 8013a6a:	4d07      	ldr	r5, [pc, #28]	; (8013a88 <_lseek_r+0x20>)
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	4608      	mov	r0, r1
 8013a70:	4611      	mov	r1, r2
 8013a72:	2200      	movs	r2, #0
 8013a74:	602a      	str	r2, [r5, #0]
 8013a76:	461a      	mov	r2, r3
 8013a78:	f7f0 f8f8 	bl	8003c6c <_lseek>
 8013a7c:	1c43      	adds	r3, r0, #1
 8013a7e:	d102      	bne.n	8013a86 <_lseek_r+0x1e>
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	b103      	cbz	r3, 8013a86 <_lseek_r+0x1e>
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	bd38      	pop	{r3, r4, r5, pc}
 8013a88:	20013388 	.word	0x20013388

08013a8c <__malloc_lock>:
 8013a8c:	4801      	ldr	r0, [pc, #4]	; (8013a94 <__malloc_lock+0x8>)
 8013a8e:	f7fe bf08 	b.w	80128a2 <__retarget_lock_acquire_recursive>
 8013a92:	bf00      	nop
 8013a94:	2001337a 	.word	0x2001337a

08013a98 <__malloc_unlock>:
 8013a98:	4801      	ldr	r0, [pc, #4]	; (8013aa0 <__malloc_unlock+0x8>)
 8013a9a:	f7fe bf03 	b.w	80128a4 <__retarget_lock_release_recursive>
 8013a9e:	bf00      	nop
 8013aa0:	2001337a 	.word	0x2001337a

08013aa4 <_malloc_usable_size_r>:
 8013aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013aa8:	1f18      	subs	r0, r3, #4
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	bfbc      	itt	lt
 8013aae:	580b      	ldrlt	r3, [r1, r0]
 8013ab0:	18c0      	addlt	r0, r0, r3
 8013ab2:	4770      	bx	lr

08013ab4 <_read_r>:
 8013ab4:	b538      	push	{r3, r4, r5, lr}
 8013ab6:	4d07      	ldr	r5, [pc, #28]	; (8013ad4 <_read_r+0x20>)
 8013ab8:	4604      	mov	r4, r0
 8013aba:	4608      	mov	r0, r1
 8013abc:	4611      	mov	r1, r2
 8013abe:	2200      	movs	r2, #0
 8013ac0:	602a      	str	r2, [r5, #0]
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	f7f0 f88e 	bl	8003be4 <_read>
 8013ac8:	1c43      	adds	r3, r0, #1
 8013aca:	d102      	bne.n	8013ad2 <_read_r+0x1e>
 8013acc:	682b      	ldr	r3, [r5, #0]
 8013ace:	b103      	cbz	r3, 8013ad2 <_read_r+0x1e>
 8013ad0:	6023      	str	r3, [r4, #0]
 8013ad2:	bd38      	pop	{r3, r4, r5, pc}
 8013ad4:	20013388 	.word	0x20013388

08013ad8 <atanf>:
 8013ad8:	b538      	push	{r3, r4, r5, lr}
 8013ada:	ee10 5a10 	vmov	r5, s0
 8013ade:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013ae2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013ae6:	eef0 7a40 	vmov.f32	s15, s0
 8013aea:	db0b      	blt.n	8013b04 <atanf+0x2c>
 8013aec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013af0:	dc5b      	bgt.n	8013baa <atanf+0xd2>
 8013af2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8013c40 <atanf+0x168>
 8013af6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8013c44 <atanf+0x16c>
 8013afa:	2d00      	cmp	r5, #0
 8013afc:	bfc8      	it	gt
 8013afe:	eeb0 0a67 	vmovgt.f32	s0, s15
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	4b50      	ldr	r3, [pc, #320]	; (8013c48 <atanf+0x170>)
 8013b06:	429c      	cmp	r4, r3
 8013b08:	dc5e      	bgt.n	8013bc8 <atanf+0xf0>
 8013b0a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013b0e:	db4f      	blt.n	8013bb0 <atanf+0xd8>
 8013b10:	f04f 33ff 	mov.w	r3, #4294967295
 8013b14:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013b18:	eddf 4a4c 	vldr	s9, [pc, #304]	; 8013c4c <atanf+0x174>
 8013b1c:	eddf 5a4c 	vldr	s11, [pc, #304]	; 8013c50 <atanf+0x178>
 8013b20:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8013c54 <atanf+0x17c>
 8013b24:	ed9f 4a4c 	vldr	s8, [pc, #304]	; 8013c58 <atanf+0x180>
 8013b28:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013b2c:	eeb0 6a66 	vmov.f32	s12, s13
 8013b30:	eee7 5a24 	vfma.f32	s11, s14, s9
 8013b34:	1c5a      	adds	r2, r3, #1
 8013b36:	eddf 4a49 	vldr	s9, [pc, #292]	; 8013c5c <atanf+0x184>
 8013b3a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8013c60 <atanf+0x188>
 8013b3e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013b42:	eee7 6a24 	vfma.f32	s13, s14, s9
 8013b46:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013c64 <atanf+0x18c>
 8013b4a:	eddf 4a47 	vldr	s9, [pc, #284]	; 8013c68 <atanf+0x190>
 8013b4e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013b52:	eea5 4a07 	vfma.f32	s8, s10, s14
 8013b56:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8013c6c <atanf+0x194>
 8013b5a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013c70 <atanf+0x198>
 8013b5e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013b62:	eee4 4a07 	vfma.f32	s9, s8, s14
 8013b66:	eddf 5a43 	vldr	s11, [pc, #268]	; 8013c74 <atanf+0x19c>
 8013b6a:	eee4 6a87 	vfma.f32	s13, s9, s14
 8013b6e:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013b72:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013b76:	ee25 7a87 	vmul.f32	s14, s11, s14
 8013b7a:	d03a      	beq.n	8013bf2 <atanf+0x11a>
 8013b7c:	4a3e      	ldr	r2, [pc, #248]	; (8013c78 <atanf+0x1a0>)
 8013b7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013b82:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013b86:	ed92 0a00 	vldr	s0, [r2]
 8013b8a:	4a3c      	ldr	r2, [pc, #240]	; (8013c7c <atanf+0x1a4>)
 8013b8c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8013b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b94:	2d00      	cmp	r5, #0
 8013b96:	ed93 7a00 	vldr	s14, [r3]
 8013b9a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b9e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013ba2:	daae      	bge.n	8013b02 <atanf+0x2a>
 8013ba4:	eeb1 0a40 	vneg.f32	s0, s0
 8013ba8:	bd38      	pop	{r3, r4, r5, pc}
 8013baa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013bae:	bd38      	pop	{r3, r4, r5, pc}
 8013bb0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013c80 <atanf+0x1a8>
 8013bb4:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013bbc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc4:	dda4      	ble.n	8013b10 <atanf+0x38>
 8013bc6:	bd38      	pop	{r3, r4, r5, pc}
 8013bc8:	f000 f898 	bl	8013cfc <fabsf>
 8013bcc:	4b2d      	ldr	r3, [pc, #180]	; (8013c84 <atanf+0x1ac>)
 8013bce:	429c      	cmp	r4, r3
 8013bd0:	dc16      	bgt.n	8013c00 <atanf+0x128>
 8013bd2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013bd6:	429c      	cmp	r4, r3
 8013bd8:	dc27      	bgt.n	8013c2a <atanf+0x152>
 8013bda:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013bde:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013be2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013be6:	2300      	movs	r3, #0
 8013be8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013bec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013bf0:	e790      	b.n	8013b14 <atanf+0x3c>
 8013bf2:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013bf6:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8013bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	4b21      	ldr	r3, [pc, #132]	; (8013c88 <atanf+0x1b0>)
 8013c02:	429c      	cmp	r4, r3
 8013c04:	dc0b      	bgt.n	8013c1e <atanf+0x146>
 8013c06:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c0e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013c12:	2302      	movs	r3, #2
 8013c14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c18:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8013c1c:	e77a      	b.n	8013b14 <atanf+0x3c>
 8013c1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013c22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013c26:	2303      	movs	r3, #3
 8013c28:	e774      	b.n	8013b14 <atanf+0x3c>
 8013c2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c2e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013c32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013c36:	2301      	movs	r3, #1
 8013c38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013c3c:	e76a      	b.n	8013b14 <atanf+0x3c>
 8013c3e:	bf00      	nop
 8013c40:	3fc90fdb 	.word	0x3fc90fdb
 8013c44:	bfc90fdb 	.word	0xbfc90fdb
 8013c48:	3edfffff 	.word	0x3edfffff
 8013c4c:	3c8569d7 	.word	0x3c8569d7
 8013c50:	3d4bda59 	.word	0x3d4bda59
 8013c54:	3d886b35 	.word	0x3d886b35
 8013c58:	3dba2e6e 	.word	0x3dba2e6e
 8013c5c:	bd15a221 	.word	0xbd15a221
 8013c60:	bd6ef16b 	.word	0xbd6ef16b
 8013c64:	bd9d8795 	.word	0xbd9d8795
 8013c68:	3e124925 	.word	0x3e124925
 8013c6c:	bde38e38 	.word	0xbde38e38
 8013c70:	3eaaaaab 	.word	0x3eaaaaab
 8013c74:	be4ccccd 	.word	0xbe4ccccd
 8013c78:	0802ab3c 	.word	0x0802ab3c
 8013c7c:	0802ab2c 	.word	0x0802ab2c
 8013c80:	7149f2ca 	.word	0x7149f2ca
 8013c84:	3f97ffff 	.word	0x3f97ffff
 8013c88:	401bffff 	.word	0x401bffff

08013c8c <cosf>:
 8013c8c:	ee10 3a10 	vmov	r3, s0
 8013c90:	4a18      	ldr	r2, [pc, #96]	; (8013cf4 <cosf+0x68>)
 8013c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013c96:	4293      	cmp	r3, r2
 8013c98:	dd1b      	ble.n	8013cd2 <cosf+0x46>
 8013c9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013c9e:	db02      	blt.n	8013ca6 <cosf+0x1a>
 8013ca0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013ca4:	4770      	bx	lr
 8013ca6:	b500      	push	{lr}
 8013ca8:	b083      	sub	sp, #12
 8013caa:	4668      	mov	r0, sp
 8013cac:	f000 fa8e 	bl	80141cc <__ieee754_rem_pio2f>
 8013cb0:	f000 0003 	and.w	r0, r0, #3
 8013cb4:	2801      	cmp	r0, #1
 8013cb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8013cba:	ed9d 0a00 	vldr	s0, [sp]
 8013cbe:	d00c      	beq.n	8013cda <cosf+0x4e>
 8013cc0:	2802      	cmp	r0, #2
 8013cc2:	d012      	beq.n	8013cea <cosf+0x5e>
 8013cc4:	b170      	cbz	r0, 8013ce4 <cosf+0x58>
 8013cc6:	2001      	movs	r0, #1
 8013cc8:	f000 ff72 	bl	8014bb0 <__kernel_sinf>
 8013ccc:	b003      	add	sp, #12
 8013cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8013cd2:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013cf8 <cosf+0x6c>
 8013cd6:	f000 bbaf 	b.w	8014438 <__kernel_cosf>
 8013cda:	f000 ff69 	bl	8014bb0 <__kernel_sinf>
 8013cde:	eeb1 0a40 	vneg.f32	s0, s0
 8013ce2:	e7f3      	b.n	8013ccc <cosf+0x40>
 8013ce4:	f000 fba8 	bl	8014438 <__kernel_cosf>
 8013ce8:	e7f0      	b.n	8013ccc <cosf+0x40>
 8013cea:	f000 fba5 	bl	8014438 <__kernel_cosf>
 8013cee:	eeb1 0a40 	vneg.f32	s0, s0
 8013cf2:	e7eb      	b.n	8013ccc <cosf+0x40>
 8013cf4:	3f490fd8 	.word	0x3f490fd8
 8013cf8:	00000000 	.word	0x00000000

08013cfc <fabsf>:
 8013cfc:	ee10 3a10 	vmov	r3, s0
 8013d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d04:	ee00 3a10 	vmov	s0, r3
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop

08013d0c <sinf>:
 8013d0c:	ee10 3a10 	vmov	r3, s0
 8013d10:	4a19      	ldr	r2, [pc, #100]	; (8013d78 <sinf+0x6c>)
 8013d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d16:	4293      	cmp	r3, r2
 8013d18:	dd1c      	ble.n	8013d54 <sinf+0x48>
 8013d1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013d1e:	db02      	blt.n	8013d26 <sinf+0x1a>
 8013d20:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013d24:	4770      	bx	lr
 8013d26:	b500      	push	{lr}
 8013d28:	b083      	sub	sp, #12
 8013d2a:	4668      	mov	r0, sp
 8013d2c:	f000 fa4e 	bl	80141cc <__ieee754_rem_pio2f>
 8013d30:	f000 0003 	and.w	r0, r0, #3
 8013d34:	2801      	cmp	r0, #1
 8013d36:	eddd 0a01 	vldr	s1, [sp, #4]
 8013d3a:	ed9d 0a00 	vldr	s0, [sp]
 8013d3e:	d00e      	beq.n	8013d5e <sinf+0x52>
 8013d40:	2802      	cmp	r0, #2
 8013d42:	d013      	beq.n	8013d6c <sinf+0x60>
 8013d44:	b170      	cbz	r0, 8013d64 <sinf+0x58>
 8013d46:	f000 fb77 	bl	8014438 <__kernel_cosf>
 8013d4a:	eeb1 0a40 	vneg.f32	s0, s0
 8013d4e:	b003      	add	sp, #12
 8013d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d54:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013d7c <sinf+0x70>
 8013d58:	2000      	movs	r0, #0
 8013d5a:	f000 bf29 	b.w	8014bb0 <__kernel_sinf>
 8013d5e:	f000 fb6b 	bl	8014438 <__kernel_cosf>
 8013d62:	e7f4      	b.n	8013d4e <sinf+0x42>
 8013d64:	2001      	movs	r0, #1
 8013d66:	f000 ff23 	bl	8014bb0 <__kernel_sinf>
 8013d6a:	e7f0      	b.n	8013d4e <sinf+0x42>
 8013d6c:	2001      	movs	r0, #1
 8013d6e:	f000 ff1f 	bl	8014bb0 <__kernel_sinf>
 8013d72:	eeb1 0a40 	vneg.f32	s0, s0
 8013d76:	e7ea      	b.n	8013d4e <sinf+0x42>
 8013d78:	3f490fd8 	.word	0x3f490fd8
 8013d7c:	00000000 	.word	0x00000000

08013d80 <tanf>:
 8013d80:	ee10 3a10 	vmov	r3, s0
 8013d84:	4a11      	ldr	r2, [pc, #68]	; (8013dcc <tanf+0x4c>)
 8013d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	dd18      	ble.n	8013dc0 <tanf+0x40>
 8013d8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013d92:	db02      	blt.n	8013d9a <tanf+0x1a>
 8013d94:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013d98:	4770      	bx	lr
 8013d9a:	b500      	push	{lr}
 8013d9c:	b083      	sub	sp, #12
 8013d9e:	4668      	mov	r0, sp
 8013da0:	f000 fa14 	bl	80141cc <__ieee754_rem_pio2f>
 8013da4:	0040      	lsls	r0, r0, #1
 8013da6:	f000 0002 	and.w	r0, r0, #2
 8013daa:	eddd 0a01 	vldr	s1, [sp, #4]
 8013dae:	ed9d 0a00 	vldr	s0, [sp]
 8013db2:	f1c0 0001 	rsb	r0, r0, #1
 8013db6:	f000 ff43 	bl	8014c40 <__kernel_tanf>
 8013dba:	b003      	add	sp, #12
 8013dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dc0:	eddf 0a03 	vldr	s1, [pc, #12]	; 8013dd0 <tanf+0x50>
 8013dc4:	2001      	movs	r0, #1
 8013dc6:	f000 bf3b 	b.w	8014c40 <__kernel_tanf>
 8013dca:	bf00      	nop
 8013dcc:	3f490fda 	.word	0x3f490fda
 8013dd0:	00000000 	.word	0x00000000

08013dd4 <atan2f>:
 8013dd4:	f000 b852 	b.w	8013e7c <__ieee754_atan2f>

08013dd8 <logf>:
 8013dd8:	b508      	push	{r3, lr}
 8013dda:	ed2d 8b02 	vpush	{d8}
 8013dde:	eeb0 8a40 	vmov.f32	s16, s0
 8013de2:	f000 f8f3 	bl	8013fcc <__ieee754_logf>
 8013de6:	eeb4 8a48 	vcmp.f32	s16, s16
 8013dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dee:	d60f      	bvs.n	8013e10 <logf+0x38>
 8013df0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df8:	dc0a      	bgt.n	8013e10 <logf+0x38>
 8013dfa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e02:	d108      	bne.n	8013e16 <logf+0x3e>
 8013e04:	f7fb f970 	bl	800f0e8 <__errno>
 8013e08:	2322      	movs	r3, #34	; 0x22
 8013e0a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8013e30 <logf+0x58>
 8013e0e:	6003      	str	r3, [r0, #0]
 8013e10:	ecbd 8b02 	vpop	{d8}
 8013e14:	bd08      	pop	{r3, pc}
 8013e16:	f7fb f967 	bl	800f0e8 <__errno>
 8013e1a:	ecbd 8b02 	vpop	{d8}
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2221      	movs	r2, #33	; 0x21
 8013e22:	601a      	str	r2, [r3, #0]
 8013e24:	4803      	ldr	r0, [pc, #12]	; (8013e34 <logf+0x5c>)
 8013e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e2a:	f7fc b9f9 	b.w	8010220 <nanf>
 8013e2e:	bf00      	nop
 8013e30:	ff800000 	.word	0xff800000
 8013e34:	0802ab4c 	.word	0x0802ab4c

08013e38 <sqrtf>:
 8013e38:	b508      	push	{r3, lr}
 8013e3a:	ed2d 8b02 	vpush	{d8}
 8013e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8013e42:	f000 faf5 	bl	8014430 <__ieee754_sqrtf>
 8013e46:	eeb4 8a48 	vcmp.f32	s16, s16
 8013e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4e:	d606      	bvs.n	8013e5e <sqrtf+0x26>
 8013e50:	eddf 8a09 	vldr	s17, [pc, #36]	; 8013e78 <sqrtf+0x40>
 8013e54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5c:	d402      	bmi.n	8013e64 <sqrtf+0x2c>
 8013e5e:	ecbd 8b02 	vpop	{d8}
 8013e62:	bd08      	pop	{r3, pc}
 8013e64:	f7fb f940 	bl	800f0e8 <__errno>
 8013e68:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013e6c:	ecbd 8b02 	vpop	{d8}
 8013e70:	2321      	movs	r3, #33	; 0x21
 8013e72:	6003      	str	r3, [r0, #0]
 8013e74:	bd08      	pop	{r3, pc}
 8013e76:	bf00      	nop
 8013e78:	00000000 	.word	0x00000000

08013e7c <__ieee754_atan2f>:
 8013e7c:	b510      	push	{r4, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	edcd 0a01 	vstr	s1, [sp, #4]
 8013e84:	9b01      	ldr	r3, [sp, #4]
 8013e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013e8a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013e8e:	eef0 7a40 	vmov.f32	s15, s0
 8013e92:	dc30      	bgt.n	8013ef6 <__ieee754_atan2f+0x7a>
 8013e94:	ee10 0a10 	vmov	r0, s0
 8013e98:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8013e9c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013ea0:	dc29      	bgt.n	8013ef6 <__ieee754_atan2f+0x7a>
 8013ea2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013ea6:	d042      	beq.n	8013f2e <__ieee754_atan2f+0xb2>
 8013ea8:	179c      	asrs	r4, r3, #30
 8013eaa:	f004 0402 	and.w	r4, r4, #2
 8013eae:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013eb2:	b331      	cbz	r1, 8013f02 <__ieee754_atan2f+0x86>
 8013eb4:	b37a      	cbz	r2, 8013f16 <__ieee754_atan2f+0x9a>
 8013eb6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013eba:	d040      	beq.n	8013f3e <__ieee754_atan2f+0xc2>
 8013ebc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013ec0:	d029      	beq.n	8013f16 <__ieee754_atan2f+0x9a>
 8013ec2:	1a8a      	subs	r2, r1, r2
 8013ec4:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8013ec8:	ea4f 51e2 	mov.w	r1, r2, asr #23
 8013ecc:	da34      	bge.n	8013f38 <__ieee754_atan2f+0xbc>
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	da42      	bge.n	8013f58 <__ieee754_atan2f+0xdc>
 8013ed2:	313c      	adds	r1, #60	; 0x3c
 8013ed4:	da40      	bge.n	8013f58 <__ieee754_atan2f+0xdc>
 8013ed6:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8013fa8 <__ieee754_atan2f+0x12c>
 8013eda:	2c01      	cmp	r4, #1
 8013edc:	d04e      	beq.n	8013f7c <__ieee754_atan2f+0x100>
 8013ede:	2c02      	cmp	r4, #2
 8013ee0:	d043      	beq.n	8013f6a <__ieee754_atan2f+0xee>
 8013ee2:	b164      	cbz	r4, 8013efe <__ieee754_atan2f+0x82>
 8013ee4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013fac <__ieee754_atan2f+0x130>
 8013ee8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013fb0 <__ieee754_atan2f+0x134>
 8013eec:	ee30 0a07 	vadd.f32	s0, s0, s14
 8013ef0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013ef4:	e003      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013ef6:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013efa:	ee37 0a27 	vadd.f32	s0, s14, s15
 8013efe:	b002      	add	sp, #8
 8013f00:	bd10      	pop	{r4, pc}
 8013f02:	2c02      	cmp	r4, #2
 8013f04:	d010      	beq.n	8013f28 <__ieee754_atan2f+0xac>
 8013f06:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8013fb4 <__ieee754_atan2f+0x138>
 8013f0a:	2c03      	cmp	r4, #3
 8013f0c:	bf18      	it	ne
 8013f0e:	eeb0 0a67 	vmovne.f32	s0, s15
 8013f12:	b002      	add	sp, #8
 8013f14:	bd10      	pop	{r4, pc}
 8013f16:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8013fb8 <__ieee754_atan2f+0x13c>
 8013f1a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013fbc <__ieee754_atan2f+0x140>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	bfb8      	it	lt
 8013f22:	eeb0 0a67 	vmovlt.f32	s0, s15
 8013f26:	e7ea      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013f28:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8013fb0 <__ieee754_atan2f+0x134>
 8013f2c:	e7e7      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013f2e:	b002      	add	sp, #8
 8013f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f34:	f7ff bdd0 	b.w	8013ad8 <atanf>
 8013f38:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8013fb8 <__ieee754_atan2f+0x13c>
 8013f3c:	e7cd      	b.n	8013eda <__ieee754_atan2f+0x5e>
 8013f3e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013f42:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f46:	d020      	beq.n	8013f8a <__ieee754_atan2f+0x10e>
 8013f48:	2c02      	cmp	r4, #2
 8013f4a:	d826      	bhi.n	8013f9a <__ieee754_atan2f+0x11e>
 8013f4c:	4b1c      	ldr	r3, [pc, #112]	; (8013fc0 <__ieee754_atan2f+0x144>)
 8013f4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f52:	ed94 0a00 	vldr	s0, [r4]
 8013f56:	e7d2      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013f58:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013f5c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8013f60:	f7ff fecc 	bl	8013cfc <fabsf>
 8013f64:	f7ff fdb8 	bl	8013ad8 <atanf>
 8013f68:	e7b7      	b.n	8013eda <__ieee754_atan2f+0x5e>
 8013f6a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013fac <__ieee754_atan2f+0x130>
 8013f6e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013fb0 <__ieee754_atan2f+0x134>
 8013f72:	ee30 0a07 	vadd.f32	s0, s0, s14
 8013f76:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013f7a:	e7c0      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013f7c:	ee10 3a10 	vmov	r3, s0
 8013f80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f84:	ee00 3a10 	vmov	s0, r3
 8013f88:	e7b9      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013f8a:	2c02      	cmp	r4, #2
 8013f8c:	d808      	bhi.n	8013fa0 <__ieee754_atan2f+0x124>
 8013f8e:	4b0d      	ldr	r3, [pc, #52]	; (8013fc4 <__ieee754_atan2f+0x148>)
 8013f90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f94:	ed94 0a00 	vldr	s0, [r4]
 8013f98:	e7b1      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013f9a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013fa8 <__ieee754_atan2f+0x12c>
 8013f9e:	e7ae      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013fa0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8013fc8 <__ieee754_atan2f+0x14c>
 8013fa4:	e7ab      	b.n	8013efe <__ieee754_atan2f+0x82>
 8013fa6:	bf00      	nop
 8013fa8:	00000000 	.word	0x00000000
 8013fac:	33bbbd2e 	.word	0x33bbbd2e
 8013fb0:	40490fdb 	.word	0x40490fdb
 8013fb4:	c0490fdb 	.word	0xc0490fdb
 8013fb8:	3fc90fdb 	.word	0x3fc90fdb
 8013fbc:	bfc90fdb 	.word	0xbfc90fdb
 8013fc0:	0802ab5c 	.word	0x0802ab5c
 8013fc4:	0802ab50 	.word	0x0802ab50
 8013fc8:	3f490fdb 	.word	0x3f490fdb

08013fcc <__ieee754_logf>:
 8013fcc:	ee10 3a10 	vmov	r3, s0
 8013fd0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013fd4:	d02e      	beq.n	8014034 <__ieee754_logf+0x68>
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	db33      	blt.n	8014042 <__ieee754_logf+0x76>
 8013fda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013fde:	da40      	bge.n	8014062 <__ieee754_logf+0x96>
 8013fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013fe4:	db34      	blt.n	8014050 <__ieee754_logf+0x84>
 8013fe6:	f04f 0c00 	mov.w	ip, #0
 8013fea:	4868      	ldr	r0, [pc, #416]	; (801418c <__ieee754_logf+0x1c0>)
 8013fec:	f3c3 0116 	ubfx	r1, r3, #0, #23
 8013ff0:	4408      	add	r0, r1
 8013ff2:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 8013ff6:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 8013ffa:	430a      	orrs	r2, r1
 8013ffc:	15db      	asrs	r3, r3, #23
 8013ffe:	ee00 2a10 	vmov	s0, r2
 8014002:	3b7f      	subs	r3, #127	; 0x7f
 8014004:	4a62      	ldr	r2, [pc, #392]	; (8014190 <__ieee754_logf+0x1c4>)
 8014006:	4463      	add	r3, ip
 8014008:	f101 0c0f 	add.w	ip, r1, #15
 801400c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014010:	ea0c 0202 	and.w	r2, ip, r2
 8014014:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014018:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801401c:	bb22      	cbnz	r2, 8014068 <__ieee754_logf+0x9c>
 801401e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014026:	d160      	bne.n	80140ea <__ieee754_logf+0x11e>
 8014028:	2b00      	cmp	r3, #0
 801402a:	f040 8092 	bne.w	8014152 <__ieee754_logf+0x186>
 801402e:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8014194 <__ieee754_logf+0x1c8>
 8014032:	4770      	bx	lr
 8014034:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8014198 <__ieee754_logf+0x1cc>
 8014038:	eddf 7a56 	vldr	s15, [pc, #344]	; 8014194 <__ieee754_logf+0x1c8>
 801403c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014040:	4770      	bx	lr
 8014042:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014046:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8014194 <__ieee754_logf+0x1c8>
 801404a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801404e:	4770      	bx	lr
 8014050:	eddf 7a52 	vldr	s15, [pc, #328]	; 801419c <__ieee754_logf+0x1d0>
 8014054:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014058:	f06f 0c18 	mvn.w	ip, #24
 801405c:	ee17 3a90 	vmov	r3, s15
 8014060:	e7c3      	b.n	8013fea <__ieee754_logf+0x1e>
 8014062:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014066:	4770      	bx	lr
 8014068:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801406c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014070:	ee07 3a10 	vmov	s14, r3
 8014074:	ee80 4a27 	vdiv.f32	s8, s0, s15
 8014078:	4849      	ldr	r0, [pc, #292]	; (80141a0 <__ieee754_logf+0x1d4>)
 801407a:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
 801407e:	4408      	add	r0, r1
 8014080:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8014084:	4302      	orrs	r2, r0
 8014086:	2a00      	cmp	r2, #0
 8014088:	ed9f 3a46 	vldr	s6, [pc, #280]	; 80141a4 <__ieee754_logf+0x1d8>
 801408c:	eddf 4a46 	vldr	s9, [pc, #280]	; 80141a8 <__ieee754_logf+0x1dc>
 8014090:	eddf 5a46 	vldr	s11, [pc, #280]	; 80141ac <__ieee754_logf+0x1e0>
 8014094:	eddf 3a46 	vldr	s7, [pc, #280]	; 80141b0 <__ieee754_logf+0x1e4>
 8014098:	ed9f 5a46 	vldr	s10, [pc, #280]	; 80141b4 <__ieee754_logf+0x1e8>
 801409c:	eddf 7a46 	vldr	s15, [pc, #280]	; 80141b8 <__ieee754_logf+0x1ec>
 80140a0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80141bc <__ieee754_logf+0x1f0>
 80140a4:	ee24 6a04 	vmul.f32	s12, s8, s8
 80140a8:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 80140ac:	ee26 7a06 	vmul.f32	s14, s12, s12
 80140b0:	eee7 4a03 	vfma.f32	s9, s14, s6
 80140b4:	eea7 5a23 	vfma.f32	s10, s14, s7
 80140b8:	eee4 5a87 	vfma.f32	s11, s9, s14
 80140bc:	eee5 6a07 	vfma.f32	s13, s10, s14
 80140c0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80140c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80140c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140cc:	dd2a      	ble.n	8014124 <__ieee754_logf+0x158>
 80140ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80140d2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80140d6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80140da:	bb4b      	cbnz	r3, 8014130 <__ieee754_logf+0x164>
 80140dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140e0:	eea7 7ac4 	vfms.f32	s14, s15, s8
 80140e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80140e8:	4770      	bx	lr
 80140ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80140ee:	eddf 6a34 	vldr	s13, [pc, #208]	; 80141c0 <__ieee754_logf+0x1f4>
 80140f2:	eef0 7a47 	vmov.f32	s15, s14
 80140f6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80140fa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80140fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014102:	2b00      	cmp	r3, #0
 8014104:	d0ee      	beq.n	80140e4 <__ieee754_logf+0x118>
 8014106:	ee07 3a90 	vmov	s15, r3
 801410a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80141c4 <__ieee754_logf+0x1f8>
 801410e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80141c8 <__ieee754_logf+0x1fc>
 8014112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014116:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801411a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801411e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8014122:	4770      	bx	lr
 8014124:	bb13      	cbnz	r3, 801416c <__ieee754_logf+0x1a0>
 8014126:	ee70 7a67 	vsub.f32	s15, s0, s15
 801412a:	eea7 0ac4 	vfms.f32	s0, s15, s8
 801412e:	4770      	bx	lr
 8014130:	eddf 6a24 	vldr	s13, [pc, #144]	; 80141c4 <__ieee754_logf+0x1f8>
 8014134:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80141c8 <__ieee754_logf+0x1fc>
 8014138:	ee77 7a87 	vadd.f32	s15, s15, s14
 801413c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8014140:	eee7 6a84 	vfma.f32	s13, s15, s8
 8014144:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014148:	ee37 0a40 	vsub.f32	s0, s14, s0
 801414c:	ee92 0a86 	vfnms.f32	s0, s5, s12
 8014150:	4770      	bx	lr
 8014152:	ee07 3a90 	vmov	s15, r3
 8014156:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80141c4 <__ieee754_logf+0x1f8>
 801415a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80141c8 <__ieee754_logf+0x1fc>
 801415e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014162:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014166:	eea7 0a87 	vfma.f32	s0, s15, s14
 801416a:	4770      	bx	lr
 801416c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80141c4 <__ieee754_logf+0x1f8>
 8014170:	eddf 6a15 	vldr	s13, [pc, #84]	; 80141c8 <__ieee754_logf+0x1fc>
 8014174:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014178:	ee27 7a62 	vnmul.f32	s14, s14, s5
 801417c:	eea7 7a84 	vfma.f32	s14, s15, s8
 8014180:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014184:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8014188:	4770      	bx	lr
 801418a:	bf00      	nop
 801418c:	004afb20 	.word	0x004afb20
 8014190:	007ffff0 	.word	0x007ffff0
 8014194:	00000000 	.word	0x00000000
 8014198:	cc000000 	.word	0xcc000000
 801419c:	4c000000 	.word	0x4c000000
 80141a0:	ffcf5c30 	.word	0xffcf5c30
 80141a4:	3e178897 	.word	0x3e178897
 80141a8:	3e3a3325 	.word	0x3e3a3325
 80141ac:	3e924925 	.word	0x3e924925
 80141b0:	3e1cd04f 	.word	0x3e1cd04f
 80141b4:	3e638e29 	.word	0x3e638e29
 80141b8:	3f2aaaab 	.word	0x3f2aaaab
 80141bc:	3ecccccd 	.word	0x3ecccccd
 80141c0:	3eaaaaab 	.word	0x3eaaaaab
 80141c4:	3717f7d1 	.word	0x3717f7d1
 80141c8:	3f317180 	.word	0x3f317180

080141cc <__ieee754_rem_pio2f>:
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	ee10 3a10 	vmov	r3, s0
 80141d2:	4a89      	ldr	r2, [pc, #548]	; (80143f8 <__ieee754_rem_pio2f+0x22c>)
 80141d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80141d8:	4294      	cmp	r4, r2
 80141da:	b086      	sub	sp, #24
 80141dc:	4605      	mov	r5, r0
 80141de:	dd70      	ble.n	80142c2 <__ieee754_rem_pio2f+0xf6>
 80141e0:	4a86      	ldr	r2, [pc, #536]	; (80143fc <__ieee754_rem_pio2f+0x230>)
 80141e2:	4294      	cmp	r4, r2
 80141e4:	ee10 6a10 	vmov	r6, s0
 80141e8:	dc22      	bgt.n	8014230 <__ieee754_rem_pio2f+0x64>
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	eddf 7a84 	vldr	s15, [pc, #528]	; 8014400 <__ieee754_rem_pio2f+0x234>
 80141f0:	4a84      	ldr	r2, [pc, #528]	; (8014404 <__ieee754_rem_pio2f+0x238>)
 80141f2:	f024 040f 	bic.w	r4, r4, #15
 80141f6:	eeb0 7a40 	vmov.f32	s14, s0
 80141fa:	f340 80e4 	ble.w	80143c6 <__ieee754_rem_pio2f+0x1fa>
 80141fe:	4294      	cmp	r4, r2
 8014200:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014204:	bf09      	itett	eq
 8014206:	eddf 6a80 	vldreq	s13, [pc, #512]	; 8014408 <__ieee754_rem_pio2f+0x23c>
 801420a:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 801440c <__ieee754_rem_pio2f+0x240>
 801420e:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 8014410 <__ieee754_rem_pio2f+0x244>
 8014212:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
 8014216:	2001      	movs	r0, #1
 8014218:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801421c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014220:	edc5 6a00 	vstr	s13, [r5]
 8014224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014228:	edc5 7a01 	vstr	s15, [r5, #4]
 801422c:	b006      	add	sp, #24
 801422e:	bd70      	pop	{r4, r5, r6, pc}
 8014230:	4a78      	ldr	r2, [pc, #480]	; (8014414 <__ieee754_rem_pio2f+0x248>)
 8014232:	4294      	cmp	r4, r2
 8014234:	dd54      	ble.n	80142e0 <__ieee754_rem_pio2f+0x114>
 8014236:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801423a:	da49      	bge.n	80142d0 <__ieee754_rem_pio2f+0x104>
 801423c:	15e2      	asrs	r2, r4, #23
 801423e:	3a86      	subs	r2, #134	; 0x86
 8014240:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8014244:	ee07 3a90 	vmov	s15, r3
 8014248:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801424c:	eddf 6a72 	vldr	s13, [pc, #456]	; 8014418 <__ieee754_rem_pio2f+0x24c>
 8014250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014258:	ed8d 7a03 	vstr	s14, [sp, #12]
 801425c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014260:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801426c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014270:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427c:	edcd 7a05 	vstr	s15, [sp, #20]
 8014280:	f040 8090 	bne.w	80143a4 <__ieee754_rem_pio2f+0x1d8>
 8014284:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428c:	bf14      	ite	ne
 801428e:	2302      	movne	r3, #2
 8014290:	2301      	moveq	r3, #1
 8014292:	4962      	ldr	r1, [pc, #392]	; (801441c <__ieee754_rem_pio2f+0x250>)
 8014294:	9101      	str	r1, [sp, #4]
 8014296:	2102      	movs	r1, #2
 8014298:	9100      	str	r1, [sp, #0]
 801429a:	a803      	add	r0, sp, #12
 801429c:	4629      	mov	r1, r5
 801429e:	f000 f94d 	bl	801453c <__kernel_rem_pio2f>
 80142a2:	2e00      	cmp	r6, #0
 80142a4:	dac2      	bge.n	801422c <__ieee754_rem_pio2f+0x60>
 80142a6:	ed95 7a00 	vldr	s14, [r5]
 80142aa:	edd5 7a01 	vldr	s15, [r5, #4]
 80142ae:	eeb1 7a47 	vneg.f32	s14, s14
 80142b2:	eef1 7a67 	vneg.f32	s15, s15
 80142b6:	ed85 7a00 	vstr	s14, [r5]
 80142ba:	edc5 7a01 	vstr	s15, [r5, #4]
 80142be:	4240      	negs	r0, r0
 80142c0:	e7b4      	b.n	801422c <__ieee754_rem_pio2f+0x60>
 80142c2:	2200      	movs	r2, #0
 80142c4:	ed85 0a00 	vstr	s0, [r5]
 80142c8:	6042      	str	r2, [r0, #4]
 80142ca:	2000      	movs	r0, #0
 80142cc:	b006      	add	sp, #24
 80142ce:	bd70      	pop	{r4, r5, r6, pc}
 80142d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80142d4:	2000      	movs	r0, #0
 80142d6:	edc5 7a01 	vstr	s15, [r5, #4]
 80142da:	edc5 7a00 	vstr	s15, [r5]
 80142de:	e7a5      	b.n	801422c <__ieee754_rem_pio2f+0x60>
 80142e0:	f7ff fd0c 	bl	8013cfc <fabsf>
 80142e4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8014420 <__ieee754_rem_pio2f+0x254>
 80142e8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8014400 <__ieee754_rem_pio2f+0x234>
 80142ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80142f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80142f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801440c <__ieee754_rem_pio2f+0x240>
 80142f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142fc:	ee17 0a90 	vmov	r0, s15
 8014300:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014304:	281f      	cmp	r0, #31
 8014306:	eea6 0ac6 	vfms.f32	s0, s13, s12
 801430a:	ee66 7a87 	vmul.f32	s15, s13, s14
 801430e:	eeb1 6a66 	vneg.f32	s12, s13
 8014312:	dc1e      	bgt.n	8014352 <__ieee754_rem_pio2f+0x186>
 8014314:	4a43      	ldr	r2, [pc, #268]	; (8014424 <__ieee754_rem_pio2f+0x258>)
 8014316:	1e41      	subs	r1, r0, #1
 8014318:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 801431c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014320:	4293      	cmp	r3, r2
 8014322:	d016      	beq.n	8014352 <__ieee754_rem_pio2f+0x186>
 8014324:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014328:	ed85 7a00 	vstr	s14, [r5]
 801432c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014330:	2e00      	cmp	r6, #0
 8014332:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014336:	ed85 0a01 	vstr	s0, [r5, #4]
 801433a:	f6bf af77 	bge.w	801422c <__ieee754_rem_pio2f+0x60>
 801433e:	eeb1 7a47 	vneg.f32	s14, s14
 8014342:	eeb1 0a40 	vneg.f32	s0, s0
 8014346:	ed85 7a00 	vstr	s14, [r5]
 801434a:	ed85 0a01 	vstr	s0, [r5, #4]
 801434e:	4240      	negs	r0, r0
 8014350:	e76c      	b.n	801422c <__ieee754_rem_pio2f+0x60>
 8014352:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014356:	15e2      	asrs	r2, r4, #23
 8014358:	ee17 3a10 	vmov	r3, s14
 801435c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014360:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
 8014364:	2c08      	cmp	r4, #8
 8014366:	dddf      	ble.n	8014328 <__ieee754_rem_pio2f+0x15c>
 8014368:	eddf 7a27 	vldr	s15, [pc, #156]	; 8014408 <__ieee754_rem_pio2f+0x23c>
 801436c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014410 <__ieee754_rem_pio2f+0x244>
 8014370:	eef0 5a40 	vmov.f32	s11, s0
 8014374:	eee6 5a27 	vfma.f32	s11, s12, s15
 8014378:	ee30 0a65 	vsub.f32	s0, s0, s11
 801437c:	eea6 0a27 	vfma.f32	s0, s12, s15
 8014380:	eef0 7a40 	vmov.f32	s15, s0
 8014384:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8014388:	ee35 7ae7 	vsub.f32	s14, s11, s15
 801438c:	ee17 3a10 	vmov	r3, s14
 8014390:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014394:	1ad2      	subs	r2, r2, r3
 8014396:	2a19      	cmp	r2, #25
 8014398:	dc06      	bgt.n	80143a8 <__ieee754_rem_pio2f+0x1dc>
 801439a:	eeb0 0a65 	vmov.f32	s0, s11
 801439e:	ed85 7a00 	vstr	s14, [r5]
 80143a2:	e7c3      	b.n	801432c <__ieee754_rem_pio2f+0x160>
 80143a4:	2303      	movs	r3, #3
 80143a6:	e774      	b.n	8014292 <__ieee754_rem_pio2f+0xc6>
 80143a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8014428 <__ieee754_rem_pio2f+0x25c>
 80143ac:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 801442c <__ieee754_rem_pio2f+0x260>
 80143b0:	eeb0 0a65 	vmov.f32	s0, s11
 80143b4:	eea6 0a07 	vfma.f32	s0, s12, s14
 80143b8:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80143bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80143c0:	eed6 7a85 	vfnms.f32	s15, s13, s10
 80143c4:	e7ae      	b.n	8014324 <__ieee754_rem_pio2f+0x158>
 80143c6:	4294      	cmp	r4, r2
 80143c8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80143cc:	bf09      	itett	eq
 80143ce:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8014408 <__ieee754_rem_pio2f+0x23c>
 80143d2:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 801440c <__ieee754_rem_pio2f+0x240>
 80143d6:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 8014410 <__ieee754_rem_pio2f+0x244>
 80143da:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 80143de:	f04f 30ff 	mov.w	r0, #4294967295
 80143e2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80143e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80143ea:	edc5 6a00 	vstr	s13, [r5]
 80143ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143f2:	edc5 7a01 	vstr	s15, [r5, #4]
 80143f6:	e719      	b.n	801422c <__ieee754_rem_pio2f+0x60>
 80143f8:	3f490fd8 	.word	0x3f490fd8
 80143fc:	4016cbe3 	.word	0x4016cbe3
 8014400:	3fc90f80 	.word	0x3fc90f80
 8014404:	3fc90fd0 	.word	0x3fc90fd0
 8014408:	37354400 	.word	0x37354400
 801440c:	37354443 	.word	0x37354443
 8014410:	2e85a308 	.word	0x2e85a308
 8014414:	43490f80 	.word	0x43490f80
 8014418:	43800000 	.word	0x43800000
 801441c:	0802abe8 	.word	0x0802abe8
 8014420:	3f22f984 	.word	0x3f22f984
 8014424:	0802ab68 	.word	0x0802ab68
 8014428:	2e85a300 	.word	0x2e85a300
 801442c:	248d3132 	.word	0x248d3132

08014430 <__ieee754_sqrtf>:
 8014430:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014434:	4770      	bx	lr
 8014436:	bf00      	nop

08014438 <__kernel_cosf>:
 8014438:	ee10 3a10 	vmov	r3, s0
 801443c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014440:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014444:	da2c      	bge.n	80144a0 <__kernel_cosf+0x68>
 8014446:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801444a:	ee17 3a90 	vmov	r3, s15
 801444e:	2b00      	cmp	r3, #0
 8014450:	d060      	beq.n	8014514 <__kernel_cosf+0xdc>
 8014452:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014456:	eddf 7a31 	vldr	s15, [pc, #196]	; 801451c <__kernel_cosf+0xe4>
 801445a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8014520 <__kernel_cosf+0xe8>
 801445e:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014524 <__kernel_cosf+0xec>
 8014462:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014528 <__kernel_cosf+0xf0>
 8014466:	eddf 6a31 	vldr	s13, [pc, #196]	; 801452c <__kernel_cosf+0xf4>
 801446a:	eea7 5a27 	vfma.f32	s10, s14, s15
 801446e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8014530 <__kernel_cosf+0xf8>
 8014472:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014476:	eea7 6a25 	vfma.f32	s12, s14, s11
 801447a:	eee7 7a06 	vfma.f32	s15, s14, s12
 801447e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014482:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014486:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801448a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801448e:	eee7 0a26 	vfma.f32	s1, s14, s13
 8014492:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014496:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801449a:	ee30 0a60 	vsub.f32	s0, s0, s1
 801449e:	4770      	bx	lr
 80144a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80144a4:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801451c <__kernel_cosf+0xe4>
 80144a8:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8014520 <__kernel_cosf+0xe8>
 80144ac:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8014524 <__kernel_cosf+0xec>
 80144b0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8014528 <__kernel_cosf+0xf0>
 80144b4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801452c <__kernel_cosf+0xf4>
 80144b8:	4a1e      	ldr	r2, [pc, #120]	; (8014534 <__kernel_cosf+0xfc>)
 80144ba:	eea7 5a27 	vfma.f32	s10, s14, s15
 80144be:	4293      	cmp	r3, r2
 80144c0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8014530 <__kernel_cosf+0xf8>
 80144c4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80144c8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80144cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80144d0:	eee7 6a87 	vfma.f32	s13, s15, s14
 80144d4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80144d8:	ddd5      	ble.n	8014486 <__kernel_cosf+0x4e>
 80144da:	4a17      	ldr	r2, [pc, #92]	; (8014538 <__kernel_cosf+0x100>)
 80144dc:	4293      	cmp	r3, r2
 80144de:	dc14      	bgt.n	801450a <__kernel_cosf+0xd2>
 80144e0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80144e4:	ee07 3a90 	vmov	s15, r3
 80144e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80144ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80144f0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80144f4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80144f8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80144fc:	eee7 0a26 	vfma.f32	s1, s14, s13
 8014500:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8014504:	ee36 0a60 	vsub.f32	s0, s12, s1
 8014508:	4770      	bx	lr
 801450a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 801450e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 8014512:	e7ed      	b.n	80144f0 <__kernel_cosf+0xb8>
 8014514:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	ad47d74e 	.word	0xad47d74e
 8014520:	310f74f6 	.word	0x310f74f6
 8014524:	b493f27c 	.word	0xb493f27c
 8014528:	37d00d01 	.word	0x37d00d01
 801452c:	3d2aaaab 	.word	0x3d2aaaab
 8014530:	bab60b61 	.word	0xbab60b61
 8014534:	3e999999 	.word	0x3e999999
 8014538:	3f480000 	.word	0x3f480000

0801453c <__kernel_rem_pio2f>:
 801453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014540:	ed2d 8b04 	vpush	{d8-d9}
 8014544:	b0db      	sub	sp, #364	; 0x16c
 8014546:	461c      	mov	r4, r3
 8014548:	9303      	str	r3, [sp, #12]
 801454a:	9106      	str	r1, [sp, #24]
 801454c:	4ba2      	ldr	r3, [pc, #648]	; (80147d8 <__kernel_rem_pio2f+0x29c>)
 801454e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8014550:	9208      	str	r2, [sp, #32]
 8014552:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8014556:	1d11      	adds	r1, r2, #4
 8014558:	4682      	mov	sl, r0
 801455a:	f104 38ff 	add.w	r8, r4, #4294967295
 801455e:	f2c0 82a3 	blt.w	8014aa8 <__kernel_rem_pio2f+0x56c>
 8014562:	1ed3      	subs	r3, r2, #3
 8014564:	bf48      	it	mi
 8014566:	1d13      	addmi	r3, r2, #4
 8014568:	10db      	asrs	r3, r3, #3
 801456a:	9302      	str	r3, [sp, #8]
 801456c:	3301      	adds	r3, #1
 801456e:	00db      	lsls	r3, r3, #3
 8014570:	9307      	str	r3, [sp, #28]
 8014572:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014576:	1a9b      	subs	r3, r3, r2
 8014578:	9305      	str	r3, [sp, #20]
 801457a:	9b02      	ldr	r3, [sp, #8]
 801457c:	eb15 0108 	adds.w	r1, r5, r8
 8014580:	eba3 0308 	sub.w	r3, r3, r8
 8014584:	d416      	bmi.n	80145b4 <__kernel_rem_pio2f+0x78>
 8014586:	3101      	adds	r1, #1
 8014588:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80147dc <__kernel_rem_pio2f+0x2a0>
 801458c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 801458e:	4419      	add	r1, r3
 8014590:	aa1e      	add	r2, sp, #120	; 0x78
 8014592:	2b00      	cmp	r3, #0
 8014594:	bfa4      	itt	ge
 8014596:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 801459a:	ee07 4a90 	vmovge	s15, r4
 801459e:	f103 0301 	add.w	r3, r3, #1
 80145a2:	bfac      	ite	ge
 80145a4:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80145a8:	eef0 7a47 	vmovlt.f32	s15, s14
 80145ac:	428b      	cmp	r3, r1
 80145ae:	ece2 7a01 	vstmia	r2!, {s15}
 80145b2:	d1ee      	bne.n	8014592 <__kernel_rem_pio2f+0x56>
 80145b4:	2d00      	cmp	r5, #0
 80145b6:	f2c0 82e7 	blt.w	8014b88 <__kernel_rem_pio2f+0x64c>
 80145ba:	9b03      	ldr	r3, [sp, #12]
 80145bc:	aa1e      	add	r2, sp, #120	; 0x78
 80145be:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80145c2:	ae46      	add	r6, sp, #280	; 0x118
 80145c4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80145c8:	4640      	mov	r0, r8
 80145ca:	18ef      	adds	r7, r5, r3
 80145cc:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 80145d0:	f1b8 0f00 	cmp.w	r8, #0
 80145d4:	eddf 7a81 	vldr	s15, [pc, #516]	; 80147dc <__kernel_rem_pio2f+0x2a0>
 80145d8:	db09      	blt.n	80145ee <__kernel_rem_pio2f+0xb2>
 80145da:	4622      	mov	r2, r4
 80145dc:	4653      	mov	r3, sl
 80145de:	ecf3 6a01 	vldmia	r3!, {s13}
 80145e2:	ed32 7a01 	vldmdb	r2!, {s14}
 80145e6:	428b      	cmp	r3, r1
 80145e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80145ec:	d1f7      	bne.n	80145de <__kernel_rem_pio2f+0xa2>
 80145ee:	3001      	adds	r0, #1
 80145f0:	42b8      	cmp	r0, r7
 80145f2:	ece6 7a01 	vstmia	r6!, {s15}
 80145f6:	f104 0404 	add.w	r4, r4, #4
 80145fa:	d1e9      	bne.n	80145d0 <__kernel_rem_pio2f+0x94>
 80145fc:	ab09      	add	r3, sp, #36	; 0x24
 80145fe:	af0a      	add	r7, sp, #40	; 0x28
 8014600:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 8014604:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8014608:	3b08      	subs	r3, #8
 801460a:	ed9f 9a76 	vldr	s18, [pc, #472]	; 80147e4 <__kernel_rem_pio2f+0x2a8>
 801460e:	eddf 8a74 	vldr	s17, [pc, #464]	; 80147e0 <__kernel_rem_pio2f+0x2a4>
 8014612:	9805      	ldr	r0, [sp, #20]
 8014614:	9304      	str	r3, [sp, #16]
 8014616:	eb0a 040c 	add.w	r4, sl, ip
 801461a:	ae46      	add	r6, sp, #280	; 0x118
 801461c:	9500      	str	r5, [sp, #0]
 801461e:	ab5a      	add	r3, sp, #360	; 0x168
 8014620:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014624:	2d00      	cmp	r5, #0
 8014626:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801462a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 801462e:	dd16      	ble.n	801465e <__kernel_rem_pio2f+0x122>
 8014630:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8014634:	463a      	mov	r2, r7
 8014636:	ee60 7a09 	vmul.f32	s15, s0, s18
 801463a:	eeb0 7a40 	vmov.f32	s14, s0
 801463e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014642:	ed73 6a01 	vldmdb	r3!, {s13}
 8014646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801464a:	42b3      	cmp	r3, r6
 801464c:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8014650:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8014654:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014658:	eca2 7a01 	vstmia	r2!, {s14}
 801465c:	d1eb      	bne.n	8014636 <__kernel_rem_pio2f+0xfa>
 801465e:	9001      	str	r0, [sp, #4]
 8014660:	f000 fc14 	bl	8014e8c <scalbnf>
 8014664:	eeb0 8a40 	vmov.f32	s16, s0
 8014668:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801466c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014670:	f000 fbc6 	bl	8014e00 <floorf>
 8014674:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014678:	eea0 8a67 	vfms.f32	s16, s0, s15
 801467c:	9801      	ldr	r0, [sp, #4]
 801467e:	2800      	cmp	r0, #0
 8014680:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014684:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8014688:	ee38 8a67 	vsub.f32	s16, s16, s15
 801468c:	dd79      	ble.n	8014782 <__kernel_rem_pio2f+0x246>
 801468e:	f105 3eff 	add.w	lr, r5, #4294967295
 8014692:	f1c0 0308 	rsb	r3, r0, #8
 8014696:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 801469a:	fa41 fc03 	asr.w	ip, r1, r3
 801469e:	fa0c f303 	lsl.w	r3, ip, r3
 80146a2:	1acb      	subs	r3, r1, r3
 80146a4:	f1c0 0207 	rsb	r2, r0, #7
 80146a8:	ee19 1a90 	vmov	r1, s19
 80146ac:	fa43 f202 	asr.w	r2, r3, r2
 80146b0:	4461      	add	r1, ip
 80146b2:	2a00      	cmp	r2, #0
 80146b4:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
 80146b8:	ee09 1a90 	vmov	s19, r1
 80146bc:	dc69      	bgt.n	8014792 <__kernel_rem_pio2f+0x256>
 80146be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80146c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c6:	f040 80c0 	bne.w	801484a <__kernel_rem_pio2f+0x30e>
 80146ca:	9b00      	ldr	r3, [sp, #0]
 80146cc:	f105 3bff 	add.w	fp, r5, #4294967295
 80146d0:	455b      	cmp	r3, fp
 80146d2:	dc10      	bgt.n	80146f6 <__kernel_rem_pio2f+0x1ba>
 80146d4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80146d8:	3b01      	subs	r3, #1
 80146da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80146de:	2100      	movs	r1, #0
 80146e0:	4694      	mov	ip, r2
 80146e2:	f853 2904 	ldr.w	r2, [r3], #-4
 80146e6:	454b      	cmp	r3, r9
 80146e8:	ea41 0102 	orr.w	r1, r1, r2
 80146ec:	d1f9      	bne.n	80146e2 <__kernel_rem_pio2f+0x1a6>
 80146ee:	4662      	mov	r2, ip
 80146f0:	2900      	cmp	r1, #0
 80146f2:	f040 80f2 	bne.w	80148da <__kernel_rem_pio2f+0x39e>
 80146f6:	9b00      	ldr	r3, [sp, #0]
 80146f8:	3b01      	subs	r3, #1
 80146fa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	f040 80e7 	bne.w	80148d2 <__kernel_rem_pio2f+0x396>
 8014704:	9b04      	ldr	r3, [sp, #16]
 8014706:	f04f 0c01 	mov.w	ip, #1
 801470a:	f853 2904 	ldr.w	r2, [r3], #-4
 801470e:	f10c 0c01 	add.w	ip, ip, #1
 8014712:	2a00      	cmp	r2, #0
 8014714:	d0f9      	beq.n	801470a <__kernel_rem_pio2f+0x1ce>
 8014716:	1c6b      	adds	r3, r5, #1
 8014718:	44ac      	add	ip, r5
 801471a:	469e      	mov	lr, r3
 801471c:	9a03      	ldr	r2, [sp, #12]
 801471e:	1951      	adds	r1, r2, r5
 8014720:	9a02      	ldr	r2, [sp, #8]
 8014722:	eb02 0b03 	add.w	fp, r2, r3
 8014726:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 801472a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801472c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014730:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 8014734:	ab1e      	add	r3, sp, #120	; 0x78
 8014736:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 801473a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801473e:	eddb 7a01 	vldr	s15, [fp, #4]
 8014742:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80147dc <__kernel_rem_pio2f+0x2a0>
 8014746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801474a:	f1b8 0f00 	cmp.w	r8, #0
 801474e:	f10b 0b04 	add.w	fp, fp, #4
 8014752:	edc1 7a00 	vstr	s15, [r1]
 8014756:	460a      	mov	r2, r1
 8014758:	f101 0104 	add.w	r1, r1, #4
 801475c:	db09      	blt.n	8014772 <__kernel_rem_pio2f+0x236>
 801475e:	4653      	mov	r3, sl
 8014760:	e001      	b.n	8014766 <__kernel_rem_pio2f+0x22a>
 8014762:	ed72 7a01 	vldmdb	r2!, {s15}
 8014766:	ecf3 6a01 	vldmia	r3!, {s13}
 801476a:	42a3      	cmp	r3, r4
 801476c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014770:	d1f7      	bne.n	8014762 <__kernel_rem_pio2f+0x226>
 8014772:	f10e 0e01 	add.w	lr, lr, #1
 8014776:	45e6      	cmp	lr, ip
 8014778:	eca5 7a01 	vstmia	r5!, {s14}
 801477c:	dddf      	ble.n	801473e <__kernel_rem_pio2f+0x202>
 801477e:	4665      	mov	r5, ip
 8014780:	e74d      	b.n	801461e <__kernel_rem_pio2f+0xe2>
 8014782:	f040 809c 	bne.w	80148be <__kernel_rem_pio2f+0x382>
 8014786:	1e6b      	subs	r3, r5, #1
 8014788:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801478c:	11d2      	asrs	r2, r2, #7
 801478e:	2a00      	cmp	r2, #0
 8014790:	dd95      	ble.n	80146be <__kernel_rem_pio2f+0x182>
 8014792:	ee19 3a90 	vmov	r3, s19
 8014796:	2d00      	cmp	r5, #0
 8014798:	f103 0301 	add.w	r3, r3, #1
 801479c:	ee09 3a90 	vmov	s19, r3
 80147a0:	f340 8198 	ble.w	8014ad4 <__kernel_rem_pio2f+0x598>
 80147a4:	6839      	ldr	r1, [r7, #0]
 80147a6:	2900      	cmp	r1, #0
 80147a8:	d17f      	bne.n	80148aa <__kernel_rem_pio2f+0x36e>
 80147aa:	2d01      	cmp	r5, #1
 80147ac:	d026      	beq.n	80147fc <__kernel_rem_pio2f+0x2c0>
 80147ae:	463b      	mov	r3, r7
 80147b0:	f04f 0c01 	mov.w	ip, #1
 80147b4:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80147b8:	2900      	cmp	r1, #0
 80147ba:	d07a      	beq.n	80148b2 <__kernel_rem_pio2f+0x376>
 80147bc:	f10c 0301 	add.w	r3, ip, #1
 80147c0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80147c4:	429d      	cmp	r5, r3
 80147c6:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
 80147ca:	dd16      	ble.n	80147fa <__kernel_rem_pio2f+0x2be>
 80147cc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80147d0:	44bb      	add	fp, r7
 80147d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80147d6:	e00a      	b.n	80147ee <__kernel_rem_pio2f+0x2b2>
 80147d8:	0802af2c 	.word	0x0802af2c
 80147dc:	00000000 	.word	0x00000000
 80147e0:	43800000 	.word	0x43800000
 80147e4:	3b800000 	.word	0x3b800000
 80147e8:	3fc90000 	.word	0x3fc90000
 80147ec:	6819      	ldr	r1, [r3, #0]
 80147ee:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 80147f2:	f843 1b04 	str.w	r1, [r3], #4
 80147f6:	455b      	cmp	r3, fp
 80147f8:	d1f8      	bne.n	80147ec <__kernel_rem_pio2f+0x2b0>
 80147fa:	2101      	movs	r1, #1
 80147fc:	2800      	cmp	r0, #0
 80147fe:	dd0c      	ble.n	801481a <__kernel_rem_pio2f+0x2de>
 8014800:	2801      	cmp	r0, #1
 8014802:	f000 8148 	beq.w	8014a96 <__kernel_rem_pio2f+0x55a>
 8014806:	2802      	cmp	r0, #2
 8014808:	d107      	bne.n	801481a <__kernel_rem_pio2f+0x2de>
 801480a:	f105 3cff 	add.w	ip, r5, #4294967295
 801480e:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014816:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 801481a:	2a02      	cmp	r2, #2
 801481c:	f47f af4f 	bne.w	80146be <__kernel_rem_pio2f+0x182>
 8014820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014824:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014828:	2900      	cmp	r1, #0
 801482a:	f43f af48 	beq.w	80146be <__kernel_rem_pio2f+0x182>
 801482e:	9209      	str	r2, [sp, #36]	; 0x24
 8014830:	9001      	str	r0, [sp, #4]
 8014832:	f000 fb2b 	bl	8014e8c <scalbnf>
 8014836:	ee38 8a40 	vsub.f32	s16, s16, s0
 801483a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801483c:	9801      	ldr	r0, [sp, #4]
 801483e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014846:	f43f af40 	beq.w	80146ca <__kernel_rem_pio2f+0x18e>
 801484a:	9202      	str	r2, [sp, #8]
 801484c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014850:	eeb0 0a48 	vmov.f32	s0, s16
 8014854:	1a98      	subs	r0, r3, r2
 8014856:	9501      	str	r5, [sp, #4]
 8014858:	9d00      	ldr	r5, [sp, #0]
 801485a:	f000 fb17 	bl	8014e8c <scalbnf>
 801485e:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 80147e0 <__kernel_rem_pio2f+0x2a4>
 8014862:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801486a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 801486e:	f2c0 8159 	blt.w	8014b24 <__kernel_rem_pio2f+0x5e8>
 8014872:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 80147e4 <__kernel_rem_pio2f+0x2a8>
 8014876:	9905      	ldr	r1, [sp, #20]
 8014878:	ee60 7a27 	vmul.f32	s15, s0, s15
 801487c:	3108      	adds	r1, #8
 801487e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014882:	9105      	str	r1, [sp, #20]
 8014884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014888:	f103 0b01 	add.w	fp, r3, #1
 801488c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014894:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014898:	ee10 1a10 	vmov	r1, s0
 801489c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80148a0:	ee17 3a90 	vmov	r3, s15
 80148a4:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
 80148a8:	e02e      	b.n	8014908 <__kernel_rem_pio2f+0x3cc>
 80148aa:	2301      	movs	r3, #1
 80148ac:	f04f 0c00 	mov.w	ip, #0
 80148b0:	e786      	b.n	80147c0 <__kernel_rem_pio2f+0x284>
 80148b2:	f10c 0c01 	add.w	ip, ip, #1
 80148b6:	45ac      	cmp	ip, r5
 80148b8:	f47f af7c 	bne.w	80147b4 <__kernel_rem_pio2f+0x278>
 80148bc:	e79e      	b.n	80147fc <__kernel_rem_pio2f+0x2c0>
 80148be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80148c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80148c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ca:	f280 80f2 	bge.w	8014ab2 <__kernel_rem_pio2f+0x576>
 80148ce:	2200      	movs	r2, #0
 80148d0:	e6f5      	b.n	80146be <__kernel_rem_pio2f+0x182>
 80148d2:	1c6b      	adds	r3, r5, #1
 80148d4:	469e      	mov	lr, r3
 80148d6:	469c      	mov	ip, r3
 80148d8:	e720      	b.n	801471c <__kernel_rem_pio2f+0x1e0>
 80148da:	9905      	ldr	r1, [sp, #20]
 80148dc:	f1a1 0008 	sub.w	r0, r1, #8
 80148e0:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 80148e4:	9005      	str	r0, [sp, #20]
 80148e6:	462b      	mov	r3, r5
 80148e8:	9d00      	ldr	r5, [sp, #0]
 80148ea:	b969      	cbnz	r1, 8014908 <__kernel_rem_pio2f+0x3cc>
 80148ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80148f0:	3b02      	subs	r3, #2
 80148f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80148f6:	4601      	mov	r1, r0
 80148f8:	f853 0904 	ldr.w	r0, [r3], #-4
 80148fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014900:	3908      	subs	r1, #8
 8014902:	2800      	cmp	r0, #0
 8014904:	d0f8      	beq.n	80148f8 <__kernel_rem_pio2f+0x3bc>
 8014906:	9105      	str	r1, [sp, #20]
 8014908:	9805      	ldr	r0, [sp, #20]
 801490a:	9200      	str	r2, [sp, #0]
 801490c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014910:	f000 fabc 	bl	8014e8c <scalbnf>
 8014914:	f1bb 0f00 	cmp.w	fp, #0
 8014918:	9a00      	ldr	r2, [sp, #0]
 801491a:	f2c0 8128 	blt.w	8014b6e <__kernel_rem_pio2f+0x632>
 801491e:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 8014922:	ab46      	add	r3, sp, #280	; 0x118
 8014924:	eb03 060e 	add.w	r6, r3, lr
 8014928:	f10e 0c04 	add.w	ip, lr, #4
 801492c:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 80147e4 <__kernel_rem_pio2f+0x2a8>
 8014930:	eb07 030c 	add.w	r3, r7, ip
 8014934:	1d31      	adds	r1, r6, #4
 8014936:	ed73 7a01 	vldmdb	r3!, {s15}
 801493a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801493e:	42bb      	cmp	r3, r7
 8014940:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014944:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014948:	ed61 7a01 	vstmdb	r1!, {s15}
 801494c:	d1f3      	bne.n	8014936 <__kernel_rem_pio2f+0x3fa>
 801494e:	2d00      	cmp	r5, #0
 8014950:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 80147e8 <__kernel_rem_pio2f+0x2ac>
 8014954:	f04f 0400 	mov.w	r4, #0
 8014958:	db20      	blt.n	801499c <__kernel_rem_pio2f+0x460>
 801495a:	4893      	ldr	r0, [pc, #588]	; (8014ba8 <__kernel_rem_pio2f+0x66c>)
 801495c:	eddf 7a93 	vldr	s15, [pc, #588]	; 8014bac <__kernel_rem_pio2f+0x670>
 8014960:	eeb0 7a46 	vmov.f32	s14, s12
 8014964:	4631      	mov	r1, r6
 8014966:	2300      	movs	r3, #0
 8014968:	e003      	b.n	8014972 <__kernel_rem_pio2f+0x436>
 801496a:	429c      	cmp	r4, r3
 801496c:	db08      	blt.n	8014980 <__kernel_rem_pio2f+0x444>
 801496e:	ecb0 7a01 	vldmia	r0!, {s14}
 8014972:	ecf1 6a01 	vldmia	r1!, {s13}
 8014976:	3301      	adds	r3, #1
 8014978:	429d      	cmp	r5, r3
 801497a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801497e:	daf4      	bge.n	801496a <__kernel_rem_pio2f+0x42e>
 8014980:	ab5a      	add	r3, sp, #360	; 0x168
 8014982:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014986:	45a3      	cmp	fp, r4
 8014988:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
 801498c:	f1a6 0604 	sub.w	r6, r6, #4
 8014990:	f104 0301 	add.w	r3, r4, #1
 8014994:	d005      	beq.n	80149a2 <__kernel_rem_pio2f+0x466>
 8014996:	2d00      	cmp	r5, #0
 8014998:	461c      	mov	r4, r3
 801499a:	dade      	bge.n	801495a <__kernel_rem_pio2f+0x41e>
 801499c:	eddf 7a83 	vldr	s15, [pc, #524]	; 8014bac <__kernel_rem_pio2f+0x670>
 80149a0:	e7ee      	b.n	8014980 <__kernel_rem_pio2f+0x444>
 80149a2:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 80149a4:	2902      	cmp	r1, #2
 80149a6:	dc1c      	bgt.n	80149e2 <__kernel_rem_pio2f+0x4a6>
 80149a8:	2900      	cmp	r1, #0
 80149aa:	f300 8095 	bgt.w	8014ad8 <__kernel_rem_pio2f+0x59c>
 80149ae:	d10f      	bne.n	80149d0 <__kernel_rem_pio2f+0x494>
 80149b0:	ab32      	add	r3, sp, #200	; 0xc8
 80149b2:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8014bac <__kernel_rem_pio2f+0x670>
 80149b6:	449c      	add	ip, r3
 80149b8:	ed3c 7a01 	vldmdb	ip!, {s14}
 80149bc:	4563      	cmp	r3, ip
 80149be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149c2:	d1f9      	bne.n	80149b8 <__kernel_rem_pio2f+0x47c>
 80149c4:	b10a      	cbz	r2, 80149ca <__kernel_rem_pio2f+0x48e>
 80149c6:	eef1 7a67 	vneg.f32	s15, s15
 80149ca:	9b06      	ldr	r3, [sp, #24]
 80149cc:	edc3 7a00 	vstr	s15, [r3]
 80149d0:	ee19 3a90 	vmov	r3, s19
 80149d4:	f003 0007 	and.w	r0, r3, #7
 80149d8:	b05b      	add	sp, #364	; 0x16c
 80149da:	ecbd 8b04 	vpop	{d8-d9}
 80149de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e2:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 80149e4:	2b03      	cmp	r3, #3
 80149e6:	d1f3      	bne.n	80149d0 <__kernel_rem_pio2f+0x494>
 80149e8:	f1bb 0f00 	cmp.w	fp, #0
 80149ec:	f000 80d4 	beq.w	8014b98 <__kernel_rem_pio2f+0x65c>
 80149f0:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 80149f4:	446b      	add	r3, sp
 80149f6:	a932      	add	r1, sp, #200	; 0xc8
 80149f8:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 80149fc:	eb01 038b 	add.w	r3, r1, fp, lsl #2
 8014a00:	ed73 7a01 	vldmdb	r3!, {s15}
 8014a04:	eef0 6a47 	vmov.f32	s13, s14
 8014a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a0c:	4299      	cmp	r1, r3
 8014a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a12:	ed83 7a00 	vstr	s14, [r3]
 8014a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a1a:	edc3 7a01 	vstr	s15, [r3, #4]
 8014a1e:	d1ef      	bne.n	8014a00 <__kernel_rem_pio2f+0x4c4>
 8014a20:	f1bb 0f01 	cmp.w	fp, #1
 8014a24:	f340 80b8 	ble.w	8014b98 <__kernel_rem_pio2f+0x65c>
 8014a28:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 8014a2c:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014a30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a34:	eb0d 0e03 	add.w	lr, sp, r3
 8014a38:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8014a3c:	f10b 0304 	add.w	r3, fp, #4
 8014a40:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
 8014a44:	440b      	add	r3, r1
 8014a46:	a833      	add	r0, sp, #204	; 0xcc
 8014a48:	ed73 7a01 	vldmdb	r3!, {s15}
 8014a4c:	eef0 6a47 	vmov.f32	s13, s14
 8014a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a54:	4298      	cmp	r0, r3
 8014a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a5a:	ed83 7a00 	vstr	s14, [r3]
 8014a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a62:	edc3 7a01 	vstr	s15, [r3, #4]
 8014a66:	d1ef      	bne.n	8014a48 <__kernel_rem_pio2f+0x50c>
 8014a68:	f10b 0b08 	add.w	fp, fp, #8
 8014a6c:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8014bac <__kernel_rem_pio2f+0x670>
 8014a70:	eb01 030b 	add.w	r3, r1, fp
 8014a74:	3108      	adds	r1, #8
 8014a76:	ed33 7a01 	vldmdb	r3!, {s14}
 8014a7a:	4299      	cmp	r1, r3
 8014a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a80:	d1f9      	bne.n	8014a76 <__kernel_rem_pio2f+0x53a>
 8014a82:	2a00      	cmp	r2, #0
 8014a84:	d156      	bne.n	8014b34 <__kernel_rem_pio2f+0x5f8>
 8014a86:	9906      	ldr	r1, [sp, #24]
 8014a88:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014a8a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014a8c:	600a      	str	r2, [r1, #0]
 8014a8e:	604b      	str	r3, [r1, #4]
 8014a90:	edc1 7a02 	vstr	s15, [r1, #8]
 8014a94:	e79c      	b.n	80149d0 <__kernel_rem_pio2f+0x494>
 8014a96:	f105 3cff 	add.w	ip, r5, #4294967295
 8014a9a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014aa2:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014aa6:	e6b8      	b.n	801481a <__kernel_rem_pio2f+0x2de>
 8014aa8:	2308      	movs	r3, #8
 8014aaa:	9307      	str	r3, [sp, #28]
 8014aac:	2300      	movs	r3, #0
 8014aae:	9302      	str	r3, [sp, #8]
 8014ab0:	e55f      	b.n	8014572 <__kernel_rem_pio2f+0x36>
 8014ab2:	ee19 3a90 	vmov	r3, s19
 8014ab6:	2d00      	cmp	r5, #0
 8014ab8:	f103 0301 	add.w	r3, r3, #1
 8014abc:	ee09 3a90 	vmov	s19, r3
 8014ac0:	bfc8      	it	gt
 8014ac2:	2202      	movgt	r2, #2
 8014ac4:	f73f ae6e 	bgt.w	80147a4 <__kernel_rem_pio2f+0x268>
 8014ac8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014acc:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8014ad0:	2202      	movs	r2, #2
 8014ad2:	e5f4      	b.n	80146be <__kernel_rem_pio2f+0x182>
 8014ad4:	2100      	movs	r1, #0
 8014ad6:	e691      	b.n	80147fc <__kernel_rem_pio2f+0x2c0>
 8014ad8:	a932      	add	r1, sp, #200	; 0xc8
 8014ada:	eddf 7a34 	vldr	s15, [pc, #208]	; 8014bac <__kernel_rem_pio2f+0x670>
 8014ade:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ae2:	ed33 7a01 	vldmdb	r3!, {s14}
 8014ae6:	4299      	cmp	r1, r3
 8014ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014aec:	d1f9      	bne.n	8014ae2 <__kernel_rem_pio2f+0x5a6>
 8014aee:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8014af2:	bb8a      	cbnz	r2, 8014b58 <__kernel_rem_pio2f+0x61c>
 8014af4:	9b06      	ldr	r3, [sp, #24]
 8014af6:	f1bb 0f00 	cmp.w	fp, #0
 8014afa:	edc3 7a00 	vstr	s15, [r3]
 8014afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b02:	dd0b      	ble.n	8014b1c <__kernel_rem_pio2f+0x5e0>
 8014b04:	a933      	add	r1, sp, #204	; 0xcc
 8014b06:	2301      	movs	r3, #1
 8014b08:	ecb1 7a01 	vldmia	r1!, {s14}
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	459b      	cmp	fp, r3
 8014b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b14:	daf8      	bge.n	8014b08 <__kernel_rem_pio2f+0x5cc>
 8014b16:	b10a      	cbz	r2, 8014b1c <__kernel_rem_pio2f+0x5e0>
 8014b18:	eef1 7a67 	vneg.f32	s15, s15
 8014b1c:	9b06      	ldr	r3, [sp, #24]
 8014b1e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014b22:	e755      	b.n	80149d0 <__kernel_rem_pio2f+0x494>
 8014b24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014b28:	469b      	mov	fp, r3
 8014b2a:	ee10 1a10 	vmov	r1, s0
 8014b2e:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014b32:	e6e9      	b.n	8014908 <__kernel_rem_pio2f+0x3cc>
 8014b34:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8014b38:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014b3c:	9b06      	ldr	r3, [sp, #24]
 8014b3e:	eef1 6a66 	vneg.f32	s13, s13
 8014b42:	eeb1 7a47 	vneg.f32	s14, s14
 8014b46:	eef1 7a67 	vneg.f32	s15, s15
 8014b4a:	edc3 6a00 	vstr	s13, [r3]
 8014b4e:	ed83 7a01 	vstr	s14, [r3, #4]
 8014b52:	edc3 7a02 	vstr	s15, [r3, #8]
 8014b56:	e73b      	b.n	80149d0 <__kernel_rem_pio2f+0x494>
 8014b58:	9b06      	ldr	r3, [sp, #24]
 8014b5a:	eef1 6a67 	vneg.f32	s13, s15
 8014b5e:	f1bb 0f00 	cmp.w	fp, #0
 8014b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b66:	edc3 6a00 	vstr	s13, [r3]
 8014b6a:	dccb      	bgt.n	8014b04 <__kernel_rem_pio2f+0x5c8>
 8014b6c:	e7d4      	b.n	8014b18 <__kernel_rem_pio2f+0x5dc>
 8014b6e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014b70:	2b02      	cmp	r3, #2
 8014b72:	dc0d      	bgt.n	8014b90 <__kernel_rem_pio2f+0x654>
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	dc14      	bgt.n	8014ba2 <__kernel_rem_pio2f+0x666>
 8014b78:	f47f af2a 	bne.w	80149d0 <__kernel_rem_pio2f+0x494>
 8014b7c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014bac <__kernel_rem_pio2f+0x670>
 8014b80:	2a00      	cmp	r2, #0
 8014b82:	f43f af22 	beq.w	80149ca <__kernel_rem_pio2f+0x48e>
 8014b86:	e71e      	b.n	80149c6 <__kernel_rem_pio2f+0x48a>
 8014b88:	9b03      	ldr	r3, [sp, #12]
 8014b8a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014b8e:	e535      	b.n	80145fc <__kernel_rem_pio2f+0xc0>
 8014b90:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014b92:	2b03      	cmp	r3, #3
 8014b94:	f47f af1c 	bne.w	80149d0 <__kernel_rem_pio2f+0x494>
 8014b98:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014bac <__kernel_rem_pio2f+0x670>
 8014b9c:	2a00      	cmp	r2, #0
 8014b9e:	d1c9      	bne.n	8014b34 <__kernel_rem_pio2f+0x5f8>
 8014ba0:	e771      	b.n	8014a86 <__kernel_rem_pio2f+0x54a>
 8014ba2:	eddf 7a02 	vldr	s15, [pc, #8]	; 8014bac <__kernel_rem_pio2f+0x670>
 8014ba6:	e7a2      	b.n	8014aee <__kernel_rem_pio2f+0x5b2>
 8014ba8:	0802af04 	.word	0x0802af04
 8014bac:	00000000 	.word	0x00000000

08014bb0 <__kernel_sinf>:
 8014bb0:	ee10 3a10 	vmov	r3, s0
 8014bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014bb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014bbc:	da04      	bge.n	8014bc8 <__kernel_sinf+0x18>
 8014bbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014bc2:	ee17 3a90 	vmov	r3, s15
 8014bc6:	b35b      	cbz	r3, 8014c20 <__kernel_sinf+0x70>
 8014bc8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014bcc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014c24 <__kernel_sinf+0x74>
 8014bd0:	eddf 5a15 	vldr	s11, [pc, #84]	; 8014c28 <__kernel_sinf+0x78>
 8014bd4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014c2c <__kernel_sinf+0x7c>
 8014bd8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014c30 <__kernel_sinf+0x80>
 8014bdc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014be0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014c34 <__kernel_sinf+0x84>
 8014be4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014be8:	ee20 5a27 	vmul.f32	s10, s0, s15
 8014bec:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014bf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014bf4:	b930      	cbnz	r0, 8014c04 <__kernel_sinf+0x54>
 8014bf6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8014c38 <__kernel_sinf+0x88>
 8014bfa:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014bfe:	eea6 0a85 	vfma.f32	s0, s13, s10
 8014c02:	4770      	bx	lr
 8014c04:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8014c08:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014c0c:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8014c10:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8014c3c <__kernel_sinf+0x8c>
 8014c14:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014c18:	eee5 0a26 	vfma.f32	s1, s10, s13
 8014c1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014c20:	4770      	bx	lr
 8014c22:	bf00      	nop
 8014c24:	2f2ec9d3 	.word	0x2f2ec9d3
 8014c28:	b2d72f34 	.word	0xb2d72f34
 8014c2c:	3638ef1b 	.word	0x3638ef1b
 8014c30:	b9500d01 	.word	0xb9500d01
 8014c34:	3c088889 	.word	0x3c088889
 8014c38:	be2aaaab 	.word	0xbe2aaaab
 8014c3c:	3e2aaaab 	.word	0x3e2aaaab

08014c40 <__kernel_tanf>:
 8014c40:	b508      	push	{r3, lr}
 8014c42:	ee10 3a10 	vmov	r3, s0
 8014c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014c4a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014c4e:	eef0 7a40 	vmov.f32	s15, s0
 8014c52:	da0f      	bge.n	8014c74 <__kernel_tanf+0x34>
 8014c54:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014c58:	ee17 1a10 	vmov	r1, s14
 8014c5c:	bb01      	cbnz	r1, 8014ca0 <__kernel_tanf+0x60>
 8014c5e:	1c43      	adds	r3, r0, #1
 8014c60:	4313      	orrs	r3, r2
 8014c62:	f000 80a0 	beq.w	8014da6 <__kernel_tanf+0x166>
 8014c66:	2801      	cmp	r0, #1
 8014c68:	d003      	beq.n	8014c72 <__kernel_tanf+0x32>
 8014c6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014c6e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014c72:	bd08      	pop	{r3, pc}
 8014c74:	4950      	ldr	r1, [pc, #320]	; (8014db8 <__kernel_tanf+0x178>)
 8014c76:	428a      	cmp	r2, r1
 8014c78:	db12      	blt.n	8014ca0 <__kernel_tanf+0x60>
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	bfb8      	it	lt
 8014c7e:	eef1 7a40 	vneglt.f32	s15, s0
 8014c82:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8014dbc <__kernel_tanf+0x17c>
 8014c86:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8014dc0 <__kernel_tanf+0x180>
 8014c8a:	bfb8      	it	lt
 8014c8c:	eef1 0a60 	vneglt.f32	s1, s1
 8014c90:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014c94:	ee37 0a60 	vsub.f32	s0, s14, s1
 8014c98:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8014dc4 <__kernel_tanf+0x184>
 8014c9c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014ca0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014ca4:	eddf 4a48 	vldr	s9, [pc, #288]	; 8014dc8 <__kernel_tanf+0x188>
 8014ca8:	eddf 5a48 	vldr	s11, [pc, #288]	; 8014dcc <__kernel_tanf+0x18c>
 8014cac:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8014dd0 <__kernel_tanf+0x190>
 8014cb0:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8014dd4 <__kernel_tanf+0x194>
 8014cb4:	4940      	ldr	r1, [pc, #256]	; (8014db8 <__kernel_tanf+0x178>)
 8014cb6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014cba:	428a      	cmp	r2, r1
 8014cbc:	eee7 5a24 	vfma.f32	s11, s14, s9
 8014cc0:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014cc4:	eddf 4a44 	vldr	s9, [pc, #272]	; 8014dd8 <__kernel_tanf+0x198>
 8014cc8:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8014ddc <__kernel_tanf+0x19c>
 8014ccc:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014cd0:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014cd4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014de0 <__kernel_tanf+0x1a0>
 8014cd8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8014de4 <__kernel_tanf+0x1a4>
 8014cdc:	eee4 5a87 	vfma.f32	s11, s9, s14
 8014ce0:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014ce4:	eddf 4a40 	vldr	s9, [pc, #256]	; 8014de8 <__kernel_tanf+0x1a8>
 8014ce8:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8014dec <__kernel_tanf+0x1ac>
 8014cec:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014cf0:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014cf4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8014df0 <__kernel_tanf+0x1b0>
 8014cf8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8014df4 <__kernel_tanf+0x1b4>
 8014cfc:	eea4 6a87 	vfma.f32	s12, s9, s14
 8014d00:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014d04:	eeb0 7a46 	vmov.f32	s14, s12
 8014d08:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014d0c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8014d10:	eeb0 6a60 	vmov.f32	s12, s1
 8014d14:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014d18:	eddf 4a37 	vldr	s9, [pc, #220]	; 8014df8 <__kernel_tanf+0x1b8>
 8014d1c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014d20:	eee5 0a24 	vfma.f32	s1, s10, s9
 8014d24:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8014d28:	da1f      	bge.n	8014d6a <__kernel_tanf+0x12a>
 8014d2a:	2801      	cmp	r0, #1
 8014d2c:	d0a1      	beq.n	8014c72 <__kernel_tanf+0x32>
 8014d2e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d32:	eec7 6a00 	vdiv.f32	s13, s14, s0
 8014d36:	4b31      	ldr	r3, [pc, #196]	; (8014dfc <__kernel_tanf+0x1bc>)
 8014d38:	ee10 2a10 	vmov	r2, s0
 8014d3c:	401a      	ands	r2, r3
 8014d3e:	ee06 2a10 	vmov	s12, r2
 8014d42:	ee16 2a90 	vmov	r2, s13
 8014d46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	ee00 3a10 	vmov	s0, r3
 8014d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d54:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014d58:	eef0 7a47 	vmov.f32	s15, s14
 8014d5c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8014d60:	eee0 7a80 	vfma.f32	s15, s1, s0
 8014d64:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8014d68:	bd08      	pop	{r3, pc}
 8014d6a:	ee07 0a10 	vmov	s14, r0
 8014d6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d72:	ee60 5a00 	vmul.f32	s11, s0, s0
 8014d76:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014d7a:	179b      	asrs	r3, r3, #30
 8014d7c:	eec5 6a80 	vdiv.f32	s13, s11, s0
 8014d80:	f003 0302 	and.w	r3, r3, #2
 8014d84:	f1c3 0301 	rsb	r3, r3, #1
 8014d88:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014d8c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8014d90:	ee00 3a10 	vmov	s0, r3
 8014d94:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014d98:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014d9c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8014da0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014da4:	bd08      	pop	{r3, pc}
 8014da6:	f7fe ffa9 	bl	8013cfc <fabsf>
 8014daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014dae:	eef0 7a40 	vmov.f32	s15, s0
 8014db2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014db6:	bd08      	pop	{r3, pc}
 8014db8:	3f2ca140 	.word	0x3f2ca140
 8014dbc:	33222168 	.word	0x33222168
 8014dc0:	3f490fda 	.word	0x3f490fda
 8014dc4:	00000000 	.word	0x00000000
 8014dc8:	b79bae5f 	.word	0xb79bae5f
 8014dcc:	38a3f445 	.word	0x38a3f445
 8014dd0:	37d95384 	.word	0x37d95384
 8014dd4:	3895c07a 	.word	0x3895c07a
 8014dd8:	3a1a26c8 	.word	0x3a1a26c8
 8014ddc:	398137b9 	.word	0x398137b9
 8014de0:	3b6b6916 	.word	0x3b6b6916
 8014de4:	3abede48 	.word	0x3abede48
 8014de8:	3cb327a4 	.word	0x3cb327a4
 8014dec:	3c11371f 	.word	0x3c11371f
 8014df0:	3e088889 	.word	0x3e088889
 8014df4:	3d5d0dd1 	.word	0x3d5d0dd1
 8014df8:	3eaaaaab 	.word	0x3eaaaaab
 8014dfc:	fffff000 	.word	0xfffff000

08014e00 <floorf>:
 8014e00:	ee10 2a10 	vmov	r2, s0
 8014e04:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014e08:	3b7f      	subs	r3, #127	; 0x7f
 8014e0a:	2b16      	cmp	r3, #22
 8014e0c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014e10:	dc28      	bgt.n	8014e64 <floorf+0x64>
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	db18      	blt.n	8014e48 <floorf+0x48>
 8014e16:	491a      	ldr	r1, [pc, #104]	; (8014e80 <floorf+0x80>)
 8014e18:	4119      	asrs	r1, r3
 8014e1a:	420a      	tst	r2, r1
 8014e1c:	d021      	beq.n	8014e62 <floorf+0x62>
 8014e1e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014e84 <floorf+0x84>
 8014e22:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2e:	dd18      	ble.n	8014e62 <floorf+0x62>
 8014e30:	2a00      	cmp	r2, #0
 8014e32:	da04      	bge.n	8014e3e <floorf+0x3e>
 8014e34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8014e38:	fa40 f303 	asr.w	r3, r0, r3
 8014e3c:	441a      	add	r2, r3
 8014e3e:	ea22 0301 	bic.w	r3, r2, r1
 8014e42:	ee00 3a10 	vmov	s0, r3
 8014e46:	4770      	bx	lr
 8014e48:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014e84 <floorf+0x84>
 8014e4c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e58:	dd03      	ble.n	8014e62 <floorf+0x62>
 8014e5a:	2a00      	cmp	r2, #0
 8014e5c:	db08      	blt.n	8014e70 <floorf+0x70>
 8014e5e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8014e88 <floorf+0x88>
 8014e62:	4770      	bx	lr
 8014e64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014e68:	d3fb      	bcc.n	8014e62 <floorf+0x62>
 8014e6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e6e:	4770      	bx	lr
 8014e70:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014e74:	2900      	cmp	r1, #0
 8014e76:	bf18      	it	ne
 8014e78:	eeb0 0a67 	vmovne.f32	s0, s15
 8014e7c:	4770      	bx	lr
 8014e7e:	bf00      	nop
 8014e80:	007fffff 	.word	0x007fffff
 8014e84:	7149f2ca 	.word	0x7149f2ca
 8014e88:	00000000 	.word	0x00000000

08014e8c <scalbnf>:
 8014e8c:	b082      	sub	sp, #8
 8014e8e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014e92:	9b01      	ldr	r3, [sp, #4]
 8014e94:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014e98:	d02a      	beq.n	8014ef0 <scalbnf+0x64>
 8014e9a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014e9e:	d223      	bcs.n	8014ee8 <scalbnf+0x5c>
 8014ea0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014ea4:	d128      	bne.n	8014ef8 <scalbnf+0x6c>
 8014ea6:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014eaa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014f54 <scalbnf+0xc8>
 8014eae:	4b2a      	ldr	r3, [pc, #168]	; (8014f58 <scalbnf+0xcc>)
 8014eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014eb4:	4298      	cmp	r0, r3
 8014eb6:	edcd 7a01 	vstr	s15, [sp, #4]
 8014eba:	db37      	blt.n	8014f2c <scalbnf+0xa0>
 8014ebc:	9b01      	ldr	r3, [sp, #4]
 8014ebe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014ec2:	3a19      	subs	r2, #25
 8014ec4:	4402      	add	r2, r0
 8014ec6:	2afe      	cmp	r2, #254	; 0xfe
 8014ec8:	dd1a      	ble.n	8014f00 <scalbnf+0x74>
 8014eca:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8014f5c <scalbnf+0xd0>
 8014ece:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8014f60 <scalbnf+0xd4>
 8014ed2:	9b01      	ldr	r3, [sp, #4]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	eef0 7a40 	vmov.f32	s15, s0
 8014eda:	bfb8      	it	lt
 8014edc:	eeb0 0a47 	vmovlt.f32	s0, s14
 8014ee0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ee4:	b002      	add	sp, #8
 8014ee6:	4770      	bx	lr
 8014ee8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014eec:	b002      	add	sp, #8
 8014eee:	4770      	bx	lr
 8014ef0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014ef4:	b002      	add	sp, #8
 8014ef6:	4770      	bx	lr
 8014ef8:	0dd2      	lsrs	r2, r2, #23
 8014efa:	4402      	add	r2, r0
 8014efc:	2afe      	cmp	r2, #254	; 0xfe
 8014efe:	dce4      	bgt.n	8014eca <scalbnf+0x3e>
 8014f00:	2a00      	cmp	r2, #0
 8014f02:	dc0b      	bgt.n	8014f1c <scalbnf+0x90>
 8014f04:	f112 0f16 	cmn.w	r2, #22
 8014f08:	da17      	bge.n	8014f3a <scalbnf+0xae>
 8014f0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014f0e:	4298      	cmp	r0, r3
 8014f10:	dcdb      	bgt.n	8014eca <scalbnf+0x3e>
 8014f12:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8014f64 <scalbnf+0xd8>
 8014f16:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014f68 <scalbnf+0xdc>
 8014f1a:	e7da      	b.n	8014ed2 <scalbnf+0x46>
 8014f1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f20:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014f24:	ee00 3a10 	vmov	s0, r3
 8014f28:	b002      	add	sp, #8
 8014f2a:	4770      	bx	lr
 8014f2c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014f64 <scalbnf+0xd8>
 8014f30:	eddd 7a01 	vldr	s15, [sp, #4]
 8014f34:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014f38:	e7d8      	b.n	8014eec <scalbnf+0x60>
 8014f3a:	3219      	adds	r2, #25
 8014f3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f40:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014f44:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014f6c <scalbnf+0xe0>
 8014f48:	ee07 3a10 	vmov	s14, r3
 8014f4c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014f50:	e7cc      	b.n	8014eec <scalbnf+0x60>
 8014f52:	bf00      	nop
 8014f54:	4c000000 	.word	0x4c000000
 8014f58:	ffff3cb0 	.word	0xffff3cb0
 8014f5c:	7149f2ca 	.word	0x7149f2ca
 8014f60:	f149f2ca 	.word	0xf149f2ca
 8014f64:	0da24260 	.word	0x0da24260
 8014f68:	8da24260 	.word	0x8da24260
 8014f6c:	33000000 	.word	0x33000000

08014f70 <_init>:
 8014f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f72:	bf00      	nop
 8014f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f76:	bc08      	pop	{r3}
 8014f78:	469e      	mov	lr, r3
 8014f7a:	4770      	bx	lr

08014f7c <_fini>:
 8014f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f7e:	bf00      	nop
 8014f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f82:	bc08      	pop	{r3}
 8014f84:	469e      	mov	lr, r3
 8014f86:	4770      	bx	lr
