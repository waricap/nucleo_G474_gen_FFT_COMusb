
nucleo_G474_gen_FFT_COMusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015228  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015fb0  08015408  08015408  00025408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b3b8  0802b3b8  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  0802b3b8  0802b3b8  0003b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b3c0  0802b3c0  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b3c0  0802b3c0  0003b3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b3c4  0802b3c4  0003b3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0802b3c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131c8  200002b0  0802b678  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20013478  0802b678  00043478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f089  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005279  00000000  00000000  0006f369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed8  00000000  00000000  000745e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  000764c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f606  00000000  00000000  000781b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029fb7  00000000  00000000  000a77be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013a3bd  00000000  00000000  000d1775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0020bb32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099e0  00000000  00000000  0020bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002946  00000000  00000000  002155d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b0 	.word	0x200002b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080153f0 	.word	0x080153f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002b4 	.word	0x200002b4
 800021c:	080153f0 	.word	0x080153f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f5 	b.w	80010e4 <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e fa7d 	bl	800f600 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_ADC1_Init+0xf4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_ADC1_Init+0xf4>)
 800112e:	2204      	movs	r2, #4
 8001130:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_ADC1_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001140:	2201      	movs	r2, #1
 8001142:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_ADC1_Init+0xf4>)
 800114e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0xf4>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0xf4>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <MX_ADC1_Init+0xf4>)
 8001176:	f004 f8c7 	bl	8005308 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001180:	f002 fcb4 	bl	8003aec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_ADC1_Init+0xf4>)
 800119a:	f005 f9a5 	bl	80064e8 <HAL_ADCEx_MultiModeConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80011a4:	f002 fca2 	bl	8003aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_ADC1_Init+0xf8>)
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b8:	2304      	movs	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0xf4>)
 80011c6:	f004 fa75 	bl	80056b4 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80011d0:	f002 fc8c 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002cc 	.word	0x200002cc
 80011e0:	04300002 	.word	0x04300002

080011e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e fa05 	bl	800f600 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <MX_ADC2_Init+0xb8>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_ADC2_Init+0xb4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_ADC2_Init+0xb4>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_ADC2_Init+0xb4>)
 800121c:	2204      	movs	r2, #4
 800121e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_ADC2_Init+0xb4>)
 800122e:	2201      	movs	r2, #1
 8001230:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_ADC2_Init+0xb4>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_ADC2_Init+0xb4>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001254:	f004 f858 	bl	8005308 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f002 fc45 	bl	8003aec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC2_Init+0xbc>)
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001266:	2306      	movs	r3, #6
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126e:	237f      	movs	r3, #127	; 0x7f
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001272:	2304      	movs	r3, #4
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC2_Init+0xb4>)
 8001280:	f004 fa18 	bl	80056b4 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800128a:	f002 fc2f 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000338 	.word	0x20000338
 800129c:	50000100 	.word	0x50000100
 80012a0:	1d500080 	.word	0x1d500080

080012a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a0      	sub	sp, #128	; 0x80
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00e f99b 	bl	800f600 <memset>
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d16a      	bne.n	80013aa <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80012da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fdfb 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f0:	f002 fbfc 	bl	8003aec <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fe:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f006 f85c 	bl	8007408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_ADC_MspInit+0x1f8>)
 8001354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001358:	2205      	movs	r2, #5
 800135a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 8001386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138c:	4842      	ldr	r0, [pc, #264]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 800138e:	f005 fcc1 	bl	8006d14 <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001398:	f002 fba8 	bl	8003aec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_ADC_MspInit+0x1f4>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013a8:	e06d      	b.n	8001486 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_ADC_MspInit+0x1fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d168      	bne.n	8001486 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fd8b 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80013d0:	f002 fb8c 	bl	8003aec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_ADC_MspInit+0x1ec>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_ADC_MspInit+0x1f0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	; (80014a4 <HAL_ADC_MspInit+0x200>)
 800142a:	f005 ffed 	bl	8007408 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0x208>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800146c:	f005 fc52 	bl	8006d14 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8001476:	f002 fb39 	bl	8003aec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_ADC_MspInit+0x204>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001486:	bf00      	nop
 8001488:	3780      	adds	r7, #128	; 0x80
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000464 	.word	0x20000464
 8001494:	40021000 	.word	0x40021000
 8001498:	200003a4 	.word	0x200003a4
 800149c:	40020008 	.word	0x40020008
 80014a0:	50000100 	.word	0x50000100
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20000404 	.word	0x20000404
 80014ac:	40020408 	.word	0x40020408

080014b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CRC_Init+0x54>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <MX_CRC_Init+0x58>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_CRC_Init+0x54>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_CRC_Init+0x54>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CRC_Init+0x54>)
 80014c8:	f248 0205 	movw	r2, #32773	; 0x8005
 80014cc:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CRC_Init+0x54>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_CRC_Init+0x54>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CRC_Init+0x54>)
 80014de:	2220      	movs	r2, #32
 80014e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_CRC_Init+0x54>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CRC_Init+0x54>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CRC_Init+0x54>)
 80014f0:	f005 fa12 	bl	8006918 <HAL_CRC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80014fa:	f002 faf7 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000468 	.word	0x20000468
 8001508:	40023000 	.word	0x40023000

0800150c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_CRC_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6493      	str	r3, [r2, #72]	; 0x48
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_CRC_MspInit+0x3c>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023000 	.word	0x40023000
 8001548:	40021000 	.word	0x40021000

0800154c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel4
  */
void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_DMA_Init+0x104>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	4a3e      	ldr	r2, [pc, #248]	; (8001650 <MX_DMA_Init+0x104>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6493      	str	r3, [r2, #72]	; 0x48
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_DMA_Init+0x104>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <MX_DMA_Init+0x104>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <MX_DMA_Init+0x104>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6493      	str	r3, [r2, #72]	; 0x48
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <MX_DMA_Init+0x104>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <MX_DMA_Init+0x104>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <MX_DMA_Init+0x104>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6493      	str	r3, [r2, #72]	; 0x48
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_DMA_Init+0x104>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <MX_DMA_Init+0x108>)
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <MX_DMA_Init+0x10c>)
 800159e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <MX_DMA_Init+0x108>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_DMA_Init+0x108>)
 80015a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ac:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_DMA_Init+0x108>)
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MX_DMA_Init+0x108>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_DMA_Init+0x108>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_DMA_Init+0x108>)
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_DMA_Init+0x108>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_DMA_Init+0x108>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <MX_DMA_Init+0x108>)
 80015d8:	f005 fb9c 	bl	8006d14 <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 80015e2:	f002 fa83 	bl	8003aec <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f005 f95f 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f005 f976 	bl	80068e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200c      	movs	r0, #12
 80015fc:	f005 f957 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001600:	200c      	movs	r0, #12
 8001602:	f005 f96e 	bl	80068e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f005 f94f 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001610:	200d      	movs	r0, #13
 8001612:	f005 f966 	bl	80068e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200e      	movs	r0, #14
 800161c:	f005 f947 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001620:	200e      	movs	r0, #14
 8001622:	f005 f95e 	bl	80068e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200f      	movs	r0, #15
 800162c:	f005 f93f 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001630:	200f      	movs	r0, #15
 8001632:	f005 f956 	bl	80068e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2038      	movs	r0, #56	; 0x38
 800163c:	f005 f937 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001640:	2038      	movs	r0, #56	; 0x38
 8001642:	f005 f94e 	bl	80068e2 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	2000048c 	.word	0x2000048c
 8001658:	40020044 	.word	0x40020044

0800165c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <MX_GPIO_Init+0x11c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80016d8:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_GPIO_Init+0x120>)
 80016da:	f006 f82f 	bl	800773c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f006 f829 	bl	800773c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <MX_GPIO_Init+0x120>)
 8001700:	f005 fe82 	bl	8007408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 8001704:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <MX_GPIO_Init+0x120>)
 800171e:	f005 fe73 	bl	8007408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001722:	2320      	movs	r3, #32
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f005 fe64 	bl	8007408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001746:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f005 fe55 	bl	8007408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2028      	movs	r0, #40	; 0x28
 8001764:	f005 f8a3 	bl	80068ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001768:	2028      	movs	r0, #40	; 0x28
 800176a:	f005 f8ba 	bl	80068e2 <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	48000800 	.word	0x48000800

08001780 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ac      	sub	sp, #176	; 0xb0
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8001786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8001796:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80017a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80017b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	2260      	movs	r2, #96	; 0x60
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00d ff1a 	bl	800f600 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017d8:	4a73      	ldr	r2, [pc, #460]	; (80019a8 <MX_HRTIM1_Init+0x228>)
 80017da:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	609a      	str	r2, [r3, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_MASTER_CMP1;
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 80017f0:	4b6c      	ldr	r3, [pc, #432]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	615a      	str	r2, [r3, #20]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80017f8:	486a      	ldr	r0, [pc, #424]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80017fa:	f005 ffe9 	bl	80077d0 <HAL_HRTIM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001804:	f002 f972 	bl	8003aec <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001808:	210c      	movs	r1, #12
 800180a:	4866      	ldr	r0, [pc, #408]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800180c:	f006 f8b0 	bl	8007970 <HAL_HRTIM_DLLCalibrationStart>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001816:	f002 f969 	bl	8003aec <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800181a:	210a      	movs	r1, #10
 800181c:	4861      	ldr	r0, [pc, #388]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800181e:	f006 f8ff 	bl	8007a20 <HAL_HRTIM_PollForDLLCalibration>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001828:	f002 f960 	bl	8003aec <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	485d      	ldr	r0, [pc, #372]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001830:	f006 f9b1 	bl	8007b96 <HAL_HRTIM_EventPrescalerConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_HRTIM1_Init+0xbe>
  {
    Error_Handler();
 800183a:	f002 f957 	bl	8003aec <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EEV1SRC_TIM1_TRGO;
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 8001856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185a:	461a      	mov	r2, r3
 800185c:	2101      	movs	r1, #1
 800185e:	4851      	ldr	r0, [pc, #324]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001860:	f006 f96a 	bl	8007b38 <HAL_HRTIM_EventConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 800186a:	f002 f93f 	bl	8003aec <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	484c      	ldr	r0, [pc, #304]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001872:	f006 fb89 	bl	8007f88 <HAL_HRTIM_FaultPrescalerConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_HRTIM1_Init+0x100>
  {
    Error_Handler();
 800187c:	f002 f936 	bl	8003aec <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_INTERNAL;
 8001880:	2301      	movs	r3, #1
 8001882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 8001898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800189c:	461a      	mov	r2, r3
 800189e:	2101      	movs	r1, #1
 80018a0:	4840      	ldr	r0, [pc, #256]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018a2:	f006 f9b1 	bl	8007c08 <HAL_HRTIM_FaultConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_HRTIM1_Init+0x130>
  {
    Error_Handler();
 80018ac:	f002 f91e 	bl	8003aec <Error_Handler>
  }
  pFaultBlkCfg.Threshold = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018c6:	461a      	mov	r2, r3
 80018c8:	2101      	movs	r1, #1
 80018ca:	4836      	ldr	r0, [pc, #216]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018cc:	f006 fc82 	bl	80081d4 <HAL_HRTIM_FaultCounterConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 80018d6:	f002 f909 	bl	8003aec <Error_Handler>
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80018da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018de:	461a      	mov	r2, r3
 80018e0:	2101      	movs	r1, #1
 80018e2:	4830      	ldr	r0, [pc, #192]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018e4:	f006 fb8a 	bl	8007ffc <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_HRTIM1_Init+0x172>
  {
    Error_Handler();
 80018ee:	f002 f8fd 	bl	8003aec <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_ENABLED);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 80018f8:	f006 fd64 	bl	80083c4 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 1700;
 80018fc:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	677b      	str	r3, [r7, #116]	; 0x74
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001906:	2300      	movs	r3, #0
 8001908:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800190a:	2308      	movs	r3, #8
 800190c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800190e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001912:	461a      	mov	r2, r3
 8001914:	2106      	movs	r1, #6
 8001916:	4823      	ldr	r0, [pc, #140]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001918:	f006 f8b6 	bl	8007a88 <HAL_HRTIM_TimeBaseConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_HRTIM1_Init+0x1a6>
  {
    Error_Handler();
 8001922:	f002 f8e3 	bl	8003aec <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  pTimerCfg.DMASrcAddress = 0x0000;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  pTimerCfg.DMADstAddress = 0x0000;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  pTimerCfg.DMASize = 0x1;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800195e:	2300      	movs	r3, #0
 8001960:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	461a      	mov	r2, r3
 8001968:	2106      	movs	r1, #6
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 800196c:	f006 fdac 	bl	80084c8 <HAL_HRTIM_WaveformTimerConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8001976:	f002 f8b9 	bl	8003aec <Error_Handler>
  }
  pCompareCfg.CompareValue = 850;
 800197a:	f240 3352 	movw	r3, #850	; 0x352
 800197e:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2201      	movs	r2, #1
 8001984:	2106      	movs	r1, #6
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001988:	f006 fe2c 	bl	80085e4 <HAL_HRTIM_WaveformCompareConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 8001992:	f002 f8ab 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_HRTIM1_Init+0x224>)
 8001998:	f000 f828 	bl	80019ec <HAL_HRTIM_MspPostInit>

}
 800199c:	bf00      	nop
 800199e:	37b0      	adds	r7, #176	; 0xb0
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200004ec 	.word	0x200004ec
 80019a8:	40016800 	.word	0x40016800

080019ac <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_HRTIM_MspInit+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10b      	bne.n	80019d6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_HRTIM_MspInit+0x3c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40016800 	.word	0x40016800
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_HRTIM_MspPostInit+0x64>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11b      	bne.n	8001a46 <HAL_HRTIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_HRTIM_MspPostInit+0x68>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB1     ------> HRTIM1_SCOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a26:	2302      	movs	r3, #2
 8001a28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001a36:	230d      	movs	r3, #13
 8001a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a42:	f005 fce1 	bl	8007408 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40016800 	.word	0x40016800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000400 	.word	0x48000400

08001a5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a84:	e000      	b.n	8001a88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f9      	beq.n	8001a86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abe:	f043 0204 	orr.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <__critical_enter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	static uint32_t lock_nesting_count = 0;
	void __critical_enter(void)
	{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
		__disable_irq();
		++lock_nesting_count;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__critical_enter+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <__critical_enter+0x1c>)
 8001ae4:	6013      	str	r3, [r2, #0]
	}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20011f34 	.word	0x20011f34

08001af4 <__critical_exit>:
	void __critical_exit(void)
	{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
		/* Unlock interrupts only when we are exiting the outermost nested call. */
		--lock_nesting_count;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <__critical_exit+0x24>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <__critical_exit+0x24>)
 8001b00:	6013      	str	r3, [r2, #0]
		if (lock_nesting_count == 0) {
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <__critical_exit+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b0a:	b662      	cpsie	i
}
 8001b0c:	bf00      	nop
			__enable_irq();
		}
	}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20011f34 	.word	0x20011f34
 8001b1c:	00000000 	.word	0x00000000

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b08d      	sub	sp, #52	; 0x34
 8001b26:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// test for github
	// ===================== тики замеряем, время работы вычисляем
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT
 8001b28:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <main+0x288>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a9e      	ldr	r2, [pc, #632]	; (8001da8 <main+0x288>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT = 0;// обнуляем значение
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <main+0x28c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
	DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик, здесь и один раз
 8001b3a:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <main+0x290>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a9c      	ldr	r2, [pc, #624]	; (8001db0 <main+0x290>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b46:	f003 f926 	bl	8004d96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4a:	f001 f9b3 	bl	8002eb4 <SystemClock_Config>
  // 4 -много ошибок,  256 - медлено,   16 - вроде как норм

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4e:	f7ff fd85 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b52:	f7ff fcfb 	bl	800154c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b56:	f7ff fac7 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b5a:	f7ff fb43 	bl	80011e4 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001b5e:	f7ff fe0f 	bl	8001780 <MX_HRTIM1_Init>
  MX_TIM1_Init();
 8001b62:	f002 fa09 	bl	8003f78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b66:	f002 fb07 	bl	8004178 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b6a:	f002 fb7f 	bl	800426c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b6e:	f002 fc2b 	bl	80043c8 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001b72:	f002 fc61 	bl	8004438 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001b76:	f002 fbf1 	bl	800435c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001b7a:	f002 fe4b 	bl	8004814 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b7e:	f002 fe99 	bl	80048b4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001b82:	f7ff fc95 	bl	80014b0 <MX_CRC_Init>
  MX_TIM17_Init();
 8001b86:	f002 fc7d 	bl	8004484 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8001b8a:	f002 fedf 	bl	800494c <MX_USART3_UART_Init>
  // TIM6 - используем для модбуса, делает прерывания через 50uS, а там библиотека ModBUS  работает
  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // TIM16 - используем для увеличения уменьшения мощности, выдает тики 1uS, прерывания нет, в цикле смотрим CNT
  // TIM17 - используем для сканирования по частоте, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
  // �?нициализируйте стек протоколов в режиме RTU для SLAVE устройства с адресом 1 = 0x01
  adr_huart_MB = &huart1;
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <main+0x294>)
 8001b90:	4a89      	ldr	r2, [pc, #548]	; (8001db8 <main+0x298>)
 8001b92:	601a      	str	r2, [r3, #0]
   eMBInit( MB_RTU, MB_ADDRESS/*address*/, 1/*LPUART1*/, adr_huart_MB->Init.BaudRate/*115200*/ , adr_huart_MB->Init.Parity/*UART_PARITY_NONE*/ );
 8001b94:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <main+0x294>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <main+0x294>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2107      	movs	r1, #7
 8001baa:	2000      	movs	r0, #0
 8001bac:	f00c f946 	bl	800de3c <eMBInit>

   // Включите стек протоколов Modbus.
   eMBEnable();
 8001bb0:	f00c f970 	bl	800de94 <eMBEnable>

	  HAL_Delay(300);
 8001bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bb8:	f003 f95e 	bl	8004e78 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f005 fdd3 	bl	800776c <HAL_GPIO_TogglePin>

  printf("MX_xxx_Init(); \n");
 8001bc6:	487d      	ldr	r0, [pc, #500]	; (8001dbc <main+0x29c>)
 8001bc8:	f00e fd64 	bl	8010694 <puts>
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	e086      	b.n	8001ce0 <main+0x1c0>
  {
	  data_I[i] = (uint16_t) 1000 * sinf(((float)i)/64);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001dc0 <main+0x2a0>
 8001be0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001be4:	eeb0 0a47 	vmov.f32	s0, s14
 8001be8:	f012 f9ee 	bl	8013fc8 <sinf>
 8001bec:	eef0 7a40 	vmov.f32	s15, s0
 8001bf0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001dc4 <main+0x2a4>
 8001bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	b299      	uxth	r1, r3
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <main+0x2a8>)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_U[i] = (uint16_t) cosf(((float)i)/64);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001dc0 <main+0x2a0>
 8001c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c20:	f012 f99a 	bl	8013f58 <cosf>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b299      	uxth	r1, r3
 8001c32:	4a66      	ldr	r2, [pc, #408]	; (8001dcc <main+0x2ac>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_P[i] = (uint16_t) 100 * sinf(((float)i)/64);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001dc0 <main+0x2a0>
 8001c48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c50:	f012 f9ba 	bl	8013fc8 <sinf>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001dd0 <main+0x2b0>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <main+0x2b4>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_R[i] = (uint16_t) 100 * cosf(((float)i)/64);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001dc0 <main+0x2a0>
 8001c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c84:	eeb0 0a47 	vmov.f32	s0, s14
 8001c88:	f012 f966 	bl	8013f58 <cosf>
 8001c8c:	eef0 7a40 	vmov.f32	s15, s0
 8001c90:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001dd0 <main+0x2b0>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c9c:	ee17 3a90 	vmov	r3, s15
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <main+0x2b8>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  data_Z[i] = (uint16_t) tanf(((float)i)/64);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001dc0 <main+0x2a0>
 8001cb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc0:	f012 f9bc 	bl	801403c <tanf>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <main+0x2bc>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<LEN_FLOAT_ARRAY_SEND_UDP; i++)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	f6ff af74 	blt.w	8001bd2 <main+0xb2>
	  //data_Q[i] = (uint16_t) i;
	  //data_X[i] = (uint16_t) i+1024;
	  //data_Y[i] = (uint16_t) i+4096;
  }
  //data_Q[1024] = 0;
  data_I[1024] = 1;
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <main+0x2a8>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_U[1024] = 2;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <main+0x2ac>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_P[1024] = 3;
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <main+0x2b4>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_R[1024] = 4;
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <main+0x2b8>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
  data_Z[1024] = 5;
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <main+0x2bc>)
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

  // ============== LPUART =============== LPUART ============= LPUART ==================
  // вначале надо получить данные, пока будут нулевые, ещё нет никаких,
  // но потом прием данных будет активироваться окончанием передачи.
  // Дальше приемник не будет активирован. активация приемника происходит только 1 раз, после передачи
	  wTransferState_RX = TRANSFER_RX_START; // TRANSFER_WAIT - пока ждем приема настроечных данных
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <main+0x2c0>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
	  wTransferState_TX = TRANSFER_TX_Stop;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <main+0x2c4>)
 8001d1a:	2209      	movs	r2, #9
 8001d1c:	601a      	str	r2, [r3, #0]
  // if ((wTransferState != TRANSFER_ERROR ) & (status_SPI == HAL_OK))
  // { ; } // теперь надо извлечь все надобные настройки из полученого массива   cmd_array_SPI[] , только потом мохно будет запускать генерацию
  // else
  // { default; }

  HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_MASTER);
 8001d1e:	2106      	movs	r1, #6
 8001d20:	4831      	ldr	r0, [pc, #196]	; (8001de8 <main+0x2c8>)
 8001d22:	f005 fed9 	bl	8007ad8 <HAL_HRTIM_SimpleBaseStart>

  // TIM1 - главный таймер выдает управление ключами моста
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-низ PC0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4830      	ldr	r0, [pc, #192]	; (8001dec <main+0x2cc>)
 8001d2a:	f008 fcf7 	bl	800a71c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); 	// плечо №1-верх PА7
 8001d2e:	2100      	movs	r1, #0
 8001d30:	482e      	ldr	r0, [pc, #184]	; (8001dec <main+0x2cc>)
 8001d32:	f009 fe81 	bl	800ba38 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-низ PС2
 8001d36:	2108      	movs	r1, #8
 8001d38:	482c      	ldr	r0, [pc, #176]	; (8001dec <main+0x2cc>)
 8001d3a:	f008 fcef 	bl	800a71c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); 	// плечо №2-верх PB9
 8001d3e:	2108      	movs	r1, #8
 8001d40:	482a      	ldr	r0, [pc, #168]	; (8001dec <main+0x2cc>)
 8001d42:	f009 fe79 	bl	800ba38 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		// запаздывание CH3 относительно CH1 - это ширина импульса накачки, мощность
 8001d46:	210c      	movs	r1, #12
 8001d48:	4828      	ldr	r0, [pc, #160]	; (8001dec <main+0x2cc>)
 8001d4a:	f008 fce7 	bl	800a71c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); 	// PA9 синхро�?мпульс - начало периода переключения ключей
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4826      	ldr	r0, [pc, #152]	; (8001dec <main+0x2cc>)
 8001d52:	f008 fce3 	bl	800a71c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim7); // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <main+0x2d0>)
 8001d58:	f008 fb68 	bl	800a42c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);// tim16 тактуется 1 MHz,  по условию if (htim16.Instance->CNT >10000)   будет плавно меняться мощность на одну ступеньку
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <main+0x2d4>)
 8001d5e:	f008 fb65 	bl	800a42c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17); // tim17 тактуется 10 MHz, по условию if (htim17.Instance->CNT > time_step*10)   будет работать скольжение по частоте
 8001d62:	4825      	ldr	r0, [pc, #148]	; (8001df8 <main+0x2d8>)
 8001d64:	f008 fb62 	bl	800a42c <HAL_TIM_Base_Start>

  // для запуска 256 замеров, от HRTIM_SCOUT / 2, будут перекрывать 4 периода
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4824      	ldr	r0, [pc, #144]	; (8001dfc <main+0x2dc>)
 8001d6c:	f008 fcd6 	bl	800a71c <HAL_TIM_PWM_Start>

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);      // синхроимпульс для осцила, 6 тактов от таймера TIM1 отсчитывает
 8001d70:	2100      	movs	r1, #0
 8001d72:	4823      	ldr	r0, [pc, #140]	; (8001e00 <main+0x2e0>)
 8001d74:	f008 fcd2 	bl	800a71c <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1,  ADC_SINGLE_ENDED );
 8001d78:	217f      	movs	r1, #127	; 0x7f
 8001d7a:	4822      	ldr	r0, [pc, #136]	; (8001e04 <main+0x2e4>)
 8001d7c:	f004 fa96 	bl	80062ac <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2,  ADC_SINGLE_ENDED );
 8001d80:	217f      	movs	r1, #127	; 0x7f
 8001d82:	4821      	ldr	r0, [pc, #132]	; (8001e08 <main+0x2e8>)
 8001d84:	f004 fa92 	bl	80062ac <HAL_ADCEx_Calibration_Start>
	uint32_t temp_length = LENGTH_SAMPLES; // 32 замера, по 16 в начале и в конце, будут отброшены
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	613b      	str	r3, [r7, #16]
    HAL_ADCEx_MultiModeStart_DMA(&hadc1, zamer_adc1_2, temp_length);
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	491e      	ldr	r1, [pc, #120]	; (8001e0c <main+0x2ec>)
 8001d92:	481c      	ldr	r0, [pc, #112]	; (8001e04 <main+0x2e4>)
 8001d94:	f004 faec 	bl	8006370 <HAL_ADCEx_MultiModeStart_DMA>
   // LL_ADC_REG_StopConversion(hadc1->Instance);  - это есть стоп АЦП произвольно по желанию, по тесту в любом месте
   // LL_ADC_REG_StartConversion(hadc1.Instance);  - это есть старт АЦП произвольно по желанию, если был остановлен

    size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <main+0x2f0>)
 8001d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001da0:	2300      	movs	r3, #0
 8001da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001da4:	e047      	b.n	8001e36 <main+0x316>
 8001da6:	bf00      	nop
 8001da8:	e000edfc 	.word	0xe000edfc
 8001dac:	e0001004 	.word	0xe0001004
 8001db0:	e0001000 	.word	0xe0001000
 8001db4:	20000610 	.word	0x20000610
 8001db8:	20012154 	.word	0x20012154
 8001dbc:	08015408 	.word	0x08015408
 8001dc0:	42800000 	.word	0x42800000
 8001dc4:	447a0000 	.word	0x447a0000
 8001dc8:	2000f6ac 	.word	0x2000f6ac
 8001dcc:	2000feb0 	.word	0x2000feb0
 8001dd0:	42c80000 	.word	0x42c80000
 8001dd4:	200106b4 	.word	0x200106b4
 8001dd8:	20010eb8 	.word	0x20010eb8
 8001ddc:	200116bc 	.word	0x200116bc
 8001de0:	20000028 	.word	0x20000028
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	200004ec 	.word	0x200004ec
 8001dec:	20011f40 	.word	0x20011f40
 8001df0:	20012070 	.word	0x20012070
 8001df4:	200120bc 	.word	0x200120bc
 8001df8:	20012108 	.word	0x20012108
 8001dfc:	20011f8c 	.word	0x20011f8c
 8001e00:	20011fd8 	.word	0x20011fd8
 8001e04:	200002cc 	.word	0x200002cc
 8001e08:	20000338 	.word	0x20000338
 8001e0c:	2000062c 	.word	0x2000062c
 8001e10:	2000662c 	.word	0x2000662c
		{
			data_adc1[ic] =0;
 8001e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e16:	4a9c      	ldr	r2, [pc, #624]	; (8002088 <main+0x568>)
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
			data_adc2[ic] =0;
 8001e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e24:	4a99      	ldr	r2, [pc, #612]	; (800208c <main+0x56c>)
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
	for (uint16_t ic =0; ic <size_data_adc1; ic++)//обнулим для начала
 8001e30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e32:	3301      	adds	r3, #1
 8001e34:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001e38:	4b95      	ldr	r3, [pc, #596]	; (8002090 <main+0x570>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbe9      	blt.n	8001e14 <main+0x2f4>
		}

	  // Select Callbacks functions called after Transfer complete and Transfer error
	  // Выберите функции Callbacks, вызываемые после завершения передачи и Ошибки передачи
	  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_CPLT_CB_ID, Mem_to_Mem_Complete);
 8001e40:	4a94      	ldr	r2, [pc, #592]	; (8002094 <main+0x574>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4894      	ldr	r0, [pc, #592]	; (8002098 <main+0x578>)
 8001e46:	f005 f9f7 	bl	8007238 <HAL_DMA_RegisterCallback>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8001e4a:	4994      	ldr	r1, [pc, #592]	; (800209c <main+0x57c>)
 8001e4c:	4a94      	ldr	r2, [pc, #592]	; (80020a0 <main+0x580>)
 8001e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e52:	4891      	ldr	r0, [pc, #580]	; (8002098 <main+0x578>)
 8001e54:	f005 f806 	bl	8006e64 <HAL_DMA_Start_IT>

	  //R_filter = 0.5857864376269; // для 512 замеров
	 // L_filter = 0.01;

	  freq_new = 25000;
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <main+0x584>)
 8001e5a:	4a93      	ldr	r2, [pc, #588]	; (80020a8 <main+0x588>)
 8001e5c:	601a      	str	r2, [r3, #0]
	  old_freq_new = freq_new;
 8001e5e:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <main+0x584>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a92      	ldr	r2, [pc, #584]	; (80020ac <main+0x58c>)
 8001e64:	6013      	str	r3, [r2, #0]
	// HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, adc1_int, 256, DAC_ALIGN_12B_R);

	  printf("INIT__xxx (); - executed  \n");
 8001e66:	4892      	ldr	r0, [pc, #584]	; (80020b0 <main+0x590>)
 8001e68:	f00e fc14 	bl	8010694 <puts>
  {
	  	  	  	  // если надо, по флагу  cmd_set.flag_ON_TxData_cicle , вот тут будет включаться циклическая долбежка
                  // TIM7 - используется для барабанной передачи данных по модбусу, выдает тики 100uS, прерывания нет, в цикле смотрим CNT
		  	  	  // 25 mS  минимальный интервал между передачами, при котором минимум ошибок CRC
              	  //if (htim7.Instance->CNT >250) // tim7 тактуется 10 MHz, по условию if (htim7.Instance->CNT >100)   будет включаться передача ModBUS_TX
	  	  if ((cmd_set.flag_ON_TxData_cicle == true) & (flag_data_complit_for_Tx ==0))
 8001e6c:	4b91      	ldr	r3, [pc, #580]	; (80020b4 <main+0x594>)
 8001e6e:	791a      	ldrb	r2, [r3, #4]
 8001e70:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <main+0x598>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8084 	beq.w	8001f90 <main+0x470>
	  	  {
              send_buff_cicle[0] = MB_ADDRESS;
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <main+0x59c>)
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	701a      	strb	r2, [r3, #0]
              send_buff_cicle[1] = 4;  // заглушка-обманка
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <main+0x59c>)
 8001e90:	2204      	movs	r2, #4
 8001e92:	705a      	strb	r2, [r3, #1]
              send_buff_cicle[2] = 80; // заглушка-обманка, типа длина данных
 8001e94:	4b89      	ldr	r3, [pc, #548]	; (80020bc <main+0x59c>)
 8001e96:	2250      	movs	r2, #80	; 0x50
 8001e98:	709a      	strb	r2, [r3, #2]

               	  if ((htim7.Instance->CNT >250) & ( cmd_set.flag_ON_scan_freq == true))
 8001e9a:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <main+0x5a0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ea2:	bf8c      	ite	hi
 8001ea4:	2301      	movhi	r3, #1
 8001ea6:	2300      	movls	r3, #0
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <main+0x594>)
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d028      	beq.n	8001f08 <main+0x3e8>
              	  {
              		 htim7.Instance->CNT =0;
 8001eb6:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <main+0x5a0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							fun_data_scan_freq_podgotovka( &(send_buff_cicle[3]), freq_tim1_float/*номер элемента массива замеров*/ );
 8001ebe:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <main+0x5a4>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	487f      	ldr	r0, [pc, #508]	; (80020c8 <main+0x5a8>)
 8001eca:	f001 fc9b 	bl	8003804 <fun_data_scan_freq_podgotovka>

						usCRC16_main = HAL_CRC_Calculate(&hcrc, ( uint32_t *)(&send_buff_cicle), 83);//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
 8001ece:	2253      	movs	r2, #83	; 0x53
 8001ed0:	497a      	ldr	r1, [pc, #488]	; (80020bc <main+0x59c>)
 8001ed2:	487e      	ldr	r0, [pc, #504]	; (80020cc <main+0x5ac>)
 8001ed4:	f004 fd84 	bl	80069e0 <HAL_CRC_Calculate>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	81fb      	strh	r3, [r7, #14]
						send_buff_cicle[83] = ( UCHAR )( usCRC16_main & 0xFF );
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b76      	ldr	r3, [pc, #472]	; (80020bc <main+0x59c>)
 8001ee2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
						send_buff_cicle[84] = ( UCHAR )( usCRC16_main >> 8 );
 8001ee6:	89fb      	ldrh	r3, [r7, #14]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <main+0x59c>)
 8001ef0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

						HAL_UART_Transmit_DMA(&huart3, send_buff_cicle, 85);
 8001ef4:	2255      	movs	r2, #85	; 0x55
 8001ef6:	4971      	ldr	r1, [pc, #452]	; (80020bc <main+0x59c>)
 8001ef8:	4875      	ldr	r0, [pc, #468]	; (80020d0 <main+0x5b0>)
 8001efa:	f00a f985 	bl	800c208 <HAL_UART_Transmit_DMA>
						//if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							{ HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10); }
 8001efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f02:	4874      	ldr	r0, [pc, #464]	; (80020d4 <main+0x5b4>)
 8001f04:	f005 fc32 	bl	800776c <HAL_GPIO_TogglePin>
              	  }

              	  if ((htim7.Instance->CNT >50) & ( cmd_set.flag_ON_scan_time == true))
 8001f08:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <main+0x5a0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b32      	cmp	r3, #50	; 0x32
 8001f10:	bf8c      	ite	hi
 8001f12:	2301      	movhi	r3, #1
 8001f14:	2300      	movls	r3, #0
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <main+0x594>)
 8001f1a:	799b      	ldrb	r3, [r3, #6]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d035      	beq.n	8001f90 <main+0x470>
              	  {
              		htim7.Instance->CNT =0;
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <main+0x5a0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
							// if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
								{ index_data_real_zamer = index_data_real_zamer +3; }
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <main+0x5b8>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	3303      	adds	r3, #3
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <main+0x5b8>)
 8001f36:	801a      	strh	r2, [r3, #0]
							if (index_data_real_zamer >1021)
 8001f38:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <main+0x5b8>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d902      	bls.n	8001f4a <main+0x42a>
								{ index_data_real_zamer =0; }
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <main+0x5b8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]
							fun_data_time_podgotovka( &(send_buff_cicle[3]), index_data_real_zamer/*номер элемента массива замеров*/ );
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <main+0x5b8>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	485d      	ldr	r0, [pc, #372]	; (80020c8 <main+0x5a8>)
 8001f52:	f001 f9ab 	bl	80032ac <fun_data_time_podgotovka>

						usCRC16_main = HAL_CRC_Calculate(&hcrc, ( uint32_t *)(&send_buff_cicle), 83);//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
 8001f56:	2253      	movs	r2, #83	; 0x53
 8001f58:	4958      	ldr	r1, [pc, #352]	; (80020bc <main+0x59c>)
 8001f5a:	485c      	ldr	r0, [pc, #368]	; (80020cc <main+0x5ac>)
 8001f5c:	f004 fd40 	bl	80069e0 <HAL_CRC_Calculate>
 8001f60:	4603      	mov	r3, r0
 8001f62:	81fb      	strh	r3, [r7, #14]
						send_buff_cicle[83] = ( UCHAR )( usCRC16_main & 0xFF );
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <main+0x59c>)
 8001f6a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
						send_buff_cicle[84] = ( UCHAR )( usCRC16_main >> 8 );
 8001f6e:	89fb      	ldrh	r3, [r7, #14]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <main+0x59c>)
 8001f78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

						HAL_UART_Transmit_DMA(&huart3, send_buff_cicle, 85);
 8001f7c:	2255      	movs	r2, #85	; 0x55
 8001f7e:	494f      	ldr	r1, [pc, #316]	; (80020bc <main+0x59c>)
 8001f80:	4853      	ldr	r0, [pc, #332]	; (80020d0 <main+0x5b0>)
 8001f82:	f00a f941 	bl	800c208 <HAL_UART_Transmit_DMA>
						//if ( HAL_OK == HAL_UART_Transmit_DMA(adr_huart_MB, send_buff_cicle, 85))
							{ HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10); }
 8001f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8a:	4852      	ldr	r0, [pc, #328]	; (80020d4 <main+0x5b4>)
 8001f8c:	f005 fbee 	bl	800776c <HAL_GPIO_TogglePin>
              	  }
	  	  }

	  eMBPoll(  );  // Вызовите основной цикл опроса стека протоколов Modbus.
 8001f90:	f00b ff9a 	bl	800dec8 <eMBPoll>




	  // power_procent - меняется от 2 проц до 98 проц, и от этого сдвигаются фронты TIM1_OUT3,  TIM1_OUT1 - constanta
	  if (htim16.Instance->CNT >1000) // tim16 тактуется 1 MHz, нужен для плавного старта-стопа генерации
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <main+0x5bc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f9e:	f240 8114 	bls.w	80021ca <main+0x6aa>
	  {
		  htim16.Instance->CNT =0;
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <main+0x5bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
		  // синяя кнопка для стопа, если был запущен с модбуса
	      if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) // нажата кнопка
 8001faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fae:	4849      	ldr	r0, [pc, #292]	; (80020d4 <main+0x5b4>)
 8001fb0:	f005 fbac 	bl	800770c <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d11c      	bne.n	8001ff4 <main+0x4d4>
	      { 														// HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	    	  count_press_blue_btn ++;
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <main+0x5c0>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <main+0x5c0>)
 8001fc4:	701a      	strb	r2, [r3, #0]
	    	  if (count_press_blue_btn >5)
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <main+0x5c0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d915      	bls.n	8001ffa <main+0x4da>
	    	  {
	    		  count_press_blue_btn=5;
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <main+0x5c0>)
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	701a      	strb	r2, [r3, #0]
	    		  //cmd_set.cmd_flags =0;  // тотальный стоп
	    		  cmd_set.flag_ON_generation = false;
 8001fd4:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <main+0x594>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	709a      	strb	r2, [r3, #2]
	    		  cmd_set.flag_ON_TxData_cicle = false;
 8001fda:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <main+0x594>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	711a      	strb	r2, [r3, #4]
	    		  cmd_set.flag_ON_scan_freq = false;
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <main+0x594>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	70da      	strb	r2, [r3, #3]
	    		  cmd_set.flag_ON_scan_time = false;
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <main+0x594>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	719a      	strb	r2, [r3, #6]
	    		  cmd_set.flag_ON_autoTuning_freq = false;
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <main+0x594>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	715a      	strb	r2, [r3, #5]
 8001ff2:	e002      	b.n	8001ffa <main+0x4da>
	    	  }
	      }
	      else
	      { count_press_blue_btn =0; } // HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <main+0x5c0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]


		  if (cmd_set.flag_ON_generation == true)// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <main+0x594>)
 8001ffc:	789b      	ldrb	r3, [r3, #2]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d07a      	beq.n	80020f8 <main+0x5d8>
	  		{
	  			if (step_power_procent > cmd_set.proc_pwr /*power_procent*/) {step_power_procent --;}
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <main+0x594>)
 8002004:	895b      	ldrh	r3, [r3, #10]
 8002006:	461a      	mov	r2, r3
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <main+0x5c4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d204      	bcs.n	800201a <main+0x4fa>
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <main+0x5c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3b01      	subs	r3, #1
 8002016:	4a33      	ldr	r2, [pc, #204]	; (80020e4 <main+0x5c4>)
 8002018:	6013      	str	r3, [r2, #0]
	  			if (step_power_procent < cmd_set.proc_pwr /*power_procent*/) {step_power_procent ++;}
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <main+0x594>)
 800201c:	895b      	ldrh	r3, [r3, #10]
 800201e:	461a      	mov	r2, r3
 8002020:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <main+0x5c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d904      	bls.n	8002032 <main+0x512>
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <main+0x5c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <main+0x5c4>)
 8002030:	6013      	str	r3, [r2, #0]
	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <main+0x5c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <main+0x5cc>)
 800203a:	6013      	str	r3, [r2, #0]
					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <main+0x5cc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	bf8c      	ite	hi
 8002044:	2301      	movhi	r3, #1
 8002046:	2300      	movls	r3, #0
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <main+0x5cc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b36      	cmp	r3, #54	; 0x36
 8002050:	bf94      	ite	ls
 8002052:	2301      	movls	r3, #1
 8002054:	2300      	movhi	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4013      	ands	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80b4 	beq.w	80021ca <main+0x6aa>
					{
						if (flag_generate_ON ==0)
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <main+0x5d0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <main+0x55a>
							{ __HAL_TIM_MOE_ENABLE(&htim1); } // програмно восстанавливается флаг MOE для подключения выходов TIM1
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <main+0x5c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <main+0x5c8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
						flag_generate_ON =255;
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <main+0x5d0>)
 800207c:	22ff      	movs	r2, #255	; 0xff
 800207e:	701a      	strb	r2, [r3, #0]
						flag_generate_OFF =0;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <main+0x5d4>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e0a0      	b.n	80021ca <main+0x6aa>
 8002088:	2000262c 	.word	0x2000262c
 800208c:	2000462c 	.word	0x2000462c
 8002090:	2000662c 	.word	0x2000662c
 8002094:	08003245 	.word	0x08003245
 8002098:	2000048c 	.word	0x2000048c
 800209c:	2000062c 	.word	0x2000062c
 80020a0:	2000162c 	.word	0x2000162c
 80020a4:	2000f668 	.word	0x2000f668
 80020a8:	46c35000 	.word	0x46c35000
 80020ac:	2000f66c 	.word	0x2000f66c
 80020b0:	08015418 	.word	0x08015418
 80020b4:	20011ec4 	.word	0x20011ec4
 80020b8:	20011ec2 	.word	0x20011ec2
 80020bc:	20011ed8 	.word	0x20011ed8
 80020c0:	20012070 	.word	0x20012070
 80020c4:	2000f654 	.word	0x2000f654
 80020c8:	20011edb 	.word	0x20011edb
 80020cc:	20000468 	.word	0x20000468
 80020d0:	20012274 	.word	0x20012274
 80020d4:	48000800 	.word	0x48000800
 80020d8:	20011ec0 	.word	0x20011ec0
 80020dc:	200120bc 	.word	0x200120bc
 80020e0:	20000618 	.word	0x20000618
 80020e4:	20000010 	.word	0x20000010
 80020e8:	20011f40 	.word	0x20011f40
 80020ec:	20000614 	.word	0x20000614
 80020f0:	20000629 	.word	0x20000629
 80020f4:	20000628 	.word	0x20000628
					}
	  		}
	  		else	// кнопка отпущена, СТОП
	  		{
				if (step_power_procent > 2)
 80020f8:	4b89      	ldr	r3, [pc, #548]	; (8002320 <main+0x800>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d905      	bls.n	800210c <main+0x5ec>
					{step_power_procent --;}
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <main+0x800>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3b01      	subs	r3, #1
 8002106:	4a86      	ldr	r2, [pc, #536]	; (8002320 <main+0x800>)
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e05e      	b.n	80021ca <main+0x6aa>
				else
				{
					step_power_procent =2;
 800210c:	4b84      	ldr	r3, [pc, #528]	; (8002320 <main+0x800>)
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
	  	  	  	  	  // flag_generate_ON  flag_generate_OFF - потому что onoff генерацию будем только в первой половине периода, чтобы deadtime - как надо
	  	  	  	  	  	cnt_tim1 = htim1.Instance->CNT;   // tim1->ARR == 127  всегда без вариантов
 8002112:	4b84      	ldr	r3, [pc, #528]	; (8002324 <main+0x804>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	4a83      	ldr	r2, [pc, #524]	; (8002328 <main+0x808>)
 800211a:	6013      	str	r3, [r2, #0]
	  					if ((cnt_tim1 > 15) & (cnt_tim1 <55))
 800211c:	4b82      	ldr	r3, [pc, #520]	; (8002328 <main+0x808>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	bf8c      	ite	hi
 8002124:	2301      	movhi	r3, #1
 8002126:	2300      	movls	r3, #0
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <main+0x808>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b36      	cmp	r3, #54	; 0x36
 8002130:	bf94      	ite	ls
 8002132:	2301      	movls	r3, #1
 8002134:	2300      	movhi	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4013      	ands	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d044      	beq.n	80021ca <main+0x6aa>
	  					{
							if (flag_generate_OFF ==0)
 8002140:	4b7a      	ldr	r3, [pc, #488]	; (800232c <main+0x80c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d13a      	bne.n	80021be <main+0x69e>
							{
								for(int i=0; i<100; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	e034      	b.n	80021b8 <main+0x698>
								{
									if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	4874      	ldr	r0, [pc, #464]	; (8002324 <main+0x804>)
 8002152:	f008 fe89 	bl	800ae68 <HAL_TIM_GenerateEvent>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12a      	bne.n	80021b2 <main+0x692>
									{
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 800215c:	2300      	movs	r3, #0
 800215e:	837b      	strh	r3, [r7, #26]
 8002160:	e01a      	b.n	8002198 <main+0x678>
											{
												data_adc1_Tx[ic] =0;
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	4a72      	ldr	r2, [pc, #456]	; (8002330 <main+0x810>)
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
												data_adc2_Tx[ic] =0;
 8002170:	8b7b      	ldrh	r3, [r7, #26]
 8002172:	4a70      	ldr	r2, [pc, #448]	; (8002334 <main+0x814>)
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
												adc1_Tx[ic] =0;
 800217e:	8b7b      	ldrh	r3, [r7, #26]
 8002180:	4a6d      	ldr	r2, [pc, #436]	; (8002338 <main+0x818>)
 8002182:	2100      	movs	r1, #0
 8002184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
												adc2_Tx[ic] =0;
 8002188:	8b7b      	ldrh	r3, [r7, #26]
 800218a:	4a6c      	ldr	r2, [pc, #432]	; (800233c <main+0x81c>)
 800218c:	2100      	movs	r1, #0
 800218e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										for (uint16_t ic =0; ic <size_data_adc1/2; ic++)//обнулим чтобы при следующей частоте не было лажи
 8002192:	8b7b      	ldrh	r3, [r7, #26]
 8002194:	3301      	adds	r3, #1
 8002196:	837b      	strh	r3, [r7, #26]
 8002198:	8b7a      	ldrh	r2, [r7, #26]
 800219a:	4b69      	ldr	r3, [pc, #420]	; (8002340 <main+0x820>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0fd9      	lsrs	r1, r3, #31
 80021a0:	440b      	add	r3, r1
 80021a2:	105b      	asrs	r3, r3, #1
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbdc      	blt.n	8002162 <main+0x642>
											}
										index_data_real_zamer =800; // подготовка для замера
 80021a8:	4b66      	ldr	r3, [pc, #408]	; (8002344 <main+0x824>)
 80021aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80021ae:	801a      	strh	r2, [r3, #0]
										break;
 80021b0:	e005      	b.n	80021be <main+0x69e>
								for(int i=0; i<100; i++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b63      	cmp	r3, #99	; 0x63
 80021bc:	ddc7      	ble.n	800214e <main+0x62e>
									}// if (HAL_OK == HAL_TIM_GenerateEvent(&htim1, TIM_EventSource_Break))
								} // for(int i=0; i<100; i++)
							} // if (flag_generate_OFF ==0)
							flag_generate_OFF =255;
 80021be:	4b5b      	ldr	r3, [pc, #364]	; (800232c <main+0x80c>)
 80021c0:	22ff      	movs	r2, #255	; 0xff
 80021c2:	701a      	strb	r2, [r3, #0]
							flag_generate_ON =0;
 80021c4:	4b60      	ldr	r3, [pc, #384]	; (8002348 <main+0x828>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	  					}
	  	*/
	  					// ======   А ЭТО СТОП  СТОП  ====== ======   А ЭТО START  START  ======


	  htim1.Instance->CCR1 = ccr1_tim1; // tim1->CCR1 == 63   всегда без вариантов
 80021ca:	4b56      	ldr	r3, [pc, #344]	; (8002324 <main+0x804>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a5f      	ldr	r2, [pc, #380]	; (800234c <main+0x82c>)
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34
	  ccr3_tim1 = (64 * step_power_procent ) / 100;
 80021d4:	4b52      	ldr	r3, [pc, #328]	; (8002320 <main+0x800>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	4a5d      	ldr	r2, [pc, #372]	; (8002350 <main+0x830>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	4a5c      	ldr	r2, [pc, #368]	; (8002354 <main+0x834>)
 80021e4:	6013      	str	r3, [r2, #0]
		  if(ccr3_tim1 >62) {ccr3_tim1 =62;}// 96.88%   =>   64*96.88/100=62	 deadtime фиксировано ==85 тиков от 170_МГц, Меньшая мощность будет наползать на deadtime
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <main+0x834>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b3e      	cmp	r3, #62	; 0x3e
 80021ec:	d902      	bls.n	80021f4 <main+0x6d4>
 80021ee:	4b59      	ldr	r3, [pc, #356]	; (8002354 <main+0x834>)
 80021f0:	223e      	movs	r2, #62	; 0x3e
 80021f2:	601a      	str	r2, [r3, #0]
		  if(ccr3_tim1 <2) {ccr3_tim1 =2;}  // 3.125%   =>    64* 3.125/100=2	 2 тика от TIM1  == 90(тиков от 170_МГц при 30кГц) == 106(тиков от 170_МГц при 25кГц) == 186(тиков от 170_МГц при 14,5кГц)
 80021f4:	4b57      	ldr	r3, [pc, #348]	; (8002354 <main+0x834>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d802      	bhi.n	8002202 <main+0x6e2>
 80021fc:	4b55      	ldr	r3, [pc, #340]	; (8002354 <main+0x834>)
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
	  ccr4_tim1 = 64 + ccr3_tim1;
 8002202:	4b54      	ldr	r3, [pc, #336]	; (8002354 <main+0x834>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3340      	adds	r3, #64	; 0x40
 8002208:	4a53      	ldr	r2, [pc, #332]	; (8002358 <main+0x838>)
 800220a:	6013      	str	r3, [r2, #0]
		  if(ccr4_tim1 >125) {ccr4_tim1 =125;}
 800220c:	4b52      	ldr	r3, [pc, #328]	; (8002358 <main+0x838>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b7d      	cmp	r3, #125	; 0x7d
 8002212:	d902      	bls.n	800221a <main+0x6fa>
 8002214:	4b50      	ldr	r3, [pc, #320]	; (8002358 <main+0x838>)
 8002216:	227d      	movs	r2, #125	; 0x7d
 8002218:	601a      	str	r2, [r3, #0]
		  if(ccr4_tim1 <66) {ccr4_tim1 =66;}
 800221a:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <main+0x838>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b41      	cmp	r3, #65	; 0x41
 8002220:	d802      	bhi.n	8002228 <main+0x708>
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <main+0x838>)
 8002224:	2242      	movs	r2, #66	; 0x42
 8002226:	601a      	str	r2, [r3, #0]
	  htim1.Instance->CCR3 = ccr3_tim1; //
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <main+0x804>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <main+0x834>)
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance->CCR4 = ccr4_tim1; //  power_procent
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <main+0x804>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a48      	ldr	r2, [pc, #288]	; (8002358 <main+0x838>)
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40

	  // ========================== а вот ОНО, - новая частота  ============================
	  // hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
	  if(hrtim_period_new >1000) // == 43 kHz    hrtim_period_new=2930  == 14505 Hz
 800223c:	4b47      	ldr	r3, [pc, #284]	; (800235c <main+0x83c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002244:	d904      	bls.n	8002250 <main+0x730>
		  {  hhrtim1.Instance->sMasterRegs.MPER = hrtim_period_new; }
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <main+0x840>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a44      	ldr	r2, [pc, #272]	; (800235c <main+0x83c>)
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	615a      	str	r2, [r3, #20]
	  freq_tim1 = 5440000000 / (hhrtim1.Instance->sMasterRegs.MPER) / 128; // это есть выходная частота, tim1->ARR == 127  всегда ==> делитель=128
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <main+0x840>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2200      	movs	r2, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002260:	a12d      	add	r1, pc, #180	; (adr r1, 8002318 <main+0x7f8>)
 8002262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002266:	f7fe fd37 	bl	8000cd8 <__aeabi_ldivmod>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	2b00      	cmp	r3, #0
 8002270:	da05      	bge.n	800227e <main+0x75e>
 8002272:	f112 087f 	adds.w	r8, r2, #127	; 0x7f
 8002276:	f143 0900 	adc.w	r9, r3, #0
 800227a:	4642      	mov	r2, r8
 800227c:	464b      	mov	r3, r9
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	09d0      	lsrs	r0, r2, #7
 8002288:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800228c:	11d9      	asrs	r1, r3, #7
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <main+0x844>)
 8002294:	601a      	str	r2, [r3, #0]
	  freq_tim1_float = (float)freq_tim1;
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <main+0x844>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <main+0x848>)
 80022a4:	edc3 7a00 	vstr	s15, [r3]

	  if ((cmd_set.flag_ON_scan_time == true) & (index_data_real_zamer >1000))
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <main+0x84c>)
 80022aa:	799a      	ldrb	r2, [r3, #6]
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <main+0x824>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b4:	bf8c      	ite	hi
 80022b6:	2301      	movhi	r3, #1
 80022b8:	2300      	movls	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4013      	ands	r3, r2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <main+0x7aa>
	  	  { flag_data_complit_for_Tx = 255; }
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <main+0x850>)
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	801a      	strh	r2, [r3, #0]

	  if (flag_end_FFT ==0) // flag_complit_ADC ==1 означает что все замеры сделаны
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <main+0x854>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8462 	bne.w	8002b98 <main+0x1078>
	  {
		  flag_end_FFT =1;
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <main+0x854>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	801a      	strh	r2, [r3, #0]
		//count_tic_adc_finish = DWT_CYCCNT;//смотрим сколько натикало, поскольку при старте  DWT_CYCCNT==0, то все просто
		//count_tic_adc_float_mks = (float)count_tic_adc_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 82-86 мкс
		// обнуляем счетчик тиков, для подсчета времени работы прг, и одновременно уже будет идти 256 замеров АЦП
			count_tic_ALL_finish = DWT_CYCCNT;
 80022da:	4b27      	ldr	r3, [pc, #156]	; (8002378 <main+0x858>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <main+0x85c>)
 80022e0:	6013      	str	r3, [r2, #0]
			count_tic_ALL_float_mks = (float)count_tic_ALL_finish * 1000000 / SystemCoreClock; // а сколько это мкс? в реале == 1320 мкс 512 zamerov;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <main+0x85c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002380 <main+0x860>
 80022f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <main+0x864>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <main+0x868>)
 8002308:	edc3 7a00 	vstr	s15, [r3]
		 DWT_CYCCNT =0;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <main+0x858>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]



//		for (uint16_t ic =32; ic < LENGTH_OTSOS; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 8002312:	2300      	movs	r3, #0
 8002314:	833b      	strh	r3, [r7, #24]
 8002316:	e11d      	b.n	8002554 <main+0xa34>
 8002318:	443fd000 	.word	0x443fd000
 800231c:	00000001 	.word	0x00000001
 8002320:	20000010 	.word	0x20000010
 8002324:	20011f40 	.word	0x20011f40
 8002328:	20000614 	.word	0x20000614
 800232c:	20000628 	.word	0x20000628
 8002330:	20007630 	.word	0x20007630
 8002334:	20008630 	.word	0x20008630
 8002338:	20006630 	.word	0x20006630
 800233c:	20006e30 	.word	0x20006e30
 8002340:	2000662c 	.word	0x2000662c
 8002344:	20011ec0 	.word	0x20011ec0
 8002348:	20000629 	.word	0x20000629
 800234c:	20000004 	.word	0x20000004
 8002350:	51eb851f 	.word	0x51eb851f
 8002354:	20000008 	.word	0x20000008
 8002358:	2000000c 	.word	0x2000000c
 800235c:	2000001c 	.word	0x2000001c
 8002360:	200004ec 	.word	0x200004ec
 8002364:	2000f650 	.word	0x2000f650
 8002368:	2000f654 	.word	0x2000f654
 800236c:	20011ec4 	.word	0x20011ec4
 8002370:	20011ec2 	.word	0x20011ec2
 8002374:	2000061a 	.word	0x2000061a
 8002378:	e0001004 	.word	0xe0001004
 800237c:	20000620 	.word	0x20000620
 8002380:	49742400 	.word	0x49742400
 8002384:	20000030 	.word	0x20000030
 8002388:	20000624 	.word	0x20000624
				//X_filter += V_filter - X_filter * L_filter;
				// ===============================================================
				// X_filter_1 += (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] & 0x0000FFFF);
				// if (zamer_tim20[ic] >50) { X_filter_1 += 1; }
				if(flag_data_complit_for_Tx>0) { adc1_Tx[ic] = zamer_adc_dma[ic] & 0x0000FFFF; }
 800238c:	4ba6      	ldr	r3, [pc, #664]	; (8002628 <main+0xb08>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <main+0x886>
 8002394:	8b3b      	ldrh	r3, [r7, #24]
 8002396:	4aa5      	ldr	r2, [pc, #660]	; (800262c <main+0xb0c>)
 8002398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800239c:	8b3b      	ldrh	r3, [r7, #24]
 800239e:	b291      	uxth	r1, r2
 80023a0:	4aa3      	ldr	r2, [pc, #652]	; (8002630 <main+0xb10>)
 80023a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_1 += (float) (zamer_adc_dma[ic] & 0x0000FFFF);
 80023a6:	8b3b      	ldrh	r3, [r7, #24]
 80023a8:	4aa0      	ldr	r2, [pc, #640]	; (800262c <main+0xb0c>)
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b8:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <main+0xb14>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	4b9c      	ldr	r3, [pc, #624]	; (8002634 <main+0xb14>)
 80023c4:	edc3 7a00 	vstr	s15, [r3]
				V_filter_1 -= X_filter_1 * (R_filter);
 80023c8:	4b9b      	ldr	r3, [pc, #620]	; (8002638 <main+0xb18>)
 80023ca:	ed93 7a00 	vldr	s14, [r3]
 80023ce:	4b99      	ldr	r3, [pc, #612]	; (8002634 <main+0xb14>)
 80023d0:	edd3 6a00 	vldr	s13, [r3]
 80023d4:	4b99      	ldr	r3, [pc, #612]	; (800263c <main+0xb1c>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e2:	4b95      	ldr	r3, [pc, #596]	; (8002638 <main+0xb18>)
 80023e4:	edc3 7a00 	vstr	s15, [r3]
				X_filter_1 += V_filter_1 - X_filter_1 * L_filter;
 80023e8:	4b93      	ldr	r3, [pc, #588]	; (8002638 <main+0xb18>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	4b91      	ldr	r3, [pc, #580]	; (8002634 <main+0xb14>)
 80023f0:	edd3 6a00 	vldr	s13, [r3]
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <main+0xb20>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002402:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <main+0xb14>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	4b89      	ldr	r3, [pc, #548]	; (8002634 <main+0xb14>)
 800240e:	edc3 7a00 	vstr	s15, [r3]
				filter_adc1[ic] = X_filter_1;
 8002412:	8b3b      	ldrh	r3, [r7, #24]
 8002414:	4a87      	ldr	r2, [pc, #540]	; (8002634 <main+0xb14>)
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	498a      	ldr	r1, [pc, #552]	; (8002644 <main+0xb24>)
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	601a      	str	r2, [r3, #0]
				data_adc1[2*ic] = 0.001 * X_filter_1;
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <main+0xb14>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f8b7 	bl	8000598 <__aeabi_f2d>
 800242a:	a37d      	add	r3, pc, #500	; (adr r3, 8002620 <main+0xb00>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe f90a 	bl	8000648 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	8b3b      	ldrh	r3, [r7, #24]
 800243e:	005c      	lsls	r4, r3, #1
 8002440:	f7fe fbfa 	bl	8000c38 <__aeabi_d2f>
 8002444:	4602      	mov	r2, r0
 8002446:	4980      	ldr	r1, [pc, #512]	; (8002648 <main+0xb28>)
 8002448:	00a3      	lsls	r3, r4, #2
 800244a:	440b      	add	r3, r1
 800244c:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc1_Tx[ic] = data_adc1[2*ic]; }
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <main+0xb08>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <main+0x94c>
 8002456:	8b3b      	ldrh	r3, [r7, #24]
 8002458:	005a      	lsls	r2, r3, #1
 800245a:	8b3b      	ldrh	r3, [r7, #24]
 800245c:	497a      	ldr	r1, [pc, #488]	; (8002648 <main+0xb28>)
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	440a      	add	r2, r1
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4979      	ldr	r1, [pc, #484]	; (800264c <main+0xb2c>)
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	601a      	str	r2, [r3, #0]
				//data_adc1[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] & 0x0000FFFF));
				//data_adc1[2*(ic-32+1)] =0;
				// ==================================================================
				// X_filter_2 += (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*ic] = 0.001 * (float) (zamer_adc_dma[ic] >>16);
				if(flag_data_complit_for_Tx>0) { adc2_Tx[ic] = (zamer_adc_dma[ic] >>16); }
 800246c:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <main+0xb08>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <main+0x968>
 8002474:	8b3b      	ldrh	r3, [r7, #24]
 8002476:	4a6d      	ldr	r2, [pc, #436]	; (800262c <main+0xb0c>)
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	0c1a      	lsrs	r2, r3, #16
 800247e:	8b3b      	ldrh	r3, [r7, #24]
 8002480:	b291      	uxth	r1, r2
 8002482:	4a73      	ldr	r2, [pc, #460]	; (8002650 <main+0xb30>)
 8002484:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				X_filter_2 += (float) ((zamer_adc_dma[ic] >>16));
 8002488:	8b3b      	ldrh	r3, [r7, #24]
 800248a:	4a68      	ldr	r2, [pc, #416]	; (800262c <main+0xb0c>)
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800249a:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <main+0xb34>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <main+0xb34>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]
				V_filter_2 -= X_filter_2 * (R_filter);
 80024aa:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <main+0xb38>)
 80024ac:	ed93 7a00 	vldr	s14, [r3]
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <main+0xb34>)
 80024b2:	edd3 6a00 	vldr	s13, [r3]
 80024b6:	4b61      	ldr	r3, [pc, #388]	; (800263c <main+0xb1c>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	4b64      	ldr	r3, [pc, #400]	; (8002658 <main+0xb38>)
 80024c6:	edc3 7a00 	vstr	s15, [r3]
				X_filter_2 += V_filter_2 - X_filter_2 * L_filter;
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <main+0xb38>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	4b60      	ldr	r3, [pc, #384]	; (8002654 <main+0xb34>)
 80024d2:	edd3 6a00 	vldr	s13, [r3]
 80024d6:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <main+0xb20>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024e4:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <main+0xb34>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	4b59      	ldr	r3, [pc, #356]	; (8002654 <main+0xb34>)
 80024f0:	edc3 7a00 	vstr	s15, [r3]
				filter_adc2[ic] = X_filter_2;
 80024f4:	8b3b      	ldrh	r3, [r7, #24]
 80024f6:	4a57      	ldr	r2, [pc, #348]	; (8002654 <main+0xb34>)
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4958      	ldr	r1, [pc, #352]	; (800265c <main+0xb3c>)
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	601a      	str	r2, [r3, #0]
				data_adc2[2*ic] = 0.001 * X_filter_2;
 8002502:	4b54      	ldr	r3, [pc, #336]	; (8002654 <main+0xb34>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f846 	bl	8000598 <__aeabi_f2d>
 800250c:	a344      	add	r3, pc, #272	; (adr r3, 8002620 <main+0xb00>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fe f899 	bl	8000648 <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	8b3b      	ldrh	r3, [r7, #24]
 8002520:	005c      	lsls	r4, r3, #1
 8002522:	f7fe fb89 	bl	8000c38 <__aeabi_d2f>
 8002526:	4602      	mov	r2, r0
 8002528:	494d      	ldr	r1, [pc, #308]	; (8002660 <main+0xb40>)
 800252a:	00a3      	lsls	r3, r4, #2
 800252c:	440b      	add	r3, r1
 800252e:	601a      	str	r2, [r3, #0]
				if(flag_data_complit_for_Tx>0) { data_adc2_Tx[ic] = data_adc2[2*ic]; }
 8002530:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <main+0xb08>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <main+0xa2e>
 8002538:	8b3b      	ldrh	r3, [r7, #24]
 800253a:	005a      	lsls	r2, r3, #1
 800253c:	8b3b      	ldrh	r3, [r7, #24]
 800253e:	4948      	ldr	r1, [pc, #288]	; (8002660 <main+0xb40>)
 8002540:	0092      	lsls	r2, r2, #2
 8002542:	440a      	add	r2, r1
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4947      	ldr	r1, [pc, #284]	; (8002664 <main+0xb44>)
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	601a      	str	r2, [r3, #0]
		for (uint16_t ic =0; ic < LENGTH_SAMPLES; ic++)//цикл отсоса массивов данных длится 16мкс -это без фильтрации, 264 мкс с фильтрацией(256), 534мкс фильтрация(512)
 800254e:	8b3b      	ldrh	r3, [r7, #24]
 8002550:	3301      	adds	r3, #1
 8002552:	833b      	strh	r3, [r7, #24]
 8002554:	8b3b      	ldrh	r3, [r7, #24]
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	f4ff af17 	bcc.w	800238c <main+0x86c>
				//data_adc2[2*(ic-32)] = X_filter_2;
				//data_adc2[2*(ic-32)] = (float) ((uint16_t) (zamer_adc1_2[ic] >>16));
				//data_adc2[2*(ic-32+1)] =0;
			}

			if(flag_data_complit_for_Tx>0)
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <main+0xb08>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <main+0xa52>
				{
					index_data_real_zamer =0;
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <main+0xb48>)
 8002568:	2200      	movs	r2, #0
 800256a:	801a      	strh	r2, [r3, #0]
					flag_data_complit_for_Tx =0;
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <main+0xb08>)
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
//					for (uint16_t iv =0; iv < 16; iv++)
//					{ data_adc1[32*iv + ic] = 0; }
//				}
//			}

			flag_end_FFT =2; // такой флаг разрешает остановить АЦП и перекинуть массив данных, пока тут дорасчитываем до конца
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <main+0xb4c>)
 8002574:	2202      	movs	r2, #2
 8002576:	801a      	strh	r2, [r3, #0]
							// перекид данных занимает 41мкс, и произойдет только при полном окончании N(512) замеров
			count_tic_FFT_start= DWT_CYCCNT;
 8002578:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <main+0xb50>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <main+0xb54>)
 800257e:	6013      	str	r3, [r2, #0]
		  // Process the data through the CFFT/CIFFT module
			if (fft_N ==256)
 8002580:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <main+0xb58>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	d114      	bne.n	80025b4 <main+0xa94>
			{
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc1, ifftFlag, doBitReverse);//в реале == 361мкс(256 sampl)
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <main+0xb5c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <main+0xb60>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	492c      	ldr	r1, [pc, #176]	; (8002648 <main+0xb28>)
 8002598:	483a      	ldr	r0, [pc, #232]	; (8002684 <main+0xb64>)
 800259a:	f00c fb03 	bl	800eba4 <arm_cfft_f32>
			  arm_cfft_f32(&arm_cfft_sR_f32_len256, data_adc2, ifftFlag, doBitReverse);
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <main+0xb5c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <main+0xb60>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	492d      	ldr	r1, [pc, #180]	; (8002660 <main+0xb40>)
 80025ac:	4835      	ldr	r0, [pc, #212]	; (8002684 <main+0xb64>)
 80025ae:	f00c faf9 	bl	800eba4 <arm_cfft_f32>
 80025b2:	e0a0      	b.n	80026f6 <main+0xbd6>
			}
			else
			{
				if (fft_N ==512)
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <main+0xb58>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d114      	bne.n	80025e8 <main+0xac8>
				{
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc1, ifftFlag, doBitReverse);//в реале == 618мкс(512 sampl)
 80025be:	4b2f      	ldr	r3, [pc, #188]	; (800267c <main+0xb5c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <main+0xb60>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	491f      	ldr	r1, [pc, #124]	; (8002648 <main+0xb28>)
 80025cc:	482e      	ldr	r0, [pc, #184]	; (8002688 <main+0xb68>)
 80025ce:	f00c fae9 	bl	800eba4 <arm_cfft_f32>
				  arm_cfft_f32(&arm_cfft_sR_f32_len512, data_adc2, ifftFlag, doBitReverse);
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <main+0xb5c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <main+0xb60>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4920      	ldr	r1, [pc, #128]	; (8002660 <main+0xb40>)
 80025e0:	4829      	ldr	r0, [pc, #164]	; (8002688 <main+0xb68>)
 80025e2:	f00c fadf 	bl	800eba4 <arm_cfft_f32>
 80025e6:	e086      	b.n	80026f6 <main+0xbd6>
				}
				else
				{
					if (fft_N ==1024)
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <main+0xb58>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f0:	d14e      	bne.n	8002690 <main+0xb70>
					{
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(1024 sampl)
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <main+0xb5c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <main+0xb60>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4912      	ldr	r1, [pc, #72]	; (8002648 <main+0xb28>)
 8002600:	4822      	ldr	r0, [pc, #136]	; (800268c <main+0xb6c>)
 8002602:	f00c facf 	bl	800eba4 <arm_cfft_f32>
					  arm_cfft_f32(&arm_cfft_sR_f32_len1024, data_adc2, ifftFlag, doBitReverse);
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <main+0xb5c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <main+0xb60>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4913      	ldr	r1, [pc, #76]	; (8002660 <main+0xb40>)
 8002614:	481d      	ldr	r0, [pc, #116]	; (800268c <main+0xb6c>)
 8002616:	f00c fac5 	bl	800eba4 <arm_cfft_f32>
 800261a:	e06c      	b.n	80026f6 <main+0xbd6>
 800261c:	f3af 8000 	nop.w
 8002620:	d2f1a9fc 	.word	0xd2f1a9fc
 8002624:	3f50624d 	.word	0x3f50624d
 8002628:	20011ec2 	.word	0x20011ec2
 800262c:	2000162c 	.word	0x2000162c
 8002630:	20006630 	.word	0x20006630
 8002634:	2000f670 	.word	0x2000f670
 8002638:	2000f674 	.word	0x2000f674
 800263c:	20000020 	.word	0x20000020
 8002640:	20000024 	.word	0x20000024
 8002644:	20009630 	.word	0x20009630
 8002648:	2000262c 	.word	0x2000262c
 800264c:	20007630 	.word	0x20007630
 8002650:	20006e30 	.word	0x20006e30
 8002654:	2000f678 	.word	0x2000f678
 8002658:	2000f67c 	.word	0x2000f67c
 800265c:	2000a630 	.word	0x2000a630
 8002660:	2000462c 	.word	0x2000462c
 8002664:	20008630 	.word	0x20008630
 8002668:	20011ec0 	.word	0x20011ec0
 800266c:	2000061a 	.word	0x2000061a
 8002670:	e0001004 	.word	0xe0001004
 8002674:	2000061c 	.word	0x2000061c
 8002678:	20000018 	.word	0x20000018
 800267c:	2000f64c 	.word	0x2000f64c
 8002680:	20000014 	.word	0x20000014
 8002684:	08015830 	.word	0x08015830
 8002688:	08015850 	.word	0x08015850
 800268c:	08015810 	.word	0x08015810
					}
					else
					{
						if (fft_N ==2048)
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <main+0xd30>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002698:	d114      	bne.n	80026c4 <main+0xba4>
						{
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc1, ifftFlag, doBitReverse);//в реале == ___мкс(2048 sampl)
 800269a:	4b6e      	ldr	r3, [pc, #440]	; (8002854 <main+0xd34>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <main+0xd38>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	496d      	ldr	r1, [pc, #436]	; (800285c <main+0xd3c>)
 80026a8:	486d      	ldr	r0, [pc, #436]	; (8002860 <main+0xd40>)
 80026aa:	f00c fa7b 	bl	800eba4 <arm_cfft_f32>
						  arm_cfft_f32(&arm_cfft_sR_f32_len2048, data_adc2, ifftFlag, doBitReverse);
 80026ae:	4b69      	ldr	r3, [pc, #420]	; (8002854 <main+0xd34>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b68      	ldr	r3, [pc, #416]	; (8002858 <main+0xd38>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	496a      	ldr	r1, [pc, #424]	; (8002864 <main+0xd44>)
 80026bc:	4868      	ldr	r0, [pc, #416]	; (8002860 <main+0xd40>)
 80026be:	f00c fa71 	bl	800eba4 <arm_cfft_f32>
 80026c2:	e018      	b.n	80026f6 <main+0xbd6>
						}
						else
						{
							if (fft_N ==4096)
 80026c4:	4b62      	ldr	r3, [pc, #392]	; (8002850 <main+0xd30>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026cc:	d113      	bne.n	80026f6 <main+0xbd6>
							{
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc1, ifftFlag, doBitReverse);//в реале == 5461мкс(4096 sampl)
 80026ce:	4b61      	ldr	r3, [pc, #388]	; (8002854 <main+0xd34>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b60      	ldr	r3, [pc, #384]	; (8002858 <main+0xd38>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4960      	ldr	r1, [pc, #384]	; (800285c <main+0xd3c>)
 80026dc:	4862      	ldr	r0, [pc, #392]	; (8002868 <main+0xd48>)
 80026de:	f00c fa61 	bl	800eba4 <arm_cfft_f32>
							  arm_cfft_f32(&arm_cfft_sR_f32_len4096, data_adc2, ifftFlag, doBitReverse);
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <main+0xd34>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <main+0xd38>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	495d      	ldr	r1, [pc, #372]	; (8002864 <main+0xd44>)
 80026f0:	485d      	ldr	r0, [pc, #372]	; (8002868 <main+0xd48>)
 80026f2:	f00c fa57 	bl	800eba4 <arm_cfft_f32>
					} // if (fft_N ==1024)
				} // if (fft_N ==512)
			} // if (fft_N ==256)

		  // Process the data through the Complex Magnitude Module for  calculating the magnitude at each bin
		  fftSize = fft_N /64 +10; // 10 такое количество гармоник достаточно, для массива 512 без нулей
 80026f6:	4b56      	ldr	r3, [pc, #344]	; (8002850 <main+0xd30>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	330a      	adds	r3, #10
 8002700:	461a      	mov	r2, r3
 8002702:	4b5a      	ldr	r3, [pc, #360]	; (800286c <main+0xd4c>)
 8002704:	601a      	str	r2, [r3, #0]
		  //ввремя вычисления Две магнитуды, в реале == 97мкс(fftSize==256) == 37мкс(fftSize==96)
		  arm_cmplx_mag_f32(data_adc1, arr1_Output_f32, fftSize);
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <main+0xd4c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4958      	ldr	r1, [pc, #352]	; (8002870 <main+0xd50>)
 800270e:	4853      	ldr	r0, [pc, #332]	; (800285c <main+0xd3c>)
 8002710:	f00c fae0 	bl	800ecd4 <arm_cmplx_mag_f32>
		  arm_cmplx_mag_f32(data_adc2, arr2_Output_f32, fftSize);
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <main+0xd4c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4956      	ldr	r1, [pc, #344]	; (8002874 <main+0xd54>)
 800271c:	4851      	ldr	r0, [pc, #324]	; (8002864 <main+0xd44>)
 800271e:	f00c fad9 	bl	800ecd4 <arm_cmplx_mag_f32>
		  arr1_phase_Output_8_f32 = 2*M_PI + atan2f(data_adc1[17], data_adc1[16]);
 8002722:	4b4e      	ldr	r3, [pc, #312]	; (800285c <main+0xd3c>)
 8002724:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <main+0xd3c>)
 800272a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800272e:	eef0 0a47 	vmov.f32	s1, s14
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	f011 fcab 	bl	8014090 <atan2f>
 800273a:	ee10 3a10 	vmov	r3, s0
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff2a 	bl	8000598 <__aeabi_f2d>
 8002744:	a33e      	add	r3, pc, #248	; (adr r3, 8002840 <main+0xd20>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd fdc7 	bl	80002dc <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fa6f 	bl	8000c38 <__aeabi_d2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4a46      	ldr	r2, [pc, #280]	; (8002878 <main+0xd58>)
 800275e:	6013      	str	r3, [r2, #0]
		  	  while(arr1_phase_Output_8_f32 > 4*M_PI ) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 - 2*M_PI; }
 8002760:	e012      	b.n	8002788 <main+0xc68>
 8002762:	4b45      	ldr	r3, [pc, #276]	; (8002878 <main+0xd58>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd ff16 	bl	8000598 <__aeabi_f2d>
 800276c:	a334      	add	r3, pc, #208	; (adr r3, 8002840 <main+0xd20>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fd fdb1 	bl	80002d8 <__aeabi_dsub>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe fa5b 	bl	8000c38 <__aeabi_d2f>
 8002782:	4603      	mov	r3, r0
 8002784:	4a3c      	ldr	r2, [pc, #240]	; (8002878 <main+0xd58>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <main+0xd58>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	a32d      	add	r3, pc, #180	; (adr r3, 8002848 <main+0xd28>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fe f9e6 	bl	8000b68 <__aeabi_dcmpgt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1df      	bne.n	8002762 <main+0xc42>
		      while(arr1_phase_Output_8_f32 < 0) {arr1_phase_Output_8_f32 = arr1_phase_Output_8_f32 + 2*M_PI; }
 80027a2:	e012      	b.n	80027ca <main+0xcaa>
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <main+0xd58>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fef5 	bl	8000598 <__aeabi_f2d>
 80027ae:	a324      	add	r3, pc, #144	; (adr r3, 8002840 <main+0xd20>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fd92 	bl	80002dc <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe fa3a 	bl	8000c38 <__aeabi_d2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <main+0xd58>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <main+0xd58>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	d4e4      	bmi.n	80027a4 <main+0xc84>
		  arr2_phase_Output_8_f32 = atan2f(data_adc2[17], data_adc2[16]);
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <main+0xd44>)
 80027dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <main+0xd44>)
 80027e2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80027e6:	eef0 0a47 	vmov.f32	s1, s14
 80027ea:	eeb0 0a67 	vmov.f32	s0, s15
 80027ee:	f011 fc4f 	bl	8014090 <atan2f>
 80027f2:	eef0 7a40 	vmov.f32	s15, s0
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <main+0xd5c>)
 80027f8:	edc3 7a00 	vstr	s15, [r3]
			  while(arr2_phase_Output_8_f32 > 2*M_PI ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 - 2*M_PI; }
 80027fc:	e012      	b.n	8002824 <main+0xd04>
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <main+0xd5c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fec8 	bl	8000598 <__aeabi_f2d>
 8002808:	a30d      	add	r3, pc, #52	; (adr r3, 8002840 <main+0xd20>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd fd63 	bl	80002d8 <__aeabi_dsub>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f7fe fa0d 	bl	8000c38 <__aeabi_d2f>
 800281e:	4603      	mov	r3, r0
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <main+0xd5c>)
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <main+0xd5c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd feb5 	bl	8000598 <__aeabi_f2d>
 800282e:	a304      	add	r3, pc, #16	; (adr r3, 8002840 <main+0xd20>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fe f998 	bl	8000b68 <__aeabi_dcmpgt>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1df      	bne.n	80027fe <main+0xcde>
			  while(arr2_phase_Output_8_f32 < 0 ) {arr2_phase_Output_8_f32 = arr2_phase_Output_8_f32 + 2*M_PI; }
 800283e:	e032      	b.n	80028a6 <main+0xd86>
 8002840:	54442d18 	.word	0x54442d18
 8002844:	401921fb 	.word	0x401921fb
 8002848:	54442d18 	.word	0x54442d18
 800284c:	402921fb 	.word	0x402921fb
 8002850:	20000018 	.word	0x20000018
 8002854:	2000f64c 	.word	0x2000f64c
 8002858:	20000014 	.word	0x20000014
 800285c:	2000262c 	.word	0x2000262c
 8002860:	08015820 	.word	0x08015820
 8002864:	2000462c 	.word	0x2000462c
 8002868:	08015840 	.word	0x08015840
 800286c:	2000f648 	.word	0x2000f648
 8002870:	2000b630 	.word	0x2000b630
 8002874:	2000d630 	.word	0x2000d630
 8002878:	2000f630 	.word	0x2000f630
 800287c:	2000f634 	.word	0x2000f634
 8002880:	4ba7      	ldr	r3, [pc, #668]	; (8002b20 <main+0x1000>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe87 	bl	8000598 <__aeabi_f2d>
 800288a:	a3a3      	add	r3, pc, #652	; (adr r3, 8002b18 <main+0xff8>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fd24 	bl	80002dc <__adddf3>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f9cc 	bl	8000c38 <__aeabi_d2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a9f      	ldr	r2, [pc, #636]	; (8002b20 <main+0x1000>)
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b9e      	ldr	r3, [pc, #632]	; (8002b20 <main+0x1000>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	d4e4      	bmi.n	8002880 <main+0xd60>

			  shift_phase_I8_U8_f32 = arr1_phase_Output_8_f32 - arr2_phase_Output_8_f32;
 80028b6:	4b9b      	ldr	r3, [pc, #620]	; (8002b24 <main+0x1004>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <main+0x1000>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c6:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <main+0x1008>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]
			  cos_phase_8_f32 = fabsf(arm_cos_f32(shift_phase_I8_U8_f32));
 80028cc:	4b96      	ldr	r3, [pc, #600]	; (8002b28 <main+0x1008>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eeb0 0a67 	vmov.f32	s0, s15
 80028d6:	f00c fb21 	bl	800ef1c <arm_cos_f32>
 80028da:	eef0 7a40 	vmov.f32	s15, s0
 80028de:	eef0 7ae7 	vabs.f32	s15, s15
 80028e2:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <main+0x100c>)
 80028e4:	edc3 7a00 	vstr	s15, [r3]
		  calc_power_Output_8_f32	= arr2_Output_f32[8] * arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 80028e8:	4b91      	ldr	r3, [pc, #580]	; (8002b30 <main+0x1010>)
 80028ea:	ed93 7a08 	vldr	s14, [r3, #32]
 80028ee:	4b91      	ldr	r3, [pc, #580]	; (8002b34 <main+0x1014>)
 80028f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80028f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f8:	4b8c      	ldr	r3, [pc, #560]	; (8002b2c <main+0x100c>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	4b8d      	ldr	r3, [pc, #564]	; (8002b38 <main+0x1018>)
 8002904:	edc3 7a00 	vstr	s15, [r3]
		  calc_R_Output_8_f32 		= arr2_Output_f32[8] / arr1_Output_f32[8] * cos_phase_8_f32; // arr2_ == U    arr1_ == I
 8002908:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <main+0x1010>)
 800290a:	edd3 6a08 	vldr	s13, [r3, #32]
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <main+0x1014>)
 8002910:	edd3 7a08 	vldr	s15, [r3, #32]
 8002914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002918:	4b84      	ldr	r3, [pc, #528]	; (8002b2c <main+0x100c>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	4b86      	ldr	r3, [pc, #536]	; (8002b3c <main+0x101c>)
 8002924:	edc3 7a00 	vstr	s15, [r3]
		// F_bin = F *64/256 = F / 4 ;
		// F_bin = F *64/512 = F / 8 ;
		// F_bin = F *64/1024 = F / 16 ;
		// Koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
		// freq_new = F_bin * N + Koeff * F_bin;   // для этого случая N==4
		  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 8002928:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <main+0x1020>)
 800292a:	789a      	ldrb	r2, [r3, #2]
 800292c:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <main+0x1020>)
 800292e:	795b      	ldrb	r3, [r3, #5]
 8002930:	4013      	ands	r3, r2
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <main+0x1020>)
 8002938:	78db      	ldrb	r3, [r3, #3]
 800293a:	f083 0301 	eor.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4013      	ands	r3, r2
 8002942:	4a7f      	ldr	r2, [pc, #508]	; (8002b40 <main+0x1020>)
 8002944:	7992      	ldrb	r2, [r2, #6]
 8002946:	f082 0201 	eor.w	r2, r2, #1
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80dc 	beq.w	8002b0c <main+0xfec>
		  {
			if (fft_N ==256)
 8002954:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <main+0x1024>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295c:	d132      	bne.n	80029c4 <main+0xea4>
			{
				koeff = (arr1_Output_f32[5] -arr1_Output_f32[3]) / (2*(2*arr1_Output_f32[4] -arr1_Output_f32[5] -arr1_Output_f32[3]));
 800295e:	4b75      	ldr	r3, [pc, #468]	; (8002b34 <main+0x1014>)
 8002960:	ed93 7a05 	vldr	s14, [r3, #20]
 8002964:	4b73      	ldr	r3, [pc, #460]	; (8002b34 <main+0x1014>)
 8002966:	edd3 7a03 	vldr	s15, [r3, #12]
 800296a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800296e:	4b71      	ldr	r3, [pc, #452]	; (8002b34 <main+0x1014>)
 8002970:	edd3 7a04 	vldr	s15, [r3, #16]
 8002974:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002978:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <main+0x1014>)
 800297a:	edd3 7a05 	vldr	s15, [r3, #20]
 800297e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002982:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <main+0x1014>)
 8002984:	edd3 7a03 	vldr	s15, [r3, #12]
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002994:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <main+0x1028>)
 8002996:	edc3 7a00 	vstr	s15, [r3]
				freq_new = freq_tim1_float + koeff * freq_tim1_float/4;   // для этого случая N==4
 800299a:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <main+0x1028>)
 800299c:	ed93 7a00 	vldr	s14, [r3]
 80029a0:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <main+0x102c>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80029ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029b2:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <main+0x102c>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <main+0x1030>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
 80029c2:	e0a3      	b.n	8002b0c <main+0xfec>
			}
			else
			{
				if (fft_N ==512)
 80029c4:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <main+0x1024>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029cc:	d167      	bne.n	8002a9e <main+0xf7e>
				{
					ln_x3 = 100000.f * logf((float)arr1_Output_f32[7]);
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <main+0x1014>)
 80029d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80029d4:	eeb0 0a67 	vmov.f32	s0, s15
 80029d8:	f011 fb5c 	bl	8014094 <logf>
 80029dc:	eef0 7a40 	vmov.f32	s15, s0
 80029e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002b54 <main+0x1034>
 80029e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <main+0x1038>)
 80029ea:	edc3 7a00 	vstr	s15, [r3]
					ln_x4 = 100000.f * logf((float)arr1_Output_f32[8]);
 80029ee:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <main+0x1014>)
 80029f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80029f4:	eeb0 0a67 	vmov.f32	s0, s15
 80029f8:	f011 fb4c 	bl	8014094 <logf>
 80029fc:	eef0 7a40 	vmov.f32	s15, s0
 8002a00:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002b54 <main+0x1034>
 8002a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a08:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <main+0x103c>)
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
					ln_x5 = 100000.f * logf((float)arr1_Output_f32[9]);
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <main+0x1014>)
 8002a10:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a14:	eeb0 0a67 	vmov.f32	s0, s15
 8002a18:	f011 fb3c 	bl	8014094 <logf>
 8002a1c:	eef0 7a40 	vmov.f32	s15, s0
 8002a20:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002b54 <main+0x1034>
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <main+0x1040>)
 8002a2a:	edc3 7a00 	vstr	s15, [r3]
					// koeff = (ln_x5 -ln_x3) / (2*(2*ln_x4 -ln_x5 -ln_x3));
					koeff = (8.f + (ln_x5 -ln_x3) / 2.f / (2.f * ln_x4 -ln_x5 -ln_x3)) * 10000.f;
 8002a2e:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <main+0x1040>)
 8002a30:	ed93 7a00 	vldr	s14, [r3]
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <main+0x1038>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a46:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <main+0x103c>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a50:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <main+0x1040>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <main+0x1038>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a68:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a70:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002b64 <main+0x1044>
 8002a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <main+0x1028>)
 8002a7a:	edc3 7a00 	vstr	s15, [r3]
					freq_new = koeff * ((float)freq_tim1_float)/80000.f; // для этого случая N==8
 8002a7e:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <main+0x1028>)
 8002a80:	ed93 7a00 	vldr	s14, [r3]
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <main+0x102c>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002b68 <main+0x1048>
 8002a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <main+0x1030>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
 8002a9c:	e036      	b.n	8002b0c <main+0xfec>
				}
				else
				{
					if (fft_N ==1024)
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <main+0x1024>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d131      	bne.n	8002b0c <main+0xfec>
					{
						koeff = (arr1_Output_f32[17] -arr1_Output_f32[15]) / (2*(2*arr1_Output_f32[16] -arr1_Output_f32[17] -arr1_Output_f32[15]));
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <main+0x1014>)
 8002aaa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <main+0x1014>)
 8002ab0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002ab4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <main+0x1014>)
 8002aba:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002abe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <main+0x1014>)
 8002ac4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <main+0x1014>)
 8002ace:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <main+0x1028>)
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
						freq_new = freq_tim1_float + koeff * freq_tim1_float/16;   // для этого случая N==16
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <main+0x1028>)
 8002ae6:	ed93 7a00 	vldr	s14, [r3]
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <main+0x102c>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002af8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <main+0x102c>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <main+0x1030>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
			//memset(data_adc2, 0, 32764); // sizeof(float32_t)*8196);



		  	// size_data_adc1 = sizeof(data_adc1)/sizeof(data_adc1[0]); // делаем один раз при инициализации
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	82fb      	strh	r3, [r7, #22]
 8002b10:	e03d      	b.n	8002b8e <main+0x106e>
 8002b12:	bf00      	nop
 8002b14:	f3af 8000 	nop.w
 8002b18:	54442d18 	.word	0x54442d18
 8002b1c:	401921fb 	.word	0x401921fb
 8002b20:	2000f634 	.word	0x2000f634
 8002b24:	2000f630 	.word	0x2000f630
 8002b28:	2000f63c 	.word	0x2000f63c
 8002b2c:	2000f640 	.word	0x2000f640
 8002b30:	2000d630 	.word	0x2000d630
 8002b34:	2000b630 	.word	0x2000b630
 8002b38:	2000f638 	.word	0x2000f638
 8002b3c:	2000f644 	.word	0x2000f644
 8002b40:	20011ec4 	.word	0x20011ec4
 8002b44:	20000018 	.word	0x20000018
 8002b48:	2000f658 	.word	0x2000f658
 8002b4c:	2000f654 	.word	0x2000f654
 8002b50:	2000f668 	.word	0x2000f668
 8002b54:	47c35000 	.word	0x47c35000
 8002b58:	2000f65c 	.word	0x2000f65c
 8002b5c:	2000f660 	.word	0x2000f660
 8002b60:	2000f664 	.word	0x2000f664
 8002b64:	461c4000 	.word	0x461c4000
 8002b68:	479c4000 	.word	0x479c4000
				{
					data_adc1[ic] =0;
 8002b6c:	8afb      	ldrh	r3, [r7, #22]
 8002b6e:	4a72      	ldr	r2, [pc, #456]	; (8002d38 <main+0x1218>)
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
					data_adc2[ic] =0;
 8002b7a:	8afb      	ldrh	r3, [r7, #22]
 8002b7c:	4a6f      	ldr	r2, [pc, #444]	; (8002d3c <main+0x121c>)
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
			for (uint16_t ic =0; ic < size_data_adc1  ; ic++)//обнулим место для нового пересчета, время на это == 1447мкс(8196) ==200мкс(1024), методом по циклу, почти тоже самое время
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	82fb      	strh	r3, [r7, #22]
 8002b8e:	8afa      	ldrh	r2, [r7, #22]
 8002b90:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <main+0x1220>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	dbe9      	blt.n	8002b6c <main+0x104c>

	  // здесь будет разборка условий перехода по частоте
	  // freq_new - вычислена выше для типа автоподдержания частоты
	  // если получаем бит сканирования по частоте,  cmd_set.cmd_flags.1
	  // ============================================  сканирование по частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==true)) // скольжение по частоте
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <main+0x1224>)
 8002b9a:	789a      	ldrb	r2, [r3, #2]
 8002b9c:	4b69      	ldr	r3, [pc, #420]	; (8002d44 <main+0x1224>)
 8002b9e:	78db      	ldrb	r3, [r3, #3]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d058      	beq.n	8002c5a <main+0x113a>
	  {
		  if (htim17.Instance->CNT > (cmd_set.time_step *10) )
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <main+0x1228>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bae:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <main+0x1224>)
 8002bb0:	89db      	ldrh	r3, [r3, #14]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d94c      	bls.n	8002c5a <main+0x113a>
		  {
			  htim17.Instance->CNT =0;
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <main+0x1228>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
			  old_freq_new = freq_new;
 8002bc8:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <main+0x122c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a60      	ldr	r2, [pc, #384]	; (8002d50 <main+0x1230>)
 8002bce:	6013      	str	r3, [r2, #0]
			  freq_new = freq_new + flag_napravlenia_scan * cmd_set.step;
 8002bd0:	4b60      	ldr	r3, [pc, #384]	; (8002d54 <main+0x1234>)
 8002bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <main+0x1224>)
 8002bda:	899b      	ldrh	r3, [r3, #12]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <main+0x122c>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf2:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <main+0x122c>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
			  if (freq_new > (cmd_set.freq_start + (cmd_set.step *(cmd_set.N_step-1))))
 8002bf8:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <main+0x1224>)
 8002bfa:	891b      	ldrh	r3, [r3, #8]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <main+0x1224>)
 8002c00:	899b      	ldrh	r3, [r3, #12]
 8002c02:	4619      	mov	r1, r3
 8002c04:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <main+0x1224>)
 8002c06:	8a1b      	ldrh	r3, [r3, #16]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c18:	4b4c      	ldr	r3, [pc, #304]	; (8002d4c <main+0x122c>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d503      	bpl.n	8002c30 <main+0x1110>
			  {
				  flag_napravlenia_scan = -1; // следующий степ будет в отрицательную сторону
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <main+0x1234>)
 8002c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2e:	801a      	strh	r2, [r3, #0]
			  }
			  if (freq_new < (cmd_set.freq_start + cmd_set.step))
 8002c30:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <main+0x1224>)
 8002c32:	891b      	ldrh	r3, [r3, #8]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <main+0x1224>)
 8002c38:	899b      	ldrh	r3, [r3, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <main+0x122c>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	dd02      	ble.n	8002c5a <main+0x113a>
			  {
				  flag_napravlenia_scan = 1; // следующий степ будет в положительную сторону
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <main+0x1234>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	  // ============================================  стоять на одной частоте  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_autoTuning_freq ==false)) // стоять на одной частоте
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <main+0x1224>)
 8002c5c:	789b      	ldrb	r3, [r3, #2]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <main+0x1224>)
 8002c62:	78db      	ldrb	r3, [r3, #3]
 8002c64:	f083 0301 	eor.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	4a35      	ldr	r2, [pc, #212]	; (8002d44 <main+0x1224>)
 8002c6e:	7952      	ldrb	r2, [r2, #5]
 8002c70:	f082 0201 	eor.w	r2, r2, #1
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00c      	beq.n	8002c96 <main+0x1176>
	  {
		  old_freq_new = freq_new;		//  при  cmd_set.flag_ON_scan_freq      новая частота будет формироваться при сканировании
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <main+0x122c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <main+0x1230>)
 8002c82:	6013      	str	r3, [r2, #0]
		  freq_new = cmd_set.freq_start; // при  cmd_set.flag_ON_autoTuning_freq  новую частоту будем вычислять после FFT преобразования
 8002c84:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <main+0x1224>)
 8002c86:	891b      	ldrh	r3, [r3, #8]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <main+0x122c>)
 8002c92:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (cmd_set.flag_ON_generation ==false)
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <main+0x1224>)
 8002c98:	789b      	ldrb	r3, [r3, #2]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <main+0x118c>
		  { index_data_real_zamer = 1024; } // чтобы при сканировании по времени, передача начиналась сразу, не надо было ждать
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <main+0x1238>)
 8002ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002caa:	801a      	strh	r2, [r3, #0]

	  // ============================================  автоподстройка частоты  ================================================
	  if ((cmd_set.flag_ON_generation ==true) & (cmd_set.flag_ON_autoTuning_freq ==true) & (cmd_set.flag_ON_scan_freq ==false) & (cmd_set.flag_ON_scan_time ==false)) // автоподстройка частоты
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <main+0x1224>)
 8002cae:	789a      	ldrb	r2, [r3, #2]
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <main+0x1224>)
 8002cb2:	795b      	ldrb	r3, [r3, #5]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <main+0x1224>)
 8002cbc:	78db      	ldrb	r3, [r3, #3]
 8002cbe:	f083 0301 	eor.w	r3, r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <main+0x1224>)
 8002cc8:	7992      	ldrb	r2, [r2, #6]
 8002cca:	f082 0201 	eor.w	r2, r2, #1
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80b5 	beq.w	8002e42 <main+0x1322>
	  {
			if (old_freq_new >0)// надо проверить, чтобы не выскакивало за пределы
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <main+0x1230>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	dd42      	ble.n	8002d6e <main+0x124e>
				{
					if (freq_new >14500)
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <main+0x122c>)
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002d5c <main+0x123c>
 8002cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	dd35      	ble.n	8002d68 <main+0x1248>
						{
							if (freq_new <43000)
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <main+0x122c>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d60 <main+0x1240>
 8002d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	d50f      	bpl.n	8002d30 <main+0x1210>
								{ freq_new = (freq_new + old_freq_new) /2;  }
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <main+0x122c>)
 8002d12:	ed93 7a00 	vldr	s14, [r3]
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <main+0x1230>)
 8002d18:	edd3 7a00 	vldr	s15, [r3]
 8002d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <main+0x122c>)
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
 8002d2e:	e01e      	b.n	8002d6e <main+0x124e>
							else
								{ freq_new = 25000; }
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <main+0x122c>)
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <main+0x1244>)
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e01a      	b.n	8002d6e <main+0x124e>
 8002d38:	2000262c 	.word	0x2000262c
 8002d3c:	2000462c 	.word	0x2000462c
 8002d40:	2000662c 	.word	0x2000662c
 8002d44:	20011ec4 	.word	0x20011ec4
 8002d48:	20012108 	.word	0x20012108
 8002d4c:	2000f668 	.word	0x2000f668
 8002d50:	2000f66c 	.word	0x2000f66c
 8002d54:	2000001a 	.word	0x2000001a
 8002d58:	20011ec0 	.word	0x20011ec0
 8002d5c:	46629000 	.word	0x46629000
 8002d60:	4727f800 	.word	0x4727f800
 8002d64:	46c35000 	.word	0x46c35000
						}
					else
					{ freq_new = 25000; }
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <main+0x1378>)
 8002d6a:	4a4c      	ldr	r2, [pc, #304]	; (8002e9c <main+0x137c>)
 8002d6c:	601a      	str	r2, [r3, #0]
				}
			old_freq_new = freq_new;
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <main+0x1378>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4b      	ldr	r2, [pc, #300]	; (8002ea0 <main+0x1380>)
 8002d74:	6013      	str	r3, [r2, #0]
			err_f[9] = err_f[8];
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <main+0x1384>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <main+0x1384>)
 8002d7c:	6253      	str	r3, [r2, #36]	; 0x24
			err_f[8] = err_f[7];
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <main+0x1384>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <main+0x1384>)
 8002d84:	6213      	str	r3, [r2, #32]
			err_f[7] = err_f[6];
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <main+0x1384>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <main+0x1384>)
 8002d8c:	61d3      	str	r3, [r2, #28]
			err_f[6] = err_f[5];
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <main+0x1384>)
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4a44      	ldr	r2, [pc, #272]	; (8002ea4 <main+0x1384>)
 8002d94:	6193      	str	r3, [r2, #24]
			err_f[5] = err_f[4];
 8002d96:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <main+0x1384>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	4a42      	ldr	r2, [pc, #264]	; (8002ea4 <main+0x1384>)
 8002d9c:	6153      	str	r3, [r2, #20]
			err_f[4] = err_f[3];
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <main+0x1384>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a40      	ldr	r2, [pc, #256]	; (8002ea4 <main+0x1384>)
 8002da4:	6113      	str	r3, [r2, #16]
			err_f[3] = err_f[2];
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <main+0x1384>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <main+0x1384>)
 8002dac:	60d3      	str	r3, [r2, #12]
			err_f[2] = err_f[1];
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <main+0x1384>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <main+0x1384>)
 8002db4:	6093      	str	r3, [r2, #8]
			err_f[1] = err_f[0];
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <main+0x1384>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <main+0x1384>)
 8002dbc:	6053      	str	r3, [r2, #4]
			err_f[0] = freq_new;
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <main+0x1378>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <main+0x1384>)
 8002dc4:	6013      	str	r3, [r2, #0]
			delta_F = fabsf (freq_new - (err_f[0] +err_f[1] +err_f[2] +err_f[3] +err_f[4] +err_f[5] +err_f[6] +err_f[7] +err_f[8] +err_f[9])/10);
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <main+0x1378>)
 8002dc8:	ed93 7a00 	vldr	s14, [r3]
 8002dcc:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <main+0x1384>)
 8002dce:	edd3 6a00 	vldr	s13, [r3]
 8002dd2:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <main+0x1384>)
 8002dd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dd8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <main+0x1384>)
 8002dde:	edd3 7a02 	vldr	s15, [r3, #8]
 8002de2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <main+0x1384>)
 8002de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <main+0x1384>)
 8002df2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002df6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <main+0x1384>)
 8002dfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <main+0x1384>)
 8002e06:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e0e:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <main+0x1384>)
 8002e10:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e18:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <main+0x1384>)
 8002e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <main+0x1384>)
 8002e24:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e2c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002e30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	eef0 7ae7 	vabs.f32	s15, s15
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <main+0x1388>)
 8002e3e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  // ========================== а вот ОНО, - новая частота  ============================
	  hrtim_period_new = 5440000000 / ((uint32_t) freq_new) / (htim1.Instance->ARR +1) ;
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <main+0x1378>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	ee17 5a90 	vmov	r5, s15
 8002e52:	461e      	mov	r6, r3
 8002e54:	462a      	mov	r2, r5
 8002e56:	4633      	mov	r3, r6
 8002e58:	a10d      	add	r1, pc, #52	; (adr r1, 8002e90 <main+0x1370>)
 8002e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e5e:	f7fd ff3b 	bl	8000cd8 <__aeabi_ldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <main+0x138c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	2200      	movs	r2, #0
 8002e74:	469a      	mov	sl, r3
 8002e76:	4693      	mov	fp, r2
 8002e78:	4652      	mov	r2, sl
 8002e7a:	465b      	mov	r3, fp
 8002e7c:	f7fd ff2c 	bl	8000cd8 <__aeabi_ldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <main+0x1390>)
 8002e86:	601a      	str	r2, [r3, #0]
	  	  if ((cmd_set.flag_ON_TxData_cicle == true) & (flag_data_complit_for_Tx ==0))
 8002e88:	f7fe bff0 	b.w	8001e6c <main+0x34c>
 8002e8c:	f3af 8000 	nop.w
 8002e90:	443fd000 	.word	0x443fd000
 8002e94:	00000001 	.word	0x00000001
 8002e98:	2000f668 	.word	0x2000f668
 8002e9c:	46c35000 	.word	0x46c35000
 8002ea0:	2000f66c 	.word	0x2000f66c
 8002ea4:	2000f680 	.word	0x2000f680
 8002ea8:	2000f6a8 	.word	0x2000f6a8
 8002eac:	20011f40 	.word	0x20011f40
 8002eb0:	2000001c 	.word	0x2000001c

08002eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b094      	sub	sp, #80	; 0x50
 8002eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eba:	f107 0318 	add.w	r3, r7, #24
 8002ebe:	2238      	movs	r2, #56	; 0x38
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f00c fb9c 	bl	800f600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f006 fa1a 	bl	8009310 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eea:	2302      	movs	r3, #2
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002ef6:	2355      	movs	r3, #85	; 0x55
 8002ef8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002efa:	2307      	movs	r3, #7
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002efe:	2302      	movs	r3, #2
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f02:	2302      	movs	r3, #2
 8002f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f06:	f107 0318 	add.w	r3, r7, #24
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f006 fab4 	bl	8009478 <HAL_RCC_OscConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f16:	f000 fde9 	bl	8003aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	2104      	movs	r1, #4
 8002f32:	4618      	mov	r0, r3
 8002f34:	f006 fdb8 	bl	8009aa8 <HAL_RCC_ClockConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002f3e:	f000 fdd5 	bl	8003aec <Error_Handler>
  }
}
 8002f42:	bf00      	nop
 8002f44:	3750      	adds	r7, #80	; 0x50
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <eMBRegInputCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   						В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	803b      	strh	r3, [r7, #0]
	// эта фун осталась как заглушка, значения в буфер  pucRegBuffer  закладываются в конце обработки замера
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
    USHORT number_data_array = usNRegs; // number_data_array - это будет номер элемента массива замеров, это будет собираться пакет из 10 массивов, из каждого этот элемент
 8002f60:	883b      	ldrh	r3, [r7, #0]
 8002f62:	81bb      	strh	r3, [r7, #12]
    if (number_data_array > 1024) { number_data_array =1023; } // размер всех этих массивов = 1024
 8002f64:	89bb      	ldrh	r3, [r7, #12]
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d902      	bls.n	8002f72 <eMBRegInputCB+0x26>
 8002f6c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002f70:	81bb      	strh	r3, [r7, #12]

	// DWT_CYCCNT =0;// обнуляем значение
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код
    		if (cmd_set.step ==0) {cmd_set.step =1;}
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <eMBRegInputCB+0xa0>)
 8002f74:	899b      	ldrh	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <eMBRegInputCB+0x34>
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <eMBRegInputCB+0xa0>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	819a      	strh	r2, [r3, #12]
			 index_temp = (freq_tim1 - cmd_set.freq_start) / cmd_set.step;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <eMBRegInputCB+0xa4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <eMBRegInputCB+0xa0>)
 8002f86:	8912      	ldrh	r2, [r2, #8]
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <eMBRegInputCB+0xa0>)
 8002f8c:	8992      	ldrh	r2, [r2, #12]
 8002f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <eMBRegInputCB+0xa8>)
 8002f96:	801a      	strh	r2, [r3, #0]
			 if (index_temp > 1000) { index_temp =1000; }
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <eMBRegInputCB+0xa8>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	d903      	bls.n	8002faa <eMBRegInputCB+0x5e>
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <eMBRegInputCB+0xa8>)
 8002fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fa8:	801a      	strh	r2, [r3, #0]
			 if (index_temp < 1) { index_temp =0; }
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <eMBRegInputCB+0xa8>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <eMBRegInputCB+0x6c>
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <eMBRegInputCB+0xa8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	801a      	strh	r2, [r3, #0]

			 number_data_array=index_temp;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <eMBRegInputCB+0xa8>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	81bb      	strh	r3, [r7, #12]


			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float = (float32_t) (freq_tim1 +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <eMBRegInputCB+0xa4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	332a      	adds	r3, #42	; 0x2a
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <eMBRegInputCB+0xac>)
 8002fce:	edc3 7a00 	vstr	s15, [r3]
			 *pucRegBuffer++ = 	*(((uint8_t *) &temp_float) + 0); //
 8002fd2:	4909      	ldr	r1, [pc, #36]	; (8002ff8 <eMBRegInputCB+0xac>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	780a      	ldrb	r2, [r1, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]

    return eStatus;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20011ec4 	.word	0x20011ec4
 8002ff0:	2000f650 	.word	0x2000f650
 8002ff4:	20011ebe 	.word	0x20011ebe
 8002ff8:	20011f30 	.word	0x20011f30

08002ffc <eMBRegHoldingCB>:
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE BUSY ( ВЕДОМОЕ УСТРОЙСТВО ЗАНЯТО ).
 *   - eMBErrorCode::MB_EIO Если произошла неустранимая ошибка.
 *   							В этом случае в качестве ответа отправляется исключение SLAVE DEVICE FAILURE ( СБОЙ ВЕДОМОГО УСТРОЙСТВА ).
 */
eMBErrorCode    eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress,  USHORT usNRegs, eMBRegisterMode eMode )
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	460b      	mov	r3, r1
 8003010:	813b      	strh	r3, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003016:	2300      	movs	r3, #0
 8003018:	74fb      	strb	r3, [r7, #19]
    int             iRegIndex;

    // проверка пределов, и вгон в разрешенный диапазон,
    // будет отвечать ошибочными данными, но сам дебил кто дает ошибочный запрос
    if (usNRegs ==0) 	{ usNRegs =1; }
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <eMBRegHoldingCB+0x28>
 8003020:	2301      	movs	r3, #1
 8003022:	813b      	strh	r3, [r7, #8]
    if (usNRegs > REG_HOLDING_NREGS)	{ usNRegs =REG_HOLDING_NREGS; }
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d901      	bls.n	800302e <eMBRegHoldingCB+0x32>
 800302a:	2310      	movs	r3, #16
 800302c:	813b      	strh	r3, [r7, #8]
    if (usAddress < REG_HOLDING_START)	{ usAddress = usAddress; }
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	2b00      	cmp	r3, #0
    if ((usAddress + usNRegs) > (REG_HOLDING_START + REG_HOLDING_NREGS)) { usAddress = REG_HOLDING_START - REG_HOLDING_NREGS; }
 8003032:	897a      	ldrh	r2, [r7, #10]
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	4413      	add	r3, r2
 8003038:	2b11      	cmp	r3, #17
 800303a:	dd02      	ble.n	8003042 <eMBRegHoldingCB+0x46>
 800303c:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8003040:	817b      	strh	r3, [r7, #10]

        iRegIndex = ( int )( usAddress - num_reg_CMD_Start );
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	4a53      	ldr	r2, [pc, #332]	; (8003194 <eMBRegHoldingCB+0x198>)
 8003046:	8812      	ldrh	r2, [r2, #0]
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	617b      	str	r3, [r7, #20]

            /* Pass current register values to the protocol stack.
             * Передайте текущие значения регистра в стек протоколов.*/
        if (eMode == MB_REG_READ)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <eMBRegHoldingCB+0x92>
        {
             while( usNRegs > 0 )
 8003052:	e019      	b.n	8003088 <eMBRegHoldingCB+0x8c>
            {
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] >> 8 );
 8003054:	4a50      	ldr	r2, [pc, #320]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	b299      	uxth	r1, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	60fa      	str	r2, [r7, #12]
 8003066:	b2ca      	uxtb	r2, r1
 8003068:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( unsigned char )( Reg_CMD_Buf[iRegIndex] & 0xFF );
 800306a:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <eMBRegHoldingCB+0x19c>)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	b2ca      	uxtb	r2, r1
 800307a:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3301      	adds	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
                usNRegs--;
 8003082:	893b      	ldrh	r3, [r7, #8]
 8003084:	3b01      	subs	r3, #1
 8003086:	813b      	strh	r3, [r7, #8]
             while( usNRegs > 0 )
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e2      	bne.n	8003054 <eMBRegHoldingCB+0x58>
            }
        } // if (eMode == MB_REG_READ)

            /* Update current register values with new values from the  protocol stack.
             * Обновите текущие значения регистра новыми значениями из стека протоколов. */
        if (eMode == MB_REG_WRITE)
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d178      	bne.n	8003186 <eMBRegHoldingCB+0x18a>
        {
            while( usNRegs > 0 )
 8003094:	e01f      	b.n	80030d6 <eMBRegHoldingCB+0xda>
            {
                Reg_CMD_Buf[iRegIndex] = *pucRegBuffer++ << 8;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	b299      	uxth	r1, r3
 80030a4:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <eMBRegHoldingCB+0x19c>)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Reg_CMD_Buf[iRegIndex] |= *pucRegBuffer++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	60fa      	str	r2, [r7, #12]
 80030b2:	7819      	ldrb	r1, [r3, #0]
 80030b4:	4a38      	ldr	r2, [pc, #224]	; (8003198 <eMBRegHoldingCB+0x19c>)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030bc:	b28b      	uxth	r3, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	b299      	uxth	r1, r3
 80030c2:	4a35      	ldr	r2, [pc, #212]	; (8003198 <eMBRegHoldingCB+0x19c>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3301      	adds	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
                usNRegs--;
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80030d6:	893b      	ldrh	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1dc      	bne.n	8003096 <eMBRegHoldingCB+0x9a>
            }
            cmd_set.cmd_flags	= Reg_CMD_Buf[0];	//	Reg_CMD_Buf[0] - регистр флагов-команд, приходящих для исполнения
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <eMBRegHoldingCB+0x19c>)
 80030de:	881a      	ldrh	r2, [r3, #0]
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <eMBRegHoldingCB+0x1a0>)
 80030e2:	801a      	strh	r2, [r3, #0]
            cmd_set.flag_ON_generation = 	Reg_CMD_Buf[0] & 0b0000000000000001;	// Reg_CMD_Buf[0].0 - флаг-команда Включить Генерацию
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <eMBRegHoldingCB+0x19c>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <eMBRegHoldingCB+0x1a0>)
 80030f8:	709a      	strb	r2, [r3, #2]
            cmd_set.flag_ON_scan_freq = 	Reg_CMD_Buf[0] & 0b0000000000000010;	// Reg_CMD_Buf[0].1 - флаг-команда Вкл. Скольжение по диапазону, в соответствии с задаными регистрами
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <eMBRegHoldingCB+0x19c>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2da      	uxtb	r2, r3
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <eMBRegHoldingCB+0x1a0>)
 800310e:	70da      	strb	r2, [r3, #3]
            cmd_set.flag_ON_TxData_cicle = 	Reg_CMD_Buf[0] & 0b0000000000000100;	// Reg_CMD_Buf[0].2 - флаг-команда Вкл. долбежку передачи данных по кругу, прием при этом прекратиться, стоповать можно будет только синей кнопкой
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <eMBRegHoldingCB+0x1a0>)
 8003124:	711a      	strb	r2, [r3, #4]
            cmd_set.flag_ON_autoTuning_freq=Reg_CMD_Buf[0] & 0b0000000000001000;	// Reg_CMD_Buf[0].3 - флаг-команда при включеной генерации автоподстройка частоты будет работать, если включен флаг скольжения, этот флаг игнорится
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <eMBRegHoldingCB+0x1a0>)
 800313a:	715a      	strb	r2, [r3, #5]
            cmd_set.flag_ON_scan_time = 	Reg_CMD_Buf[0] & 0b0000000000010000;	// Reg_CMD_Buf[0].4 - флаг-команда на вкл генерации на одной частоте, и циклическую передачу сигналов КЛЮЧ�?, ТОК и НАПРЯЖЕН�?Е в реале, как есть из замера
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <eMBRegHoldingCB+0x19c>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <eMBRegHoldingCB+0x1a0>)
 8003150:	719a      	strb	r2, [r3, #6]

            cmd_set.proc_pwr	= Reg_CMD_Buf[1];	//	Reg_CMD_Buf[1] - регистр мощности,  2-98% заполнения
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003154:	885a      	ldrh	r2, [r3, #2]
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <eMBRegHoldingCB+0x1a0>)
 8003158:	815a      	strh	r2, [r3, #10]
   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
            cmd_set.freq_start	= Reg_CMD_Buf[2] -42;	// Reg_CMD_Buf[2] - регистр стартовой частоты, 14500-43000
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <eMBRegHoldingCB+0x19c>)
 800315c:	889b      	ldrh	r3, [r3, #4]
 800315e:	3b2a      	subs	r3, #42	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <eMBRegHoldingCB+0x1a0>)
 8003164:	811a      	strh	r2, [r3, #8]
            cmd_set.step 		= Reg_CMD_Buf[3];	//	Reg_CMD_Buf[3] - регистр step(1-25гц) перемещения частоты, при сканировании диапазона, при сканировании старт будет Reg_CMD_Buf[2], максимум = (Reg_CMD_Buf[2] + step*_N-количество_)
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003168:	88da      	ldrh	r2, [r3, #6]
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <eMBRegHoldingCB+0x1a0>)
 800316c:	819a      	strh	r2, [r3, #12]
            cmd_set.time_step	= Reg_CMD_Buf[4];	//	Reg_CMD_Buf[4] - регистр время милисекунд, между степами (10-1000мс)
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003170:	891a      	ldrh	r2, [r3, #8]
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <eMBRegHoldingCB+0x1a0>)
 8003174:	81da      	strh	r2, [r3, #14]
            cmd_set.N_step		= Reg_CMD_Buf[5];	//	Reg_CMD_Buf[5] - регистр N-количество степов при сканировании 4-1000
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003178:	895a      	ldrh	r2, [r3, #10]
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <eMBRegHoldingCB+0x1a0>)
 800317c:	821a      	strh	r2, [r3, #16]
            Reg_CMD_Buf[6] = Reg_CMD_Buf[5];
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003180:	895a      	ldrh	r2, [r3, #10]
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <eMBRegHoldingCB+0x19c>)
 8003184:	819a      	strh	r2, [r3, #12]
        } // if (eMode == MB_REG_WRITE)
    return eStatus;
 8003186:	7cfb      	ldrb	r3, [r7, #19]
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000000 	.word	0x20000000
 8003198:	200005ec 	.word	0x200005ec
 800319c:	20011ec4 	.word	0x20011ec4

080031a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
	// для контроля окончания передачи пакета на МВ485, используем прерывание от ножки PA11--PA12--DE--MB485
	// никаких разборок с EXTI нету,  там всего одно прерывание включено,
	xMBRTUTransmitFSM();
 80031aa:	f00b f96b 	bl	800e484 <xMBRTUTransmitFSM>
	flag_exti_stop_TX_cicles++;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80031b8:	701a      	strb	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000619 	.word	0x20000619

080031c8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10d      	bne.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x2e>
    	{
    		counter_Tim6_MB++;
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031e4:	801a      	strh	r2, [r3, #0]
    		if(counter_Tim6_MB >=timeout_Tim6_50us)
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031e8:	881a      	ldrh	r2, [r3, #0]
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d301      	bcc.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x2e>
			  { xMBRTUTimerT35Expired();   }
 80031f2:	f00b f96d 	bl	800e4d0 <xMBRTUTimerT35Expired>
    	}
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40001000 	.word	0x40001000
 8003204:	2000060e 	.word	0x2000060e
 8003208:	2000060c 	.word	0x2000060c

0800320c <_write>:


int _write(int file, char *ptr, int len)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e009      	b.n	8003232 <_write+0x26>
		{ ITM_SendChar(*ptr++); }
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	60ba      	str	r2, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fc18 	bl	8001a5c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	dbf1      	blt.n	800321e <_write+0x12>
	return len;
 800323a:	687b      	ldr	r3, [r7, #4]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <Mem_to_Mem_Complete>:


static void Mem_to_Mem_Complete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	 // а сколько это мкс? в реале == 41 мкс 1024 WORD передача Mem_to_Mem;
	LL_ADC_REG_StartConversion(hadc1.Instance);  //  - это есть старт АЦП произвольно по желанию, если был остановлен
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <Mem_to_Mem_Complete+0x20>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fc2a 	bl	8001aaa <LL_ADC_REG_StartConversion>
	flag_end_FFT =0;
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <Mem_to_Mem_Complete+0x24>)
 8003258:	2200      	movs	r2, #0
 800325a:	801a      	strh	r2, [r3, #0]
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200002cc 	.word	0x200002cc
 8003268:	2000061a 	.word	0x2000061a

0800326c <HAL_ADC_ConvCpltCallback>:
//			 какой то код
// count_tic_finish = DWT_CYCCNT - count_tic_start;//смотрим сколько натикало  - ццикл отсоса массивов данных длится 16мкс
// count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	// LL_ADC_REG_StopConversion (hadc1.Instance);
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel4, (uint32_t)zamer_adc1_2, (uint32_t)zamer_adc_dma, LENGTH_SAMPLES);
 8003274:	4905      	ldr	r1, [pc, #20]	; (800328c <HAL_ADC_ConvCpltCallback+0x20>)
 8003276:	4a06      	ldr	r2, [pc, #24]	; (8003290 <HAL_ADC_ConvCpltCallback+0x24>)
 8003278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800327c:	4805      	ldr	r0, [pc, #20]	; (8003294 <HAL_ADC_ConvCpltCallback+0x28>)
 800327e:	f003 fdf1 	bl	8006e64 <HAL_DMA_Start_IT>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000062c 	.word	0x2000062c
 8003290:	2000162c 	.word	0x2000162c
 8003294:	2000048c 	.word	0x2000048c

08003298 <HAL_UART_TxCpltCallback>:
//	// status_USBcdc_TX = CDC_Transmit_FS((uint8_t *) HEAP_arr_ADC_zamer, 64);
	return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	// включаем прием LPUART, ждём настроечных данных+
//	status_RX_LPuart = HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *) cmd_array_SPI, len_cmd_array_SPI);
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Led green
	return;
 80032a0:	bf00      	nop
}
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <fun_data_time_podgotovka>:

uint16_t fun_data_time_podgotovka( uint8_t * buffer_data_time, uint16_t index_data_time_zamer )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
	// DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
	// Какой-то код
	//			 какой то код

			 // index_data_real_zamer ++; // в ноль будет сбрасываться при окончании пересчета массивов данных, �? после передачи всего пакета
			 if (index_data_time_zamer > 1022)
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80032be:	4293      	cmp	r3, r2
 80032c0:	d902      	bls.n	80032c8 <fun_data_time_podgotovka+0x1c>
			 	 {index_data_time_zamer =1022; }
 80032c2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80032c6:	807b      	strh	r3, [r7, #2]

			 temp_float = (float) index_data_time_zamer;  // index-NUMBER index-NUMBER index-NUMBER index-NUMBER index-NUMBER   если будем долбить по кругу реальные замеры по времени
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	4ba1      	ldr	r3, [pc, #644]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80032d4:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80032d8:	499f      	ldr	r1, [pc, #636]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	780a      	ldrb	r2, [r1, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	4a9b      	ldr	r2, [pc, #620]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80032ec:	7852      	ldrb	r2, [r2, #1]
 80032ee:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	4a98      	ldr	r2, [pc, #608]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80032f8:	7892      	ldrb	r2, [r2, #2]
 80032fa:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	4a95      	ldr	r2, [pc, #596]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003304:	78d2      	ldrb	r2, [r2, #3]
 8003306:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  1_X0
			 temp_float = (float) adc1_Tx[index_data_time_zamer]; //
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	4a94      	ldr	r2, [pc, #592]	; (800355c <fun_data_time_podgotovka+0x2b0>)
 800330c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003318:	4b8f      	ldr	r3, [pc, #572]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800331a:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800331e:	498e      	ldr	r1, [pc, #568]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	780a      	ldrb	r2, [r1, #0]
 8003328:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	4a89      	ldr	r2, [pc, #548]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003332:	7852      	ldrb	r2, [r2, #1]
 8003334:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	4a86      	ldr	r2, [pc, #536]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800333e:	7892      	ldrb	r2, [r2, #2]
 8003340:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	4a83      	ldr	r2, [pc, #524]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800334a:	78d2      	ldrb	r2, [r2, #3]
 800334c:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  1_X0+1
			 temp_float = (float) adc1_Tx[index_data_time_zamer +1];
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	3301      	adds	r3, #1
 8003352:	4a82      	ldr	r2, [pc, #520]	; (800355c <fun_data_time_podgotovka+0x2b0>)
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	4b7d      	ldr	r3, [pc, #500]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003362:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003366:	497c      	ldr	r1, [pc, #496]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	780a      	ldrb	r2, [r1, #0]
 8003370:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	4a77      	ldr	r2, [pc, #476]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800337a:	7852      	ldrb	r2, [r2, #1]
 800337c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	4a74      	ldr	r2, [pc, #464]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003386:	7892      	ldrb	r2, [r2, #2]
 8003388:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	4a71      	ldr	r2, [pc, #452]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003392:	78d2      	ldrb	r2, [r2, #3]
 8003394:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз     adc1_Tx - реальные фактические данные АЦП-1  1_X0+2
			 temp_float = (float) adc1_Tx[index_data_time_zamer +2];
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	3302      	adds	r3, #2
 800339a:	4a70      	ldr	r2, [pc, #448]	; (800355c <fun_data_time_podgotovka+0x2b0>)
 800339c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a8:	4b6b      	ldr	r3, [pc, #428]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033aa:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033ae:	496a      	ldr	r1, [pc, #424]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	780a      	ldrb	r2, [r1, #0]
 80033b8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	4a65      	ldr	r2, [pc, #404]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033c2:	7852      	ldrb	r2, [r2, #1]
 80033c4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	4a62      	ldr	r2, [pc, #392]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033ce:	7892      	ldrb	r2, [r2, #2]
 80033d0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	4a5f      	ldr	r2, [pc, #380]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033da:	78d2      	ldrb	r2, [r2, #3]
 80033dc:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   2_X0
			 temp_float = data_adc1_Tx[index_data_time_zamer];
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	4a5f      	ldr	r2, [pc, #380]	; (8003560 <fun_data_time_podgotovka+0x2b4>)
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5b      	ldr	r2, [pc, #364]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033ea:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80033ec:	495a      	ldr	r1, [pc, #360]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	780a      	ldrb	r2, [r1, #0]
 80033f6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	4a56      	ldr	r2, [pc, #344]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003400:	7852      	ldrb	r2, [r2, #1]
 8003402:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	4a53      	ldr	r2, [pc, #332]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800340c:	7892      	ldrb	r2, [r2, #2]
 800340e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	4a50      	ldr	r2, [pc, #320]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003418:	78d2      	ldrb	r2, [r2, #3]
 800341a:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   2_X0+1
			 temp_float = data_adc1_Tx[index_data_time_zamer +1];
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	3301      	adds	r3, #1
 8003420:	4a4f      	ldr	r2, [pc, #316]	; (8003560 <fun_data_time_podgotovka+0x2b4>)
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4b      	ldr	r2, [pc, #300]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800342a:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800342c:	494a      	ldr	r1, [pc, #296]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	780a      	ldrb	r2, [r1, #0]
 8003436:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	4a46      	ldr	r2, [pc, #280]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003440:	7852      	ldrb	r2, [r2, #1]
 8003442:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	4a43      	ldr	r2, [pc, #268]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800344c:	7892      	ldrb	r2, [r2, #2]
 800344e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	4a40      	ldr	r2, [pc, #256]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003458:	78d2      	ldrb	r2, [r2, #3]
 800345a:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-1   2_X0+2
			 temp_float = data_adc1_Tx[index_data_time_zamer +2];
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	3302      	adds	r3, #2
 8003460:	4a3f      	ldr	r2, [pc, #252]	; (8003560 <fun_data_time_podgotovka+0x2b4>)
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3b      	ldr	r2, [pc, #236]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800346a:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800346c:	493a      	ldr	r1, [pc, #232]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	780a      	ldrb	r2, [r1, #0]
 8003476:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	4a36      	ldr	r2, [pc, #216]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003480:	7852      	ldrb	r2, [r2, #1]
 8003482:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	4a33      	ldr	r2, [pc, #204]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800348c:	7892      	ldrb	r2, [r2, #2]
 800348e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	4a30      	ldr	r2, [pc, #192]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003498:	78d2      	ldrb	r2, [r2, #3]
 800349a:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    3_X0
			 temp_float = (float) (adc2_Tx[index_data_time_zamer]);
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4a31      	ldr	r2, [pc, #196]	; (8003564 <fun_data_time_podgotovka+0x2b8>)
 80034a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034b2:	4929      	ldr	r1, [pc, #164]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	780a      	ldrb	r2, [r1, #0]
 80034bc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	4a24      	ldr	r2, [pc, #144]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034c6:	7852      	ldrb	r2, [r2, #1]
 80034c8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034d2:	7892      	ldrb	r2, [r2, #2]
 80034d4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034de:	78d2      	ldrb	r2, [r2, #3]
 80034e0:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    3_X0+1
			 temp_float = (float) (adc2_Tx[index_data_time_zamer +1]);
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <fun_data_time_podgotovka+0x2b8>)
 80034e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034f6:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80034fa:	4917      	ldr	r1, [pc, #92]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	780a      	ldrb	r2, [r1, #0]
 8003504:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800350e:	7852      	ldrb	r2, [r2, #1]
 8003510:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800351a:	7892      	ldrb	r2, [r2, #2]
 800351c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 3);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003526:	78d2      	ldrb	r2, [r2, #3]
 8003528:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз		adc2_Tx - реальные фактические данные АЦП-2    3_X0+2
			 temp_float = (float) (adc2_Tx[index_data_time_zamer +2]);
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	3302      	adds	r3, #2
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <fun_data_time_podgotovka+0x2b8>)
 8003530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 800353e:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003542:	4905      	ldr	r1, [pc, #20]	; (8003558 <fun_data_time_podgotovka+0x2ac>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	780a      	ldrb	r2, [r1, #0]
 800354c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	e008      	b.n	8003568 <fun_data_time_podgotovka+0x2bc>
 8003556:	bf00      	nop
 8003558:	20011f30 	.word	0x20011f30
 800355c:	20006630 	.word	0x20006630
 8003560:	20007630 	.word	0x20007630
 8003564:	20006e30 	.word	0x20006e30
 8003568:	4aa3      	ldr	r2, [pc, #652]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800356a:	7852      	ldrb	r2, [r2, #1]
 800356c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	4aa0      	ldr	r2, [pc, #640]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003576:	7892      	ldrb	r2, [r2, #2]
 8003578:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 3);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	4a9d      	ldr	r2, [pc, #628]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003582:	78d2      	ldrb	r2, [r2, #3]
 8003584:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    4_X0
			 temp_float = data_adc2_Tx[index_data_time_zamer];
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	4a9c      	ldr	r2, [pc, #624]	; (80037fc <fun_data_time_podgotovka+0x550>)
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a99      	ldr	r2, [pc, #612]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003592:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003594:	4998      	ldr	r1, [pc, #608]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	780a      	ldrb	r2, [r1, #0]
 800359e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	4a94      	ldr	r2, [pc, #592]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035a8:	7852      	ldrb	r2, [r2, #1]
 80035aa:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	4a91      	ldr	r2, [pc, #580]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035b4:	7892      	ldrb	r2, [r2, #2]
 80035b6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	4a8e      	ldr	r2, [pc, #568]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035c0:	78d2      	ldrb	r2, [r2, #3]
 80035c2:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    4_X0+1
			 temp_float = data_adc2_Tx[index_data_time_zamer +1];
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	3301      	adds	r3, #1
 80035c8:	4a8c      	ldr	r2, [pc, #560]	; (80037fc <fun_data_time_podgotovka+0x550>)
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a89      	ldr	r2, [pc, #548]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035d2:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80035d4:	4988      	ldr	r1, [pc, #544]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	780a      	ldrb	r2, [r1, #0]
 80035de:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	4a84      	ldr	r2, [pc, #528]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035e8:	7852      	ldrb	r2, [r2, #1]
 80035ea:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	4a81      	ldr	r2, [pc, #516]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80035f4:	7892      	ldrb	r2, [r2, #2]
 80035f6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003600:	78d2      	ldrb	r2, [r2, #3]
 8003602:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз		data_adc2_Tx - фильтрованые  данные  после АЦП-2    4_X0+2
			 temp_float = data_adc2_Tx[index_data_time_zamer +2];
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	3302      	adds	r3, #2
 8003608:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <fun_data_time_podgotovka+0x550>)
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a79      	ldr	r2, [pc, #484]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003612:	6013      	str	r3, [r2, #0]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003614:	4978      	ldr	r1, [pc, #480]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	780a      	ldrb	r2, [r1, #0]
 800361e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	4a74      	ldr	r2, [pc, #464]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003628:	7852      	ldrb	r2, [r2, #1]
 800362a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	4a71      	ldr	r2, [pc, #452]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003634:	7892      	ldrb	r2, [r2, #2]
 8003636:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003640:	78d2      	ldrb	r2, [r2, #3]
 8003642:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз								данные     5_X0+0
			 temp_float = (float) (50000 +(index_data_time_zamer+0));
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003654:	4b68      	ldr	r3, [pc, #416]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003656:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800365a:	4967      	ldr	r1, [pc, #412]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	780a      	ldrb	r2, [r1, #0]
 8003664:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	4a62      	ldr	r2, [pc, #392]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800366e:	7852      	ldrb	r2, [r2, #1]
 8003670:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	4a5f      	ldr	r2, [pc, #380]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800367a:	7892      	ldrb	r2, [r2, #2]
 800367c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003686:	78d2      	ldrb	r2, [r2, #3]
 8003688:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз								данные     5_X0+1
			 temp_float = (float) (50000 +(index_data_time_zamer+1));
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8003690:	3351      	adds	r3, #81	; 0x51
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036a0:	4955      	ldr	r1, [pc, #340]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	780a      	ldrb	r2, [r1, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036b4:	7852      	ldrb	r2, [r2, #1]
 80036b6:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	4a4e      	ldr	r2, [pc, #312]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036c0:	7892      	ldrb	r2, [r2, #2]
 80036c2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036cc:	78d2      	ldrb	r2, [r2, #3]
 80036ce:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз								данные     5_X0+2
			 temp_float = (float) (50000 +(index_data_time_zamer+2));
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80036d6:	3352      	adds	r3, #82	; 0x52
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036e2:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80036e6:	4944      	ldr	r1, [pc, #272]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	780a      	ldrb	r2, [r1, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	4a3f      	ldr	r2, [pc, #252]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80036fa:	7852      	ldrb	r2, [r2, #1]
 80036fc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003706:	7892      	ldrb	r2, [r2, #2]
 8003708:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003712:	78d2      	ldrb	r2, [r2, #3]
 8003714:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз								данные     6_X0+0
			 temp_float = (float) (60000 +(index_data_time_zamer+0));
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800371c:	3360      	adds	r3, #96	; 0x60
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003726:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003728:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 800372c:	4932      	ldr	r1, [pc, #200]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	780a      	ldrb	r2, [r1, #0]
 8003736:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	4a2e      	ldr	r2, [pc, #184]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003740:	7852      	ldrb	r2, [r2, #1]
 8003742:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800374c:	7892      	ldrb	r2, [r2, #2]
 800374e:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003758:	78d2      	ldrb	r2, [r2, #3]
 800375a:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз								данные     6_X0+1
			 temp_float = (float) (60000 +(index_data_time_zamer+1));
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8003762:	3361      	adds	r3, #97	; 0x61
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800376e:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003772:	4921      	ldr	r1, [pc, #132]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	780a      	ldrb	r2, [r1, #0]
 800377c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003786:	7852      	ldrb	r2, [r2, #1]
 8003788:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 8003792:	7892      	ldrb	r2, [r2, #2]
 8003794:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 800379e:	78d2      	ldrb	r2, [r2, #3]
 80037a0:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз								данные     6_X0+2
			 temp_float = (float) (60000 +(index_data_time_zamer+2));
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80037a8:	3362      	adds	r3, #98	; 0x62
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80037b4:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_time++ = 	*(((uint8_t *) &temp_float) + 0); //
 80037b8:	490f      	ldr	r1, [pc, #60]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	780a      	ldrb	r2, [r1, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80037cc:	7852      	ldrb	r2, [r2, #1]
 80037ce:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =  *(((uint8_t *) &temp_float) + 2); //
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80037d8:	7892      	ldrb	r2, [r2, #2]
 80037da:	701a      	strb	r2, [r3, #0]
			 *buffer_data_time++ =	*(((uint8_t *) &temp_float) + 3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <fun_data_time_podgotovka+0x54c>)
 80037e4:	78d2      	ldrb	r2, [r2, #3]
 80037e6:	701a      	strb	r2, [r3, #0]
			//	count_tic_finish = DWT_CYCCNT;//смотрим сколько натикало -цикл формирования массивов данных длится 4.894мкс (832 тика)
			//	count_tic_float_mks = (float)count_tic_finish * 1000000 / SystemCoreClock;

    return index_data_time_zamer;
 80037e8:	887b      	ldrh	r3, [r7, #2]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	e004      	b.n	8003800 <fun_data_time_podgotovka+0x554>
 80037f6:	bf00      	nop
 80037f8:	20011f30 	.word	0x20011f30
 80037fc:	20008630 	.word	0x20008630
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <fun_data_scan_freq_podgotovka>:

void fun_data_scan_freq_podgotovka( uint8_t * buffer_data_scan_freq,  float32_t freq_float )
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	ed87 0a00 	vstr	s0, [r7]
	//			 какой то код

			 // график не рисуется, здесь идет значение частоты
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -42 ошибка от реала, формируется здесь, выявлена при проверке через SpLab , значит на прием команды -42,  на передачу инфы +42 Гц
			  temp_float =  (freq_float +42 );  // в этом месте всегда будет стоять текущая частота, пересчитаная из таймера назад
 8003810:	edd7 7a00 	vldr	s15, [r7]
 8003814:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003a74 <fun_data_scan_freq_podgotovka+0x270>
 8003818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800381c:	4b96      	ldr	r3, [pc, #600]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800381e:	edc3 7a00 	vstr	s15, [r3]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003822:	4995      	ldr	r1, [pc, #596]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	780a      	ldrb	r2, [r1, #0]
 800382c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	4a90      	ldr	r2, [pc, #576]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003836:	7852      	ldrb	r2, [r2, #1]
 8003838:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	4a8d      	ldr	r2, [pc, #564]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003842:	7892      	ldrb	r2, [r2, #2]
 8003844:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	4a8a      	ldr	r2, [pc, #552]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800384e:	78d2      	ldrb	r2, [r2, #3]
 8003850:	701a      	strb	r2, [r3, #0]

			 // 1 график, сверху вниз
			 temp_float = (float32_t) arr1_Output_f32[8]; //
 8003852:	4b8a      	ldr	r3, [pc, #552]	; (8003a7c <fun_data_scan_freq_podgotovka+0x278>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a88      	ldr	r2, [pc, #544]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003858:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800385a:	4987      	ldr	r1, [pc, #540]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	780a      	ldrb	r2, [r1, #0]
 8003864:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	4a82      	ldr	r2, [pc, #520]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800386e:	7852      	ldrb	r2, [r2, #1]
 8003870:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	4a7f      	ldr	r2, [pc, #508]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800387a:	7892      	ldrb	r2, [r2, #2]
 800387c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	4a7c      	ldr	r2, [pc, #496]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003886:	78d2      	ldrb	r2, [r2, #3]
 8003888:	701a      	strb	r2, [r3, #0]

			 // 2 график, сверху вниз
			 temp_float = (float32_t) arr2_Output_f32[8]; //
 800388a:	4b7d      	ldr	r3, [pc, #500]	; (8003a80 <fun_data_scan_freq_podgotovka+0x27c>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a7a      	ldr	r2, [pc, #488]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003890:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003892:	4979      	ldr	r1, [pc, #484]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	780a      	ldrb	r2, [r1, #0]
 800389c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	4a74      	ldr	r2, [pc, #464]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038a6:	7852      	ldrb	r2, [r2, #1]
 80038a8:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	4a71      	ldr	r2, [pc, #452]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038b2:	7892      	ldrb	r2, [r2, #2]
 80038b4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	4a6e      	ldr	r2, [pc, #440]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038be:	78d2      	ldrb	r2, [r2, #3]
 80038c0:	701a      	strb	r2, [r3, #0]

			 // 3 график, сверху вниз
			 temp_float = arr1_phase_Output_8_f32; //
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <fun_data_scan_freq_podgotovka+0x280>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6c      	ldr	r2, [pc, #432]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038c8:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80038ca:	496b      	ldr	r1, [pc, #428]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	780a      	ldrb	r2, [r1, #0]
 80038d4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	4a66      	ldr	r2, [pc, #408]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038de:	7852      	ldrb	r2, [r2, #1]
 80038e0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	4a63      	ldr	r2, [pc, #396]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038ea:	7892      	ldrb	r2, [r2, #2]
 80038ec:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	4a60      	ldr	r2, [pc, #384]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80038f6:	78d2      	ldrb	r2, [r2, #3]
 80038f8:	701a      	strb	r2, [r3, #0]

			 // 4 график, сверху вниз
temp_float = calc_R_Output_8_f32; // arr2_phase_Output_8_f32; //
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <fun_data_scan_freq_podgotovka+0x284>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a5e      	ldr	r2, [pc, #376]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003900:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003902:	495d      	ldr	r1, [pc, #372]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	780a      	ldrb	r2, [r1, #0]
 800390c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003916:	7852      	ldrb	r2, [r2, #1]
 8003918:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003922:	7892      	ldrb	r2, [r2, #2]
 8003924:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800392e:	78d2      	ldrb	r2, [r2, #3]
 8003930:	701a      	strb	r2, [r3, #0]

			 // 5 график, сверху вниз
			 temp_float =  shift_phase_I8_U8_f32; // (float32_t)
 8003932:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <fun_data_scan_freq_podgotovka+0x288>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a50      	ldr	r2, [pc, #320]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003938:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 800393a:	494f      	ldr	r1, [pc, #316]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	780a      	ldrb	r2, [r1, #0]
 8003944:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	4a4a      	ldr	r2, [pc, #296]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800394e:	7852      	ldrb	r2, [r2, #1]
 8003950:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	4a47      	ldr	r2, [pc, #284]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800395a:	7892      	ldrb	r2, [r2, #2]
 800395c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	4a44      	ldr	r2, [pc, #272]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003966:	78d2      	ldrb	r2, [r2, #3]
 8003968:	701a      	strb	r2, [r3, #0]

			 // 6 график, сверху вниз
			 temp_float =   calc_power_Output_8_f32; //
 800396a:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <fun_data_scan_freq_podgotovka+0x28c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a42      	ldr	r2, [pc, #264]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003970:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003972:	4941      	ldr	r1, [pc, #260]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	780a      	ldrb	r2, [r1, #0]
 800397c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	4a3c      	ldr	r2, [pc, #240]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003986:	7852      	ldrb	r2, [r2, #1]
 8003988:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	4a39      	ldr	r2, [pc, #228]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003992:	7892      	ldrb	r2, [r2, #2]
 8003994:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 3);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	4a36      	ldr	r2, [pc, #216]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 800399e:	78d2      	ldrb	r2, [r2, #3]
 80039a0:	701a      	strb	r2, [r3, #0]

			 // 7 график, сверху вниз
			 temp_float = calc_R_Output_8_f32;
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <fun_data_scan_freq_podgotovka+0x284>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a34      	ldr	r2, [pc, #208]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80039a8:	6013      	str	r3, [r2, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 80039aa:	4933      	ldr	r1, [pc, #204]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	780a      	ldrb	r2, [r1, #0]
 80039b4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80039be:	7852      	ldrb	r2, [r2, #1]
 80039c0:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80039ca:	7892      	ldrb	r2, [r2, #2]
 80039cc:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80039d6:	78d2      	ldrb	r2, [r2, #3]
 80039d8:	701a      	strb	r2, [r3, #0]

			 // 8 график, сверху вниз
			 temp_float = 8;
 80039da:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 80039dc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80039e0:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	65;//*(((uint8_t *) &temp_float) + 0); //
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	2241      	movs	r2, #65	; 0x41
 80039ea:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	66;//*(((uint8_t *) &temp_float) + 1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	2242      	movs	r2, #66	; 0x42
 80039f4:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  67;//*(((uint8_t *) &temp_float) + 2); //
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	2243      	movs	r2, #67	; 0x43
 80039fe:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	68;//*(((uint8_t *) &temp_float) + 3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	2244      	movs	r2, #68	; 0x44
 8003a08:	701a      	strb	r2, [r3, #0]

			 // 9 график, сверху вниз
			 temp_float = 9;
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a0c:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <fun_data_scan_freq_podgotovka+0x290>)
 8003a0e:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003a10:	4919      	ldr	r1, [pc, #100]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	780a      	ldrb	r2, [r1, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a24:	7852      	ldrb	r2, [r2, #1]
 8003a26:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a30:	7892      	ldrb	r2, [r2, #2]
 8003a32:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a3c:	78d2      	ldrb	r2, [r2, #3]
 8003a3e:	701a      	strb	r2, [r3, #0]

			 // 10 график, сверху вниз
			 temp_float = 10;
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <fun_data_scan_freq_podgotovka+0x294>)
 8003a44:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 0); //
 8003a46:	490c      	ldr	r1, [pc, #48]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	780a      	ldrb	r2, [r1, #0]
 8003a50:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a5a:	7852      	ldrb	r2, [r2, #1]
 8003a5c:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <fun_data_scan_freq_podgotovka+0x274>)
 8003a66:	7892      	ldrb	r2, [r2, #2]
 8003a68:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	e014      	b.n	8003a9c <fun_data_scan_freq_podgotovka+0x298>
 8003a72:	bf00      	nop
 8003a74:	42280000 	.word	0x42280000
 8003a78:	20011f30 	.word	0x20011f30
 8003a7c:	2000b630 	.word	0x2000b630
 8003a80:	2000d630 	.word	0x2000d630
 8003a84:	2000f630 	.word	0x2000f630
 8003a88:	2000f644 	.word	0x2000f644
 8003a8c:	2000f63c 	.word	0x2000f63c
 8003a90:	2000f638 	.word	0x2000f638
 8003a94:	41100000 	.word	0x41100000
 8003a98:	41200000 	.word	0x41200000
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <fun_data_scan_freq_podgotovka+0x2e0>)
 8003a9e:	78d2      	ldrb	r2, [r2, #3]
 8003aa0:	701a      	strb	r2, [r3, #0]

			 // 11 график, сверху вниз
			 temp_float = 11;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <fun_data_scan_freq_podgotovka+0x2e0>)
 8003aa4:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <fun_data_scan_freq_podgotovka+0x2e4>)
 8003aa6:	601a      	str	r2, [r3, #0]
			 *buffer_data_scan_freq++ = 	*(((uint8_t *) &temp_float) + 0); //
 8003aa8:	490e      	ldr	r1, [pc, #56]	; (8003ae4 <fun_data_scan_freq_podgotovka+0x2e0>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	780a      	ldrb	r2, [r1, #0]
 8003ab2:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <fun_data_scan_freq_podgotovka+0x2e0>)
 8003abc:	7852      	ldrb	r2, [r2, #1]
 8003abe:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =  *(((uint8_t *) &temp_float) + 2); //
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <fun_data_scan_freq_podgotovka+0x2e0>)
 8003ac8:	7892      	ldrb	r2, [r2, #2]
 8003aca:	701a      	strb	r2, [r3, #0]
			 *buffer_data_scan_freq++ =	*(((uint8_t *) &temp_float) + 3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <fun_data_scan_freq_podgotovka+0x2e0>)
 8003ad4:	78d2      	ldrb	r2, [r2, #3]
 8003ad6:	701a      	strb	r2, [r3, #0]

	//return HAL_OK;
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	20011f30 	.word	0x20011f30
 8003ae8:	41300000 	.word	0x41300000

08003aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003af2:	b672      	cpsid	i
}
 8003af4:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
	uint16_t count_printf;
  __disable_irq();
  while (1)
  {
	  count_printf++;
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	3301      	adds	r3, #1
 8003afa:	80fb      	strh	r3, [r7, #6]
	  if (count_printf >1000)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b02:	d9f8      	bls.n	8003af6 <Error_Handler+0xa>
	  	  {
		  	printf("MAIN Error_Handler() Error_Handler_Debug\n");
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <Error_Handler+0x24>)
 8003b06:	f00c fdc5 	bl	8010694 <puts>
		  	count_printf =0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	80fb      	strh	r3, [r7, #6]
	  count_printf++;
 8003b0e:	e7f2      	b.n	8003af6 <Error_Handler+0xa>
 8003b10:	08015434 	.word	0x08015434

08003b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_MspInit+0x44>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_MspInit+0x44>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6613      	str	r3, [r2, #96]	; 0x60
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_MspInit+0x44>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_MspInit+0x44>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_MspInit+0x44>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_MspInit+0x44>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b4a:	f005 fc85 	bl	8009458 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  count_printf++;
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <NMI_Handler+0x28>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <NMI_Handler+0x28>)
 8003b6a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <NMI_Handler+0x28>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b74:	d9f4      	bls.n	8003b60 <NMI_Handler+0x4>
	  	  {
		  	printf("NMI Non maskable interrupt\n");
 8003b76:	4804      	ldr	r0, [pc, #16]	; (8003b88 <NMI_Handler+0x2c>)
 8003b78:	f00c fd8c 	bl	8010694 <puts>
		  	count_printf =0;
 8003b7c:	4b01      	ldr	r3, [pc, #4]	; (8003b84 <NMI_Handler+0x28>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003b82:	e7ed      	b.n	8003b60 <NMI_Handler+0x4>
 8003b84:	20011f38 	.word	0x20011f38
 8003b88:	08015460 	.word	0x08015460

08003b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  count_printf++;
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HardFault_Handler+0x28>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HardFault_Handler+0x28>)
 8003b9a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HardFault_Handler+0x28>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba4:	d9f4      	bls.n	8003b90 <HardFault_Handler+0x4>
	  	  {
		  	printf("Hard fault interrupt\n");
 8003ba6:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <HardFault_Handler+0x2c>)
 8003ba8:	f00c fd74 	bl	8010694 <puts>
		  	count_printf =0;
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <HardFault_Handler+0x28>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003bb2:	e7ed      	b.n	8003b90 <HardFault_Handler+0x4>
 8003bb4:	20011f38 	.word	0x20011f38
 8003bb8:	0801547c 	.word	0x0801547c

08003bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  count_printf++;
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <MemManage_Handler+0x28>)
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MemManage_Handler+0x28>)
 8003bca:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <MemManage_Handler+0x28>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bd4:	d9f4      	bls.n	8003bc0 <MemManage_Handler+0x4>
	  	  {
		  	printf("Memory management fault\n");
 8003bd6:	4804      	ldr	r0, [pc, #16]	; (8003be8 <MemManage_Handler+0x2c>)
 8003bd8:	f00c fd5c 	bl	8010694 <puts>
		  	count_printf =0;
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <MemManage_Handler+0x28>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003be2:	e7ed      	b.n	8003bc0 <MemManage_Handler+0x4>
 8003be4:	20011f38 	.word	0x20011f38
 8003be8:	08015494 	.word	0x08015494

08003bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  count_printf++;
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <BusFault_Handler+0x28>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <BusFault_Handler+0x28>)
 8003bfa:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <BusFault_Handler+0x28>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c04:	d9f4      	bls.n	8003bf0 <BusFault_Handler+0x4>
	  	  {
		  	printf("BusFault_Handler\n");
 8003c06:	4804      	ldr	r0, [pc, #16]	; (8003c18 <BusFault_Handler+0x2c>)
 8003c08:	f00c fd44 	bl	8010694 <puts>
		  	count_printf =0;
 8003c0c:	4b01      	ldr	r3, [pc, #4]	; (8003c14 <BusFault_Handler+0x28>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003c12:	e7ed      	b.n	8003bf0 <BusFault_Handler+0x4>
 8003c14:	20011f38 	.word	0x20011f38
 8003c18:	080154ac 	.word	0x080154ac

08003c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  count_printf++;
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <UsageFault_Handler+0x28>)
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <UsageFault_Handler+0x28>)
 8003c2a:	801a      	strh	r2, [r3, #0]
	  if (count_printf >1000)
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <UsageFault_Handler+0x28>)
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c34:	d9f4      	bls.n	8003c20 <UsageFault_Handler+0x4>
	  	  {
		  	printf("UsageFault_Handler\n");
 8003c36:	4804      	ldr	r0, [pc, #16]	; (8003c48 <UsageFault_Handler+0x2c>)
 8003c38:	f00c fd2c 	bl	8010694 <puts>
		  	count_printf =0;
 8003c3c:	4b01      	ldr	r3, [pc, #4]	; (8003c44 <UsageFault_Handler+0x28>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	801a      	strh	r2, [r3, #0]
	  count_printf++;
 8003c42:	e7ed      	b.n	8003c20 <UsageFault_Handler+0x4>
 8003c44:	20011f38 	.word	0x20011f38
 8003c48:	080154c0 	.word	0x080154c0

08003c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	printf("SVC_Handler()\n");
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <SVC_Handler+0x10>)
 8003c52:	f00c fd1f 	bl	8010694 <puts>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	080154d4 	.word	0x080154d4

08003c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler()\n");
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <DebugMon_Handler+0x10>)
 8003c66:	f00c fd15 	bl	8010694 <puts>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	080154e4 	.word	0x080154e4

08003c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	printf("PendSV_Handler()\n");
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <PendSV_Handler+0x10>)
 8003c7a:	f00c fd0b 	bl	8010694 <puts>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	080154f8 	.word	0x080154f8

08003c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c8c:	f001 f8d6 	bl	8004e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c98:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <DMA1_Channel1_IRQHandler+0x10>)
 8003c9a:	f003 fa1e 	bl	80070da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200003a4 	.word	0x200003a4

08003ca8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	xMBRTUTransmitFSM();
 8003cac:	f00a fbea 	bl	800e484 <xMBRTUTransmitFSM>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <DMA1_Channel2_IRQHandler+0x14>)
 8003cb2:	f003 fa12 	bl	80070da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20012364 	.word	0x20012364

08003cc0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
//	if ((0U != (hdma_usart1_tx.Instance->CCR & DMA_IT_TC)) & (0U == (hdma_usart1_tx.Instance->CCR & DMA_IT_HT)))
//	{
//		xMBRTUTransmitFSM();
//	}
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <DMA1_Channel3_IRQHandler+0x10>)
 8003cc6:	f003 fa08 	bl	80070da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20012304 	.word	0x20012304

08003cd4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel4);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <DMA1_Channel4_IRQHandler+0x10>)
 8003cda:	f003 f9fe 	bl	80070da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2000048c 	.word	0x2000048c

08003ce8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <DMA1_Channel5_IRQHandler+0x10>)
 8003cee:	f003 f9f4 	bl	80070da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200123c4 	.word	0x200123c4

08003cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	2300      	movs	r3, #0
 8003d08:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <USART1_IRQHandler+0x58>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <USART1_IRQHandler+0x58>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <USART1_IRQHandler+0x4a>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <USART1_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003d42:	f00a fb35 	bl	800e3b0 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d46:	4803      	ldr	r0, [pc, #12]	; (8003d54 <USART1_IRQHandler+0x58>)
 8003d48:	f008 faf0 	bl	800c32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20012154 	.word	0x20012154

08003d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0, tmp_it_source = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	2300      	movs	r3, #0
 8003d64:	603b      	str	r3, [r7, #0]
	  tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <USART2_IRQHandler+0x58>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	607b      	str	r3, [r7, #4]
	  tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <USART2_IRQHandler+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	603b      	str	r3, [r7, #0]
	  /* UART in mode Receiver ---------------------------------------------------*/
	  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <USART2_IRQHandler+0x4a>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <USART2_IRQHandler+0x4a>
	  {
		  xMBRTUReceiveFSM(  );
 8003d9e:	f00a fb07 	bl	800e3b0 <xMBRTUReceiveFSM>
	  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003da2:	4803      	ldr	r0, [pc, #12]	; (8003db0 <USART2_IRQHandler+0x58>)
 8003da4:	f008 fac2 	bl	800c32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200121e4 	.word	0x200121e4

08003db4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <USART3_IRQHandler+0x10>)
 8003dba:	f008 fab7 	bl	800c32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20012274 	.word	0x20012274

08003dc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003dcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003dd0:	f003 fce6 	bl	80077a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <TIM6_DAC_IRQHandler+0x10>)
 8003dde:	f006 fdaf 	bl	800a940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20012024 	.word	0x20012024

08003dec <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <DMA2_Channel1_IRQHandler+0x10>)
 8003df2:	f003 f972 	bl	80070da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000404 	.word	0x20000404

08003e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
	return 1;
 8003e04:	2301      	movs	r3, #1
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <_kill>:

int _kill(int pid, int sig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e1a:	f00b fba7 	bl	800f56c <__errno>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2216      	movs	r2, #22
 8003e22:	601a      	str	r2, [r3, #0]
	return -1;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_exit>:

void _exit (int status)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e38:	f04f 31ff 	mov.w	r1, #4294967295
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffe7 	bl	8003e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e42:	e7fe      	b.n	8003e42 <_exit+0x12>

08003e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00a      	b.n	8003e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e56:	f3af 8000 	nop.w
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	60ba      	str	r2, [r7, #8]
 8003e62:	b2ca      	uxtb	r2, r1
 8003e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	dbf0      	blt.n	8003e56 <_read+0x12>
	}

return len;
 8003e74:	687b      	ldr	r3, [r7, #4]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
	return -1;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <_isatty>:

int _isatty(int file)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8003ebe:	2301      	movs	r3, #1
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <_sbrk+0x5c>)
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <_sbrk+0x60>)
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <_sbrk+0x64>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <_sbrk+0x64>)
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <_sbrk+0x68>)
 8003f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <_sbrk+0x64>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d207      	bcs.n	8003f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f18:	f00b fb28 	bl	800f56c <__errno>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	220c      	movs	r2, #12
 8003f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	e009      	b.n	8003f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <_sbrk+0x64>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <_sbrk+0x64>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <_sbrk+0x64>)
 8003f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20020000 	.word	0x20020000
 8003f48:	00004000 	.word	0x00004000
 8003f4c:	20011f3c 	.word	0x20011f3c
 8003f50:	20013478 	.word	0x20013478

08003f54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <SystemInit+0x20>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <SystemInit+0x20>)
 8003f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b0a0      	sub	sp, #128	; 0x80
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003f7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003f9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	615a      	str	r2, [r3, #20]
 8003fb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	2234      	movs	r2, #52	; 0x34
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00b fb1d 	bl	800f600 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fc8:	4a67      	ldr	r2, [pc, #412]	; (8004168 <MX_TIM1_Init+0x1f0>)
 8003fca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003fcc:	4b65      	ldr	r3, [pc, #404]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 127;
 8003fd8:	4b62      	ldr	r3, [pc, #392]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fda:	227f      	movs	r2, #127	; 0x7f
 8003fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fde:	4b61      	ldr	r3, [pc, #388]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fe4:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fea:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ff0:	485c      	ldr	r0, [pc, #368]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8003ff2:	f006 f9c3 	bl	800a37c <HAL_TIM_Base_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8003ffc:	f7ff fd76 	bl	8003aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004000:	4858      	ldr	r0, [pc, #352]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8004002:	f006 fb2a 	bl	800a65a <HAL_TIM_PWM_Init>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800400c:	f7ff fd6e 	bl	8003aec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004010:	2307      	movs	r3, #7
 8004012:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <MX_TIM1_Init+0x1f4>)
 8004016:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004018:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800401c:	4619      	mov	r1, r3
 800401e:	4851      	ldr	r0, [pc, #324]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8004020:	f006 ff49 	bl	800aeb6 <HAL_TIM_SlaveConfigSynchro>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800402a:	f7ff fd5f 	bl	8003aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800402e:	2320      	movs	r3, #32
 8004030:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004036:	2300      	movs	r3, #0
 8004038:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800403a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800403e:	4619      	mov	r1, r3
 8004040:	4848      	ldr	r0, [pc, #288]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8004042:	f007 fdbb 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800404c:	f7ff fd4e 	bl	8003aec <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8004050:	2301      	movs	r3, #1
 8004052:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8004054:	2301      	movs	r3, #1
 8004056:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8004058:	2300      	movs	r3, #0
 800405a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800405c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004060:	461a      	mov	r2, r3
 8004062:	2101      	movs	r1, #1
 8004064:	483f      	ldr	r0, [pc, #252]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8004066:	f007 fef1 	bl	800be4c <HAL_TIMEx_ConfigBreakInput>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8004070:	f7ff fd3c 	bl	8003aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004074:	2370      	movs	r3, #112	; 0x70
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800407c:	2300      	movs	r3, #0
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004080:	2300      	movs	r3, #0
 8004082:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8004088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004096:	2200      	movs	r2, #0
 8004098:	4619      	mov	r1, r3
 800409a:	4832      	ldr	r0, [pc, #200]	; (8004164 <MX_TIM1_Init+0x1ec>)
 800409c:	f006 fdd0 	bl	800ac40 <HAL_TIM_PWM_ConfigChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80040a6:	f7ff fd21 	bl	8003aec <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 80040aa:	2302      	movs	r3, #2
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040b2:	2204      	movs	r2, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	482b      	ldr	r0, [pc, #172]	; (8004164 <MX_TIM1_Init+0x1ec>)
 80040b8:	f006 fdc2 	bl	800ac40 <HAL_TIM_PWM_ConfigChannel>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80040c2:	f7ff fd13 	bl	8003aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM1;
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <MX_TIM1_Init+0x1f8>)
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 64;
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040d2:	2208      	movs	r2, #8
 80040d4:	4619      	mov	r1, r3
 80040d6:	4823      	ldr	r0, [pc, #140]	; (8004164 <MX_TIM1_Init+0x1ec>)
 80040d8:	f006 fdb2 	bl	800ac40 <HAL_TIM_PWM_ConfigChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 80040e2:	f7ff fd03 	bl	8003aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM2;
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <MX_TIM1_Init+0x1fc>)
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040ee:	220c      	movs	r2, #12
 80040f0:	4619      	mov	r1, r3
 80040f2:	481c      	ldr	r0, [pc, #112]	; (8004164 <MX_TIM1_Init+0x1ec>)
 80040f4:	f006 fda4 	bl	800ac40 <HAL_TIM_PWM_ConfigChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80040fe:	f7ff fcf5 	bl	8003aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8004102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004106:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8004108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800410c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 85;
 8004112:	2355      	movs	r3, #85	; 0x55
 8004114:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8004116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800411c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004126:	2300      	movs	r3, #0
 8004128:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800412e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004138:	2300      	movs	r3, #0
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4807      	ldr	r0, [pc, #28]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8004146:	f007 fdcf 	bl	800bce8 <HAL_TIMEx_ConfigBreakDeadTime>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM1_Init+0x1dc>
  {
    Error_Handler();
 8004150:	f7ff fccc 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004154:	4803      	ldr	r0, [pc, #12]	; (8004164 <MX_TIM1_Init+0x1ec>)
 8004156:	f000 fa7f 	bl	8004658 <HAL_TIM_MspPostInit>

}
 800415a:	bf00      	nop
 800415c:	3780      	adds	r7, #128	; 0x80
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20011f40 	.word	0x20011f40
 8004168:	40012c00 	.word	0x40012c00
 800416c:	00100060 	.word	0x00100060
 8004170:	00010040 	.word	0x00010040
 8004174:	00010050 	.word	0x00010050

08004178 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b090      	sub	sp, #64	; 0x40
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800417e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800418e:	f107 0320 	add.w	r3, r7, #32
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
 80041a8:	615a      	str	r2, [r3, #20]
 80041aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <MX_TIM2_Init+0xec>)
 80041ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <MX_TIM2_Init+0xec>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <MX_TIM2_Init+0xec>)
 80041bc:	2260      	movs	r2, #96	; 0x60
 80041be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80041c0:	4b28      	ldr	r3, [pc, #160]	; (8004264 <MX_TIM2_Init+0xec>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c6:	4b27      	ldr	r3, [pc, #156]	; (8004264 <MX_TIM2_Init+0xec>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <MX_TIM2_Init+0xec>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041d2:	4824      	ldr	r0, [pc, #144]	; (8004264 <MX_TIM2_Init+0xec>)
 80041d4:	f006 f8d2 	bl	800a37c <HAL_TIM_Base_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80041de:	f7ff fc85 	bl	8003aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041e2:	4820      	ldr	r0, [pc, #128]	; (8004264 <MX_TIM2_Init+0xec>)
 80041e4:	f006 fa39 	bl	800a65a <HAL_TIM_PWM_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80041ee:	f7ff fc7d 	bl	8003aec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80041f2:	2307      	movs	r3, #7
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR10;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <MX_TIM2_Init+0xf0>)
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80041fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041fe:	4619      	mov	r1, r3
 8004200:	4818      	ldr	r0, [pc, #96]	; (8004264 <MX_TIM2_Init+0xec>)
 8004202:	f006 fe58 	bl	800aeb6 <HAL_TIM_SlaveConfigSynchro>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800420c:	f7ff fc6e 	bl	8003aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8004210:	2350      	movs	r3, #80	; 0x50
 8004212:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004214:	2300      	movs	r3, #0
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004218:	f107 0320 	add.w	r3, r7, #32
 800421c:	4619      	mov	r1, r3
 800421e:	4811      	ldr	r0, [pc, #68]	; (8004264 <MX_TIM2_Init+0xec>)
 8004220:	f007 fccc 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800422a:	f7ff fc5f 	bl	8003aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800422e:	2360      	movs	r3, #96	; 0x60
 8004230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	2204      	movs	r2, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4807      	ldr	r0, [pc, #28]	; (8004264 <MX_TIM2_Init+0xec>)
 8004246:	f006 fcfb 	bl	800ac40 <HAL_TIM_PWM_ConfigChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004250:	f7ff fc4c 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004254:	4803      	ldr	r0, [pc, #12]	; (8004264 <MX_TIM2_Init+0xec>)
 8004256:	f000 f9ff 	bl	8004658 <HAL_TIM_MspPostInit>

}
 800425a:	bf00      	nop
 800425c:	3740      	adds	r7, #64	; 0x40
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20011f8c 	.word	0x20011f8c
 8004268:	00100060 	.word	0x00100060

0800426c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b090      	sub	sp, #64	; 0x40
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004282:	f107 0320 	add.w	r3, r7, #32
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	611a      	str	r2, [r3, #16]
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042a0:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042a2:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <MX_TIM3_Init+0xec>)
 80042a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ac:	4b29      	ldr	r3, [pc, #164]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80042b2:	4b28      	ldr	r3, [pc, #160]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042b4:	2205      	movs	r2, #5
 80042b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042be:	4b25      	ldr	r3, [pc, #148]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042c4:	4823      	ldr	r0, [pc, #140]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042c6:	f006 f859 	bl	800a37c <HAL_TIM_Base_Init>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80042d0:	f7ff fc0c 	bl	8003aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042d4:	481f      	ldr	r0, [pc, #124]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042d6:	f006 f9c0 	bl	800a65a <HAL_TIM_PWM_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80042e0:	f7ff fc04 	bl	8003aec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80042e4:	2307      	movs	r3, #7
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80042ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f0:	4619      	mov	r1, r3
 80042f2:	4818      	ldr	r0, [pc, #96]	; (8004354 <MX_TIM3_Init+0xe8>)
 80042f4:	f006 fddf 	bl	800aeb6 <HAL_TIM_SlaveConfigSynchro>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80042fe:	f7ff fbf5 	bl	8003aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004302:	2320      	movs	r3, #32
 8004304:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004306:	2300      	movs	r3, #0
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800430a:	f107 0320 	add.w	r3, r7, #32
 800430e:	4619      	mov	r1, r3
 8004310:	4810      	ldr	r0, [pc, #64]	; (8004354 <MX_TIM3_Init+0xe8>)
 8004312:	f007 fc53 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800431c:	f7ff fbe6 	bl	8003aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004320:	2360      	movs	r3, #96	; 0x60
 8004322:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 8004324:	2304      	movs	r3, #4
 8004326:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	2200      	movs	r2, #0
 8004334:	4619      	mov	r1, r3
 8004336:	4807      	ldr	r0, [pc, #28]	; (8004354 <MX_TIM3_Init+0xe8>)
 8004338:	f006 fc82 	bl	800ac40 <HAL_TIM_PWM_ConfigChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8004342:	f7ff fbd3 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004346:	4803      	ldr	r0, [pc, #12]	; (8004354 <MX_TIM3_Init+0xe8>)
 8004348:	f000 f986 	bl	8004658 <HAL_TIM_MspPostInit>

}
 800434c:	bf00      	nop
 800434e:	3740      	adds	r7, #64	; 0x40
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20011fd8 	.word	0x20011fd8
 8004358:	40000400 	.word	0x40000400

0800435c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <MX_TIM6_Init+0x64>)
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <MX_TIM6_Init+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <MX_TIM6_Init+0x64>)
 8004374:	22a9      	movs	r2, #169	; 0xa9
 8004376:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <MX_TIM6_Init+0x64>)
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <MX_TIM6_Init+0x64>)
 8004380:	2231      	movs	r2, #49	; 0x31
 8004382:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <MX_TIM6_Init+0x64>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800438a:	480d      	ldr	r0, [pc, #52]	; (80043c0 <MX_TIM6_Init+0x64>)
 800438c:	f005 fff6 	bl	800a37c <HAL_TIM_Base_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004396:	f7ff fba9 	bl	8003aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4806      	ldr	r0, [pc, #24]	; (80043c0 <MX_TIM6_Init+0x64>)
 80043a8:	f007 fc08 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80043b2:	f7ff fb9b 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20012024 	.word	0x20012024
 80043c4:	40001000 	.word	0x40001000

080043c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <MX_TIM7_Init+0x68>)
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <MX_TIM7_Init+0x6c>)
 80043dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16999;
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <MX_TIM7_Init+0x68>)
 80043e0:	f244 2267 	movw	r2, #16999	; 0x4267
 80043e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <MX_TIM7_Init+0x68>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <MX_TIM7_Init+0x68>)
 80043ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <MX_TIM7_Init+0x68>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043fa:	480d      	ldr	r0, [pc, #52]	; (8004430 <MX_TIM7_Init+0x68>)
 80043fc:	f005 ffbe 	bl	800a37c <HAL_TIM_Base_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004406:	f7ff fb71 	bl	8003aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800440a:	2320      	movs	r3, #32
 800440c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4806      	ldr	r0, [pc, #24]	; (8004430 <MX_TIM7_Init+0x68>)
 8004418:	f007 fbd0 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004422:	f7ff fb63 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20012070 	.word	0x20012070
 8004434:	40001400 	.word	0x40001400

08004438 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <MX_TIM16_Init+0x44>)
 800443e:	4a10      	ldr	r2, [pc, #64]	; (8004480 <MX_TIM16_Init+0x48>)
 8004440:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <MX_TIM16_Init+0x44>)
 8004444:	22a9      	movs	r2, #169	; 0xa9
 8004446:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <MX_TIM16_Init+0x44>)
 800444a:	2200      	movs	r2, #0
 800444c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <MX_TIM16_Init+0x44>)
 8004450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004454:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <MX_TIM16_Init+0x44>)
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <MX_TIM16_Init+0x44>)
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <MX_TIM16_Init+0x44>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004468:	4804      	ldr	r0, [pc, #16]	; (800447c <MX_TIM16_Init+0x44>)
 800446a:	f005 ff87 	bl	800a37c <HAL_TIM_Base_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004474:	f7ff fb3a 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200120bc 	.word	0x200120bc
 8004480:	40014400 	.word	0x40014400

08004484 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <MX_TIM17_Init+0x48>)
 800448a:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <MX_TIM17_Init+0x4c>)
 800448c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16999;
 800448e:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <MX_TIM17_Init+0x48>)
 8004490:	f244 2267 	movw	r2, #16999	; 0x4267
 8004494:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <MX_TIM17_Init+0x48>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <MX_TIM17_Init+0x48>)
 800449e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <MX_TIM17_Init+0x48>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <MX_TIM17_Init+0x48>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <MX_TIM17_Init+0x48>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80044b6:	4805      	ldr	r0, [pc, #20]	; (80044cc <MX_TIM17_Init+0x48>)
 80044b8:	f005 ff60 	bl	800a37c <HAL_TIM_Base_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80044c2:	f7ff fb13 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20012108 	.word	0x20012108
 80044d0:	40014800 	.word	0x40014800

080044d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b090      	sub	sp, #64	; 0x40
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a52      	ldr	r2, [pc, #328]	; (800463c <HAL_TIM_Base_MspInit+0x168>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d12a      	bne.n	800454c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044f6:	4b52      	ldr	r3, [pc, #328]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	4a51      	ldr	r2, [pc, #324]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80044fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004500:	6613      	str	r3, [r2, #96]	; 0x60
 8004502:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450e:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800451a:	4b49      	ldr	r3, [pc, #292]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800452c:	2312      	movs	r3, #18
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	2300      	movs	r3, #0
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8004538:	2309      	movs	r3, #9
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004546:	f002 ff5f 	bl	8007408 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800454a:	e072      	b.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d10c      	bne.n	8004570 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004556:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	4a39      	ldr	r2, [pc, #228]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6593      	str	r3, [r2, #88]	; 0x58
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	6a3b      	ldr	r3, [r7, #32]
}
 800456e:	e060      	b.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a33      	ldr	r2, [pc, #204]	; (8004644 <HAL_TIM_Base_MspInit+0x170>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	4a30      	ldr	r2, [pc, #192]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6593      	str	r3, [r2, #88]	; 0x58
 8004586:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	69fb      	ldr	r3, [r7, #28]
}
 8004592:	e04e      	b.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM6)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <HAL_TIM_Base_MspInit+0x174>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d114      	bne.n	80045c8 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800459e:	4b28      	ldr	r3, [pc, #160]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a27      	ldr	r2, [pc, #156]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045a4:	f043 0310 	orr.w	r3, r3, #16
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	2036      	movs	r0, #54	; 0x36
 80045bc:	f002 f977 	bl	80068ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045c0:	2036      	movs	r0, #54	; 0x36
 80045c2:	f002 f98e 	bl	80068e2 <HAL_NVIC_EnableIRQ>
}
 80045c6:	e034      	b.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM7)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <HAL_TIM_Base_MspInit+0x178>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10c      	bne.n	80045ec <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	6593      	str	r3, [r2, #88]	; 0x58
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	697b      	ldr	r3, [r7, #20]
}
 80045ea:	e022      	b.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM16)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a17      	ldr	r2, [pc, #92]	; (8004650 <HAL_TIM_Base_MspInit+0x17c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	6613      	str	r3, [r2, #96]	; 0x60
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
}
 800460e:	e010      	b.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM17)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <HAL_TIM_Base_MspInit+0x180>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10b      	bne.n	8004632 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 800461c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461e:	4a08      	ldr	r2, [pc, #32]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004624:	6613      	str	r3, [r2, #96]	; 0x60
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_TIM_Base_MspInit+0x16c>)
 8004628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	3740      	adds	r7, #64	; 0x40
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40021000 	.word	0x40021000
 8004644:	40000400 	.word	0x40000400
 8004648:	40001000 	.word	0x40001000
 800464c:	40001400 	.word	0x40001400
 8004650:	40014400 	.word	0x40014400
 8004654:	40014800 	.word	0x40014800

08004658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	; 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a62      	ldr	r2, [pc, #392]	; (8004800 <HAL_TIM_MspPostInit+0x1a8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d17a      	bne.n	8004770 <HAL_TIM_MspPostInit+0x118>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800467a:	4b62      	ldr	r3, [pc, #392]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	4a61      	ldr	r2, [pc, #388]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004686:	4b5f      	ldr	r3, [pc, #380]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	4a5b      	ldr	r2, [pc, #364]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800469e:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	4b56      	ldr	r3, [pc, #344]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	4a55      	ldr	r2, [pc, #340]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046b6:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
    PB13     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c6:	2302      	movs	r3, #2
 80046c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80046d2:	2302      	movs	r3, #2
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d6:	f107 031c 	add.w	r3, r7, #28
 80046da:	4619      	mov	r1, r3
 80046dc:	484a      	ldr	r0, [pc, #296]	; (8004808 <HAL_TIM_MspPostInit+0x1b0>)
 80046de:	f002 fe93 	bl	8007408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80046e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80046f0:	2301      	movs	r3, #1
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80046f4:	2306      	movs	r3, #6
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f8:	f107 031c 	add.w	r3, r7, #28
 80046fc:	4619      	mov	r1, r3
 80046fe:	4843      	ldr	r0, [pc, #268]	; (800480c <HAL_TIM_MspPostInit+0x1b4>)
 8004700:	f002 fe82 	bl	8007408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	2302      	movs	r3, #2
 800470c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	2300      	movs	r3, #0
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004716:	2306      	movs	r3, #6
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471a:	f107 031c 	add.w	r3, r7, #28
 800471e:	4619      	mov	r1, r3
 8004720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004724:	f002 fe70 	bl	8007408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800472c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472e:	2302      	movs	r3, #2
 8004730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004736:	2301      	movs	r3, #1
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800473a:	2306      	movs	r3, #6
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473e:	f107 031c 	add.w	r3, r7, #28
 8004742:	4619      	mov	r1, r3
 8004744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004748:	f002 fe5e 	bl	8007408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800474c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475a:	2300      	movs	r3, #0
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800475e:	230c      	movs	r3, #12
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004762:	f107 031c 	add.w	r3, r7, #28
 8004766:	4619      	mov	r1, r3
 8004768:	4828      	ldr	r0, [pc, #160]	; (800480c <HAL_TIM_MspPostInit+0x1b4>)
 800476a:	f002 fe4d 	bl	8007408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800476e:	e043      	b.n	80047f8 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d11d      	bne.n	80047b6 <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	4a21      	ldr	r2, [pc, #132]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004786:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004792:	2302      	movs	r3, #2
 8004794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004796:	2302      	movs	r3, #2
 8004798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479e:	2300      	movs	r3, #0
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047a2:	2301      	movs	r3, #1
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a6:	f107 031c 	add.w	r3, r7, #28
 80047aa:	4619      	mov	r1, r3
 80047ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047b0:	f002 fe2a 	bl	8007408 <HAL_GPIO_Init>
}
 80047b4:	e020      	b.n	80047f8 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIM_MspPostInit+0x1b8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d11b      	bne.n	80047f8 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80047c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_TIM_MspPostInit+0x1ac>)
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047d8:	2310      	movs	r3, #16
 80047da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047dc:	2302      	movs	r3, #2
 80047de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047e8:	2302      	movs	r3, #2
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ec:	f107 031c 	add.w	r3, r7, #28
 80047f0:	4619      	mov	r1, r3
 80047f2:	4806      	ldr	r0, [pc, #24]	; (800480c <HAL_TIM_MspPostInit+0x1b4>)
 80047f4:	f002 fe08 	bl	8007408 <HAL_GPIO_Init>
}
 80047f8:	bf00      	nop
 80047fa:	3730      	adds	r7, #48	; 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40021000 	.word	0x40021000
 8004808:	48000800 	.word	0x48000800
 800480c:	48000400 	.word	0x48000400
 8004810:	40000400 	.word	0x40000400

08004814 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <MX_USART1_UART_Init+0x98>)
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <MX_USART1_UART_Init+0x9c>)
 800481c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800481e:	4b23      	ldr	r3, [pc, #140]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004820:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004826:	4b21      	ldr	r3, [pc, #132]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <MX_USART1_UART_Init+0x98>)
 800482e:	2200      	movs	r2, #0
 8004830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004834:	2200      	movs	r2, #0
 8004836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <MX_USART1_UART_Init+0x98>)
 800483a:	220c      	movs	r2, #12
 800483c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800484a:	4b18      	ldr	r3, [pc, #96]	; (80048ac <MX_USART1_UART_Init+0x98>)
 800484c:	2200      	movs	r2, #0
 800484e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004852:	2200      	movs	r2, #0
 8004854:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004858:	2200      	movs	r2, #0
 800485a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800485c:	2300      	movs	r3, #0
 800485e:	2200      	movs	r2, #0
 8004860:	2100      	movs	r1, #0
 8004862:	4812      	ldr	r0, [pc, #72]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004864:	f008 fece 	bl	800d604 <HAL_RS485Ex_Init>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800486e:	f7ff f93d 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004872:	2100      	movs	r1, #0
 8004874:	480d      	ldr	r0, [pc, #52]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004876:	f008 ffc0 	bl	800d7fa <HAL_UARTEx_SetTxFifoThreshold>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8004880:	f7ff f934 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004884:	2100      	movs	r1, #0
 8004886:	4809      	ldr	r0, [pc, #36]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004888:	f008 fff5 	bl	800d876 <HAL_UARTEx_SetRxFifoThreshold>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8004892:	f7ff f92b 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004896:	4805      	ldr	r0, [pc, #20]	; (80048ac <MX_USART1_UART_Init+0x98>)
 8004898:	f008 ff76 	bl	800d788 <HAL_UARTEx_DisableFifoMode>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 80048a2:	f7ff f923 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20012154 	.word	0x20012154
 80048b0:	40013800 	.word	0x40013800

080048b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048ba:	4a23      	ldr	r2, [pc, #140]	; (8004948 <MX_USART2_UART_Init+0x94>)
 80048bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048c6:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048da:	220c      	movs	r2, #12
 80048dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048de:	4b19      	ldr	r3, [pc, #100]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ea:	4b16      	ldr	r3, [pc, #88]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048fc:	4811      	ldr	r0, [pc, #68]	; (8004944 <MX_USART2_UART_Init+0x90>)
 80048fe:	f007 fc32 	bl	800c166 <HAL_UART_Init>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004908:	f7ff f8f0 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800490c:	2100      	movs	r1, #0
 800490e:	480d      	ldr	r0, [pc, #52]	; (8004944 <MX_USART2_UART_Init+0x90>)
 8004910:	f008 ff73 	bl	800d7fa <HAL_UARTEx_SetTxFifoThreshold>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800491a:	f7ff f8e7 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800491e:	2100      	movs	r1, #0
 8004920:	4808      	ldr	r0, [pc, #32]	; (8004944 <MX_USART2_UART_Init+0x90>)
 8004922:	f008 ffa8 	bl	800d876 <HAL_UARTEx_SetRxFifoThreshold>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800492c:	f7ff f8de 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004930:	4804      	ldr	r0, [pc, #16]	; (8004944 <MX_USART2_UART_Init+0x90>)
 8004932:	f008 ff29 	bl	800d788 <HAL_UARTEx_DisableFifoMode>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800493c:	f7ff f8d6 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	200121e4 	.word	0x200121e4
 8004948:	40004400 	.word	0x40004400

0800494c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <MX_USART3_UART_Init+0xa0>)
 8004954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004956:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004958:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800495c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800495e:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004966:	2200      	movs	r2, #0
 8004968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 800496c:	2200      	movs	r2, #0
 800496e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004972:	2208      	movs	r2, #8
 8004974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004976:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004978:	2200      	movs	r2, #0
 800497a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 800497e:	2200      	movs	r2, #0
 8004980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004984:	2200      	movs	r2, #0
 8004986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 800498a:	2200      	movs	r2, #0
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004990:	2220      	movs	r2, #32
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 8004996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800499c:	4812      	ldr	r0, [pc, #72]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 800499e:	f007 fbe2 	bl	800c166 <HAL_UART_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 80049a8:	f7ff f8a0 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_4) != HAL_OK)
 80049ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80049b0:	480d      	ldr	r0, [pc, #52]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 80049b2:	f008 ff22 	bl	800d7fa <HAL_UARTEx_SetTxFifoThreshold>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 80049bc:	f7ff f896 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_4) != HAL_OK)
 80049c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049c4:	4808      	ldr	r0, [pc, #32]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 80049c6:	f008 ff56 	bl	800d876 <HAL_UARTEx_SetRxFifoThreshold>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_USART3_UART_Init+0x88>
  {
    Error_Handler();
 80049d0:	f7ff f88c 	bl	8003aec <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 80049d4:	4804      	ldr	r0, [pc, #16]	; (80049e8 <MX_USART3_UART_Init+0x9c>)
 80049d6:	f008 fe9c 	bl	800d712 <HAL_UARTEx_EnableFifoMode>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_USART3_UART_Init+0x98>
  {
    Error_Handler();
 80049e0:	f7ff f884 	bl	8003aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20012274 	.word	0x20012274
 80049ec:	40004800 	.word	0x40004800

080049f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0a4      	sub	sp, #144	; 0x90
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a0c:	2254      	movs	r2, #84	; 0x54
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f00a fdf5 	bl	800f600 <memset>
  if(uartHandle->Instance==USART1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a82      	ldr	r2, [pc, #520]	; (8004c24 <HAL_UART_MspInit+0x234>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 808e 	bne.w	8004b3e <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a26:	2300      	movs	r3, #0
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f005 fa56 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a3a:	f7ff f857 	bl	8003aec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a3e:	4b7a      	ldr	r3, [pc, #488]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a42:	4a79      	ldr	r2, [pc, #484]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a48:	6613      	str	r3, [r2, #96]	; 0x60
 8004a4a:	4b77      	ldr	r3, [pc, #476]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a56:	4b74      	ldr	r3, [pc, #464]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	4a73      	ldr	r2, [pc, #460]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a5c:	f043 0304 	orr.w	r3, r3, #4
 8004a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a62:	4b71      	ldr	r3, [pc, #452]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6e:	4b6e      	ldr	r3, [pc, #440]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	4a6d      	ldr	r2, [pc, #436]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a7a:	4b6b      	ldr	r3, [pc, #428]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a86:	2330      	movs	r3, #48	; 0x30
 8004a88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a9c:	2307      	movs	r3, #7
 8004a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4860      	ldr	r0, [pc, #384]	; (8004c2c <HAL_UART_MspInit+0x23c>)
 8004aaa:	f002 fcad 	bl	8007408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ac6:	2307      	movs	r3, #7
 8004ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004acc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad6:	f002 fc97 	bl	8007408 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8004ada:	4b55      	ldr	r3, [pc, #340]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004adc:	4a55      	ldr	r2, [pc, #340]	; (8004c34 <HAL_UART_MspInit+0x244>)
 8004ade:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004ae2:	2219      	movs	r2, #25
 8004ae4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ae6:	4b52      	ldr	r3, [pc, #328]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004ae8:	2210      	movs	r2, #16
 8004aea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aec:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004af2:	4b4f      	ldr	r3, [pc, #316]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004af4:	2280      	movs	r2, #128	; 0x80
 8004af6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004af8:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004afe:	4b4c      	ldr	r3, [pc, #304]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004b04:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b0a:	4b49      	ldr	r3, [pc, #292]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b10:	4847      	ldr	r0, [pc, #284]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004b12:	f002 f8ff 	bl	8006d14 <HAL_DMA_Init>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8004b1c:	f7fe ffe6 	bl	8003aec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a43      	ldr	r2, [pc, #268]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78
 8004b26:	4a42      	ldr	r2, [pc, #264]	; (8004c30 <HAL_UART_MspInit+0x240>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2100      	movs	r1, #0
 8004b30:	2025      	movs	r0, #37	; 0x25
 8004b32:	f001 febc 	bl	80068ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b36:	2025      	movs	r0, #37	; 0x25
 8004b38:	f001 fed3 	bl	80068e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b3c:	e0f3      	b.n	8004d26 <HAL_UART_MspInit+0x336>
  else if(uartHandle->Instance==USART2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a3d      	ldr	r2, [pc, #244]	; (8004c38 <HAL_UART_MspInit+0x248>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d17d      	bne.n	8004c44 <HAL_UART_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b54:	4618      	mov	r0, r3
 8004b56:	f005 f9c3 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_UART_MspInit+0x174>
      Error_Handler();
 8004b60:	f7fe ffc4 	bl	8003aec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b64:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b70:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <HAL_UART_MspInit+0x238>)
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b94:	230c      	movs	r3, #12
 8004b96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004baa:	2307      	movs	r3, #7
 8004bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bba:	f002 fc25 	bl	8007408 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bc0:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <HAL_UART_MspInit+0x250>)
 8004bc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bc6:	221b      	movs	r2, #27
 8004bc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bca:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bcc:	2210      	movs	r2, #16
 8004bce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bd8:	2280      	movs	r2, #128	; 0x80
 8004bda:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bee:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004bf4:	4811      	ldr	r0, [pc, #68]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004bf6:	f002 f88d 	bl	8006d14 <HAL_DMA_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8004c00:	f7fe ff74 	bl	8003aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004c08:	679a      	str	r2, [r3, #120]	; 0x78
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <HAL_UART_MspInit+0x24c>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c10:	2200      	movs	r2, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	2026      	movs	r0, #38	; 0x26
 8004c16:	f001 fe4a 	bl	80068ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c1a:	2026      	movs	r0, #38	; 0x26
 8004c1c:	f001 fe61 	bl	80068e2 <HAL_NVIC_EnableIRQ>
}
 8004c20:	e081      	b.n	8004d26 <HAL_UART_MspInit+0x336>
 8004c22:	bf00      	nop
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	48000800 	.word	0x48000800
 8004c30:	20012304 	.word	0x20012304
 8004c34:	40020030 	.word	0x40020030
 8004c38:	40004400 	.word	0x40004400
 8004c3c:	20012364 	.word	0x20012364
 8004c40:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART3)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a39      	ldr	r2, [pc, #228]	; (8004d30 <HAL_UART_MspInit+0x340>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d16b      	bne.n	8004d26 <HAL_UART_MspInit+0x336>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c52:	2300      	movs	r3, #0
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 f940 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8004c66:	f7fe ff41 	bl	8003aec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c6a:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <HAL_UART_MspInit+0x344>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	4a31      	ldr	r2, [pc, #196]	; (8004d34 <HAL_UART_MspInit+0x344>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_UART_MspInit+0x344>)
 8004c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c82:	4b2c      	ldr	r3, [pc, #176]	; (8004d34 <HAL_UART_MspInit+0x344>)
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <HAL_UART_MspInit+0x344>)
 8004c88:	f043 0302 	orr.w	r3, r3, #2
 8004c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c8e:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <HAL_UART_MspInit+0x344>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004cb2:	2307      	movs	r3, #7
 8004cb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	481e      	ldr	r0, [pc, #120]	; (8004d38 <HAL_UART_MspInit+0x348>)
 8004cc0:	f002 fba2 	bl	8007408 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <HAL_UART_MspInit+0x350>)
 8004cc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004cca:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004ccc:	221d      	movs	r2, #29
 8004cce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cd6:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ce2:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ce8:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004cfa:	4810      	ldr	r0, [pc, #64]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004cfc:	f002 f80a 	bl	8006d14 <HAL_DMA_Init>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8004d06:	f7fe fef1 	bl	8003aec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004d0e:	679a      	str	r2, [r3, #120]	; 0x78
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <HAL_UART_MspInit+0x34c>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2100      	movs	r1, #0
 8004d1a:	2027      	movs	r0, #39	; 0x27
 8004d1c:	f001 fdc7 	bl	80068ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004d20:	2027      	movs	r0, #39	; 0x27
 8004d22:	f001 fdde 	bl	80068e2 <HAL_NVIC_EnableIRQ>
}
 8004d26:	bf00      	nop
 8004d28:	3790      	adds	r7, #144	; 0x90
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40004800 	.word	0x40004800
 8004d34:	40021000 	.word	0x40021000
 8004d38:	48000400 	.word	0x48000400
 8004d3c:	200123c4 	.word	0x200123c4
 8004d40:	40020058 	.word	0x40020058

08004d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d44:	480d      	ldr	r0, [pc, #52]	; (8004d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d48:	480d      	ldr	r0, [pc, #52]	; (8004d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d4a:	490e      	ldr	r1, [pc, #56]	; (8004d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <LoopForever+0xe>)
  movs r3, #0
 8004d4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004d50:	e002      	b.n	8004d58 <LoopCopyDataInit>

08004d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d56:	3304      	adds	r3, #4

08004d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d5c:	d3f9      	bcc.n	8004d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d60:	4c0b      	ldr	r4, [pc, #44]	; (8004d90 <LoopForever+0x16>)
  movs r3, #0
 8004d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d64:	e001      	b.n	8004d6a <LoopFillZerobss>

08004d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d68:	3204      	adds	r2, #4

08004d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d6c:	d3fb      	bcc.n	8004d66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d6e:	f7ff f8f1 	bl	8003f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d72:	f00a fc13 	bl	800f59c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d76:	f7fc fed3 	bl	8001b20 <main>

08004d7a <LoopForever>:

LoopForever:
    b LoopForever
 8004d7a:	e7fe      	b.n	8004d7a <LoopForever>
  ldr   r0, =_estack
 8004d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d84:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8004d88:	0802b3c8 	.word	0x0802b3c8
  ldr r2, =_sbss
 8004d8c:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8004d90:	20013478 	.word	0x20013478

08004d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d94:	e7fe      	b.n	8004d94 <ADC1_2_IRQHandler>

08004d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004da0:	2003      	movs	r0, #3
 8004da2:	f001 fd79 	bl	8006898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004da6:	2000      	movs	r0, #0
 8004da8:	f000 f80e 	bl	8004dc8 <HAL_InitTick>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	71fb      	strb	r3, [r7, #7]
 8004db6:	e001      	b.n	8004dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004db8:	f7fe feac 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004dbc:	79fb      	ldrb	r3, [r7, #7]

}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <HAL_InitTick+0x68>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d022      	beq.n	8004e22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_InitTick+0x6c>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <HAL_InitTick+0x68>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fd84 	bl	80068fe <HAL_SYSTICK_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d809      	bhi.n	8004e16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e02:	2200      	movs	r2, #0
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	f001 fd50 	bl	80068ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <HAL_InitTick+0x70>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e007      	b.n	8004e26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	e004      	b.n	8004e26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
 8004e20:	e001      	b.n	8004e26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000038 	.word	0x20000038
 8004e34:	20000030 	.word	0x20000030
 8004e38:	20000034 	.word	0x20000034

08004e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_IncTick+0x1c>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_IncTick+0x20>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <HAL_IncTick+0x1c>)
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20012424 	.word	0x20012424
 8004e5c:	20000038 	.word	0x20000038

08004e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return uwTick;
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_GetTick+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20012424 	.word	0x20012424

08004e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e80:	f7ff ffee 	bl	8004e60 <HAL_GetTick>
 8004e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d004      	beq.n	8004e9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_Delay+0x40>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e9c:	bf00      	nop
 8004e9e:	f7ff ffdf 	bl	8004e60 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d8f7      	bhi.n	8004e9e <HAL_Delay+0x26>
  {
  }
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000038 	.word	0x20000038

08004ebc <LL_ADC_SetCommonClock>:
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_ADC_SetCommonPathInternalCh>:
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_ADC_GetCommonPathInternalCh>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_ADC_SetOffset>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3360      	adds	r3, #96	; 0x60
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <LL_ADC_SetOffset+0x44>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	03fff000 	.word	0x03fff000

08004f6c <LL_ADC_GetOffsetChannel>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3360      	adds	r3, #96	; 0x60
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_ADC_SetOffsetState>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3360      	adds	r3, #96	; 0x60
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <LL_ADC_SetOffsetSign>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3360      	adds	r3, #96	; 0x60
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	601a      	str	r2, [r3, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_ADC_SetOffsetSaturation>:
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3360      	adds	r3, #96	; 0x60
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	431a      	orrs	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	615a      	str	r2, [r3, #20]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_ADC_REG_SetSequencerRanks>:
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3330      	adds	r3, #48	; 0x30
 8005096:	461a      	mov	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	4413      	add	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	211f      	movs	r1, #31
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	401a      	ands	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0e9b      	lsrs	r3, r3, #26
 80050be:	f003 011f 	and.w	r1, r3, #31
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	431a      	orrs	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_ADC_SetChannelSamplingTime>:
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3314      	adds	r3, #20
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	0e5b      	lsrs	r3, r3, #25
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0d1b      	lsrs	r3, r3, #20
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2107      	movs	r1, #7
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	0d1b      	lsrs	r3, r3, #20
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	431a      	orrs	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	601a      	str	r2, [r3, #0]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_ADC_SetChannelSingleDiff>:
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10a      	bne.n	800515e <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800515c:	e00a      	b.n	8005174 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516a:	43db      	mvns	r3, r3
 800516c:	401a      	ands	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	407f0000 	.word	0x407f0000

08005184 <LL_ADC_DisableDeepPowerDown>:
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6093      	str	r3, [r2, #8]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_ADC_IsDeepPowerDownEnabled>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051bc:	d101      	bne.n	80051c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <LL_ADC_EnableInternalRegulator>:
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80051e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	609a      	str	r2, [r3, #8]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <LL_ADC_IsInternalRegulatorEnabled>:
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520c:	d101      	bne.n	8005212 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LL_ADC_Enable>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005234:	f043 0201 	orr.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_Disable>:
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800525c:	f043 0202 	orr.w	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_ADC_IsEnabled>:
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <LL_ADC_IsEnabled+0x18>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <LL_ADC_IsEnabled+0x1a>
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <LL_ADC_IsDisableOngoing>:
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d101      	bne.n	80052ae <LL_ADC_IsDisableOngoing+0x18>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <LL_ADC_IsDisableOngoing+0x1a>
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d101      	bne.n	80052d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d101      	bne.n	80052fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005314:	2300      	movs	r3, #0
 8005316:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e1af      	b.n	8005682 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fb ffb7 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff ff2d 	bl	80051a8 <LL_ADC_IsDeepPowerDownEnabled>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff ff13 	bl	8005184 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ff48 	bl	80051f8 <LL_ADC_IsInternalRegulatorEnabled>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff2c 	bl	80051d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005378:	4b9f      	ldr	r3, [pc, #636]	; (80055f8 <HAL_ADC_Init+0x2f0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	4a9f      	ldr	r2, [pc, #636]	; (80055fc <HAL_ADC_Init+0x2f4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	099b      	lsrs	r3, r3, #6
 8005386:	3301      	adds	r3, #1
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800538c:	e002      	b.n	8005394 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3b01      	subs	r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f9      	bne.n	800538e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff2a 	bl	80051f8 <LL_ADC_IsInternalRegulatorEnabled>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ae:	f043 0210 	orr.w	r2, r3, #16
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	f043 0201 	orr.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff ff76 	bl	80052bc <LL_ADC_REG_IsConversionOngoing>
 80053d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8148 	bne.w	8005670 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 8144 	bne.w	8005670 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80053f0:	f043 0202 	orr.w	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff37 	bl	8005270 <LL_ADC_IsEnabled>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d141      	bne.n	800548c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005410:	d004      	beq.n	800541c <HAL_ADC_Init+0x114>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a7a      	ldr	r2, [pc, #488]	; (8005600 <HAL_ADC_Init+0x2f8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10f      	bne.n	800543c <HAL_ADC_Init+0x134>
 800541c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005420:	f7ff ff26 	bl	8005270 <LL_ADC_IsEnabled>
 8005424:	4604      	mov	r4, r0
 8005426:	4876      	ldr	r0, [pc, #472]	; (8005600 <HAL_ADC_Init+0x2f8>)
 8005428:	f7ff ff22 	bl	8005270 <LL_ADC_IsEnabled>
 800542c:	4603      	mov	r3, r0
 800542e:	4323      	orrs	r3, r4
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e012      	b.n	8005462 <HAL_ADC_Init+0x15a>
 800543c:	4871      	ldr	r0, [pc, #452]	; (8005604 <HAL_ADC_Init+0x2fc>)
 800543e:	f7ff ff17 	bl	8005270 <LL_ADC_IsEnabled>
 8005442:	4604      	mov	r4, r0
 8005444:	4870      	ldr	r0, [pc, #448]	; (8005608 <HAL_ADC_Init+0x300>)
 8005446:	f7ff ff13 	bl	8005270 <LL_ADC_IsEnabled>
 800544a:	4603      	mov	r3, r0
 800544c:	431c      	orrs	r4, r3
 800544e:	486f      	ldr	r0, [pc, #444]	; (800560c <HAL_ADC_Init+0x304>)
 8005450:	f7ff ff0e 	bl	8005270 <LL_ADC_IsEnabled>
 8005454:	4603      	mov	r3, r0
 8005456:	4323      	orrs	r3, r4
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d012      	beq.n	800548c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800546e:	d004      	beq.n	800547a <HAL_ADC_Init+0x172>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a62      	ldr	r2, [pc, #392]	; (8005600 <HAL_ADC_Init+0x2f8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_ADC_Init+0x176>
 800547a:	4a65      	ldr	r2, [pc, #404]	; (8005610 <HAL_ADC_Init+0x308>)
 800547c:	e000      	b.n	8005480 <HAL_ADC_Init+0x178>
 800547e:	4a65      	ldr	r2, [pc, #404]	; (8005614 <HAL_ADC_Init+0x30c>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f7ff fd18 	bl	8004ebc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	7f5b      	ldrb	r3, [r3, #29]
 8005490:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005496:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800549c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80054a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d106      	bne.n	80054c8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	3b01      	subs	r3, #1
 80054c0:	045b      	lsls	r3, r3, #17
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	4b4b      	ldr	r3, [pc, #300]	; (8005618 <HAL_ADC_Init+0x310>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fed2 	bl	80052bc <LL_ADC_REG_IsConversionOngoing>
 8005518:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fedf 	bl	80052e2 <LL_ADC_INJ_IsConversionOngoing>
 8005524:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d17f      	bne.n	800562c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d17c      	bne.n	800562c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005536:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800553e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554e:	f023 0302 	bic.w	r3, r3, #2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	69b9      	ldr	r1, [r7, #24]
 8005558:	430b      	orrs	r3, r1
 800555a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005572:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800557c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6911      	ldr	r1, [r2, #16]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	430b      	orrs	r3, r1
 800558e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005592:	e013      	b.n	80055bc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d12a      	bne.n	800561c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055dc:	4311      	orrs	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055e2:	4311      	orrs	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055e8:	430a      	orrs	r2, r1
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	e019      	b.n	800562c <HAL_ADC_Init+0x324>
 80055f8:	20000030 	.word	0x20000030
 80055fc:	053e2d63 	.word	0x053e2d63
 8005600:	50000100 	.word	0x50000100
 8005604:	50000400 	.word	0x50000400
 8005608:	50000500 	.word	0x50000500
 800560c:	50000600 	.word	0x50000600
 8005610:	50000300 	.word	0x50000300
 8005614:	50000700 	.word	0x50000700
 8005618:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d10c      	bne.n	800564e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f023 010f 	bic.w	r1, r3, #15
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
 800564c:	e007      	b.n	800565e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 020f 	bic.w	r2, r2, #15
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	f043 0201 	orr.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	65da      	str	r2, [r3, #92]	; 0x5c
 800566e:	e007      	b.n	8005680 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	f043 0210 	orr.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005680:	7ffb      	ldrb	r3, [r7, #31]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3724      	adds	r7, #36	; 0x24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd90      	pop	{r4, r7, pc}
 800568a:	bf00      	nop

0800568c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b0b6      	sub	sp, #216	; 0xd8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x24>
 80056d2:	2302      	movs	r3, #2
 80056d4:	f000 bc13 	b.w	8005efe <HAL_ADC_ConfigChannel+0x84a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fde9 	bl	80052bc <LL_ADC_REG_IsConversionOngoing>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 83f3 	bne.w	8005ed8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7ff fcc1 	bl	8005086 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fdd7 	bl	80052bc <LL_ADC_REG_IsConversionOngoing>
 800570e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fde3 	bl	80052e2 <LL_ADC_INJ_IsConversionOngoing>
 800571c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005720:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005724:	2b00      	cmp	r3, #0
 8005726:	f040 81d9 	bne.w	8005adc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800572a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800572e:	2b00      	cmp	r3, #0
 8005730:	f040 81d4 	bne.w	8005adc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573c:	d10f      	bne.n	800575e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	4619      	mov	r1, r3
 800574a:	f7ff fcc8 	bl	80050de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fc6f 	bl	800503a <LL_ADC_SetSamplingTimeCommonConfig>
 800575c:	e00e      	b.n	800577c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	461a      	mov	r2, r3
 800576c:	f7ff fcb7 	bl	80050de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fc5f 	bl	800503a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	08db      	lsrs	r3, r3, #3
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b04      	cmp	r3, #4
 800579c:	d022      	beq.n	80057e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6919      	ldr	r1, [r3, #16]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ae:	f7ff fbb9 	bl	8004f24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6919      	ldr	r1, [r3, #16]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7ff fc05 	bl	8004fce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6919      	ldr	r1, [r3, #16]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	7f1b      	ldrb	r3, [r3, #28]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d102      	bne.n	80057da <HAL_ADC_ConfigChannel+0x126>
 80057d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d8:	e000      	b.n	80057dc <HAL_ADC_ConfigChannel+0x128>
 80057da:	2300      	movs	r3, #0
 80057dc:	461a      	mov	r2, r3
 80057de:	f7ff fc11 	bl	8005004 <LL_ADC_SetOffsetSaturation>
 80057e2:	e17b      	b.n	8005adc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fbbe 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x15c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fbb3 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005806:	4603      	mov	r3, r0
 8005808:	0e9b      	lsrs	r3, r3, #26
 800580a:	f003 021f 	and.w	r2, r3, #31
 800580e:	e01e      	b.n	800584e <HAL_ADC_ConfigChannel+0x19a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fba8 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 800581c:	4603      	mov	r3, r0
 800581e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800582e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800583e:	2320      	movs	r3, #32
 8005840:	e004      	b.n	800584c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005846:	fab3 f383 	clz	r3, r3
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x1b2>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	0e9b      	lsrs	r3, r3, #26
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	e018      	b.n	8005898 <HAL_ADC_ConfigChannel+0x1e4>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005872:	fa93 f3a3 	rbit	r3, r3
 8005876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800587a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800587e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800588a:	2320      	movs	r3, #32
 800588c:	e004      	b.n	8005898 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800588e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005892:	fab3 f383 	clz	r3, r3
 8005896:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005898:	429a      	cmp	r2, r3
 800589a:	d106      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fb77 	bl	8004f98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2101      	movs	r1, #1
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fb5b 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x222>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fb50 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80058cc:	4603      	mov	r3, r0
 80058ce:	0e9b      	lsrs	r3, r3, #26
 80058d0:	f003 021f 	and.w	r2, r3, #31
 80058d4:	e01e      	b.n	8005914 <HAL_ADC_ConfigChannel+0x260>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fb45 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058ec:	fa93 f3a3 	rbit	r3, r3
 80058f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80058f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80058fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005904:	2320      	movs	r3, #32
 8005906:	e004      	b.n	8005912 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_ADC_ConfigChannel+0x278>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	0e9b      	lsrs	r3, r3, #26
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	e018      	b.n	800595e <HAL_ADC_ConfigChannel+0x2aa>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005938:	fa93 f3a3 	rbit	r3, r3
 800593c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005950:	2320      	movs	r3, #32
 8005952:	e004      	b.n	800595e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005958:	fab3 f383 	clz	r3, r3
 800595c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800595e:	429a      	cmp	r2, r3
 8005960:	d106      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	2101      	movs	r1, #1
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff fb14 	bl	8004f98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2102      	movs	r1, #2
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff faf8 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 800597c:	4603      	mov	r3, r0
 800597e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <HAL_ADC_ConfigChannel+0x2e8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2102      	movs	r1, #2
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff faed 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005992:	4603      	mov	r3, r0
 8005994:	0e9b      	lsrs	r3, r3, #26
 8005996:	f003 021f 	and.w	r2, r3, #31
 800599a:	e01e      	b.n	80059da <HAL_ADC_ConfigChannel+0x326>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2102      	movs	r1, #2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fae2 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80059ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80059c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80059ca:	2320      	movs	r3, #32
 80059cc:	e004      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80059ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x33e>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	0e9b      	lsrs	r3, r3, #26
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	e016      	b.n	8005a20 <HAL_ADC_ConfigChannel+0x36c>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059fe:	fa93 f3a3 	rbit	r3, r3
 8005a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005a12:	2320      	movs	r3, #32
 8005a14:	e004      	b.n	8005a20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a1a:	fab3 f383 	clz	r3, r3
 8005a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d106      	bne.n	8005a32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fab3 	bl	8004f98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2103      	movs	r1, #3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fa97 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <HAL_ADC_ConfigChannel+0x3aa>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2103      	movs	r1, #3
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fa8c 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005a54:	4603      	mov	r3, r0
 8005a56:	0e9b      	lsrs	r3, r3, #26
 8005a58:	f003 021f 	and.w	r2, r3, #31
 8005a5c:	e017      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x3da>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2103      	movs	r1, #3
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fa81 	bl	8004f6c <LL_ADC_GetOffsetChannel>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a70:	fa93 f3a3 	rbit	r3, r3
 8005a74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005a80:	2320      	movs	r3, #32
 8005a82:	e003      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a86:	fab3 f383 	clz	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x3f2>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	0e9b      	lsrs	r3, r3, #26
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	e011      	b.n	8005aca <HAL_ADC_ConfigChannel+0x416>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005abe:	2320      	movs	r3, #32
 8005ac0:	e003      	b.n	8005aca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac4:	fab3 f383 	clz	r3, r3
 8005ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d106      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2103      	movs	r1, #3
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fa5e 	bl	8004f98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fbc5 	bl	8005270 <LL_ADC_IsEnabled>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f040 813d 	bne.w	8005d68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6819      	ldr	r1, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7ff fb1a 	bl	8005134 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4aa2      	ldr	r2, [pc, #648]	; (8005d90 <HAL_ADC_ConfigChannel+0x6dc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	f040 812e 	bne.w	8005d68 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x480>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	0e9b      	lsrs	r3, r3, #26
 8005b22:	3301      	adds	r3, #1
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2b09      	cmp	r3, #9
 8005b2a:	bf94      	ite	ls
 8005b2c:	2301      	movls	r3, #1
 8005b2e:	2300      	movhi	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e019      	b.n	8005b68 <HAL_ADC_ConfigChannel+0x4b4>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3c:	fa93 f3a3 	rbit	r3, r3
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	e003      	b.n	8005b58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b52:	fab3 f383 	clz	r3, r3
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	bf94      	ite	ls
 8005b62:	2301      	movls	r3, #1
 8005b64:	2300      	movhi	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d079      	beq.n	8005c60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d107      	bne.n	8005b88 <HAL_ADC_ConfigChannel+0x4d4>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0e9b      	lsrs	r3, r3, #26
 8005b7e:	3301      	adds	r3, #1
 8005b80:	069b      	lsls	r3, r3, #26
 8005b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b86:	e015      	b.n	8005bb4 <HAL_ADC_ConfigChannel+0x500>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b90:	fa93 f3a3 	rbit	r3, r3
 8005b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	e003      	b.n	8005bac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	3301      	adds	r3, #1
 8005bae:	069b      	lsls	r3, r3, #26
 8005bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x520>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	0e9b      	lsrs	r3, r3, #26
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2101      	movs	r1, #1
 8005bce:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd2:	e017      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x550>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005bec:	2320      	movs	r3, #32
 8005bee:	e003      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	ea42 0103 	orr.w	r1, r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x576>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	0e9b      	lsrs	r3, r3, #26
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f003 021f 	and.w	r2, r3, #31
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	051b      	lsls	r3, r3, #20
 8005c28:	e018      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x5a8>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	fa93 f3a3 	rbit	r3, r3
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005c42:	2320      	movs	r3, #32
 8005c44:	e003      	b.n	8005c4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c48:	fab3 f383 	clz	r3, r3
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f003 021f 	and.w	r2, r3, #31
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	e07e      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x5c8>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	0e9b      	lsrs	r3, r3, #26
 8005c72:	3301      	adds	r3, #1
 8005c74:	069b      	lsls	r3, r3, #26
 8005c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c7a:	e015      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x5f4>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	fa93 f3a3 	rbit	r3, r3
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005c94:	2320      	movs	r3, #32
 8005c96:	e003      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	fab3 f383 	clz	r3, r3
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	069b      	lsls	r3, r3, #26
 8005ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d109      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x614>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	0e9b      	lsrs	r3, r3, #26
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	e017      	b.n	8005cf8 <HAL_ADC_ConfigChannel+0x644>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	fa93 f3a3 	rbit	r3, r3
 8005cd4:	61fb      	str	r3, [r7, #28]
  return result;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	e003      	b.n	8005cec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	fab3 f383 	clz	r3, r3
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	3301      	adds	r3, #1
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	ea42 0103 	orr.w	r1, r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10d      	bne.n	8005d24 <HAL_ADC_ConfigChannel+0x670>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	0e9b      	lsrs	r3, r3, #26
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f003 021f 	and.w	r2, r3, #31
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	3b1e      	subs	r3, #30
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d22:	e01b      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x6a8>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	fa93 f3a3 	rbit	r3, r3
 8005d30:	613b      	str	r3, [r7, #16]
  return result;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	e003      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	fab3 f383 	clz	r3, r3
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f003 021f 	and.w	r2, r3, #31
 8005d4e:	4613      	mov	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	3b1e      	subs	r3, #30
 8005d56:	051b      	lsls	r3, r3, #20
 8005d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	6892      	ldr	r2, [r2, #8]
 8005d62:	4619      	mov	r1, r3
 8005d64:	f7ff f9bb 	bl	80050de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <HAL_ADC_ConfigChannel+0x6e0>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80be 	beq.w	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d7e:	d004      	beq.n	8005d8a <HAL_ADC_ConfigChannel+0x6d6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <HAL_ADC_ConfigChannel+0x6e4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10a      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x6ec>
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <HAL_ADC_ConfigChannel+0x6e8>)
 8005d8c:	e009      	b.n	8005da2 <HAL_ADC_ConfigChannel+0x6ee>
 8005d8e:	bf00      	nop
 8005d90:	407f0000 	.word	0x407f0000
 8005d94:	80080000 	.word	0x80080000
 8005d98:	50000100 	.word	0x50000100
 8005d9c:	50000300 	.word	0x50000300
 8005da0:	4b59      	ldr	r3, [pc, #356]	; (8005f08 <HAL_ADC_ConfigChannel+0x854>)
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff f8b0 	bl	8004f08 <LL_ADC_GetCommonPathInternalCh>
 8005da8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a56      	ldr	r2, [pc, #344]	; (8005f0c <HAL_ADC_ConfigChannel+0x858>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_ADC_ConfigChannel+0x70c>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a55      	ldr	r2, [pc, #340]	; (8005f10 <HAL_ADC_ConfigChannel+0x85c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d13a      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d134      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd4:	d005      	beq.n	8005de2 <HAL_ADC_ConfigChannel+0x72e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4e      	ldr	r2, [pc, #312]	; (8005f14 <HAL_ADC_ConfigChannel+0x860>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	f040 8085 	bne.w	8005eec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dea:	d004      	beq.n	8005df6 <HAL_ADC_ConfigChannel+0x742>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a49      	ldr	r2, [pc, #292]	; (8005f18 <HAL_ADC_ConfigChannel+0x864>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_ADC_ConfigChannel+0x746>
 8005df6:	4a49      	ldr	r2, [pc, #292]	; (8005f1c <HAL_ADC_ConfigChannel+0x868>)
 8005df8:	e000      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x748>
 8005dfa:	4a43      	ldr	r2, [pc, #268]	; (8005f08 <HAL_ADC_ConfigChannel+0x854>)
 8005dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7ff f86b 	bl	8004ee2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e0c:	4b44      	ldr	r3, [pc, #272]	; (8005f20 <HAL_ADC_ConfigChannel+0x86c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	4a44      	ldr	r2, [pc, #272]	; (8005f24 <HAL_ADC_ConfigChannel+0x870>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e26:	e002      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f9      	bne.n	8005e28 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e34:	e05a      	b.n	8005eec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3b      	ldr	r2, [pc, #236]	; (8005f28 <HAL_ADC_ConfigChannel+0x874>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d125      	bne.n	8005e8c <HAL_ADC_ConfigChannel+0x7d8>
 8005e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11f      	bne.n	8005e8c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a31      	ldr	r2, [pc, #196]	; (8005f18 <HAL_ADC_ConfigChannel+0x864>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d104      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x7ac>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a34      	ldr	r2, [pc, #208]	; (8005f2c <HAL_ADC_ConfigChannel+0x878>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d047      	beq.n	8005ef0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e68:	d004      	beq.n	8005e74 <HAL_ADC_ConfigChannel+0x7c0>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <HAL_ADC_ConfigChannel+0x864>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d101      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x7c4>
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <HAL_ADC_ConfigChannel+0x868>)
 8005e76:	e000      	b.n	8005e7a <HAL_ADC_ConfigChannel+0x7c6>
 8005e78:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <HAL_ADC_ConfigChannel+0x854>)
 8005e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f7ff f82c 	bl	8004ee2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e8a:	e031      	b.n	8005ef0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <HAL_ADC_ConfigChannel+0x87c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d12d      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d127      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <HAL_ADC_ConfigChannel+0x864>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d022      	beq.n	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eb4:	d004      	beq.n	8005ec0 <HAL_ADC_ConfigChannel+0x80c>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <HAL_ADC_ConfigChannel+0x864>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d101      	bne.n	8005ec4 <HAL_ADC_ConfigChannel+0x810>
 8005ec0:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <HAL_ADC_ConfigChannel+0x868>)
 8005ec2:	e000      	b.n	8005ec6 <HAL_ADC_ConfigChannel+0x812>
 8005ec4:	4a10      	ldr	r2, [pc, #64]	; (8005f08 <HAL_ADC_ConfigChannel+0x854>)
 8005ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7ff f806 	bl	8004ee2 <LL_ADC_SetCommonPathInternalCh>
 8005ed6:	e00c      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005eea:	e002      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005eec:	bf00      	nop
 8005eee:	e000      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ef0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005efa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	37d8      	adds	r7, #216	; 0xd8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	50000700 	.word	0x50000700
 8005f0c:	c3210000 	.word	0xc3210000
 8005f10:	90c00010 	.word	0x90c00010
 8005f14:	50000600 	.word	0x50000600
 8005f18:	50000100 	.word	0x50000100
 8005f1c:	50000300 	.word	0x50000300
 8005f20:	20000030 	.word	0x20000030
 8005f24:	053e2d63 	.word	0x053e2d63
 8005f28:	c7520000 	.word	0xc7520000
 8005f2c:	50000500 	.word	0x50000500
 8005f30:	cb840000 	.word	0xcb840000

08005f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff f995 	bl	8005270 <LL_ADC_IsEnabled>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d14d      	bne.n	8005fe8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <ADC_Enable+0xc0>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5e:	f043 0210 	orr.w	r2, r3, #16
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6a:	f043 0201 	orr.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e039      	b.n	8005fea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff f950 	bl	8005220 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005f80:	f7fe ff6e 	bl	8004e60 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f86:	e028      	b.n	8005fda <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff f96f 	bl	8005270 <LL_ADC_IsEnabled>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff f93f 	bl	8005220 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fa2:	f7fe ff5d 	bl	8004e60 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d914      	bls.n	8005fda <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d00d      	beq.n	8005fda <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc2:	f043 0210 	orr.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fce:	f043 0201 	orr.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e007      	b.n	8005fea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d1cf      	bne.n	8005f88 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	8000003f 	.word	0x8000003f

08005ff8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff f946 	bl	8005296 <LL_ADC_IsDisableOngoing>
 800600a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff f92d 	bl	8005270 <LL_ADC_IsEnabled>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d047      	beq.n	80060ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d144      	bne.n	80060ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 030d 	and.w	r3, r3, #13
 800602c:	2b01      	cmp	r3, #1
 800602e:	d10c      	bne.n	800604a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff f907 	bl	8005248 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2203      	movs	r2, #3
 8006040:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006042:	f7fe ff0d 	bl	8004e60 <HAL_GetTick>
 8006046:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006048:	e029      	b.n	800609e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	f043 0210 	orr.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	f043 0201 	orr.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e023      	b.n	80060ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006066:	f7fe fefb 	bl	8004e60 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d914      	bls.n	800609e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00d      	beq.n	800609e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	f043 0210 	orr.w	r2, r3, #16
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006092:	f043 0201 	orr.w	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e007      	b.n	80060ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1dc      	bne.n	8006066 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d14b      	bne.n	8006168 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d021      	beq.n	800612e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe ffb6 	bl	8005060 <LL_ADC_REG_IsTriggerSourceSWStart>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d032      	beq.n	8006160 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d12b      	bne.n	8006160 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11f      	bne.n	8006160 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	65da      	str	r2, [r3, #92]	; 0x5c
 800612c:	e018      	b.n	8006160 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d111      	bne.n	8006160 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006158:	f043 0201 	orr.w	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7fd f883 	bl	800326c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006166:	e00e      	b.n	8006186 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff fa93 	bl	80056a0 <HAL_ADC_ErrorCallback>
}
 800617a:	e004      	b.n	8006186 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff fa75 	bl	800568c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c8:	f043 0204 	orr.w	r2, r3, #4
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fa65 	bl	80056a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <LL_ADC_IsEnabled>:
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <LL_ADC_IsEnabled+0x18>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <LL_ADC_IsEnabled+0x1a>
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <LL_ADC_StartCalibration>:
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006220:	4313      	orrs	r3, r2
 8006222:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_ADC_IsCalibrationOnGoing>:
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624a:	d101      	bne.n	8006250 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_ADC_REG_StartConversion>:
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800626e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006272:	f043 0204 	orr.w	r2, r3, #4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	609a      	str	r2, [r3, #8]
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_ADC_REG_IsConversionOngoing>:
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b04      	cmp	r3, #4
 8006298:	d101      	bne.n	800629e <LL_ADC_REG_IsConversionOngoing+0x18>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e04d      	b.n	8006364 <HAL_ADCEx_Calibration_Start+0xb8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fe91 	bl	8005ff8 <ADC_Disable>
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d136      	bne.n	800634e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062e8:	f023 0302 	bic.w	r3, r3, #2
 80062ec:	f043 0202 	orr.w	r2, r3, #2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff ff82 	bl	8006204 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006300:	e014      	b.n	800632c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3301      	adds	r3, #1
 8006306:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a18      	ldr	r2, [pc, #96]	; (800636c <HAL_ADCEx_Calibration_Start+0xc0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d90d      	bls.n	800632c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	f023 0312 	bic.w	r3, r3, #18
 8006318:	f043 0210 	orr.w	r2, r3, #16
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e01b      	b.n	8006364 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff ff80 	bl	8006236 <LL_ADC_IsCalibrationOnGoing>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e2      	bne.n	8006302 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006340:	f023 0303 	bic.w	r3, r3, #3
 8006344:	f043 0201 	orr.w	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	65da      	str	r2, [r3, #92]	; 0x5c
 800634c:	e005      	b.n	800635a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006352:	f043 0210 	orr.w	r2, r3, #16
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	0004de01 	.word	0x0004de01

08006370 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b0a2      	sub	sp, #136	; 0x88
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ff80 	bl	8006286 <LL_ADC_REG_IsConversionOngoing>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	e096      	b.n	80064be <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800639a:	2302      	movs	r3, #2
 800639c:	e08f      	b.n	80064be <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80063a6:	2300      	movs	r3, #0
 80063a8:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80063aa:	2300      	movs	r3, #0
 80063ac:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063b6:	d102      	bne.n	80063be <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80063b8:	4b43      	ldr	r3, [pc, #268]	; (80064c8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e009      	b.n	80063d2 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a42      	ldr	r2, [pc, #264]	; (80064cc <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d102      	bne.n	80063ce <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 80063c8:	4b41      	ldr	r3, [pc, #260]	; (80064d0 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e001      	b.n	80063d2 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e066      	b.n	80064be <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fd9f 	bl	8005f34 <ADC_Enable>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80063fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fd93 	bl	8005f34 <ADC_Enable>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006414:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006418:	2b00      	cmp	r3, #0
 800641a:	d14a      	bne.n	80064b2 <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006420:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800643c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8006444:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	4a24      	ldr	r2, [pc, #144]	; (80064dc <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 800644c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006456:	d004      	beq.n	8006462 <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d101      	bne.n	8006466 <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 8006462:	4b1f      	ldr	r3, [pc, #124]	; (80064e0 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8006464:	e000      	b.n	8006468 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8006466:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8006468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	221c      	movs	r2, #28
 8006472:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0210 	orr.w	r2, r2, #16
 800648a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006494:	330c      	adds	r3, #12
 8006496:	4619      	mov	r1, r3
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f000 fce2 	bl	8006e64 <HAL_DMA_Start_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fed7 	bl	800625e <LL_ADC_REG_StartConversion>
 80064b0:	e003      	b.n	80064ba <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80064ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3788      	adds	r7, #136	; 0x88
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	50000100 	.word	0x50000100
 80064cc:	50000400 	.word	0x50000400
 80064d0:	50000500 	.word	0x50000500
 80064d4:	080060b7 	.word	0x080060b7
 80064d8:	0800618f 	.word	0x0800618f
 80064dc:	080061ab 	.word	0x080061ab
 80064e0:	50000300 	.word	0x50000300
 80064e4:	50000700 	.word	0x50000700

080064e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b0a1      	sub	sp, #132	; 0x84
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006502:	2302      	movs	r3, #2
 8006504:	e0e7      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800650e:	2300      	movs	r3, #0
 8006510:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006512:	2300      	movs	r3, #0
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800651e:	d102      	bne.n	8006526 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006520:	4b6f      	ldr	r3, [pc, #444]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	e009      	b.n	800653a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a6e      	ldr	r2, [pc, #440]	; (80066e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d102      	bne.n	8006536 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006530:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006532:	60bb      	str	r3, [r7, #8]
 8006534:	e001      	b.n	800653a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006544:	f043 0220 	orr.w	r2, r3, #32
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0be      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fe93 	bl	8006286 <LL_ADC_REG_IsConversionOngoing>
 8006560:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fe8d 	bl	8006286 <LL_ADC_REG_IsConversionOngoing>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 80a0 	bne.w	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 809c 	bne.w	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006584:	d004      	beq.n	8006590 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a55      	ldr	r2, [pc, #340]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d101      	bne.n	8006594 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006590:	4b56      	ldr	r3, [pc, #344]	; (80066ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006592:	e000      	b.n	8006596 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006594:	4b56      	ldr	r3, [pc, #344]	; (80066f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006596:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d04b      	beq.n	8006638 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80065a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065b2:	035b      	lsls	r3, r3, #13
 80065b4:	430b      	orrs	r3, r1
 80065b6:	431a      	orrs	r2, r3
 80065b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c4:	d004      	beq.n	80065d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a45      	ldr	r2, [pc, #276]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10f      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80065d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80065d4:	f7ff fe03 	bl	80061de <LL_ADC_IsEnabled>
 80065d8:	4604      	mov	r4, r0
 80065da:	4841      	ldr	r0, [pc, #260]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80065dc:	f7ff fdff 	bl	80061de <LL_ADC_IsEnabled>
 80065e0:	4603      	mov	r3, r0
 80065e2:	4323      	orrs	r3, r4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e012      	b.n	8006616 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80065f0:	483c      	ldr	r0, [pc, #240]	; (80066e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80065f2:	f7ff fdf4 	bl	80061de <LL_ADC_IsEnabled>
 80065f6:	4604      	mov	r4, r0
 80065f8:	483b      	ldr	r0, [pc, #236]	; (80066e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80065fa:	f7ff fdf0 	bl	80061de <LL_ADC_IsEnabled>
 80065fe:	4603      	mov	r3, r0
 8006600:	431c      	orrs	r4, r3
 8006602:	483c      	ldr	r0, [pc, #240]	; (80066f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006604:	f7ff fdeb 	bl	80061de <LL_ADC_IsEnabled>
 8006608:	4603      	mov	r3, r0
 800660a:	4323      	orrs	r3, r4
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d056      	beq.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800661a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006622:	f023 030f 	bic.w	r3, r3, #15
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	6811      	ldr	r1, [r2, #0]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	6892      	ldr	r2, [r2, #8]
 800662e:	430a      	orrs	r2, r1
 8006630:	431a      	orrs	r2, r3
 8006632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006634:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006636:	e047      	b.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006642:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800664c:	d004      	beq.n	8006658 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10f      	bne.n	8006678 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006658:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800665c:	f7ff fdbf 	bl	80061de <LL_ADC_IsEnabled>
 8006660:	4604      	mov	r4, r0
 8006662:	481f      	ldr	r0, [pc, #124]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006664:	f7ff fdbb 	bl	80061de <LL_ADC_IsEnabled>
 8006668:	4603      	mov	r3, r0
 800666a:	4323      	orrs	r3, r4
 800666c:	2b00      	cmp	r3, #0
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e012      	b.n	800669e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006678:	481a      	ldr	r0, [pc, #104]	; (80066e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800667a:	f7ff fdb0 	bl	80061de <LL_ADC_IsEnabled>
 800667e:	4604      	mov	r4, r0
 8006680:	4819      	ldr	r0, [pc, #100]	; (80066e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006682:	f7ff fdac 	bl	80061de <LL_ADC_IsEnabled>
 8006686:	4603      	mov	r3, r0
 8006688:	431c      	orrs	r4, r3
 800668a:	481a      	ldr	r0, [pc, #104]	; (80066f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800668c:	f7ff fda7 	bl	80061de <LL_ADC_IsEnabled>
 8006690:	4603      	mov	r3, r0
 8006692:	4323      	orrs	r3, r4
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d012      	beq.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80066a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80066aa:	f023 030f 	bic.w	r3, r3, #15
 80066ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80066b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066b2:	e009      	b.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80066c6:	e000      	b.n	80066ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80066d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3784      	adds	r7, #132	; 0x84
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd90      	pop	{r4, r7, pc}
 80066de:	bf00      	nop
 80066e0:	50000100 	.word	0x50000100
 80066e4:	50000400 	.word	0x50000400
 80066e8:	50000500 	.word	0x50000500
 80066ec:	50000300 	.word	0x50000300
 80066f0:	50000700 	.word	0x50000700
 80066f4:	50000600 	.word	0x50000600

080066f8 <__NVIC_SetPriorityGrouping>:
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <__NVIC_SetPriorityGrouping+0x44>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006714:	4013      	ands	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800672a:	4a04      	ldr	r2, [pc, #16]	; (800673c <__NVIC_SetPriorityGrouping+0x44>)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	60d3      	str	r3, [r2, #12]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	e000ed00 	.word	0xe000ed00

08006740 <__NVIC_GetPriorityGrouping>:
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <__NVIC_GetPriorityGrouping+0x18>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	0a1b      	lsrs	r3, r3, #8
 800674a:	f003 0307 	and.w	r3, r3, #7
}
 800674e:	4618      	mov	r0, r3
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	e000ed00 	.word	0xe000ed00

0800675c <__NVIC_EnableIRQ>:
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	2b00      	cmp	r3, #0
 800676c:	db0b      	blt.n	8006786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	4907      	ldr	r1, [pc, #28]	; (8006794 <__NVIC_EnableIRQ+0x38>)
 8006776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	2001      	movs	r0, #1
 800677e:	fa00 f202 	lsl.w	r2, r0, r2
 8006782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	e000e100 	.word	0xe000e100

08006798 <__NVIC_SetPriority>:
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	db0a      	blt.n	80067c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	490c      	ldr	r1, [pc, #48]	; (80067e4 <__NVIC_SetPriority+0x4c>)
 80067b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b6:	0112      	lsls	r2, r2, #4
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	440b      	add	r3, r1
 80067bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067c0:	e00a      	b.n	80067d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	4908      	ldr	r1, [pc, #32]	; (80067e8 <__NVIC_SetPriority+0x50>)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	3b04      	subs	r3, #4
 80067d0:	0112      	lsls	r2, r2, #4
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	440b      	add	r3, r1
 80067d6:	761a      	strb	r2, [r3, #24]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	e000e100 	.word	0xe000e100
 80067e8:	e000ed00 	.word	0xe000ed00

080067ec <NVIC_EncodePriority>:
{
 80067ec:	b480      	push	{r7}
 80067ee:	b089      	sub	sp, #36	; 0x24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f1c3 0307 	rsb	r3, r3, #7
 8006806:	2b04      	cmp	r3, #4
 8006808:	bf28      	it	cs
 800680a:	2304      	movcs	r3, #4
 800680c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3304      	adds	r3, #4
 8006812:	2b06      	cmp	r3, #6
 8006814:	d902      	bls.n	800681c <NVIC_EncodePriority+0x30>
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	3b03      	subs	r3, #3
 800681a:	e000      	b.n	800681e <NVIC_EncodePriority+0x32>
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	43da      	mvns	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	401a      	ands	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006834:	f04f 31ff 	mov.w	r1, #4294967295
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	43d9      	mvns	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006844:	4313      	orrs	r3, r2
}
 8006846:	4618      	mov	r0, r3
 8006848:	3724      	adds	r7, #36	; 0x24
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <SysTick_Config>:
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3b01      	subs	r3, #1
 8006860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006864:	d301      	bcc.n	800686a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006866:	2301      	movs	r3, #1
 8006868:	e00f      	b.n	800688a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800686a:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <SysTick_Config+0x40>)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3b01      	subs	r3, #1
 8006870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006872:	210f      	movs	r1, #15
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	f7ff ff8e 	bl	8006798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <SysTick_Config+0x40>)
 800687e:	2200      	movs	r2, #0
 8006880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006882:	4b04      	ldr	r3, [pc, #16]	; (8006894 <SysTick_Config+0x40>)
 8006884:	2207      	movs	r2, #7
 8006886:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	e000e010 	.word	0xe000e010

08006898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ff29 	bl	80066f8 <__NVIC_SetPriorityGrouping>
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	4603      	mov	r3, r0
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068bc:	f7ff ff40 	bl	8006740 <__NVIC_GetPriorityGrouping>
 80068c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	6978      	ldr	r0, [r7, #20]
 80068c8:	f7ff ff90 	bl	80067ec <NVIC_EncodePriority>
 80068cc:	4602      	mov	r2, r0
 80068ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff ff5f 	bl	8006798 <__NVIC_SetPriority>
}
 80068da:	bf00      	nop
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	4603      	mov	r3, r0
 80068ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ff33 	bl	800675c <__NVIC_EnableIRQ>
}
 80068f6:	bf00      	nop
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ffa4 	bl	8006854 <SysTick_Config>
 800690c:	4603      	mov	r3, r0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e054      	b.n	80069d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7f5b      	ldrb	r3, [r3, #29]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fa fde6 	bl	800150c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	791b      	ldrb	r3, [r3, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a22      	ldr	r2, [pc, #136]	; (80069dc <HAL_CRC_Init+0xc4>)
 8006954:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0218 	bic.w	r2, r2, #24
 8006964:	609a      	str	r2, [r3, #8]
 8006966:	e00c      	b.n	8006982 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6899      	ldr	r1, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	461a      	mov	r2, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f948 	bl	8006c08 <HAL_CRCEx_Polynomial_Set>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e028      	b.n	80069d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f04f 32ff 	mov.w	r2, #4294967295
 8006992:	611a      	str	r2, [r3, #16]
 8006994:	e004      	b.n	80069a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6912      	ldr	r2, [r2, #16]
 800699e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	04c11db7 	.word	0x04c11db7

080069e0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2202      	movs	r2, #2
 80069f4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0201 	orr.w	r2, r2, #1
 8006a04:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d006      	beq.n	8006a1c <HAL_CRC_Calculate+0x3c>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d829      	bhi.n	8006a66 <HAL_CRC_Calculate+0x86>
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d019      	beq.n	8006a4a <HAL_CRC_Calculate+0x6a>
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d01e      	beq.n	8006a58 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006a1a:	e024      	b.n	8006a66 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e00a      	b.n	8006a38 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	441a      	add	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	3301      	adds	r3, #1
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d3f0      	bcc.n	8006a22 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
      break;
 8006a48:	e00e      	b.n	8006a68 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f812 	bl	8006a78 <CRC_Handle_8>
 8006a54:	6138      	str	r0, [r7, #16]
      break;
 8006a56:	e007      	b.n	8006a68 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f899 	bl	8006b94 <CRC_Handle_16>
 8006a62:	6138      	str	r0, [r7, #16]
      break;
 8006a64:	e000      	b.n	8006a68 <HAL_CRC_Calculate+0x88>
      break;
 8006a66:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006a6e:	693b      	ldr	r3, [r7, #16]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b089      	sub	sp, #36	; 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	e023      	b.n	8006ad2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	440b      	add	r3, r1
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006aa4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3302      	adds	r3, #2
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	440b      	add	r3, r1
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006ab4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	3303      	adds	r3, #3
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	440b      	add	r3, r1
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006ac8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	089b      	lsrs	r3, r3, #2
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d3d6      	bcc.n	8006a8a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d04d      	beq.n	8006b82 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d107      	bne.n	8006b00 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	4413      	add	r3, r2
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d116      	bne.n	8006b38 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	b21a      	sxth	r2, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	440b      	add	r3, r1
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b21b      	sxth	r3, r3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	b21b      	sxth	r3, r3
 8006b2a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	8b7a      	ldrh	r2, [r7, #26]
 8006b36:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d11f      	bne.n	8006b82 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b21a      	sxth	r2, r3
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	3301      	adds	r3, #1
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	440b      	add	r3, r1
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	8b7a      	ldrh	r2, [r7, #26]
 8006b6e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	3302      	adds	r3, #2
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3724      	adds	r7, #36	; 0x24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	e013      	b.n	8006bce <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	041a      	lsls	r2, r3, #16
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	440b      	add	r3, r1
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d3e6      	bcc.n	8006ba6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4413      	add	r3, r2
 8006bf0:	881a      	ldrh	r2, [r3, #0]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006c18:	231f      	movs	r3, #31
 8006c1a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006c1c:	bf00      	nop
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1e5a      	subs	r2, r3, #1
 8006c22:	613a      	str	r2, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d009      	beq.n	8006c3c <HAL_CRCEx_Polynomial_Set+0x34>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b18      	cmp	r3, #24
 8006c40:	d846      	bhi.n	8006cd0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006cd7 	.word	0x08006cd7
 8006c4c:	08006cd1 	.word	0x08006cd1
 8006c50:	08006cd1 	.word	0x08006cd1
 8006c54:	08006cd1 	.word	0x08006cd1
 8006c58:	08006cd1 	.word	0x08006cd1
 8006c5c:	08006cd1 	.word	0x08006cd1
 8006c60:	08006cd1 	.word	0x08006cd1
 8006c64:	08006cd1 	.word	0x08006cd1
 8006c68:	08006cc5 	.word	0x08006cc5
 8006c6c:	08006cd1 	.word	0x08006cd1
 8006c70:	08006cd1 	.word	0x08006cd1
 8006c74:	08006cd1 	.word	0x08006cd1
 8006c78:	08006cd1 	.word	0x08006cd1
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006cd1 	.word	0x08006cd1
 8006c84:	08006cd1 	.word	0x08006cd1
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006cd1 	.word	0x08006cd1
 8006c90:	08006cd1 	.word	0x08006cd1
 8006c94:	08006cd1 	.word	0x08006cd1
 8006c98:	08006cd1 	.word	0x08006cd1
 8006c9c:	08006cd1 	.word	0x08006cd1
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cd1 	.word	0x08006cd1
 8006ca8:	08006cad 	.word	0x08006cad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b06      	cmp	r3, #6
 8006cb0:	d913      	bls.n	8006cda <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cb6:	e010      	b.n	8006cda <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d90f      	bls.n	8006cde <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cc2:	e00c      	b.n	8006cde <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b0f      	cmp	r3, #15
 8006cc8:	d90b      	bls.n	8006ce2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006cce:	e008      	b.n	8006ce2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd4:	e006      	b.n	8006ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e004      	b.n	8006ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cda:	bf00      	nop
 8006cdc:	e002      	b.n	8006ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ce2:	bf00      	nop
  }
  if (status == HAL_OK)
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f023 0118 	bic.w	r1, r3, #24
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e08d      	b.n	8006e42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4b47      	ldr	r3, [pc, #284]	; (8006e4c <HAL_DMA_Init+0x138>)
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d80f      	bhi.n	8006d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	4b45      	ldr	r3, [pc, #276]	; (8006e50 <HAL_DMA_Init+0x13c>)
 8006d3a:	4413      	add	r3, r2
 8006d3c:	4a45      	ldr	r2, [pc, #276]	; (8006e54 <HAL_DMA_Init+0x140>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	009a      	lsls	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a42      	ldr	r2, [pc, #264]	; (8006e58 <HAL_DMA_Init+0x144>)
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8006d50:	e00e      	b.n	8006d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	4b40      	ldr	r3, [pc, #256]	; (8006e5c <HAL_DMA_Init+0x148>)
 8006d5a:	4413      	add	r3, r2
 8006d5c:	4a3d      	ldr	r2, [pc, #244]	; (8006e54 <HAL_DMA_Init+0x140>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	091b      	lsrs	r3, r3, #4
 8006d64:	009a      	lsls	r2, r3, #2
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a3c      	ldr	r2, [pc, #240]	; (8006e60 <HAL_DMA_Init+0x14c>)
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fabe 	bl	8007344 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dd0:	d102      	bne.n	8006dd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006dec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d010      	beq.n	8006e18 <HAL_DMA_Init+0x104>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d80c      	bhi.n	8006e18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fade 	bl	80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	e008      	b.n	8006e2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40020407 	.word	0x40020407
 8006e50:	bffdfff8 	.word	0xbffdfff8
 8006e54:	cccccccd 	.word	0xcccccccd
 8006e58:	40020000 	.word	0x40020000
 8006e5c:	bffdfbf8 	.word	0xbffdfbf8
 8006e60:	40020400 	.word	0x40020400

08006e64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_DMA_Start_IT+0x20>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e066      	b.n	8006f52 <HAL_DMA_Start_IT+0xee>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d155      	bne.n	8006f44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0201 	bic.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fa03 	bl	80072c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 020e 	orr.w	r2, r2, #14
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	e00f      	b.n	8006efc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0204 	bic.w	r2, r2, #4
 8006eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 020a 	orr.w	r2, r2, #10
 8006efa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0201 	orr.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e005      	b.n	8006f50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d005      	beq.n	8006f7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	e037      	b.n	8006fee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 020e 	bic.w	r2, r2, #14
 8006f8c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f9c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	f003 021f 	and.w	r2, r3, #31
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2101      	movs	r1, #1
 8006fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8006fc0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006fca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fe2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006fec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d00d      	beq.n	8007040 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2204      	movs	r2, #4
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
 800703e:	e047      	b.n	80070d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 020e 	bic.w	r2, r2, #14
 800704e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0201 	bic.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800706e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007074:	f003 021f 	and.w	r2, r3, #31
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f202 	lsl.w	r2, r1, r2
 8007082:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800708c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00c      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80070ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
    }
  }
  return status;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	2204      	movs	r2, #4
 80070fc:	409a      	lsls	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d026      	beq.n	8007154 <HAL_DMA_IRQHandler+0x7a>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d021      	beq.n	8007154 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0204 	bic.w	r2, r2, #4
 800712c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f003 021f 	and.w	r2, r3, #31
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	2104      	movs	r1, #4
 800713c:	fa01 f202 	lsl.w	r2, r1, r2
 8007140:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	2b00      	cmp	r3, #0
 8007148:	d071      	beq.n	800722e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007152:	e06c      	b.n	800722e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2202      	movs	r2, #2
 800715e:	409a      	lsls	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4013      	ands	r3, r2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02e      	beq.n	80071c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d029      	beq.n	80071c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 020a 	bic.w	r2, r2, #10
 800718e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	f003 021f 	and.w	r2, r3, #31
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	2102      	movs	r1, #2
 80071a6:	fa01 f202 	lsl.w	r2, r1, r2
 80071aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d038      	beq.n	800722e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80071c4:	e033      	b.n	800722e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	2208      	movs	r2, #8
 80071d0:	409a      	lsls	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d02a      	beq.n	8007230 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d025      	beq.n	8007230 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 020e 	bic.w	r2, r2, #14
 80071f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	f003 021f 	and.w	r2, r3, #31
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f202 	lsl.w	r2, r1, r2
 8007206:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800722e:	bf00      	nop
 8007230:	bf00      	nop
}
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	460b      	mov	r3, r1
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_DMA_RegisterCallback+0x20>
 8007254:	2302      	movs	r3, #2
 8007256:	e031      	b.n	80072bc <HAL_DMA_RegisterCallback+0x84>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b01      	cmp	r3, #1
 800726a:	d120      	bne.n	80072ae <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	2b03      	cmp	r3, #3
 8007270:	d81a      	bhi.n	80072a8 <HAL_DMA_RegisterCallback+0x70>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <HAL_DMA_RegisterCallback+0x40>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007289 	.word	0x08007289
 800727c:	08007291 	.word	0x08007291
 8007280:	08007299 	.word	0x08007299
 8007284:	080072a1 	.word	0x080072a1
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800728e:	e010      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8007296:	e00c      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800729e:	e008      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80072a6:	e004      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	75fb      	strb	r3, [r7, #23]
        break;
 80072ac:	e001      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f003 021f 	and.w	r2, r3, #31
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	2101      	movs	r1, #1
 8007300:	fa01 f202 	lsl.w	r2, r1, r2
 8007304:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b10      	cmp	r3, #16
 8007314:	d108      	bne.n	8007328 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007326:	e007      	b.n	8007338 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	60da      	str	r2, [r3, #12]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	4b16      	ldr	r3, [pc, #88]	; (80073ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007354:	429a      	cmp	r2, r3
 8007356:	d802      	bhi.n	800735e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e001      	b.n	8007362 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007360:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	3b08      	subs	r3, #8
 800736e:	4a12      	ldr	r2, [pc, #72]	; (80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737c:	089b      	lsrs	r3, r3, #2
 800737e:	009a      	lsls	r2, r3, #2
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a0b      	ldr	r2, [pc, #44]	; (80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800738e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2201      	movs	r2, #1
 8007398:	409a      	lsls	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40020407 	.word	0x40020407
 80073b0:	40020800 	.word	0x40020800
 80073b4:	40020820 	.word	0x40020820
 80073b8:	cccccccd 	.word	0xcccccccd
 80073bc:	40020880 	.word	0x40020880

080073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	461a      	mov	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a08      	ldr	r2, [pc, #32]	; (8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80073e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	f003 031f 	and.w	r3, r3, #31
 80073ec:	2201      	movs	r2, #1
 80073ee:	409a      	lsls	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	1000823f 	.word	0x1000823f
 8007404:	40020940 	.word	0x40020940

08007408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007416:	e15a      	b.n	80076ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	2101      	movs	r1, #1
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	fa01 f303 	lsl.w	r3, r1, r3
 8007424:	4013      	ands	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 814c 	beq.w	80076c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	2b01      	cmp	r3, #1
 800743a:	d005      	beq.n	8007448 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007444:	2b02      	cmp	r3, #2
 8007446:	d130      	bne.n	80074aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	2203      	movs	r2, #3
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	43db      	mvns	r3, r3
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4013      	ands	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800747e:	2201      	movs	r2, #1
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	43db      	mvns	r3, r3
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4013      	ands	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 0201 	and.w	r2, r3, #1
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d017      	beq.n	80074e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	2203      	movs	r2, #3
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43db      	mvns	r3, r3
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4013      	ands	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d123      	bne.n	800753a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	08da      	lsrs	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3208      	adds	r2, #8
 80074fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	220f      	movs	r2, #15
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	43db      	mvns	r3, r3
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4013      	ands	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	08da      	lsrs	r2, r3, #3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3208      	adds	r2, #8
 8007534:	6939      	ldr	r1, [r7, #16]
 8007536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	2203      	movs	r2, #3
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	43db      	mvns	r3, r3
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4013      	ands	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f003 0203 	and.w	r2, r3, #3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80a6 	beq.w	80076c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757c:	4b5b      	ldr	r3, [pc, #364]	; (80076ec <HAL_GPIO_Init+0x2e4>)
 800757e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007580:	4a5a      	ldr	r2, [pc, #360]	; (80076ec <HAL_GPIO_Init+0x2e4>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	6613      	str	r3, [r2, #96]	; 0x60
 8007588:	4b58      	ldr	r3, [pc, #352]	; (80076ec <HAL_GPIO_Init+0x2e4>)
 800758a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007594:	4a56      	ldr	r2, [pc, #344]	; (80076f0 <HAL_GPIO_Init+0x2e8>)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	089b      	lsrs	r3, r3, #2
 800759a:	3302      	adds	r3, #2
 800759c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	220f      	movs	r2, #15
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	43db      	mvns	r3, r3
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4013      	ands	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80075be:	d01f      	beq.n	8007600 <HAL_GPIO_Init+0x1f8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a4c      	ldr	r2, [pc, #304]	; (80076f4 <HAL_GPIO_Init+0x2ec>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d019      	beq.n	80075fc <HAL_GPIO_Init+0x1f4>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a4b      	ldr	r2, [pc, #300]	; (80076f8 <HAL_GPIO_Init+0x2f0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <HAL_GPIO_Init+0x1f0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a4a      	ldr	r2, [pc, #296]	; (80076fc <HAL_GPIO_Init+0x2f4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00d      	beq.n	80075f4 <HAL_GPIO_Init+0x1ec>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a49      	ldr	r2, [pc, #292]	; (8007700 <HAL_GPIO_Init+0x2f8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d007      	beq.n	80075f0 <HAL_GPIO_Init+0x1e8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a48      	ldr	r2, [pc, #288]	; (8007704 <HAL_GPIO_Init+0x2fc>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d101      	bne.n	80075ec <HAL_GPIO_Init+0x1e4>
 80075e8:	2305      	movs	r3, #5
 80075ea:	e00a      	b.n	8007602 <HAL_GPIO_Init+0x1fa>
 80075ec:	2306      	movs	r3, #6
 80075ee:	e008      	b.n	8007602 <HAL_GPIO_Init+0x1fa>
 80075f0:	2304      	movs	r3, #4
 80075f2:	e006      	b.n	8007602 <HAL_GPIO_Init+0x1fa>
 80075f4:	2303      	movs	r3, #3
 80075f6:	e004      	b.n	8007602 <HAL_GPIO_Init+0x1fa>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e002      	b.n	8007602 <HAL_GPIO_Init+0x1fa>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <HAL_GPIO_Init+0x1fa>
 8007600:	2300      	movs	r3, #0
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	f002 0203 	and.w	r2, r2, #3
 8007608:	0092      	lsls	r2, r2, #2
 800760a:	4093      	lsls	r3, r2
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007612:	4937      	ldr	r1, [pc, #220]	; (80076f0 <HAL_GPIO_Init+0x2e8>)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	089b      	lsrs	r3, r3, #2
 8007618:	3302      	adds	r3, #2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007620:	4b39      	ldr	r3, [pc, #228]	; (8007708 <HAL_GPIO_Init+0x300>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	43db      	mvns	r3, r3
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4013      	ands	r3, r2
 800762e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007644:	4a30      	ldr	r2, [pc, #192]	; (8007708 <HAL_GPIO_Init+0x300>)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800764a:	4b2f      	ldr	r3, [pc, #188]	; (8007708 <HAL_GPIO_Init+0x300>)
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	43db      	mvns	r3, r3
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4013      	ands	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800766e:	4a26      	ldr	r2, [pc, #152]	; (8007708 <HAL_GPIO_Init+0x300>)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007674:	4b24      	ldr	r3, [pc, #144]	; (8007708 <HAL_GPIO_Init+0x300>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	43db      	mvns	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4013      	ands	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007698:	4a1b      	ldr	r2, [pc, #108]	; (8007708 <HAL_GPIO_Init+0x300>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800769e:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <HAL_GPIO_Init+0x300>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	43db      	mvns	r3, r3
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4013      	ands	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076c2:	4a11      	ldr	r2, [pc, #68]	; (8007708 <HAL_GPIO_Init+0x300>)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3301      	adds	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	fa22 f303 	lsr.w	r3, r2, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f47f ae9d 	bne.w	8007418 <HAL_GPIO_Init+0x10>
  }
}
 80076de:	bf00      	nop
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40021000 	.word	0x40021000
 80076f0:	40010000 	.word	0x40010000
 80076f4:	48000400 	.word	0x48000400
 80076f8:	48000800 	.word	0x48000800
 80076fc:	48000c00 	.word	0x48000c00
 8007700:	48001000 	.word	0x48001000
 8007704:	48001400 	.word	0x48001400
 8007708:	40010400 	.word	0x40010400

0800770c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	887b      	ldrh	r3, [r7, #2]
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
 8007728:	e001      	b.n	800772e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800772e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	807b      	strh	r3, [r7, #2]
 8007748:	4613      	mov	r3, r2
 800774a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800774c:	787b      	ldrb	r3, [r7, #1]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007752:	887a      	ldrh	r2, [r7, #2]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007758:	e002      	b.n	8007760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800775a:	887a      	ldrh	r2, [r7, #2]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4013      	ands	r3, r2
 8007784:	041a      	lsls	r2, r3, #16
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	43d9      	mvns	r1, r3
 800778a:	887b      	ldrh	r3, [r7, #2]
 800778c:	400b      	ands	r3, r1
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80077aa:	4b08      	ldr	r3, [pc, #32]	; (80077cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077ac:	695a      	ldr	r2, [r3, #20]
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d006      	beq.n	80077c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077b6:	4a05      	ldr	r2, [pc, #20]	; (80077cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fb fcee 	bl	80031a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40010400 	.word	0x40010400

080077d0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e0be      	b.n	8007960 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d02e      	beq.n	800788c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a4d      	ldr	r2, [pc, #308]	; (8007968 <HAL_HRTIM_Init+0x198>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d10b      	bne.n	8007850 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007838:	4b4c      	ldr	r3, [pc, #304]	; (800796c <HAL_HRTIM_Init+0x19c>)
 800783a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783c:	4a4b      	ldr	r2, [pc, #300]	; (800796c <HAL_HRTIM_Init+0x19c>)
 800783e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007842:	6613      	str	r3, [r2, #96]	; 0x60
 8007844:	4b49      	ldr	r3, [pc, #292]	; (800796c <HAL_HRTIM_Init+0x19c>)
 8007846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800785e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007874:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fa f88d 	bl	80019ac <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d012      	beq.n	80078c4 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ac:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
 80078d8:	e03e      	b.n	8007958 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80078da:	7dfa      	ldrb	r2, [r7, #23]
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	3318      	adds	r3, #24
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80078ee:	7dfa      	ldrb	r2, [r7, #23]
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	331c      	adds	r3, #28
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007902:	7dfa      	ldrb	r2, [r7, #23]
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	4613      	mov	r3, r2
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	1a9b      	subs	r3, r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	440b      	add	r3, r1
 8007910:	3320      	adds	r3, #32
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007916:	7dfa      	ldrb	r2, [r7, #23]
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800792a:	7dfa      	ldrb	r2, [r7, #23]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	3328      	adds	r3, #40	; 0x28
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800793e:	7dfa      	ldrb	r2, [r7, #23]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3330      	adds	r3, #48	; 0x30
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007952:	7dfb      	ldrb	r3, [r7, #23]
 8007954:	3301      	adds	r3, #1
 8007956:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d9bd      	bls.n	80078da <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40016800 	.word	0x40016800
 800796c:	40021000 	.word	0x40021000

08007970 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e045      	b.n	8007a14 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d114      	bne.n	80079ca <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0202 	bic.w	r2, r2, #2
 80079b0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80079c8:	e01f      	b.n	8007a0a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0202 	orr.w	r2, r2, #2
 80079da:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80079e6:	f023 010c 	bic.w	r1, r3, #12
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8007a2a:	f7fd fa19 	bl	8004e60 <HAL_GetTick>
 8007a2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007a30:	e014      	b.n	8007a5c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a38:	d010      	beq.n	8007a5c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8007a3a:	f7fd fa11 	bl	8004e60 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d302      	bcc.n	8007a50 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2207      	movs	r2, #7
 8007a54:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e011      	b.n	8007a80 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6c:	d1e1      	bne.n	8007a32 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d101      	bne.n	8007aa4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e015      	b.n	8007ad0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d104      	bne.n	8007abc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 ff03 	bl	80088c0 <HRTIM_MasterBase_Config>
 8007aba:	e004      	b.n	8007ac6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 ff2c 	bl	800891e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_HRTIM_SimpleBaseStart+0x18>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e01b      	b.n	8007b28 <HAL_HRTIM_SimpleBaseStart+0x50>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6819      	ldr	r1, [r3, #0]
 8007b06:	4a0b      	ldr	r2, [pc, #44]	; (8007b34 <HAL_HRTIM_SimpleBaseStart+0x5c>)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	2000003c 	.word	0x2000003c

08007b38 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d101      	bne.n	8007b54 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 8007b50:	2302      	movs	r3, #2
 8007b52:	e01c      	b.n	8007b8e <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_HRTIM_EventConfig+0x2a>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e015      	b.n	8007b8e <HAL_HRTIM_EventConfig+0x56>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f001 f934 	bl	8008de4 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d101      	bne.n	8007bb0 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007bac:	2302      	movs	r3, #2
 8007bae:	e025      	b.n	8007bfc <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <HAL_HRTIM_EventPrescalerConfig+0x28>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e01e      	b.n	8007bfc <HAL_HRTIM_EventPrescalerConfig+0x66>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8007bd6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b089      	sub	sp, #36	; 0x24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d101      	bne.n	8007c24 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8007c20:	2302      	movs	r3, #2
 8007c22:	e1aa      	b.n	8007f7a <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <HAL_HRTIM_FaultConfig+0x2a>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e1a3      	b.n	8007f7a <HAL_HRTIM_FaultConfig+0x372>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c4a:	61fb      	str	r3, [r7, #28]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c54:	61bb      	str	r3, [r7, #24]

  source0 =  (pFaultCfg->Source & 1U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	617b      	str	r3, [r7, #20]
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	2b1f      	cmp	r3, #31
 8007c72:	f200 813f 	bhi.w	8007ef4 <HAL_HRTIM_FaultConfig+0x2ec>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <HAL_HRTIM_FaultConfig+0x74>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cfd 	.word	0x08007cfd
 8007c80:	08007d4d 	.word	0x08007d4d
 8007c84:	08007ef5 	.word	0x08007ef5
 8007c88:	08007da3 	.word	0x08007da3
 8007c8c:	08007ef5 	.word	0x08007ef5
 8007c90:	08007ef5 	.word	0x08007ef5
 8007c94:	08007ef5 	.word	0x08007ef5
 8007c98:	08007df9 	.word	0x08007df9
 8007c9c:	08007ef5 	.word	0x08007ef5
 8007ca0:	08007ef5 	.word	0x08007ef5
 8007ca4:	08007ef5 	.word	0x08007ef5
 8007ca8:	08007ef5 	.word	0x08007ef5
 8007cac:	08007ef5 	.word	0x08007ef5
 8007cb0:	08007ef5 	.word	0x08007ef5
 8007cb4:	08007ef5 	.word	0x08007ef5
 8007cb8:	08007e4f 	.word	0x08007e4f
 8007cbc:	08007ef5 	.word	0x08007ef5
 8007cc0:	08007ef5 	.word	0x08007ef5
 8007cc4:	08007ef5 	.word	0x08007ef5
 8007cc8:	08007ef5 	.word	0x08007ef5
 8007ccc:	08007ef5 	.word	0x08007ef5
 8007cd0:	08007ef5 	.word	0x08007ef5
 8007cd4:	08007ef5 	.word	0x08007ef5
 8007cd8:	08007ef5 	.word	0x08007ef5
 8007cdc:	08007ef5 	.word	0x08007ef5
 8007ce0:	08007ef5 	.word	0x08007ef5
 8007ce4:	08007ef5 	.word	0x08007ef5
 8007ce8:	08007ef5 	.word	0x08007ef5
 8007cec:	08007ef5 	.word	0x08007ef5
 8007cf0:	08007ef5 	.word	0x08007ef5
 8007cf4:	08007ef5 	.word	0x08007ef5
 8007cf8:	08007e9f 	.word	0x08007e9f
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007d02:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT1SRC_0_Pos);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT1SRC_1);
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d22:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	041b      	lsls	r3, r3, #16
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	61fb      	str	r3, [r7, #28]
      break;
 8007d4a:	e0dc      	b.n	8007f06 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007d52:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT2SRC_0_Pos);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT2SRC_1);
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d74:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	045b      	lsls	r3, r3, #17
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]
      break;
 8007da0:	e0b1      	b.n	8007f06 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8007da8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	041b      	lsls	r3, r3, #16
 8007db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT3SRC_0_Pos);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	049b      	lsls	r3, r3, #18
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT3SRC_1);
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dca:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	049b      	lsls	r3, r3, #18
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	041b      	lsls	r3, r3, #16
 8007ddc:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61fb      	str	r3, [r7, #28]
      break;
 8007df6:	e086      	b.n	8007f06 <HAL_HRTIM_FaultConfig+0x2fe>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007dfe:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	061b      	lsls	r3, r3, #24
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= (source0 << HRTIM_FLTINR1_FLT4SRC_0_Pos);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	069b      	lsls	r3, r3, #26
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT4SRC_1);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007e20:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	04db      	lsls	r3, r3, #19
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	061b      	lsls	r3, r3, #24
 8007e32:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	61fb      	str	r3, [r7, #28]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61fb      	str	r3, [r7, #28]
      break;
 8007e4c:	e05b      	b.n	8007f06 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC_0 | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007e54:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e74:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT5SRC_1_Pos);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	051b      	lsls	r3, r3, #20
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
      break;
 8007e9c:	e033      	b.n	8007f06 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  case HRTIM_FAULT_6:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6P | HRTIM_FLTINR2_FLT6SRC_0 | HRTIM_FLTINR2_FLT6F | HRTIM_FLTINR2_FLT6LCK);
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007ea4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	029b      	lsls	r3, r3, #10
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ec6:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT6SRC_1_Pos);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	055b      	lsls	r3, r3, #21
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
      break;
 8007ef2:	e008      	b.n	8007f06 <HAL_HRTIM_FaultConfig+0x2fe>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2207      	movs	r2, #7
 8007ef8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007f04:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b07      	cmp	r3, #7
 8007f10:	d101      	bne.n	8007f16 <HAL_HRTIM_FaultConfig+0x30e>
  {
     return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e031      	b.n	8007f7a <HAL_HRTIM_FaultConfig+0x372>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007f20:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f32:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	f248 0380 	movw	r3, #32896	; 0x8080
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	430b      	orrs	r3, r1
 8007f64:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop

08007f88 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d101      	bne.n	8007fa2 <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e025      	b.n	8007fee <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e01e      	b.n	8007fee <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fc8:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultBlankingConfigAndEnable(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Fault,
                                                HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTBLANKNGMODE(pFaultBlkCfg->BlankingSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d101      	bne.n	8008018 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1c>
  {
     return HAL_BUSY;
 8008014:	2302      	movs	r3, #2
 8008016:	e0d7      	b.n	80081c8 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x2a>
 8008022:	2302      	movs	r3, #2
 8008024:	e0d0      	b.n	80081c8 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3b01      	subs	r3, #1
 800803a:	2b1f      	cmp	r3, #31
 800803c:	f200 80aa 	bhi.w	8008194 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x198>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x4c>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	080080c9 	.word	0x080080c9
 800804c:	080080eb 	.word	0x080080eb
 8008050:	08008195 	.word	0x08008195
 8008054:	0800810d 	.word	0x0800810d
 8008058:	08008195 	.word	0x08008195
 800805c:	08008195 	.word	0x08008195
 8008060:	08008195 	.word	0x08008195
 8008064:	0800812f 	.word	0x0800812f
 8008068:	08008195 	.word	0x08008195
 800806c:	08008195 	.word	0x08008195
 8008070:	08008195 	.word	0x08008195
 8008074:	08008195 	.word	0x08008195
 8008078:	08008195 	.word	0x08008195
 800807c:	08008195 	.word	0x08008195
 8008080:	08008195 	.word	0x08008195
 8008084:	08008151 	.word	0x08008151
 8008088:	08008195 	.word	0x08008195
 800808c:	08008195 	.word	0x08008195
 8008090:	08008195 	.word	0x08008195
 8008094:	08008195 	.word	0x08008195
 8008098:	08008195 	.word	0x08008195
 800809c:	08008195 	.word	0x08008195
 80080a0:	08008195 	.word	0x08008195
 80080a4:	08008195 	.word	0x08008195
 80080a8:	08008195 	.word	0x08008195
 80080ac:	08008195 	.word	0x08008195
 80080b0:	08008195 	.word	0x08008195
 80080b4:	08008195 	.word	0x08008195
 80080b8:	08008195 	.word	0x08008195
 80080bc:	08008195 	.word	0x08008195
 80080c0:	08008195 	.word	0x08008195
 80080c4:	08008173 	.word	0x08008173
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80080d0:	f023 0203 	bic.w	r2, r3, #3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	431a      	orrs	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0201 	orr.w	r2, r2, #1
 80080e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1BLKS | HRTIM_FLTINR3_FLT1BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT1BLKS_Pos) |
                  HRTIM_FLTINR3_FLT1BLKE));
       break;
 80080e8:	e05d      	b.n	80081a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80080f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	025b      	lsls	r3, r3, #9
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008106:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2BLKS | HRTIM_FLTINR3_FLT2BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT2BLKS_Pos) |
                  HRTIM_FLTINR3_FLT2BLKE));
       break;
 800810a:	e04c      	b.n	80081a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	045b      	lsls	r3, r3, #17
 800811e:	431a      	orrs	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008128:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3BLKS | HRTIM_FLTINR3_FLT3BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT3BLKS_Pos) |
                  HRTIM_FLTINR3_FLT3BLKE));
       break;
 800812c:	e03b      	b.n	80081a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008136:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	065b      	lsls	r3, r3, #25
 8008140:	431a      	orrs	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800814a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4BLKS | HRTIM_FLTINR3_FLT4BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR3_FLT4BLKS_Pos) |
                  HRTIM_FLTINR3_FLT4BLKE));
       break;
 800814e:	e02a      	b.n	80081a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008158:	f023 0203 	bic.w	r2, r3, #3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	431a      	orrs	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0201 	orr.w	r2, r2, #1
 800816c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5BLKS | HRTIM_FLTINR4_FLT5BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT5BLKS_Pos) |
                  HRTIM_FLTINR4_FLT5BLKE));
      break;
 8008170:	e019      	b.n	80081a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }
   case HRTIM_FAULT_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800817a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	025b      	lsls	r3, r3, #9
 8008184:	431a      	orrs	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800818e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6BLKS | HRTIM_FLTINR4_FLT6BLKE),
                  ((pFaultBlkCfg->BlankingSource << HRTIM_FLTINR4_FLT6BLKS_Pos) |
                  HRTIM_FLTINR4_FLT6BLKE));
      break;
 8008192:	e008      	b.n	80081a6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1aa>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2207      	movs	r2, #7
 8008198:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80081a4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b07      	cmp	r3, #7
 80081b0:	d101      	bne.n	80081b6 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1ba>
  {
     return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e008      	b.n	80081c8 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x1cc>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_HRTIM_FaultCounterConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultCounterConfig(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t Fault,
                                               HRTIM_FaultBlankingCfgTypeDef* pFaultBlkCfg)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCOUNTER(pFaultBlkCfg->Threshold));
  assert_param(IS_HRTIM_FAULTCOUNTERRST(pFaultBlkCfg->ResetMode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d101      	bne.n	80081f0 <HAL_HRTIM_FaultCounterConfig+0x1c>
  {
     return HAL_BUSY;
 80081ec:	2302      	movs	r3, #2
 80081ee:	e0e3      	b.n	80083b8 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_HRTIM_FaultCounterConfig+0x2a>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0dc      	b.n	80083b8 <HAL_HRTIM_FaultCounterConfig+0x1e4>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (Fault)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	3b01      	subs	r3, #1
 8008212:	2b1f      	cmp	r3, #31
 8008214:	f200 80b6 	bhi.w	8008384 <HAL_HRTIM_FaultCounterConfig+0x1b0>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <HAL_HRTIM_FaultCounterConfig+0x4c>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	080082a1 	.word	0x080082a1
 8008224:	080082c7 	.word	0x080082c7
 8008228:	08008385 	.word	0x08008385
 800822c:	080082ed 	.word	0x080082ed
 8008230:	08008385 	.word	0x08008385
 8008234:	08008385 	.word	0x08008385
 8008238:	08008385 	.word	0x08008385
 800823c:	08008313 	.word	0x08008313
 8008240:	08008385 	.word	0x08008385
 8008244:	08008385 	.word	0x08008385
 8008248:	08008385 	.word	0x08008385
 800824c:	08008385 	.word	0x08008385
 8008250:	08008385 	.word	0x08008385
 8008254:	08008385 	.word	0x08008385
 8008258:	08008385 	.word	0x08008385
 800825c:	08008339 	.word	0x08008339
 8008260:	08008385 	.word	0x08008385
 8008264:	08008385 	.word	0x08008385
 8008268:	08008385 	.word	0x08008385
 800826c:	08008385 	.word	0x08008385
 8008270:	08008385 	.word	0x08008385
 8008274:	08008385 	.word	0x08008385
 8008278:	08008385 	.word	0x08008385
 800827c:	08008385 	.word	0x08008385
 8008280:	08008385 	.word	0x08008385
 8008284:	08008385 	.word	0x08008385
 8008288:	08008385 	.word	0x08008385
 800828c:	08008385 	.word	0x08008385
 8008290:	08008385 	.word	0x08008385
 8008294:	08008385 	.word	0x08008385
 8008298:	08008385 	.word	0x08008385
 800829c:	0800835f 	.word	0x0800835f
  {
   case HRTIM_FAULT_1:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80082a8:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	009a      	lsls	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	01db      	lsls	r3, r3, #7
 80082b8:	431a      	orrs	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT1RSTM | HRTIM_FLTINR3_FLT1CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT1CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT1RSTM_Pos));
       break;
 80082c4:	e067      	b.n	8008396 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_2:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80082ce:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	029a      	lsls	r2, r3, #10
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	03db      	lsls	r3, r3, #15
 80082de:	431a      	orrs	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT2RSTM | HRTIM_FLTINR3_FLT2CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT2CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT2RSTM_Pos));
       break;
 80082ea:	e054      	b.n	8008396 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_3:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80082f4:	f423 013c 	bic.w	r1, r3, #12320768	; 0xbc0000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	049a      	lsls	r2, r3, #18
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	05db      	lsls	r3, r3, #23
 8008304:	431a      	orrs	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT3RSTM | HRTIM_FLTINR3_FLT3CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT3CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT3RSTM_Pos));
       break;
 8008310:	e041      	b.n	8008396 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_4:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800831a:	f023 413c 	bic.w	r1, r3, #3154116608	; 0xbc000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	069a      	lsls	r2, r3, #26
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	431a      	orrs	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                  (HRTIM_FLTINR3_FLT4RSTM | HRTIM_FLTINR3_FLT4CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR3_FLT4CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR3_FLT4RSTM_Pos));
       break;
 8008336:	e02e      	b.n	8008396 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_5:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008340:	f023 01bc 	bic.w	r1, r3, #188	; 0xbc
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	009a      	lsls	r2, r3, #2
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	01db      	lsls	r3, r3, #7
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT5RSTM | HRTIM_FLTINR4_FLT5CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT5CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT5RSTM_Pos));
       break;
 800835c:	e01b      	b.n	8008396 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }
   case HRTIM_FAULT_6:
    {
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008366:	f423 413c 	bic.w	r1, r3, #48128	; 0xbc00
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	029a      	lsls	r2, r3, #10
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	03db      	lsls	r3, r3, #15
 8008376:	431a      	orrs	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
                  (HRTIM_FLTINR4_FLT6RSTM | HRTIM_FLTINR4_FLT6CNT),
                  (pFaultBlkCfg->Threshold << HRTIM_FLTINR4_FLT6CNT_Pos) |
                  (pFaultBlkCfg->ResetMode << HRTIM_FLTINR4_FLT6RSTM_Pos));
       break;
 8008382:	e008      	b.n	8008396 <HAL_HRTIM_FaultCounterConfig+0x1c2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2207      	movs	r2, #7
 8008388:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008394:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b07      	cmp	r3, #7
 80083a0:	d101      	bne.n	80083a6 <HAL_HRTIM_FaultCounterConfig+0x1d2>
  {
     return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e008      	b.n	80083b8 <HAL_HRTIM_FaultCounterConfig+0x1e4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00d      	beq.n	80083f6 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e2:	f023 0101 	bic.w	r1, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f003 0201 	and.w	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00e      	beq.n	800841e <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008408:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00e      	beq.n	8008446 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	041b      	lsls	r3, r3, #16
 8008438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00e      	beq.n	800846e <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008458:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	061b      	lsls	r3, r3, #24
 8008460:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f003 0310 	and.w	r3, r3, #16
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00d      	beq.n	8008494 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008480:	f023 0101 	bic.w	r1, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f003 0201 	and.w	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00e      	beq.n	80084bc <HAL_HRTIM_FaultModeCtl+0xf8>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084a6:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 80084bc:	bf00      	nop
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d101      	bne.n	80084e4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	e07a      	b.n	80085da <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e073      	b.n	80085da <HAL_HRTIM_WaveformTimerConfig+0x112>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b06      	cmp	r3, #6
 8008506:	d104      	bne.n	8008512 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fa47 	bl	800899e <HRTIM_MasterWaveform_Config>
 8008510:	e004      	b.n	800851c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 fade 	bl	8008ad8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6819      	ldr	r1, [r3, #0]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	4613      	mov	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4403      	add	r3, r0
 800852e:	3320      	adds	r3, #32
 8008530:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6859      	ldr	r1, [r3, #4]
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	4613      	mov	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4403      	add	r3, r0
 8008544:	3324      	adds	r3, #36	; 0x24
 8008546:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6899      	ldr	r1, [r3, #8]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4403      	add	r3, r0
 800855a:	3328      	adds	r3, #40	; 0x28
 800855c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68d9      	ldr	r1, [r3, #12]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4403      	add	r3, r0
 8008570:	332c      	adds	r3, #44	; 0x2c
 8008572:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6919      	ldr	r1, [r3, #16]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4403      	add	r3, r0
 8008586:	3330      	adds	r3, #48	; 0x30
 8008588:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fe51 	bl	8009234 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b06      	cmp	r3, #6
 8008596:	d017      	beq.n	80085c8 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d113      	bne.n	80085c8 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3301      	adds	r3, #1
 80085a8:	01db      	lsls	r3, r3, #7
 80085aa:	4413      	add	r3, r2
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b6:	025b      	lsls	r3, r3, #9
 80085b8:	68f9      	ldr	r1, [r7, #12]
 80085ba:	6809      	ldr	r1, [r1, #0]
 80085bc:	431a      	orrs	r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	3301      	adds	r3, #1
 80085c2:	01db      	lsls	r3, r3, #7
 80085c4:	440b      	add	r3, r1
 80085c6:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d101      	bne.n	8008602 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80085fe:	2302      	movs	r3, #2
 8008600:	e157      	b.n	80088b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800860c:	2302      	movs	r3, #2
 800860e:	e150      	b.n	80088b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b06      	cmp	r3, #6
 8008624:	d140      	bne.n	80086a8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3b01      	subs	r3, #1
 800862a:	2b07      	cmp	r3, #7
 800862c:	d82a      	bhi.n	8008684 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008655 	.word	0x08008655
 8008638:	08008661 	.word	0x08008661
 800863c:	08008685 	.word	0x08008685
 8008640:	0800866d 	.word	0x0800866d
 8008644:	08008685 	.word	0x08008685
 8008648:	08008685 	.word	0x08008685
 800864c:	08008685 	.word	0x08008685
 8008650:	08008679 	.word	0x08008679
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	61da      	str	r2, [r3, #28]
        break;
 800865e:	e01a      	b.n	8008696 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800866a:	e014      	b.n	8008696 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008676:	e00e      	b.n	8008696 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8008682:	e008      	b.n	8008696 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2207      	movs	r2, #7
 8008688:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8008694:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b07      	cmp	r3, #7
 80086a0:	f040 80fe 	bne.w	80088a0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e104      	b.n	80088b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b07      	cmp	r3, #7
 80086ae:	f200 80e3 	bhi.w	8008878 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80086b2:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086d9 	.word	0x080086d9
 80086bc:	080086ed 	.word	0x080086ed
 80086c0:	08008879 	.word	0x08008879
 80086c4:	080087a9 	.word	0x080087a9
 80086c8:	08008879 	.word	0x08008879
 80086cc:	08008879 	.word	0x08008879
 80086d0:	08008879 	.word	0x08008879
 80086d4:	080087bd 	.word	0x080087bd
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6819      	ldr	r1, [r3, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	01db      	lsls	r3, r3, #7
 80086e4:	440b      	add	r3, r1
 80086e6:	339c      	adds	r3, #156	; 0x9c
 80086e8:	601a      	str	r2, [r3, #0]
        break;
 80086ea:	e0d1      	b.n	8008890 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	01db      	lsls	r3, r3, #7
 80086f8:	440b      	add	r3, r1
 80086fa:	33a4      	adds	r3, #164	; 0xa4
 80086fc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d03f      	beq.n	8008786 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	3301      	adds	r3, #1
 800870e:	01db      	lsls	r3, r3, #7
 8008710:	4413      	add	r3, r2
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	6811      	ldr	r1, [r2, #0]
 8008718:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3301      	adds	r3, #1
 8008720:	01db      	lsls	r3, r3, #7
 8008722:	440b      	add	r3, r1
 8008724:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	3301      	adds	r3, #1
 800872e:	01db      	lsls	r3, r3, #7
 8008730:	4413      	add	r3, r2
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	6809      	ldr	r1, [r1, #0]
 800873c:	431a      	orrs	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	3301      	adds	r3, #1
 8008742:	01db      	lsls	r3, r3, #7
 8008744:	440b      	add	r3, r1
 8008746:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008750:	d109      	bne.n	8008766 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6819      	ldr	r1, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	01db      	lsls	r3, r3, #7
 800875e:	440b      	add	r3, r1
 8008760:	339c      	adds	r3, #156	; 0x9c
 8008762:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008764:	e091      	b.n	800888a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800876e:	f040 808c 	bne.w	800888a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6819      	ldr	r1, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	01db      	lsls	r3, r3, #7
 800877e:	440b      	add	r3, r1
 8008780:	33a8      	adds	r3, #168	; 0xa8
 8008782:	601a      	str	r2, [r3, #0]
         break;
 8008784:	e081      	b.n	800888a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3301      	adds	r3, #1
 800878e:	01db      	lsls	r3, r3, #7
 8008790:	4413      	add	r3, r2
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	6811      	ldr	r1, [r2, #0]
 8008798:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3301      	adds	r3, #1
 80087a0:	01db      	lsls	r3, r3, #7
 80087a2:	440b      	add	r3, r1
 80087a4:	601a      	str	r2, [r3, #0]
         break;
 80087a6:	e070      	b.n	800888a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6819      	ldr	r1, [r3, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	01db      	lsls	r3, r3, #7
 80087b4:	440b      	add	r3, r1
 80087b6:	33a8      	adds	r3, #168	; 0xa8
 80087b8:	601a      	str	r2, [r3, #0]
        break;
 80087ba:	e069      	b.n	8008890 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	01db      	lsls	r3, r3, #7
 80087c8:	440b      	add	r3, r1
 80087ca:	33ac      	adds	r3, #172	; 0xac
 80087cc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d03f      	beq.n	8008856 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3301      	adds	r3, #1
 80087de:	01db      	lsls	r3, r3, #7
 80087e0:	4413      	add	r3, r2
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	6811      	ldr	r1, [r2, #0]
 80087e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3301      	adds	r3, #1
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	440b      	add	r3, r1
 80087f4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3301      	adds	r3, #1
 80087fe:	01db      	lsls	r3, r3, #7
 8008800:	4413      	add	r3, r2
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	6809      	ldr	r1, [r1, #0]
 800880e:	431a      	orrs	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	3301      	adds	r3, #1
 8008814:	01db      	lsls	r3, r3, #7
 8008816:	440b      	add	r3, r1
 8008818:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008822:	d109      	bne.n	8008838 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6819      	ldr	r1, [r3, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	01db      	lsls	r3, r3, #7
 8008830:	440b      	add	r3, r1
 8008832:	339c      	adds	r3, #156	; 0x9c
 8008834:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008836:	e02a      	b.n	800888e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008840:	d125      	bne.n	800888e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6819      	ldr	r1, [r3, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	01db      	lsls	r3, r3, #7
 800884e:	440b      	add	r3, r1
 8008850:	33a8      	adds	r3, #168	; 0xa8
 8008852:	601a      	str	r2, [r3, #0]
         break;
 8008854:	e01b      	b.n	800888e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	3301      	adds	r3, #1
 800885e:	01db      	lsls	r3, r3, #7
 8008860:	4413      	add	r3, r2
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	6811      	ldr	r1, [r2, #0]
 8008868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	3301      	adds	r3, #1
 8008870:	01db      	lsls	r3, r3, #7
 8008872:	440b      	add	r3, r1
 8008874:	601a      	str	r2, [r3, #0]
         break;
 8008876:	e00a      	b.n	800888e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2207      	movs	r2, #7
 800887c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8008888:	e002      	b.n	8008890 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800888a:	bf00      	nop
 800888c:	e000      	b.n	8008890 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800888e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b07      	cmp	r3, #7
 800889a:	d101      	bne.n	80088a0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e008      	b.n	80088b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f023 0307 	bic.w	r3, r3, #7
 80088d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0318 	bic.w	r3, r3, #24
 80088ea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	6812      	ldr	r2, [r2, #0]
 8008906:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	6852      	ldr	r2, [r2, #4]
 8008910:	619a      	str	r2, [r3, #24]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800891e:	b480      	push	{r7}
 8008920:	b087      	sub	sp, #28
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3301      	adds	r3, #1
 8008932:	01db      	lsls	r3, r3, #7
 8008934:	4413      	add	r3, r2
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 0307 	bic.w	r3, r3, #7
 8008940:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f023 0318 	bic.w	r3, r3, #24
 8008952:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	3301      	adds	r3, #1
 8008966:	01db      	lsls	r3, r3, #7
 8008968:	4413      	add	r3, r2
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6819      	ldr	r1, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	01db      	lsls	r3, r3, #7
 800897a:	440b      	add	r3, r1
 800897c:	3394      	adds	r3, #148	; 0x94
 800897e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	01db      	lsls	r3, r3, #7
 800898c:	440b      	add	r3, r1
 800898e:	3398      	adds	r3, #152	; 0x98
 8008990:	601a      	str	r2, [r3, #0]
}
 8008992:	bf00      	nop
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80089b8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f023 0320 	bic.w	r3, r3, #32
 80089c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089d2:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	2b20      	cmp	r3, #32
 80089da:	d003      	beq.n	80089e4 <HRTIM_MasterWaveform_Config+0x46>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d108      	bne.n	80089f6 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089ea:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f043 0320 	orr.w	r3, r3, #32
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e021      	b.n	8008a3a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d108      	bne.n	8008a10 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a04:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e014      	b.n	8008a3a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d108      	bne.n	8008a2a <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e007      	b.n	8008a3a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f023 0320 	bic.w	r3, r3, #32
 8008a30:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a40:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a52:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008a76:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008a88:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a9c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aae:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b08b      	sub	sp, #44	; 0x2c
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3301      	adds	r3, #1
 8008aec:	01db      	lsls	r3, r3, #7
 8008aee:	4413      	add	r3, r2
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	6811      	ldr	r1, [r2, #0]
 8008af6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3301      	adds	r3, #1
 8008afe:	01db      	lsls	r3, r3, #7
 8008b00:	440b      	add	r3, r1
 8008b02:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	01db      	lsls	r3, r3, #7
 8008b0e:	4413      	add	r3, r2
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	01db      	lsls	r3, r3, #7
 8008b1c:	4413      	add	r3, r2
 8008b1e:	33e8      	adds	r3, #232	; 0xe8
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	01db      	lsls	r3, r3, #7
 8008b2c:	4413      	add	r3, r2
 8008b2e:	33e4      	adds	r3, #228	; 0xe4
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008b3c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	f023 0320 	bic.w	r3, r3, #32
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d003      	beq.n	8008b60 <HRTIM_TimingUnitWaveform_Config+0x88>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d108      	bne.n	8008b72 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	f043 0320 	orr.w	r3, r3, #32
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b70:	e021      	b.n	8008bb6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d108      	bne.n	8008b8c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8a:	e014      	b.n	8008bb6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d108      	bne.n	8008ba6 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba4:	e007      	b.n	8008bb6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	f023 0320 	bic.w	r3, r3, #32
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be8:	4313      	orrs	r3, r2
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c20:	d103      	bne.n	8008c2a <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c60:	4313      	orrs	r3, r2
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008c6a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c80:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c92:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	6a3a      	ldr	r2, [r7, #32]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008ca6:	d004      	beq.n	8008cb2 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cac:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008cb0:	d103      	bne.n	8008cba <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	2b40      	cmp	r3, #64	; 0x40
 8008cb8:	d108      	bne.n	8008ccc <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008cc0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc6:	6a3a      	ldr	r2, [r7, #32]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cd2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	d850      	bhi.n	8008d8c <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008cea:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf0:	08008d09 	.word	0x08008d09
 8008cf4:	08008d1f 	.word	0x08008d1f
 8008cf8:	08008d35 	.word	0x08008d35
 8008cfc:	08008d4b 	.word	0x08008d4b
 8008d00:	08008d61 	.word	0x08008d61
 8008d04:	08008d77 	.word	0x08008d77
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d0e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61fb      	str	r3, [r7, #28]
      break;
 8008d1c:	e037      	b.n	8008d8e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d24:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61fb      	str	r3, [r7, #28]
      break;
 8008d32:	e02c      	b.n	8008d8e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008d3a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	61fb      	str	r3, [r7, #28]
      break;
 8008d48:	e021      	b.n	8008d8e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d50:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	61fb      	str	r3, [r7, #28]
      break;
 8008d5e:	e016      	b.n	8008d8e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	015b      	lsls	r3, r3, #5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61fb      	str	r3, [r7, #28]
      break;
 8008d74:	e00b      	b.n	8008d8e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008d7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	019b      	lsls	r3, r3, #6
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61fb      	str	r3, [r7, #28]
      break;
 8008d8a:	e000      	b.n	8008d8e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8008d8c:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	3301      	adds	r3, #1
 8008d96:	01db      	lsls	r3, r3, #7
 8008d98:	4413      	add	r3, r2
 8008d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	01db      	lsls	r3, r3, #7
 8008da6:	4413      	add	r3, r2
 8008da8:	33e8      	adds	r3, #232	; 0xe8
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	01db      	lsls	r3, r3, #7
 8008db6:	4413      	add	r3, r2
 8008db8:	33e4      	adds	r3, #228	; 0xe4
 8008dba:	6a3a      	ldr	r2, [r7, #32]
 8008dbc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	01db      	lsls	r3, r3, #7
 8008dc6:	4413      	add	r3, r2
 8008dc8:	33d4      	adds	r3, #212	; 0xd4
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008dd8:	bf00      	nop
 8008dda:	372c      	adds	r7, #44	; 0x2c
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	; 0x24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8008df8:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008e02:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8008e0c:	617b      	str	r3, [r7, #20]

  switch (Event)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b0a      	cmp	r3, #10
 8008e12:	f200 8208 	bhi.w	8009226 <HRTIM_EventConfig+0x442>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <HRTIM_EventConfig+0x38>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e49 	.word	0x08008e49
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008ebf 	.word	0x08008ebf
 8008e28:	08008f1b 	.word	0x08008f1b
 8008e2c:	08008f79 	.word	0x08008f79
 8008e30:	08008fd7 	.word	0x08008fd7
 8008e34:	08009035 	.word	0x08009035
 8008e38:	08009093 	.word	0x08009093
 8008e3c:	080090f7 	.word	0x080090f7
 8008e40:	0800915b 	.word	0x0800915b
 8008e44:	080091c1 	.word	0x080091c1
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8008e66:	e1df      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e6e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0303 	and.w	r3, r3, #3
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 0318 	and.w	r3, r3, #24
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008ebc:	e1b4      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8008ec4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	019b      	lsls	r3, r3, #6
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	019b      	lsls	r3, r3, #6
 8008eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	019b      	lsls	r3, r3, #6
 8008eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	019b      	lsls	r3, r3, #6
 8008f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008f18:	e186      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008f20:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	031b      	lsls	r3, r3, #12
 8008f28:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	031b      	lsls	r3, r3, #12
 8008f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	031b      	lsls	r3, r3, #12
 8008f48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	031b      	lsls	r3, r3, #12
 8008f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008f76:	e157      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 8008f7e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	049b      	lsls	r3, r3, #18
 8008f86:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	049b      	lsls	r3, r3, #18
 8008f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	049b      	lsls	r3, r3, #18
 8008fa6:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	049b      	lsls	r3, r3, #18
 8008fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8008fd4:	e128      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008fdc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	061b      	lsls	r3, r3, #24
 8008fe4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	061b      	lsls	r3, r3, #24
 8008ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	061b      	lsls	r3, r3, #24
 8009004:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	4313      	orrs	r3, r2
 800900c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	4313      	orrs	r3, r2
 8009026:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8009032:	e0f9      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f023 031f 	bic.w	r3, r3, #31
 800903a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	4313      	orrs	r3, r2
 8009048:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f003 0304 	and.w	r3, r3, #4
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	4313      	orrs	r3, r2
 8009056:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f003 0318 	and.w	r3, r3, #24
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	4313      	orrs	r3, r2
 8009064:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f023 030f 	bic.w	r3, r3, #15
 800906c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f003 030f 	and.w	r3, r3, #15
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8009090:	e0ca      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8009098:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	019b      	lsls	r3, r3, #6
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	019b      	lsls	r3, r3, #6
 80090ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	019b      	lsls	r3, r3, #6
 80090be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80090ce:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	019b      	lsls	r3, r3, #6
 80090d6:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 80090f4:	e098      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 80090fc:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	031b      	lsls	r3, r3, #12
 8009104:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	4313      	orrs	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	031b      	lsls	r3, r3, #12
 8009114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	4313      	orrs	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	031b      	lsls	r3, r3, #12
 8009124:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	4313      	orrs	r3, r2
 800912c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009134:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	031b      	lsls	r3, r3, #12
 800913c:	b29b      	uxth	r3, r3
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8009158:	e066      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8009160:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	049b      	lsls	r3, r3, #18
 8009168:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	4313      	orrs	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	049b      	lsls	r3, r3, #18
 8009178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	4313      	orrs	r3, r2
 8009180:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	049b      	lsls	r3, r3, #18
 8009188:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4313      	orrs	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8009198:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	049b      	lsls	r3, r3, #18
 80091a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 80091be:	e033      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80091c6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	061b      	lsls	r3, r3, #24
 80091ce:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	061b      	lsls	r3, r3, #24
 80091ee:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80091fe:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	061b      	lsls	r3, r3, #24
 8009206:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8009224:	e000      	b.n	8009228 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 8009226:	bf00      	nop
  }
}
 8009228:	bf00      	nop
 800922a:	3724      	adds	r7, #36	; 0x24
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b06      	cmp	r3, #6
 8009242:	d85e      	bhi.n	8009302 <HRTIM_ForceRegistersUpdate+0xce>
 8009244:	a201      	add	r2, pc, #4	; (adr r2, 800924c <HRTIM_ForceRegistersUpdate+0x18>)
 8009246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924a:	bf00      	nop
 800924c:	0800927f 	.word	0x0800927f
 8009250:	08009295 	.word	0x08009295
 8009254:	080092ab 	.word	0x080092ab
 8009258:	080092c1 	.word	0x080092c1
 800925c:	080092d7 	.word	0x080092d7
 8009260:	080092ed 	.word	0x080092ed
 8009264:	08009269 	.word	0x08009269
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0201 	orr.w	r2, r2, #1
 8009278:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800927c:	e042      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0202 	orr.w	r2, r2, #2
 800928e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009292:	e037      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0204 	orr.w	r2, r2, #4
 80092a4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092a8:	e02c      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0208 	orr.w	r2, r2, #8
 80092ba:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092be:	e021      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0210 	orr.w	r2, r2, #16
 80092d0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092d4:	e016      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0220 	orr.w	r2, r2, #32
 80092e6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092ea:	e00b      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092fc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009300:	e000      	b.n	8009304 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8009302:	bf00      	nop
  }
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d141      	bne.n	80093a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800931e:	4b4b      	ldr	r3, [pc, #300]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800932a:	d131      	bne.n	8009390 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800932c:	4b47      	ldr	r3, [pc, #284]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800932e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009332:	4a46      	ldr	r2, [pc, #280]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800933c:	4b43      	ldr	r3, [pc, #268]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009344:	4a41      	ldr	r2, [pc, #260]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800934a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800934c:	4b40      	ldr	r3, [pc, #256]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2232      	movs	r2, #50	; 0x32
 8009352:	fb02 f303 	mul.w	r3, r2, r3
 8009356:	4a3f      	ldr	r2, [pc, #252]	; (8009454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009358:	fba2 2303 	umull	r2, r3, r2, r3
 800935c:	0c9b      	lsrs	r3, r3, #18
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009362:	e002      	b.n	800936a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3b01      	subs	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800936a:	4b38      	ldr	r3, [pc, #224]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009376:	d102      	bne.n	800937e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f2      	bne.n	8009364 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800937e:	4b33      	ldr	r3, [pc, #204]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800938a:	d158      	bne.n	800943e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e057      	b.n	8009440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009390:	4b2e      	ldr	r3, [pc, #184]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009396:	4a2d      	ldr	r2, [pc, #180]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800939c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80093a0:	e04d      	b.n	800943e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a8:	d141      	bne.n	800942e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093aa:	4b28      	ldr	r3, [pc, #160]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b6:	d131      	bne.n	800941c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093b8:	4b24      	ldr	r3, [pc, #144]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093be:	4a23      	ldr	r2, [pc, #140]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80093c8:	4b20      	ldr	r3, [pc, #128]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80093d0:	4a1e      	ldr	r2, [pc, #120]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80093d8:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2232      	movs	r2, #50	; 0x32
 80093de:	fb02 f303 	mul.w	r3, r2, r3
 80093e2:	4a1c      	ldr	r2, [pc, #112]	; (8009454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80093e4:	fba2 2303 	umull	r2, r3, r2, r3
 80093e8:	0c9b      	lsrs	r3, r3, #18
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093ee:	e002      	b.n	80093f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009402:	d102      	bne.n	800940a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1f2      	bne.n	80093f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800940a:	4b10      	ldr	r3, [pc, #64]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009416:	d112      	bne.n	800943e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e011      	b.n	8009440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800941c:	4b0b      	ldr	r3, [pc, #44]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800941e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009422:	4a0a      	ldr	r2, [pc, #40]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800942c:	e007      	b.n	800943e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800942e:	4b07      	ldr	r3, [pc, #28]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009436:	4a05      	ldr	r2, [pc, #20]	; (800944c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800943c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	40007000 	.word	0x40007000
 8009450:	20000030 	.word	0x20000030
 8009454:	431bde83 	.word	0x431bde83

08009458 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	4a04      	ldr	r2, [pc, #16]	; (8009474 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009466:	6093      	str	r3, [r2, #8]
}
 8009468:	bf00      	nop
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40007000 	.word	0x40007000

08009478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e306      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d075      	beq.n	8009582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009496:	4b97      	ldr	r3, [pc, #604]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 030c 	and.w	r3, r3, #12
 800949e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094a0:	4b94      	ldr	r3, [pc, #592]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0303 	and.w	r3, r3, #3
 80094a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b0c      	cmp	r3, #12
 80094ae:	d102      	bne.n	80094b6 <HAL_RCC_OscConfig+0x3e>
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d002      	beq.n	80094bc <HAL_RCC_OscConfig+0x44>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d10b      	bne.n	80094d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094bc:	4b8d      	ldr	r3, [pc, #564]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d05b      	beq.n	8009580 <HAL_RCC_OscConfig+0x108>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d157      	bne.n	8009580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e2e1      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094dc:	d106      	bne.n	80094ec <HAL_RCC_OscConfig+0x74>
 80094de:	4b85      	ldr	r3, [pc, #532]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a84      	ldr	r2, [pc, #528]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80094e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	e01d      	b.n	8009528 <HAL_RCC_OscConfig+0xb0>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094f4:	d10c      	bne.n	8009510 <HAL_RCC_OscConfig+0x98>
 80094f6:	4b7f      	ldr	r3, [pc, #508]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a7e      	ldr	r2, [pc, #504]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80094fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	4b7c      	ldr	r3, [pc, #496]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a7b      	ldr	r2, [pc, #492]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e00b      	b.n	8009528 <HAL_RCC_OscConfig+0xb0>
 8009510:	4b78      	ldr	r3, [pc, #480]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a77      	ldr	r2, [pc, #476]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	4b75      	ldr	r3, [pc, #468]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a74      	ldr	r2, [pc, #464]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d013      	beq.n	8009558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009530:	f7fb fc96 	bl	8004e60 <HAL_GetTick>
 8009534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009538:	f7fb fc92 	bl	8004e60 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b64      	cmp	r3, #100	; 0x64
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e2a6      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800954a:	4b6a      	ldr	r3, [pc, #424]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f0      	beq.n	8009538 <HAL_RCC_OscConfig+0xc0>
 8009556:	e014      	b.n	8009582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009558:	f7fb fc82 	bl	8004e60 <HAL_GetTick>
 800955c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800955e:	e008      	b.n	8009572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009560:	f7fb fc7e 	bl	8004e60 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b64      	cmp	r3, #100	; 0x64
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e292      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009572:	4b60      	ldr	r3, [pc, #384]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f0      	bne.n	8009560 <HAL_RCC_OscConfig+0xe8>
 800957e:	e000      	b.n	8009582 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d075      	beq.n	800967a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800958e:	4b59      	ldr	r3, [pc, #356]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 030c 	and.w	r3, r3, #12
 8009596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009598:	4b56      	ldr	r3, [pc, #344]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b0c      	cmp	r3, #12
 80095a6:	d102      	bne.n	80095ae <HAL_RCC_OscConfig+0x136>
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d002      	beq.n	80095b4 <HAL_RCC_OscConfig+0x13c>
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d11f      	bne.n	80095f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095b4:	4b4f      	ldr	r3, [pc, #316]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <HAL_RCC_OscConfig+0x154>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e265      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095cc:	4b49      	ldr	r3, [pc, #292]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	4946      	ldr	r1, [pc, #280]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <HAL_RCC_OscConfig+0x280>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fb fbef 	bl	8004dc8 <HAL_InitTick>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d043      	beq.n	8009678 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e251      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d023      	beq.n	8009644 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095fc:	4b3d      	ldr	r3, [pc, #244]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a3c      	ldr	r2, [pc, #240]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009608:	f7fb fc2a 	bl	8004e60 <HAL_GetTick>
 800960c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800960e:	e008      	b.n	8009622 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009610:	f7fb fc26 	bl	8004e60 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d901      	bls.n	8009622 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e23a      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009622:	4b34      	ldr	r3, [pc, #208]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0f0      	beq.n	8009610 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800962e:	4b31      	ldr	r3, [pc, #196]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	061b      	lsls	r3, r3, #24
 800963c:	492d      	ldr	r1, [pc, #180]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 800963e:	4313      	orrs	r3, r2
 8009640:	604b      	str	r3, [r1, #4]
 8009642:	e01a      	b.n	800967a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009644:	4b2b      	ldr	r3, [pc, #172]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a2a      	ldr	r2, [pc, #168]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 800964a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800964e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fb fc06 	bl	8004e60 <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009658:	f7fb fc02 	bl	8004e60 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e216      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800966a:	4b22      	ldr	r3, [pc, #136]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f0      	bne.n	8009658 <HAL_RCC_OscConfig+0x1e0>
 8009676:	e000      	b.n	800967a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009678:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0308 	and.w	r3, r3, #8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d041      	beq.n	800970a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01c      	beq.n	80096c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800968e:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009694:	4a17      	ldr	r2, [pc, #92]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800969e:	f7fb fbdf 	bl	8004e60 <HAL_GetTick>
 80096a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096a6:	f7fb fbdb 	bl	8004e60 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e1ef      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80096b8:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80096ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096be:	f003 0302 	and.w	r3, r3, #2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0ef      	beq.n	80096a6 <HAL_RCC_OscConfig+0x22e>
 80096c6:	e020      	b.n	800970a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096c8:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80096ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096ce:	4a09      	ldr	r2, [pc, #36]	; (80096f4 <HAL_RCC_OscConfig+0x27c>)
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d8:	f7fb fbc2 	bl	8004e60 <HAL_GetTick>
 80096dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80096de:	e00d      	b.n	80096fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096e0:	f7fb fbbe 	bl	8004e60 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d906      	bls.n	80096fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e1d2      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
 80096f2:	bf00      	nop
 80096f4:	40021000 	.word	0x40021000
 80096f8:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80096fc:	4b8c      	ldr	r3, [pc, #560]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80096fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1ea      	bne.n	80096e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 80a6 	beq.w	8009864 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009718:	2300      	movs	r3, #0
 800971a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800971c:	4b84      	ldr	r3, [pc, #528]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 800971e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_RCC_OscConfig+0x2b4>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <HAL_RCC_OscConfig+0x2b6>
 800972c:	2300      	movs	r3, #0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00d      	beq.n	800974e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009732:	4b7f      	ldr	r3, [pc, #508]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009736:	4a7e      	ldr	r2, [pc, #504]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800973c:	6593      	str	r3, [r2, #88]	; 0x58
 800973e:	4b7c      	ldr	r3, [pc, #496]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800974a:	2301      	movs	r3, #1
 800974c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800974e:	4b79      	ldr	r3, [pc, #484]	; (8009934 <HAL_RCC_OscConfig+0x4bc>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009756:	2b00      	cmp	r3, #0
 8009758:	d118      	bne.n	800978c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800975a:	4b76      	ldr	r3, [pc, #472]	; (8009934 <HAL_RCC_OscConfig+0x4bc>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a75      	ldr	r2, [pc, #468]	; (8009934 <HAL_RCC_OscConfig+0x4bc>)
 8009760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009766:	f7fb fb7b 	bl	8004e60 <HAL_GetTick>
 800976a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800976c:	e008      	b.n	8009780 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800976e:	f7fb fb77 	bl	8004e60 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b02      	cmp	r3, #2
 800977a:	d901      	bls.n	8009780 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e18b      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009780:	4b6c      	ldr	r3, [pc, #432]	; (8009934 <HAL_RCC_OscConfig+0x4bc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0f0      	beq.n	800976e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d108      	bne.n	80097a6 <HAL_RCC_OscConfig+0x32e>
 8009794:	4b66      	ldr	r3, [pc, #408]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800979a:	4a65      	ldr	r2, [pc, #404]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097a4:	e024      	b.n	80097f0 <HAL_RCC_OscConfig+0x378>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b05      	cmp	r3, #5
 80097ac:	d110      	bne.n	80097d0 <HAL_RCC_OscConfig+0x358>
 80097ae:	4b60      	ldr	r3, [pc, #384]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b4:	4a5e      	ldr	r2, [pc, #376]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097b6:	f043 0304 	orr.w	r3, r3, #4
 80097ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097be:	4b5c      	ldr	r3, [pc, #368]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c4:	4a5a      	ldr	r2, [pc, #360]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097ce:	e00f      	b.n	80097f0 <HAL_RCC_OscConfig+0x378>
 80097d0:	4b57      	ldr	r3, [pc, #348]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d6:	4a56      	ldr	r2, [pc, #344]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097d8:	f023 0301 	bic.w	r3, r3, #1
 80097dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097e0:	4b53      	ldr	r3, [pc, #332]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e6:	4a52      	ldr	r2, [pc, #328]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80097e8:	f023 0304 	bic.w	r3, r3, #4
 80097ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d016      	beq.n	8009826 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f8:	f7fb fb32 	bl	8004e60 <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097fe:	e00a      	b.n	8009816 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009800:	f7fb fb2e 	bl	8004e60 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	f241 3288 	movw	r2, #5000	; 0x1388
 800980e:	4293      	cmp	r3, r2
 8009810:	d901      	bls.n	8009816 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e140      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009816:	4b46      	ldr	r3, [pc, #280]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0ed      	beq.n	8009800 <HAL_RCC_OscConfig+0x388>
 8009824:	e015      	b.n	8009852 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009826:	f7fb fb1b 	bl	8004e60 <HAL_GetTick>
 800982a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800982c:	e00a      	b.n	8009844 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800982e:	f7fb fb17 	bl	8004e60 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	f241 3288 	movw	r2, #5000	; 0x1388
 800983c:	4293      	cmp	r3, r2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e129      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009844:	4b3a      	ldr	r3, [pc, #232]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1ed      	bne.n	800982e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009852:	7ffb      	ldrb	r3, [r7, #31]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d105      	bne.n	8009864 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009858:	4b35      	ldr	r3, [pc, #212]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 800985a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985c:	4a34      	ldr	r2, [pc, #208]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 800985e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b00      	cmp	r3, #0
 800986e:	d03c      	beq.n	80098ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01c      	beq.n	80098b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009878:	4b2d      	ldr	r3, [pc, #180]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 800987a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800987e:	4a2c      	ldr	r2, [pc, #176]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009880:	f043 0301 	orr.w	r3, r3, #1
 8009884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009888:	f7fb faea 	bl	8004e60 <HAL_GetTick>
 800988c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800988e:	e008      	b.n	80098a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009890:	f7fb fae6 	bl	8004e60 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	2b02      	cmp	r3, #2
 800989c:	d901      	bls.n	80098a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e0fa      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80098a2:	4b23      	ldr	r3, [pc, #140]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80098a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0ef      	beq.n	8009890 <HAL_RCC_OscConfig+0x418>
 80098b0:	e01b      	b.n	80098ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098b2:	4b1f      	ldr	r3, [pc, #124]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80098b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098b8:	4a1d      	ldr	r2, [pc, #116]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80098ba:	f023 0301 	bic.w	r3, r3, #1
 80098be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098c2:	f7fb facd 	bl	8004e60 <HAL_GetTick>
 80098c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80098c8:	e008      	b.n	80098dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098ca:	f7fb fac9 	bl	8004e60 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d901      	bls.n	80098dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e0dd      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80098dc:	4b14      	ldr	r3, [pc, #80]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80098de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1ef      	bne.n	80098ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 80d1 	beq.w	8009a96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098f4:	4b0e      	ldr	r3, [pc, #56]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f003 030c 	and.w	r3, r3, #12
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	f000 808b 	beq.w	8009a18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	2b02      	cmp	r3, #2
 8009908:	d15e      	bne.n	80099c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800990a:	4b09      	ldr	r3, [pc, #36]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a08      	ldr	r2, [pc, #32]	; (8009930 <HAL_RCC_OscConfig+0x4b8>)
 8009910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009916:	f7fb faa3 	bl	8004e60 <HAL_GetTick>
 800991a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800991c:	e00c      	b.n	8009938 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800991e:	f7fb fa9f 	bl	8004e60 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d905      	bls.n	8009938 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e0b3      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
 8009930:	40021000 	.word	0x40021000
 8009934:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009938:	4b59      	ldr	r3, [pc, #356]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1ec      	bne.n	800991e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009944:	4b56      	ldr	r3, [pc, #344]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	4b56      	ldr	r3, [pc, #344]	; (8009aa4 <HAL_RCC_OscConfig+0x62c>)
 800994a:	4013      	ands	r3, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6a11      	ldr	r1, [r2, #32]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009954:	3a01      	subs	r2, #1
 8009956:	0112      	lsls	r2, r2, #4
 8009958:	4311      	orrs	r1, r2
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800995e:	0212      	lsls	r2, r2, #8
 8009960:	4311      	orrs	r1, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009966:	0852      	lsrs	r2, r2, #1
 8009968:	3a01      	subs	r2, #1
 800996a:	0552      	lsls	r2, r2, #21
 800996c:	4311      	orrs	r1, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009972:	0852      	lsrs	r2, r2, #1
 8009974:	3a01      	subs	r2, #1
 8009976:	0652      	lsls	r2, r2, #25
 8009978:	4311      	orrs	r1, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800997e:	06d2      	lsls	r2, r2, #27
 8009980:	430a      	orrs	r2, r1
 8009982:	4947      	ldr	r1, [pc, #284]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 8009984:	4313      	orrs	r3, r2
 8009986:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009988:	4b45      	ldr	r3, [pc, #276]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a44      	ldr	r2, [pc, #272]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 800998e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009992:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009994:	4b42      	ldr	r3, [pc, #264]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a41      	ldr	r2, [pc, #260]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 800999a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800999e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a0:	f7fb fa5e 	bl	8004e60 <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a8:	f7fb fa5a 	bl	8004e60 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e06e      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099ba:	4b39      	ldr	r3, [pc, #228]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f0      	beq.n	80099a8 <HAL_RCC_OscConfig+0x530>
 80099c6:	e066      	b.n	8009a96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099c8:	4b35      	ldr	r3, [pc, #212]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a34      	ldr	r2, [pc, #208]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099d2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80099d4:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	4a31      	ldr	r2, [pc, #196]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80099e0:	4b2f      	ldr	r3, [pc, #188]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	4a2e      	ldr	r2, [pc, #184]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 80099e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80099ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f0:	f7fb fa36 	bl	8004e60 <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099f8:	f7fb fa32 	bl	8004e60 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e046      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a0a:	4b25      	ldr	r3, [pc, #148]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1f0      	bne.n	80099f8 <HAL_RCC_OscConfig+0x580>
 8009a16:	e03e      	b.n	8009a96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d101      	bne.n	8009a24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e039      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009a24:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <HAL_RCC_OscConfig+0x628>)
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f003 0203 	and.w	r2, r3, #3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d12c      	bne.n	8009a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	3b01      	subs	r3, #1
 8009a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d123      	bne.n	8009a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d11b      	bne.n	8009a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d113      	bne.n	8009a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	3b01      	subs	r3, #1
 8009a78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d109      	bne.n	8009a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a88:	085b      	lsrs	r3, r3, #1
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d001      	beq.n	8009a96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e000      	b.n	8009a98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3720      	adds	r7, #32
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	019f800c 	.word	0x019f800c

08009aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e11e      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ac0:	4b91      	ldr	r3, [pc, #580]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d910      	bls.n	8009af0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ace:	4b8e      	ldr	r3, [pc, #568]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f023 020f 	bic.w	r2, r3, #15
 8009ad6:	498c      	ldr	r1, [pc, #560]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ade:	4b8a      	ldr	r3, [pc, #552]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 030f 	and.w	r3, r3, #15
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d001      	beq.n	8009af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e106      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d073      	beq.n	8009be4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d129      	bne.n	8009b58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b04:	4b81      	ldr	r3, [pc, #516]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e0f4      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009b14:	f000 f99e 	bl	8009e54 <RCC_GetSysClockFreqFromPLLSource>
 8009b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	4a7c      	ldr	r2, [pc, #496]	; (8009d10 <HAL_RCC_ClockConfig+0x268>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d93f      	bls.n	8009ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009b22:	4b7a      	ldr	r3, [pc, #488]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d033      	beq.n	8009ba2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d12f      	bne.n	8009ba2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b42:	4b72      	ldr	r3, [pc, #456]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b4a:	4a70      	ldr	r2, [pc, #448]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009b52:	2380      	movs	r3, #128	; 0x80
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	e024      	b.n	8009ba2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d107      	bne.n	8009b70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b60:	4b6a      	ldr	r3, [pc, #424]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d109      	bne.n	8009b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e0c6      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b70:	4b66      	ldr	r3, [pc, #408]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e0be      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009b80:	f000 f8ce 	bl	8009d20 <HAL_RCC_GetSysClockFreq>
 8009b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	4a61      	ldr	r2, [pc, #388]	; (8009d10 <HAL_RCC_ClockConfig+0x268>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d909      	bls.n	8009ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b8e:	4b5f      	ldr	r3, [pc, #380]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b96:	4a5d      	ldr	r2, [pc, #372]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009b9e:	2380      	movs	r3, #128	; 0x80
 8009ba0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ba2:	4b5a      	ldr	r3, [pc, #360]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f023 0203 	bic.w	r2, r3, #3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4957      	ldr	r1, [pc, #348]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bb4:	f7fb f954 	bl	8004e60 <HAL_GetTick>
 8009bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bba:	e00a      	b.n	8009bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bbc:	f7fb f950 	bl	8004e60 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e095      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bd2:	4b4e      	ldr	r3, [pc, #312]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f003 020c 	and.w	r2, r3, #12
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d1eb      	bne.n	8009bbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0302 	and.w	r3, r3, #2
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d023      	beq.n	8009c38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bfc:	4b43      	ldr	r3, [pc, #268]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	4a42      	ldr	r2, [pc, #264]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009c06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0308 	and.w	r3, r3, #8
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009c14:	4b3d      	ldr	r3, [pc, #244]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c1c:	4a3b      	ldr	r2, [pc, #236]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009c22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c24:	4b39      	ldr	r3, [pc, #228]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	4936      	ldr	r1, [pc, #216]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	608b      	str	r3, [r1, #8]
 8009c36:	e008      	b.n	8009c4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2b80      	cmp	r3, #128	; 0x80
 8009c3c:	d105      	bne.n	8009c4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009c3e:	4b33      	ldr	r3, [pc, #204]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	4a32      	ldr	r2, [pc, #200]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009c44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c4a:	4b2f      	ldr	r3, [pc, #188]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d21d      	bcs.n	8009c94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c58:	4b2b      	ldr	r3, [pc, #172]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f023 020f 	bic.w	r2, r3, #15
 8009c60:	4929      	ldr	r1, [pc, #164]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009c68:	f7fb f8fa 	bl	8004e60 <HAL_GetTick>
 8009c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	e00a      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c70:	f7fb f8f6 	bl	8004e60 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e03b      	b.n	8009cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c86:	4b20      	ldr	r3, [pc, #128]	; (8009d08 <HAL_RCC_ClockConfig+0x260>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d1ed      	bne.n	8009c70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d008      	beq.n	8009cb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ca0:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	4917      	ldr	r1, [pc, #92]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	490f      	ldr	r1, [pc, #60]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009cd2:	f000 f825 	bl	8009d20 <HAL_RCC_GetSysClockFreq>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <HAL_RCC_ClockConfig+0x264>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	091b      	lsrs	r3, r3, #4
 8009cde:	f003 030f 	and.w	r3, r3, #15
 8009ce2:	490c      	ldr	r1, [pc, #48]	; (8009d14 <HAL_RCC_ClockConfig+0x26c>)
 8009ce4:	5ccb      	ldrb	r3, [r1, r3]
 8009ce6:	f003 031f 	and.w	r3, r3, #31
 8009cea:	fa22 f303 	lsr.w	r3, r2, r3
 8009cee:	4a0a      	ldr	r2, [pc, #40]	; (8009d18 <HAL_RCC_ClockConfig+0x270>)
 8009cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <HAL_RCC_ClockConfig+0x274>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fb f866 	bl	8004dc8 <HAL_InitTick>
 8009cfc:	4603      	mov	r3, r0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	40022000 	.word	0x40022000
 8009d0c:	40021000 	.word	0x40021000
 8009d10:	04c4b400 	.word	0x04c4b400
 8009d14:	080155ac 	.word	0x080155ac
 8009d18:	20000030 	.word	0x20000030
 8009d1c:	20000034 	.word	0x20000034

08009d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009d26:	4b2c      	ldr	r3, [pc, #176]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f003 030c 	and.w	r3, r3, #12
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d102      	bne.n	8009d38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009d32:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	e047      	b.n	8009dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009d38:	4b27      	ldr	r3, [pc, #156]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f003 030c 	and.w	r3, r3, #12
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d102      	bne.n	8009d4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009d44:	4b26      	ldr	r3, [pc, #152]	; (8009de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	e03e      	b.n	8009dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009d4a:	4b23      	ldr	r3, [pc, #140]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f003 030c 	and.w	r3, r3, #12
 8009d52:	2b0c      	cmp	r3, #12
 8009d54:	d136      	bne.n	8009dc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d56:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d60:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	091b      	lsrs	r3, r3, #4
 8009d66:	f003 030f 	and.w	r3, r3, #15
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d10c      	bne.n	8009d8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d74:	4a1a      	ldr	r2, [pc, #104]	; (8009de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7c:	4a16      	ldr	r2, [pc, #88]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d7e:	68d2      	ldr	r2, [r2, #12]
 8009d80:	0a12      	lsrs	r2, r2, #8
 8009d82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d86:	fb02 f303 	mul.w	r3, r2, r3
 8009d8a:	617b      	str	r3, [r7, #20]
      break;
 8009d8c:	e00c      	b.n	8009da8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d8e:	4a13      	ldr	r2, [pc, #76]	; (8009ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d96:	4a10      	ldr	r2, [pc, #64]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d98:	68d2      	ldr	r2, [r2, #12]
 8009d9a:	0a12      	lsrs	r2, r2, #8
 8009d9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009da0:	fb02 f303 	mul.w	r3, r2, r3
 8009da4:	617b      	str	r3, [r7, #20]
      break;
 8009da6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009da8:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	0e5b      	lsrs	r3, r3, #25
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	3301      	adds	r3, #1
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc0:	613b      	str	r3, [r7, #16]
 8009dc2:	e001      	b.n	8009dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009dc8:	693b      	ldr	r3, [r7, #16]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40021000 	.word	0x40021000
 8009ddc:	00f42400 	.word	0x00f42400
 8009de0:	016e3600 	.word	0x016e3600

08009de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009de8:	4b03      	ldr	r3, [pc, #12]	; (8009df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009dea:	681b      	ldr	r3, [r3, #0]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20000030 	.word	0x20000030

08009dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009e00:	f7ff fff0 	bl	8009de4 <HAL_RCC_GetHCLKFreq>
 8009e04:	4602      	mov	r2, r0
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	0a1b      	lsrs	r3, r3, #8
 8009e0c:	f003 0307 	and.w	r3, r3, #7
 8009e10:	4904      	ldr	r1, [pc, #16]	; (8009e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e12:	5ccb      	ldrb	r3, [r1, r3]
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	40021000 	.word	0x40021000
 8009e24:	080155bc 	.word	0x080155bc

08009e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009e2c:	f7ff ffda 	bl	8009de4 <HAL_RCC_GetHCLKFreq>
 8009e30:	4602      	mov	r2, r0
 8009e32:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	0adb      	lsrs	r3, r3, #11
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e3e:	5ccb      	ldrb	r3, [r1, r3]
 8009e40:	f003 031f 	and.w	r3, r3, #31
 8009e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	40021000 	.word	0x40021000
 8009e50:	080155bc 	.word	0x080155bc

08009e54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e64:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	091b      	lsrs	r3, r3, #4
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d10c      	bne.n	8009e92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e78:	4a17      	ldr	r2, [pc, #92]	; (8009ed8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e80:	4a14      	ldr	r2, [pc, #80]	; (8009ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e82:	68d2      	ldr	r2, [r2, #12]
 8009e84:	0a12      	lsrs	r2, r2, #8
 8009e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	617b      	str	r3, [r7, #20]
    break;
 8009e90:	e00c      	b.n	8009eac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e92:	4a12      	ldr	r2, [pc, #72]	; (8009edc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9a:	4a0e      	ldr	r2, [pc, #56]	; (8009ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e9c:	68d2      	ldr	r2, [r2, #12]
 8009e9e:	0a12      	lsrs	r2, r2, #8
 8009ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ea4:	fb02 f303 	mul.w	r3, r2, r3
 8009ea8:	617b      	str	r3, [r7, #20]
    break;
 8009eaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	0e5b      	lsrs	r3, r3, #25
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009ec6:	687b      	ldr	r3, [r7, #4]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	40021000 	.word	0x40021000
 8009ed8:	016e3600 	.word	0x016e3600
 8009edc:	00f42400 	.word	0x00f42400

08009ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ee8:	2300      	movs	r3, #0
 8009eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009eec:	2300      	movs	r3, #0
 8009eee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 8098 	beq.w	800a02e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009efe:	2300      	movs	r3, #0
 8009f00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f02:	4b43      	ldr	r3, [pc, #268]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10d      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f0e:	4b40      	ldr	r3, [pc, #256]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f12:	4a3f      	ldr	r2, [pc, #252]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f18:	6593      	str	r3, [r2, #88]	; 0x58
 8009f1a:	4b3d      	ldr	r3, [pc, #244]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f22:	60bb      	str	r3, [r7, #8]
 8009f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f26:	2301      	movs	r3, #1
 8009f28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f2a:	4b3a      	ldr	r3, [pc, #232]	; (800a014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a39      	ldr	r2, [pc, #228]	; (800a014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f36:	f7fa ff93 	bl	8004e60 <HAL_GetTick>
 8009f3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f3c:	e009      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f3e:	f7fa ff8f 	bl	8004e60 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d902      	bls.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	74fb      	strb	r3, [r7, #19]
        break;
 8009f50:	e005      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f52:	4b30      	ldr	r3, [pc, #192]	; (800a014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0ef      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009f5e:	7cfb      	ldrb	r3, [r7, #19]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d159      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009f64:	4b2a      	ldr	r3, [pc, #168]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d01e      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d019      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f80:	4b23      	ldr	r3, [pc, #140]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f8c:	4b20      	ldr	r3, [pc, #128]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f92:	4a1f      	ldr	r2, [pc, #124]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f9c:	4b1c      	ldr	r3, [pc, #112]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa2:	4a1b      	ldr	r2, [pc, #108]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009fac:	4a18      	ldr	r2, [pc, #96]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d016      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fbe:	f7fa ff4f 	bl	8004e60 <HAL_GetTick>
 8009fc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fc4:	e00b      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fc6:	f7fa ff4b 	bl	8004e60 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d902      	bls.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	74fb      	strb	r3, [r7, #19]
            break;
 8009fdc:	e006      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fde:	4b0c      	ldr	r3, [pc, #48]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0ec      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009fec:	7cfb      	ldrb	r3, [r7, #19]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10b      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a000:	4903      	ldr	r1, [pc, #12]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a002:	4313      	orrs	r3, r2
 800a004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a008:	e008      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a00a:	7cfb      	ldrb	r3, [r7, #19]
 800a00c:	74bb      	strb	r3, [r7, #18]
 800a00e:	e005      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a010:	40021000 	.word	0x40021000
 800a014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a018:	7cfb      	ldrb	r3, [r7, #19]
 800a01a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a01c:	7c7b      	ldrb	r3, [r7, #17]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d105      	bne.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a022:	4ba7      	ldr	r3, [pc, #668]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a026:	4aa6      	ldr	r2, [pc, #664]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a02c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a03a:	4ba1      	ldr	r3, [pc, #644]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	f023 0203 	bic.w	r2, r3, #3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	499d      	ldr	r1, [pc, #628]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a05c:	4b98      	ldr	r3, [pc, #608]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a062:	f023 020c 	bic.w	r2, r3, #12
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	4995      	ldr	r1, [pc, #596]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a07e:	4b90      	ldr	r3, [pc, #576]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a084:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	498c      	ldr	r1, [pc, #560]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00a      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a0a0:	4b87      	ldr	r3, [pc, #540]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	4984      	ldr	r1, [pc, #528]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a0c2:	4b7f      	ldr	r3, [pc, #508]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	497b      	ldr	r1, [pc, #492]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0e4:	4b76      	ldr	r3, [pc, #472]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	4973      	ldr	r1, [pc, #460]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a106:	4b6e      	ldr	r3, [pc, #440]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	69db      	ldr	r3, [r3, #28]
 800a114:	496a      	ldr	r1, [pc, #424]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a116:	4313      	orrs	r3, r2
 800a118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00a      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a128:	4b65      	ldr	r3, [pc, #404]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	4962      	ldr	r1, [pc, #392]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a14a:	4b5d      	ldr	r3, [pc, #372]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	4959      	ldr	r1, [pc, #356]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00a      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a16c:	4b54      	ldr	r3, [pc, #336]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a16e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a172:	f023 0203 	bic.w	r2, r3, #3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17a:	4951      	ldr	r1, [pc, #324]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a18e:	4b4c      	ldr	r3, [pc, #304]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	4948      	ldr	r1, [pc, #288]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d015      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1b0:	4b43      	ldr	r3, [pc, #268]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	4940      	ldr	r1, [pc, #256]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ce:	d105      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1d0:	4b3b      	ldr	r3, [pc, #236]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	4a3a      	ldr	r2, [pc, #232]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d015      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1e8:	4b35      	ldr	r3, [pc, #212]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f6:	4932      	ldr	r1, [pc, #200]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a206:	d105      	bne.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a208:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	4a2c      	ldr	r2, [pc, #176]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a20e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a212:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d015      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a220:	4b27      	ldr	r3, [pc, #156]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a226:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	4924      	ldr	r1, [pc, #144]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a230:	4313      	orrs	r3, r2
 800a232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a23e:	d105      	bne.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a240:	4b1f      	ldr	r3, [pc, #124]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	4a1e      	ldr	r2, [pc, #120]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a24a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d015      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a258:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a266:	4916      	ldr	r1, [pc, #88]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a276:	d105      	bne.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a278:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	4a10      	ldr	r2, [pc, #64]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a282:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d019      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	4908      	ldr	r1, [pc, #32]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2ae:	d109      	bne.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2b0:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	4a02      	ldr	r2, [pc, #8]	; (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ba:	60d3      	str	r3, [r2, #12]
 800a2bc:	e002      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a2be:	bf00      	nop
 800a2c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d015      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a2d0:	4b29      	ldr	r3, [pc, #164]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2de:	4926      	ldr	r1, [pc, #152]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2ee:	d105      	bne.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a2f0:	4b21      	ldr	r3, [pc, #132]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	4a20      	ldr	r2, [pc, #128]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a2f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d015      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a308:	4b1b      	ldr	r3, [pc, #108]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a316:	4918      	ldr	r1, [pc, #96]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a326:	d105      	bne.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a328:	4b13      	ldr	r3, [pc, #76]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4a12      	ldr	r2, [pc, #72]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a32e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a332:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d015      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a340:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34e:	490a      	ldr	r1, [pc, #40]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a350:	4313      	orrs	r3, r2
 800a352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a35e:	d105      	bne.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a360:	4b05      	ldr	r3, [pc, #20]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	4a04      	ldr	r2, [pc, #16]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a36a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a36c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40021000 	.word	0x40021000

0800a37c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e049      	b.n	800a422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d106      	bne.n	800a3a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7fa f896 	bl	80044d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f000 fde6 	bl	800af8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d001      	beq.n	800a444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e04c      	b.n	800a4de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a26      	ldr	r2, [pc, #152]	; (800a4ec <HAL_TIM_Base_Start+0xc0>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d022      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a45e:	d01d      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a22      	ldr	r2, [pc, #136]	; (800a4f0 <HAL_TIM_Base_Start+0xc4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d018      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a21      	ldr	r2, [pc, #132]	; (800a4f4 <HAL_TIM_Base_Start+0xc8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1f      	ldr	r2, [pc, #124]	; (800a4f8 <HAL_TIM_Base_Start+0xcc>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00e      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1e      	ldr	r2, [pc, #120]	; (800a4fc <HAL_TIM_Base_Start+0xd0>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d009      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <HAL_TIM_Base_Start+0xd4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d004      	beq.n	800a49c <HAL_TIM_Base_Start+0x70>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a1b      	ldr	r2, [pc, #108]	; (800a504 <HAL_TIM_Base_Start+0xd8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d115      	bne.n	800a4c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	4b19      	ldr	r3, [pc, #100]	; (800a508 <HAL_TIM_Base_Start+0xdc>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b06      	cmp	r3, #6
 800a4ac:	d015      	beq.n	800a4da <HAL_TIM_Base_Start+0xae>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b4:	d011      	beq.n	800a4da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f042 0201 	orr.w	r2, r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c6:	e008      	b.n	800a4da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0201 	orr.w	r2, r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	e000      	b.n	800a4dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	40012c00 	.word	0x40012c00
 800a4f0:	40000400 	.word	0x40000400
 800a4f4:	40000800 	.word	0x40000800
 800a4f8:	40000c00 	.word	0x40000c00
 800a4fc:	40013400 	.word	0x40013400
 800a500:	40014000 	.word	0x40014000
 800a504:	40015000 	.word	0x40015000
 800a508:	00010007 	.word	0x00010007

0800a50c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d001      	beq.n	800a524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e054      	b.n	800a5ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0201 	orr.w	r2, r2, #1
 800a53a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a26      	ldr	r2, [pc, #152]	; (800a5dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d022      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a54e:	d01d      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a22      	ldr	r2, [pc, #136]	; (800a5e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d018      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a21      	ldr	r2, [pc, #132]	; (800a5e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d013      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a1f      	ldr	r2, [pc, #124]	; (800a5e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d00e      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a1e      	ldr	r2, [pc, #120]	; (800a5ec <HAL_TIM_Base_Start_IT+0xe0>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d009      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a1c      	ldr	r2, [pc, #112]	; (800a5f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d004      	beq.n	800a58c <HAL_TIM_Base_Start_IT+0x80>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a1b      	ldr	r2, [pc, #108]	; (800a5f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d115      	bne.n	800a5b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689a      	ldr	r2, [r3, #8]
 800a592:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <HAL_TIM_Base_Start_IT+0xec>)
 800a594:	4013      	ands	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b06      	cmp	r3, #6
 800a59c:	d015      	beq.n	800a5ca <HAL_TIM_Base_Start_IT+0xbe>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5a4:	d011      	beq.n	800a5ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f042 0201 	orr.w	r2, r2, #1
 800a5b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b6:	e008      	b.n	800a5ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0201 	orr.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	e000      	b.n	800a5cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	40012c00 	.word	0x40012c00
 800a5e0:	40000400 	.word	0x40000400
 800a5e4:	40000800 	.word	0x40000800
 800a5e8:	40000c00 	.word	0x40000c00
 800a5ec:	40013400 	.word	0x40013400
 800a5f0:	40014000 	.word	0x40014000
 800a5f4:	40015000 	.word	0x40015000
 800a5f8:	00010007 	.word	0x00010007

0800a5fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0201 	bic.w	r2, r2, #1
 800a612:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6a1a      	ldr	r2, [r3, #32]
 800a61a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10f      	bne.n	800a644 <HAL_TIM_Base_Stop_IT+0x48>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6a1a      	ldr	r2, [r3, #32]
 800a62a:	f244 4344 	movw	r3, #17476	; 0x4444
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d107      	bne.n	800a644 <HAL_TIM_Base_Stop_IT+0x48>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 0201 	bic.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b082      	sub	sp, #8
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e049      	b.n	800a700 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f841 	bl	800a708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f000 fc77 	bl	800af8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <HAL_TIM_PWM_Start+0x24>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b01      	cmp	r3, #1
 800a736:	bf14      	ite	ne
 800a738:	2301      	movne	r3, #1
 800a73a:	2300      	moveq	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	e03c      	b.n	800a7ba <HAL_TIM_PWM_Start+0x9e>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b04      	cmp	r3, #4
 800a744:	d109      	bne.n	800a75a <HAL_TIM_PWM_Start+0x3e>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b01      	cmp	r3, #1
 800a750:	bf14      	ite	ne
 800a752:	2301      	movne	r3, #1
 800a754:	2300      	moveq	r3, #0
 800a756:	b2db      	uxtb	r3, r3
 800a758:	e02f      	b.n	800a7ba <HAL_TIM_PWM_Start+0x9e>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d109      	bne.n	800a774 <HAL_TIM_PWM_Start+0x58>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b01      	cmp	r3, #1
 800a76a:	bf14      	ite	ne
 800a76c:	2301      	movne	r3, #1
 800a76e:	2300      	moveq	r3, #0
 800a770:	b2db      	uxtb	r3, r3
 800a772:	e022      	b.n	800a7ba <HAL_TIM_PWM_Start+0x9e>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	2b0c      	cmp	r3, #12
 800a778:	d109      	bne.n	800a78e <HAL_TIM_PWM_Start+0x72>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b01      	cmp	r3, #1
 800a784:	bf14      	ite	ne
 800a786:	2301      	movne	r3, #1
 800a788:	2300      	moveq	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	e015      	b.n	800a7ba <HAL_TIM_PWM_Start+0x9e>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b10      	cmp	r3, #16
 800a792:	d109      	bne.n	800a7a8 <HAL_TIM_PWM_Start+0x8c>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	bf14      	ite	ne
 800a7a0:	2301      	movne	r3, #1
 800a7a2:	2300      	moveq	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	e008      	b.n	800a7ba <HAL_TIM_PWM_Start+0x9e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	bf14      	ite	ne
 800a7b4:	2301      	movne	r3, #1
 800a7b6:	2300      	moveq	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e0a6      	b.n	800a910 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <HAL_TIM_PWM_Start+0xb6>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7d0:	e023      	b.n	800a81a <HAL_TIM_PWM_Start+0xfe>
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d104      	bne.n	800a7e2 <HAL_TIM_PWM_Start+0xc6>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e0:	e01b      	b.n	800a81a <HAL_TIM_PWM_Start+0xfe>
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b08      	cmp	r3, #8
 800a7e6:	d104      	bne.n	800a7f2 <HAL_TIM_PWM_Start+0xd6>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7f0:	e013      	b.n	800a81a <HAL_TIM_PWM_Start+0xfe>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b0c      	cmp	r3, #12
 800a7f6:	d104      	bne.n	800a802 <HAL_TIM_PWM_Start+0xe6>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a800:	e00b      	b.n	800a81a <HAL_TIM_PWM_Start+0xfe>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b10      	cmp	r3, #16
 800a806:	d104      	bne.n	800a812 <HAL_TIM_PWM_Start+0xf6>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a810:	e003      	b.n	800a81a <HAL_TIM_PWM_Start+0xfe>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2202      	movs	r2, #2
 800a816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2201      	movs	r2, #1
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f001 f8e3 	bl	800b9ee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a3a      	ldr	r2, [pc, #232]	; (800a918 <HAL_TIM_PWM_Start+0x1fc>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d018      	beq.n	800a864 <HAL_TIM_PWM_Start+0x148>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a39      	ldr	r2, [pc, #228]	; (800a91c <HAL_TIM_PWM_Start+0x200>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d013      	beq.n	800a864 <HAL_TIM_PWM_Start+0x148>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a37      	ldr	r2, [pc, #220]	; (800a920 <HAL_TIM_PWM_Start+0x204>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00e      	beq.n	800a864 <HAL_TIM_PWM_Start+0x148>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a36      	ldr	r2, [pc, #216]	; (800a924 <HAL_TIM_PWM_Start+0x208>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d009      	beq.n	800a864 <HAL_TIM_PWM_Start+0x148>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a34      	ldr	r2, [pc, #208]	; (800a928 <HAL_TIM_PWM_Start+0x20c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d004      	beq.n	800a864 <HAL_TIM_PWM_Start+0x148>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a33      	ldr	r2, [pc, #204]	; (800a92c <HAL_TIM_PWM_Start+0x210>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d101      	bne.n	800a868 <HAL_TIM_PWM_Start+0x14c>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <HAL_TIM_PWM_Start+0x14e>
 800a868:	2300      	movs	r3, #0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a87c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a25      	ldr	r2, [pc, #148]	; (800a918 <HAL_TIM_PWM_Start+0x1fc>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d022      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a890:	d01d      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a26      	ldr	r2, [pc, #152]	; (800a930 <HAL_TIM_PWM_Start+0x214>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d018      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a24      	ldr	r2, [pc, #144]	; (800a934 <HAL_TIM_PWM_Start+0x218>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d013      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a23      	ldr	r2, [pc, #140]	; (800a938 <HAL_TIM_PWM_Start+0x21c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d00e      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a19      	ldr	r2, [pc, #100]	; (800a91c <HAL_TIM_PWM_Start+0x200>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d009      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a18      	ldr	r2, [pc, #96]	; (800a920 <HAL_TIM_PWM_Start+0x204>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d004      	beq.n	800a8ce <HAL_TIM_PWM_Start+0x1b2>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a18      	ldr	r2, [pc, #96]	; (800a92c <HAL_TIM_PWM_Start+0x210>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d115      	bne.n	800a8fa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	4b19      	ldr	r3, [pc, #100]	; (800a93c <HAL_TIM_PWM_Start+0x220>)
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b06      	cmp	r3, #6
 800a8de:	d015      	beq.n	800a90c <HAL_TIM_PWM_Start+0x1f0>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e6:	d011      	beq.n	800a90c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f8:	e008      	b.n	800a90c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0201 	orr.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e000      	b.n	800a90e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40012c00 	.word	0x40012c00
 800a91c:	40013400 	.word	0x40013400
 800a920:	40014000 	.word	0x40014000
 800a924:	40014400 	.word	0x40014400
 800a928:	40014800 	.word	0x40014800
 800a92c:	40015000 	.word	0x40015000
 800a930:	40000400 	.word	0x40000400
 800a934:	40000800 	.word	0x40000800
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	00010007 	.word	0x00010007

0800a940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	2b02      	cmp	r3, #2
 800a954:	d122      	bne.n	800a99c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b02      	cmp	r3, #2
 800a962:	d11b      	bne.n	800a99c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0202 	mvn.w	r2, #2
 800a96c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fae3 	bl	800af4e <HAL_TIM_IC_CaptureCallback>
 800a988:	e005      	b.n	800a996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fad5 	bl	800af3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fae6 	bl	800af62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d122      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d11b      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0204 	mvn.w	r2, #4
 800a9c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fab9 	bl	800af4e <HAL_TIM_IC_CaptureCallback>
 800a9dc:	e005      	b.n	800a9ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 faab 	bl	800af3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fabc 	bl	800af62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f003 0308 	and.w	r3, r3, #8
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d122      	bne.n	800aa44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f003 0308 	and.w	r3, r3, #8
 800aa08:	2b08      	cmp	r3, #8
 800aa0a:	d11b      	bne.n	800aa44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f06f 0208 	mvn.w	r2, #8
 800aa14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2204      	movs	r2, #4
 800aa1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa8f 	bl	800af4e <HAL_TIM_IC_CaptureCallback>
 800aa30:	e005      	b.n	800aa3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa81 	bl	800af3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fa92 	bl	800af62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	f003 0310 	and.w	r3, r3, #16
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d122      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f003 0310 	and.w	r3, r3, #16
 800aa5c:	2b10      	cmp	r3, #16
 800aa5e:	d11b      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f06f 0210 	mvn.w	r2, #16
 800aa68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2208      	movs	r2, #8
 800aa6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa65 	bl	800af4e <HAL_TIM_IC_CaptureCallback>
 800aa84:	e005      	b.n	800aa92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fa57 	bl	800af3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa68 	bl	800af62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d10e      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d107      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0201 	mvn.w	r2, #1
 800aabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7f8 fb82 	bl	80031c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aace:	2b80      	cmp	r3, #128	; 0x80
 800aad0:	d10e      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aadc:	2b80      	cmp	r3, #128	; 0x80
 800aade:	d107      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f001 fada 	bl	800c0a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aafe:	d10e      	bne.n	800ab1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0a:	2b80      	cmp	r3, #128	; 0x80
 800ab0c:	d107      	bne.n	800ab1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 facd 	bl	800c0b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d10e      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab36:	2b40      	cmp	r3, #64	; 0x40
 800ab38:	d107      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa16 	bl	800af76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f003 0320 	and.w	r3, r3, #32
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	d10e      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f003 0320 	and.w	r3, r3, #32
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d107      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f06f 0220 	mvn.w	r2, #32
 800ab6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 fa8d 	bl	800c090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab84:	d10f      	bne.n	800aba6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab94:	d107      	bne.n	800aba6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ab9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 fa93 	bl	800c0cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abb4:	d10f      	bne.n	800abd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abc4:	d107      	bne.n	800abd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800abce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 fa85 	bl	800c0e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abe4:	d10f      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abf4:	d107      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800abfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 fa77 	bl	800c0f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac14:	d10f      	bne.n	800ac36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac24:	d107      	bne.n	800ac36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ac2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 fa69 	bl	800c108 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
	...

0800ac40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d101      	bne.n	800ac5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	e0ff      	b.n	800ae5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b14      	cmp	r3, #20
 800ac6a:	f200 80f0 	bhi.w	800ae4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac6e:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800acc9 	.word	0x0800acc9
 800ac78:	0800ae4f 	.word	0x0800ae4f
 800ac7c:	0800ae4f 	.word	0x0800ae4f
 800ac80:	0800ae4f 	.word	0x0800ae4f
 800ac84:	0800ad09 	.word	0x0800ad09
 800ac88:	0800ae4f 	.word	0x0800ae4f
 800ac8c:	0800ae4f 	.word	0x0800ae4f
 800ac90:	0800ae4f 	.word	0x0800ae4f
 800ac94:	0800ad4b 	.word	0x0800ad4b
 800ac98:	0800ae4f 	.word	0x0800ae4f
 800ac9c:	0800ae4f 	.word	0x0800ae4f
 800aca0:	0800ae4f 	.word	0x0800ae4f
 800aca4:	0800ad8b 	.word	0x0800ad8b
 800aca8:	0800ae4f 	.word	0x0800ae4f
 800acac:	0800ae4f 	.word	0x0800ae4f
 800acb0:	0800ae4f 	.word	0x0800ae4f
 800acb4:	0800adcd 	.word	0x0800adcd
 800acb8:	0800ae4f 	.word	0x0800ae4f
 800acbc:	0800ae4f 	.word	0x0800ae4f
 800acc0:	0800ae4f 	.word	0x0800ae4f
 800acc4:	0800ae0d 	.word	0x0800ae0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68b9      	ldr	r1, [r7, #8]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 fa04 	bl	800b0dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	699a      	ldr	r2, [r3, #24]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0208 	orr.w	r2, r2, #8
 800ace2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699a      	ldr	r2, [r3, #24]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0204 	bic.w	r2, r2, #4
 800acf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6999      	ldr	r1, [r3, #24]
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	691a      	ldr	r2, [r3, #16]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	619a      	str	r2, [r3, #24]
      break;
 800ad06:	e0a5      	b.n	800ae54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fa7e 	bl	800b210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699a      	ldr	r2, [r3, #24]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	699a      	ldr	r2, [r3, #24]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6999      	ldr	r1, [r3, #24]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	021a      	lsls	r2, r3, #8
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	430a      	orrs	r2, r1
 800ad46:	619a      	str	r2, [r3, #24]
      break;
 800ad48:	e084      	b.n	800ae54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 faf1 	bl	800b338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	69da      	ldr	r2, [r3, #28]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f042 0208 	orr.w	r2, r2, #8
 800ad64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	69da      	ldr	r2, [r3, #28]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0204 	bic.w	r2, r2, #4
 800ad74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	69d9      	ldr	r1, [r3, #28]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	61da      	str	r2, [r3, #28]
      break;
 800ad88:	e064      	b.n	800ae54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 fb63 	bl	800b45c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69da      	ldr	r2, [r3, #28]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ada4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	69da      	ldr	r2, [r3, #28]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	69d9      	ldr	r1, [r3, #28]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	021a      	lsls	r2, r3, #8
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	430a      	orrs	r2, r1
 800adc8:	61da      	str	r2, [r3, #28]
      break;
 800adca:	e043      	b.n	800ae54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fbd6 	bl	800b584 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0208 	orr.w	r2, r2, #8
 800ade6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f022 0204 	bic.w	r2, r2, #4
 800adf6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	691a      	ldr	r2, [r3, #16]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ae0a:	e023      	b.n	800ae54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 fc20 	bl	800b658 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	021a      	lsls	r2, r3, #8
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ae4c:	e002      	b.n	800ae54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	75fb      	strb	r3, [r7, #23]
      break;
 800ae52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop

0800ae68 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d101      	bne.n	800ae80 <HAL_TIM_GenerateEvent+0x18>
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	e014      	b.n	800aeaa <HAL_TIM_GenerateEvent+0x42>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d101      	bne.n	800aece <HAL_TIM_SlaveConfigSynchro+0x18>
 800aeca:	2302      	movs	r3, #2
 800aecc:	e031      	b.n	800af32 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2202      	movs	r2, #2
 800aeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fc25 	bl	800b730 <TIM_SlaveTimer_SetConfig>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d009      	beq.n	800af00 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e018      	b.n	800af32 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68da      	ldr	r2, [r3, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af0e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68da      	ldr	r2, [r3, #12]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af1e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af6a:	bf00      	nop
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a46      	ldr	r2, [pc, #280]	; (800b0b8 <TIM_Base_SetConfig+0x12c>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d017      	beq.n	800afd4 <TIM_Base_SetConfig+0x48>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afaa:	d013      	beq.n	800afd4 <TIM_Base_SetConfig+0x48>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a43      	ldr	r2, [pc, #268]	; (800b0bc <TIM_Base_SetConfig+0x130>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d00f      	beq.n	800afd4 <TIM_Base_SetConfig+0x48>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a42      	ldr	r2, [pc, #264]	; (800b0c0 <TIM_Base_SetConfig+0x134>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d00b      	beq.n	800afd4 <TIM_Base_SetConfig+0x48>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a41      	ldr	r2, [pc, #260]	; (800b0c4 <TIM_Base_SetConfig+0x138>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d007      	beq.n	800afd4 <TIM_Base_SetConfig+0x48>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a40      	ldr	r2, [pc, #256]	; (800b0c8 <TIM_Base_SetConfig+0x13c>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d003      	beq.n	800afd4 <TIM_Base_SetConfig+0x48>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a3f      	ldr	r2, [pc, #252]	; (800b0cc <TIM_Base_SetConfig+0x140>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d108      	bne.n	800afe6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a33      	ldr	r2, [pc, #204]	; (800b0b8 <TIM_Base_SetConfig+0x12c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d023      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff4:	d01f      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a30      	ldr	r2, [pc, #192]	; (800b0bc <TIM_Base_SetConfig+0x130>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d01b      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a2f      	ldr	r2, [pc, #188]	; (800b0c0 <TIM_Base_SetConfig+0x134>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d017      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a2e      	ldr	r2, [pc, #184]	; (800b0c4 <TIM_Base_SetConfig+0x138>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d013      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a2d      	ldr	r2, [pc, #180]	; (800b0c8 <TIM_Base_SetConfig+0x13c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d00f      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a2d      	ldr	r2, [pc, #180]	; (800b0d0 <TIM_Base_SetConfig+0x144>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d00b      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a2c      	ldr	r2, [pc, #176]	; (800b0d4 <TIM_Base_SetConfig+0x148>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d007      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a2b      	ldr	r2, [pc, #172]	; (800b0d8 <TIM_Base_SetConfig+0x14c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d003      	beq.n	800b036 <TIM_Base_SetConfig+0xaa>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a26      	ldr	r2, [pc, #152]	; (800b0cc <TIM_Base_SetConfig+0x140>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d108      	bne.n	800b048 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b03c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a12      	ldr	r2, [pc, #72]	; (800b0b8 <TIM_Base_SetConfig+0x12c>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d013      	beq.n	800b09c <TIM_Base_SetConfig+0x110>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a14      	ldr	r2, [pc, #80]	; (800b0c8 <TIM_Base_SetConfig+0x13c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00f      	beq.n	800b09c <TIM_Base_SetConfig+0x110>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a14      	ldr	r2, [pc, #80]	; (800b0d0 <TIM_Base_SetConfig+0x144>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00b      	beq.n	800b09c <TIM_Base_SetConfig+0x110>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a13      	ldr	r2, [pc, #76]	; (800b0d4 <TIM_Base_SetConfig+0x148>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d007      	beq.n	800b09c <TIM_Base_SetConfig+0x110>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a12      	ldr	r2, [pc, #72]	; (800b0d8 <TIM_Base_SetConfig+0x14c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d003      	beq.n	800b09c <TIM_Base_SetConfig+0x110>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a0d      	ldr	r2, [pc, #52]	; (800b0cc <TIM_Base_SetConfig+0x140>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d103      	bne.n	800b0a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	615a      	str	r2, [r3, #20]
}
 800b0aa:	bf00      	nop
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	40012c00 	.word	0x40012c00
 800b0bc:	40000400 	.word	0x40000400
 800b0c0:	40000800 	.word	0x40000800
 800b0c4:	40000c00 	.word	0x40000c00
 800b0c8:	40013400 	.word	0x40013400
 800b0cc:	40015000 	.word	0x40015000
 800b0d0:	40014000 	.word	0x40014000
 800b0d4:	40014400 	.word	0x40014400
 800b0d8:	40014800 	.word	0x40014800

0800b0dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	f023 0201 	bic.w	r2, r3, #1
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f023 0303 	bic.w	r3, r3, #3
 800b116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f023 0302 	bic.w	r3, r3, #2
 800b128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a30      	ldr	r2, [pc, #192]	; (800b1f8 <TIM_OC1_SetConfig+0x11c>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d013      	beq.n	800b164 <TIM_OC1_SetConfig+0x88>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a2f      	ldr	r2, [pc, #188]	; (800b1fc <TIM_OC1_SetConfig+0x120>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d00f      	beq.n	800b164 <TIM_OC1_SetConfig+0x88>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a2e      	ldr	r2, [pc, #184]	; (800b200 <TIM_OC1_SetConfig+0x124>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00b      	beq.n	800b164 <TIM_OC1_SetConfig+0x88>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a2d      	ldr	r2, [pc, #180]	; (800b204 <TIM_OC1_SetConfig+0x128>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d007      	beq.n	800b164 <TIM_OC1_SetConfig+0x88>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a2c      	ldr	r2, [pc, #176]	; (800b208 <TIM_OC1_SetConfig+0x12c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d003      	beq.n	800b164 <TIM_OC1_SetConfig+0x88>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a2b      	ldr	r2, [pc, #172]	; (800b20c <TIM_OC1_SetConfig+0x130>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d10c      	bne.n	800b17e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	f023 0308 	bic.w	r3, r3, #8
 800b16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	4313      	orrs	r3, r2
 800b174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f023 0304 	bic.w	r3, r3, #4
 800b17c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a1d      	ldr	r2, [pc, #116]	; (800b1f8 <TIM_OC1_SetConfig+0x11c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d013      	beq.n	800b1ae <TIM_OC1_SetConfig+0xd2>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a1c      	ldr	r2, [pc, #112]	; (800b1fc <TIM_OC1_SetConfig+0x120>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d00f      	beq.n	800b1ae <TIM_OC1_SetConfig+0xd2>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a1b      	ldr	r2, [pc, #108]	; (800b200 <TIM_OC1_SetConfig+0x124>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d00b      	beq.n	800b1ae <TIM_OC1_SetConfig+0xd2>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a1a      	ldr	r2, [pc, #104]	; (800b204 <TIM_OC1_SetConfig+0x128>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d007      	beq.n	800b1ae <TIM_OC1_SetConfig+0xd2>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a19      	ldr	r2, [pc, #100]	; (800b208 <TIM_OC1_SetConfig+0x12c>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d003      	beq.n	800b1ae <TIM_OC1_SetConfig+0xd2>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a18      	ldr	r2, [pc, #96]	; (800b20c <TIM_OC1_SetConfig+0x130>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d111      	bne.n	800b1d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	621a      	str	r2, [r3, #32]
}
 800b1ec:	bf00      	nop
 800b1ee:	371c      	adds	r7, #28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	40012c00 	.word	0x40012c00
 800b1fc:	40013400 	.word	0x40013400
 800b200:	40014000 	.word	0x40014000
 800b204:	40014400 	.word	0x40014400
 800b208:	40014800 	.word	0x40014800
 800b20c:	40015000 	.word	0x40015000

0800b210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	f023 0210 	bic.w	r2, r3, #16
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b23e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f023 0320 	bic.w	r3, r3, #32
 800b25e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	011b      	lsls	r3, r3, #4
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4313      	orrs	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a2c      	ldr	r2, [pc, #176]	; (800b320 <TIM_OC2_SetConfig+0x110>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d007      	beq.n	800b284 <TIM_OC2_SetConfig+0x74>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a2b      	ldr	r2, [pc, #172]	; (800b324 <TIM_OC2_SetConfig+0x114>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d003      	beq.n	800b284 <TIM_OC2_SetConfig+0x74>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a2a      	ldr	r2, [pc, #168]	; (800b328 <TIM_OC2_SetConfig+0x118>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d10d      	bne.n	800b2a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	4313      	orrs	r3, r2
 800b296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b29e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a1f      	ldr	r2, [pc, #124]	; (800b320 <TIM_OC2_SetConfig+0x110>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d013      	beq.n	800b2d0 <TIM_OC2_SetConfig+0xc0>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a1e      	ldr	r2, [pc, #120]	; (800b324 <TIM_OC2_SetConfig+0x114>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d00f      	beq.n	800b2d0 <TIM_OC2_SetConfig+0xc0>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a1e      	ldr	r2, [pc, #120]	; (800b32c <TIM_OC2_SetConfig+0x11c>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d00b      	beq.n	800b2d0 <TIM_OC2_SetConfig+0xc0>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a1d      	ldr	r2, [pc, #116]	; (800b330 <TIM_OC2_SetConfig+0x120>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d007      	beq.n	800b2d0 <TIM_OC2_SetConfig+0xc0>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a1c      	ldr	r2, [pc, #112]	; (800b334 <TIM_OC2_SetConfig+0x124>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d003      	beq.n	800b2d0 <TIM_OC2_SetConfig+0xc0>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <TIM_OC2_SetConfig+0x118>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d113      	bne.n	800b2f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	621a      	str	r2, [r3, #32]
}
 800b312:	bf00      	nop
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	40012c00 	.word	0x40012c00
 800b324:	40013400 	.word	0x40013400
 800b328:	40015000 	.word	0x40015000
 800b32c:	40014000 	.word	0x40014000
 800b330:	40014400 	.word	0x40014400
 800b334:	40014800 	.word	0x40014800

0800b338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b338:	b480      	push	{r7}
 800b33a:	b087      	sub	sp, #28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	021b      	lsls	r3, r3, #8
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a2b      	ldr	r2, [pc, #172]	; (800b444 <TIM_OC3_SetConfig+0x10c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d007      	beq.n	800b3aa <TIM_OC3_SetConfig+0x72>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a2a      	ldr	r2, [pc, #168]	; (800b448 <TIM_OC3_SetConfig+0x110>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d003      	beq.n	800b3aa <TIM_OC3_SetConfig+0x72>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a29      	ldr	r2, [pc, #164]	; (800b44c <TIM_OC3_SetConfig+0x114>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d10d      	bne.n	800b3c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	021b      	lsls	r3, r3, #8
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a1e      	ldr	r2, [pc, #120]	; (800b444 <TIM_OC3_SetConfig+0x10c>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d013      	beq.n	800b3f6 <TIM_OC3_SetConfig+0xbe>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a1d      	ldr	r2, [pc, #116]	; (800b448 <TIM_OC3_SetConfig+0x110>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d00f      	beq.n	800b3f6 <TIM_OC3_SetConfig+0xbe>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a1d      	ldr	r2, [pc, #116]	; (800b450 <TIM_OC3_SetConfig+0x118>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d00b      	beq.n	800b3f6 <TIM_OC3_SetConfig+0xbe>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a1c      	ldr	r2, [pc, #112]	; (800b454 <TIM_OC3_SetConfig+0x11c>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d007      	beq.n	800b3f6 <TIM_OC3_SetConfig+0xbe>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a1b      	ldr	r2, [pc, #108]	; (800b458 <TIM_OC3_SetConfig+0x120>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d003      	beq.n	800b3f6 <TIM_OC3_SetConfig+0xbe>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a16      	ldr	r2, [pc, #88]	; (800b44c <TIM_OC3_SetConfig+0x114>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d113      	bne.n	800b41e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4313      	orrs	r3, r2
 800b410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	621a      	str	r2, [r3, #32]
}
 800b438:	bf00      	nop
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	40012c00 	.word	0x40012c00
 800b448:	40013400 	.word	0x40013400
 800b44c:	40015000 	.word	0x40015000
 800b450:	40014000 	.word	0x40014000
 800b454:	40014400 	.word	0x40014400
 800b458:	40014800 	.word	0x40014800

0800b45c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	69db      	ldr	r3, [r3, #28]
 800b482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b48a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b48e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	031b      	lsls	r3, r3, #12
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a2c      	ldr	r2, [pc, #176]	; (800b56c <TIM_OC4_SetConfig+0x110>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d007      	beq.n	800b4d0 <TIM_OC4_SetConfig+0x74>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a2b      	ldr	r2, [pc, #172]	; (800b570 <TIM_OC4_SetConfig+0x114>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d003      	beq.n	800b4d0 <TIM_OC4_SetConfig+0x74>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a2a      	ldr	r2, [pc, #168]	; (800b574 <TIM_OC4_SetConfig+0x118>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10d      	bne.n	800b4ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	031b      	lsls	r3, r3, #12
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a1f      	ldr	r2, [pc, #124]	; (800b56c <TIM_OC4_SetConfig+0x110>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d013      	beq.n	800b51c <TIM_OC4_SetConfig+0xc0>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a1e      	ldr	r2, [pc, #120]	; (800b570 <TIM_OC4_SetConfig+0x114>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d00f      	beq.n	800b51c <TIM_OC4_SetConfig+0xc0>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <TIM_OC4_SetConfig+0x11c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00b      	beq.n	800b51c <TIM_OC4_SetConfig+0xc0>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a1d      	ldr	r2, [pc, #116]	; (800b57c <TIM_OC4_SetConfig+0x120>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d007      	beq.n	800b51c <TIM_OC4_SetConfig+0xc0>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a1c      	ldr	r2, [pc, #112]	; (800b580 <TIM_OC4_SetConfig+0x124>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d003      	beq.n	800b51c <TIM_OC4_SetConfig+0xc0>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a17      	ldr	r2, [pc, #92]	; (800b574 <TIM_OC4_SetConfig+0x118>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d113      	bne.n	800b544 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b522:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b52a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	019b      	lsls	r3, r3, #6
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	4313      	orrs	r3, r2
 800b536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	019b      	lsls	r3, r3, #6
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	4313      	orrs	r3, r2
 800b542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	621a      	str	r2, [r3, #32]
}
 800b55e:	bf00      	nop
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	40012c00 	.word	0x40012c00
 800b570:	40013400 	.word	0x40013400
 800b574:	40015000 	.word	0x40015000
 800b578:	40014000 	.word	0x40014000
 800b57c:	40014400 	.word	0x40014400
 800b580:	40014800 	.word	0x40014800

0800b584 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	041b      	lsls	r3, r3, #16
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a19      	ldr	r2, [pc, #100]	; (800b640 <TIM_OC5_SetConfig+0xbc>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d013      	beq.n	800b606 <TIM_OC5_SetConfig+0x82>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a18      	ldr	r2, [pc, #96]	; (800b644 <TIM_OC5_SetConfig+0xc0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d00f      	beq.n	800b606 <TIM_OC5_SetConfig+0x82>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a17      	ldr	r2, [pc, #92]	; (800b648 <TIM_OC5_SetConfig+0xc4>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00b      	beq.n	800b606 <TIM_OC5_SetConfig+0x82>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a16      	ldr	r2, [pc, #88]	; (800b64c <TIM_OC5_SetConfig+0xc8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d007      	beq.n	800b606 <TIM_OC5_SetConfig+0x82>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a15      	ldr	r2, [pc, #84]	; (800b650 <TIM_OC5_SetConfig+0xcc>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d003      	beq.n	800b606 <TIM_OC5_SetConfig+0x82>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a14      	ldr	r2, [pc, #80]	; (800b654 <TIM_OC5_SetConfig+0xd0>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d109      	bne.n	800b61a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b60c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	621a      	str	r2, [r3, #32]
}
 800b634:	bf00      	nop
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	40012c00 	.word	0x40012c00
 800b644:	40013400 	.word	0x40013400
 800b648:	40014000 	.word	0x40014000
 800b64c:	40014400 	.word	0x40014400
 800b650:	40014800 	.word	0x40014800
 800b654:	40015000 	.word	0x40015000

0800b658 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	021b      	lsls	r3, r3, #8
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b69e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	051b      	lsls	r3, r3, #20
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a1a      	ldr	r2, [pc, #104]	; (800b718 <TIM_OC6_SetConfig+0xc0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d013      	beq.n	800b6dc <TIM_OC6_SetConfig+0x84>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a19      	ldr	r2, [pc, #100]	; (800b71c <TIM_OC6_SetConfig+0xc4>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d00f      	beq.n	800b6dc <TIM_OC6_SetConfig+0x84>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a18      	ldr	r2, [pc, #96]	; (800b720 <TIM_OC6_SetConfig+0xc8>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00b      	beq.n	800b6dc <TIM_OC6_SetConfig+0x84>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a17      	ldr	r2, [pc, #92]	; (800b724 <TIM_OC6_SetConfig+0xcc>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d007      	beq.n	800b6dc <TIM_OC6_SetConfig+0x84>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a16      	ldr	r2, [pc, #88]	; (800b728 <TIM_OC6_SetConfig+0xd0>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d003      	beq.n	800b6dc <TIM_OC6_SetConfig+0x84>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a15      	ldr	r2, [pc, #84]	; (800b72c <TIM_OC6_SetConfig+0xd4>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d109      	bne.n	800b6f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	029b      	lsls	r3, r3, #10
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	621a      	str	r2, [r3, #32]
}
 800b70a:	bf00      	nop
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	40012c00 	.word	0x40012c00
 800b71c:	40013400 	.word	0x40013400
 800b720:	40014000 	.word	0x40014000
 800b724:	40014400 	.word	0x40014400
 800b728:	40014800 	.word	0x40014800
 800b72c:	40015000 	.word	0x40015000

0800b730 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b74c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b750:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	4313      	orrs	r3, r2
 800b75a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b762:	f023 0307 	bic.w	r3, r3, #7
 800b766:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	4313      	orrs	r3, r2
 800b770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	4a56      	ldr	r2, [pc, #344]	; (800b8d8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b780:	4293      	cmp	r3, r2
 800b782:	f000 80a2 	beq.w	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b786:	4a54      	ldr	r2, [pc, #336]	; (800b8d8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	f200 809b 	bhi.w	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b78e:	4a53      	ldr	r2, [pc, #332]	; (800b8dc <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b790:	4293      	cmp	r3, r2
 800b792:	f000 809a 	beq.w	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b796:	4a51      	ldr	r2, [pc, #324]	; (800b8dc <TIM_SlaveTimer_SetConfig+0x1ac>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	f200 8093 	bhi.w	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b79e:	4a50      	ldr	r2, [pc, #320]	; (800b8e0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	f000 8092 	beq.w	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b7a6:	4a4e      	ldr	r2, [pc, #312]	; (800b8e0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	f200 808b 	bhi.w	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7ae:	4a4d      	ldr	r2, [pc, #308]	; (800b8e4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	f000 808a 	beq.w	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b7b6:	4a4b      	ldr	r2, [pc, #300]	; (800b8e4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	f200 8083 	bhi.w	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7be:	4a4a      	ldr	r2, [pc, #296]	; (800b8e8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	f000 8082 	beq.w	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b7c6:	4a48      	ldr	r2, [pc, #288]	; (800b8e8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d87b      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7cc:	4a47      	ldr	r2, [pc, #284]	; (800b8ec <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d07b      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b7d2:	4a46      	ldr	r2, [pc, #280]	; (800b8ec <TIM_SlaveTimer_SetConfig+0x1bc>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d875      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b7dc:	d075      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b7de:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b7e2:	d86f      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7e8:	d06f      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ee:	d869      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7f0:	2b70      	cmp	r3, #112	; 0x70
 800b7f2:	d01a      	beq.n	800b82a <TIM_SlaveTimer_SetConfig+0xfa>
 800b7f4:	2b70      	cmp	r3, #112	; 0x70
 800b7f6:	d865      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b7f8:	2b60      	cmp	r3, #96	; 0x60
 800b7fa:	d059      	beq.n	800b8b0 <TIM_SlaveTimer_SetConfig+0x180>
 800b7fc:	2b60      	cmp	r3, #96	; 0x60
 800b7fe:	d861      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b800:	2b50      	cmp	r3, #80	; 0x50
 800b802:	d04b      	beq.n	800b89c <TIM_SlaveTimer_SetConfig+0x16c>
 800b804:	2b50      	cmp	r3, #80	; 0x50
 800b806:	d85d      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b808:	2b40      	cmp	r3, #64	; 0x40
 800b80a:	d019      	beq.n	800b840 <TIM_SlaveTimer_SetConfig+0x110>
 800b80c:	2b40      	cmp	r3, #64	; 0x40
 800b80e:	d859      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b810:	2b30      	cmp	r3, #48	; 0x30
 800b812:	d05a      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b814:	2b30      	cmp	r3, #48	; 0x30
 800b816:	d855      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b818:	2b20      	cmp	r3, #32
 800b81a:	d056      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	d851      	bhi.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d052      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b824:	2b10      	cmp	r3, #16
 800b826:	d050      	beq.n	800b8ca <TIM_SlaveTimer_SetConfig+0x19a>
 800b828:	e04c      	b.n	800b8c4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68d9      	ldr	r1, [r3, #12]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	f000 f8b8 	bl	800b9ae <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b83e:	e045      	b.n	800b8cc <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b05      	cmp	r3, #5
 800b846:	d004      	beq.n	800b852 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b84c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b850:	d101      	bne.n	800b856 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e03b      	b.n	800b8ce <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6a1a      	ldr	r2, [r3, #32]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0201 	bic.w	r2, r2, #1
 800b86c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b87c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	4313      	orrs	r3, r2
 800b888:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	621a      	str	r2, [r3, #32]
      break;
 800b89a:	e017      	b.n	800b8cc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6818      	ldr	r0, [r3, #0]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	6899      	ldr	r1, [r3, #8]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f000 f821 	bl	800b8f0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b8ae:	e00d      	b.n	800b8cc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	6899      	ldr	r1, [r3, #8]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f000 f846 	bl	800b94e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b8c2:	e003      	b.n	800b8cc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b8c8:	e000      	b.n	800b8cc <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800b8ca:	bf00      	nop
  }

  return status;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	00100070 	.word	0x00100070
 800b8dc:	00100060 	.word	0x00100060
 800b8e0:	00100050 	.word	0x00100050
 800b8e4:	00100040 	.word	0x00100040
 800b8e8:	00100030 	.word	0x00100030
 800b8ec:	00100020 	.word	0x00100020

0800b8f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6a1b      	ldr	r3, [r3, #32]
 800b900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	f023 0201 	bic.w	r2, r3, #1
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b91a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	011b      	lsls	r3, r3, #4
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4313      	orrs	r3, r2
 800b924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f023 030a 	bic.w	r3, r3, #10
 800b92c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	4313      	orrs	r3, r2
 800b934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	621a      	str	r2, [r3, #32]
}
 800b942:	bf00      	nop
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b94e:	b480      	push	{r7}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	f023 0210 	bic.w	r2, r3, #16
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	031b      	lsls	r3, r3, #12
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b98a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	621a      	str	r2, [r3, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b087      	sub	sp, #28
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607a      	str	r2, [r7, #4]
 800b9ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	021a      	lsls	r2, r3, #8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	609a      	str	r2, [r3, #8]
}
 800b9e2:	bf00      	nop
 800b9e4:	371c      	adds	r7, #28
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b087      	sub	sp, #28
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f003 031f 	and.w	r3, r3, #31
 800ba00:	2201      	movs	r2, #1
 800ba02:	fa02 f303 	lsl.w	r3, r2, r3
 800ba06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a1a      	ldr	r2, [r3, #32]
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	43db      	mvns	r3, r3
 800ba10:	401a      	ands	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a1a      	ldr	r2, [r3, #32]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	f003 031f 	and.w	r3, r3, #31
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	fa01 f303 	lsl.w	r3, r1, r3
 800ba26:	431a      	orrs	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	621a      	str	r2, [r3, #32]
}
 800ba2c:	bf00      	nop
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d109      	bne.n	800ba5c <HAL_TIMEx_PWMN_Start+0x24>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	bf14      	ite	ne
 800ba54:	2301      	movne	r3, #1
 800ba56:	2300      	moveq	r3, #0
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	e022      	b.n	800baa2 <HAL_TIMEx_PWMN_Start+0x6a>
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	2b04      	cmp	r3, #4
 800ba60:	d109      	bne.n	800ba76 <HAL_TIMEx_PWMN_Start+0x3e>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	bf14      	ite	ne
 800ba6e:	2301      	movne	r3, #1
 800ba70:	2300      	moveq	r3, #0
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	e015      	b.n	800baa2 <HAL_TIMEx_PWMN_Start+0x6a>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b08      	cmp	r3, #8
 800ba7a:	d109      	bne.n	800ba90 <HAL_TIMEx_PWMN_Start+0x58>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	bf14      	ite	ne
 800ba88:	2301      	movne	r3, #1
 800ba8a:	2300      	moveq	r3, #0
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	e008      	b.n	800baa2 <HAL_TIMEx_PWMN_Start+0x6a>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	bf14      	ite	ne
 800ba9c:	2301      	movne	r3, #1
 800ba9e:	2300      	moveq	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e073      	b.n	800bb92 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <HAL_TIMEx_PWMN_Start+0x82>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2202      	movs	r2, #2
 800bab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bab8:	e013      	b.n	800bae2 <HAL_TIMEx_PWMN_Start+0xaa>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b04      	cmp	r3, #4
 800babe:	d104      	bne.n	800baca <HAL_TIMEx_PWMN_Start+0x92>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac8:	e00b      	b.n	800bae2 <HAL_TIMEx_PWMN_Start+0xaa>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d104      	bne.n	800bada <HAL_TIMEx_PWMN_Start+0xa2>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2202      	movs	r2, #2
 800bad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bad8:	e003      	b.n	800bae2 <HAL_TIMEx_PWMN_Start+0xaa>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2202      	movs	r2, #2
 800bade:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2204      	movs	r2, #4
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 fb16 	bl	800c11c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bafe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a25      	ldr	r2, [pc, #148]	; (800bb9c <HAL_TIMEx_PWMN_Start+0x164>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d022      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb12:	d01d      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a21      	ldr	r2, [pc, #132]	; (800bba0 <HAL_TIMEx_PWMN_Start+0x168>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d018      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a20      	ldr	r2, [pc, #128]	; (800bba4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d013      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <HAL_TIMEx_PWMN_Start+0x170>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d00e      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a1d      	ldr	r2, [pc, #116]	; (800bbac <HAL_TIMEx_PWMN_Start+0x174>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d009      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a1b      	ldr	r2, [pc, #108]	; (800bbb0 <HAL_TIMEx_PWMN_Start+0x178>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d004      	beq.n	800bb50 <HAL_TIMEx_PWMN_Start+0x118>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a1a      	ldr	r2, [pc, #104]	; (800bbb4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d115      	bne.n	800bb7c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689a      	ldr	r2, [r3, #8]
 800bb56:	4b18      	ldr	r3, [pc, #96]	; (800bbb8 <HAL_TIMEx_PWMN_Start+0x180>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b06      	cmp	r3, #6
 800bb60:	d015      	beq.n	800bb8e <HAL_TIMEx_PWMN_Start+0x156>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb68:	d011      	beq.n	800bb8e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0201 	orr.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb7a:	e008      	b.n	800bb8e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0201 	orr.w	r2, r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
 800bb8c:	e000      	b.n	800bb90 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	40012c00 	.word	0x40012c00
 800bba0:	40000400 	.word	0x40000400
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40000c00 	.word	0x40000c00
 800bbac:	40013400 	.word	0x40013400
 800bbb0:	40014000 	.word	0x40014000
 800bbb4:	40015000 	.word	0x40015000
 800bbb8:	00010007 	.word	0x00010007

0800bbbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d101      	bne.n	800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e074      	b.n	800bcbe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2202      	movs	r2, #2
 800bbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a34      	ldr	r2, [pc, #208]	; (800bccc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d009      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a33      	ldr	r2, [pc, #204]	; (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d004      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a31      	ldr	r2, [pc, #196]	; (800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d108      	bne.n	800bc24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bc2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a21      	ldr	r2, [pc, #132]	; (800bccc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d022      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc54:	d01d      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a1f      	ldr	r2, [pc, #124]	; (800bcd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d018      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a1d      	ldr	r2, [pc, #116]	; (800bcdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d013      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a1c      	ldr	r2, [pc, #112]	; (800bce0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d00e      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a15      	ldr	r2, [pc, #84]	; (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d009      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a18      	ldr	r2, [pc, #96]	; (800bce4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d004      	beq.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a11      	ldr	r2, [pc, #68]	; (800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d10c      	bne.n	800bcac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	40012c00 	.word	0x40012c00
 800bcd0:	40013400 	.word	0x40013400
 800bcd4:	40015000 	.word	0x40015000
 800bcd8:	40000400 	.word	0x40000400
 800bcdc:	40000800 	.word	0x40000800
 800bce0:	40000c00 	.word	0x40000c00
 800bce4:	40014000 	.word	0x40014000

0800bce8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d101      	bne.n	800bd04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd00:	2302      	movs	r3, #2
 800bd02:	e096      	b.n	800be32 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	695b      	ldr	r3, [r3, #20]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	041b      	lsls	r3, r3, #16
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a2f      	ldr	r2, [pc, #188]	; (800be40 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d009      	beq.n	800bd9c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a2d      	ldr	r2, [pc, #180]	; (800be44 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d004      	beq.n	800bd9c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a2c      	ldr	r2, [pc, #176]	; (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d106      	bne.n	800bdaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	69db      	ldr	r3, [r3, #28]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a24      	ldr	r2, [pc, #144]	; (800be40 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d009      	beq.n	800bdc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a22      	ldr	r2, [pc, #136]	; (800be44 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d004      	beq.n	800bdc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a21      	ldr	r2, [pc, #132]	; (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d12b      	bne.n	800be20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd2:	051b      	lsls	r3, r3, #20
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a11      	ldr	r2, [pc, #68]	; (800be40 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d009      	beq.n	800be12 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a10      	ldr	r2, [pc, #64]	; (800be44 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d004      	beq.n	800be12 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a0e      	ldr	r2, [pc, #56]	; (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d106      	bne.n	800be20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	40012c00 	.word	0x40012c00
 800be44:	40013400 	.word	0x40013400
 800be48:	40015000 	.word	0x40015000

0800be4c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800be4c:	b480      	push	{r7}
 800be4e:	b08b      	sub	sp, #44	; 0x2c
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_TIMEx_ConfigBreakInput+0x20>
 800be68:	2302      	movs	r3, #2
 800be6a:	e10b      	b.n	800c084 <HAL_TIMEx_ConfigBreakInput+0x238>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b80      	cmp	r3, #128	; 0x80
 800be7a:	f000 8096 	beq.w	800bfaa <HAL_TIMEx_ConfigBreakInput+0x15e>
 800be7e:	2b80      	cmp	r3, #128	; 0x80
 800be80:	f200 809c 	bhi.w	800bfbc <HAL_TIMEx_ConfigBreakInput+0x170>
 800be84:	2b20      	cmp	r3, #32
 800be86:	d849      	bhi.n	800bf1c <HAL_TIMEx_ConfigBreakInput+0xd0>
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 8097 	beq.w	800bfbc <HAL_TIMEx_ConfigBreakInput+0x170>
 800be8e:	3b01      	subs	r3, #1
 800be90:	2b1f      	cmp	r3, #31
 800be92:	f200 8093 	bhi.w	800bfbc <HAL_TIMEx_ConfigBreakInput+0x170>
 800be96:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <HAL_TIMEx_ConfigBreakInput+0x50>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bf23 	.word	0x0800bf23
 800bea0:	0800bf37 	.word	0x0800bf37
 800bea4:	0800bfbd 	.word	0x0800bfbd
 800bea8:	0800bf4b 	.word	0x0800bf4b
 800beac:	0800bfbd 	.word	0x0800bfbd
 800beb0:	0800bfbd 	.word	0x0800bfbd
 800beb4:	0800bfbd 	.word	0x0800bfbd
 800beb8:	0800bf5f 	.word	0x0800bf5f
 800bebc:	0800bfbd 	.word	0x0800bfbd
 800bec0:	0800bfbd 	.word	0x0800bfbd
 800bec4:	0800bfbd 	.word	0x0800bfbd
 800bec8:	0800bfbd 	.word	0x0800bfbd
 800becc:	0800bfbd 	.word	0x0800bfbd
 800bed0:	0800bfbd 	.word	0x0800bfbd
 800bed4:	0800bfbd 	.word	0x0800bfbd
 800bed8:	0800bf73 	.word	0x0800bf73
 800bedc:	0800bfbd 	.word	0x0800bfbd
 800bee0:	0800bfbd 	.word	0x0800bfbd
 800bee4:	0800bfbd 	.word	0x0800bfbd
 800bee8:	0800bfbd 	.word	0x0800bfbd
 800beec:	0800bfbd 	.word	0x0800bfbd
 800bef0:	0800bfbd 	.word	0x0800bfbd
 800bef4:	0800bfbd 	.word	0x0800bfbd
 800bef8:	0800bfbd 	.word	0x0800bfbd
 800befc:	0800bfbd 	.word	0x0800bfbd
 800bf00:	0800bfbd 	.word	0x0800bfbd
 800bf04:	0800bfbd 	.word	0x0800bfbd
 800bf08:	0800bfbd 	.word	0x0800bfbd
 800bf0c:	0800bfbd 	.word	0x0800bfbd
 800bf10:	0800bfbd 	.word	0x0800bfbd
 800bf14:	0800bfbd 	.word	0x0800bfbd
 800bf18:	0800bf87 	.word	0x0800bf87
 800bf1c:	2b40      	cmp	r3, #64	; 0x40
 800bf1e:	d03b      	beq.n	800bf98 <HAL_TIMEx_ConfigBreakInput+0x14c>
 800bf20:	e04c      	b.n	800bfbc <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800bf22:	2301      	movs	r3, #1
 800bf24:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800bf26:	2300      	movs	r3, #0
 800bf28:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800bf2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf2e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800bf30:	2309      	movs	r3, #9
 800bf32:	617b      	str	r3, [r7, #20]
      break;
 800bf34:	e04b      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800bf36:	2302      	movs	r3, #2
 800bf38:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800bf3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf42:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800bf44:	230a      	movs	r3, #10
 800bf46:	617b      	str	r3, [r7, #20]
      break;
 800bf48:	e041      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800bf4a:	2304      	movs	r3, #4
 800bf4c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800bf4e:	2302      	movs	r3, #2
 800bf50:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800bf52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf56:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800bf58:	230b      	movs	r3, #11
 800bf5a:	617b      	str	r3, [r7, #20]
      break;
 800bf5c:	e037      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800bf5e:	2308      	movs	r3, #8
 800bf60:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800bf62:	2303      	movs	r3, #3
 800bf64:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800bf66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf6a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	617b      	str	r3, [r7, #20]
      break;
 800bf70:	e02d      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800bf72:	2310      	movs	r3, #16
 800bf74:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800bf76:	2304      	movs	r3, #4
 800bf78:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800bf7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf7e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800bf80:	230d      	movs	r3, #13
 800bf82:	617b      	str	r3, [r7, #20]
      break;
 800bf84:	e023      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800bf86:	2320      	movs	r3, #32
 800bf88:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800bf8a:	2305      	movs	r3, #5
 800bf8c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
      break;
 800bf96:	e01a      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 800bf98:	2340      	movs	r3, #64	; 0x40
 800bf9a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800bf9c:	2306      	movs	r3, #6
 800bf9e:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
      break;
 800bfa8:	e011      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800bfaa:	2380      	movs	r3, #128	; 0x80
 800bfac:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800bfae:	2307      	movs	r3, #7
 800bfb0:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	617b      	str	r3, [r7, #20]
      break;
 800bfba:	e008      	b.n	800bfce <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	617b      	str	r3, [r7, #20]
      break;
 800bfcc:	bf00      	nop
    }
  }

  switch (BreakInput)
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d003      	beq.n	800bfdc <HAL_TIMEx_ConfigBreakInput+0x190>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d025      	beq.n	800c026 <HAL_TIMEx_ConfigBreakInput+0x1da>
 800bfda:	e049      	b.n	800c070 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfe2:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	43db      	mvns	r3, r3
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	4013      	ands	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	409a      	lsls	r2, r3
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	4013      	ands	r3, r2
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	43db      	mvns	r3, r3
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	4013      	ands	r3, r2
 800c008:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689a      	ldr	r2, [r3, #8]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	409a      	lsls	r2, r3
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	4013      	ands	r3, r2
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800c024:	e028      	b.n	800c078 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c02c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	43db      	mvns	r3, r3
 800c032:	693a      	ldr	r2, [r7, #16]
 800c034:	4013      	ands	r3, r2
 800c036:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	409a      	lsls	r2, r3
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	4013      	ands	r3, r2
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	4313      	orrs	r3, r2
 800c048:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	43db      	mvns	r3, r3
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	4013      	ands	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	689a      	ldr	r2, [r3, #8]
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	409a      	lsls	r2, r3
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	4013      	ands	r3, r2
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	4313      	orrs	r3, r2
 800c064:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800c06e:	e003      	b.n	800c078 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800c076:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c084:	4618      	mov	r0, r3
 800c086:	372c      	adds	r7, #44	; 0x2c
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f003 031f 	and.w	r3, r3, #31
 800c12e:	2204      	movs	r2, #4
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1a      	ldr	r2, [r3, #32]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	43db      	mvns	r3, r3
 800c13e:	401a      	ands	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6a1a      	ldr	r2, [r3, #32]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f003 031f 	and.w	r3, r3, #31
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	fa01 f303 	lsl.w	r3, r1, r3
 800c154:	431a      	orrs	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	621a      	str	r2, [r3, #32]
}
 800c15a:	bf00      	nop
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b082      	sub	sp, #8
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e042      	b.n	800c1fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d106      	bne.n	800c190 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7f8 fc30 	bl	80049f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2224      	movs	r2, #36	; 0x24
 800c194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f022 0201 	bic.w	r2, r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fbf7 	bl	800c99c <UART_SetConfig>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d101      	bne.n	800c1b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e022      	b.n	800c1fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fee7 	bl	800cf94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f042 0201 	orr.w	r2, r2, #1
 800c1f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 ff6e 	bl	800d0d8 <UART_CheckIdleState>
 800c1fc:	4603      	mov	r3, r0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b08a      	sub	sp, #40	; 0x28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	4613      	mov	r3, r2
 800c214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing == Убедитесь, что процесс передачи данных еще не продолжается */
  if (huart->gState == HAL_UART_STATE_READY)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21c:	2b20      	cmp	r3, #32
 800c21e:	d17a      	bne.n	800c316 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <HAL_UART_Transmit_DMA+0x24>
 800c226:	88fb      	ldrh	r3, [r7, #6]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e073      	b.n	800c318 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c236:	2b01      	cmp	r3, #1
 800c238:	d101      	bne.n	800c23e <HAL_UART_Transmit_DMA+0x36>
 800c23a:	2302      	movs	r3, #2
 800c23c:	e06c      	b.n	800c318 <HAL_UART_Transmit_DMA+0x110>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	88fa      	ldrh	r2, [r7, #6]
 800c250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	88fa      	ldrh	r2, [r7, #6]
 800c258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2221      	movs	r2, #33	; 0x21
 800c268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c270:	2b00      	cmp	r3, #0
 800c272:	d02c      	beq.n	800c2ce <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c278:	4a29      	ldr	r2, [pc, #164]	; (800c320 <HAL_UART_Transmit_DMA+0x118>)
 800c27a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c280:	4a28      	ldr	r2, [pc, #160]	; (800c324 <HAL_UART_Transmit_DMA+0x11c>)
 800c282:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c288:	4a27      	ldr	r2, [pc, #156]	; (800c328 <HAL_UART_Transmit_DMA+0x120>)
 800c28a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c290:	2200      	movs	r2, #0
 800c292:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c29c:	4619      	mov	r1, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3328      	adds	r3, #40	; 0x28
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	88fb      	ldrh	r3, [r7, #6]
 800c2a8:	f7fa fddc 	bl	8006e64 <HAL_DMA_Start_IT>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2210      	movs	r2, #16
 800c2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e024      	b.n	800c318 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2240      	movs	r2, #64	; 0x40
 800c2d4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3308      	adds	r3, #8
 800c2e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	e853 3f00 	ldrex	r3, [r3]
 800c2ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fe:	623a      	str	r2, [r7, #32]
 800c300:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c302:	69f9      	ldr	r1, [r7, #28]
 800c304:	6a3a      	ldr	r2, [r7, #32]
 800c306:	e841 2300 	strex	r3, r2, [r1]
 800c30a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1e5      	bne.n	800c2de <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	e000      	b.n	800c318 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c316:	2302      	movs	r3, #2
  }
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3728      	adds	r7, #40	; 0x28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	0800d44d 	.word	0x0800d44d
 800c324:	0800d4e7 	.word	0x0800d4e7
 800c328:	0800d503 	.word	0x0800d503

0800c32c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b0ba      	sub	sp, #232	; 0xe8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c356:	f640 030f 	movw	r3, #2063	; 0x80f
 800c35a:	4013      	ands	r3, r2
 800c35c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c364:	2b00      	cmp	r3, #0
 800c366:	d11b      	bne.n	800c3a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c36c:	f003 0320 	and.w	r3, r3, #32
 800c370:	2b00      	cmp	r3, #0
 800c372:	d015      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c378:	f003 0320 	and.w	r3, r3, #32
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d105      	bne.n	800c38c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d009      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 82d6 	beq.w	800c942 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	4798      	blx	r3
      }
      return;
 800c39e:	e2d0      	b.n	800c942 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 811f 	beq.w	800c5e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c3aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c3ae:	4b8b      	ldr	r3, [pc, #556]	; (800c5dc <HAL_UART_IRQHandler+0x2b0>)
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c3ba:	4b89      	ldr	r3, [pc, #548]	; (800c5e0 <HAL_UART_IRQHandler+0x2b4>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 8112 	beq.w	800c5e8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d011      	beq.n	800c3f4 <HAL_UART_IRQHandler+0xc8>
 800c3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00b      	beq.n	800c3f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ea:	f043 0201 	orr.w	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d011      	beq.n	800c424 <HAL_UART_IRQHandler+0xf8>
 800c400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2202      	movs	r2, #2
 800c412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c41a:	f043 0204 	orr.w	r2, r3, #4
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c428:	f003 0304 	and.w	r3, r3, #4
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d011      	beq.n	800c454 <HAL_UART_IRQHandler+0x128>
 800c430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2204      	movs	r2, #4
 800c442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c44a:	f043 0202 	orr.w	r2, r3, #2
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c458:	f003 0308 	and.w	r3, r3, #8
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d017      	beq.n	800c490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c464:	f003 0320 	and.w	r3, r3, #32
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d105      	bne.n	800c478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c46c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c470:	4b5a      	ldr	r3, [pc, #360]	; (800c5dc <HAL_UART_IRQHandler+0x2b0>)
 800c472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00b      	beq.n	800c490 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2208      	movs	r2, #8
 800c47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c486:	f043 0208 	orr.w	r2, r3, #8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d012      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x196>
 800c49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b8:	f043 0220 	orr.w	r2, r3, #32
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 823c 	beq.w	800c946 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4d2:	f003 0320 	and.w	r3, r3, #32
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d013      	beq.n	800c502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4de:	f003 0320 	and.w	r3, r3, #32
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d105      	bne.n	800c4f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d007      	beq.n	800c502 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d003      	beq.n	800c502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c516:	2b40      	cmp	r3, #64	; 0x40
 800c518:	d005      	beq.n	800c526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c51a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c51e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c522:	2b00      	cmp	r3, #0
 800c524:	d04f      	beq.n	800c5c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 ff2a 	bl	800d380 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c536:	2b40      	cmp	r3, #64	; 0x40
 800c538:	d141      	bne.n	800c5be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3308      	adds	r3, #8
 800c540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c548:	e853 3f00 	ldrex	r3, [r3]
 800c54c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3308      	adds	r3, #8
 800c562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c56a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c576:	e841 2300 	strex	r3, r2, [r1]
 800c57a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1d9      	bne.n	800c53a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d013      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c592:	4a14      	ldr	r2, [pc, #80]	; (800c5e4 <HAL_UART_IRQHandler+0x2b8>)
 800c594:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fa fd36 	bl	800700c <HAL_DMA_Abort_IT>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d017      	beq.n	800c5d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5b4:	e00f      	b.n	800c5d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f9da 	bl	800c970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5bc:	e00b      	b.n	800c5d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f9d6 	bl	800c970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5c4:	e007      	b.n	800c5d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f9d2 	bl	800c970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c5d4:	e1b7      	b.n	800c946 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d6:	bf00      	nop
    return;
 800c5d8:	e1b5      	b.n	800c946 <HAL_UART_IRQHandler+0x61a>
 800c5da:	bf00      	nop
 800c5dc:	10000001 	.word	0x10000001
 800c5e0:	04000120 	.word	0x04000120
 800c5e4:	0800d583 	.word	0x0800d583

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	f040 814a 	bne.w	800c886 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f6:	f003 0310 	and.w	r3, r3, #16
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 8143 	beq.w	800c886 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c604:	f003 0310 	and.w	r3, r3, #16
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 813c 	beq.w	800c886 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2210      	movs	r2, #16
 800c614:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b40      	cmp	r3, #64	; 0x40
 800c622:	f040 80b5 	bne.w	800c790 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c632:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 8187 	beq.w	800c94a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c646:	429a      	cmp	r2, r3
 800c648:	f080 817f 	bcs.w	800c94a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c652:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 0320 	and.w	r3, r3, #32
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 8086 	bne.w	800c774 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c67c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	461a      	mov	r2, r3
 800c68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c696:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c69e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1da      	bne.n	800c668 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3308      	adds	r3, #8
 800c6b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c6c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6c4:	f023 0301 	bic.w	r3, r3, #1
 800c6c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c6d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c6da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c6e2:	e841 2300 	strex	r3, r2, [r1]
 800c6e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c6e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e1      	bne.n	800c6b2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c6fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3308      	adds	r3, #8
 800c70e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c712:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c714:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c716:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c71a:	e841 2300 	strex	r3, r2, [r1]
 800c71e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e3      	bne.n	800c6ee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2220      	movs	r2, #32
 800c72a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c744:	f023 0310 	bic.w	r3, r3, #16
 800c748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c756:	65bb      	str	r3, [r7, #88]	; 0x58
 800c758:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c75c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c75e:	e841 2300 	strex	r3, r2, [r1]
 800c762:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1e4      	bne.n	800c734 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fa fbf3 	bl	8006f5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c780:	b29b      	uxth	r3, r3
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	b29b      	uxth	r3, r3
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f8fb 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c78e:	e0dc      	b.n	800c94a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 80ce 	beq.w	800c94e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c7b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f000 80c9 	beq.w	800c94e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	e853 3f00 	ldrex	r3, [r3]
 800c7c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	461a      	mov	r2, r3
 800c7da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7de:	647b      	str	r3, [r7, #68]	; 0x44
 800c7e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7e6:	e841 2300 	strex	r3, r2, [r1]
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1e4      	bne.n	800c7bc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fc:	e853 3f00 	ldrex	r3, [r3]
 800c800:	623b      	str	r3, [r7, #32]
   return(result);
 800c802:	6a3b      	ldr	r3, [r7, #32]
 800c804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c808:	f023 0301 	bic.w	r3, r3, #1
 800c80c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3308      	adds	r3, #8
 800c816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c81a:	633a      	str	r2, [r7, #48]	; 0x30
 800c81c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c822:	e841 2300 	strex	r3, r2, [r1]
 800c826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1e1      	bne.n	800c7f2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2220      	movs	r2, #32
 800c832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	e853 3f00 	ldrex	r3, [r3]
 800c84e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f023 0310 	bic.w	r3, r3, #16
 800c856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	461a      	mov	r2, r3
 800c860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c864:	61fb      	str	r3, [r7, #28]
 800c866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	69b9      	ldr	r1, [r7, #24]
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	e841 2300 	strex	r3, r2, [r1]
 800c870:	617b      	str	r3, [r7, #20]
   return(result);
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1e4      	bne.n	800c842 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f880 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c884:	e063      	b.n	800c94e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c88a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00e      	beq.n	800c8b0 <HAL_UART_IRQHandler+0x584>
 800c892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c8a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 ff14 	bl	800d6d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8ae:	e051      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d014      	beq.n	800c8e6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d105      	bne.n	800c8d4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d008      	beq.n	800c8e6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d03a      	beq.n	800c952 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	4798      	blx	r3
    }
    return;
 800c8e4:	e035      	b.n	800c952 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <HAL_UART_IRQHandler+0x5da>
 800c8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fe55 	bl	800d5ae <UART_EndTransmit_IT>
    return;
 800c904:	e026      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c90a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <HAL_UART_IRQHandler+0x5fa>
 800c912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c916:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 feed 	bl	800d6fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c924:	e016      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c92a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d010      	beq.n	800c954 <HAL_UART_IRQHandler+0x628>
 800c932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c936:	2b00      	cmp	r3, #0
 800c938:	da0c      	bge.n	800c954 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fed5 	bl	800d6ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c940:	e008      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
      return;
 800c942:	bf00      	nop
 800c944:	e006      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
    return;
 800c946:	bf00      	nop
 800c948:	e004      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
      return;
 800c94a:	bf00      	nop
 800c94c:	e002      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
      return;
 800c94e:	bf00      	nop
 800c950:	e000      	b.n	800c954 <HAL_UART_IRQHandler+0x628>
    return;
 800c952:	bf00      	nop
  }
}
 800c954:	37e8      	adds	r7, #232	; 0xe8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop

0800c95c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c964:	bf00      	nop
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c99c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9a0:	b08c      	sub	sp, #48	; 0x30
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	4baa      	ldr	r3, [pc, #680]	; (800cc74 <UART_SetConfig+0x2d8>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	6812      	ldr	r2, [r2, #0]
 800c9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9d4:	430b      	orrs	r3, r1
 800c9d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	68da      	ldr	r2, [r3, #12]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a9f      	ldr	r2, [pc, #636]	; (800cc78 <UART_SetConfig+0x2dc>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d004      	beq.n	800ca08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca04:	4313      	orrs	r3, r2
 800ca06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ca12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	6812      	ldr	r2, [r2, #0]
 800ca1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca26:	f023 010f 	bic.w	r1, r3, #15
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	430a      	orrs	r2, r1
 800ca34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a90      	ldr	r2, [pc, #576]	; (800cc7c <UART_SetConfig+0x2e0>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d125      	bne.n	800ca8c <UART_SetConfig+0xf0>
 800ca40:	4b8f      	ldr	r3, [pc, #572]	; (800cc80 <UART_SetConfig+0x2e4>)
 800ca42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca46:	f003 0303 	and.w	r3, r3, #3
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	d81a      	bhi.n	800ca84 <UART_SetConfig+0xe8>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <UART_SetConfig+0xb8>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800ca65 	.word	0x0800ca65
 800ca58:	0800ca75 	.word	0x0800ca75
 800ca5c:	0800ca6d 	.word	0x0800ca6d
 800ca60:	0800ca7d 	.word	0x0800ca7d
 800ca64:	2301      	movs	r3, #1
 800ca66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca6a:	e116      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca72:	e112      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800ca74:	2304      	movs	r3, #4
 800ca76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca7a:	e10e      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800ca7c:	2308      	movs	r3, #8
 800ca7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca82:	e10a      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800ca84:	2310      	movs	r3, #16
 800ca86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca8a:	e106      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a7c      	ldr	r2, [pc, #496]	; (800cc84 <UART_SetConfig+0x2e8>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d138      	bne.n	800cb08 <UART_SetConfig+0x16c>
 800ca96:	4b7a      	ldr	r3, [pc, #488]	; (800cc80 <UART_SetConfig+0x2e4>)
 800ca98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9c:	f003 030c 	and.w	r3, r3, #12
 800caa0:	2b0c      	cmp	r3, #12
 800caa2:	d82d      	bhi.n	800cb00 <UART_SetConfig+0x164>
 800caa4:	a201      	add	r2, pc, #4	; (adr r2, 800caac <UART_SetConfig+0x110>)
 800caa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caaa:	bf00      	nop
 800caac:	0800cae1 	.word	0x0800cae1
 800cab0:	0800cb01 	.word	0x0800cb01
 800cab4:	0800cb01 	.word	0x0800cb01
 800cab8:	0800cb01 	.word	0x0800cb01
 800cabc:	0800caf1 	.word	0x0800caf1
 800cac0:	0800cb01 	.word	0x0800cb01
 800cac4:	0800cb01 	.word	0x0800cb01
 800cac8:	0800cb01 	.word	0x0800cb01
 800cacc:	0800cae9 	.word	0x0800cae9
 800cad0:	0800cb01 	.word	0x0800cb01
 800cad4:	0800cb01 	.word	0x0800cb01
 800cad8:	0800cb01 	.word	0x0800cb01
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	2300      	movs	r3, #0
 800cae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cae6:	e0d8      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cae8:	2302      	movs	r3, #2
 800caea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caee:	e0d4      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800caf0:	2304      	movs	r3, #4
 800caf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caf6:	e0d0      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800caf8:	2308      	movs	r3, #8
 800cafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cafe:	e0cc      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb00:	2310      	movs	r3, #16
 800cb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb06:	e0c8      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a5e      	ldr	r2, [pc, #376]	; (800cc88 <UART_SetConfig+0x2ec>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d125      	bne.n	800cb5e <UART_SetConfig+0x1c2>
 800cb12:	4b5b      	ldr	r3, [pc, #364]	; (800cc80 <UART_SetConfig+0x2e4>)
 800cb14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cb1c:	2b30      	cmp	r3, #48	; 0x30
 800cb1e:	d016      	beq.n	800cb4e <UART_SetConfig+0x1b2>
 800cb20:	2b30      	cmp	r3, #48	; 0x30
 800cb22:	d818      	bhi.n	800cb56 <UART_SetConfig+0x1ba>
 800cb24:	2b20      	cmp	r3, #32
 800cb26:	d00a      	beq.n	800cb3e <UART_SetConfig+0x1a2>
 800cb28:	2b20      	cmp	r3, #32
 800cb2a:	d814      	bhi.n	800cb56 <UART_SetConfig+0x1ba>
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <UART_SetConfig+0x19a>
 800cb30:	2b10      	cmp	r3, #16
 800cb32:	d008      	beq.n	800cb46 <UART_SetConfig+0x1aa>
 800cb34:	e00f      	b.n	800cb56 <UART_SetConfig+0x1ba>
 800cb36:	2300      	movs	r3, #0
 800cb38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb3c:	e0ad      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb3e:	2302      	movs	r3, #2
 800cb40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb44:	e0a9      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb46:	2304      	movs	r3, #4
 800cb48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb4c:	e0a5      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb4e:	2308      	movs	r3, #8
 800cb50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb54:	e0a1      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb56:	2310      	movs	r3, #16
 800cb58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb5c:	e09d      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a4a      	ldr	r2, [pc, #296]	; (800cc8c <UART_SetConfig+0x2f0>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d125      	bne.n	800cbb4 <UART_SetConfig+0x218>
 800cb68:	4b45      	ldr	r3, [pc, #276]	; (800cc80 <UART_SetConfig+0x2e4>)
 800cb6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cb72:	2bc0      	cmp	r3, #192	; 0xc0
 800cb74:	d016      	beq.n	800cba4 <UART_SetConfig+0x208>
 800cb76:	2bc0      	cmp	r3, #192	; 0xc0
 800cb78:	d818      	bhi.n	800cbac <UART_SetConfig+0x210>
 800cb7a:	2b80      	cmp	r3, #128	; 0x80
 800cb7c:	d00a      	beq.n	800cb94 <UART_SetConfig+0x1f8>
 800cb7e:	2b80      	cmp	r3, #128	; 0x80
 800cb80:	d814      	bhi.n	800cbac <UART_SetConfig+0x210>
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d002      	beq.n	800cb8c <UART_SetConfig+0x1f0>
 800cb86:	2b40      	cmp	r3, #64	; 0x40
 800cb88:	d008      	beq.n	800cb9c <UART_SetConfig+0x200>
 800cb8a:	e00f      	b.n	800cbac <UART_SetConfig+0x210>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb92:	e082      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb94:	2302      	movs	r3, #2
 800cb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb9a:	e07e      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cb9c:	2304      	movs	r3, #4
 800cb9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cba2:	e07a      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cba4:	2308      	movs	r3, #8
 800cba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbaa:	e076      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cbac:	2310      	movs	r3, #16
 800cbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbb2:	e072      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a35      	ldr	r2, [pc, #212]	; (800cc90 <UART_SetConfig+0x2f4>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d12a      	bne.n	800cc14 <UART_SetConfig+0x278>
 800cbbe:	4b30      	ldr	r3, [pc, #192]	; (800cc80 <UART_SetConfig+0x2e4>)
 800cbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbcc:	d01a      	beq.n	800cc04 <UART_SetConfig+0x268>
 800cbce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbd2:	d81b      	bhi.n	800cc0c <UART_SetConfig+0x270>
 800cbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd8:	d00c      	beq.n	800cbf4 <UART_SetConfig+0x258>
 800cbda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbde:	d815      	bhi.n	800cc0c <UART_SetConfig+0x270>
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d003      	beq.n	800cbec <UART_SetConfig+0x250>
 800cbe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbe8:	d008      	beq.n	800cbfc <UART_SetConfig+0x260>
 800cbea:	e00f      	b.n	800cc0c <UART_SetConfig+0x270>
 800cbec:	2300      	movs	r3, #0
 800cbee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbf2:	e052      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbfa:	e04e      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc02:	e04a      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc04:	2308      	movs	r3, #8
 800cc06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc0a:	e046      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc0c:	2310      	movs	r3, #16
 800cc0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc12:	e042      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <UART_SetConfig+0x2dc>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d13a      	bne.n	800cc94 <UART_SetConfig+0x2f8>
 800cc1e:	4b18      	ldr	r3, [pc, #96]	; (800cc80 <UART_SetConfig+0x2e4>)
 800cc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cc28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc2c:	d01a      	beq.n	800cc64 <UART_SetConfig+0x2c8>
 800cc2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc32:	d81b      	bhi.n	800cc6c <UART_SetConfig+0x2d0>
 800cc34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc38:	d00c      	beq.n	800cc54 <UART_SetConfig+0x2b8>
 800cc3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc3e:	d815      	bhi.n	800cc6c <UART_SetConfig+0x2d0>
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <UART_SetConfig+0x2b0>
 800cc44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc48:	d008      	beq.n	800cc5c <UART_SetConfig+0x2c0>
 800cc4a:	e00f      	b.n	800cc6c <UART_SetConfig+0x2d0>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc52:	e022      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc54:	2302      	movs	r3, #2
 800cc56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc5a:	e01e      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc62:	e01a      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc64:	2308      	movs	r3, #8
 800cc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc6a:	e016      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc6c:	2310      	movs	r3, #16
 800cc6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc72:	e012      	b.n	800cc9a <UART_SetConfig+0x2fe>
 800cc74:	cfff69f3 	.word	0xcfff69f3
 800cc78:	40008000 	.word	0x40008000
 800cc7c:	40013800 	.word	0x40013800
 800cc80:	40021000 	.word	0x40021000
 800cc84:	40004400 	.word	0x40004400
 800cc88:	40004800 	.word	0x40004800
 800cc8c:	40004c00 	.word	0x40004c00
 800cc90:	40005000 	.word	0x40005000
 800cc94:	2310      	movs	r3, #16
 800cc96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4aae      	ldr	r2, [pc, #696]	; (800cf58 <UART_SetConfig+0x5bc>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	f040 8097 	bne.w	800cdd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cca6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d823      	bhi.n	800ccf6 <UART_SetConfig+0x35a>
 800ccae:	a201      	add	r2, pc, #4	; (adr r2, 800ccb4 <UART_SetConfig+0x318>)
 800ccb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb4:	0800ccd9 	.word	0x0800ccd9
 800ccb8:	0800ccf7 	.word	0x0800ccf7
 800ccbc:	0800cce1 	.word	0x0800cce1
 800ccc0:	0800ccf7 	.word	0x0800ccf7
 800ccc4:	0800cce7 	.word	0x0800cce7
 800ccc8:	0800ccf7 	.word	0x0800ccf7
 800cccc:	0800ccf7 	.word	0x0800ccf7
 800ccd0:	0800ccf7 	.word	0x0800ccf7
 800ccd4:	0800ccef 	.word	0x0800ccef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccd8:	f7fd f890 	bl	8009dfc <HAL_RCC_GetPCLK1Freq>
 800ccdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccde:	e010      	b.n	800cd02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cce0:	4b9e      	ldr	r3, [pc, #632]	; (800cf5c <UART_SetConfig+0x5c0>)
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cce4:	e00d      	b.n	800cd02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cce6:	f7fd f81b 	bl	8009d20 <HAL_RCC_GetSysClockFreq>
 800ccea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccec:	e009      	b.n	800cd02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccf4:	e005      	b.n	800cd02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cd00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f000 8130 	beq.w	800cf6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0e:	4a94      	ldr	r2, [pc, #592]	; (800cf60 <UART_SetConfig+0x5c4>)
 800cd10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd14:	461a      	mov	r2, r3
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	685a      	ldr	r2, [r3, #4]
 800cd22:	4613      	mov	r3, r2
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	4413      	add	r3, r2
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d305      	bcc.n	800cd3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d903      	bls.n	800cd42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cd40:	e113      	b.n	800cf6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	2200      	movs	r2, #0
 800cd46:	60bb      	str	r3, [r7, #8]
 800cd48:	60fa      	str	r2, [r7, #12]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4e:	4a84      	ldr	r2, [pc, #528]	; (800cf60 <UART_SetConfig+0x5c4>)
 800cd50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	2200      	movs	r2, #0
 800cd58:	603b      	str	r3, [r7, #0]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd64:	f7f4 f808 	bl	8000d78 <__aeabi_uldivmod>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f04f 0200 	mov.w	r2, #0
 800cd74:	f04f 0300 	mov.w	r3, #0
 800cd78:	020b      	lsls	r3, r1, #8
 800cd7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd7e:	0202      	lsls	r2, r0, #8
 800cd80:	6979      	ldr	r1, [r7, #20]
 800cd82:	6849      	ldr	r1, [r1, #4]
 800cd84:	0849      	lsrs	r1, r1, #1
 800cd86:	2000      	movs	r0, #0
 800cd88:	460c      	mov	r4, r1
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	eb12 0804 	adds.w	r8, r2, r4
 800cd90:	eb43 0905 	adc.w	r9, r3, r5
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	469a      	mov	sl, r3
 800cd9c:	4693      	mov	fp, r2
 800cd9e:	4652      	mov	r2, sl
 800cda0:	465b      	mov	r3, fp
 800cda2:	4640      	mov	r0, r8
 800cda4:	4649      	mov	r1, r9
 800cda6:	f7f3 ffe7 	bl	8000d78 <__aeabi_uldivmod>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	460b      	mov	r3, r1
 800cdae:	4613      	mov	r3, r2
 800cdb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdb8:	d308      	bcc.n	800cdcc <UART_SetConfig+0x430>
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdc0:	d204      	bcs.n	800cdcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6a3a      	ldr	r2, [r7, #32]
 800cdc8:	60da      	str	r2, [r3, #12]
 800cdca:	e0ce      	b.n	800cf6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cdd2:	e0ca      	b.n	800cf6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	69db      	ldr	r3, [r3, #28]
 800cdd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cddc:	d166      	bne.n	800ceac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cdde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cde2:	2b08      	cmp	r3, #8
 800cde4:	d827      	bhi.n	800ce36 <UART_SetConfig+0x49a>
 800cde6:	a201      	add	r2, pc, #4	; (adr r2, 800cdec <UART_SetConfig+0x450>)
 800cde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdec:	0800ce11 	.word	0x0800ce11
 800cdf0:	0800ce19 	.word	0x0800ce19
 800cdf4:	0800ce21 	.word	0x0800ce21
 800cdf8:	0800ce37 	.word	0x0800ce37
 800cdfc:	0800ce27 	.word	0x0800ce27
 800ce00:	0800ce37 	.word	0x0800ce37
 800ce04:	0800ce37 	.word	0x0800ce37
 800ce08:	0800ce37 	.word	0x0800ce37
 800ce0c:	0800ce2f 	.word	0x0800ce2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce10:	f7fc fff4 	bl	8009dfc <HAL_RCC_GetPCLK1Freq>
 800ce14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce16:	e014      	b.n	800ce42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce18:	f7fd f806 	bl	8009e28 <HAL_RCC_GetPCLK2Freq>
 800ce1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce1e:	e010      	b.n	800ce42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce20:	4b4e      	ldr	r3, [pc, #312]	; (800cf5c <UART_SetConfig+0x5c0>)
 800ce22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce24:	e00d      	b.n	800ce42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce26:	f7fc ff7b 	bl	8009d20 <HAL_RCC_GetSysClockFreq>
 800ce2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce2c:	e009      	b.n	800ce42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce34:	e005      	b.n	800ce42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ce40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 8090 	beq.w	800cf6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	4a44      	ldr	r2, [pc, #272]	; (800cf60 <UART_SetConfig+0x5c4>)
 800ce50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce54:	461a      	mov	r2, r3
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce5c:	005a      	lsls	r2, r3, #1
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	085b      	lsrs	r3, r3, #1
 800ce64:	441a      	add	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	2b0f      	cmp	r3, #15
 800ce74:	d916      	bls.n	800cea4 <UART_SetConfig+0x508>
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce7c:	d212      	bcs.n	800cea4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	f023 030f 	bic.w	r3, r3, #15
 800ce86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	085b      	lsrs	r3, r3, #1
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	f003 0307 	and.w	r3, r3, #7
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	8bfb      	ldrh	r3, [r7, #30]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	8bfa      	ldrh	r2, [r7, #30]
 800cea0:	60da      	str	r2, [r3, #12]
 800cea2:	e062      	b.n	800cf6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ceaa:	e05e      	b.n	800cf6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ceac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ceb0:	2b08      	cmp	r3, #8
 800ceb2:	d828      	bhi.n	800cf06 <UART_SetConfig+0x56a>
 800ceb4:	a201      	add	r2, pc, #4	; (adr r2, 800cebc <UART_SetConfig+0x520>)
 800ceb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceba:	bf00      	nop
 800cebc:	0800cee1 	.word	0x0800cee1
 800cec0:	0800cee9 	.word	0x0800cee9
 800cec4:	0800cef1 	.word	0x0800cef1
 800cec8:	0800cf07 	.word	0x0800cf07
 800cecc:	0800cef7 	.word	0x0800cef7
 800ced0:	0800cf07 	.word	0x0800cf07
 800ced4:	0800cf07 	.word	0x0800cf07
 800ced8:	0800cf07 	.word	0x0800cf07
 800cedc:	0800ceff 	.word	0x0800ceff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cee0:	f7fc ff8c 	bl	8009dfc <HAL_RCC_GetPCLK1Freq>
 800cee4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cee6:	e014      	b.n	800cf12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cee8:	f7fc ff9e 	bl	8009e28 <HAL_RCC_GetPCLK2Freq>
 800ceec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ceee:	e010      	b.n	800cf12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cef0:	4b1a      	ldr	r3, [pc, #104]	; (800cf5c <UART_SetConfig+0x5c0>)
 800cef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cef4:	e00d      	b.n	800cf12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cef6:	f7fc ff13 	bl	8009d20 <HAL_RCC_GetSysClockFreq>
 800cefa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cefc:	e009      	b.n	800cf12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cefe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cf04:	e005      	b.n	800cf12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cf06:	2300      	movs	r3, #0
 800cf08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cf10:	bf00      	nop
    }

    if (pclk != 0U)
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d028      	beq.n	800cf6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1c:	4a10      	ldr	r2, [pc, #64]	; (800cf60 <UART_SetConfig+0x5c4>)
 800cf1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf22:	461a      	mov	r2, r3
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	085b      	lsrs	r3, r3, #1
 800cf30:	441a      	add	r2, r3
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	2b0f      	cmp	r3, #15
 800cf40:	d910      	bls.n	800cf64 <UART_SetConfig+0x5c8>
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf48:	d20c      	bcs.n	800cf64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	60da      	str	r2, [r3, #12]
 800cf54:	e009      	b.n	800cf6a <UART_SetConfig+0x5ce>
 800cf56:	bf00      	nop
 800cf58:	40008000 	.word	0x40008000
 800cf5c:	00f42400 	.word	0x00f42400
 800cf60:	080155c4 	.word	0x080155c4
      }
      else
      {
        ret = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	2200      	movs	r2, #0
 800cf84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cf86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3730      	adds	r7, #48	; 0x30
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cf94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00a      	beq.n	800cfbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc2:	f003 0302 	and.w	r3, r3, #2
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00a      	beq.n	800d002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	430a      	orrs	r2, r1
 800d000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d006:	f003 0308 	and.w	r3, r3, #8
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00a      	beq.n	800d024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	430a      	orrs	r2, r1
 800d022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d028:	f003 0310 	and.w	r3, r3, #16
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00a      	beq.n	800d046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	430a      	orrs	r2, r1
 800d044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00a      	beq.n	800d068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	430a      	orrs	r2, r1
 800d066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d070:	2b00      	cmp	r3, #0
 800d072:	d01a      	beq.n	800d0aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	430a      	orrs	r2, r1
 800d088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d08e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d092:	d10a      	bne.n	800d0aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	430a      	orrs	r2, r1
 800d0a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00a      	beq.n	800d0cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	605a      	str	r2, [r3, #4]
  }
}
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0e8:	f7f7 feba 	bl	8004e60 <HAL_GetTick>
 800d0ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f003 0308 	and.w	r3, r3, #8
 800d0f8:	2b08      	cmp	r3, #8
 800d0fa:	d10e      	bne.n	800d11a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f82f 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d116:	2303      	movs	r3, #3
 800d118:	e025      	b.n	800d166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f003 0304 	and.w	r3, r3, #4
 800d124:	2b04      	cmp	r3, #4
 800d126:	d10e      	bne.n	800d146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f819 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e00f      	b.n	800d166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2220      	movs	r2, #32
 800d14a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2220      	movs	r2, #32
 800d152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b09c      	sub	sp, #112	; 0x70
 800d172:	af00      	add	r7, sp, #0
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	60b9      	str	r1, [r7, #8]
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d17e:	e0a9      	b.n	800d2d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d186:	f000 80a5 	beq.w	800d2d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d18a:	f7f7 fe69 	bl	8004e60 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d196:	429a      	cmp	r2, r3
 800d198:	d302      	bcc.n	800d1a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d140      	bne.n	800d222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a8:	e853 3f00 	ldrex	r3, [r3]
 800d1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1b4:	667b      	str	r3, [r7, #100]	; 0x64
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1c6:	e841 2300 	strex	r3, r2, [r1]
 800d1ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1e6      	bne.n	800d1a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1dc:	e853 3f00 	ldrex	r3, [r3]
 800d1e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	f023 0301 	bic.w	r3, r3, #1
 800d1e8:	663b      	str	r3, [r7, #96]	; 0x60
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3308      	adds	r3, #8
 800d1f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1fa:	e841 2300 	strex	r3, r2, [r1]
 800d1fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e5      	bne.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2220      	movs	r2, #32
 800d20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2220      	movs	r2, #32
 800d212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d21e:	2303      	movs	r3, #3
 800d220:	e069      	b.n	800d2f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d051      	beq.n	800d2d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	69db      	ldr	r3, [r3, #28]
 800d236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d23e:	d149      	bne.n	800d2d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	e853 3f00 	ldrex	r3, [r3]
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d25e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	461a      	mov	r2, r3
 800d266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d268:	637b      	str	r3, [r7, #52]	; 0x34
 800d26a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d270:	e841 2300 	strex	r3, r2, [r1]
 800d274:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1e6      	bne.n	800d24a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	e853 3f00 	ldrex	r3, [r3]
 800d28a:	613b      	str	r3, [r7, #16]
   return(result);
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	f023 0301 	bic.w	r3, r3, #1
 800d292:	66bb      	str	r3, [r7, #104]	; 0x68
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3308      	adds	r3, #8
 800d29a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d29c:	623a      	str	r2, [r7, #32]
 800d29e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a0:	69f9      	ldr	r1, [r7, #28]
 800d2a2:	6a3a      	ldr	r2, [r7, #32]
 800d2a4:	e841 2300 	strex	r3, r2, [r1]
 800d2a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1e5      	bne.n	800d27c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2220      	movs	r2, #32
 800d2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2220      	movs	r2, #32
 800d2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2220      	movs	r2, #32
 800d2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e010      	b.n	800d2f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	69da      	ldr	r2, [r3, #28]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	4013      	ands	r3, r2
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	bf0c      	ite	eq
 800d2e4:	2301      	moveq	r3, #1
 800d2e6:	2300      	movne	r3, #0
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	f43f af46 	beq.w	800d180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3770      	adds	r7, #112	; 0x70
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b08f      	sub	sp, #60	; 0x3c
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30c:	6a3b      	ldr	r3, [r7, #32]
 800d30e:	e853 3f00 	ldrex	r3, [r3]
 800d312:	61fb      	str	r3, [r7, #28]
   return(result);
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d31a:	637b      	str	r3, [r7, #52]	; 0x34
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	461a      	mov	r2, r3
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d326:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d32c:	e841 2300 	strex	r3, r2, [r1]
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1e6      	bne.n	800d306 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3308      	adds	r3, #8
 800d33e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	e853 3f00 	ldrex	r3, [r3]
 800d346:	60bb      	str	r3, [r7, #8]
   return(result);
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d34e:	633b      	str	r3, [r7, #48]	; 0x30
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3308      	adds	r3, #8
 800d356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d358:	61ba      	str	r2, [r7, #24]
 800d35a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35c:	6979      	ldr	r1, [r7, #20]
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	e841 2300 	strex	r3, r2, [r1]
 800d364:	613b      	str	r3, [r7, #16]
   return(result);
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d1e5      	bne.n	800d338 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2220      	movs	r2, #32
 800d370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d374:	bf00      	nop
 800d376:	373c      	adds	r7, #60	; 0x3c
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d380:	b480      	push	{r7}
 800d382:	b095      	sub	sp, #84	; 0x54
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d390:	e853 3f00 	ldrex	r3, [r3]
 800d394:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d39c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a6:	643b      	str	r3, [r7, #64]	; 0x40
 800d3a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3ae:	e841 2300 	strex	r3, r2, [r1]
 800d3b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1e6      	bne.n	800d388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	e853 3f00 	ldrex	r3, [r3]
 800d3c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3d0:	f023 0301 	bic.w	r3, r3, #1
 800d3d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3308      	adds	r3, #8
 800d3dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e6:	e841 2300 	strex	r3, r2, [r1]
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1e3      	bne.n	800d3ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d118      	bne.n	800d42c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	60bb      	str	r3, [r7, #8]
   return(result);
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	f023 0310 	bic.w	r3, r3, #16
 800d40e:	647b      	str	r3, [r7, #68]	; 0x44
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	461a      	mov	r2, r3
 800d416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d418:	61bb      	str	r3, [r7, #24]
 800d41a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	6979      	ldr	r1, [r7, #20]
 800d41e:	69ba      	ldr	r2, [r7, #24]
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	613b      	str	r3, [r7, #16]
   return(result);
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e6      	bne.n	800d3fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2220      	movs	r2, #32
 800d430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d440:	bf00      	nop
 800d442:	3754      	adds	r7, #84	; 0x54
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b090      	sub	sp, #64	; 0x40
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d458:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f003 0320 	and.w	r3, r3, #32
 800d464:	2b00      	cmp	r3, #0
 800d466:	d137      	bne.n	800d4d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d46a:	2200      	movs	r2, #0
 800d46c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3308      	adds	r3, #8
 800d476:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	e853 3f00 	ldrex	r3, [r3]
 800d47e:	623b      	str	r3, [r7, #32]
   return(result);
 800d480:	6a3b      	ldr	r3, [r7, #32]
 800d482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d486:	63bb      	str	r3, [r7, #56]	; 0x38
 800d488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3308      	adds	r3, #8
 800d48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d490:	633a      	str	r2, [r7, #48]	; 0x30
 800d492:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d494:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d498:	e841 2300 	strex	r3, r2, [r1]
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1e5      	bne.n	800d470 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c2:	61fb      	str	r3, [r7, #28]
 800d4c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	69b9      	ldr	r1, [r7, #24]
 800d4c8:	69fa      	ldr	r2, [r7, #28]
 800d4ca:	e841 2300 	strex	r3, r2, [r1]
 800d4ce:	617b      	str	r3, [r7, #20]
   return(result);
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e6      	bne.n	800d4a4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4d6:	e002      	b.n	800d4de <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d4d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4da:	f7f5 fedd 	bl	8003298 <HAL_UART_TxCpltCallback>
}
 800d4de:	bf00      	nop
 800d4e0:	3740      	adds	r7, #64	; 0x40
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff fa31 	bl	800c95c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4fa:	bf00      	nop
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b086      	sub	sp, #24
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d50e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d516:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52a:	2b80      	cmp	r3, #128	; 0x80
 800d52c:	d109      	bne.n	800d542 <UART_DMAError+0x40>
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2b21      	cmp	r3, #33	; 0x21
 800d532:	d106      	bne.n	800d542 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2200      	movs	r2, #0
 800d538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d53c:	6978      	ldr	r0, [r7, #20]
 800d53e:	f7ff fede 	bl	800d2fe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d54c:	2b40      	cmp	r3, #64	; 0x40
 800d54e:	d109      	bne.n	800d564 <UART_DMAError+0x62>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b22      	cmp	r3, #34	; 0x22
 800d554:	d106      	bne.n	800d564 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2200      	movs	r2, #0
 800d55a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d55e:	6978      	ldr	r0, [r7, #20]
 800d560:	f7ff ff0e 	bl	800d380 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d56a:	f043 0210 	orr.w	r2, r3, #16
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d574:	6978      	ldr	r0, [r7, #20]
 800d576:	f7ff f9fb 	bl	800c970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d57a:	bf00      	nop
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2200      	movs	r2, #0
 800d594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7ff f9e5 	bl	800c970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5a6:	bf00      	nop
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b088      	sub	sp, #32
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	e853 3f00 	ldrex	r3, [r3]
 800d5c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5ca:	61fb      	str	r3, [r7, #28]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	61bb      	str	r3, [r7, #24]
 800d5d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d8:	6979      	ldr	r1, [r7, #20]
 800d5da:	69ba      	ldr	r2, [r7, #24]
 800d5dc:	e841 2300 	strex	r3, r2, [r1]
 800d5e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e6      	bne.n	800d5b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2220      	movs	r2, #32
 800d5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7f5 fe4e 	bl	8003298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5fc:	bf00      	nop
 800d5fe:	3720      	adds	r7, #32
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	e058      	b.n	800d6ce <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7f7 f9de 	bl	80049f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2224      	movs	r2, #36	; 0x24
 800d638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f022 0201 	bic.w	r2, r2, #1
 800d64a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7ff f9a5 	bl	800c99c <UART_SetConfig>
 800d652:	4603      	mov	r3, r0
 800d654:	2b01      	cmp	r3, #1
 800d656:	d101      	bne.n	800d65c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	e038      	b.n	800d6ce <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7ff fc95 	bl	800cf94 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d678:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	055b      	lsls	r3, r3, #21
 800d692:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	041b      	lsls	r3, r3, #16
 800d698:	697a      	ldr	r2, [r7, #20]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800d6a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	6812      	ldr	r2, [r2, #0]
 800d6b0:	6979      	ldr	r1, [r7, #20]
 800d6b2:	430b      	orrs	r3, r1
 800d6b4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f042 0201 	orr.w	r2, r2, #1
 800d6c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff fd06 	bl	800d0d8 <UART_CheckIdleState>
 800d6cc:	4603      	mov	r3, r0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3718      	adds	r7, #24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b083      	sub	sp, #12
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6de:	bf00      	nop
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b083      	sub	sp, #12
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d6f2:	bf00      	nop
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b083      	sub	sp, #12
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d720:	2b01      	cmp	r3, #1
 800d722:	d101      	bne.n	800d728 <HAL_UARTEx_EnableFifoMode+0x16>
 800d724:	2302      	movs	r3, #2
 800d726:	e02b      	b.n	800d780 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2224      	movs	r2, #36	; 0x24
 800d734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f022 0201 	bic.w	r2, r2, #1
 800d74e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d756:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d75e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f8c3 	bl	800d8f4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2220      	movs	r2, #32
 800d772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d796:	2b01      	cmp	r3, #1
 800d798:	d101      	bne.n	800d79e <HAL_UARTEx_DisableFifoMode+0x16>
 800d79a:	2302      	movs	r3, #2
 800d79c:	e027      	b.n	800d7ee <HAL_UARTEx_DisableFifoMode+0x66>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2224      	movs	r2, #36	; 0x24
 800d7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f022 0201 	bic.w	r2, r2, #1
 800d7c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2220      	movs	r2, #32
 800d7e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b084      	sub	sp, #16
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d101      	bne.n	800d812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d80e:	2302      	movs	r3, #2
 800d810:	e02d      	b.n	800d86e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2224      	movs	r2, #36	; 0x24
 800d81e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f022 0201 	bic.w	r2, r2, #1
 800d838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	430a      	orrs	r2, r1
 800d84c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f850 	bl	800d8f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2220      	movs	r2, #32
 800d860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b084      	sub	sp, #16
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d886:	2b01      	cmp	r3, #1
 800d888:	d101      	bne.n	800d88e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d88a:	2302      	movs	r3, #2
 800d88c:	e02d      	b.n	800d8ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2224      	movs	r2, #36	; 0x24
 800d89a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f022 0201 	bic.w	r2, r2, #1
 800d8b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	430a      	orrs	r2, r1
 800d8c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f812 	bl	800d8f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d900:	2b00      	cmp	r3, #0
 800d902:	d108      	bne.n	800d916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d914:	e031      	b.n	800d97a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d916:	2308      	movs	r3, #8
 800d918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d91a:	2308      	movs	r3, #8
 800d91c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	0e5b      	lsrs	r3, r3, #25
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0307 	and.w	r3, r3, #7
 800d92c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	0f5b      	lsrs	r3, r3, #29
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f003 0307 	and.w	r3, r3, #7
 800d93c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
 800d940:	7b3a      	ldrb	r2, [r7, #12]
 800d942:	4911      	ldr	r1, [pc, #68]	; (800d988 <UARTEx_SetNbDataToProcess+0x94>)
 800d944:	5c8a      	ldrb	r2, [r1, r2]
 800d946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d94a:	7b3a      	ldrb	r2, [r7, #12]
 800d94c:	490f      	ldr	r1, [pc, #60]	; (800d98c <UARTEx_SetNbDataToProcess+0x98>)
 800d94e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d950:	fb93 f3f2 	sdiv	r3, r3, r2
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	7b7a      	ldrb	r2, [r7, #13]
 800d960:	4909      	ldr	r1, [pc, #36]	; (800d988 <UARTEx_SetNbDataToProcess+0x94>)
 800d962:	5c8a      	ldrb	r2, [r1, r2]
 800d964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d968:	7b7a      	ldrb	r2, [r7, #13]
 800d96a:	4908      	ldr	r1, [pc, #32]	; (800d98c <UARTEx_SetNbDataToProcess+0x98>)
 800d96c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d96e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d972:	b29a      	uxth	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d97a:	bf00      	nop
 800d97c:	3714      	adds	r7, #20
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	080155dc 	.word	0x080155dc
 800d98c:	080155e4 	.word	0x080155e4

0800d990 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	d122      	bne.n	800d9ec <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	021b      	lsls	r3, r3, #8
 800d9b0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	3302      	adds	r3, #2
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	89bb      	ldrh	r3, [r7, #12]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800d9c0:	89bb      	ldrh	r3, [r7, #12]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF], usRegAddress, 1, MB_REG_WRITE );
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	1cd8      	adds	r0, r3, #3
 800d9ca:	89b9      	ldrh	r1, [r7, #12]
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f7f5 fb14 	bl	8002ffc <eMBRegHoldingCB>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	72fb      	strb	r3, [r7, #11]

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800d9d8:	7afb      	ldrb	r3, [r7, #11]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d008      	beq.n	800d9f0 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800d9de:	7afb      	ldrb	r3, [r7, #11]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 fa09 	bl	800ddf8 <prveMBError2Exception>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	73fb      	strb	r3, [r7, #15]
 800d9ea:	e001      	b.n	800d9f0 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b084      	sub	sp, #16
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800da04:	2300      	movs	r3, #0
 800da06:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	2b05      	cmp	r3, #5
 800da0e:	d946      	bls.n	800da9e <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3301      	adds	r3, #1
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	b29b      	uxth	r3, r3
 800da18:	021b      	lsls	r3, r3, #8
 800da1a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	3302      	adds	r3, #2
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	b29a      	uxth	r2, r3
 800da24:	89bb      	ldrh	r3, [r7, #12]
 800da26:	4313      	orrs	r3, r2
 800da28:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800da2a:	89bb      	ldrh	r3, [r7, #12]
 800da2c:	3301      	adds	r3, #1
 800da2e:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	3303      	adds	r3, #3
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	b29b      	uxth	r3, r3
 800da38:	021b      	lsls	r3, r3, #8
 800da3a:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	b29a      	uxth	r2, r3
 800da44:	897b      	ldrh	r3, [r7, #10]
 800da46:	4313      	orrs	r3, r2
 800da48:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	795b      	ldrb	r3, [r3, #5]
 800da4e:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 800da50:	897b      	ldrh	r3, [r7, #10]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d020      	beq.n	800da98 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 800da56:	897b      	ldrh	r3, [r7, #10]
 800da58:	2b78      	cmp	r3, #120	; 0x78
 800da5a:	d81d      	bhi.n	800da98 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800da5c:	897b      	ldrh	r3, [r7, #10]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 800da64:	7a7a      	ldrb	r2, [r7, #9]
 800da66:	429a      	cmp	r2, r3
 800da68:	d116      	bne.n	800da98 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],  usRegAddress, usRegCount, MB_REG_WRITE );
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	1d98      	adds	r0, r3, #6
 800da6e:	897a      	ldrh	r2, [r7, #10]
 800da70:	89b9      	ldrh	r1, [r7, #12]
 800da72:	2301      	movs	r3, #1
 800da74:	f7f5 fac2 	bl	8002ffc <eMBRegHoldingCB>
 800da78:	4603      	mov	r3, r0
 800da7a:	723b      	strb	r3, [r7, #8]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800da7c:	7a3b      	ldrb	r3, [r7, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d006      	beq.n	800da90 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800da82:	7a3b      	ldrb	r3, [r7, #8]
 800da84:	4618      	mov	r0, r3
 800da86:	f000 f9b7 	bl	800ddf8 <prveMBError2Exception>
 800da8a:	4603      	mov	r3, r0
 800da8c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800da8e:	e008      	b.n	800daa2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	2205      	movs	r2, #5
 800da94:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800da96:	e004      	b.n	800daa2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800da98:	2303      	movs	r3, #3
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	e001      	b.n	800daa2 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800da9e:	2303      	movs	r3, #3
 800daa0:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	881b      	ldrh	r3, [r3, #0]
 800dabe:	2b05      	cmp	r3, #5
 800dac0:	d15c      	bne.n	800db7c <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3301      	adds	r3, #1
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	021b      	lsls	r3, r3, #8
 800dacc:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3302      	adds	r3, #2
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	8abb      	ldrh	r3, [r7, #20]
 800dad8:	4313      	orrs	r3, r2
 800dada:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800dadc:	8abb      	ldrh	r3, [r7, #20]
 800dade:	3301      	adds	r3, #1
 800dae0:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	3303      	adds	r3, #3
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	021b      	lsls	r3, r3, #8
 800daec:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	3304      	adds	r3, #4
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800daf6:	8a7b      	ldrh	r3, [r7, #18]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d03c      	beq.n	800db76 <eMBFuncReadHoldingRegister+0xca>
 800dafc:	8a7b      	ldrh	r3, [r7, #18]
 800dafe:	2b7d      	cmp	r3, #125	; 0x7d
 800db00:	d839      	bhi.n	800db76 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2200      	movs	r2, #0
 800db0a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	1c5a      	adds	r2, r3, #1
 800db10:	60fa      	str	r2, [r7, #12]
 800db12:	2203      	movs	r2, #3
 800db14:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	3301      	adds	r3, #1
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800db22:	8a7b      	ldrh	r3, [r7, #18]
 800db24:	b2da      	uxtb	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	1c59      	adds	r1, r3, #1
 800db2a:	60f9      	str	r1, [r7, #12]
 800db2c:	0052      	lsls	r2, r2, #1
 800db2e:	b2d2      	uxtb	r2, r2
 800db30:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	3301      	adds	r3, #1
 800db38:	b29a      	uxth	r2, r3
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800db3e:	8a7a      	ldrh	r2, [r7, #18]
 800db40:	8ab9      	ldrh	r1, [r7, #20]
 800db42:	2300      	movs	r3, #0
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f7f5 fa59 	bl	8002ffc <eMBRegHoldingCB>
 800db4a:	4603      	mov	r3, r0
 800db4c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800db4e:	7afb      	ldrb	r3, [r7, #11]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d006      	beq.n	800db62 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800db54:	7afb      	ldrb	r3, [r7, #11]
 800db56:	4618      	mov	r0, r3
 800db58:	f000 f94e 	bl	800ddf8 <prveMBError2Exception>
 800db5c:	4603      	mov	r3, r0
 800db5e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800db60:	e00e      	b.n	800db80 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	881a      	ldrh	r2, [r3, #0]
 800db66:	8a7b      	ldrh	r3, [r7, #18]
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4413      	add	r3, r2
 800db6e:	b29a      	uxth	r2, r3
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800db74:	e004      	b.n	800db80 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800db76:	2303      	movs	r3, #3
 800db78:	75fb      	strb	r3, [r7, #23]
 800db7a:	e001      	b.n	800db80 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800db7c:	2303      	movs	r3, #3
 800db7e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800db80:	7dfb      	ldrb	r3, [r7, #23]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b086      	sub	sp, #24
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800db94:	2300      	movs	r3, #0
 800db96:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	881b      	ldrh	r3, [r3, #0]
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	f240 8099 	bls.w	800dcd4 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	3301      	adds	r3, #1
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3302      	adds	r3, #2
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	8abb      	ldrh	r3, [r7, #20]
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800dbbc:	8abb      	ldrh	r3, [r7, #20]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3303      	adds	r3, #3
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	021b      	lsls	r3, r3, #8
 800dbcc:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	8a7b      	ldrh	r3, [r7, #18]
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3305      	adds	r3, #5
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	021b      	lsls	r3, r3, #8
 800dbe6:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	3306      	adds	r3, #6
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	8a3b      	ldrh	r3, [r7, #16]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800dbf6:	8a3b      	ldrh	r3, [r7, #16]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3307      	adds	r3, #7
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	021b      	lsls	r3, r3, #8
 800dc06:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	89fb      	ldrh	r3, [r7, #14]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7a5b      	ldrb	r3, [r3, #9]
 800dc1a:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800dc1c:	8a7b      	ldrh	r3, [r7, #18]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d056      	beq.n	800dcd0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800dc22:	8a7b      	ldrh	r3, [r7, #18]
 800dc24:	2b7d      	cmp	r3, #125	; 0x7d
 800dc26:	d853      	bhi.n	800dcd0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 800dc28:	89fb      	ldrh	r3, [r7, #14]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d050      	beq.n	800dcd0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800dc2e:	89fb      	ldrh	r3, [r7, #14]
 800dc30:	2b79      	cmp	r3, #121	; 0x79
 800dc32:	d84d      	bhi.n	800dcd0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800dc34:	89fb      	ldrh	r3, [r7, #14]
 800dc36:	005a      	lsls	r2, r3, #1
 800dc38:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d148      	bne.n	800dcd0 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF], usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f103 000a 	add.w	r0, r3, #10
 800dc44:	89fa      	ldrh	r2, [r7, #14]
 800dc46:	8a39      	ldrh	r1, [r7, #16]
 800dc48:	2301      	movs	r3, #1
 800dc4a:	f7f5 f9d7 	bl	8002ffc <eMBRegHoldingCB>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	75bb      	strb	r3, [r7, #22]

            if( eRegStatus == MB_ENOERR )
 800dc52:	7dbb      	ldrb	r3, [r7, #22]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d131      	bne.n	800dcbc <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	60ba      	str	r2, [r7, #8]
 800dc68:	2217      	movs	r2, #23
 800dc6a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	3301      	adds	r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800dc78:	8a7b      	ldrh	r3, [r7, #18]
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	1c59      	adds	r1, r3, #1
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	0052      	lsls	r2, r2, #1
 800dc84:	b2d2      	uxtb	r2, r2
 800dc86:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800dc94:	8a7a      	ldrh	r2, [r7, #18]
 800dc96:	8ab9      	ldrh	r1, [r7, #20]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	68b8      	ldr	r0, [r7, #8]
 800dc9c:	f7f5 f9ae 	bl	8002ffc <eMBRegHoldingCB>
 800dca0:	4603      	mov	r3, r0
 800dca2:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 800dca4:	7dbb      	ldrb	r3, [r7, #22]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d108      	bne.n	800dcbc <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	881a      	ldrh	r2, [r3, #0]
 800dcae:	8a7b      	ldrh	r3, [r7, #18]
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800dcbc:	7dbb      	ldrb	r3, [r7, #22]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d008      	beq.n	800dcd4 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800dcc2:	7dbb      	ldrb	r3, [r7, #22]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 f897 	bl	800ddf8 <prveMBError2Exception>
 800dcca:	4603      	mov	r3, r0
 800dccc:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800dcce:	e001      	b.n	800dcd4 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b086      	sub	sp, #24
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800dce8:	2300      	movs	r3, #0
 800dcea:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	2b05      	cmp	r3, #5
 800dcf2:	d15d      	bne.n	800ddb0 <eMBFuncReadInputRegister+0xd2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	3302      	adds	r3, #2
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	8abb      	ldrh	r3, [r7, #20]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800dd0e:	8abb      	ldrh	r3, [r7, #20]
 800dd10:	3301      	adds	r3, #1
 800dd12:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3303      	adds	r3, #3
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	021b      	lsls	r3, r3, #8
 800dd1e:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3304      	adds	r3, #4
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	8a7b      	ldrh	r3, [r7, #18]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	827b      	strh	r3, [r7, #18]

        /* Проверьте, является ли допустимым количество регистров для чтения.
         * Если нет, верните исключение недопустимого значения данных Modbus.
         */
        if( ( usRegCount >= 1 ) && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800dd2e:	8a7b      	ldrh	r3, [r7, #18]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d03a      	beq.n	800ddaa <eMBFuncReadInputRegister+0xcc>
 800dd34:	8a7b      	ldrh	r3, [r7, #18]
 800dd36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd3a:	d236      	bcs.n	800ddaa <eMBFuncReadInputRegister+0xcc>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	2200      	movs	r2, #0
 800dd44:	801a      	strh	r2, [r3, #0]

            /* Первый байт содержит код функции. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	60fa      	str	r2, [r7, #12]
 800dd4c:	2204      	movs	r2, #4
 800dd4e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	3301      	adds	r3, #1
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	801a      	strh	r2, [r3, #0]

            /* Второй байт в ответе содержит количество байтов. */
            /////////////////////////////////////////////////////// МОЁ изменение ///////////////
            // *pucFrameCur++ =  ( UCHAR )( usRegCount * 2 );
            // usRegCount =1; // МОЁ изменение, всегда будет 1 пакет данных, пакет состоит из 40_WORD это значит 80 байт
            *pucFrameCur++ = 80; // МОЁ изменение, все коментарии почему , в   main.c => eMBRegInputCB()
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	60fa      	str	r2, [r7, #12]
 800dd62:	2250      	movs	r2, #80	; 0x50
 800dd64:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	801a      	strh	r2, [r3, #0]

            eRegStatus = eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800dd72:	8a7a      	ldrh	r2, [r7, #18]
 800dd74:	8abb      	ldrh	r3, [r7, #20]
 800dd76:	4619      	mov	r1, r3
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f7f5 f8e7 	bl	8002f4c <eMBRegInputCB>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	72fb      	strb	r3, [r7, #11]

            /* Если произошла ошибка, преобразуйте ее в исключение Modbus. */
            if( eRegStatus != MB_ENOERR )
 800dd82:	7afb      	ldrb	r3, [r7, #11]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d006      	beq.n	800dd96 <eMBFuncReadInputRegister+0xb8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800dd88:	7afb      	ldrb	r3, [r7, #11]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 f834 	bl	800ddf8 <prveMBError2Exception>
 800dd90:	4603      	mov	r3, r0
 800dd92:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800dd94:	e00e      	b.n	800ddb4 <eMBFuncReadInputRegister+0xd6>
            }
            else
            {
                *usLen += usRegCount * 2;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	881a      	ldrh	r2, [r3, #0]
 800dd9a:	8a7b      	ldrh	r3, [r7, #18]
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	4413      	add	r3, r2
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800dda8:	e004      	b.n	800ddb4 <eMBFuncReadInputRegister+0xd6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	75fb      	strb	r3, [r7, #23]
 800ddae:	e001      	b.n	800ddb4 <eMBFuncReadInputRegister+0xd6>
        }
    }
    else
    {
        /* Не может быть допустимым запросом на чтение входного регистра, поскольку длина указана неверно. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
	...

0800ddc0 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	4a08      	ldr	r2, [pc, #32]	; (800ddf0 <eMBFuncReportSlaveID+0x30>)
 800ddd0:	8812      	ldrh	r2, [r2, #0]
 800ddd2:	4908      	ldr	r1, [pc, #32]	; (800ddf4 <eMBFuncReportSlaveID+0x34>)
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f001 fc05 	bl	800f5e4 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <eMBFuncReportSlaveID+0x30>)
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	3301      	adds	r3, #1
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	20012448 	.word	0x20012448
 800ddf4:	20012428 	.word	0x20012428

0800ddf8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	4603      	mov	r3, r0
 800de00:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800de02:	79fb      	ldrb	r3, [r7, #7]
 800de04:	2b07      	cmp	r3, #7
 800de06:	d00c      	beq.n	800de22 <prveMBError2Exception+0x2a>
 800de08:	2b07      	cmp	r3, #7
 800de0a:	dc0d      	bgt.n	800de28 <prveMBError2Exception+0x30>
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <prveMBError2Exception+0x1e>
 800de10:	2b01      	cmp	r3, #1
 800de12:	d003      	beq.n	800de1c <prveMBError2Exception+0x24>
 800de14:	e008      	b.n	800de28 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800de16:	2300      	movs	r3, #0
 800de18:	73fb      	strb	r3, [r7, #15]
            break;
 800de1a:	e008      	b.n	800de2e <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800de1c:	2302      	movs	r3, #2
 800de1e:	73fb      	strb	r3, [r7, #15]
            break;
 800de20:	e005      	b.n	800de2e <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800de22:	2306      	movs	r3, #6
 800de24:	73fb      	strb	r3, [r7, #15]
            break;
 800de26:	e002      	b.n	800de2e <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800de28:	2304      	movs	r3, #4
 800de2a:	73fb      	strb	r3, [r7, #15]
            break;
 800de2c:	bf00      	nop
    }

    return eStatus;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	4603      	mov	r3, r0
 800de46:	71fb      	strb	r3, [r7, #7]
 800de48:	460b      	mov	r3, r1
 800de4a:	71bb      	strb	r3, [r7, #6]
 800de4c:	4613      	mov	r3, r2
 800de4e:	717b      	strb	r3, [r7, #5]
    /* проверка предварительных условий */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||  ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800de50:	79bb      	ldrb	r3, [r7, #6]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d005      	beq.n	800de62 <eMBInit+0x26>
 800de56:	79bb      	ldrb	r3, [r7, #6]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <eMBInit+0x26>
 800de5c:	79bb      	ldrb	r3, [r7, #6]
 800de5e:	2bf7      	cmp	r3, #247	; 0xf7
 800de60:	d901      	bls.n	800de66 <eMBInit+0x2a>
    	{ ucSlaveAddress = 7;  } // по умолчанию такой адрес будет, а потому что
 800de62:	2307      	movs	r3, #7
 800de64:	71bb      	strb	r3, [r7, #6]

    ucMBAddress = ucSlaveAddress; // раскинули адрес по этому файлу
 800de66:	4a08      	ldr	r2, [pc, #32]	; (800de88 <eMBInit+0x4c>)
 800de68:	79bb      	ldrb	r3, [r7, #6]
 800de6a:	7013      	strb	r3, [r2, #0]
    timeout_Tim6_50us = 35; // на нашей скорости здесь будет только такой таймаут //////////eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity ); // здесь остался только инит времени тайаута TIM6
 800de6c:	4b07      	ldr	r3, [pc, #28]	; (800de8c <eMBInit+0x50>)
 800de6e:	2223      	movs	r2, #35	; 0x23
 800de70:	801a      	strh	r2, [r3, #0]

    xMBPortEventInit(  ); // сброс очереди событий  ==> в файле portevent.c
 800de72:	f000 f8e9 	bl	800e048 <xMBPortEventInit>
    eMBState = STATE_DISABLED;
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <eMBInit+0x54>)
 800de78:	2201      	movs	r2, #1
 800de7a:	701a      	strb	r2, [r3, #0]

    return MB_ENOERR;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	2001244a 	.word	0x2001244a
 800de8c:	2000060c 	.word	0x2000060c
 800de90:	20000058 	.word	0x20000058

0800de94 <eMBEnable>:



eMBErrorCode
eMBEnable( void )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0
        /* Activate the protocol stack. */
    ENTER_CRITICAL_SECTION(  );
 800de98:	f7f3 fe1c 	bl	8001ad4 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800de9c:	4b08      	ldr	r3, [pc, #32]	; (800dec0 <eMBEnable+0x2c>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE ); // перевод порта в режим приема
 800dea2:	2100      	movs	r1, #0
 800dea4:	2001      	movs	r0, #1
 800dea6:	f000 f911 	bl	800e0cc <vMBPortSerialEnable>
    vMBPortTimersEnable(  ); // старт таймера TIM6 и сброс счетчика в ноль
 800deaa:	f000 f96b 	bl	800e184 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800deae:	f7f3 fe21 	bl	8001af4 <__critical_exit>

    eMBState = STATE_ENABLED;
 800deb2:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <eMBEnable+0x30>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	701a      	strb	r2, [r3, #0]
    return MB_ENOERR;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	200005e8 	.word	0x200005e8
 800dec4:	20000058 	.word	0x20000058

0800dec8 <eMBPoll>:


eMBErrorCode
eMBPoll( void )
{
 800dec8:	b590      	push	{r4, r7, lr}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800dece:	2300      	movs	r3, #0
 800ded0:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    BOOL  flag_event = xMBPortEventGet( &eEvent );
 800ded2:	1c7b      	adds	r3, r7, #1
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 f8db 	bl	800e090 <xMBPortEventGet>
 800deda:	4603      	mov	r3, r0
 800dedc:	70bb      	strb	r3, [r7, #2]

    /* Проверьте, есть ли доступное событие.
     * Если нет, верните управление вызывающему абоненту.
     * В противном случае мы будем обрабатывать это событие. */

    if( flag_event == TRUE ) // если там в файле portevent.c  кемто чемто сформировано событие, тО сейчас мы его обработаем
 800dede:	78bb      	ldrb	r3, [r7, #2]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	f040 8096 	bne.w	800e012 <eMBPoll+0x14a>
    {
    	count_eMBPool=0;
 800dee6:	4b50      	ldr	r3, [pc, #320]	; (800e028 <eMBPoll+0x160>)
 800dee8:	2200      	movs	r2, #0
 800deea:	701a      	strb	r2, [r3, #0]
    	//printf("eMBPoll-STARTevent _eMBState=%d, _eEvent=%d \n", eMBState, eEvent);
        switch ( eEvent )
 800deec:	787b      	ldrb	r3, [r7, #1]
 800deee:	2b03      	cmp	r3, #3
 800def0:	f200 8094 	bhi.w	800e01c <eMBPoll+0x154>
 800def4:	a201      	add	r2, pc, #4	; (adr r2, 800defc <eMBPoll+0x34>)
 800def6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defa:	bf00      	nop
 800defc:	0800e01d 	.word	0x0800e01d
 800df00:	0800df0d 	.word	0x0800df0d
 800df04:	0800df3d 	.word	0x0800df3d
 800df08:	0800e01d 	.word	0x0800e01d
        case EV_READY:
        	//printf( "eMBPoll eEvent <= EV_READY \n");
            break;

        case EV_FRAME_RECEIVED:
            eStatus = eMBRTUReceive( &ucRcvAddress, &ucMBFrame, &usLength );
 800df0c:	4a47      	ldr	r2, [pc, #284]	; (800e02c <eMBPoll+0x164>)
 800df0e:	4948      	ldr	r1, [pc, #288]	; (800e030 <eMBPoll+0x168>)
 800df10:	4848      	ldr	r0, [pc, #288]	; (800e034 <eMBPoll+0x16c>)
 800df12:	f000 f989 	bl	800e228 <eMBRTUReceive>
 800df16:	4603      	mov	r3, r0
 800df18:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800df1a:	78fb      	ldrb	r3, [r7, #3]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d17a      	bne.n	800e016 <eMBPoll+0x14e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800df20:	4b44      	ldr	r3, [pc, #272]	; (800e034 <eMBPoll+0x16c>)
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	4b44      	ldr	r3, [pc, #272]	; (800e038 <eMBPoll+0x170>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d003      	beq.n	800df34 <eMBPoll+0x6c>
 800df2c:	4b41      	ldr	r3, [pc, #260]	; (800e034 <eMBPoll+0x16c>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d170      	bne.n	800e016 <eMBPoll+0x14e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );  // значит фрейм принят, адрес норм, формируем событие - начало обработки
 800df34:	2002      	movs	r0, #2
 800df36:	f000 f895 	bl	800e064 <xMBPortEventPost>
                }
            }
            break;
 800df3a:	e06c      	b.n	800e016 <eMBPoll+0x14e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800df3c:	4b3c      	ldr	r3, [pc, #240]	; (800e030 <eMBPoll+0x168>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	781a      	ldrb	r2, [r3, #0]
 800df42:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <eMBPoll+0x174>)
 800df44:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800df46:	4b3e      	ldr	r3, [pc, #248]	; (800e040 <eMBPoll+0x178>)
 800df48:	2201      	movs	r2, #1
 800df4a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800df4c:	2300      	movs	r3, #0
 800df4e:	607b      	str	r3, [r7, #4]
 800df50:	e01f      	b.n	800df92 <eMBPoll+0xca>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800df52:	4a3c      	ldr	r2, [pc, #240]	; (800e044 <eMBPoll+0x17c>)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d01d      	beq.n	800df9a <eMBPoll+0xd2>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800df5e:	4a39      	ldr	r2, [pc, #228]	; (800e044 <eMBPoll+0x17c>)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800df66:	4b35      	ldr	r3, [pc, #212]	; (800e03c <eMBPoll+0x174>)
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d10e      	bne.n	800df8c <eMBPoll+0xc4>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800df6e:	4a35      	ldr	r2, [pc, #212]	; (800e044 <eMBPoll+0x17c>)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	4413      	add	r3, r2
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	4a2d      	ldr	r2, [pc, #180]	; (800e030 <eMBPoll+0x168>)
 800df7a:	6812      	ldr	r2, [r2, #0]
 800df7c:	492b      	ldr	r1, [pc, #172]	; (800e02c <eMBPoll+0x164>)
 800df7e:	4610      	mov	r0, r2
 800df80:	4798      	blx	r3
 800df82:	4603      	mov	r3, r0
 800df84:	461a      	mov	r2, r3
 800df86:	4b2e      	ldr	r3, [pc, #184]	; (800e040 <eMBPoll+0x178>)
 800df88:	701a      	strb	r2, [r3, #0]
                    break;
 800df8a:	e007      	b.n	800df9c <eMBPoll+0xd4>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3301      	adds	r3, #1
 800df90:	607b      	str	r3, [r7, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b0f      	cmp	r3, #15
 800df96:	dddc      	ble.n	800df52 <eMBPoll+0x8a>
 800df98:	e000      	b.n	800df9c <eMBPoll+0xd4>
                    break;
 800df9a:	bf00      	nop
                }
            }
            //printf("eMBPoll eEvent==EV_EXECUTE  ucFunctionCode=%d \n", ucFunctionCode);

            /* Если запрос не был отправлен на широковещательный адрес, мы возвращаем ответ. !!!!!!!! ВОТ ЗДЕСЬ передача !!!!!!!!!!  */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800df9c:	4b25      	ldr	r3, [pc, #148]	; (800e034 <eMBPoll+0x16c>)
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d03a      	beq.n	800e01a <eMBPoll+0x152>
            {
                if( eException != MB_EX_NONE )
 800dfa4:	4b26      	ldr	r3, [pc, #152]	; (800e040 <eMBPoll+0x178>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01d      	beq.n	800dfe8 <eMBPoll+0x120>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800dfac:	4b1f      	ldr	r3, [pc, #124]	; (800e02c <eMBPoll+0x164>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800dfb2:	4b22      	ldr	r3, [pc, #136]	; (800e03c <eMBPoll+0x174>)
 800dfb4:	781a      	ldrb	r2, [r3, #0]
 800dfb6:	4b1e      	ldr	r3, [pc, #120]	; (800e030 <eMBPoll+0x168>)
 800dfb8:	6819      	ldr	r1, [r3, #0]
 800dfba:	4b1c      	ldr	r3, [pc, #112]	; (800e02c <eMBPoll+0x164>)
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	1c58      	adds	r0, r3, #1
 800dfc0:	b284      	uxth	r4, r0
 800dfc2:	481a      	ldr	r0, [pc, #104]	; (800e02c <eMBPoll+0x164>)
 800dfc4:	8004      	strh	r4, [r0, #0]
 800dfc6:	440b      	add	r3, r1
 800dfc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dfcc:	b2d2      	uxtb	r2, r2
 800dfce:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800dfd0:	4b17      	ldr	r3, [pc, #92]	; (800e030 <eMBPoll+0x168>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	4b15      	ldr	r3, [pc, #84]	; (800e02c <eMBPoll+0x164>)
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	1c59      	adds	r1, r3, #1
 800dfda:	b288      	uxth	r0, r1
 800dfdc:	4913      	ldr	r1, [pc, #76]	; (800e02c <eMBPoll+0x164>)
 800dfde:	8008      	strh	r0, [r1, #0]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	4a17      	ldr	r2, [pc, #92]	; (800e040 <eMBPoll+0x178>)
 800dfe4:	7812      	ldrb	r2, [r2, #0]
 800dfe6:	701a      	strb	r2, [r3, #0]
                }

                // МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////// МОЁ изменение ///////////////
                if (ucMBFrame[MB_PDU_FUNC_OFF] == 4) { usLength =82; }// МОЁ изменение ///////////////// МОЁ изменение ///////////////
 800dfe8:	4b11      	ldr	r3, [pc, #68]	; (800e030 <eMBPoll+0x168>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	2b04      	cmp	r3, #4
 800dff0:	d102      	bne.n	800dff8 <eMBPoll+0x130>
 800dff2:	4b0e      	ldr	r3, [pc, #56]	; (800e02c <eMBPoll+0x164>)
 800dff4:	2252      	movs	r2, #82	; 0x52
 800dff6:	801a      	strh	r2, [r3, #0]
                eStatus = eMBRTUSend( ucMBAddress, ucMBFrame, usLength );
 800dff8:	4b0f      	ldr	r3, [pc, #60]	; (800e038 <eMBPoll+0x170>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	4618      	mov	r0, r3
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <eMBPoll+0x168>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a0a      	ldr	r2, [pc, #40]	; (800e02c <eMBPoll+0x164>)
 800e004:	8812      	ldrh	r2, [r2, #0]
 800e006:	4619      	mov	r1, r3
 800e008:	f000 f958 	bl	800e2bc <eMBRTUSend>
 800e00c:	4603      	mov	r3, r0
 800e00e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800e010:	e003      	b.n	800e01a <eMBPoll+0x152>

        case EV_FRAME_SENT:
            break;
        }
    }
 800e012:	bf00      	nop
 800e014:	e002      	b.n	800e01c <eMBPoll+0x154>
            break;
 800e016:	bf00      	nop
 800e018:	e000      	b.n	800e01c <eMBPoll+0x154>
            break;
 800e01a:	bf00      	nop
    return MB_ENOERR;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	bd90      	pop	{r4, r7, pc}
 800e026:	bf00      	nop
 800e028:	2001244b 	.word	0x2001244b
 800e02c:	20012454 	.word	0x20012454
 800e030:	20012450 	.word	0x20012450
 800e034:	2001244c 	.word	0x2001244c
 800e038:	2001244a 	.word	0x2001244a
 800e03c:	20012456 	.word	0x20012456
 800e040:	20012457 	.word	0x20012457
 800e044:	2000005c 	.word	0x2000005c

0800e048 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800e048:	b480      	push	{r7}
 800e04a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800e04c:	4b04      	ldr	r3, [pc, #16]	; (800e060 <xMBPortEventInit+0x18>)
 800e04e:	2200      	movs	r2, #0
 800e050:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800e052:	2301      	movs	r3, #1
}
 800e054:	4618      	mov	r0, r3
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	20012459 	.word	0x20012459

0800e064 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	4603      	mov	r3, r0
 800e06c:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800e06e:	4b06      	ldr	r3, [pc, #24]	; (800e088 <xMBPortEventPost+0x24>)
 800e070:	2201      	movs	r2, #1
 800e072:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800e074:	4a05      	ldr	r2, [pc, #20]	; (800e08c <xMBPortEventPost+0x28>)
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800e07a:	2301      	movs	r3, #1
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr
 800e088:	20012459 	.word	0x20012459
 800e08c:	20012458 	.word	0x20012458

0800e090 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800e098:	2300      	movs	r3, #0
 800e09a:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 800e09c:	4b09      	ldr	r3, [pc, #36]	; (800e0c4 <xMBPortEventGet+0x34>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d008      	beq.n	800e0b6 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800e0a4:	4b08      	ldr	r3, [pc, #32]	; (800e0c8 <xMBPortEventGet+0x38>)
 800e0a6:	781a      	ldrb	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 800e0ac:	4b05      	ldr	r3, [pc, #20]	; (800e0c4 <xMBPortEventGet+0x34>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800e0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	20012459 	.word	0x20012459
 800e0c8:	20012458 	.word	0x20012458

0800e0cc <vMBPortSerialEnable>:
/* ----------------------- static functions ---------------------------------*/
extern	UART_HandleTypeDef * adr_huart_MB;
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	460a      	mov	r2, r1
 800e0d6:	71fb      	strb	r3, [r7, #7]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	71bb      	strb	r3, [r7, #6]
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
    if(xRxEnable)
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00a      	beq.n	800e0f8 <vMBPortSerialEnable+0x2c>
  {
    __HAL_UART_ENABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800e0e2:	4b15      	ldr	r3, [pc, #84]	; (800e138 <vMBPortSerialEnable+0x6c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	4b13      	ldr	r3, [pc, #76]	; (800e138 <vMBPortSerialEnable+0x6c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f042 0220 	orr.w	r2, r2, #32
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e009      	b.n	800e10c <vMBPortSerialEnable+0x40>
  }
  else
  {
    __HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_RXNE);
 800e0f8:	4b0f      	ldr	r3, [pc, #60]	; (800e138 <vMBPortSerialEnable+0x6c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	4b0d      	ldr	r3, [pc, #52]	; (800e138 <vMBPortSerialEnable+0x6c>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f022 0220 	bic.w	r2, r2, #32
 800e10a:	601a      	str	r2, [r3, #0]
  }

  if(xTxEnable)
 800e10c:	79bb      	ldrb	r3, [r7, #6]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d007      	beq.n	800e122 <vMBPortSerialEnable+0x56>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800e112:	2201      	movs	r2, #1
 800e114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e11c:	f7f9 fb0e 	bl	800773c <HAL_GPIO_WritePin>
  else
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    //__HAL_UART_DISABLE_IT(adr_huart_MB, UART_IT_TXE);
  }
}
 800e120:	e006      	b.n	800e130 <vMBPortSerialEnable+0x64>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800e122:	2200      	movs	r2, #0
 800e124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e12c:	f7f9 fb06 	bl	800773c <HAL_GPIO_WritePin>
}
 800e130:	bf00      	nop
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	20000610 	.word	0x20000610

0800e13c <xMBPortSerialGetByte>:
      return TRUE;
}

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(adr_huart_MB->Init.Parity == UART_PARITY_NONE)
 800e144:	4b0e      	ldr	r3, [pc, #56]	; (800e180 <xMBPortSerialGetByte+0x44>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d107      	bne.n	800e15e <xMBPortSerialGetByte+0x22>
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x00FF);
 800e14e:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <xMBPortSerialGetByte+0x44>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	b2da      	uxtb	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	e009      	b.n	800e172 <xMBPortSerialGetByte+0x36>
    }
    else
    {
        *pucByte = (uint8_t)(adr_huart_MB->Instance->RDR & (uint8_t)0x007F);
 800e15e:	4b08      	ldr	r3, [pc, #32]	; (800e180 <xMBPortSerialGetByte+0x44>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	b2db      	uxtb	r3, r3
 800e168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e16c:	b2da      	uxtb	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	701a      	strb	r2, [r3, #0]
    }
    return TRUE;
 800e172:	2301      	movs	r3, #1
}
 800e174:	4618      	mov	r0, r3
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr
 800e180:	20000610 	.word	0x20000610

0800e184 <vMBPortTimersEnable>:
extern uint16_t counter_Tim6_MB ;
/* ----------------------- Start implementation -----------------------------*/

inline void
vMBPortTimersEnable(  )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	af00      	add	r7, sp, #0
	/*  Включите таймер с таймаутом, переданным xMBPortTimersInit( )  */
	/*  Если baudrate > 19200, то мы должны использовать фиксированные значения таймера usTim1Timerout50us = 1750 us.
	 *  В противном случае usTim1Timerout50us должно быть в 3,5 раза больше времени символа. */
	counter_Tim6_MB=0;
 800e188:	4b03      	ldr	r3, [pc, #12]	; (800e198 <vMBPortTimersEnable+0x14>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800e18e:	4803      	ldr	r0, [pc, #12]	; (800e19c <vMBPortTimersEnable+0x18>)
 800e190:	f7fc f9bc 	bl	800a50c <HAL_TIM_Base_Start_IT>
}
 800e194:	bf00      	nop
 800e196:	bd80      	pop	{r7, pc}
 800e198:	2000060e 	.word	0x2000060e
 800e19c:	20012024 	.word	0x20012024

0800e1a0 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(&htim6);
 800e1a4:	4803      	ldr	r0, [pc, #12]	; (800e1b4 <vMBPortTimersDisable+0x14>)
 800e1a6:	f7fc fa29 	bl	800a5fc <HAL_TIM_Base_Stop_IT>
	counter_Tim6_MB =0;
 800e1aa:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <vMBPortTimersDisable+0x18>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	801a      	strh	r2, [r3, #0]
}
 800e1b0:	bf00      	nop
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20012024 	.word	0x20012024
 800e1b8:	2000060e 	.word	0x2000060e

0800e1bc <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800e1c8:	23ff      	movs	r3, #255	; 0xff
 800e1ca:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800e1cc:	23ff      	movs	r3, #255	; 0xff
 800e1ce:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800e1d0:	e013      	b.n	800e1fa <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	781a      	ldrb	r2, [r3, #0]
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	4053      	eors	r3, r2
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800e1e2:	4a0f      	ldr	r2, [pc, #60]	; (800e220 <usMBCRC16+0x64>)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	781a      	ldrb	r2, [r3, #0]
 800e1ea:	7bfb      	ldrb	r3, [r7, #15]
 800e1ec:	4053      	eors	r3, r2
 800e1ee:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800e1f0:	4a0c      	ldr	r2, [pc, #48]	; (800e224 <usMBCRC16+0x68>)
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800e1fa:	887b      	ldrh	r3, [r7, #2]
 800e1fc:	1e5a      	subs	r2, r3, #1
 800e1fe:	807a      	strh	r2, [r7, #2]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1e6      	bne.n	800e1d2 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800e204:	7bfb      	ldrb	r3, [r7, #15]
 800e206:	021b      	lsls	r3, r3, #8
 800e208:	b21a      	sxth	r2, r3
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	b21b      	sxth	r3, r3
 800e20e:	4313      	orrs	r3, r2
 800e210:	b21b      	sxth	r3, r3
 800e212:	b29b      	uxth	r3, r3
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	080155ec 	.word	0x080155ec
 800e224:	080156ec 	.word	0x080156ec

0800e228 <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]

    eMBErrorCode    eStatus = MB_ENOERR;
 800e234:	2300      	movs	r3, #0
 800e236:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 800e238:	f7f3 fc4c 	bl	8001ad4 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800e23c:	4b19      	ldr	r3, [pc, #100]	; (800e2a4 <eMBRTUReceive+0x7c>)
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	b29b      	uxth	r3, r3
 800e242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e246:	d305      	bcc.n	800e254 <eMBRTUReceive+0x2c>
 800e248:	4b17      	ldr	r3, [pc, #92]	; (800e2a8 <eMBRTUReceive+0x80>)
 800e24a:	4a18      	ldr	r2, [pc, #96]	; (800e2ac <eMBRTUReceive+0x84>)
 800e24c:	2163      	movs	r1, #99	; 0x63
 800e24e:	4818      	ldr	r0, [pc, #96]	; (800e2b0 <eMBRTUReceive+0x88>)
 800e250:	f001 f96e 	bl	800f530 <__assert_func>

    /* Length and CRC check */
    //printf("eMBRTUReceive ucRTUBuf %d %d %d %d %d %d \n", ucRTUBuf[0], ucRTUBuf[1], ucRTUBuf[2], ucRTUBuf[3], ucRTUBuf[4], ucRTUBuf[5]);
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN ) && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800e254:	4b13      	ldr	r3, [pc, #76]	; (800e2a4 <eMBRTUReceive+0x7c>)
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d919      	bls.n	800e292 <eMBRTUReceive+0x6a>
 800e25e:	4b11      	ldr	r3, [pc, #68]	; (800e2a4 <eMBRTUReceive+0x7c>)
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	b29b      	uxth	r3, r3
 800e264:	4619      	mov	r1, r3
 800e266:	4813      	ldr	r0, [pc, #76]	; (800e2b4 <eMBRTUReceive+0x8c>)
 800e268:	f7ff ffa8 	bl	800e1bc <usMBCRC16>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10f      	bne.n	800e292 <eMBRTUReceive+0x6a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800e272:	4b10      	ldr	r3, [pc, #64]	; (800e2b4 <eMBRTUReceive+0x8c>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	b2da      	uxtb	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800e27c:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <eMBRTUReceive+0x7c>)
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	b29b      	uxth	r3, r3
 800e282:	3b03      	subs	r3, #3
 800e284:	b29a      	uxth	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	4a0a      	ldr	r2, [pc, #40]	; (800e2b8 <eMBRTUReceive+0x90>)
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e001      	b.n	800e296 <eMBRTUReceive+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 800e292:	2305      	movs	r3, #5
 800e294:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800e296:	f7f3 fc2d 	bl	8001af4 <__critical_exit>
    return eStatus;
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	20013462 	.word	0x20013462
 800e2a8:	0801550c 	.word	0x0801550c
 800e2ac:	080157ec 	.word	0x080157ec
 800e2b0:	08015534 	.word	0x08015534
 800e2b4:	2001245c 	.word	0x2001245c
 800e2b8:	2001245d 	.word	0x2001245d

0800e2bc <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	6039      	str	r1, [r7, #0]
 800e2c6:	71fb      	strb	r3, [r7, #7]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	73fb      	strb	r3, [r7, #15]
     * Проверьте, находится ли приемник все еще в режиме ожидания. В противном случае мы должны были
		замедлить обработку полученного кадра, и мастер отправил другой кадр по сети.
		Мы должны прервать отправку фрейма.
     */
    //printf("eMBRTUSend_eRcvState = %d \n", eRcvState);
    if( eRcvState == STATE_RX_IDLE )
 800e2d0:	4b2f      	ldr	r3, [pc, #188]	; (800e390 <eMBRTUSend+0xd4>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d152      	bne.n	800e380 <eMBRTUSend+0xc4>
    {
        /* Первый байт перед Modbus-PDU - это адрес SLAVE. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	4a2d      	ldr	r2, [pc, #180]	; (800e394 <eMBRTUSend+0xd8>)
 800e2e0:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800e2e2:	4b2d      	ldr	r3, [pc, #180]	; (800e398 <eMBRTUSend+0xdc>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800e2e8:	4b2a      	ldr	r3, [pc, #168]	; (800e394 <eMBRTUSend+0xd8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	79fa      	ldrb	r2, [r7, #7]
 800e2ee:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800e2f0:	4b29      	ldr	r3, [pc, #164]	; (800e398 <eMBRTUSend+0xdc>)
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	88bb      	ldrh	r3, [r7, #4]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	4b26      	ldr	r3, [pc, #152]	; (800e398 <eMBRTUSend+0xdc>)
 800e2fe:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		//смотрим сколько натикало -цикл HAL_CRC_Calculate(85char) длится 11.30мкс (1921 тика)
		usCRC16 = HAL_CRC_Calculate(&hcrc, ( UCHAR * ) pucSndBufferCur, usSndBufferCount);
 800e300:	4b24      	ldr	r3, [pc, #144]	; (800e394 <eMBRTUSend+0xd8>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a24      	ldr	r2, [pc, #144]	; (800e398 <eMBRTUSend+0xdc>)
 800e306:	8812      	ldrh	r2, [r2, #0]
 800e308:	b292      	uxth	r2, r2
 800e30a:	4619      	mov	r1, r3
 800e30c:	4823      	ldr	r0, [pc, #140]	; (800e39c <eMBRTUSend+0xe0>)
 800e30e:	f7f8 fb67 	bl	80069e0 <HAL_CRC_Calculate>
 800e312:	4603      	mov	r3, r0
 800e314:	b29a      	uxth	r2, r3
 800e316:	4b22      	ldr	r3, [pc, #136]	; (800e3a0 <eMBRTUSend+0xe4>)
 800e318:	801a      	strh	r2, [r3, #0]
				//смотрим сколько натикало -цикл usMBCRC16(85char) длится 28.629мкс (4867 тика)
				//usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );

        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800e31a:	4b21      	ldr	r3, [pc, #132]	; (800e3a0 <eMBRTUSend+0xe4>)
 800e31c:	8819      	ldrh	r1, [r3, #0]
 800e31e:	4b1e      	ldr	r3, [pc, #120]	; (800e398 <eMBRTUSend+0xdc>)
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	b29b      	uxth	r3, r3
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	b290      	uxth	r0, r2
 800e328:	4a1b      	ldr	r2, [pc, #108]	; (800e398 <eMBRTUSend+0xdc>)
 800e32a:	8010      	strh	r0, [r2, #0]
 800e32c:	461a      	mov	r2, r3
 800e32e:	b2c9      	uxtb	r1, r1
 800e330:	4b1c      	ldr	r3, [pc, #112]	; (800e3a4 <eMBRTUSend+0xe8>)
 800e332:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800e334:	4b1a      	ldr	r3, [pc, #104]	; (800e3a0 <eMBRTUSend+0xe4>)
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	0a1b      	lsrs	r3, r3, #8
 800e33a:	b299      	uxth	r1, r3
 800e33c:	4b16      	ldr	r3, [pc, #88]	; (800e398 <eMBRTUSend+0xdc>)
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	b29b      	uxth	r3, r3
 800e342:	1c5a      	adds	r2, r3, #1
 800e344:	b290      	uxth	r0, r2
 800e346:	4a14      	ldr	r2, [pc, #80]	; (800e398 <eMBRTUSend+0xdc>)
 800e348:	8010      	strh	r0, [r2, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	b2c9      	uxtb	r1, r1
 800e34e:	4b15      	ldr	r3, [pc, #84]	; (800e3a4 <eMBRTUSend+0xe8>)
 800e350:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        if( usSndBufferCount != 0 )
 800e352:	4b11      	ldr	r3, [pc, #68]	; (800e398 <eMBRTUSend+0xdc>)
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	b29b      	uxth	r3, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d013      	beq.n	800e384 <eMBRTUSend+0xc8>
        {
        	eSndState = STATE_TX_XMIT;
 800e35c:	4b12      	ldr	r3, [pc, #72]	; (800e3a8 <eMBRTUSend+0xec>)
 800e35e:	2201      	movs	r2, #1
 800e360:	701a      	strb	r2, [r3, #0]
        	vMBPortSerialEnable( FALSE, TRUE );
 800e362:	2101      	movs	r1, #1
 800e364:	2000      	movs	r0, #0
 800e366:	f7ff feb1 	bl	800e0cc <vMBPortSerialEnable>
        	HAL_UART_Transmit_DMA(adr_huart_MB, pucSndBufferCur, usSndBufferCount);
 800e36a:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <eMBRTUSend+0xf0>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a09      	ldr	r2, [pc, #36]	; (800e394 <eMBRTUSend+0xd8>)
 800e370:	6811      	ldr	r1, [r2, #0]
 800e372:	4a09      	ldr	r2, [pc, #36]	; (800e398 <eMBRTUSend+0xdc>)
 800e374:	8812      	ldrh	r2, [r2, #0]
 800e376:	b292      	uxth	r2, r2
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fd ff45 	bl	800c208 <HAL_UART_Transmit_DMA>
 800e37e:	e001      	b.n	800e384 <eMBRTUSend+0xc8>
        	//printf("_transmit_DMA %d_ \n", usSndBufferCount);
        }
    }
    else
    {
        eStatus = MB_EIO;
 800e380:	2305      	movs	r3, #5
 800e382:	73fb      	strb	r3, [r7, #15]
    }
//    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800e384:	7bfb      	ldrb	r3, [r7, #15]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200005e8 	.word	0x200005e8
 800e394:	2001345c 	.word	0x2001345c
 800e398:	20013460 	.word	0x20013460
 800e39c:	20000468 	.word	0x20000468
 800e3a0:	20013464 	.word	0x20013464
 800e3a4:	2001245c 	.word	0x2001245c
 800e3a8:	200005e9 	.word	0x200005e9
 800e3ac:	20000610 	.word	0x20000610

0800e3b0 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800e3ba:	4b2b      	ldr	r3, [pc, #172]	; (800e468 <xMBRTUReceiveFSM+0xb8>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <xMBRTUReceiveFSM+0x20>
 800e3c4:	4b29      	ldr	r3, [pc, #164]	; (800e46c <xMBRTUReceiveFSM+0xbc>)
 800e3c6:	4a2a      	ldr	r2, [pc, #168]	; (800e470 <xMBRTUReceiveFSM+0xc0>)
 800e3c8:	21b9      	movs	r1, #185	; 0xb9
 800e3ca:	482a      	ldr	r0, [pc, #168]	; (800e474 <xMBRTUReceiveFSM+0xc4>)
 800e3cc:	f001 f8b0 	bl	800f530 <__assert_func>

    /* Всегда читайте  character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800e3d0:	1dbb      	adds	r3, r7, #6
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7ff feb2 	bl	800e13c <xMBPortSerialGetByte>

    switch ( eRcvState )
 800e3d8:	4b27      	ldr	r3, [pc, #156]	; (800e478 <xMBRTUReceiveFSM+0xc8>)
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b03      	cmp	r3, #3
 800e3e0:	d83c      	bhi.n	800e45c <xMBRTUReceiveFSM+0xac>
 800e3e2:	a201      	add	r2, pc, #4	; (adr r2, 800e3e8 <xMBRTUReceiveFSM+0x38>)
 800e3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e8:	0800e3f9 	.word	0x0800e3f9
 800e3ec:	0800e405 	.word	0x0800e405
 800e3f0:	0800e42d 	.word	0x0800e42d
 800e3f4:	0800e3ff 	.word	0x0800e3ff
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800e3f8:	f7ff fec4 	bl	800e184 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_INIT\n");
        break;
 800e3fc:	e02e      	b.n	800e45c <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800e3fe:	f7ff fec1 	bl	800e184 <vMBPortTimersEnable>
        //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        break;
 800e402:	e02b      	b.n	800e45c <xMBRTUReceiveFSM+0xac>
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
    	//printf("xMBRTUReceiveFSM eRcvState =STATE_RX_IDLE\n");
        usRcvBufferPos = 0;
 800e404:	4b1d      	ldr	r3, [pc, #116]	; (800e47c <xMBRTUReceiveFSM+0xcc>)
 800e406:	2200      	movs	r2, #0
 800e408:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800e40a:	4b1c      	ldr	r3, [pc, #112]	; (800e47c <xMBRTUReceiveFSM+0xcc>)
 800e40c:	881b      	ldrh	r3, [r3, #0]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	b291      	uxth	r1, r2
 800e414:	4a19      	ldr	r2, [pc, #100]	; (800e47c <xMBRTUReceiveFSM+0xcc>)
 800e416:	8011      	strh	r1, [r2, #0]
 800e418:	461a      	mov	r2, r3
 800e41a:	79b9      	ldrb	r1, [r7, #6]
 800e41c:	4b18      	ldr	r3, [pc, #96]	; (800e480 <xMBRTUReceiveFSM+0xd0>)
 800e41e:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800e420:	4b15      	ldr	r3, [pc, #84]	; (800e478 <xMBRTUReceiveFSM+0xc8>)
 800e422:	2202      	movs	r2, #2
 800e424:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800e426:	f7ff fead 	bl	800e184 <vMBPortTimersEnable>
        break;
 800e42a:	e017      	b.n	800e45c <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800e42c:	4b13      	ldr	r3, [pc, #76]	; (800e47c <xMBRTUReceiveFSM+0xcc>)
 800e42e:	881b      	ldrh	r3, [r3, #0]
 800e430:	b29b      	uxth	r3, r3
 800e432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e436:	d20b      	bcs.n	800e450 <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800e438:	4b10      	ldr	r3, [pc, #64]	; (800e47c <xMBRTUReceiveFSM+0xcc>)
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	b291      	uxth	r1, r2
 800e442:	4a0e      	ldr	r2, [pc, #56]	; (800e47c <xMBRTUReceiveFSM+0xcc>)
 800e444:	8011      	strh	r1, [r2, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	79b9      	ldrb	r1, [r7, #6]
 800e44a:	4b0d      	ldr	r3, [pc, #52]	; (800e480 <xMBRTUReceiveFSM+0xd0>)
 800e44c:	5499      	strb	r1, [r3, r2]
 800e44e:	e002      	b.n	800e456 <xMBRTUReceiveFSM+0xa6>
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_RCV\n");
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800e450:	4b09      	ldr	r3, [pc, #36]	; (800e478 <xMBRTUReceiveFSM+0xc8>)
 800e452:	2203      	movs	r2, #3
 800e454:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUReceiveFSM eRcvState =STATE_RX_ERROR\n");
        }
        vMBPortTimersEnable(  );
 800e456:	f7ff fe95 	bl	800e184 <vMBPortTimersEnable>
        break;
 800e45a:	bf00      	nop
    }
    // printf("xMBRTUReceiveFSM eRcvState_OUT %d \n", eRcvState);
    return xTaskNeedSwitch;
 800e45c:	79fb      	ldrb	r3, [r7, #7]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	200005e9 	.word	0x200005e9
 800e46c:	08015554 	.word	0x08015554
 800e470:	080157fc 	.word	0x080157fc
 800e474:	08015534 	.word	0x08015534
 800e478:	200005e8 	.word	0x200005e8
 800e47c:	20013462 	.word	0x20013462
 800e480:	2001245c 	.word	0x2001245c

0800e484 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e48a:	2300      	movs	r3, #0
 800e48c:	71fb      	strb	r3, [r7, #7]

    // assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 800e48e:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <xMBRTUTransmitFSM+0x48>)
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <xMBRTUTransmitFSM+0x1a>
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d005      	beq.n	800e4a8 <xMBRTUTransmitFSM+0x24>
 800e49c:	e011      	b.n	800e4c2 <xMBRTUTransmitFSM+0x3e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800e49e:	2100      	movs	r1, #0
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	f7ff fe13 	bl	800e0cc <vMBPortSerialEnable>
        //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e4a6:	e00c      	b.n	800e4c2 <xMBRTUTransmitFSM+0x3e>

    case STATE_TX_XMIT:
        /* проверьте, закончили ли мы. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800e4a8:	2003      	movs	r0, #3
 800e4aa:	f7ff fddb 	bl	800e064 <xMBPortEventPost>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	71fb      	strb	r3, [r7, #7]
            /* Отключите передатчик.
             * Это предотвращает еще одно прерывание пустого буфера передачи.*/
            vMBPortSerialEnable( TRUE, FALSE );
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	f7ff fe09 	bl	800e0cc <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800e4ba:	4b04      	ldr	r3, [pc, #16]	; (800e4cc <xMBRTUTransmitFSM+0x48>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	701a      	strb	r2, [r3, #0]
            //printf("xMBRTUTransmitFSM _eSndState =STATE_TX_IDLE");
        break;
 800e4c0:	bf00      	nop
    }

    return xNeedPoll;
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	200005e9 	.word	0x200005e9

0800e4d0 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )  // вызывается только по 35 событию преполнения TIM6
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800e4da:	4b1d      	ldr	r3, [pc, #116]	; (800e550 <xMBRTUTimerT35Expired+0x80>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	2b03      	cmp	r3, #3
 800e4e2:	d817      	bhi.n	800e514 <xMBRTUTimerT35Expired+0x44>
 800e4e4:	a201      	add	r2, pc, #4	; (adr r2, 800e4ec <xMBRTUTimerT35Expired+0x1c>)
 800e4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ea:	bf00      	nop
 800e4ec:	0800e4fd 	.word	0x0800e4fd
 800e4f0:	0800e53b 	.word	0x0800e53b
 800e4f4:	0800e509 	.word	0x0800e509
 800e4f8:	0800e53b 	.word	0x0800e53b
    {
        /* Timer t35 expired. Startup phase is finished. Таймер t35 истек. Этап запуска завершен.*/
    case STATE_RX_INIT:   // приемник в режиме инициализации
        xNeedPoll = xMBPortEventPost( EV_READY );
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	f7ff fdb1 	bl	800e064 <xMBPortEventPost>
 800e502:	4603      	mov	r3, r0
 800e504:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_INIT \n");
        break;
 800e506:	e019      	b.n	800e53c <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that a new frame was received.
         *  Был получен кадр, и срок действия t35 истек. Уведомите слушателя о том, что был получен новый кадр.*/
    case STATE_RX_RCV:    // приемник в режиме приема
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800e508:	2001      	movs	r0, #1
 800e50a:	f7ff fdab 	bl	800e064 <xMBPortEventPost>
 800e50e:	4603      	mov	r3, r0
 800e510:	71fb      	strb	r3, [r7, #7]
        //printf("xMBRTUTimerT35Expired eRcvState=_RX_RCV, _xNeedPoll=%d \n", xNeedPoll);
        break;
 800e512:	e013      	b.n	800e53c <xMBRTUTimerT35Expired+0x6c>
    	//printf("xMBRTUTimerT35Expired eRcvState=_RX_IDLE \n");
        break;

        /* Function called in an illegal state. Функция вызывается в illegal состоянии. */
    default:
    	if ( ( eRcvState == STATE_RX_INIT ) ||  ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) )
 800e514:	4b0e      	ldr	r3, [pc, #56]	; (800e550 <xMBRTUTimerT35Expired+0x80>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d009      	beq.n	800e532 <xMBRTUTimerT35Expired+0x62>
 800e51e:	4b0c      	ldr	r3, [pc, #48]	; (800e550 <xMBRTUTimerT35Expired+0x80>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	2b02      	cmp	r3, #2
 800e526:	d004      	beq.n	800e532 <xMBRTUTimerT35Expired+0x62>
 800e528:	4b09      	ldr	r3, [pc, #36]	; (800e550 <xMBRTUTimerT35Expired+0x80>)
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d104      	bne.n	800e53c <xMBRTUTimerT35Expired+0x6c>
    	{
    		printf("xMBRTUTimerT35Expired  Function called in an illegal state \n");
 800e532:	4808      	ldr	r0, [pc, #32]	; (800e554 <xMBRTUTimerT35Expired+0x84>)
 800e534:	f002 f8ae 	bl	8010694 <puts>
 800e538:	e000      	b.n	800e53c <xMBRTUTimerT35Expired+0x6c>
        break;
 800e53a:	bf00      	nop
    	}
    }

    vMBPortTimersDisable(  );
 800e53c:	f7ff fe30 	bl	800e1a0 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE; // всегда, при каждом срабатывании TIM6 статус приемника переводится в это состояние
 800e540:	4b03      	ldr	r3, [pc, #12]	; (800e550 <xMBRTUTimerT35Expired+0x80>)
 800e542:	2201      	movs	r2, #1
 800e544:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800e546:	79fb      	ldrb	r3, [r7, #7]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	200005e8 	.word	0x200005e8
 800e554:	08015570 	.word	0x08015570

0800e558 <arm_cfft_radix8by2_f32>:
 800e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55c:	ed2d 8b08 	vpush	{d8-d11}
 800e560:	4607      	mov	r7, r0
 800e562:	4608      	mov	r0, r1
 800e564:	f8b7 c000 	ldrh.w	ip, [r7]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e56e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e576:	f000 80b0 	beq.w	800e6da <arm_cfft_radix8by2_f32+0x182>
 800e57a:	008c      	lsls	r4, r1, #2
 800e57c:	3410      	adds	r4, #16
 800e57e:	f100 0310 	add.w	r3, r0, #16
 800e582:	1906      	adds	r6, r0, r4
 800e584:	3210      	adds	r2, #16
 800e586:	4444      	add	r4, r8
 800e588:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800e58c:	f108 0510 	add.w	r5, r8, #16
 800e590:	ed15 2a04 	vldr	s4, [r5, #-16]
 800e594:	ed55 2a03 	vldr	s5, [r5, #-12]
 800e598:	ed54 4a04 	vldr	s9, [r4, #-16]
 800e59c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800e5a0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800e5a4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e5a8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800e5ac:	ed15 0a02 	vldr	s0, [r5, #-8]
 800e5b0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800e5b4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800e5b8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800e5bc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800e5c0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800e5c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e5c8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800e5cc:	ed56 1a01 	vldr	s3, [r6, #-4]
 800e5d0:	ee73 ba82 	vadd.f32	s23, s7, s4
 800e5d4:	ee37 ba22 	vadd.f32	s22, s14, s5
 800e5d8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800e5dc:	ee33 9a04 	vadd.f32	s18, s6, s8
 800e5e0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800e5e4:	ee75 aa00 	vadd.f32	s21, s10, s0
 800e5e8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800e5ec:	ee71 8a06 	vadd.f32	s17, s2, s12
 800e5f0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800e5f4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800e5f8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800e5fc:	ed03 aa01 	vstr	s20, [r3, #-4]
 800e600:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e604:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e608:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e60c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e610:	ee37 7a62 	vsub.f32	s14, s14, s5
 800e614:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800e618:	ee34 4a43 	vsub.f32	s8, s8, s6
 800e61c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800e620:	ed12 3a04 	vldr	s6, [r2, #-16]
 800e624:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e628:	ee27 8a26 	vmul.f32	s16, s14, s13
 800e62c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800e630:	ee23 2a83 	vmul.f32	s4, s7, s6
 800e634:	ee64 4a83 	vmul.f32	s9, s9, s6
 800e638:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e63c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e640:	ee64 6a26 	vmul.f32	s13, s8, s13
 800e644:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e648:	ee37 7a63 	vsub.f32	s14, s14, s7
 800e64c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e650:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800e654:	ee32 3a08 	vadd.f32	s6, s4, s16
 800e658:	ed05 7a03 	vstr	s14, [r5, #-12]
 800e65c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800e660:	ed04 4a04 	vstr	s8, [r4, #-16]
 800e664:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e668:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e66c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800e670:	ee35 5a40 	vsub.f32	s10, s10, s0
 800e674:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800e678:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e67c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e680:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e684:	ee66 4a87 	vmul.f32	s9, s13, s14
 800e688:	ee25 4a25 	vmul.f32	s8, s10, s11
 800e68c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e690:	ee25 5a07 	vmul.f32	s10, s10, s14
 800e694:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e698:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e69c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e6a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e6a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e6a8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800e6ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e6b0:	3310      	adds	r3, #16
 800e6b2:	4563      	cmp	r3, ip
 800e6b4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800e6b8:	f106 0610 	add.w	r6, r6, #16
 800e6bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800e6c0:	f102 0210 	add.w	r2, r2, #16
 800e6c4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800e6c8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800e6cc:	f105 0510 	add.w	r5, r5, #16
 800e6d0:	f104 0410 	add.w	r4, r4, #16
 800e6d4:	f47f af5c 	bne.w	800e590 <arm_cfft_radix8by2_f32+0x38>
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	b28c      	uxth	r4, r1
 800e6dc:	4621      	mov	r1, r4
 800e6de:	2302      	movs	r3, #2
 800e6e0:	f000 fc66 	bl	800efb0 <arm_radix8_butterfly_f32>
 800e6e4:	ecbd 8b08 	vpop	{d8-d11}
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	4640      	mov	r0, r8
 800e6ee:	2302      	movs	r3, #2
 800e6f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f4:	f000 bc5c 	b.w	800efb0 <arm_radix8_butterfly_f32>

0800e6f8 <arm_cfft_radix8by4_f32>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b0a 	vpush	{d8-d12}
 800e700:	b08d      	sub	sp, #52	; 0x34
 800e702:	460d      	mov	r5, r1
 800e704:	910b      	str	r1, [sp, #44]	; 0x2c
 800e706:	8801      	ldrh	r1, [r0, #0]
 800e708:	6842      	ldr	r2, [r0, #4]
 800e70a:	900a      	str	r0, [sp, #40]	; 0x28
 800e70c:	0849      	lsrs	r1, r1, #1
 800e70e:	008b      	lsls	r3, r1, #2
 800e710:	18ee      	adds	r6, r5, r3
 800e712:	18f0      	adds	r0, r6, r3
 800e714:	edd0 5a00 	vldr	s11, [r0]
 800e718:	edd5 7a00 	vldr	s15, [r5]
 800e71c:	ed96 7a00 	vldr	s14, [r6]
 800e720:	edd0 3a01 	vldr	s7, [r0, #4]
 800e724:	ed96 4a01 	vldr	s8, [r6, #4]
 800e728:	ed95 5a01 	vldr	s10, [r5, #4]
 800e72c:	9008      	str	r0, [sp, #32]
 800e72e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800e732:	18c7      	adds	r7, r0, r3
 800e734:	edd7 4a00 	vldr	s9, [r7]
 800e738:	ed97 3a01 	vldr	s6, [r7, #4]
 800e73c:	9701      	str	r7, [sp, #4]
 800e73e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800e742:	462c      	mov	r4, r5
 800e744:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e748:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e74c:	ee16 ca90 	vmov	ip, s13
 800e750:	f844 cb08 	str.w	ip, [r4], #8
 800e754:	ee75 6a23 	vadd.f32	s13, s10, s7
 800e758:	edd6 5a01 	vldr	s11, [r6, #4]
 800e75c:	edd7 2a01 	vldr	s5, [r7, #4]
 800e760:	9404      	str	r4, [sp, #16]
 800e762:	ee35 5a63 	vsub.f32	s10, s10, s7
 800e766:	ee74 3a27 	vadd.f32	s7, s8, s15
 800e76a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e76e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800e772:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e776:	0849      	lsrs	r1, r1, #1
 800e778:	f102 0e08 	add.w	lr, r2, #8
 800e77c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800e780:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e784:	9109      	str	r1, [sp, #36]	; 0x24
 800e786:	ee35 4a47 	vsub.f32	s8, s10, s14
 800e78a:	f1a1 0902 	sub.w	r9, r1, #2
 800e78e:	f8cd e00c 	str.w	lr, [sp, #12]
 800e792:	4631      	mov	r1, r6
 800e794:	ee13 ea90 	vmov	lr, s7
 800e798:	ee36 6a64 	vsub.f32	s12, s12, s9
 800e79c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	edc5 5a01 	vstr	s11, [r5, #4]
 800e7a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800e7aa:	f841 eb08 	str.w	lr, [r1], #8
 800e7ae:	ee34 5a24 	vadd.f32	s10, s8, s9
 800e7b2:	ee16 ea10 	vmov	lr, s12
 800e7b6:	ed86 5a01 	vstr	s10, [r6, #4]
 800e7ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e7be:	f844 eb08 	str.w	lr, [r4], #8
 800e7c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e7c6:	edc0 6a01 	vstr	s13, [r0, #4]
 800e7ca:	9405      	str	r4, [sp, #20]
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	ee17 0a90 	vmov	r0, s15
 800e7d2:	9106      	str	r1, [sp, #24]
 800e7d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e7d8:	f102 0110 	add.w	r1, r2, #16
 800e7dc:	46bc      	mov	ip, r7
 800e7de:	9100      	str	r1, [sp, #0]
 800e7e0:	f847 0b08 	str.w	r0, [r7], #8
 800e7e4:	f102 0118 	add.w	r1, r2, #24
 800e7e8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800e7ec:	9102      	str	r1, [sp, #8]
 800e7ee:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e7f2:	9007      	str	r0, [sp, #28]
 800e7f4:	f000 8134 	beq.w	800ea60 <arm_cfft_radix8by4_f32+0x368>
 800e7f8:	f102 0920 	add.w	r9, r2, #32
 800e7fc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800e800:	9a01      	ldr	r2, [sp, #4]
 800e802:	f8dd a000 	ldr.w	sl, [sp]
 800e806:	3b0c      	subs	r3, #12
 800e808:	4683      	mov	fp, r0
 800e80a:	4463      	add	r3, ip
 800e80c:	f105 0e10 	add.w	lr, r5, #16
 800e810:	f1a4 010c 	sub.w	r1, r4, #12
 800e814:	f104 0510 	add.w	r5, r4, #16
 800e818:	f1a6 0c0c 	sub.w	ip, r6, #12
 800e81c:	f1a2 040c 	sub.w	r4, r2, #12
 800e820:	f106 0010 	add.w	r0, r6, #16
 800e824:	3210      	adds	r2, #16
 800e826:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800e82a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800e82e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e832:	ed52 1a02 	vldr	s3, [r2, #-8]
 800e836:	ed55 6a01 	vldr	s13, [r5, #-4]
 800e83a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800e83e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800e842:	ed10 8a01 	vldr	s16, [r0, #-4]
 800e846:	ee35 4a25 	vadd.f32	s8, s10, s11
 800e84a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800e84e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800e852:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e856:	ee37 7a21 	vadd.f32	s14, s14, s3
 800e85a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800e85e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800e862:	ed10 7a01 	vldr	s14, [r0, #-4]
 800e866:	ed52 6a01 	vldr	s13, [r2, #-4]
 800e86a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800e86e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800e872:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e876:	ee70 3a67 	vsub.f32	s7, s0, s15
 800e87a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800e87e:	ed94 7a02 	vldr	s14, [r4, #8]
 800e882:	ed9c 2a02 	vldr	s4, [ip, #8]
 800e886:	ed91 ba02 	vldr	s22, [r1, #8]
 800e88a:	edd3 9a02 	vldr	s19, [r3, #8]
 800e88e:	edd4 2a01 	vldr	s5, [r4, #4]
 800e892:	ed9c 9a01 	vldr	s18, [ip, #4]
 800e896:	ed93 5a01 	vldr	s10, [r3, #4]
 800e89a:	edd1 0a01 	vldr	s1, [r1, #4]
 800e89e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800e8a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800e8a6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800e8aa:	ee79 4a22 	vadd.f32	s9, s18, s5
 800e8ae:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800e8b2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800e8b6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800e8ba:	ed91 7a01 	vldr	s14, [r1, #4]
 800e8be:	edd3 8a01 	vldr	s17, [r3, #4]
 800e8c2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800e8c6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800e8ca:	ee37 7a28 	vadd.f32	s14, s14, s17
 800e8ce:	ee32 9a60 	vsub.f32	s18, s4, s1
 800e8d2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800e8d6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800e8da:	ed1a aa02 	vldr	s20, [sl, #-8]
 800e8de:	ee73 8a22 	vadd.f32	s17, s6, s5
 800e8e2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800e8e6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800e8ea:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e8ee:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800e8f2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800e8f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800e8fa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800e8fe:	ee63 ca87 	vmul.f32	s25, s7, s14
 800e902:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800e906:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800e90a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800e90e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800e912:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e916:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800e91a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800e91e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800e922:	ee76 6acb 	vsub.f32	s13, s13, s22
 800e926:	ee36 6a48 	vsub.f32	s12, s12, s16
 800e92a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800e92e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800e932:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e936:	edc1 8a01 	vstr	s17, [r1, #4]
 800e93a:	ed81 aa02 	vstr	s20, [r1, #8]
 800e93e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800e942:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800e946:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800e94a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800e94e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800e952:	ee36 6a41 	vsub.f32	s12, s12, s2
 800e956:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800e95a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800e95e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800e962:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e966:	ee24 4a26 	vmul.f32	s8, s8, s13
 800e96a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e96e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800e972:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800e976:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e97a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e97e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800e982:	ee79 3a29 	vadd.f32	s7, s18, s19
 800e986:	ee75 6a60 	vsub.f32	s13, s10, s1
 800e98a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800e98e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e992:	ed45 3a02 	vstr	s7, [r5, #-8]
 800e996:	ed05 6a01 	vstr	s12, [r5, #-4]
 800e99a:	ed84 7a01 	vstr	s14, [r4, #4]
 800e99e:	ed84 4a02 	vstr	s8, [r4, #8]
 800e9a2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800e9a6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800e9aa:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800e9ae:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800e9b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e9b6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800e9ba:	ee67 2a26 	vmul.f32	s5, s14, s13
 800e9be:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e9c2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800e9c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e9ca:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e9ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e9d2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800e9d6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800e9da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e9de:	ee75 5a24 	vadd.f32	s11, s10, s9
 800e9e2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800e9e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e9ea:	f1bb 0b01 	subs.w	fp, fp, #1
 800e9ee:	ed42 5a02 	vstr	s11, [r2, #-8]
 800e9f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e9f6:	f10e 0e08 	add.w	lr, lr, #8
 800e9fa:	ed83 3a02 	vstr	s6, [r3, #8]
 800e9fe:	ed83 7a01 	vstr	s14, [r3, #4]
 800ea02:	f1ac 0c08 	sub.w	ip, ip, #8
 800ea06:	f10a 0a08 	add.w	sl, sl, #8
 800ea0a:	f100 0008 	add.w	r0, r0, #8
 800ea0e:	f1a1 0108 	sub.w	r1, r1, #8
 800ea12:	f109 0910 	add.w	r9, r9, #16
 800ea16:	f105 0508 	add.w	r5, r5, #8
 800ea1a:	f1a4 0408 	sub.w	r4, r4, #8
 800ea1e:	f108 0818 	add.w	r8, r8, #24
 800ea22:	f102 0208 	add.w	r2, r2, #8
 800ea26:	f1a3 0308 	sub.w	r3, r3, #8
 800ea2a:	f47f aefc 	bne.w	800e826 <arm_cfft_radix8by4_f32+0x12e>
 800ea2e:	9907      	ldr	r1, [sp, #28]
 800ea30:	9800      	ldr	r0, [sp, #0]
 800ea32:	00cb      	lsls	r3, r1, #3
 800ea34:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ea38:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ea3c:	9100      	str	r1, [sp, #0]
 800ea3e:	9904      	ldr	r1, [sp, #16]
 800ea40:	4419      	add	r1, r3
 800ea42:	9104      	str	r1, [sp, #16]
 800ea44:	9903      	ldr	r1, [sp, #12]
 800ea46:	4419      	add	r1, r3
 800ea48:	9103      	str	r1, [sp, #12]
 800ea4a:	9906      	ldr	r1, [sp, #24]
 800ea4c:	4419      	add	r1, r3
 800ea4e:	9106      	str	r1, [sp, #24]
 800ea50:	9905      	ldr	r1, [sp, #20]
 800ea52:	441f      	add	r7, r3
 800ea54:	4419      	add	r1, r3
 800ea56:	9b02      	ldr	r3, [sp, #8]
 800ea58:	9105      	str	r1, [sp, #20]
 800ea5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea5e:	9302      	str	r3, [sp, #8]
 800ea60:	9904      	ldr	r1, [sp, #16]
 800ea62:	9805      	ldr	r0, [sp, #20]
 800ea64:	ed91 4a00 	vldr	s8, [r1]
 800ea68:	edd0 6a00 	vldr	s13, [r0]
 800ea6c:	9b06      	ldr	r3, [sp, #24]
 800ea6e:	ed97 3a00 	vldr	s6, [r7]
 800ea72:	edd3 7a00 	vldr	s15, [r3]
 800ea76:	edd0 4a01 	vldr	s9, [r0, #4]
 800ea7a:	edd1 3a01 	vldr	s7, [r1, #4]
 800ea7e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea82:	ed93 7a01 	vldr	s14, [r3, #4]
 800ea86:	9a03      	ldr	r2, [sp, #12]
 800ea88:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ea8c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ea90:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ea94:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ea98:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ea9c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800eaa0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800eaa4:	ed81 5a00 	vstr	s10, [r1]
 800eaa8:	ed93 5a01 	vldr	s10, [r3, #4]
 800eaac:	edd7 4a01 	vldr	s9, [r7, #4]
 800eab0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800eab4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800eab8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800eabc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800eac0:	ed81 5a01 	vstr	s10, [r1, #4]
 800eac4:	edd2 1a00 	vldr	s3, [r2]
 800eac8:	edd2 2a01 	vldr	s5, [r2, #4]
 800eacc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ead0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ead4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ead8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800eadc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800eae0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800eae4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800eae8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800eaec:	ee35 5a44 	vsub.f32	s10, s10, s8
 800eaf0:	edc3 2a00 	vstr	s5, [r3]
 800eaf4:	ed83 5a01 	vstr	s10, [r3, #4]
 800eaf8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800eafc:	9b00      	ldr	r3, [sp, #0]
 800eafe:	ee36 6a43 	vsub.f32	s12, s12, s6
 800eb02:	ed93 4a01 	vldr	s8, [r3, #4]
 800eb06:	ed93 5a00 	vldr	s10, [r3]
 800eb0a:	9b02      	ldr	r3, [sp, #8]
 800eb0c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800eb10:	ee66 4a05 	vmul.f32	s9, s12, s10
 800eb14:	ee25 5a85 	vmul.f32	s10, s11, s10
 800eb18:	ee26 6a04 	vmul.f32	s12, s12, s8
 800eb1c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800eb20:	ee35 6a46 	vsub.f32	s12, s10, s12
 800eb24:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800eb28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800eb2c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eb30:	ed80 6a01 	vstr	s12, [r0, #4]
 800eb34:	edc0 5a00 	vstr	s11, [r0]
 800eb38:	edd3 5a01 	vldr	s11, [r3, #4]
 800eb3c:	edd3 6a00 	vldr	s13, [r3]
 800eb40:	ee37 7a02 	vadd.f32	s14, s14, s4
 800eb44:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800eb48:	ee27 6a26 	vmul.f32	s12, s14, s13
 800eb4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800eb50:	ee27 7a25 	vmul.f32	s14, s14, s11
 800eb54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eb58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eb5c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800eb60:	ed87 7a01 	vstr	s14, [r7, #4]
 800eb64:	edc7 7a00 	vstr	s15, [r7]
 800eb68:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	686a      	ldr	r2, [r5, #4]
 800eb70:	2304      	movs	r3, #4
 800eb72:	f000 fa1d 	bl	800efb0 <arm_radix8_butterfly_f32>
 800eb76:	4630      	mov	r0, r6
 800eb78:	4621      	mov	r1, r4
 800eb7a:	686a      	ldr	r2, [r5, #4]
 800eb7c:	2304      	movs	r3, #4
 800eb7e:	f000 fa17 	bl	800efb0 <arm_radix8_butterfly_f32>
 800eb82:	9808      	ldr	r0, [sp, #32]
 800eb84:	686a      	ldr	r2, [r5, #4]
 800eb86:	4621      	mov	r1, r4
 800eb88:	2304      	movs	r3, #4
 800eb8a:	f000 fa11 	bl	800efb0 <arm_radix8_butterfly_f32>
 800eb8e:	686a      	ldr	r2, [r5, #4]
 800eb90:	9801      	ldr	r0, [sp, #4]
 800eb92:	4621      	mov	r1, r4
 800eb94:	2304      	movs	r3, #4
 800eb96:	b00d      	add	sp, #52	; 0x34
 800eb98:	ecbd 8b0a 	vpop	{d8-d12}
 800eb9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	f000 ba06 	b.w	800efb0 <arm_radix8_butterfly_f32>

0800eba4 <arm_cfft_f32>:
 800eba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba8:	2a01      	cmp	r2, #1
 800ebaa:	4606      	mov	r6, r0
 800ebac:	4617      	mov	r7, r2
 800ebae:	460c      	mov	r4, r1
 800ebb0:	4698      	mov	r8, r3
 800ebb2:	8805      	ldrh	r5, [r0, #0]
 800ebb4:	d056      	beq.n	800ec64 <arm_cfft_f32+0xc0>
 800ebb6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ebba:	d063      	beq.n	800ec84 <arm_cfft_f32+0xe0>
 800ebbc:	d916      	bls.n	800ebec <arm_cfft_f32+0x48>
 800ebbe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ebc2:	d01a      	beq.n	800ebfa <arm_cfft_f32+0x56>
 800ebc4:	d947      	bls.n	800ec56 <arm_cfft_f32+0xb2>
 800ebc6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ebca:	d05b      	beq.n	800ec84 <arm_cfft_f32+0xe0>
 800ebcc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ebd0:	d105      	bne.n	800ebde <arm_cfft_f32+0x3a>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	6872      	ldr	r2, [r6, #4]
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f000 f9e9 	bl	800efb0 <arm_radix8_butterfly_f32>
 800ebde:	f1b8 0f00 	cmp.w	r8, #0
 800ebe2:	d111      	bne.n	800ec08 <arm_cfft_f32+0x64>
 800ebe4:	2f01      	cmp	r7, #1
 800ebe6:	d016      	beq.n	800ec16 <arm_cfft_f32+0x72>
 800ebe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebec:	2d20      	cmp	r5, #32
 800ebee:	d049      	beq.n	800ec84 <arm_cfft_f32+0xe0>
 800ebf0:	d935      	bls.n	800ec5e <arm_cfft_f32+0xba>
 800ebf2:	2d40      	cmp	r5, #64	; 0x40
 800ebf4:	d0ed      	beq.n	800ebd2 <arm_cfft_f32+0x2e>
 800ebf6:	2d80      	cmp	r5, #128	; 0x80
 800ebf8:	d1f1      	bne.n	800ebde <arm_cfft_f32+0x3a>
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f7ff fcab 	bl	800e558 <arm_cfft_radix8by2_f32>
 800ec02:	f1b8 0f00 	cmp.w	r8, #0
 800ec06:	d0ed      	beq.n	800ebe4 <arm_cfft_f32+0x40>
 800ec08:	68b2      	ldr	r2, [r6, #8]
 800ec0a:	89b1      	ldrh	r1, [r6, #12]
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f000 f841 	bl	800ec94 <arm_bitreversal_32>
 800ec12:	2f01      	cmp	r7, #1
 800ec14:	d1e8      	bne.n	800ebe8 <arm_cfft_f32+0x44>
 800ec16:	ee07 5a90 	vmov	s15, r5
 800ec1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ec26:	2d00      	cmp	r5, #0
 800ec28:	d0de      	beq.n	800ebe8 <arm_cfft_f32+0x44>
 800ec2a:	f104 0108 	add.w	r1, r4, #8
 800ec2e:	2300      	movs	r3, #0
 800ec30:	3301      	adds	r3, #1
 800ec32:	429d      	cmp	r5, r3
 800ec34:	f101 0108 	add.w	r1, r1, #8
 800ec38:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ec3c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ec40:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ec44:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ec48:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ec4c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ec50:	d1ee      	bne.n	800ec30 <arm_cfft_f32+0x8c>
 800ec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec56:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ec5a:	d0ba      	beq.n	800ebd2 <arm_cfft_f32+0x2e>
 800ec5c:	e7bf      	b.n	800ebde <arm_cfft_f32+0x3a>
 800ec5e:	2d10      	cmp	r5, #16
 800ec60:	d0cb      	beq.n	800ebfa <arm_cfft_f32+0x56>
 800ec62:	e7bc      	b.n	800ebde <arm_cfft_f32+0x3a>
 800ec64:	b19d      	cbz	r5, 800ec8e <arm_cfft_f32+0xea>
 800ec66:	f101 030c 	add.w	r3, r1, #12
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ec70:	3201      	adds	r2, #1
 800ec72:	eef1 7a67 	vneg.f32	s15, s15
 800ec76:	4295      	cmp	r5, r2
 800ec78:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ec7c:	f103 0308 	add.w	r3, r3, #8
 800ec80:	d1f4      	bne.n	800ec6c <arm_cfft_f32+0xc8>
 800ec82:	e798      	b.n	800ebb6 <arm_cfft_f32+0x12>
 800ec84:	4621      	mov	r1, r4
 800ec86:	4630      	mov	r0, r6
 800ec88:	f7ff fd36 	bl	800e6f8 <arm_cfft_radix8by4_f32>
 800ec8c:	e7a7      	b.n	800ebde <arm_cfft_f32+0x3a>
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d0aa      	beq.n	800ebe8 <arm_cfft_f32+0x44>
 800ec92:	e7b9      	b.n	800ec08 <arm_cfft_f32+0x64>

0800ec94 <arm_bitreversal_32>:
 800ec94:	b1e9      	cbz	r1, 800ecd2 <arm_bitreversal_32+0x3e>
 800ec96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec98:	2500      	movs	r5, #0
 800ec9a:	f102 0e02 	add.w	lr, r2, #2
 800ec9e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800eca2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800eca6:	08a4      	lsrs	r4, r4, #2
 800eca8:	089b      	lsrs	r3, r3, #2
 800ecaa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800ecae:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800ecb2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800ecb6:	00a6      	lsls	r6, r4, #2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	1d34      	adds	r4, r6, #4
 800ecc2:	3502      	adds	r5, #2
 800ecc4:	58c6      	ldr	r6, [r0, r3]
 800ecc6:	5907      	ldr	r7, [r0, r4]
 800ecc8:	50c7      	str	r7, [r0, r3]
 800ecca:	428d      	cmp	r5, r1
 800eccc:	5106      	str	r6, [r0, r4]
 800ecce:	d3e6      	bcc.n	800ec9e <arm_bitreversal_32+0xa>
 800ecd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecd2:	4770      	bx	lr

0800ecd4 <arm_cmplx_mag_f32>:
 800ecd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd8:	ed2d 8b02 	vpush	{d8}
 800ecdc:	0897      	lsrs	r7, r2, #2
 800ecde:	b084      	sub	sp, #16
 800ece0:	d077      	beq.n	800edd2 <arm_cmplx_mag_f32+0xfe>
 800ece2:	f04f 0800 	mov.w	r8, #0
 800ece6:	f100 0420 	add.w	r4, r0, #32
 800ecea:	f101 0510 	add.w	r5, r1, #16
 800ecee:	463e      	mov	r6, r7
 800ecf0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800ecf4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800ecf8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ecfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed00:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0c:	f2c0 80c5 	blt.w	800ee9a <arm_cmplx_mag_f32+0x1c6>
 800ed10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ed14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ed1c:	f100 80cb 	bmi.w	800eeb6 <arm_cmplx_mag_f32+0x1e2>
 800ed20:	ed05 8a04 	vstr	s16, [r5, #-16]
 800ed24:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800ed28:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800ed2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ed30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed34:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed40:	f2c0 80a8 	blt.w	800ee94 <arm_cmplx_mag_f32+0x1c0>
 800ed44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ed48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ed50:	f100 80a8 	bmi.w	800eea4 <arm_cmplx_mag_f32+0x1d0>
 800ed54:	ed05 8a03 	vstr	s16, [r5, #-12]
 800ed58:	ed14 0a04 	vldr	s0, [r4, #-16]
 800ed5c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800ed60:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ed64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed68:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed74:	f2c0 808b 	blt.w	800ee8e <arm_cmplx_mag_f32+0x1ba>
 800ed78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ed7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ed84:	f100 80a9 	bmi.w	800eeda <arm_cmplx_mag_f32+0x206>
 800ed88:	ed05 8a02 	vstr	s16, [r5, #-8]
 800ed8c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800ed90:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ed94:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ed98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eda0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda8:	db6e      	blt.n	800ee88 <arm_cmplx_mag_f32+0x1b4>
 800edaa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800edae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800edb6:	f100 8087 	bmi.w	800eec8 <arm_cmplx_mag_f32+0x1f4>
 800edba:	ed05 8a01 	vstr	s16, [r5, #-4]
 800edbe:	3e01      	subs	r6, #1
 800edc0:	f104 0420 	add.w	r4, r4, #32
 800edc4:	f105 0510 	add.w	r5, r5, #16
 800edc8:	d192      	bne.n	800ecf0 <arm_cmplx_mag_f32+0x1c>
 800edca:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800edce:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800edd2:	f012 0203 	ands.w	r2, r2, #3
 800edd6:	d052      	beq.n	800ee7e <arm_cmplx_mag_f32+0x1aa>
 800edd8:	ed90 0a00 	vldr	s0, [r0]
 800eddc:	edd0 7a01 	vldr	s15, [r0, #4]
 800ede0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ede4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ede8:	2300      	movs	r3, #0
 800edea:	ee37 0a80 	vadd.f32	s0, s15, s0
 800edee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800edf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf6:	bfb8      	it	lt
 800edf8:	600b      	strlt	r3, [r1, #0]
 800edfa:	db08      	blt.n	800ee0e <arm_cmplx_mag_f32+0x13a>
 800edfc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ee00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee04:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ee08:	d479      	bmi.n	800eefe <arm_cmplx_mag_f32+0x22a>
 800ee0a:	ed81 8a00 	vstr	s16, [r1]
 800ee0e:	3a01      	subs	r2, #1
 800ee10:	d035      	beq.n	800ee7e <arm_cmplx_mag_f32+0x1aa>
 800ee12:	ed90 0a02 	vldr	s0, [r0, #8]
 800ee16:	edd0 7a03 	vldr	s15, [r0, #12]
 800ee1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ee1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ee22:	2300      	movs	r3, #0
 800ee24:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ee28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ee2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee30:	bfb8      	it	lt
 800ee32:	604b      	strlt	r3, [r1, #4]
 800ee34:	db08      	blt.n	800ee48 <arm_cmplx_mag_f32+0x174>
 800ee36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ee3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ee42:	d453      	bmi.n	800eeec <arm_cmplx_mag_f32+0x218>
 800ee44:	ed81 8a01 	vstr	s16, [r1, #4]
 800ee48:	2a01      	cmp	r2, #1
 800ee4a:	d018      	beq.n	800ee7e <arm_cmplx_mag_f32+0x1aa>
 800ee4c:	ed90 0a04 	vldr	s0, [r0, #16]
 800ee50:	edd0 7a05 	vldr	s15, [r0, #20]
 800ee54:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ee58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ee66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6a:	db19      	blt.n	800eea0 <arm_cmplx_mag_f32+0x1cc>
 800ee6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ee78:	d44a      	bmi.n	800ef10 <arm_cmplx_mag_f32+0x23c>
 800ee7a:	ed81 8a02 	vstr	s16, [r1, #8]
 800ee7e:	b004      	add	sp, #16
 800ee80:	ecbd 8b02 	vpop	{d8}
 800ee84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee88:	f845 8c04 	str.w	r8, [r5, #-4]
 800ee8c:	e797      	b.n	800edbe <arm_cmplx_mag_f32+0xea>
 800ee8e:	f845 8c08 	str.w	r8, [r5, #-8]
 800ee92:	e77b      	b.n	800ed8c <arm_cmplx_mag_f32+0xb8>
 800ee94:	f845 8c0c 	str.w	r8, [r5, #-12]
 800ee98:	e75e      	b.n	800ed58 <arm_cmplx_mag_f32+0x84>
 800ee9a:	f845 8c10 	str.w	r8, [r5, #-16]
 800ee9e:	e741      	b.n	800ed24 <arm_cmplx_mag_f32+0x50>
 800eea0:	608b      	str	r3, [r1, #8]
 800eea2:	e7ec      	b.n	800ee7e <arm_cmplx_mag_f32+0x1aa>
 800eea4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eea8:	9001      	str	r0, [sp, #4]
 800eeaa:	f005 f923 	bl	80140f4 <sqrtf>
 800eeae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800eeb2:	9801      	ldr	r0, [sp, #4]
 800eeb4:	e74e      	b.n	800ed54 <arm_cmplx_mag_f32+0x80>
 800eeb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eeba:	9001      	str	r0, [sp, #4]
 800eebc:	f005 f91a 	bl	80140f4 <sqrtf>
 800eec0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800eec4:	9801      	ldr	r0, [sp, #4]
 800eec6:	e72b      	b.n	800ed20 <arm_cmplx_mag_f32+0x4c>
 800eec8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eecc:	9001      	str	r0, [sp, #4]
 800eece:	f005 f911 	bl	80140f4 <sqrtf>
 800eed2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800eed6:	9801      	ldr	r0, [sp, #4]
 800eed8:	e76f      	b.n	800edba <arm_cmplx_mag_f32+0xe6>
 800eeda:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eede:	9001      	str	r0, [sp, #4]
 800eee0:	f005 f908 	bl	80140f4 <sqrtf>
 800eee4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800eee8:	9801      	ldr	r0, [sp, #4]
 800eeea:	e74d      	b.n	800ed88 <arm_cmplx_mag_f32+0xb4>
 800eeec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eef0:	9201      	str	r2, [sp, #4]
 800eef2:	f005 f8ff 	bl	80140f4 <sqrtf>
 800eef6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800eefa:	9903      	ldr	r1, [sp, #12]
 800eefc:	e7a2      	b.n	800ee44 <arm_cmplx_mag_f32+0x170>
 800eefe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef02:	9201      	str	r2, [sp, #4]
 800ef04:	f005 f8f6 	bl	80140f4 <sqrtf>
 800ef08:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ef0c:	9903      	ldr	r1, [sp, #12]
 800ef0e:	e77c      	b.n	800ee0a <arm_cmplx_mag_f32+0x136>
 800ef10:	9101      	str	r1, [sp, #4]
 800ef12:	f005 f8ef 	bl	80140f4 <sqrtf>
 800ef16:	9901      	ldr	r1, [sp, #4]
 800ef18:	e7af      	b.n	800ee7a <arm_cmplx_mag_f32+0x1a6>
 800ef1a:	bf00      	nop

0800ef1c <arm_cos_f32>:
 800ef1c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800efa4 <arm_cos_f32+0x88>
 800ef20:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ef24:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ef28:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ef30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ef38:	d504      	bpl.n	800ef44 <arm_cos_f32+0x28>
 800ef3a:	ee17 3a90 	vmov	r3, s15
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	ee07 3a90 	vmov	s15, r3
 800ef44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef48:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800efa8 <arm_cos_f32+0x8c>
 800ef4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef50:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ef54:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ef58:	ee17 3a90 	vmov	r3, s15
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef62:	d21a      	bcs.n	800ef9a <arm_cos_f32+0x7e>
 800ef64:	ee07 3a90 	vmov	s15, r3
 800ef68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef6c:	1c59      	adds	r1, r3, #1
 800ef6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef72:	4a0e      	ldr	r2, [pc, #56]	; (800efac <arm_cos_f32+0x90>)
 800ef74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ef80:	ed93 7a00 	vldr	s14, [r3]
 800ef84:	edd2 6a00 	vldr	s13, [r2]
 800ef88:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ef8c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ef90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef94:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ef98:	4770      	bx	lr
 800ef9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ef9e:	2101      	movs	r1, #1
 800efa0:	2300      	movs	r3, #0
 800efa2:	e7e6      	b.n	800ef72 <arm_cos_f32+0x56>
 800efa4:	3e22f983 	.word	0x3e22f983
 800efa8:	44000000 	.word	0x44000000
 800efac:	0801aaa0 	.word	0x0801aaa0

0800efb0 <arm_radix8_butterfly_f32>:
 800efb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb4:	ed2d 8b10 	vpush	{d8-d15}
 800efb8:	b095      	sub	sp, #84	; 0x54
 800efba:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800efbe:	4603      	mov	r3, r0
 800efc0:	3304      	adds	r3, #4
 800efc2:	ed9f bab9 	vldr	s22, [pc, #740]	; 800f2a8 <arm_radix8_butterfly_f32+0x2f8>
 800efc6:	9012      	str	r0, [sp, #72]	; 0x48
 800efc8:	468b      	mov	fp, r1
 800efca:	9313      	str	r3, [sp, #76]	; 0x4c
 800efcc:	4689      	mov	r9, r1
 800efce:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800efd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efd4:	960f      	str	r6, [sp, #60]	; 0x3c
 800efd6:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800efda:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800efde:	eb03 0508 	add.w	r5, r3, r8
 800efe2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800efe6:	eb05 040e 	add.w	r4, r5, lr
 800efea:	0137      	lsls	r7, r6, #4
 800efec:	eba6 030a 	sub.w	r3, r6, sl
 800eff0:	eb04 000e 	add.w	r0, r4, lr
 800eff4:	44b2      	add	sl, r6
 800eff6:	1d3a      	adds	r2, r7, #4
 800eff8:	9702      	str	r7, [sp, #8]
 800effa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800effe:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800f002:	ebae 0c06 	sub.w	ip, lr, r6
 800f006:	9703      	str	r7, [sp, #12]
 800f008:	eb03 0708 	add.w	r7, r3, r8
 800f00c:	9701      	str	r7, [sp, #4]
 800f00e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800f012:	9706      	str	r7, [sp, #24]
 800f014:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800f016:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800f01a:	f10e 0104 	add.w	r1, lr, #4
 800f01e:	4439      	add	r1, r7
 800f020:	443a      	add	r2, r7
 800f022:	0137      	lsls	r7, r6, #4
 800f024:	00f6      	lsls	r6, r6, #3
 800f026:	9704      	str	r7, [sp, #16]
 800f028:	9605      	str	r6, [sp, #20]
 800f02a:	9f01      	ldr	r7, [sp, #4]
 800f02c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f02e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800f032:	f04f 0c00 	mov.w	ip, #0
 800f036:	edd4 6a00 	vldr	s13, [r4]
 800f03a:	edd7 1a00 	vldr	s3, [r7]
 800f03e:	ed16 aa01 	vldr	s20, [r6, #-4]
 800f042:	edd5 5a00 	vldr	s11, [r5]
 800f046:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f04a:	ed90 6a00 	vldr	s12, [r0]
 800f04e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f052:	ed93 3a00 	vldr	s6, [r3]
 800f056:	ee39 0a86 	vadd.f32	s0, s19, s12
 800f05a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800f05e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800f062:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800f066:	ee35 7a02 	vadd.f32	s14, s10, s4
 800f06a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800f06e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f072:	ee74 6a07 	vadd.f32	s13, s8, s14
 800f076:	ee34 4a47 	vsub.f32	s8, s8, s14
 800f07a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800f07e:	ed85 4a00 	vstr	s8, [r5]
 800f082:	edd1 6a00 	vldr	s13, [r1]
 800f086:	ed94 9a01 	vldr	s18, [r4, #4]
 800f08a:	edd3 2a01 	vldr	s5, [r3, #4]
 800f08e:	edd7 8a01 	vldr	s17, [r7, #4]
 800f092:	edd6 0a00 	vldr	s1, [r6]
 800f096:	edd5 3a01 	vldr	s7, [r5, #4]
 800f09a:	ed90 8a01 	vldr	s16, [r0, #4]
 800f09e:	ed92 7a00 	vldr	s14, [r2]
 800f0a2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f0a6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800f0aa:	ee72 aae8 	vsub.f32	s21, s5, s17
 800f0ae:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800f0b2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800f0b6:	ee77 7a83 	vadd.f32	s15, s15, s6
 800f0ba:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800f0be:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800f0c2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800f0c6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800f0ca:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800f0ce:	ee77 0a08 	vadd.f32	s1, s14, s16
 800f0d2:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800f0d6:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f0da:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800f0de:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800f0e2:	ee76 6a89 	vadd.f32	s13, s13, s18
 800f0e6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800f0ea:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f0ee:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800f0f2:	ee35 5a42 	vsub.f32	s10, s10, s4
 800f0f6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800f0fa:	ee33 2a20 	vadd.f32	s4, s6, s1
 800f0fe:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800f102:	ee33 3a60 	vsub.f32	s6, s6, s1
 800f106:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800f10a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800f10e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800f112:	ee37 7a41 	vsub.f32	s14, s14, s2
 800f116:	ee73 1a84 	vadd.f32	s3, s7, s8
 800f11a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f11e:	ee76 3a27 	vadd.f32	s7, s12, s15
 800f122:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f126:	ee32 8a00 	vadd.f32	s16, s4, s0
 800f12a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800f12e:	ee32 2a40 	vsub.f32	s4, s4, s0
 800f132:	ee35 5a03 	vadd.f32	s10, s10, s6
 800f136:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800f13a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800f13e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800f142:	ee34 6a67 	vsub.f32	s12, s8, s15
 800f146:	ee75 4a87 	vadd.f32	s9, s11, s14
 800f14a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800f14e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f152:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f156:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800f15a:	44dc      	add	ip, fp
 800f15c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800f160:	45e1      	cmp	r9, ip
 800f162:	ed86 8a00 	vstr	s16, [r6]
 800f166:	ed85 2a01 	vstr	s4, [r5, #4]
 800f16a:	4456      	add	r6, sl
 800f16c:	ed02 0a01 	vstr	s0, [r2, #-4]
 800f170:	4455      	add	r5, sl
 800f172:	edc0 6a00 	vstr	s13, [r0]
 800f176:	ed82 1a00 	vstr	s2, [r2]
 800f17a:	ed80 5a01 	vstr	s10, [r0, #4]
 800f17e:	4452      	add	r2, sl
 800f180:	ed01 3a01 	vstr	s6, [r1, #-4]
 800f184:	4450      	add	r0, sl
 800f186:	edc7 2a00 	vstr	s5, [r7]
 800f18a:	edc4 4a00 	vstr	s9, [r4]
 800f18e:	ed83 7a00 	vstr	s14, [r3]
 800f192:	edc1 5a00 	vstr	s11, [r1]
 800f196:	edc7 3a01 	vstr	s7, [r7, #4]
 800f19a:	4451      	add	r1, sl
 800f19c:	ed84 6a01 	vstr	s12, [r4, #4]
 800f1a0:	4457      	add	r7, sl
 800f1a2:	edc3 7a01 	vstr	s15, [r3, #4]
 800f1a6:	4454      	add	r4, sl
 800f1a8:	4453      	add	r3, sl
 800f1aa:	f63f af44 	bhi.w	800f036 <arm_radix8_butterfly_f32+0x86>
 800f1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1b0:	2b07      	cmp	r3, #7
 800f1b2:	f240 81b7 	bls.w	800f524 <arm_radix8_butterfly_f32+0x574>
 800f1b6:	9b06      	ldr	r3, [sp, #24]
 800f1b8:	9903      	ldr	r1, [sp, #12]
 800f1ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f1bc:	9e05      	ldr	r6, [sp, #20]
 800f1be:	9a04      	ldr	r2, [sp, #16]
 800f1c0:	f103 0c08 	add.w	ip, r3, #8
 800f1c4:	9b02      	ldr	r3, [sp, #8]
 800f1c6:	3108      	adds	r1, #8
 800f1c8:	f108 0808 	add.w	r8, r8, #8
 800f1cc:	1841      	adds	r1, r0, r1
 800f1ce:	3608      	adds	r6, #8
 800f1d0:	330c      	adds	r3, #12
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	4444      	add	r4, r8
 800f1d6:	18c3      	adds	r3, r0, r3
 800f1d8:	9109      	str	r1, [sp, #36]	; 0x24
 800f1da:	1981      	adds	r1, r0, r6
 800f1dc:	f10e 0e08 	add.w	lr, lr, #8
 800f1e0:	3208      	adds	r2, #8
 800f1e2:	940b      	str	r4, [sp, #44]	; 0x2c
 800f1e4:	9107      	str	r1, [sp, #28]
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4601      	mov	r1, r0
 800f1ea:	9304      	str	r3, [sp, #16]
 800f1ec:	f100 030c 	add.w	r3, r0, #12
 800f1f0:	4474      	add	r4, lr
 800f1f2:	f04f 0801 	mov.w	r8, #1
 800f1f6:	1882      	adds	r2, r0, r2
 800f1f8:	4461      	add	r1, ip
 800f1fa:	9305      	str	r3, [sp, #20]
 800f1fc:	464b      	mov	r3, r9
 800f1fe:	940a      	str	r4, [sp, #40]	; 0x28
 800f200:	46c1      	mov	r9, r8
 800f202:	9208      	str	r2, [sp, #32]
 800f204:	46d8      	mov	r8, fp
 800f206:	9106      	str	r1, [sp, #24]
 800f208:	f04f 0e00 	mov.w	lr, #0
 800f20c:	469b      	mov	fp, r3
 800f20e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f210:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f212:	449e      	add	lr, r3
 800f214:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800f218:	441a      	add	r2, r3
 800f21a:	920e      	str	r2, [sp, #56]	; 0x38
 800f21c:	441a      	add	r2, r3
 800f21e:	18d4      	adds	r4, r2, r3
 800f220:	18e5      	adds	r5, r4, r3
 800f222:	18ee      	adds	r6, r5, r3
 800f224:	18f7      	adds	r7, r6, r3
 800f226:	eb07 0c03 	add.w	ip, r7, r3
 800f22a:	920d      	str	r2, [sp, #52]	; 0x34
 800f22c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800f230:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800f234:	910c      	str	r1, [sp, #48]	; 0x30
 800f236:	4419      	add	r1, r3
 800f238:	9103      	str	r1, [sp, #12]
 800f23a:	4419      	add	r1, r3
 800f23c:	18ca      	adds	r2, r1, r3
 800f23e:	9202      	str	r2, [sp, #8]
 800f240:	441a      	add	r2, r3
 800f242:	18d0      	adds	r0, r2, r3
 800f244:	ed92 ea01 	vldr	s28, [r2, #4]
 800f248:	9a02      	ldr	r2, [sp, #8]
 800f24a:	edd4 7a00 	vldr	s15, [r4]
 800f24e:	edd2 da01 	vldr	s27, [r2, #4]
 800f252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f254:	ed91 da01 	vldr	s26, [r1, #4]
 800f258:	ed92 ca01 	vldr	s24, [r2, #4]
 800f25c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f25e:	9903      	ldr	r1, [sp, #12]
 800f260:	edcd 7a03 	vstr	s15, [sp, #12]
 800f264:	edd2 7a00 	vldr	s15, [r2]
 800f268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f26a:	edcd 7a02 	vstr	s15, [sp, #8]
 800f26e:	edd2 7a00 	vldr	s15, [r2]
 800f272:	edd0 ea01 	vldr	s29, [r0, #4]
 800f276:	edd1 ca01 	vldr	s25, [r1, #4]
 800f27a:	eddc ba00 	vldr	s23, [ip]
 800f27e:	edd7 aa00 	vldr	s21, [r7]
 800f282:	ed96 aa00 	vldr	s20, [r6]
 800f286:	edd5 9a00 	vldr	s19, [r5]
 800f28a:	edcd 7a01 	vstr	s15, [sp, #4]
 800f28e:	4403      	add	r3, r0
 800f290:	ed93 fa01 	vldr	s30, [r3, #4]
 800f294:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800f298:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800f29c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f2a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f2a4:	46cc      	mov	ip, r9
 800f2a6:	e001      	b.n	800f2ac <arm_radix8_butterfly_f32+0x2fc>
 800f2a8:	3f3504f3 	.word	0x3f3504f3
 800f2ac:	ed91 6a00 	vldr	s12, [r1]
 800f2b0:	ed93 5a00 	vldr	s10, [r3]
 800f2b4:	edd0 fa00 	vldr	s31, [r0]
 800f2b8:	edd4 7a00 	vldr	s15, [r4]
 800f2bc:	ed95 7a00 	vldr	s14, [r5]
 800f2c0:	ed56 3a01 	vldr	s7, [r6, #-4]
 800f2c4:	ed17 3a01 	vldr	s6, [r7, #-4]
 800f2c8:	ed92 2a00 	vldr	s4, [r2]
 800f2cc:	ed96 0a00 	vldr	s0, [r6]
 800f2d0:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f2d4:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f2d8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800f2dc:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f2e0:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f2e4:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f2e8:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f2ec:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f2f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2f4:	ed06 6a01 	vstr	s12, [r6, #-4]
 800f2f8:	edd4 8a01 	vldr	s17, [r4, #4]
 800f2fc:	ed92 9a01 	vldr	s18, [r2, #4]
 800f300:	edd7 0a00 	vldr	s1, [r7]
 800f304:	edd1 2a01 	vldr	s5, [r1, #4]
 800f308:	ed95 7a01 	vldr	s14, [r5, #4]
 800f30c:	ed93 6a01 	vldr	s12, [r3, #4]
 800f310:	edd0 5a01 	vldr	s11, [r0, #4]
 800f314:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f318:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800f31c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f320:	ee78 fac7 	vsub.f32	s31, s17, s14
 800f324:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f328:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f32c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f330:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f334:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f338:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f33c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f340:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800f344:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f348:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800f34c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800f350:	ee72 fa87 	vadd.f32	s31, s5, s14
 800f354:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f358:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f35c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f360:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f364:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f368:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f36c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800f370:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800f374:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f378:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f37c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800f380:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f384:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f388:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f38c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800f390:	ee73 8a09 	vadd.f32	s17, s6, s18
 800f394:	ee74 4a82 	vadd.f32	s9, s9, s4
 800f398:	ee33 9a49 	vsub.f32	s18, s6, s18
 800f39c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800f3a0:	ee35 3a85 	vadd.f32	s6, s11, s10
 800f3a4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f3a8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800f3ac:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f3b0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800f3b4:	ee30 7a68 	vsub.f32	s14, s0, s17
 800f3b8:	ee35 8a03 	vadd.f32	s16, s10, s6
 800f3bc:	ee38 0a80 	vadd.f32	s0, s17, s0
 800f3c0:	ee73 3a82 	vadd.f32	s7, s7, s4
 800f3c4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800f3c8:	ed9d 2a01 	vldr	s4, [sp, #4]
 800f3cc:	eddd 1a02 	vldr	s3, [sp, #8]
 800f3d0:	ee35 5a43 	vsub.f32	s10, s10, s6
 800f3d4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800f3d8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800f3dc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800f3e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f3e4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800f3e8:	ee76 5a49 	vsub.f32	s11, s12, s18
 800f3ec:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800f3f0:	ee39 6a06 	vadd.f32	s12, s18, s12
 800f3f4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800f3f8:	ee21 4a84 	vmul.f32	s8, s3, s8
 800f3fc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800f400:	ee22 7a07 	vmul.f32	s14, s4, s14
 800f404:	ee22 2a08 	vmul.f32	s4, s4, s16
 800f408:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f40c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800f410:	ee31 1a09 	vadd.f32	s2, s2, s18
 800f414:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800f418:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800f41c:	ee74 0a60 	vsub.f32	s1, s8, s1
 800f420:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f424:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800f428:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800f42c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800f430:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800f434:	ee38 2a89 	vadd.f32	s4, s17, s18
 800f438:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800f43c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800f440:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800f444:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800f448:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800f44c:	eddd 5a03 	vldr	s11, [sp, #12]
 800f450:	edc6 fa00 	vstr	s31, [r6]
 800f454:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800f458:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f45c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800f460:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800f464:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800f468:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800f46c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800f470:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800f474:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f478:	ee74 4a89 	vadd.f32	s9, s9, s18
 800f47c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800f480:	ee78 8a85 	vadd.f32	s17, s17, s10
 800f484:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f488:	44c4      	add	ip, r8
 800f48a:	45e3      	cmp	fp, ip
 800f48c:	edc3 3a00 	vstr	s7, [r3]
 800f490:	edc3 6a01 	vstr	s13, [r3, #4]
 800f494:	4456      	add	r6, sl
 800f496:	ed07 1a01 	vstr	s2, [r7, #-4]
 800f49a:	edc7 0a00 	vstr	s1, [r7]
 800f49e:	4453      	add	r3, sl
 800f4a0:	ed80 2a00 	vstr	s4, [r0]
 800f4a4:	edc0 2a01 	vstr	s5, [r0, #4]
 800f4a8:	4457      	add	r7, sl
 800f4aa:	edc2 1a00 	vstr	s3, [r2]
 800f4ae:	ed82 7a01 	vstr	s14, [r2, #4]
 800f4b2:	4450      	add	r0, sl
 800f4b4:	ed85 8a00 	vstr	s16, [r5]
 800f4b8:	ed85 0a01 	vstr	s0, [r5, #4]
 800f4bc:	4452      	add	r2, sl
 800f4be:	edc1 4a00 	vstr	s9, [r1]
 800f4c2:	4455      	add	r5, sl
 800f4c4:	ed81 3a01 	vstr	s6, [r1, #4]
 800f4c8:	edc4 8a00 	vstr	s17, [r4]
 800f4cc:	ed84 6a01 	vstr	s12, [r4, #4]
 800f4d0:	4451      	add	r1, sl
 800f4d2:	4454      	add	r4, sl
 800f4d4:	f63f aeea 	bhi.w	800f2ac <arm_radix8_butterfly_f32+0x2fc>
 800f4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4da:	3308      	adds	r3, #8
 800f4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e6:	3308      	adds	r3, #8
 800f4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ea:	9b08      	ldr	r3, [sp, #32]
 800f4ec:	3308      	adds	r3, #8
 800f4ee:	9308      	str	r3, [sp, #32]
 800f4f0:	9b07      	ldr	r3, [sp, #28]
 800f4f2:	3308      	adds	r3, #8
 800f4f4:	9307      	str	r3, [sp, #28]
 800f4f6:	9b06      	ldr	r3, [sp, #24]
 800f4f8:	3308      	adds	r3, #8
 800f4fa:	9306      	str	r3, [sp, #24]
 800f4fc:	9b05      	ldr	r3, [sp, #20]
 800f4fe:	3308      	adds	r3, #8
 800f500:	9305      	str	r3, [sp, #20]
 800f502:	9b04      	ldr	r3, [sp, #16]
 800f504:	3308      	adds	r3, #8
 800f506:	9304      	str	r3, [sp, #16]
 800f508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f50a:	f109 0901 	add.w	r9, r9, #1
 800f50e:	454b      	cmp	r3, r9
 800f510:	f47f ae7d 	bne.w	800f20e <arm_radix8_butterfly_f32+0x25e>
 800f514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	b29b      	uxth	r3, r3
 800f51a:	46d9      	mov	r9, fp
 800f51c:	9310      	str	r3, [sp, #64]	; 0x40
 800f51e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800f522:	e554      	b.n	800efce <arm_radix8_butterfly_f32+0x1e>
 800f524:	b015      	add	sp, #84	; 0x54
 800f526:	ecbd 8b10 	vpop	{d8-d15}
 800f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52e:	bf00      	nop

0800f530 <__assert_func>:
 800f530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f532:	4614      	mov	r4, r2
 800f534:	461a      	mov	r2, r3
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <__assert_func+0x2c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4605      	mov	r5, r0
 800f53c:	68d8      	ldr	r0, [r3, #12]
 800f53e:	b14c      	cbz	r4, 800f554 <__assert_func+0x24>
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <__assert_func+0x30>)
 800f542:	9100      	str	r1, [sp, #0]
 800f544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f548:	4906      	ldr	r1, [pc, #24]	; (800f564 <__assert_func+0x34>)
 800f54a:	462b      	mov	r3, r5
 800f54c:	f000 f814 	bl	800f578 <fiprintf>
 800f550:	f002 f83a 	bl	80115c8 <abort>
 800f554:	4b04      	ldr	r3, [pc, #16]	; (800f568 <__assert_func+0x38>)
 800f556:	461c      	mov	r4, r3
 800f558:	e7f3      	b.n	800f542 <__assert_func+0x12>
 800f55a:	bf00      	nop
 800f55c:	200000dc 	.word	0x200000dc
 800f560:	0802aaa4 	.word	0x0802aaa4
 800f564:	0802aab1 	.word	0x0802aab1
 800f568:	0802aadf 	.word	0x0802aadf

0800f56c <__errno>:
 800f56c:	4b01      	ldr	r3, [pc, #4]	; (800f574 <__errno+0x8>)
 800f56e:	6818      	ldr	r0, [r3, #0]
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	200000dc 	.word	0x200000dc

0800f578 <fiprintf>:
 800f578:	b40e      	push	{r1, r2, r3}
 800f57a:	b503      	push	{r0, r1, lr}
 800f57c:	4601      	mov	r1, r0
 800f57e:	ab03      	add	r3, sp, #12
 800f580:	4805      	ldr	r0, [pc, #20]	; (800f598 <fiprintf+0x20>)
 800f582:	f853 2b04 	ldr.w	r2, [r3], #4
 800f586:	6800      	ldr	r0, [r0, #0]
 800f588:	9301      	str	r3, [sp, #4]
 800f58a:	f000 f86b 	bl	800f664 <_vfiprintf_r>
 800f58e:	b002      	add	sp, #8
 800f590:	f85d eb04 	ldr.w	lr, [sp], #4
 800f594:	b003      	add	sp, #12
 800f596:	4770      	bx	lr
 800f598:	200000dc 	.word	0x200000dc

0800f59c <__libc_init_array>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	4d0d      	ldr	r5, [pc, #52]	; (800f5d4 <__libc_init_array+0x38>)
 800f5a0:	4c0d      	ldr	r4, [pc, #52]	; (800f5d8 <__libc_init_array+0x3c>)
 800f5a2:	1b64      	subs	r4, r4, r5
 800f5a4:	10a4      	asrs	r4, r4, #2
 800f5a6:	2600      	movs	r6, #0
 800f5a8:	42a6      	cmp	r6, r4
 800f5aa:	d109      	bne.n	800f5c0 <__libc_init_array+0x24>
 800f5ac:	4d0b      	ldr	r5, [pc, #44]	; (800f5dc <__libc_init_array+0x40>)
 800f5ae:	4c0c      	ldr	r4, [pc, #48]	; (800f5e0 <__libc_init_array+0x44>)
 800f5b0:	f005 ff1e 	bl	80153f0 <_init>
 800f5b4:	1b64      	subs	r4, r4, r5
 800f5b6:	10a4      	asrs	r4, r4, #2
 800f5b8:	2600      	movs	r6, #0
 800f5ba:	42a6      	cmp	r6, r4
 800f5bc:	d105      	bne.n	800f5ca <__libc_init_array+0x2e>
 800f5be:	bd70      	pop	{r4, r5, r6, pc}
 800f5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5c4:	4798      	blx	r3
 800f5c6:	3601      	adds	r6, #1
 800f5c8:	e7ee      	b.n	800f5a8 <__libc_init_array+0xc>
 800f5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5ce:	4798      	blx	r3
 800f5d0:	3601      	adds	r6, #1
 800f5d2:	e7f2      	b.n	800f5ba <__libc_init_array+0x1e>
 800f5d4:	0802b3c0 	.word	0x0802b3c0
 800f5d8:	0802b3c0 	.word	0x0802b3c0
 800f5dc:	0802b3c0 	.word	0x0802b3c0
 800f5e0:	0802b3c4 	.word	0x0802b3c4

0800f5e4 <memcpy>:
 800f5e4:	440a      	add	r2, r1
 800f5e6:	4291      	cmp	r1, r2
 800f5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5ec:	d100      	bne.n	800f5f0 <memcpy+0xc>
 800f5ee:	4770      	bx	lr
 800f5f0:	b510      	push	{r4, lr}
 800f5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5fa:	4291      	cmp	r1, r2
 800f5fc:	d1f9      	bne.n	800f5f2 <memcpy+0xe>
 800f5fe:	bd10      	pop	{r4, pc}

0800f600 <memset>:
 800f600:	4402      	add	r2, r0
 800f602:	4603      	mov	r3, r0
 800f604:	4293      	cmp	r3, r2
 800f606:	d100      	bne.n	800f60a <memset+0xa>
 800f608:	4770      	bx	lr
 800f60a:	f803 1b01 	strb.w	r1, [r3], #1
 800f60e:	e7f9      	b.n	800f604 <memset+0x4>

0800f610 <__sfputc_r>:
 800f610:	6893      	ldr	r3, [r2, #8]
 800f612:	3b01      	subs	r3, #1
 800f614:	2b00      	cmp	r3, #0
 800f616:	b410      	push	{r4}
 800f618:	6093      	str	r3, [r2, #8]
 800f61a:	da08      	bge.n	800f62e <__sfputc_r+0x1e>
 800f61c:	6994      	ldr	r4, [r2, #24]
 800f61e:	42a3      	cmp	r3, r4
 800f620:	db01      	blt.n	800f626 <__sfputc_r+0x16>
 800f622:	290a      	cmp	r1, #10
 800f624:	d103      	bne.n	800f62e <__sfputc_r+0x1e>
 800f626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f62a:	f001 bf0d 	b.w	8011448 <__swbuf_r>
 800f62e:	6813      	ldr	r3, [r2, #0]
 800f630:	1c58      	adds	r0, r3, #1
 800f632:	6010      	str	r0, [r2, #0]
 800f634:	7019      	strb	r1, [r3, #0]
 800f636:	4608      	mov	r0, r1
 800f638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <__sfputs_r>:
 800f63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f640:	4606      	mov	r6, r0
 800f642:	460f      	mov	r7, r1
 800f644:	4614      	mov	r4, r2
 800f646:	18d5      	adds	r5, r2, r3
 800f648:	42ac      	cmp	r4, r5
 800f64a:	d101      	bne.n	800f650 <__sfputs_r+0x12>
 800f64c:	2000      	movs	r0, #0
 800f64e:	e007      	b.n	800f660 <__sfputs_r+0x22>
 800f650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f654:	463a      	mov	r2, r7
 800f656:	4630      	mov	r0, r6
 800f658:	f7ff ffda 	bl	800f610 <__sfputc_r>
 800f65c:	1c43      	adds	r3, r0, #1
 800f65e:	d1f3      	bne.n	800f648 <__sfputs_r+0xa>
 800f660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f664 <_vfiprintf_r>:
 800f664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f668:	460d      	mov	r5, r1
 800f66a:	b09d      	sub	sp, #116	; 0x74
 800f66c:	4614      	mov	r4, r2
 800f66e:	4698      	mov	r8, r3
 800f670:	4606      	mov	r6, r0
 800f672:	b118      	cbz	r0, 800f67c <_vfiprintf_r+0x18>
 800f674:	6983      	ldr	r3, [r0, #24]
 800f676:	b90b      	cbnz	r3, 800f67c <_vfiprintf_r+0x18>
 800f678:	f002 ff42 	bl	8012500 <__sinit>
 800f67c:	4b89      	ldr	r3, [pc, #548]	; (800f8a4 <_vfiprintf_r+0x240>)
 800f67e:	429d      	cmp	r5, r3
 800f680:	d11b      	bne.n	800f6ba <_vfiprintf_r+0x56>
 800f682:	6875      	ldr	r5, [r6, #4]
 800f684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f686:	07d9      	lsls	r1, r3, #31
 800f688:	d405      	bmi.n	800f696 <_vfiprintf_r+0x32>
 800f68a:	89ab      	ldrh	r3, [r5, #12]
 800f68c:	059a      	lsls	r2, r3, #22
 800f68e:	d402      	bmi.n	800f696 <_vfiprintf_r+0x32>
 800f690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f692:	f003 fb46 	bl	8012d22 <__retarget_lock_acquire_recursive>
 800f696:	89ab      	ldrh	r3, [r5, #12]
 800f698:	071b      	lsls	r3, r3, #28
 800f69a:	d501      	bpl.n	800f6a0 <_vfiprintf_r+0x3c>
 800f69c:	692b      	ldr	r3, [r5, #16]
 800f69e:	b9eb      	cbnz	r3, 800f6dc <_vfiprintf_r+0x78>
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f001 ff22 	bl	80114ec <__swsetup_r>
 800f6a8:	b1c0      	cbz	r0, 800f6dc <_vfiprintf_r+0x78>
 800f6aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6ac:	07dc      	lsls	r4, r3, #31
 800f6ae:	d50e      	bpl.n	800f6ce <_vfiprintf_r+0x6a>
 800f6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b4:	b01d      	add	sp, #116	; 0x74
 800f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ba:	4b7b      	ldr	r3, [pc, #492]	; (800f8a8 <_vfiprintf_r+0x244>)
 800f6bc:	429d      	cmp	r5, r3
 800f6be:	d101      	bne.n	800f6c4 <_vfiprintf_r+0x60>
 800f6c0:	68b5      	ldr	r5, [r6, #8]
 800f6c2:	e7df      	b.n	800f684 <_vfiprintf_r+0x20>
 800f6c4:	4b79      	ldr	r3, [pc, #484]	; (800f8ac <_vfiprintf_r+0x248>)
 800f6c6:	429d      	cmp	r5, r3
 800f6c8:	bf08      	it	eq
 800f6ca:	68f5      	ldreq	r5, [r6, #12]
 800f6cc:	e7da      	b.n	800f684 <_vfiprintf_r+0x20>
 800f6ce:	89ab      	ldrh	r3, [r5, #12]
 800f6d0:	0598      	lsls	r0, r3, #22
 800f6d2:	d4ed      	bmi.n	800f6b0 <_vfiprintf_r+0x4c>
 800f6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6d6:	f003 fb25 	bl	8012d24 <__retarget_lock_release_recursive>
 800f6da:	e7e9      	b.n	800f6b0 <_vfiprintf_r+0x4c>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9309      	str	r3, [sp, #36]	; 0x24
 800f6e0:	2320      	movs	r3, #32
 800f6e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6ea:	2330      	movs	r3, #48	; 0x30
 800f6ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f8b0 <_vfiprintf_r+0x24c>
 800f6f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6f4:	f04f 0901 	mov.w	r9, #1
 800f6f8:	4623      	mov	r3, r4
 800f6fa:	469a      	mov	sl, r3
 800f6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f700:	b10a      	cbz	r2, 800f706 <_vfiprintf_r+0xa2>
 800f702:	2a25      	cmp	r2, #37	; 0x25
 800f704:	d1f9      	bne.n	800f6fa <_vfiprintf_r+0x96>
 800f706:	ebba 0b04 	subs.w	fp, sl, r4
 800f70a:	d00b      	beq.n	800f724 <_vfiprintf_r+0xc0>
 800f70c:	465b      	mov	r3, fp
 800f70e:	4622      	mov	r2, r4
 800f710:	4629      	mov	r1, r5
 800f712:	4630      	mov	r0, r6
 800f714:	f7ff ff93 	bl	800f63e <__sfputs_r>
 800f718:	3001      	adds	r0, #1
 800f71a:	f000 80aa 	beq.w	800f872 <_vfiprintf_r+0x20e>
 800f71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f720:	445a      	add	r2, fp
 800f722:	9209      	str	r2, [sp, #36]	; 0x24
 800f724:	f89a 3000 	ldrb.w	r3, [sl]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f000 80a2 	beq.w	800f872 <_vfiprintf_r+0x20e>
 800f72e:	2300      	movs	r3, #0
 800f730:	f04f 32ff 	mov.w	r2, #4294967295
 800f734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f738:	f10a 0a01 	add.w	sl, sl, #1
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	9307      	str	r3, [sp, #28]
 800f740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f744:	931a      	str	r3, [sp, #104]	; 0x68
 800f746:	4654      	mov	r4, sl
 800f748:	2205      	movs	r2, #5
 800f74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f74e:	4858      	ldr	r0, [pc, #352]	; (800f8b0 <_vfiprintf_r+0x24c>)
 800f750:	f7f0 fd6e 	bl	8000230 <memchr>
 800f754:	9a04      	ldr	r2, [sp, #16]
 800f756:	b9d8      	cbnz	r0, 800f790 <_vfiprintf_r+0x12c>
 800f758:	06d1      	lsls	r1, r2, #27
 800f75a:	bf44      	itt	mi
 800f75c:	2320      	movmi	r3, #32
 800f75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f762:	0713      	lsls	r3, r2, #28
 800f764:	bf44      	itt	mi
 800f766:	232b      	movmi	r3, #43	; 0x2b
 800f768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f76c:	f89a 3000 	ldrb.w	r3, [sl]
 800f770:	2b2a      	cmp	r3, #42	; 0x2a
 800f772:	d015      	beq.n	800f7a0 <_vfiprintf_r+0x13c>
 800f774:	9a07      	ldr	r2, [sp, #28]
 800f776:	4654      	mov	r4, sl
 800f778:	2000      	movs	r0, #0
 800f77a:	f04f 0c0a 	mov.w	ip, #10
 800f77e:	4621      	mov	r1, r4
 800f780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f784:	3b30      	subs	r3, #48	; 0x30
 800f786:	2b09      	cmp	r3, #9
 800f788:	d94e      	bls.n	800f828 <_vfiprintf_r+0x1c4>
 800f78a:	b1b0      	cbz	r0, 800f7ba <_vfiprintf_r+0x156>
 800f78c:	9207      	str	r2, [sp, #28]
 800f78e:	e014      	b.n	800f7ba <_vfiprintf_r+0x156>
 800f790:	eba0 0308 	sub.w	r3, r0, r8
 800f794:	fa09 f303 	lsl.w	r3, r9, r3
 800f798:	4313      	orrs	r3, r2
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	46a2      	mov	sl, r4
 800f79e:	e7d2      	b.n	800f746 <_vfiprintf_r+0xe2>
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	1d19      	adds	r1, r3, #4
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	9103      	str	r1, [sp, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	bfbb      	ittet	lt
 800f7ac:	425b      	neglt	r3, r3
 800f7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f7b2:	9307      	strge	r3, [sp, #28]
 800f7b4:	9307      	strlt	r3, [sp, #28]
 800f7b6:	bfb8      	it	lt
 800f7b8:	9204      	strlt	r2, [sp, #16]
 800f7ba:	7823      	ldrb	r3, [r4, #0]
 800f7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f7be:	d10c      	bne.n	800f7da <_vfiprintf_r+0x176>
 800f7c0:	7863      	ldrb	r3, [r4, #1]
 800f7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7c4:	d135      	bne.n	800f832 <_vfiprintf_r+0x1ce>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	1d1a      	adds	r2, r3, #4
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	9203      	str	r2, [sp, #12]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bfb8      	it	lt
 800f7d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7d6:	3402      	adds	r4, #2
 800f7d8:	9305      	str	r3, [sp, #20]
 800f7da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f8c0 <_vfiprintf_r+0x25c>
 800f7de:	7821      	ldrb	r1, [r4, #0]
 800f7e0:	2203      	movs	r2, #3
 800f7e2:	4650      	mov	r0, sl
 800f7e4:	f7f0 fd24 	bl	8000230 <memchr>
 800f7e8:	b140      	cbz	r0, 800f7fc <_vfiprintf_r+0x198>
 800f7ea:	2340      	movs	r3, #64	; 0x40
 800f7ec:	eba0 000a 	sub.w	r0, r0, sl
 800f7f0:	fa03 f000 	lsl.w	r0, r3, r0
 800f7f4:	9b04      	ldr	r3, [sp, #16]
 800f7f6:	4303      	orrs	r3, r0
 800f7f8:	3401      	adds	r4, #1
 800f7fa:	9304      	str	r3, [sp, #16]
 800f7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f800:	482c      	ldr	r0, [pc, #176]	; (800f8b4 <_vfiprintf_r+0x250>)
 800f802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f806:	2206      	movs	r2, #6
 800f808:	f7f0 fd12 	bl	8000230 <memchr>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d03f      	beq.n	800f890 <_vfiprintf_r+0x22c>
 800f810:	4b29      	ldr	r3, [pc, #164]	; (800f8b8 <_vfiprintf_r+0x254>)
 800f812:	bb1b      	cbnz	r3, 800f85c <_vfiprintf_r+0x1f8>
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	3307      	adds	r3, #7
 800f818:	f023 0307 	bic.w	r3, r3, #7
 800f81c:	3308      	adds	r3, #8
 800f81e:	9303      	str	r3, [sp, #12]
 800f820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f822:	443b      	add	r3, r7
 800f824:	9309      	str	r3, [sp, #36]	; 0x24
 800f826:	e767      	b.n	800f6f8 <_vfiprintf_r+0x94>
 800f828:	fb0c 3202 	mla	r2, ip, r2, r3
 800f82c:	460c      	mov	r4, r1
 800f82e:	2001      	movs	r0, #1
 800f830:	e7a5      	b.n	800f77e <_vfiprintf_r+0x11a>
 800f832:	2300      	movs	r3, #0
 800f834:	3401      	adds	r4, #1
 800f836:	9305      	str	r3, [sp, #20]
 800f838:	4619      	mov	r1, r3
 800f83a:	f04f 0c0a 	mov.w	ip, #10
 800f83e:	4620      	mov	r0, r4
 800f840:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f844:	3a30      	subs	r2, #48	; 0x30
 800f846:	2a09      	cmp	r2, #9
 800f848:	d903      	bls.n	800f852 <_vfiprintf_r+0x1ee>
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d0c5      	beq.n	800f7da <_vfiprintf_r+0x176>
 800f84e:	9105      	str	r1, [sp, #20]
 800f850:	e7c3      	b.n	800f7da <_vfiprintf_r+0x176>
 800f852:	fb0c 2101 	mla	r1, ip, r1, r2
 800f856:	4604      	mov	r4, r0
 800f858:	2301      	movs	r3, #1
 800f85a:	e7f0      	b.n	800f83e <_vfiprintf_r+0x1da>
 800f85c:	ab03      	add	r3, sp, #12
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	462a      	mov	r2, r5
 800f862:	4b16      	ldr	r3, [pc, #88]	; (800f8bc <_vfiprintf_r+0x258>)
 800f864:	a904      	add	r1, sp, #16
 800f866:	4630      	mov	r0, r6
 800f868:	f000 f8cc 	bl	800fa04 <_printf_float>
 800f86c:	4607      	mov	r7, r0
 800f86e:	1c78      	adds	r0, r7, #1
 800f870:	d1d6      	bne.n	800f820 <_vfiprintf_r+0x1bc>
 800f872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f874:	07d9      	lsls	r1, r3, #31
 800f876:	d405      	bmi.n	800f884 <_vfiprintf_r+0x220>
 800f878:	89ab      	ldrh	r3, [r5, #12]
 800f87a:	059a      	lsls	r2, r3, #22
 800f87c:	d402      	bmi.n	800f884 <_vfiprintf_r+0x220>
 800f87e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f880:	f003 fa50 	bl	8012d24 <__retarget_lock_release_recursive>
 800f884:	89ab      	ldrh	r3, [r5, #12]
 800f886:	065b      	lsls	r3, r3, #25
 800f888:	f53f af12 	bmi.w	800f6b0 <_vfiprintf_r+0x4c>
 800f88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f88e:	e711      	b.n	800f6b4 <_vfiprintf_r+0x50>
 800f890:	ab03      	add	r3, sp, #12
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	462a      	mov	r2, r5
 800f896:	4b09      	ldr	r3, [pc, #36]	; (800f8bc <_vfiprintf_r+0x258>)
 800f898:	a904      	add	r1, sp, #16
 800f89a:	4630      	mov	r0, r6
 800f89c:	f000 fb56 	bl	800ff4c <_printf_i>
 800f8a0:	e7e4      	b.n	800f86c <_vfiprintf_r+0x208>
 800f8a2:	bf00      	nop
 800f8a4:	0802ad54 	.word	0x0802ad54
 800f8a8:	0802ad74 	.word	0x0802ad74
 800f8ac:	0802ad34 	.word	0x0802ad34
 800f8b0:	0802aae4 	.word	0x0802aae4
 800f8b4:	0802aaee 	.word	0x0802aaee
 800f8b8:	0800fa05 	.word	0x0800fa05
 800f8bc:	0800f63f 	.word	0x0800f63f
 800f8c0:	0802aaea 	.word	0x0802aaea

0800f8c4 <__cvt>:
 800f8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c8:	ec55 4b10 	vmov	r4, r5, d0
 800f8cc:	2d00      	cmp	r5, #0
 800f8ce:	460e      	mov	r6, r1
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	462b      	mov	r3, r5
 800f8d4:	bfbb      	ittet	lt
 800f8d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f8da:	461d      	movlt	r5, r3
 800f8dc:	2300      	movge	r3, #0
 800f8de:	232d      	movlt	r3, #45	; 0x2d
 800f8e0:	700b      	strb	r3, [r1, #0]
 800f8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f8e8:	4691      	mov	r9, r2
 800f8ea:	f023 0820 	bic.w	r8, r3, #32
 800f8ee:	bfbc      	itt	lt
 800f8f0:	4622      	movlt	r2, r4
 800f8f2:	4614      	movlt	r4, r2
 800f8f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f8f8:	d005      	beq.n	800f906 <__cvt+0x42>
 800f8fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f8fe:	d100      	bne.n	800f902 <__cvt+0x3e>
 800f900:	3601      	adds	r6, #1
 800f902:	2102      	movs	r1, #2
 800f904:	e000      	b.n	800f908 <__cvt+0x44>
 800f906:	2103      	movs	r1, #3
 800f908:	ab03      	add	r3, sp, #12
 800f90a:	9301      	str	r3, [sp, #4]
 800f90c:	ab02      	add	r3, sp, #8
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	ec45 4b10 	vmov	d0, r4, r5
 800f914:	4653      	mov	r3, sl
 800f916:	4632      	mov	r2, r6
 800f918:	f001 feea 	bl	80116f0 <_dtoa_r>
 800f91c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f920:	4607      	mov	r7, r0
 800f922:	d102      	bne.n	800f92a <__cvt+0x66>
 800f924:	f019 0f01 	tst.w	r9, #1
 800f928:	d022      	beq.n	800f970 <__cvt+0xac>
 800f92a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f92e:	eb07 0906 	add.w	r9, r7, r6
 800f932:	d110      	bne.n	800f956 <__cvt+0x92>
 800f934:	783b      	ldrb	r3, [r7, #0]
 800f936:	2b30      	cmp	r3, #48	; 0x30
 800f938:	d10a      	bne.n	800f950 <__cvt+0x8c>
 800f93a:	2200      	movs	r2, #0
 800f93c:	2300      	movs	r3, #0
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f1 f8e9 	bl	8000b18 <__aeabi_dcmpeq>
 800f946:	b918      	cbnz	r0, 800f950 <__cvt+0x8c>
 800f948:	f1c6 0601 	rsb	r6, r6, #1
 800f94c:	f8ca 6000 	str.w	r6, [sl]
 800f950:	f8da 3000 	ldr.w	r3, [sl]
 800f954:	4499      	add	r9, r3
 800f956:	2200      	movs	r2, #0
 800f958:	2300      	movs	r3, #0
 800f95a:	4620      	mov	r0, r4
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7f1 f8db 	bl	8000b18 <__aeabi_dcmpeq>
 800f962:	b108      	cbz	r0, 800f968 <__cvt+0xa4>
 800f964:	f8cd 900c 	str.w	r9, [sp, #12]
 800f968:	2230      	movs	r2, #48	; 0x30
 800f96a:	9b03      	ldr	r3, [sp, #12]
 800f96c:	454b      	cmp	r3, r9
 800f96e:	d307      	bcc.n	800f980 <__cvt+0xbc>
 800f970:	9b03      	ldr	r3, [sp, #12]
 800f972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f974:	1bdb      	subs	r3, r3, r7
 800f976:	4638      	mov	r0, r7
 800f978:	6013      	str	r3, [r2, #0]
 800f97a:	b004      	add	sp, #16
 800f97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f980:	1c59      	adds	r1, r3, #1
 800f982:	9103      	str	r1, [sp, #12]
 800f984:	701a      	strb	r2, [r3, #0]
 800f986:	e7f0      	b.n	800f96a <__cvt+0xa6>

0800f988 <__exponent>:
 800f988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f98a:	4603      	mov	r3, r0
 800f98c:	2900      	cmp	r1, #0
 800f98e:	bfb8      	it	lt
 800f990:	4249      	neglt	r1, r1
 800f992:	f803 2b02 	strb.w	r2, [r3], #2
 800f996:	bfb4      	ite	lt
 800f998:	222d      	movlt	r2, #45	; 0x2d
 800f99a:	222b      	movge	r2, #43	; 0x2b
 800f99c:	2909      	cmp	r1, #9
 800f99e:	7042      	strb	r2, [r0, #1]
 800f9a0:	dd2a      	ble.n	800f9f8 <__exponent+0x70>
 800f9a2:	f10d 0407 	add.w	r4, sp, #7
 800f9a6:	46a4      	mov	ip, r4
 800f9a8:	270a      	movs	r7, #10
 800f9aa:	46a6      	mov	lr, r4
 800f9ac:	460a      	mov	r2, r1
 800f9ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800f9b2:	fb07 1516 	mls	r5, r7, r6, r1
 800f9b6:	3530      	adds	r5, #48	; 0x30
 800f9b8:	2a63      	cmp	r2, #99	; 0x63
 800f9ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800f9be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	dcf1      	bgt.n	800f9aa <__exponent+0x22>
 800f9c6:	3130      	adds	r1, #48	; 0x30
 800f9c8:	f1ae 0502 	sub.w	r5, lr, #2
 800f9cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f9d0:	1c44      	adds	r4, r0, #1
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	4561      	cmp	r1, ip
 800f9d6:	d30a      	bcc.n	800f9ee <__exponent+0x66>
 800f9d8:	f10d 0209 	add.w	r2, sp, #9
 800f9dc:	eba2 020e 	sub.w	r2, r2, lr
 800f9e0:	4565      	cmp	r5, ip
 800f9e2:	bf88      	it	hi
 800f9e4:	2200      	movhi	r2, #0
 800f9e6:	4413      	add	r3, r2
 800f9e8:	1a18      	subs	r0, r3, r0
 800f9ea:	b003      	add	sp, #12
 800f9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f9f6:	e7ed      	b.n	800f9d4 <__exponent+0x4c>
 800f9f8:	2330      	movs	r3, #48	; 0x30
 800f9fa:	3130      	adds	r1, #48	; 0x30
 800f9fc:	7083      	strb	r3, [r0, #2]
 800f9fe:	70c1      	strb	r1, [r0, #3]
 800fa00:	1d03      	adds	r3, r0, #4
 800fa02:	e7f1      	b.n	800f9e8 <__exponent+0x60>

0800fa04 <_printf_float>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	ed2d 8b02 	vpush	{d8}
 800fa0c:	b08d      	sub	sp, #52	; 0x34
 800fa0e:	460c      	mov	r4, r1
 800fa10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fa14:	4616      	mov	r6, r2
 800fa16:	461f      	mov	r7, r3
 800fa18:	4605      	mov	r5, r0
 800fa1a:	f003 f97d 	bl	8012d18 <_localeconv_r>
 800fa1e:	f8d0 a000 	ldr.w	sl, [r0]
 800fa22:	4650      	mov	r0, sl
 800fa24:	f7f0 fbfc 	bl	8000220 <strlen>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	9305      	str	r3, [sp, #20]
 800fa30:	f8d8 3000 	ldr.w	r3, [r8]
 800fa34:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fa38:	3307      	adds	r3, #7
 800fa3a:	f023 0307 	bic.w	r3, r3, #7
 800fa3e:	f103 0208 	add.w	r2, r3, #8
 800fa42:	f8c8 2000 	str.w	r2, [r8]
 800fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fa4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fa52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa56:	9307      	str	r3, [sp, #28]
 800fa58:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa5c:	ee08 0a10 	vmov	s16, r0
 800fa60:	4b9f      	ldr	r3, [pc, #636]	; (800fce0 <_printf_float+0x2dc>)
 800fa62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa66:	f04f 32ff 	mov.w	r2, #4294967295
 800fa6a:	f7f1 f887 	bl	8000b7c <__aeabi_dcmpun>
 800fa6e:	bb88      	cbnz	r0, 800fad4 <_printf_float+0xd0>
 800fa70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa74:	4b9a      	ldr	r3, [pc, #616]	; (800fce0 <_printf_float+0x2dc>)
 800fa76:	f04f 32ff 	mov.w	r2, #4294967295
 800fa7a:	f7f1 f861 	bl	8000b40 <__aeabi_dcmple>
 800fa7e:	bb48      	cbnz	r0, 800fad4 <_printf_float+0xd0>
 800fa80:	2200      	movs	r2, #0
 800fa82:	2300      	movs	r3, #0
 800fa84:	4640      	mov	r0, r8
 800fa86:	4649      	mov	r1, r9
 800fa88:	f7f1 f850 	bl	8000b2c <__aeabi_dcmplt>
 800fa8c:	b110      	cbz	r0, 800fa94 <_printf_float+0x90>
 800fa8e:	232d      	movs	r3, #45	; 0x2d
 800fa90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa94:	4b93      	ldr	r3, [pc, #588]	; (800fce4 <_printf_float+0x2e0>)
 800fa96:	4894      	ldr	r0, [pc, #592]	; (800fce8 <_printf_float+0x2e4>)
 800fa98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fa9c:	bf94      	ite	ls
 800fa9e:	4698      	movls	r8, r3
 800faa0:	4680      	movhi	r8, r0
 800faa2:	2303      	movs	r3, #3
 800faa4:	6123      	str	r3, [r4, #16]
 800faa6:	9b05      	ldr	r3, [sp, #20]
 800faa8:	f023 0204 	bic.w	r2, r3, #4
 800faac:	6022      	str	r2, [r4, #0]
 800faae:	f04f 0900 	mov.w	r9, #0
 800fab2:	9700      	str	r7, [sp, #0]
 800fab4:	4633      	mov	r3, r6
 800fab6:	aa0b      	add	r2, sp, #44	; 0x2c
 800fab8:	4621      	mov	r1, r4
 800faba:	4628      	mov	r0, r5
 800fabc:	f000 f9d8 	bl	800fe70 <_printf_common>
 800fac0:	3001      	adds	r0, #1
 800fac2:	f040 8090 	bne.w	800fbe6 <_printf_float+0x1e2>
 800fac6:	f04f 30ff 	mov.w	r0, #4294967295
 800faca:	b00d      	add	sp, #52	; 0x34
 800facc:	ecbd 8b02 	vpop	{d8}
 800fad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad4:	4642      	mov	r2, r8
 800fad6:	464b      	mov	r3, r9
 800fad8:	4640      	mov	r0, r8
 800fada:	4649      	mov	r1, r9
 800fadc:	f7f1 f84e 	bl	8000b7c <__aeabi_dcmpun>
 800fae0:	b140      	cbz	r0, 800faf4 <_printf_float+0xf0>
 800fae2:	464b      	mov	r3, r9
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bfbc      	itt	lt
 800fae8:	232d      	movlt	r3, #45	; 0x2d
 800faea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800faee:	487f      	ldr	r0, [pc, #508]	; (800fcec <_printf_float+0x2e8>)
 800faf0:	4b7f      	ldr	r3, [pc, #508]	; (800fcf0 <_printf_float+0x2ec>)
 800faf2:	e7d1      	b.n	800fa98 <_printf_float+0x94>
 800faf4:	6863      	ldr	r3, [r4, #4]
 800faf6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fafa:	9206      	str	r2, [sp, #24]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	d13f      	bne.n	800fb80 <_printf_float+0x17c>
 800fb00:	2306      	movs	r3, #6
 800fb02:	6063      	str	r3, [r4, #4]
 800fb04:	9b05      	ldr	r3, [sp, #20]
 800fb06:	6861      	ldr	r1, [r4, #4]
 800fb08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	ab0a      	add	r3, sp, #40	; 0x28
 800fb12:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fb16:	ab09      	add	r3, sp, #36	; 0x24
 800fb18:	ec49 8b10 	vmov	d0, r8, r9
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	6022      	str	r2, [r4, #0]
 800fb20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fb24:	4628      	mov	r0, r5
 800fb26:	f7ff fecd 	bl	800f8c4 <__cvt>
 800fb2a:	9b06      	ldr	r3, [sp, #24]
 800fb2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb2e:	2b47      	cmp	r3, #71	; 0x47
 800fb30:	4680      	mov	r8, r0
 800fb32:	d108      	bne.n	800fb46 <_printf_float+0x142>
 800fb34:	1cc8      	adds	r0, r1, #3
 800fb36:	db02      	blt.n	800fb3e <_printf_float+0x13a>
 800fb38:	6863      	ldr	r3, [r4, #4]
 800fb3a:	4299      	cmp	r1, r3
 800fb3c:	dd41      	ble.n	800fbc2 <_printf_float+0x1be>
 800fb3e:	f1ab 0b02 	sub.w	fp, fp, #2
 800fb42:	fa5f fb8b 	uxtb.w	fp, fp
 800fb46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fb4a:	d820      	bhi.n	800fb8e <_printf_float+0x18a>
 800fb4c:	3901      	subs	r1, #1
 800fb4e:	465a      	mov	r2, fp
 800fb50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fb54:	9109      	str	r1, [sp, #36]	; 0x24
 800fb56:	f7ff ff17 	bl	800f988 <__exponent>
 800fb5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb5c:	1813      	adds	r3, r2, r0
 800fb5e:	2a01      	cmp	r2, #1
 800fb60:	4681      	mov	r9, r0
 800fb62:	6123      	str	r3, [r4, #16]
 800fb64:	dc02      	bgt.n	800fb6c <_printf_float+0x168>
 800fb66:	6822      	ldr	r2, [r4, #0]
 800fb68:	07d2      	lsls	r2, r2, #31
 800fb6a:	d501      	bpl.n	800fb70 <_printf_float+0x16c>
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	6123      	str	r3, [r4, #16]
 800fb70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d09c      	beq.n	800fab2 <_printf_float+0xae>
 800fb78:	232d      	movs	r3, #45	; 0x2d
 800fb7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb7e:	e798      	b.n	800fab2 <_printf_float+0xae>
 800fb80:	9a06      	ldr	r2, [sp, #24]
 800fb82:	2a47      	cmp	r2, #71	; 0x47
 800fb84:	d1be      	bne.n	800fb04 <_printf_float+0x100>
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1bc      	bne.n	800fb04 <_printf_float+0x100>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	e7b9      	b.n	800fb02 <_printf_float+0xfe>
 800fb8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fb92:	d118      	bne.n	800fbc6 <_printf_float+0x1c2>
 800fb94:	2900      	cmp	r1, #0
 800fb96:	6863      	ldr	r3, [r4, #4]
 800fb98:	dd0b      	ble.n	800fbb2 <_printf_float+0x1ae>
 800fb9a:	6121      	str	r1, [r4, #16]
 800fb9c:	b913      	cbnz	r3, 800fba4 <_printf_float+0x1a0>
 800fb9e:	6822      	ldr	r2, [r4, #0]
 800fba0:	07d0      	lsls	r0, r2, #31
 800fba2:	d502      	bpl.n	800fbaa <_printf_float+0x1a6>
 800fba4:	3301      	adds	r3, #1
 800fba6:	440b      	add	r3, r1
 800fba8:	6123      	str	r3, [r4, #16]
 800fbaa:	65a1      	str	r1, [r4, #88]	; 0x58
 800fbac:	f04f 0900 	mov.w	r9, #0
 800fbb0:	e7de      	b.n	800fb70 <_printf_float+0x16c>
 800fbb2:	b913      	cbnz	r3, 800fbba <_printf_float+0x1b6>
 800fbb4:	6822      	ldr	r2, [r4, #0]
 800fbb6:	07d2      	lsls	r2, r2, #31
 800fbb8:	d501      	bpl.n	800fbbe <_printf_float+0x1ba>
 800fbba:	3302      	adds	r3, #2
 800fbbc:	e7f4      	b.n	800fba8 <_printf_float+0x1a4>
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	e7f2      	b.n	800fba8 <_printf_float+0x1a4>
 800fbc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fbc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbc8:	4299      	cmp	r1, r3
 800fbca:	db05      	blt.n	800fbd8 <_printf_float+0x1d4>
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	6121      	str	r1, [r4, #16]
 800fbd0:	07d8      	lsls	r0, r3, #31
 800fbd2:	d5ea      	bpl.n	800fbaa <_printf_float+0x1a6>
 800fbd4:	1c4b      	adds	r3, r1, #1
 800fbd6:	e7e7      	b.n	800fba8 <_printf_float+0x1a4>
 800fbd8:	2900      	cmp	r1, #0
 800fbda:	bfd4      	ite	le
 800fbdc:	f1c1 0202 	rsble	r2, r1, #2
 800fbe0:	2201      	movgt	r2, #1
 800fbe2:	4413      	add	r3, r2
 800fbe4:	e7e0      	b.n	800fba8 <_printf_float+0x1a4>
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	055a      	lsls	r2, r3, #21
 800fbea:	d407      	bmi.n	800fbfc <_printf_float+0x1f8>
 800fbec:	6923      	ldr	r3, [r4, #16]
 800fbee:	4642      	mov	r2, r8
 800fbf0:	4631      	mov	r1, r6
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	47b8      	blx	r7
 800fbf6:	3001      	adds	r0, #1
 800fbf8:	d12c      	bne.n	800fc54 <_printf_float+0x250>
 800fbfa:	e764      	b.n	800fac6 <_printf_float+0xc2>
 800fbfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fc00:	f240 80e0 	bls.w	800fdc4 <_printf_float+0x3c0>
 800fc04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc08:	2200      	movs	r2, #0
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	f7f0 ff84 	bl	8000b18 <__aeabi_dcmpeq>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d034      	beq.n	800fc7e <_printf_float+0x27a>
 800fc14:	4a37      	ldr	r2, [pc, #220]	; (800fcf4 <_printf_float+0x2f0>)
 800fc16:	2301      	movs	r3, #1
 800fc18:	4631      	mov	r1, r6
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	47b8      	blx	r7
 800fc1e:	3001      	adds	r0, #1
 800fc20:	f43f af51 	beq.w	800fac6 <_printf_float+0xc2>
 800fc24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	db02      	blt.n	800fc32 <_printf_float+0x22e>
 800fc2c:	6823      	ldr	r3, [r4, #0]
 800fc2e:	07d8      	lsls	r0, r3, #31
 800fc30:	d510      	bpl.n	800fc54 <_printf_float+0x250>
 800fc32:	ee18 3a10 	vmov	r3, s16
 800fc36:	4652      	mov	r2, sl
 800fc38:	4631      	mov	r1, r6
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	47b8      	blx	r7
 800fc3e:	3001      	adds	r0, #1
 800fc40:	f43f af41 	beq.w	800fac6 <_printf_float+0xc2>
 800fc44:	f04f 0800 	mov.w	r8, #0
 800fc48:	f104 091a 	add.w	r9, r4, #26
 800fc4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	4543      	cmp	r3, r8
 800fc52:	dc09      	bgt.n	800fc68 <_printf_float+0x264>
 800fc54:	6823      	ldr	r3, [r4, #0]
 800fc56:	079b      	lsls	r3, r3, #30
 800fc58:	f100 8105 	bmi.w	800fe66 <_printf_float+0x462>
 800fc5c:	68e0      	ldr	r0, [r4, #12]
 800fc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc60:	4298      	cmp	r0, r3
 800fc62:	bfb8      	it	lt
 800fc64:	4618      	movlt	r0, r3
 800fc66:	e730      	b.n	800faca <_printf_float+0xc6>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	464a      	mov	r2, r9
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	4628      	mov	r0, r5
 800fc70:	47b8      	blx	r7
 800fc72:	3001      	adds	r0, #1
 800fc74:	f43f af27 	beq.w	800fac6 <_printf_float+0xc2>
 800fc78:	f108 0801 	add.w	r8, r8, #1
 800fc7c:	e7e6      	b.n	800fc4c <_printf_float+0x248>
 800fc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	dc39      	bgt.n	800fcf8 <_printf_float+0x2f4>
 800fc84:	4a1b      	ldr	r2, [pc, #108]	; (800fcf4 <_printf_float+0x2f0>)
 800fc86:	2301      	movs	r3, #1
 800fc88:	4631      	mov	r1, r6
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	47b8      	blx	r7
 800fc8e:	3001      	adds	r0, #1
 800fc90:	f43f af19 	beq.w	800fac6 <_printf_float+0xc2>
 800fc94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	d102      	bne.n	800fca2 <_printf_float+0x29e>
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	07d9      	lsls	r1, r3, #31
 800fca0:	d5d8      	bpl.n	800fc54 <_printf_float+0x250>
 800fca2:	ee18 3a10 	vmov	r3, s16
 800fca6:	4652      	mov	r2, sl
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4628      	mov	r0, r5
 800fcac:	47b8      	blx	r7
 800fcae:	3001      	adds	r0, #1
 800fcb0:	f43f af09 	beq.w	800fac6 <_printf_float+0xc2>
 800fcb4:	f04f 0900 	mov.w	r9, #0
 800fcb8:	f104 0a1a 	add.w	sl, r4, #26
 800fcbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcbe:	425b      	negs	r3, r3
 800fcc0:	454b      	cmp	r3, r9
 800fcc2:	dc01      	bgt.n	800fcc8 <_printf_float+0x2c4>
 800fcc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcc6:	e792      	b.n	800fbee <_printf_float+0x1ea>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	4652      	mov	r2, sl
 800fccc:	4631      	mov	r1, r6
 800fcce:	4628      	mov	r0, r5
 800fcd0:	47b8      	blx	r7
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	f43f aef7 	beq.w	800fac6 <_printf_float+0xc2>
 800fcd8:	f109 0901 	add.w	r9, r9, #1
 800fcdc:	e7ee      	b.n	800fcbc <_printf_float+0x2b8>
 800fcde:	bf00      	nop
 800fce0:	7fefffff 	.word	0x7fefffff
 800fce4:	0802aaf5 	.word	0x0802aaf5
 800fce8:	0802aaf9 	.word	0x0802aaf9
 800fcec:	0802ab01 	.word	0x0802ab01
 800fcf0:	0802aafd 	.word	0x0802aafd
 800fcf4:	0802ab05 	.word	0x0802ab05
 800fcf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	bfa8      	it	ge
 800fd00:	461a      	movge	r2, r3
 800fd02:	2a00      	cmp	r2, #0
 800fd04:	4691      	mov	r9, r2
 800fd06:	dc37      	bgt.n	800fd78 <_printf_float+0x374>
 800fd08:	f04f 0b00 	mov.w	fp, #0
 800fd0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd10:	f104 021a 	add.w	r2, r4, #26
 800fd14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd16:	9305      	str	r3, [sp, #20]
 800fd18:	eba3 0309 	sub.w	r3, r3, r9
 800fd1c:	455b      	cmp	r3, fp
 800fd1e:	dc33      	bgt.n	800fd88 <_printf_float+0x384>
 800fd20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd24:	429a      	cmp	r2, r3
 800fd26:	db3b      	blt.n	800fda0 <_printf_float+0x39c>
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	07da      	lsls	r2, r3, #31
 800fd2c:	d438      	bmi.n	800fda0 <_printf_float+0x39c>
 800fd2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd30:	9a05      	ldr	r2, [sp, #20]
 800fd32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd34:	1a9a      	subs	r2, r3, r2
 800fd36:	eba3 0901 	sub.w	r9, r3, r1
 800fd3a:	4591      	cmp	r9, r2
 800fd3c:	bfa8      	it	ge
 800fd3e:	4691      	movge	r9, r2
 800fd40:	f1b9 0f00 	cmp.w	r9, #0
 800fd44:	dc35      	bgt.n	800fdb2 <_printf_float+0x3ae>
 800fd46:	f04f 0800 	mov.w	r8, #0
 800fd4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd4e:	f104 0a1a 	add.w	sl, r4, #26
 800fd52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd56:	1a9b      	subs	r3, r3, r2
 800fd58:	eba3 0309 	sub.w	r3, r3, r9
 800fd5c:	4543      	cmp	r3, r8
 800fd5e:	f77f af79 	ble.w	800fc54 <_printf_float+0x250>
 800fd62:	2301      	movs	r3, #1
 800fd64:	4652      	mov	r2, sl
 800fd66:	4631      	mov	r1, r6
 800fd68:	4628      	mov	r0, r5
 800fd6a:	47b8      	blx	r7
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	f43f aeaa 	beq.w	800fac6 <_printf_float+0xc2>
 800fd72:	f108 0801 	add.w	r8, r8, #1
 800fd76:	e7ec      	b.n	800fd52 <_printf_float+0x34e>
 800fd78:	4613      	mov	r3, r2
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	4642      	mov	r2, r8
 800fd7e:	4628      	mov	r0, r5
 800fd80:	47b8      	blx	r7
 800fd82:	3001      	adds	r0, #1
 800fd84:	d1c0      	bne.n	800fd08 <_printf_float+0x304>
 800fd86:	e69e      	b.n	800fac6 <_printf_float+0xc2>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	9205      	str	r2, [sp, #20]
 800fd90:	47b8      	blx	r7
 800fd92:	3001      	adds	r0, #1
 800fd94:	f43f ae97 	beq.w	800fac6 <_printf_float+0xc2>
 800fd98:	9a05      	ldr	r2, [sp, #20]
 800fd9a:	f10b 0b01 	add.w	fp, fp, #1
 800fd9e:	e7b9      	b.n	800fd14 <_printf_float+0x310>
 800fda0:	ee18 3a10 	vmov	r3, s16
 800fda4:	4652      	mov	r2, sl
 800fda6:	4631      	mov	r1, r6
 800fda8:	4628      	mov	r0, r5
 800fdaa:	47b8      	blx	r7
 800fdac:	3001      	adds	r0, #1
 800fdae:	d1be      	bne.n	800fd2e <_printf_float+0x32a>
 800fdb0:	e689      	b.n	800fac6 <_printf_float+0xc2>
 800fdb2:	9a05      	ldr	r2, [sp, #20]
 800fdb4:	464b      	mov	r3, r9
 800fdb6:	4442      	add	r2, r8
 800fdb8:	4631      	mov	r1, r6
 800fdba:	4628      	mov	r0, r5
 800fdbc:	47b8      	blx	r7
 800fdbe:	3001      	adds	r0, #1
 800fdc0:	d1c1      	bne.n	800fd46 <_printf_float+0x342>
 800fdc2:	e680      	b.n	800fac6 <_printf_float+0xc2>
 800fdc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdc6:	2a01      	cmp	r2, #1
 800fdc8:	dc01      	bgt.n	800fdce <_printf_float+0x3ca>
 800fdca:	07db      	lsls	r3, r3, #31
 800fdcc:	d538      	bpl.n	800fe40 <_printf_float+0x43c>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	4631      	mov	r1, r6
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	47b8      	blx	r7
 800fdd8:	3001      	adds	r0, #1
 800fdda:	f43f ae74 	beq.w	800fac6 <_printf_float+0xc2>
 800fdde:	ee18 3a10 	vmov	r3, s16
 800fde2:	4652      	mov	r2, sl
 800fde4:	4631      	mov	r1, r6
 800fde6:	4628      	mov	r0, r5
 800fde8:	47b8      	blx	r7
 800fdea:	3001      	adds	r0, #1
 800fdec:	f43f ae6b 	beq.w	800fac6 <_printf_float+0xc2>
 800fdf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	f7f0 fe8e 	bl	8000b18 <__aeabi_dcmpeq>
 800fdfc:	b9d8      	cbnz	r0, 800fe36 <_printf_float+0x432>
 800fdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe00:	f108 0201 	add.w	r2, r8, #1
 800fe04:	3b01      	subs	r3, #1
 800fe06:	4631      	mov	r1, r6
 800fe08:	4628      	mov	r0, r5
 800fe0a:	47b8      	blx	r7
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	d10e      	bne.n	800fe2e <_printf_float+0x42a>
 800fe10:	e659      	b.n	800fac6 <_printf_float+0xc2>
 800fe12:	2301      	movs	r3, #1
 800fe14:	4652      	mov	r2, sl
 800fe16:	4631      	mov	r1, r6
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b8      	blx	r7
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	f43f ae52 	beq.w	800fac6 <_printf_float+0xc2>
 800fe22:	f108 0801 	add.w	r8, r8, #1
 800fe26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	4543      	cmp	r3, r8
 800fe2c:	dcf1      	bgt.n	800fe12 <_printf_float+0x40e>
 800fe2e:	464b      	mov	r3, r9
 800fe30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fe34:	e6dc      	b.n	800fbf0 <_printf_float+0x1ec>
 800fe36:	f04f 0800 	mov.w	r8, #0
 800fe3a:	f104 0a1a 	add.w	sl, r4, #26
 800fe3e:	e7f2      	b.n	800fe26 <_printf_float+0x422>
 800fe40:	2301      	movs	r3, #1
 800fe42:	4642      	mov	r2, r8
 800fe44:	e7df      	b.n	800fe06 <_printf_float+0x402>
 800fe46:	2301      	movs	r3, #1
 800fe48:	464a      	mov	r2, r9
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	47b8      	blx	r7
 800fe50:	3001      	adds	r0, #1
 800fe52:	f43f ae38 	beq.w	800fac6 <_printf_float+0xc2>
 800fe56:	f108 0801 	add.w	r8, r8, #1
 800fe5a:	68e3      	ldr	r3, [r4, #12]
 800fe5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe5e:	1a5b      	subs	r3, r3, r1
 800fe60:	4543      	cmp	r3, r8
 800fe62:	dcf0      	bgt.n	800fe46 <_printf_float+0x442>
 800fe64:	e6fa      	b.n	800fc5c <_printf_float+0x258>
 800fe66:	f04f 0800 	mov.w	r8, #0
 800fe6a:	f104 0919 	add.w	r9, r4, #25
 800fe6e:	e7f4      	b.n	800fe5a <_printf_float+0x456>

0800fe70 <_printf_common>:
 800fe70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe74:	4616      	mov	r6, r2
 800fe76:	4699      	mov	r9, r3
 800fe78:	688a      	ldr	r2, [r1, #8]
 800fe7a:	690b      	ldr	r3, [r1, #16]
 800fe7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe80:	4293      	cmp	r3, r2
 800fe82:	bfb8      	it	lt
 800fe84:	4613      	movlt	r3, r2
 800fe86:	6033      	str	r3, [r6, #0]
 800fe88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe8c:	4607      	mov	r7, r0
 800fe8e:	460c      	mov	r4, r1
 800fe90:	b10a      	cbz	r2, 800fe96 <_printf_common+0x26>
 800fe92:	3301      	adds	r3, #1
 800fe94:	6033      	str	r3, [r6, #0]
 800fe96:	6823      	ldr	r3, [r4, #0]
 800fe98:	0699      	lsls	r1, r3, #26
 800fe9a:	bf42      	ittt	mi
 800fe9c:	6833      	ldrmi	r3, [r6, #0]
 800fe9e:	3302      	addmi	r3, #2
 800fea0:	6033      	strmi	r3, [r6, #0]
 800fea2:	6825      	ldr	r5, [r4, #0]
 800fea4:	f015 0506 	ands.w	r5, r5, #6
 800fea8:	d106      	bne.n	800feb8 <_printf_common+0x48>
 800feaa:	f104 0a19 	add.w	sl, r4, #25
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	6832      	ldr	r2, [r6, #0]
 800feb2:	1a9b      	subs	r3, r3, r2
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	dc26      	bgt.n	800ff06 <_printf_common+0x96>
 800feb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800febc:	1e13      	subs	r3, r2, #0
 800febe:	6822      	ldr	r2, [r4, #0]
 800fec0:	bf18      	it	ne
 800fec2:	2301      	movne	r3, #1
 800fec4:	0692      	lsls	r2, r2, #26
 800fec6:	d42b      	bmi.n	800ff20 <_printf_common+0xb0>
 800fec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fecc:	4649      	mov	r1, r9
 800fece:	4638      	mov	r0, r7
 800fed0:	47c0      	blx	r8
 800fed2:	3001      	adds	r0, #1
 800fed4:	d01e      	beq.n	800ff14 <_printf_common+0xa4>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	68e5      	ldr	r5, [r4, #12]
 800feda:	6832      	ldr	r2, [r6, #0]
 800fedc:	f003 0306 	and.w	r3, r3, #6
 800fee0:	2b04      	cmp	r3, #4
 800fee2:	bf08      	it	eq
 800fee4:	1aad      	subeq	r5, r5, r2
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	6922      	ldr	r2, [r4, #16]
 800feea:	bf0c      	ite	eq
 800feec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fef0:	2500      	movne	r5, #0
 800fef2:	4293      	cmp	r3, r2
 800fef4:	bfc4      	itt	gt
 800fef6:	1a9b      	subgt	r3, r3, r2
 800fef8:	18ed      	addgt	r5, r5, r3
 800fefa:	2600      	movs	r6, #0
 800fefc:	341a      	adds	r4, #26
 800fefe:	42b5      	cmp	r5, r6
 800ff00:	d11a      	bne.n	800ff38 <_printf_common+0xc8>
 800ff02:	2000      	movs	r0, #0
 800ff04:	e008      	b.n	800ff18 <_printf_common+0xa8>
 800ff06:	2301      	movs	r3, #1
 800ff08:	4652      	mov	r2, sl
 800ff0a:	4649      	mov	r1, r9
 800ff0c:	4638      	mov	r0, r7
 800ff0e:	47c0      	blx	r8
 800ff10:	3001      	adds	r0, #1
 800ff12:	d103      	bne.n	800ff1c <_printf_common+0xac>
 800ff14:	f04f 30ff 	mov.w	r0, #4294967295
 800ff18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff1c:	3501      	adds	r5, #1
 800ff1e:	e7c6      	b.n	800feae <_printf_common+0x3e>
 800ff20:	18e1      	adds	r1, r4, r3
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	2030      	movs	r0, #48	; 0x30
 800ff26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff2a:	4422      	add	r2, r4
 800ff2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff34:	3302      	adds	r3, #2
 800ff36:	e7c7      	b.n	800fec8 <_printf_common+0x58>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	4622      	mov	r2, r4
 800ff3c:	4649      	mov	r1, r9
 800ff3e:	4638      	mov	r0, r7
 800ff40:	47c0      	blx	r8
 800ff42:	3001      	adds	r0, #1
 800ff44:	d0e6      	beq.n	800ff14 <_printf_common+0xa4>
 800ff46:	3601      	adds	r6, #1
 800ff48:	e7d9      	b.n	800fefe <_printf_common+0x8e>
	...

0800ff4c <_printf_i>:
 800ff4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff50:	7e0f      	ldrb	r7, [r1, #24]
 800ff52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff54:	2f78      	cmp	r7, #120	; 0x78
 800ff56:	4691      	mov	r9, r2
 800ff58:	4680      	mov	r8, r0
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	469a      	mov	sl, r3
 800ff5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff62:	d807      	bhi.n	800ff74 <_printf_i+0x28>
 800ff64:	2f62      	cmp	r7, #98	; 0x62
 800ff66:	d80a      	bhi.n	800ff7e <_printf_i+0x32>
 800ff68:	2f00      	cmp	r7, #0
 800ff6a:	f000 80d8 	beq.w	801011e <_printf_i+0x1d2>
 800ff6e:	2f58      	cmp	r7, #88	; 0x58
 800ff70:	f000 80a3 	beq.w	80100ba <_printf_i+0x16e>
 800ff74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff7c:	e03a      	b.n	800fff4 <_printf_i+0xa8>
 800ff7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff82:	2b15      	cmp	r3, #21
 800ff84:	d8f6      	bhi.n	800ff74 <_printf_i+0x28>
 800ff86:	a101      	add	r1, pc, #4	; (adr r1, 800ff8c <_printf_i+0x40>)
 800ff88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff8c:	0800ffe5 	.word	0x0800ffe5
 800ff90:	0800fff9 	.word	0x0800fff9
 800ff94:	0800ff75 	.word	0x0800ff75
 800ff98:	0800ff75 	.word	0x0800ff75
 800ff9c:	0800ff75 	.word	0x0800ff75
 800ffa0:	0800ff75 	.word	0x0800ff75
 800ffa4:	0800fff9 	.word	0x0800fff9
 800ffa8:	0800ff75 	.word	0x0800ff75
 800ffac:	0800ff75 	.word	0x0800ff75
 800ffb0:	0800ff75 	.word	0x0800ff75
 800ffb4:	0800ff75 	.word	0x0800ff75
 800ffb8:	08010105 	.word	0x08010105
 800ffbc:	08010029 	.word	0x08010029
 800ffc0:	080100e7 	.word	0x080100e7
 800ffc4:	0800ff75 	.word	0x0800ff75
 800ffc8:	0800ff75 	.word	0x0800ff75
 800ffcc:	08010127 	.word	0x08010127
 800ffd0:	0800ff75 	.word	0x0800ff75
 800ffd4:	08010029 	.word	0x08010029
 800ffd8:	0800ff75 	.word	0x0800ff75
 800ffdc:	0800ff75 	.word	0x0800ff75
 800ffe0:	080100ef 	.word	0x080100ef
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	1d1a      	adds	r2, r3, #4
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	602a      	str	r2, [r5, #0]
 800ffec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fff4:	2301      	movs	r3, #1
 800fff6:	e0a3      	b.n	8010140 <_printf_i+0x1f4>
 800fff8:	6820      	ldr	r0, [r4, #0]
 800fffa:	6829      	ldr	r1, [r5, #0]
 800fffc:	0606      	lsls	r6, r0, #24
 800fffe:	f101 0304 	add.w	r3, r1, #4
 8010002:	d50a      	bpl.n	801001a <_printf_i+0xce>
 8010004:	680e      	ldr	r6, [r1, #0]
 8010006:	602b      	str	r3, [r5, #0]
 8010008:	2e00      	cmp	r6, #0
 801000a:	da03      	bge.n	8010014 <_printf_i+0xc8>
 801000c:	232d      	movs	r3, #45	; 0x2d
 801000e:	4276      	negs	r6, r6
 8010010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010014:	485e      	ldr	r0, [pc, #376]	; (8010190 <_printf_i+0x244>)
 8010016:	230a      	movs	r3, #10
 8010018:	e019      	b.n	801004e <_printf_i+0x102>
 801001a:	680e      	ldr	r6, [r1, #0]
 801001c:	602b      	str	r3, [r5, #0]
 801001e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010022:	bf18      	it	ne
 8010024:	b236      	sxthne	r6, r6
 8010026:	e7ef      	b.n	8010008 <_printf_i+0xbc>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	6820      	ldr	r0, [r4, #0]
 801002c:	1d19      	adds	r1, r3, #4
 801002e:	6029      	str	r1, [r5, #0]
 8010030:	0601      	lsls	r1, r0, #24
 8010032:	d501      	bpl.n	8010038 <_printf_i+0xec>
 8010034:	681e      	ldr	r6, [r3, #0]
 8010036:	e002      	b.n	801003e <_printf_i+0xf2>
 8010038:	0646      	lsls	r6, r0, #25
 801003a:	d5fb      	bpl.n	8010034 <_printf_i+0xe8>
 801003c:	881e      	ldrh	r6, [r3, #0]
 801003e:	4854      	ldr	r0, [pc, #336]	; (8010190 <_printf_i+0x244>)
 8010040:	2f6f      	cmp	r7, #111	; 0x6f
 8010042:	bf0c      	ite	eq
 8010044:	2308      	moveq	r3, #8
 8010046:	230a      	movne	r3, #10
 8010048:	2100      	movs	r1, #0
 801004a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801004e:	6865      	ldr	r5, [r4, #4]
 8010050:	60a5      	str	r5, [r4, #8]
 8010052:	2d00      	cmp	r5, #0
 8010054:	bfa2      	ittt	ge
 8010056:	6821      	ldrge	r1, [r4, #0]
 8010058:	f021 0104 	bicge.w	r1, r1, #4
 801005c:	6021      	strge	r1, [r4, #0]
 801005e:	b90e      	cbnz	r6, 8010064 <_printf_i+0x118>
 8010060:	2d00      	cmp	r5, #0
 8010062:	d04d      	beq.n	8010100 <_printf_i+0x1b4>
 8010064:	4615      	mov	r5, r2
 8010066:	fbb6 f1f3 	udiv	r1, r6, r3
 801006a:	fb03 6711 	mls	r7, r3, r1, r6
 801006e:	5dc7      	ldrb	r7, [r0, r7]
 8010070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010074:	4637      	mov	r7, r6
 8010076:	42bb      	cmp	r3, r7
 8010078:	460e      	mov	r6, r1
 801007a:	d9f4      	bls.n	8010066 <_printf_i+0x11a>
 801007c:	2b08      	cmp	r3, #8
 801007e:	d10b      	bne.n	8010098 <_printf_i+0x14c>
 8010080:	6823      	ldr	r3, [r4, #0]
 8010082:	07de      	lsls	r6, r3, #31
 8010084:	d508      	bpl.n	8010098 <_printf_i+0x14c>
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	6861      	ldr	r1, [r4, #4]
 801008a:	4299      	cmp	r1, r3
 801008c:	bfde      	ittt	le
 801008e:	2330      	movle	r3, #48	; 0x30
 8010090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010094:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010098:	1b52      	subs	r2, r2, r5
 801009a:	6122      	str	r2, [r4, #16]
 801009c:	f8cd a000 	str.w	sl, [sp]
 80100a0:	464b      	mov	r3, r9
 80100a2:	aa03      	add	r2, sp, #12
 80100a4:	4621      	mov	r1, r4
 80100a6:	4640      	mov	r0, r8
 80100a8:	f7ff fee2 	bl	800fe70 <_printf_common>
 80100ac:	3001      	adds	r0, #1
 80100ae:	d14c      	bne.n	801014a <_printf_i+0x1fe>
 80100b0:	f04f 30ff 	mov.w	r0, #4294967295
 80100b4:	b004      	add	sp, #16
 80100b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ba:	4835      	ldr	r0, [pc, #212]	; (8010190 <_printf_i+0x244>)
 80100bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80100c0:	6829      	ldr	r1, [r5, #0]
 80100c2:	6823      	ldr	r3, [r4, #0]
 80100c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80100c8:	6029      	str	r1, [r5, #0]
 80100ca:	061d      	lsls	r5, r3, #24
 80100cc:	d514      	bpl.n	80100f8 <_printf_i+0x1ac>
 80100ce:	07df      	lsls	r7, r3, #31
 80100d0:	bf44      	itt	mi
 80100d2:	f043 0320 	orrmi.w	r3, r3, #32
 80100d6:	6023      	strmi	r3, [r4, #0]
 80100d8:	b91e      	cbnz	r6, 80100e2 <_printf_i+0x196>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	f023 0320 	bic.w	r3, r3, #32
 80100e0:	6023      	str	r3, [r4, #0]
 80100e2:	2310      	movs	r3, #16
 80100e4:	e7b0      	b.n	8010048 <_printf_i+0xfc>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	f043 0320 	orr.w	r3, r3, #32
 80100ec:	6023      	str	r3, [r4, #0]
 80100ee:	2378      	movs	r3, #120	; 0x78
 80100f0:	4828      	ldr	r0, [pc, #160]	; (8010194 <_printf_i+0x248>)
 80100f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100f6:	e7e3      	b.n	80100c0 <_printf_i+0x174>
 80100f8:	0659      	lsls	r1, r3, #25
 80100fa:	bf48      	it	mi
 80100fc:	b2b6      	uxthmi	r6, r6
 80100fe:	e7e6      	b.n	80100ce <_printf_i+0x182>
 8010100:	4615      	mov	r5, r2
 8010102:	e7bb      	b.n	801007c <_printf_i+0x130>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	6826      	ldr	r6, [r4, #0]
 8010108:	6961      	ldr	r1, [r4, #20]
 801010a:	1d18      	adds	r0, r3, #4
 801010c:	6028      	str	r0, [r5, #0]
 801010e:	0635      	lsls	r5, r6, #24
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	d501      	bpl.n	8010118 <_printf_i+0x1cc>
 8010114:	6019      	str	r1, [r3, #0]
 8010116:	e002      	b.n	801011e <_printf_i+0x1d2>
 8010118:	0670      	lsls	r0, r6, #25
 801011a:	d5fb      	bpl.n	8010114 <_printf_i+0x1c8>
 801011c:	8019      	strh	r1, [r3, #0]
 801011e:	2300      	movs	r3, #0
 8010120:	6123      	str	r3, [r4, #16]
 8010122:	4615      	mov	r5, r2
 8010124:	e7ba      	b.n	801009c <_printf_i+0x150>
 8010126:	682b      	ldr	r3, [r5, #0]
 8010128:	1d1a      	adds	r2, r3, #4
 801012a:	602a      	str	r2, [r5, #0]
 801012c:	681d      	ldr	r5, [r3, #0]
 801012e:	6862      	ldr	r2, [r4, #4]
 8010130:	2100      	movs	r1, #0
 8010132:	4628      	mov	r0, r5
 8010134:	f7f0 f87c 	bl	8000230 <memchr>
 8010138:	b108      	cbz	r0, 801013e <_printf_i+0x1f2>
 801013a:	1b40      	subs	r0, r0, r5
 801013c:	6060      	str	r0, [r4, #4]
 801013e:	6863      	ldr	r3, [r4, #4]
 8010140:	6123      	str	r3, [r4, #16]
 8010142:	2300      	movs	r3, #0
 8010144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010148:	e7a8      	b.n	801009c <_printf_i+0x150>
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	462a      	mov	r2, r5
 801014e:	4649      	mov	r1, r9
 8010150:	4640      	mov	r0, r8
 8010152:	47d0      	blx	sl
 8010154:	3001      	adds	r0, #1
 8010156:	d0ab      	beq.n	80100b0 <_printf_i+0x164>
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	079b      	lsls	r3, r3, #30
 801015c:	d413      	bmi.n	8010186 <_printf_i+0x23a>
 801015e:	68e0      	ldr	r0, [r4, #12]
 8010160:	9b03      	ldr	r3, [sp, #12]
 8010162:	4298      	cmp	r0, r3
 8010164:	bfb8      	it	lt
 8010166:	4618      	movlt	r0, r3
 8010168:	e7a4      	b.n	80100b4 <_printf_i+0x168>
 801016a:	2301      	movs	r3, #1
 801016c:	4632      	mov	r2, r6
 801016e:	4649      	mov	r1, r9
 8010170:	4640      	mov	r0, r8
 8010172:	47d0      	blx	sl
 8010174:	3001      	adds	r0, #1
 8010176:	d09b      	beq.n	80100b0 <_printf_i+0x164>
 8010178:	3501      	adds	r5, #1
 801017a:	68e3      	ldr	r3, [r4, #12]
 801017c:	9903      	ldr	r1, [sp, #12]
 801017e:	1a5b      	subs	r3, r3, r1
 8010180:	42ab      	cmp	r3, r5
 8010182:	dcf2      	bgt.n	801016a <_printf_i+0x21e>
 8010184:	e7eb      	b.n	801015e <_printf_i+0x212>
 8010186:	2500      	movs	r5, #0
 8010188:	f104 0619 	add.w	r6, r4, #25
 801018c:	e7f5      	b.n	801017a <_printf_i+0x22e>
 801018e:	bf00      	nop
 8010190:	0802ab07 	.word	0x0802ab07
 8010194:	0802ab18 	.word	0x0802ab18

08010198 <_scanf_float>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	b087      	sub	sp, #28
 801019e:	4617      	mov	r7, r2
 80101a0:	9303      	str	r3, [sp, #12]
 80101a2:	688b      	ldr	r3, [r1, #8]
 80101a4:	1e5a      	subs	r2, r3, #1
 80101a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80101aa:	bf83      	ittte	hi
 80101ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80101b0:	195b      	addhi	r3, r3, r5
 80101b2:	9302      	strhi	r3, [sp, #8]
 80101b4:	2300      	movls	r3, #0
 80101b6:	bf86      	itte	hi
 80101b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80101bc:	608b      	strhi	r3, [r1, #8]
 80101be:	9302      	strls	r3, [sp, #8]
 80101c0:	680b      	ldr	r3, [r1, #0]
 80101c2:	468b      	mov	fp, r1
 80101c4:	2500      	movs	r5, #0
 80101c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80101ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80101ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80101d2:	4680      	mov	r8, r0
 80101d4:	460c      	mov	r4, r1
 80101d6:	465e      	mov	r6, fp
 80101d8:	46aa      	mov	sl, r5
 80101da:	46a9      	mov	r9, r5
 80101dc:	9501      	str	r5, [sp, #4]
 80101de:	68a2      	ldr	r2, [r4, #8]
 80101e0:	b152      	cbz	r2, 80101f8 <_scanf_float+0x60>
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b4e      	cmp	r3, #78	; 0x4e
 80101e8:	d864      	bhi.n	80102b4 <_scanf_float+0x11c>
 80101ea:	2b40      	cmp	r3, #64	; 0x40
 80101ec:	d83c      	bhi.n	8010268 <_scanf_float+0xd0>
 80101ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80101f2:	b2c8      	uxtb	r0, r1
 80101f4:	280e      	cmp	r0, #14
 80101f6:	d93a      	bls.n	801026e <_scanf_float+0xd6>
 80101f8:	f1b9 0f00 	cmp.w	r9, #0
 80101fc:	d003      	beq.n	8010206 <_scanf_float+0x6e>
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010204:	6023      	str	r3, [r4, #0]
 8010206:	f10a 3aff 	add.w	sl, sl, #4294967295
 801020a:	f1ba 0f01 	cmp.w	sl, #1
 801020e:	f200 8113 	bhi.w	8010438 <_scanf_float+0x2a0>
 8010212:	455e      	cmp	r6, fp
 8010214:	f200 8105 	bhi.w	8010422 <_scanf_float+0x28a>
 8010218:	2501      	movs	r5, #1
 801021a:	4628      	mov	r0, r5
 801021c:	b007      	add	sp, #28
 801021e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010222:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010226:	2a0d      	cmp	r2, #13
 8010228:	d8e6      	bhi.n	80101f8 <_scanf_float+0x60>
 801022a:	a101      	add	r1, pc, #4	; (adr r1, 8010230 <_scanf_float+0x98>)
 801022c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010230:	0801036f 	.word	0x0801036f
 8010234:	080101f9 	.word	0x080101f9
 8010238:	080101f9 	.word	0x080101f9
 801023c:	080101f9 	.word	0x080101f9
 8010240:	080103cf 	.word	0x080103cf
 8010244:	080103a7 	.word	0x080103a7
 8010248:	080101f9 	.word	0x080101f9
 801024c:	080101f9 	.word	0x080101f9
 8010250:	0801037d 	.word	0x0801037d
 8010254:	080101f9 	.word	0x080101f9
 8010258:	080101f9 	.word	0x080101f9
 801025c:	080101f9 	.word	0x080101f9
 8010260:	080101f9 	.word	0x080101f9
 8010264:	08010335 	.word	0x08010335
 8010268:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801026c:	e7db      	b.n	8010226 <_scanf_float+0x8e>
 801026e:	290e      	cmp	r1, #14
 8010270:	d8c2      	bhi.n	80101f8 <_scanf_float+0x60>
 8010272:	a001      	add	r0, pc, #4	; (adr r0, 8010278 <_scanf_float+0xe0>)
 8010274:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010278:	08010327 	.word	0x08010327
 801027c:	080101f9 	.word	0x080101f9
 8010280:	08010327 	.word	0x08010327
 8010284:	080103bb 	.word	0x080103bb
 8010288:	080101f9 	.word	0x080101f9
 801028c:	080102d5 	.word	0x080102d5
 8010290:	08010311 	.word	0x08010311
 8010294:	08010311 	.word	0x08010311
 8010298:	08010311 	.word	0x08010311
 801029c:	08010311 	.word	0x08010311
 80102a0:	08010311 	.word	0x08010311
 80102a4:	08010311 	.word	0x08010311
 80102a8:	08010311 	.word	0x08010311
 80102ac:	08010311 	.word	0x08010311
 80102b0:	08010311 	.word	0x08010311
 80102b4:	2b6e      	cmp	r3, #110	; 0x6e
 80102b6:	d809      	bhi.n	80102cc <_scanf_float+0x134>
 80102b8:	2b60      	cmp	r3, #96	; 0x60
 80102ba:	d8b2      	bhi.n	8010222 <_scanf_float+0x8a>
 80102bc:	2b54      	cmp	r3, #84	; 0x54
 80102be:	d077      	beq.n	80103b0 <_scanf_float+0x218>
 80102c0:	2b59      	cmp	r3, #89	; 0x59
 80102c2:	d199      	bne.n	80101f8 <_scanf_float+0x60>
 80102c4:	2d07      	cmp	r5, #7
 80102c6:	d197      	bne.n	80101f8 <_scanf_float+0x60>
 80102c8:	2508      	movs	r5, #8
 80102ca:	e029      	b.n	8010320 <_scanf_float+0x188>
 80102cc:	2b74      	cmp	r3, #116	; 0x74
 80102ce:	d06f      	beq.n	80103b0 <_scanf_float+0x218>
 80102d0:	2b79      	cmp	r3, #121	; 0x79
 80102d2:	e7f6      	b.n	80102c2 <_scanf_float+0x12a>
 80102d4:	6821      	ldr	r1, [r4, #0]
 80102d6:	05c8      	lsls	r0, r1, #23
 80102d8:	d51a      	bpl.n	8010310 <_scanf_float+0x178>
 80102da:	9b02      	ldr	r3, [sp, #8]
 80102dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80102e0:	6021      	str	r1, [r4, #0]
 80102e2:	f109 0901 	add.w	r9, r9, #1
 80102e6:	b11b      	cbz	r3, 80102f0 <_scanf_float+0x158>
 80102e8:	3b01      	subs	r3, #1
 80102ea:	3201      	adds	r2, #1
 80102ec:	9302      	str	r3, [sp, #8]
 80102ee:	60a2      	str	r2, [r4, #8]
 80102f0:	68a3      	ldr	r3, [r4, #8]
 80102f2:	3b01      	subs	r3, #1
 80102f4:	60a3      	str	r3, [r4, #8]
 80102f6:	6923      	ldr	r3, [r4, #16]
 80102f8:	3301      	adds	r3, #1
 80102fa:	6123      	str	r3, [r4, #16]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	3b01      	subs	r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	607b      	str	r3, [r7, #4]
 8010304:	f340 8084 	ble.w	8010410 <_scanf_float+0x278>
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	603b      	str	r3, [r7, #0]
 801030e:	e766      	b.n	80101de <_scanf_float+0x46>
 8010310:	eb1a 0f05 	cmn.w	sl, r5
 8010314:	f47f af70 	bne.w	80101f8 <_scanf_float+0x60>
 8010318:	6822      	ldr	r2, [r4, #0]
 801031a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801031e:	6022      	str	r2, [r4, #0]
 8010320:	f806 3b01 	strb.w	r3, [r6], #1
 8010324:	e7e4      	b.n	80102f0 <_scanf_float+0x158>
 8010326:	6822      	ldr	r2, [r4, #0]
 8010328:	0610      	lsls	r0, r2, #24
 801032a:	f57f af65 	bpl.w	80101f8 <_scanf_float+0x60>
 801032e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010332:	e7f4      	b.n	801031e <_scanf_float+0x186>
 8010334:	f1ba 0f00 	cmp.w	sl, #0
 8010338:	d10e      	bne.n	8010358 <_scanf_float+0x1c0>
 801033a:	f1b9 0f00 	cmp.w	r9, #0
 801033e:	d10e      	bne.n	801035e <_scanf_float+0x1c6>
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010346:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801034a:	d108      	bne.n	801035e <_scanf_float+0x1c6>
 801034c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010350:	6022      	str	r2, [r4, #0]
 8010352:	f04f 0a01 	mov.w	sl, #1
 8010356:	e7e3      	b.n	8010320 <_scanf_float+0x188>
 8010358:	f1ba 0f02 	cmp.w	sl, #2
 801035c:	d055      	beq.n	801040a <_scanf_float+0x272>
 801035e:	2d01      	cmp	r5, #1
 8010360:	d002      	beq.n	8010368 <_scanf_float+0x1d0>
 8010362:	2d04      	cmp	r5, #4
 8010364:	f47f af48 	bne.w	80101f8 <_scanf_float+0x60>
 8010368:	3501      	adds	r5, #1
 801036a:	b2ed      	uxtb	r5, r5
 801036c:	e7d8      	b.n	8010320 <_scanf_float+0x188>
 801036e:	f1ba 0f01 	cmp.w	sl, #1
 8010372:	f47f af41 	bne.w	80101f8 <_scanf_float+0x60>
 8010376:	f04f 0a02 	mov.w	sl, #2
 801037a:	e7d1      	b.n	8010320 <_scanf_float+0x188>
 801037c:	b97d      	cbnz	r5, 801039e <_scanf_float+0x206>
 801037e:	f1b9 0f00 	cmp.w	r9, #0
 8010382:	f47f af3c 	bne.w	80101fe <_scanf_float+0x66>
 8010386:	6822      	ldr	r2, [r4, #0]
 8010388:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801038c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010390:	f47f af39 	bne.w	8010206 <_scanf_float+0x6e>
 8010394:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010398:	6022      	str	r2, [r4, #0]
 801039a:	2501      	movs	r5, #1
 801039c:	e7c0      	b.n	8010320 <_scanf_float+0x188>
 801039e:	2d03      	cmp	r5, #3
 80103a0:	d0e2      	beq.n	8010368 <_scanf_float+0x1d0>
 80103a2:	2d05      	cmp	r5, #5
 80103a4:	e7de      	b.n	8010364 <_scanf_float+0x1cc>
 80103a6:	2d02      	cmp	r5, #2
 80103a8:	f47f af26 	bne.w	80101f8 <_scanf_float+0x60>
 80103ac:	2503      	movs	r5, #3
 80103ae:	e7b7      	b.n	8010320 <_scanf_float+0x188>
 80103b0:	2d06      	cmp	r5, #6
 80103b2:	f47f af21 	bne.w	80101f8 <_scanf_float+0x60>
 80103b6:	2507      	movs	r5, #7
 80103b8:	e7b2      	b.n	8010320 <_scanf_float+0x188>
 80103ba:	6822      	ldr	r2, [r4, #0]
 80103bc:	0591      	lsls	r1, r2, #22
 80103be:	f57f af1b 	bpl.w	80101f8 <_scanf_float+0x60>
 80103c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80103c6:	6022      	str	r2, [r4, #0]
 80103c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80103cc:	e7a8      	b.n	8010320 <_scanf_float+0x188>
 80103ce:	6822      	ldr	r2, [r4, #0]
 80103d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80103d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80103d8:	d006      	beq.n	80103e8 <_scanf_float+0x250>
 80103da:	0550      	lsls	r0, r2, #21
 80103dc:	f57f af0c 	bpl.w	80101f8 <_scanf_float+0x60>
 80103e0:	f1b9 0f00 	cmp.w	r9, #0
 80103e4:	f43f af0f 	beq.w	8010206 <_scanf_float+0x6e>
 80103e8:	0591      	lsls	r1, r2, #22
 80103ea:	bf58      	it	pl
 80103ec:	9901      	ldrpl	r1, [sp, #4]
 80103ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80103f2:	bf58      	it	pl
 80103f4:	eba9 0101 	subpl.w	r1, r9, r1
 80103f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80103fc:	bf58      	it	pl
 80103fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010402:	6022      	str	r2, [r4, #0]
 8010404:	f04f 0900 	mov.w	r9, #0
 8010408:	e78a      	b.n	8010320 <_scanf_float+0x188>
 801040a:	f04f 0a03 	mov.w	sl, #3
 801040e:	e787      	b.n	8010320 <_scanf_float+0x188>
 8010410:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010414:	4639      	mov	r1, r7
 8010416:	4640      	mov	r0, r8
 8010418:	4798      	blx	r3
 801041a:	2800      	cmp	r0, #0
 801041c:	f43f aedf 	beq.w	80101de <_scanf_float+0x46>
 8010420:	e6ea      	b.n	80101f8 <_scanf_float+0x60>
 8010422:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801042a:	463a      	mov	r2, r7
 801042c:	4640      	mov	r0, r8
 801042e:	4798      	blx	r3
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	3b01      	subs	r3, #1
 8010434:	6123      	str	r3, [r4, #16]
 8010436:	e6ec      	b.n	8010212 <_scanf_float+0x7a>
 8010438:	1e6b      	subs	r3, r5, #1
 801043a:	2b06      	cmp	r3, #6
 801043c:	d825      	bhi.n	801048a <_scanf_float+0x2f2>
 801043e:	2d02      	cmp	r5, #2
 8010440:	d836      	bhi.n	80104b0 <_scanf_float+0x318>
 8010442:	455e      	cmp	r6, fp
 8010444:	f67f aee8 	bls.w	8010218 <_scanf_float+0x80>
 8010448:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801044c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010450:	463a      	mov	r2, r7
 8010452:	4640      	mov	r0, r8
 8010454:	4798      	blx	r3
 8010456:	6923      	ldr	r3, [r4, #16]
 8010458:	3b01      	subs	r3, #1
 801045a:	6123      	str	r3, [r4, #16]
 801045c:	e7f1      	b.n	8010442 <_scanf_float+0x2aa>
 801045e:	9802      	ldr	r0, [sp, #8]
 8010460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010464:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010468:	9002      	str	r0, [sp, #8]
 801046a:	463a      	mov	r2, r7
 801046c:	4640      	mov	r0, r8
 801046e:	4798      	blx	r3
 8010470:	6923      	ldr	r3, [r4, #16]
 8010472:	3b01      	subs	r3, #1
 8010474:	6123      	str	r3, [r4, #16]
 8010476:	f10a 3aff 	add.w	sl, sl, #4294967295
 801047a:	fa5f fa8a 	uxtb.w	sl, sl
 801047e:	f1ba 0f02 	cmp.w	sl, #2
 8010482:	d1ec      	bne.n	801045e <_scanf_float+0x2c6>
 8010484:	3d03      	subs	r5, #3
 8010486:	b2ed      	uxtb	r5, r5
 8010488:	1b76      	subs	r6, r6, r5
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	05da      	lsls	r2, r3, #23
 801048e:	d52f      	bpl.n	80104f0 <_scanf_float+0x358>
 8010490:	055b      	lsls	r3, r3, #21
 8010492:	d510      	bpl.n	80104b6 <_scanf_float+0x31e>
 8010494:	455e      	cmp	r6, fp
 8010496:	f67f aebf 	bls.w	8010218 <_scanf_float+0x80>
 801049a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801049e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80104a2:	463a      	mov	r2, r7
 80104a4:	4640      	mov	r0, r8
 80104a6:	4798      	blx	r3
 80104a8:	6923      	ldr	r3, [r4, #16]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	6123      	str	r3, [r4, #16]
 80104ae:	e7f1      	b.n	8010494 <_scanf_float+0x2fc>
 80104b0:	46aa      	mov	sl, r5
 80104b2:	9602      	str	r6, [sp, #8]
 80104b4:	e7df      	b.n	8010476 <_scanf_float+0x2de>
 80104b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80104ba:	6923      	ldr	r3, [r4, #16]
 80104bc:	2965      	cmp	r1, #101	; 0x65
 80104be:	f103 33ff 	add.w	r3, r3, #4294967295
 80104c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80104c6:	6123      	str	r3, [r4, #16]
 80104c8:	d00c      	beq.n	80104e4 <_scanf_float+0x34c>
 80104ca:	2945      	cmp	r1, #69	; 0x45
 80104cc:	d00a      	beq.n	80104e4 <_scanf_float+0x34c>
 80104ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104d2:	463a      	mov	r2, r7
 80104d4:	4640      	mov	r0, r8
 80104d6:	4798      	blx	r3
 80104d8:	6923      	ldr	r3, [r4, #16]
 80104da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80104de:	3b01      	subs	r3, #1
 80104e0:	1eb5      	subs	r5, r6, #2
 80104e2:	6123      	str	r3, [r4, #16]
 80104e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104e8:	463a      	mov	r2, r7
 80104ea:	4640      	mov	r0, r8
 80104ec:	4798      	blx	r3
 80104ee:	462e      	mov	r6, r5
 80104f0:	6825      	ldr	r5, [r4, #0]
 80104f2:	f015 0510 	ands.w	r5, r5, #16
 80104f6:	d159      	bne.n	80105ac <_scanf_float+0x414>
 80104f8:	7035      	strb	r5, [r6, #0]
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010504:	d11b      	bne.n	801053e <_scanf_float+0x3a6>
 8010506:	9b01      	ldr	r3, [sp, #4]
 8010508:	454b      	cmp	r3, r9
 801050a:	eba3 0209 	sub.w	r2, r3, r9
 801050e:	d123      	bne.n	8010558 <_scanf_float+0x3c0>
 8010510:	2200      	movs	r2, #0
 8010512:	4659      	mov	r1, fp
 8010514:	4640      	mov	r0, r8
 8010516:	f000 ff0d 	bl	8011334 <_strtod_r>
 801051a:	6822      	ldr	r2, [r4, #0]
 801051c:	9b03      	ldr	r3, [sp, #12]
 801051e:	f012 0f02 	tst.w	r2, #2
 8010522:	ec57 6b10 	vmov	r6, r7, d0
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	d021      	beq.n	801056e <_scanf_float+0x3d6>
 801052a:	9903      	ldr	r1, [sp, #12]
 801052c:	1d1a      	adds	r2, r3, #4
 801052e:	600a      	str	r2, [r1, #0]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	e9c3 6700 	strd	r6, r7, [r3]
 8010536:	68e3      	ldr	r3, [r4, #12]
 8010538:	3301      	adds	r3, #1
 801053a:	60e3      	str	r3, [r4, #12]
 801053c:	e66d      	b.n	801021a <_scanf_float+0x82>
 801053e:	9b04      	ldr	r3, [sp, #16]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0e5      	beq.n	8010510 <_scanf_float+0x378>
 8010544:	9905      	ldr	r1, [sp, #20]
 8010546:	230a      	movs	r3, #10
 8010548:	462a      	mov	r2, r5
 801054a:	3101      	adds	r1, #1
 801054c:	4640      	mov	r0, r8
 801054e:	f000 ff79 	bl	8011444 <_strtol_r>
 8010552:	9b04      	ldr	r3, [sp, #16]
 8010554:	9e05      	ldr	r6, [sp, #20]
 8010556:	1ac2      	subs	r2, r0, r3
 8010558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801055c:	429e      	cmp	r6, r3
 801055e:	bf28      	it	cs
 8010560:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010564:	4912      	ldr	r1, [pc, #72]	; (80105b0 <_scanf_float+0x418>)
 8010566:	4630      	mov	r0, r6
 8010568:	f000 f8a2 	bl	80106b0 <siprintf>
 801056c:	e7d0      	b.n	8010510 <_scanf_float+0x378>
 801056e:	9903      	ldr	r1, [sp, #12]
 8010570:	f012 0f04 	tst.w	r2, #4
 8010574:	f103 0204 	add.w	r2, r3, #4
 8010578:	600a      	str	r2, [r1, #0]
 801057a:	d1d9      	bne.n	8010530 <_scanf_float+0x398>
 801057c:	f8d3 8000 	ldr.w	r8, [r3]
 8010580:	ee10 2a10 	vmov	r2, s0
 8010584:	ee10 0a10 	vmov	r0, s0
 8010588:	463b      	mov	r3, r7
 801058a:	4639      	mov	r1, r7
 801058c:	f7f0 faf6 	bl	8000b7c <__aeabi_dcmpun>
 8010590:	b128      	cbz	r0, 801059e <_scanf_float+0x406>
 8010592:	4808      	ldr	r0, [pc, #32]	; (80105b4 <_scanf_float+0x41c>)
 8010594:	f000 f886 	bl	80106a4 <nanf>
 8010598:	ed88 0a00 	vstr	s0, [r8]
 801059c:	e7cb      	b.n	8010536 <_scanf_float+0x39e>
 801059e:	4630      	mov	r0, r6
 80105a0:	4639      	mov	r1, r7
 80105a2:	f7f0 fb49 	bl	8000c38 <__aeabi_d2f>
 80105a6:	f8c8 0000 	str.w	r0, [r8]
 80105aa:	e7c4      	b.n	8010536 <_scanf_float+0x39e>
 80105ac:	2500      	movs	r5, #0
 80105ae:	e634      	b.n	801021a <_scanf_float+0x82>
 80105b0:	0802ab29 	.word	0x0802ab29
 80105b4:	0802aadf 	.word	0x0802aadf

080105b8 <_puts_r>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	460e      	mov	r6, r1
 80105bc:	4605      	mov	r5, r0
 80105be:	b118      	cbz	r0, 80105c8 <_puts_r+0x10>
 80105c0:	6983      	ldr	r3, [r0, #24]
 80105c2:	b90b      	cbnz	r3, 80105c8 <_puts_r+0x10>
 80105c4:	f001 ff9c 	bl	8012500 <__sinit>
 80105c8:	69ab      	ldr	r3, [r5, #24]
 80105ca:	68ac      	ldr	r4, [r5, #8]
 80105cc:	b913      	cbnz	r3, 80105d4 <_puts_r+0x1c>
 80105ce:	4628      	mov	r0, r5
 80105d0:	f001 ff96 	bl	8012500 <__sinit>
 80105d4:	4b2c      	ldr	r3, [pc, #176]	; (8010688 <_puts_r+0xd0>)
 80105d6:	429c      	cmp	r4, r3
 80105d8:	d120      	bne.n	801061c <_puts_r+0x64>
 80105da:	686c      	ldr	r4, [r5, #4]
 80105dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105de:	07db      	lsls	r3, r3, #31
 80105e0:	d405      	bmi.n	80105ee <_puts_r+0x36>
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	0598      	lsls	r0, r3, #22
 80105e6:	d402      	bmi.n	80105ee <_puts_r+0x36>
 80105e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105ea:	f002 fb9a 	bl	8012d22 <__retarget_lock_acquire_recursive>
 80105ee:	89a3      	ldrh	r3, [r4, #12]
 80105f0:	0719      	lsls	r1, r3, #28
 80105f2:	d51d      	bpl.n	8010630 <_puts_r+0x78>
 80105f4:	6923      	ldr	r3, [r4, #16]
 80105f6:	b1db      	cbz	r3, 8010630 <_puts_r+0x78>
 80105f8:	3e01      	subs	r6, #1
 80105fa:	68a3      	ldr	r3, [r4, #8]
 80105fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010600:	3b01      	subs	r3, #1
 8010602:	60a3      	str	r3, [r4, #8]
 8010604:	bb39      	cbnz	r1, 8010656 <_puts_r+0x9e>
 8010606:	2b00      	cmp	r3, #0
 8010608:	da38      	bge.n	801067c <_puts_r+0xc4>
 801060a:	4622      	mov	r2, r4
 801060c:	210a      	movs	r1, #10
 801060e:	4628      	mov	r0, r5
 8010610:	f000 ff1a 	bl	8011448 <__swbuf_r>
 8010614:	3001      	adds	r0, #1
 8010616:	d011      	beq.n	801063c <_puts_r+0x84>
 8010618:	250a      	movs	r5, #10
 801061a:	e011      	b.n	8010640 <_puts_r+0x88>
 801061c:	4b1b      	ldr	r3, [pc, #108]	; (801068c <_puts_r+0xd4>)
 801061e:	429c      	cmp	r4, r3
 8010620:	d101      	bne.n	8010626 <_puts_r+0x6e>
 8010622:	68ac      	ldr	r4, [r5, #8]
 8010624:	e7da      	b.n	80105dc <_puts_r+0x24>
 8010626:	4b1a      	ldr	r3, [pc, #104]	; (8010690 <_puts_r+0xd8>)
 8010628:	429c      	cmp	r4, r3
 801062a:	bf08      	it	eq
 801062c:	68ec      	ldreq	r4, [r5, #12]
 801062e:	e7d5      	b.n	80105dc <_puts_r+0x24>
 8010630:	4621      	mov	r1, r4
 8010632:	4628      	mov	r0, r5
 8010634:	f000 ff5a 	bl	80114ec <__swsetup_r>
 8010638:	2800      	cmp	r0, #0
 801063a:	d0dd      	beq.n	80105f8 <_puts_r+0x40>
 801063c:	f04f 35ff 	mov.w	r5, #4294967295
 8010640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010642:	07da      	lsls	r2, r3, #31
 8010644:	d405      	bmi.n	8010652 <_puts_r+0x9a>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	059b      	lsls	r3, r3, #22
 801064a:	d402      	bmi.n	8010652 <_puts_r+0x9a>
 801064c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801064e:	f002 fb69 	bl	8012d24 <__retarget_lock_release_recursive>
 8010652:	4628      	mov	r0, r5
 8010654:	bd70      	pop	{r4, r5, r6, pc}
 8010656:	2b00      	cmp	r3, #0
 8010658:	da04      	bge.n	8010664 <_puts_r+0xac>
 801065a:	69a2      	ldr	r2, [r4, #24]
 801065c:	429a      	cmp	r2, r3
 801065e:	dc06      	bgt.n	801066e <_puts_r+0xb6>
 8010660:	290a      	cmp	r1, #10
 8010662:	d004      	beq.n	801066e <_puts_r+0xb6>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	6022      	str	r2, [r4, #0]
 801066a:	7019      	strb	r1, [r3, #0]
 801066c:	e7c5      	b.n	80105fa <_puts_r+0x42>
 801066e:	4622      	mov	r2, r4
 8010670:	4628      	mov	r0, r5
 8010672:	f000 fee9 	bl	8011448 <__swbuf_r>
 8010676:	3001      	adds	r0, #1
 8010678:	d1bf      	bne.n	80105fa <_puts_r+0x42>
 801067a:	e7df      	b.n	801063c <_puts_r+0x84>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	250a      	movs	r5, #10
 8010680:	1c5a      	adds	r2, r3, #1
 8010682:	6022      	str	r2, [r4, #0]
 8010684:	701d      	strb	r5, [r3, #0]
 8010686:	e7db      	b.n	8010640 <_puts_r+0x88>
 8010688:	0802ad54 	.word	0x0802ad54
 801068c:	0802ad74 	.word	0x0802ad74
 8010690:	0802ad34 	.word	0x0802ad34

08010694 <puts>:
 8010694:	4b02      	ldr	r3, [pc, #8]	; (80106a0 <puts+0xc>)
 8010696:	4601      	mov	r1, r0
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	f7ff bf8d 	b.w	80105b8 <_puts_r>
 801069e:	bf00      	nop
 80106a0:	200000dc 	.word	0x200000dc

080106a4 <nanf>:
 80106a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106ac <nanf+0x8>
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	7fc00000 	.word	0x7fc00000

080106b0 <siprintf>:
 80106b0:	b40e      	push	{r1, r2, r3}
 80106b2:	b500      	push	{lr}
 80106b4:	b09c      	sub	sp, #112	; 0x70
 80106b6:	ab1d      	add	r3, sp, #116	; 0x74
 80106b8:	9002      	str	r0, [sp, #8]
 80106ba:	9006      	str	r0, [sp, #24]
 80106bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106c0:	4809      	ldr	r0, [pc, #36]	; (80106e8 <siprintf+0x38>)
 80106c2:	9107      	str	r1, [sp, #28]
 80106c4:	9104      	str	r1, [sp, #16]
 80106c6:	4909      	ldr	r1, [pc, #36]	; (80106ec <siprintf+0x3c>)
 80106c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80106cc:	9105      	str	r1, [sp, #20]
 80106ce:	6800      	ldr	r0, [r0, #0]
 80106d0:	9301      	str	r3, [sp, #4]
 80106d2:	a902      	add	r1, sp, #8
 80106d4:	f003 fa02 	bl	8013adc <_svfiprintf_r>
 80106d8:	9b02      	ldr	r3, [sp, #8]
 80106da:	2200      	movs	r2, #0
 80106dc:	701a      	strb	r2, [r3, #0]
 80106de:	b01c      	add	sp, #112	; 0x70
 80106e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80106e4:	b003      	add	sp, #12
 80106e6:	4770      	bx	lr
 80106e8:	200000dc 	.word	0x200000dc
 80106ec:	ffff0208 	.word	0xffff0208

080106f0 <sulp>:
 80106f0:	b570      	push	{r4, r5, r6, lr}
 80106f2:	4604      	mov	r4, r0
 80106f4:	460d      	mov	r5, r1
 80106f6:	ec45 4b10 	vmov	d0, r4, r5
 80106fa:	4616      	mov	r6, r2
 80106fc:	f002 ff1e 	bl	801353c <__ulp>
 8010700:	ec51 0b10 	vmov	r0, r1, d0
 8010704:	b17e      	cbz	r6, 8010726 <sulp+0x36>
 8010706:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801070a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801070e:	2b00      	cmp	r3, #0
 8010710:	dd09      	ble.n	8010726 <sulp+0x36>
 8010712:	051b      	lsls	r3, r3, #20
 8010714:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010718:	2400      	movs	r4, #0
 801071a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801071e:	4622      	mov	r2, r4
 8010720:	462b      	mov	r3, r5
 8010722:	f7ef ff91 	bl	8000648 <__aeabi_dmul>
 8010726:	bd70      	pop	{r4, r5, r6, pc}

08010728 <_strtod_l>:
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072c:	ed2d 8b02 	vpush	{d8}
 8010730:	b09d      	sub	sp, #116	; 0x74
 8010732:	461f      	mov	r7, r3
 8010734:	2300      	movs	r3, #0
 8010736:	9318      	str	r3, [sp, #96]	; 0x60
 8010738:	4ba2      	ldr	r3, [pc, #648]	; (80109c4 <_strtod_l+0x29c>)
 801073a:	9213      	str	r2, [sp, #76]	; 0x4c
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	9305      	str	r3, [sp, #20]
 8010740:	4604      	mov	r4, r0
 8010742:	4618      	mov	r0, r3
 8010744:	4688      	mov	r8, r1
 8010746:	f7ef fd6b 	bl	8000220 <strlen>
 801074a:	f04f 0a00 	mov.w	sl, #0
 801074e:	4605      	mov	r5, r0
 8010750:	f04f 0b00 	mov.w	fp, #0
 8010754:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801075a:	781a      	ldrb	r2, [r3, #0]
 801075c:	2a2b      	cmp	r2, #43	; 0x2b
 801075e:	d04e      	beq.n	80107fe <_strtod_l+0xd6>
 8010760:	d83b      	bhi.n	80107da <_strtod_l+0xb2>
 8010762:	2a0d      	cmp	r2, #13
 8010764:	d834      	bhi.n	80107d0 <_strtod_l+0xa8>
 8010766:	2a08      	cmp	r2, #8
 8010768:	d834      	bhi.n	80107d4 <_strtod_l+0xac>
 801076a:	2a00      	cmp	r2, #0
 801076c:	d03e      	beq.n	80107ec <_strtod_l+0xc4>
 801076e:	2300      	movs	r3, #0
 8010770:	930a      	str	r3, [sp, #40]	; 0x28
 8010772:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010774:	7833      	ldrb	r3, [r6, #0]
 8010776:	2b30      	cmp	r3, #48	; 0x30
 8010778:	f040 80b0 	bne.w	80108dc <_strtod_l+0x1b4>
 801077c:	7873      	ldrb	r3, [r6, #1]
 801077e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010782:	2b58      	cmp	r3, #88	; 0x58
 8010784:	d168      	bne.n	8010858 <_strtod_l+0x130>
 8010786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	ab18      	add	r3, sp, #96	; 0x60
 801078c:	9702      	str	r7, [sp, #8]
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	4a8d      	ldr	r2, [pc, #564]	; (80109c8 <_strtod_l+0x2a0>)
 8010792:	ab19      	add	r3, sp, #100	; 0x64
 8010794:	a917      	add	r1, sp, #92	; 0x5c
 8010796:	4620      	mov	r0, r4
 8010798:	f001 ffb6 	bl	8012708 <__gethex>
 801079c:	f010 0707 	ands.w	r7, r0, #7
 80107a0:	4605      	mov	r5, r0
 80107a2:	d005      	beq.n	80107b0 <_strtod_l+0x88>
 80107a4:	2f06      	cmp	r7, #6
 80107a6:	d12c      	bne.n	8010802 <_strtod_l+0xda>
 80107a8:	3601      	adds	r6, #1
 80107aa:	2300      	movs	r3, #0
 80107ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80107ae:	930a      	str	r3, [sp, #40]	; 0x28
 80107b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f040 8590 	bne.w	80112d8 <_strtod_l+0xbb0>
 80107b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ba:	b1eb      	cbz	r3, 80107f8 <_strtod_l+0xd0>
 80107bc:	4652      	mov	r2, sl
 80107be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80107c2:	ec43 2b10 	vmov	d0, r2, r3
 80107c6:	b01d      	add	sp, #116	; 0x74
 80107c8:	ecbd 8b02 	vpop	{d8}
 80107cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d0:	2a20      	cmp	r2, #32
 80107d2:	d1cc      	bne.n	801076e <_strtod_l+0x46>
 80107d4:	3301      	adds	r3, #1
 80107d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80107d8:	e7be      	b.n	8010758 <_strtod_l+0x30>
 80107da:	2a2d      	cmp	r2, #45	; 0x2d
 80107dc:	d1c7      	bne.n	801076e <_strtod_l+0x46>
 80107de:	2201      	movs	r2, #1
 80107e0:	920a      	str	r2, [sp, #40]	; 0x28
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80107e6:	785b      	ldrb	r3, [r3, #1]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1c2      	bne.n	8010772 <_strtod_l+0x4a>
 80107ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f040 856e 	bne.w	80112d4 <_strtod_l+0xbac>
 80107f8:	4652      	mov	r2, sl
 80107fa:	465b      	mov	r3, fp
 80107fc:	e7e1      	b.n	80107c2 <_strtod_l+0x9a>
 80107fe:	2200      	movs	r2, #0
 8010800:	e7ee      	b.n	80107e0 <_strtod_l+0xb8>
 8010802:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010804:	b13a      	cbz	r2, 8010816 <_strtod_l+0xee>
 8010806:	2135      	movs	r1, #53	; 0x35
 8010808:	a81a      	add	r0, sp, #104	; 0x68
 801080a:	f002 ffa2 	bl	8013752 <__copybits>
 801080e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010810:	4620      	mov	r0, r4
 8010812:	f002 fb61 	bl	8012ed8 <_Bfree>
 8010816:	3f01      	subs	r7, #1
 8010818:	2f04      	cmp	r7, #4
 801081a:	d806      	bhi.n	801082a <_strtod_l+0x102>
 801081c:	e8df f007 	tbb	[pc, r7]
 8010820:	1714030a 	.word	0x1714030a
 8010824:	0a          	.byte	0x0a
 8010825:	00          	.byte	0x00
 8010826:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801082a:	0728      	lsls	r0, r5, #28
 801082c:	d5c0      	bpl.n	80107b0 <_strtod_l+0x88>
 801082e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010832:	e7bd      	b.n	80107b0 <_strtod_l+0x88>
 8010834:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801083a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801083e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010842:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010846:	e7f0      	b.n	801082a <_strtod_l+0x102>
 8010848:	f8df b180 	ldr.w	fp, [pc, #384]	; 80109cc <_strtod_l+0x2a4>
 801084c:	e7ed      	b.n	801082a <_strtod_l+0x102>
 801084e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010852:	f04f 3aff 	mov.w	sl, #4294967295
 8010856:	e7e8      	b.n	801082a <_strtod_l+0x102>
 8010858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801085a:	1c5a      	adds	r2, r3, #1
 801085c:	9217      	str	r2, [sp, #92]	; 0x5c
 801085e:	785b      	ldrb	r3, [r3, #1]
 8010860:	2b30      	cmp	r3, #48	; 0x30
 8010862:	d0f9      	beq.n	8010858 <_strtod_l+0x130>
 8010864:	2b00      	cmp	r3, #0
 8010866:	d0a3      	beq.n	80107b0 <_strtod_l+0x88>
 8010868:	2301      	movs	r3, #1
 801086a:	f04f 0900 	mov.w	r9, #0
 801086e:	9304      	str	r3, [sp, #16]
 8010870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010872:	9308      	str	r3, [sp, #32]
 8010874:	f8cd 901c 	str.w	r9, [sp, #28]
 8010878:	464f      	mov	r7, r9
 801087a:	220a      	movs	r2, #10
 801087c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801087e:	7806      	ldrb	r6, [r0, #0]
 8010880:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010884:	b2d9      	uxtb	r1, r3
 8010886:	2909      	cmp	r1, #9
 8010888:	d92a      	bls.n	80108e0 <_strtod_l+0x1b8>
 801088a:	9905      	ldr	r1, [sp, #20]
 801088c:	462a      	mov	r2, r5
 801088e:	f003 fac6 	bl	8013e1e <strncmp>
 8010892:	b398      	cbz	r0, 80108fc <_strtod_l+0x1d4>
 8010894:	2000      	movs	r0, #0
 8010896:	4632      	mov	r2, r6
 8010898:	463d      	mov	r5, r7
 801089a:	9005      	str	r0, [sp, #20]
 801089c:	4603      	mov	r3, r0
 801089e:	2a65      	cmp	r2, #101	; 0x65
 80108a0:	d001      	beq.n	80108a6 <_strtod_l+0x17e>
 80108a2:	2a45      	cmp	r2, #69	; 0x45
 80108a4:	d118      	bne.n	80108d8 <_strtod_l+0x1b0>
 80108a6:	b91d      	cbnz	r5, 80108b0 <_strtod_l+0x188>
 80108a8:	9a04      	ldr	r2, [sp, #16]
 80108aa:	4302      	orrs	r2, r0
 80108ac:	d09e      	beq.n	80107ec <_strtod_l+0xc4>
 80108ae:	2500      	movs	r5, #0
 80108b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80108b4:	f108 0201 	add.w	r2, r8, #1
 80108b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80108ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80108be:	2a2b      	cmp	r2, #43	; 0x2b
 80108c0:	d075      	beq.n	80109ae <_strtod_l+0x286>
 80108c2:	2a2d      	cmp	r2, #45	; 0x2d
 80108c4:	d07b      	beq.n	80109be <_strtod_l+0x296>
 80108c6:	f04f 0c00 	mov.w	ip, #0
 80108ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80108ce:	2909      	cmp	r1, #9
 80108d0:	f240 8082 	bls.w	80109d8 <_strtod_l+0x2b0>
 80108d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80108d8:	2600      	movs	r6, #0
 80108da:	e09d      	b.n	8010a18 <_strtod_l+0x2f0>
 80108dc:	2300      	movs	r3, #0
 80108de:	e7c4      	b.n	801086a <_strtod_l+0x142>
 80108e0:	2f08      	cmp	r7, #8
 80108e2:	bfd8      	it	le
 80108e4:	9907      	ldrle	r1, [sp, #28]
 80108e6:	f100 0001 	add.w	r0, r0, #1
 80108ea:	bfda      	itte	le
 80108ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80108f0:	9307      	strle	r3, [sp, #28]
 80108f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80108f6:	3701      	adds	r7, #1
 80108f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80108fa:	e7bf      	b.n	801087c <_strtod_l+0x154>
 80108fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108fe:	195a      	adds	r2, r3, r5
 8010900:	9217      	str	r2, [sp, #92]	; 0x5c
 8010902:	5d5a      	ldrb	r2, [r3, r5]
 8010904:	2f00      	cmp	r7, #0
 8010906:	d037      	beq.n	8010978 <_strtod_l+0x250>
 8010908:	9005      	str	r0, [sp, #20]
 801090a:	463d      	mov	r5, r7
 801090c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010910:	2b09      	cmp	r3, #9
 8010912:	d912      	bls.n	801093a <_strtod_l+0x212>
 8010914:	2301      	movs	r3, #1
 8010916:	e7c2      	b.n	801089e <_strtod_l+0x176>
 8010918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801091a:	1c5a      	adds	r2, r3, #1
 801091c:	9217      	str	r2, [sp, #92]	; 0x5c
 801091e:	785a      	ldrb	r2, [r3, #1]
 8010920:	3001      	adds	r0, #1
 8010922:	2a30      	cmp	r2, #48	; 0x30
 8010924:	d0f8      	beq.n	8010918 <_strtod_l+0x1f0>
 8010926:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801092a:	2b08      	cmp	r3, #8
 801092c:	f200 84d9 	bhi.w	80112e2 <_strtod_l+0xbba>
 8010930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010932:	9005      	str	r0, [sp, #20]
 8010934:	2000      	movs	r0, #0
 8010936:	9308      	str	r3, [sp, #32]
 8010938:	4605      	mov	r5, r0
 801093a:	3a30      	subs	r2, #48	; 0x30
 801093c:	f100 0301 	add.w	r3, r0, #1
 8010940:	d014      	beq.n	801096c <_strtod_l+0x244>
 8010942:	9905      	ldr	r1, [sp, #20]
 8010944:	4419      	add	r1, r3
 8010946:	9105      	str	r1, [sp, #20]
 8010948:	462b      	mov	r3, r5
 801094a:	eb00 0e05 	add.w	lr, r0, r5
 801094e:	210a      	movs	r1, #10
 8010950:	4573      	cmp	r3, lr
 8010952:	d113      	bne.n	801097c <_strtod_l+0x254>
 8010954:	182b      	adds	r3, r5, r0
 8010956:	2b08      	cmp	r3, #8
 8010958:	f105 0501 	add.w	r5, r5, #1
 801095c:	4405      	add	r5, r0
 801095e:	dc1c      	bgt.n	801099a <_strtod_l+0x272>
 8010960:	9907      	ldr	r1, [sp, #28]
 8010962:	230a      	movs	r3, #10
 8010964:	fb03 2301 	mla	r3, r3, r1, r2
 8010968:	9307      	str	r3, [sp, #28]
 801096a:	2300      	movs	r3, #0
 801096c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801096e:	1c51      	adds	r1, r2, #1
 8010970:	9117      	str	r1, [sp, #92]	; 0x5c
 8010972:	7852      	ldrb	r2, [r2, #1]
 8010974:	4618      	mov	r0, r3
 8010976:	e7c9      	b.n	801090c <_strtod_l+0x1e4>
 8010978:	4638      	mov	r0, r7
 801097a:	e7d2      	b.n	8010922 <_strtod_l+0x1fa>
 801097c:	2b08      	cmp	r3, #8
 801097e:	dc04      	bgt.n	801098a <_strtod_l+0x262>
 8010980:	9e07      	ldr	r6, [sp, #28]
 8010982:	434e      	muls	r6, r1
 8010984:	9607      	str	r6, [sp, #28]
 8010986:	3301      	adds	r3, #1
 8010988:	e7e2      	b.n	8010950 <_strtod_l+0x228>
 801098a:	f103 0c01 	add.w	ip, r3, #1
 801098e:	f1bc 0f10 	cmp.w	ip, #16
 8010992:	bfd8      	it	le
 8010994:	fb01 f909 	mulle.w	r9, r1, r9
 8010998:	e7f5      	b.n	8010986 <_strtod_l+0x25e>
 801099a:	2d10      	cmp	r5, #16
 801099c:	bfdc      	itt	le
 801099e:	230a      	movle	r3, #10
 80109a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80109a4:	e7e1      	b.n	801096a <_strtod_l+0x242>
 80109a6:	2300      	movs	r3, #0
 80109a8:	9305      	str	r3, [sp, #20]
 80109aa:	2301      	movs	r3, #1
 80109ac:	e77c      	b.n	80108a8 <_strtod_l+0x180>
 80109ae:	f04f 0c00 	mov.w	ip, #0
 80109b2:	f108 0202 	add.w	r2, r8, #2
 80109b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80109b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80109bc:	e785      	b.n	80108ca <_strtod_l+0x1a2>
 80109be:	f04f 0c01 	mov.w	ip, #1
 80109c2:	e7f6      	b.n	80109b2 <_strtod_l+0x28a>
 80109c4:	0802ae1c 	.word	0x0802ae1c
 80109c8:	0802ab30 	.word	0x0802ab30
 80109cc:	7ff00000 	.word	0x7ff00000
 80109d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109d2:	1c51      	adds	r1, r2, #1
 80109d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80109d6:	7852      	ldrb	r2, [r2, #1]
 80109d8:	2a30      	cmp	r2, #48	; 0x30
 80109da:	d0f9      	beq.n	80109d0 <_strtod_l+0x2a8>
 80109dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80109e0:	2908      	cmp	r1, #8
 80109e2:	f63f af79 	bhi.w	80108d8 <_strtod_l+0x1b0>
 80109e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80109ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109ec:	9206      	str	r2, [sp, #24]
 80109ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109f0:	1c51      	adds	r1, r2, #1
 80109f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80109f4:	7852      	ldrb	r2, [r2, #1]
 80109f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80109fa:	2e09      	cmp	r6, #9
 80109fc:	d937      	bls.n	8010a6e <_strtod_l+0x346>
 80109fe:	9e06      	ldr	r6, [sp, #24]
 8010a00:	1b89      	subs	r1, r1, r6
 8010a02:	2908      	cmp	r1, #8
 8010a04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010a08:	dc02      	bgt.n	8010a10 <_strtod_l+0x2e8>
 8010a0a:	4576      	cmp	r6, lr
 8010a0c:	bfa8      	it	ge
 8010a0e:	4676      	movge	r6, lr
 8010a10:	f1bc 0f00 	cmp.w	ip, #0
 8010a14:	d000      	beq.n	8010a18 <_strtod_l+0x2f0>
 8010a16:	4276      	negs	r6, r6
 8010a18:	2d00      	cmp	r5, #0
 8010a1a:	d14d      	bne.n	8010ab8 <_strtod_l+0x390>
 8010a1c:	9904      	ldr	r1, [sp, #16]
 8010a1e:	4301      	orrs	r1, r0
 8010a20:	f47f aec6 	bne.w	80107b0 <_strtod_l+0x88>
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f47f aee1 	bne.w	80107ec <_strtod_l+0xc4>
 8010a2a:	2a69      	cmp	r2, #105	; 0x69
 8010a2c:	d027      	beq.n	8010a7e <_strtod_l+0x356>
 8010a2e:	dc24      	bgt.n	8010a7a <_strtod_l+0x352>
 8010a30:	2a49      	cmp	r2, #73	; 0x49
 8010a32:	d024      	beq.n	8010a7e <_strtod_l+0x356>
 8010a34:	2a4e      	cmp	r2, #78	; 0x4e
 8010a36:	f47f aed9 	bne.w	80107ec <_strtod_l+0xc4>
 8010a3a:	499f      	ldr	r1, [pc, #636]	; (8010cb8 <_strtod_l+0x590>)
 8010a3c:	a817      	add	r0, sp, #92	; 0x5c
 8010a3e:	f002 f8bb 	bl	8012bb8 <__match>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f43f aed2 	beq.w	80107ec <_strtod_l+0xc4>
 8010a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b28      	cmp	r3, #40	; 0x28
 8010a4e:	d12d      	bne.n	8010aac <_strtod_l+0x384>
 8010a50:	499a      	ldr	r1, [pc, #616]	; (8010cbc <_strtod_l+0x594>)
 8010a52:	aa1a      	add	r2, sp, #104	; 0x68
 8010a54:	a817      	add	r0, sp, #92	; 0x5c
 8010a56:	f002 f8c3 	bl	8012be0 <__hexnan>
 8010a5a:	2805      	cmp	r0, #5
 8010a5c:	d126      	bne.n	8010aac <_strtod_l+0x384>
 8010a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010a64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010a68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010a6c:	e6a0      	b.n	80107b0 <_strtod_l+0x88>
 8010a6e:	210a      	movs	r1, #10
 8010a70:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010a74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010a78:	e7b9      	b.n	80109ee <_strtod_l+0x2c6>
 8010a7a:	2a6e      	cmp	r2, #110	; 0x6e
 8010a7c:	e7db      	b.n	8010a36 <_strtod_l+0x30e>
 8010a7e:	4990      	ldr	r1, [pc, #576]	; (8010cc0 <_strtod_l+0x598>)
 8010a80:	a817      	add	r0, sp, #92	; 0x5c
 8010a82:	f002 f899 	bl	8012bb8 <__match>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	f43f aeb0 	beq.w	80107ec <_strtod_l+0xc4>
 8010a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a8e:	498d      	ldr	r1, [pc, #564]	; (8010cc4 <_strtod_l+0x59c>)
 8010a90:	3b01      	subs	r3, #1
 8010a92:	a817      	add	r0, sp, #92	; 0x5c
 8010a94:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a96:	f002 f88f 	bl	8012bb8 <__match>
 8010a9a:	b910      	cbnz	r0, 8010aa2 <_strtod_l+0x37a>
 8010a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	9317      	str	r3, [sp, #92]	; 0x5c
 8010aa2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010cd4 <_strtod_l+0x5ac>
 8010aa6:	f04f 0a00 	mov.w	sl, #0
 8010aaa:	e681      	b.n	80107b0 <_strtod_l+0x88>
 8010aac:	4886      	ldr	r0, [pc, #536]	; (8010cc8 <_strtod_l+0x5a0>)
 8010aae:	f003 f917 	bl	8013ce0 <nan>
 8010ab2:	ec5b ab10 	vmov	sl, fp, d0
 8010ab6:	e67b      	b.n	80107b0 <_strtod_l+0x88>
 8010ab8:	9b05      	ldr	r3, [sp, #20]
 8010aba:	9807      	ldr	r0, [sp, #28]
 8010abc:	1af3      	subs	r3, r6, r3
 8010abe:	2f00      	cmp	r7, #0
 8010ac0:	bf08      	it	eq
 8010ac2:	462f      	moveq	r7, r5
 8010ac4:	2d10      	cmp	r5, #16
 8010ac6:	9306      	str	r3, [sp, #24]
 8010ac8:	46a8      	mov	r8, r5
 8010aca:	bfa8      	it	ge
 8010acc:	f04f 0810 	movge.w	r8, #16
 8010ad0:	f7ef fd40 	bl	8000554 <__aeabi_ui2d>
 8010ad4:	2d09      	cmp	r5, #9
 8010ad6:	4682      	mov	sl, r0
 8010ad8:	468b      	mov	fp, r1
 8010ada:	dd13      	ble.n	8010b04 <_strtod_l+0x3dc>
 8010adc:	4b7b      	ldr	r3, [pc, #492]	; (8010ccc <_strtod_l+0x5a4>)
 8010ade:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010ae2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010ae6:	f7ef fdaf 	bl	8000648 <__aeabi_dmul>
 8010aea:	4682      	mov	sl, r0
 8010aec:	4648      	mov	r0, r9
 8010aee:	468b      	mov	fp, r1
 8010af0:	f7ef fd30 	bl	8000554 <__aeabi_ui2d>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	4650      	mov	r0, sl
 8010afa:	4659      	mov	r1, fp
 8010afc:	f7ef fbee 	bl	80002dc <__adddf3>
 8010b00:	4682      	mov	sl, r0
 8010b02:	468b      	mov	fp, r1
 8010b04:	2d0f      	cmp	r5, #15
 8010b06:	dc38      	bgt.n	8010b7a <_strtod_l+0x452>
 8010b08:	9b06      	ldr	r3, [sp, #24]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f43f ae50 	beq.w	80107b0 <_strtod_l+0x88>
 8010b10:	dd24      	ble.n	8010b5c <_strtod_l+0x434>
 8010b12:	2b16      	cmp	r3, #22
 8010b14:	dc0b      	bgt.n	8010b2e <_strtod_l+0x406>
 8010b16:	496d      	ldr	r1, [pc, #436]	; (8010ccc <_strtod_l+0x5a4>)
 8010b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b20:	4652      	mov	r2, sl
 8010b22:	465b      	mov	r3, fp
 8010b24:	f7ef fd90 	bl	8000648 <__aeabi_dmul>
 8010b28:	4682      	mov	sl, r0
 8010b2a:	468b      	mov	fp, r1
 8010b2c:	e640      	b.n	80107b0 <_strtod_l+0x88>
 8010b2e:	9a06      	ldr	r2, [sp, #24]
 8010b30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010b34:	4293      	cmp	r3, r2
 8010b36:	db20      	blt.n	8010b7a <_strtod_l+0x452>
 8010b38:	4c64      	ldr	r4, [pc, #400]	; (8010ccc <_strtod_l+0x5a4>)
 8010b3a:	f1c5 050f 	rsb	r5, r5, #15
 8010b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010b42:	4652      	mov	r2, sl
 8010b44:	465b      	mov	r3, fp
 8010b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b4a:	f7ef fd7d 	bl	8000648 <__aeabi_dmul>
 8010b4e:	9b06      	ldr	r3, [sp, #24]
 8010b50:	1b5d      	subs	r5, r3, r5
 8010b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b5a:	e7e3      	b.n	8010b24 <_strtod_l+0x3fc>
 8010b5c:	9b06      	ldr	r3, [sp, #24]
 8010b5e:	3316      	adds	r3, #22
 8010b60:	db0b      	blt.n	8010b7a <_strtod_l+0x452>
 8010b62:	9b05      	ldr	r3, [sp, #20]
 8010b64:	1b9e      	subs	r6, r3, r6
 8010b66:	4b59      	ldr	r3, [pc, #356]	; (8010ccc <_strtod_l+0x5a4>)
 8010b68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b70:	4650      	mov	r0, sl
 8010b72:	4659      	mov	r1, fp
 8010b74:	f7ef fe92 	bl	800089c <__aeabi_ddiv>
 8010b78:	e7d6      	b.n	8010b28 <_strtod_l+0x400>
 8010b7a:	9b06      	ldr	r3, [sp, #24]
 8010b7c:	eba5 0808 	sub.w	r8, r5, r8
 8010b80:	4498      	add	r8, r3
 8010b82:	f1b8 0f00 	cmp.w	r8, #0
 8010b86:	dd74      	ble.n	8010c72 <_strtod_l+0x54a>
 8010b88:	f018 030f 	ands.w	r3, r8, #15
 8010b8c:	d00a      	beq.n	8010ba4 <_strtod_l+0x47c>
 8010b8e:	494f      	ldr	r1, [pc, #316]	; (8010ccc <_strtod_l+0x5a4>)
 8010b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b94:	4652      	mov	r2, sl
 8010b96:	465b      	mov	r3, fp
 8010b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b9c:	f7ef fd54 	bl	8000648 <__aeabi_dmul>
 8010ba0:	4682      	mov	sl, r0
 8010ba2:	468b      	mov	fp, r1
 8010ba4:	f038 080f 	bics.w	r8, r8, #15
 8010ba8:	d04f      	beq.n	8010c4a <_strtod_l+0x522>
 8010baa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010bae:	dd22      	ble.n	8010bf6 <_strtod_l+0x4ce>
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	462e      	mov	r6, r5
 8010bb4:	9507      	str	r5, [sp, #28]
 8010bb6:	9505      	str	r5, [sp, #20]
 8010bb8:	2322      	movs	r3, #34	; 0x22
 8010bba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010cd4 <_strtod_l+0x5ac>
 8010bbe:	6023      	str	r3, [r4, #0]
 8010bc0:	f04f 0a00 	mov.w	sl, #0
 8010bc4:	9b07      	ldr	r3, [sp, #28]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f43f adf2 	beq.w	80107b0 <_strtod_l+0x88>
 8010bcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f002 f982 	bl	8012ed8 <_Bfree>
 8010bd4:	9905      	ldr	r1, [sp, #20]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f002 f97e 	bl	8012ed8 <_Bfree>
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4620      	mov	r0, r4
 8010be0:	f002 f97a 	bl	8012ed8 <_Bfree>
 8010be4:	9907      	ldr	r1, [sp, #28]
 8010be6:	4620      	mov	r0, r4
 8010be8:	f002 f976 	bl	8012ed8 <_Bfree>
 8010bec:	4629      	mov	r1, r5
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f002 f972 	bl	8012ed8 <_Bfree>
 8010bf4:	e5dc      	b.n	80107b0 <_strtod_l+0x88>
 8010bf6:	4b36      	ldr	r3, [pc, #216]	; (8010cd0 <_strtod_l+0x5a8>)
 8010bf8:	9304      	str	r3, [sp, #16]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010c00:	4650      	mov	r0, sl
 8010c02:	4659      	mov	r1, fp
 8010c04:	4699      	mov	r9, r3
 8010c06:	f1b8 0f01 	cmp.w	r8, #1
 8010c0a:	dc21      	bgt.n	8010c50 <_strtod_l+0x528>
 8010c0c:	b10b      	cbz	r3, 8010c12 <_strtod_l+0x4ea>
 8010c0e:	4682      	mov	sl, r0
 8010c10:	468b      	mov	fp, r1
 8010c12:	4b2f      	ldr	r3, [pc, #188]	; (8010cd0 <_strtod_l+0x5a8>)
 8010c14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010c18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010c1c:	4652      	mov	r2, sl
 8010c1e:	465b      	mov	r3, fp
 8010c20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010c24:	f7ef fd10 	bl	8000648 <__aeabi_dmul>
 8010c28:	4b2a      	ldr	r3, [pc, #168]	; (8010cd4 <_strtod_l+0x5ac>)
 8010c2a:	460a      	mov	r2, r1
 8010c2c:	400b      	ands	r3, r1
 8010c2e:	492a      	ldr	r1, [pc, #168]	; (8010cd8 <_strtod_l+0x5b0>)
 8010c30:	428b      	cmp	r3, r1
 8010c32:	4682      	mov	sl, r0
 8010c34:	d8bc      	bhi.n	8010bb0 <_strtod_l+0x488>
 8010c36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c3a:	428b      	cmp	r3, r1
 8010c3c:	bf86      	itte	hi
 8010c3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010cdc <_strtod_l+0x5b4>
 8010c42:	f04f 3aff 	movhi.w	sl, #4294967295
 8010c46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	e084      	b.n	8010d5a <_strtod_l+0x632>
 8010c50:	f018 0f01 	tst.w	r8, #1
 8010c54:	d005      	beq.n	8010c62 <_strtod_l+0x53a>
 8010c56:	9b04      	ldr	r3, [sp, #16]
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f7ef fcf4 	bl	8000648 <__aeabi_dmul>
 8010c60:	2301      	movs	r3, #1
 8010c62:	9a04      	ldr	r2, [sp, #16]
 8010c64:	3208      	adds	r2, #8
 8010c66:	f109 0901 	add.w	r9, r9, #1
 8010c6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c6e:	9204      	str	r2, [sp, #16]
 8010c70:	e7c9      	b.n	8010c06 <_strtod_l+0x4de>
 8010c72:	d0ea      	beq.n	8010c4a <_strtod_l+0x522>
 8010c74:	f1c8 0800 	rsb	r8, r8, #0
 8010c78:	f018 020f 	ands.w	r2, r8, #15
 8010c7c:	d00a      	beq.n	8010c94 <_strtod_l+0x56c>
 8010c7e:	4b13      	ldr	r3, [pc, #76]	; (8010ccc <_strtod_l+0x5a4>)
 8010c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c84:	4650      	mov	r0, sl
 8010c86:	4659      	mov	r1, fp
 8010c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8c:	f7ef fe06 	bl	800089c <__aeabi_ddiv>
 8010c90:	4682      	mov	sl, r0
 8010c92:	468b      	mov	fp, r1
 8010c94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010c98:	d0d7      	beq.n	8010c4a <_strtod_l+0x522>
 8010c9a:	f1b8 0f1f 	cmp.w	r8, #31
 8010c9e:	dd1f      	ble.n	8010ce0 <_strtod_l+0x5b8>
 8010ca0:	2500      	movs	r5, #0
 8010ca2:	462e      	mov	r6, r5
 8010ca4:	9507      	str	r5, [sp, #28]
 8010ca6:	9505      	str	r5, [sp, #20]
 8010ca8:	2322      	movs	r3, #34	; 0x22
 8010caa:	f04f 0a00 	mov.w	sl, #0
 8010cae:	f04f 0b00 	mov.w	fp, #0
 8010cb2:	6023      	str	r3, [r4, #0]
 8010cb4:	e786      	b.n	8010bc4 <_strtod_l+0x49c>
 8010cb6:	bf00      	nop
 8010cb8:	0802ab02 	.word	0x0802ab02
 8010cbc:	0802ab44 	.word	0x0802ab44
 8010cc0:	0802aafa 	.word	0x0802aafa
 8010cc4:	0802ac84 	.word	0x0802ac84
 8010cc8:	0802aadf 	.word	0x0802aadf
 8010ccc:	0802aed8 	.word	0x0802aed8
 8010cd0:	0802aeb0 	.word	0x0802aeb0
 8010cd4:	7ff00000 	.word	0x7ff00000
 8010cd8:	7ca00000 	.word	0x7ca00000
 8010cdc:	7fefffff 	.word	0x7fefffff
 8010ce0:	f018 0310 	ands.w	r3, r8, #16
 8010ce4:	bf18      	it	ne
 8010ce6:	236a      	movne	r3, #106	; 0x6a
 8010ce8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011098 <_strtod_l+0x970>
 8010cec:	9304      	str	r3, [sp, #16]
 8010cee:	4650      	mov	r0, sl
 8010cf0:	4659      	mov	r1, fp
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	f018 0f01 	tst.w	r8, #1
 8010cf8:	d004      	beq.n	8010d04 <_strtod_l+0x5dc>
 8010cfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010cfe:	f7ef fca3 	bl	8000648 <__aeabi_dmul>
 8010d02:	2301      	movs	r3, #1
 8010d04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010d08:	f109 0908 	add.w	r9, r9, #8
 8010d0c:	d1f2      	bne.n	8010cf4 <_strtod_l+0x5cc>
 8010d0e:	b10b      	cbz	r3, 8010d14 <_strtod_l+0x5ec>
 8010d10:	4682      	mov	sl, r0
 8010d12:	468b      	mov	fp, r1
 8010d14:	9b04      	ldr	r3, [sp, #16]
 8010d16:	b1c3      	cbz	r3, 8010d4a <_strtod_l+0x622>
 8010d18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010d1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	4659      	mov	r1, fp
 8010d24:	dd11      	ble.n	8010d4a <_strtod_l+0x622>
 8010d26:	2b1f      	cmp	r3, #31
 8010d28:	f340 8124 	ble.w	8010f74 <_strtod_l+0x84c>
 8010d2c:	2b34      	cmp	r3, #52	; 0x34
 8010d2e:	bfde      	ittt	le
 8010d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010d34:	f04f 33ff 	movle.w	r3, #4294967295
 8010d38:	fa03 f202 	lslle.w	r2, r3, r2
 8010d3c:	f04f 0a00 	mov.w	sl, #0
 8010d40:	bfcc      	ite	gt
 8010d42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010d46:	ea02 0b01 	andle.w	fp, r2, r1
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	4650      	mov	r0, sl
 8010d50:	4659      	mov	r1, fp
 8010d52:	f7ef fee1 	bl	8000b18 <__aeabi_dcmpeq>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d1a2      	bne.n	8010ca0 <_strtod_l+0x578>
 8010d5a:	9b07      	ldr	r3, [sp, #28]
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	9908      	ldr	r1, [sp, #32]
 8010d60:	462b      	mov	r3, r5
 8010d62:	463a      	mov	r2, r7
 8010d64:	4620      	mov	r0, r4
 8010d66:	f002 f91f 	bl	8012fa8 <__s2b>
 8010d6a:	9007      	str	r0, [sp, #28]
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	f43f af1f 	beq.w	8010bb0 <_strtod_l+0x488>
 8010d72:	9b05      	ldr	r3, [sp, #20]
 8010d74:	1b9e      	subs	r6, r3, r6
 8010d76:	9b06      	ldr	r3, [sp, #24]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	bfb4      	ite	lt
 8010d7c:	4633      	movlt	r3, r6
 8010d7e:	2300      	movge	r3, #0
 8010d80:	930c      	str	r3, [sp, #48]	; 0x30
 8010d82:	9b06      	ldr	r3, [sp, #24]
 8010d84:	2500      	movs	r5, #0
 8010d86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8010d8c:	462e      	mov	r6, r5
 8010d8e:	9b07      	ldr	r3, [sp, #28]
 8010d90:	4620      	mov	r0, r4
 8010d92:	6859      	ldr	r1, [r3, #4]
 8010d94:	f002 f860 	bl	8012e58 <_Balloc>
 8010d98:	9005      	str	r0, [sp, #20]
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f43f af0c 	beq.w	8010bb8 <_strtod_l+0x490>
 8010da0:	9b07      	ldr	r3, [sp, #28]
 8010da2:	691a      	ldr	r2, [r3, #16]
 8010da4:	3202      	adds	r2, #2
 8010da6:	f103 010c 	add.w	r1, r3, #12
 8010daa:	0092      	lsls	r2, r2, #2
 8010dac:	300c      	adds	r0, #12
 8010dae:	f7fe fc19 	bl	800f5e4 <memcpy>
 8010db2:	ec4b ab10 	vmov	d0, sl, fp
 8010db6:	aa1a      	add	r2, sp, #104	; 0x68
 8010db8:	a919      	add	r1, sp, #100	; 0x64
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f002 fc3a 	bl	8013634 <__d2b>
 8010dc0:	ec4b ab18 	vmov	d8, sl, fp
 8010dc4:	9018      	str	r0, [sp, #96]	; 0x60
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f43f aef6 	beq.w	8010bb8 <_strtod_l+0x490>
 8010dcc:	2101      	movs	r1, #1
 8010dce:	4620      	mov	r0, r4
 8010dd0:	f002 f984 	bl	80130dc <__i2b>
 8010dd4:	4606      	mov	r6, r0
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	f43f aeee 	beq.w	8010bb8 <_strtod_l+0x490>
 8010ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010dde:	9904      	ldr	r1, [sp, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	bfab      	itete	ge
 8010de4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010de6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010de8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010dea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010dee:	bfac      	ite	ge
 8010df0:	eb03 0902 	addge.w	r9, r3, r2
 8010df4:	1ad7      	sublt	r7, r2, r3
 8010df6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010df8:	eba3 0801 	sub.w	r8, r3, r1
 8010dfc:	4490      	add	r8, r2
 8010dfe:	4ba1      	ldr	r3, [pc, #644]	; (8011084 <_strtod_l+0x95c>)
 8010e00:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e04:	4598      	cmp	r8, r3
 8010e06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010e0a:	f280 80c7 	bge.w	8010f9c <_strtod_l+0x874>
 8010e0e:	eba3 0308 	sub.w	r3, r3, r8
 8010e12:	2b1f      	cmp	r3, #31
 8010e14:	eba2 0203 	sub.w	r2, r2, r3
 8010e18:	f04f 0101 	mov.w	r1, #1
 8010e1c:	f300 80b1 	bgt.w	8010f82 <_strtod_l+0x85a>
 8010e20:	fa01 f303 	lsl.w	r3, r1, r3
 8010e24:	930d      	str	r3, [sp, #52]	; 0x34
 8010e26:	2300      	movs	r3, #0
 8010e28:	9308      	str	r3, [sp, #32]
 8010e2a:	eb09 0802 	add.w	r8, r9, r2
 8010e2e:	9b04      	ldr	r3, [sp, #16]
 8010e30:	45c1      	cmp	r9, r8
 8010e32:	4417      	add	r7, r2
 8010e34:	441f      	add	r7, r3
 8010e36:	464b      	mov	r3, r9
 8010e38:	bfa8      	it	ge
 8010e3a:	4643      	movge	r3, r8
 8010e3c:	42bb      	cmp	r3, r7
 8010e3e:	bfa8      	it	ge
 8010e40:	463b      	movge	r3, r7
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bfc2      	ittt	gt
 8010e46:	eba8 0803 	subgt.w	r8, r8, r3
 8010e4a:	1aff      	subgt	r7, r7, r3
 8010e4c:	eba9 0903 	subgt.w	r9, r9, r3
 8010e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	dd17      	ble.n	8010e86 <_strtod_l+0x75e>
 8010e56:	4631      	mov	r1, r6
 8010e58:	461a      	mov	r2, r3
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f002 f9fe 	bl	801325c <__pow5mult>
 8010e60:	4606      	mov	r6, r0
 8010e62:	2800      	cmp	r0, #0
 8010e64:	f43f aea8 	beq.w	8010bb8 <_strtod_l+0x490>
 8010e68:	4601      	mov	r1, r0
 8010e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f002 f94b 	bl	8013108 <__multiply>
 8010e72:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e74:	2800      	cmp	r0, #0
 8010e76:	f43f ae9f 	beq.w	8010bb8 <_strtod_l+0x490>
 8010e7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f002 f82b 	bl	8012ed8 <_Bfree>
 8010e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e84:	9318      	str	r3, [sp, #96]	; 0x60
 8010e86:	f1b8 0f00 	cmp.w	r8, #0
 8010e8a:	f300 808c 	bgt.w	8010fa6 <_strtod_l+0x87e>
 8010e8e:	9b06      	ldr	r3, [sp, #24]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	dd08      	ble.n	8010ea6 <_strtod_l+0x77e>
 8010e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e96:	9905      	ldr	r1, [sp, #20]
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f002 f9df 	bl	801325c <__pow5mult>
 8010e9e:	9005      	str	r0, [sp, #20]
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	f43f ae89 	beq.w	8010bb8 <_strtod_l+0x490>
 8010ea6:	2f00      	cmp	r7, #0
 8010ea8:	dd08      	ble.n	8010ebc <_strtod_l+0x794>
 8010eaa:	9905      	ldr	r1, [sp, #20]
 8010eac:	463a      	mov	r2, r7
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f002 fa2e 	bl	8013310 <__lshift>
 8010eb4:	9005      	str	r0, [sp, #20]
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	f43f ae7e 	beq.w	8010bb8 <_strtod_l+0x490>
 8010ebc:	f1b9 0f00 	cmp.w	r9, #0
 8010ec0:	dd08      	ble.n	8010ed4 <_strtod_l+0x7ac>
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	464a      	mov	r2, r9
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f002 fa22 	bl	8013310 <__lshift>
 8010ecc:	4606      	mov	r6, r0
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	f43f ae72 	beq.w	8010bb8 <_strtod_l+0x490>
 8010ed4:	9a05      	ldr	r2, [sp, #20]
 8010ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f002 faa5 	bl	8013428 <__mdiff>
 8010ede:	4605      	mov	r5, r0
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	f43f ae69 	beq.w	8010bb8 <_strtod_l+0x490>
 8010ee6:	68c3      	ldr	r3, [r0, #12]
 8010ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eea:	2300      	movs	r3, #0
 8010eec:	60c3      	str	r3, [r0, #12]
 8010eee:	4631      	mov	r1, r6
 8010ef0:	f002 fa7e 	bl	80133f0 <__mcmp>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	da60      	bge.n	8010fba <_strtod_l+0x892>
 8010ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010efa:	ea53 030a 	orrs.w	r3, r3, sl
 8010efe:	f040 8082 	bne.w	8011006 <_strtod_l+0x8de>
 8010f02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d17d      	bne.n	8011006 <_strtod_l+0x8de>
 8010f0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f0e:	0d1b      	lsrs	r3, r3, #20
 8010f10:	051b      	lsls	r3, r3, #20
 8010f12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010f16:	d976      	bls.n	8011006 <_strtod_l+0x8de>
 8010f18:	696b      	ldr	r3, [r5, #20]
 8010f1a:	b913      	cbnz	r3, 8010f22 <_strtod_l+0x7fa>
 8010f1c:	692b      	ldr	r3, [r5, #16]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	dd71      	ble.n	8011006 <_strtod_l+0x8de>
 8010f22:	4629      	mov	r1, r5
 8010f24:	2201      	movs	r2, #1
 8010f26:	4620      	mov	r0, r4
 8010f28:	f002 f9f2 	bl	8013310 <__lshift>
 8010f2c:	4631      	mov	r1, r6
 8010f2e:	4605      	mov	r5, r0
 8010f30:	f002 fa5e 	bl	80133f0 <__mcmp>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	dd66      	ble.n	8011006 <_strtod_l+0x8de>
 8010f38:	9904      	ldr	r1, [sp, #16]
 8010f3a:	4a53      	ldr	r2, [pc, #332]	; (8011088 <_strtod_l+0x960>)
 8010f3c:	465b      	mov	r3, fp
 8010f3e:	2900      	cmp	r1, #0
 8010f40:	f000 8081 	beq.w	8011046 <_strtod_l+0x91e>
 8010f44:	ea02 010b 	and.w	r1, r2, fp
 8010f48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f4c:	dc7b      	bgt.n	8011046 <_strtod_l+0x91e>
 8010f4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f52:	f77f aea9 	ble.w	8010ca8 <_strtod_l+0x580>
 8010f56:	4b4d      	ldr	r3, [pc, #308]	; (801108c <_strtod_l+0x964>)
 8010f58:	4650      	mov	r0, sl
 8010f5a:	4659      	mov	r1, fp
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f7ef fb73 	bl	8000648 <__aeabi_dmul>
 8010f62:	460b      	mov	r3, r1
 8010f64:	4303      	orrs	r3, r0
 8010f66:	bf08      	it	eq
 8010f68:	2322      	moveq	r3, #34	; 0x22
 8010f6a:	4682      	mov	sl, r0
 8010f6c:	468b      	mov	fp, r1
 8010f6e:	bf08      	it	eq
 8010f70:	6023      	streq	r3, [r4, #0]
 8010f72:	e62b      	b.n	8010bcc <_strtod_l+0x4a4>
 8010f74:	f04f 32ff 	mov.w	r2, #4294967295
 8010f78:	fa02 f303 	lsl.w	r3, r2, r3
 8010f7c:	ea03 0a0a 	and.w	sl, r3, sl
 8010f80:	e6e3      	b.n	8010d4a <_strtod_l+0x622>
 8010f82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010f86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010f8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010f8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010f92:	fa01 f308 	lsl.w	r3, r1, r8
 8010f96:	9308      	str	r3, [sp, #32]
 8010f98:	910d      	str	r1, [sp, #52]	; 0x34
 8010f9a:	e746      	b.n	8010e2a <_strtod_l+0x702>
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	9308      	str	r3, [sp, #32]
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8010fa4:	e741      	b.n	8010e2a <_strtod_l+0x702>
 8010fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010fa8:	4642      	mov	r2, r8
 8010faa:	4620      	mov	r0, r4
 8010fac:	f002 f9b0 	bl	8013310 <__lshift>
 8010fb0:	9018      	str	r0, [sp, #96]	; 0x60
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	f47f af6b 	bne.w	8010e8e <_strtod_l+0x766>
 8010fb8:	e5fe      	b.n	8010bb8 <_strtod_l+0x490>
 8010fba:	465f      	mov	r7, fp
 8010fbc:	d16e      	bne.n	801109c <_strtod_l+0x974>
 8010fbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fc4:	b342      	cbz	r2, 8011018 <_strtod_l+0x8f0>
 8010fc6:	4a32      	ldr	r2, [pc, #200]	; (8011090 <_strtod_l+0x968>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d128      	bne.n	801101e <_strtod_l+0x8f6>
 8010fcc:	9b04      	ldr	r3, [sp, #16]
 8010fce:	4651      	mov	r1, sl
 8010fd0:	b1eb      	cbz	r3, 801100e <_strtod_l+0x8e6>
 8010fd2:	4b2d      	ldr	r3, [pc, #180]	; (8011088 <_strtod_l+0x960>)
 8010fd4:	403b      	ands	r3, r7
 8010fd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010fda:	f04f 32ff 	mov.w	r2, #4294967295
 8010fde:	d819      	bhi.n	8011014 <_strtod_l+0x8ec>
 8010fe0:	0d1b      	lsrs	r3, r3, #20
 8010fe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fea:	4299      	cmp	r1, r3
 8010fec:	d117      	bne.n	801101e <_strtod_l+0x8f6>
 8010fee:	4b29      	ldr	r3, [pc, #164]	; (8011094 <_strtod_l+0x96c>)
 8010ff0:	429f      	cmp	r7, r3
 8010ff2:	d102      	bne.n	8010ffa <_strtod_l+0x8d2>
 8010ff4:	3101      	adds	r1, #1
 8010ff6:	f43f addf 	beq.w	8010bb8 <_strtod_l+0x490>
 8010ffa:	4b23      	ldr	r3, [pc, #140]	; (8011088 <_strtod_l+0x960>)
 8010ffc:	403b      	ands	r3, r7
 8010ffe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011002:	f04f 0a00 	mov.w	sl, #0
 8011006:	9b04      	ldr	r3, [sp, #16]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1a4      	bne.n	8010f56 <_strtod_l+0x82e>
 801100c:	e5de      	b.n	8010bcc <_strtod_l+0x4a4>
 801100e:	f04f 33ff 	mov.w	r3, #4294967295
 8011012:	e7ea      	b.n	8010fea <_strtod_l+0x8c2>
 8011014:	4613      	mov	r3, r2
 8011016:	e7e8      	b.n	8010fea <_strtod_l+0x8c2>
 8011018:	ea53 030a 	orrs.w	r3, r3, sl
 801101c:	d08c      	beq.n	8010f38 <_strtod_l+0x810>
 801101e:	9b08      	ldr	r3, [sp, #32]
 8011020:	b1db      	cbz	r3, 801105a <_strtod_l+0x932>
 8011022:	423b      	tst	r3, r7
 8011024:	d0ef      	beq.n	8011006 <_strtod_l+0x8de>
 8011026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011028:	9a04      	ldr	r2, [sp, #16]
 801102a:	4650      	mov	r0, sl
 801102c:	4659      	mov	r1, fp
 801102e:	b1c3      	cbz	r3, 8011062 <_strtod_l+0x93a>
 8011030:	f7ff fb5e 	bl	80106f0 <sulp>
 8011034:	4602      	mov	r2, r0
 8011036:	460b      	mov	r3, r1
 8011038:	ec51 0b18 	vmov	r0, r1, d8
 801103c:	f7ef f94e 	bl	80002dc <__adddf3>
 8011040:	4682      	mov	sl, r0
 8011042:	468b      	mov	fp, r1
 8011044:	e7df      	b.n	8011006 <_strtod_l+0x8de>
 8011046:	4013      	ands	r3, r2
 8011048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801104c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011050:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011054:	f04f 3aff 	mov.w	sl, #4294967295
 8011058:	e7d5      	b.n	8011006 <_strtod_l+0x8de>
 801105a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801105c:	ea13 0f0a 	tst.w	r3, sl
 8011060:	e7e0      	b.n	8011024 <_strtod_l+0x8fc>
 8011062:	f7ff fb45 	bl	80106f0 <sulp>
 8011066:	4602      	mov	r2, r0
 8011068:	460b      	mov	r3, r1
 801106a:	ec51 0b18 	vmov	r0, r1, d8
 801106e:	f7ef f933 	bl	80002d8 <__aeabi_dsub>
 8011072:	2200      	movs	r2, #0
 8011074:	2300      	movs	r3, #0
 8011076:	4682      	mov	sl, r0
 8011078:	468b      	mov	fp, r1
 801107a:	f7ef fd4d 	bl	8000b18 <__aeabi_dcmpeq>
 801107e:	2800      	cmp	r0, #0
 8011080:	d0c1      	beq.n	8011006 <_strtod_l+0x8de>
 8011082:	e611      	b.n	8010ca8 <_strtod_l+0x580>
 8011084:	fffffc02 	.word	0xfffffc02
 8011088:	7ff00000 	.word	0x7ff00000
 801108c:	39500000 	.word	0x39500000
 8011090:	000fffff 	.word	0x000fffff
 8011094:	7fefffff 	.word	0x7fefffff
 8011098:	0802ab58 	.word	0x0802ab58
 801109c:	4631      	mov	r1, r6
 801109e:	4628      	mov	r0, r5
 80110a0:	f002 fb24 	bl	80136ec <__ratio>
 80110a4:	ec59 8b10 	vmov	r8, r9, d0
 80110a8:	ee10 0a10 	vmov	r0, s0
 80110ac:	2200      	movs	r2, #0
 80110ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110b2:	4649      	mov	r1, r9
 80110b4:	f7ef fd44 	bl	8000b40 <__aeabi_dcmple>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d07a      	beq.n	80111b2 <_strtod_l+0xa8a>
 80110bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d04a      	beq.n	8011158 <_strtod_l+0xa30>
 80110c2:	4b95      	ldr	r3, [pc, #596]	; (8011318 <_strtod_l+0xbf0>)
 80110c4:	2200      	movs	r2, #0
 80110c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011318 <_strtod_l+0xbf0>
 80110ce:	f04f 0800 	mov.w	r8, #0
 80110d2:	4b92      	ldr	r3, [pc, #584]	; (801131c <_strtod_l+0xbf4>)
 80110d4:	403b      	ands	r3, r7
 80110d6:	930d      	str	r3, [sp, #52]	; 0x34
 80110d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110da:	4b91      	ldr	r3, [pc, #580]	; (8011320 <_strtod_l+0xbf8>)
 80110dc:	429a      	cmp	r2, r3
 80110de:	f040 80b0 	bne.w	8011242 <_strtod_l+0xb1a>
 80110e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80110ea:	ec4b ab10 	vmov	d0, sl, fp
 80110ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110f2:	f002 fa23 	bl	801353c <__ulp>
 80110f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110fa:	ec53 2b10 	vmov	r2, r3, d0
 80110fe:	f7ef faa3 	bl	8000648 <__aeabi_dmul>
 8011102:	4652      	mov	r2, sl
 8011104:	465b      	mov	r3, fp
 8011106:	f7ef f8e9 	bl	80002dc <__adddf3>
 801110a:	460b      	mov	r3, r1
 801110c:	4983      	ldr	r1, [pc, #524]	; (801131c <_strtod_l+0xbf4>)
 801110e:	4a85      	ldr	r2, [pc, #532]	; (8011324 <_strtod_l+0xbfc>)
 8011110:	4019      	ands	r1, r3
 8011112:	4291      	cmp	r1, r2
 8011114:	4682      	mov	sl, r0
 8011116:	d960      	bls.n	80111da <_strtod_l+0xab2>
 8011118:	ee18 3a90 	vmov	r3, s17
 801111c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011120:	4293      	cmp	r3, r2
 8011122:	d104      	bne.n	801112e <_strtod_l+0xa06>
 8011124:	ee18 3a10 	vmov	r3, s16
 8011128:	3301      	adds	r3, #1
 801112a:	f43f ad45 	beq.w	8010bb8 <_strtod_l+0x490>
 801112e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011330 <_strtod_l+0xc08>
 8011132:	f04f 3aff 	mov.w	sl, #4294967295
 8011136:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011138:	4620      	mov	r0, r4
 801113a:	f001 fecd 	bl	8012ed8 <_Bfree>
 801113e:	9905      	ldr	r1, [sp, #20]
 8011140:	4620      	mov	r0, r4
 8011142:	f001 fec9 	bl	8012ed8 <_Bfree>
 8011146:	4631      	mov	r1, r6
 8011148:	4620      	mov	r0, r4
 801114a:	f001 fec5 	bl	8012ed8 <_Bfree>
 801114e:	4629      	mov	r1, r5
 8011150:	4620      	mov	r0, r4
 8011152:	f001 fec1 	bl	8012ed8 <_Bfree>
 8011156:	e61a      	b.n	8010d8e <_strtod_l+0x666>
 8011158:	f1ba 0f00 	cmp.w	sl, #0
 801115c:	d11b      	bne.n	8011196 <_strtod_l+0xa6e>
 801115e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011162:	b9f3      	cbnz	r3, 80111a2 <_strtod_l+0xa7a>
 8011164:	4b6c      	ldr	r3, [pc, #432]	; (8011318 <_strtod_l+0xbf0>)
 8011166:	2200      	movs	r2, #0
 8011168:	4640      	mov	r0, r8
 801116a:	4649      	mov	r1, r9
 801116c:	f7ef fcde 	bl	8000b2c <__aeabi_dcmplt>
 8011170:	b9d0      	cbnz	r0, 80111a8 <_strtod_l+0xa80>
 8011172:	4640      	mov	r0, r8
 8011174:	4649      	mov	r1, r9
 8011176:	4b6c      	ldr	r3, [pc, #432]	; (8011328 <_strtod_l+0xc00>)
 8011178:	2200      	movs	r2, #0
 801117a:	f7ef fa65 	bl	8000648 <__aeabi_dmul>
 801117e:	4680      	mov	r8, r0
 8011180:	4689      	mov	r9, r1
 8011182:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011186:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801118a:	9315      	str	r3, [sp, #84]	; 0x54
 801118c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011194:	e79d      	b.n	80110d2 <_strtod_l+0x9aa>
 8011196:	f1ba 0f01 	cmp.w	sl, #1
 801119a:	d102      	bne.n	80111a2 <_strtod_l+0xa7a>
 801119c:	2f00      	cmp	r7, #0
 801119e:	f43f ad83 	beq.w	8010ca8 <_strtod_l+0x580>
 80111a2:	4b62      	ldr	r3, [pc, #392]	; (801132c <_strtod_l+0xc04>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	e78e      	b.n	80110c6 <_strtod_l+0x99e>
 80111a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011328 <_strtod_l+0xc00>
 80111ac:	f04f 0800 	mov.w	r8, #0
 80111b0:	e7e7      	b.n	8011182 <_strtod_l+0xa5a>
 80111b2:	4b5d      	ldr	r3, [pc, #372]	; (8011328 <_strtod_l+0xc00>)
 80111b4:	4640      	mov	r0, r8
 80111b6:	4649      	mov	r1, r9
 80111b8:	2200      	movs	r2, #0
 80111ba:	f7ef fa45 	bl	8000648 <__aeabi_dmul>
 80111be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111c0:	4680      	mov	r8, r0
 80111c2:	4689      	mov	r9, r1
 80111c4:	b933      	cbnz	r3, 80111d4 <_strtod_l+0xaac>
 80111c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111ca:	900e      	str	r0, [sp, #56]	; 0x38
 80111cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80111ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80111d2:	e7dd      	b.n	8011190 <_strtod_l+0xa68>
 80111d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80111d8:	e7f9      	b.n	80111ce <_strtod_l+0xaa6>
 80111da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80111de:	9b04      	ldr	r3, [sp, #16]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1a8      	bne.n	8011136 <_strtod_l+0xa0e>
 80111e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111ea:	0d1b      	lsrs	r3, r3, #20
 80111ec:	051b      	lsls	r3, r3, #20
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d1a1      	bne.n	8011136 <_strtod_l+0xa0e>
 80111f2:	4640      	mov	r0, r8
 80111f4:	4649      	mov	r1, r9
 80111f6:	f7ef fdd7 	bl	8000da8 <__aeabi_d2lz>
 80111fa:	f7ef f9f7 	bl	80005ec <__aeabi_l2d>
 80111fe:	4602      	mov	r2, r0
 8011200:	460b      	mov	r3, r1
 8011202:	4640      	mov	r0, r8
 8011204:	4649      	mov	r1, r9
 8011206:	f7ef f867 	bl	80002d8 <__aeabi_dsub>
 801120a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801120c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011210:	ea43 030a 	orr.w	r3, r3, sl
 8011214:	4313      	orrs	r3, r2
 8011216:	4680      	mov	r8, r0
 8011218:	4689      	mov	r9, r1
 801121a:	d055      	beq.n	80112c8 <_strtod_l+0xba0>
 801121c:	a336      	add	r3, pc, #216	; (adr r3, 80112f8 <_strtod_l+0xbd0>)
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	f7ef fc83 	bl	8000b2c <__aeabi_dcmplt>
 8011226:	2800      	cmp	r0, #0
 8011228:	f47f acd0 	bne.w	8010bcc <_strtod_l+0x4a4>
 801122c:	a334      	add	r3, pc, #208	; (adr r3, 8011300 <_strtod_l+0xbd8>)
 801122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011232:	4640      	mov	r0, r8
 8011234:	4649      	mov	r1, r9
 8011236:	f7ef fc97 	bl	8000b68 <__aeabi_dcmpgt>
 801123a:	2800      	cmp	r0, #0
 801123c:	f43f af7b 	beq.w	8011136 <_strtod_l+0xa0e>
 8011240:	e4c4      	b.n	8010bcc <_strtod_l+0x4a4>
 8011242:	9b04      	ldr	r3, [sp, #16]
 8011244:	b333      	cbz	r3, 8011294 <_strtod_l+0xb6c>
 8011246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011248:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801124c:	d822      	bhi.n	8011294 <_strtod_l+0xb6c>
 801124e:	a32e      	add	r3, pc, #184	; (adr r3, 8011308 <_strtod_l+0xbe0>)
 8011250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011254:	4640      	mov	r0, r8
 8011256:	4649      	mov	r1, r9
 8011258:	f7ef fc72 	bl	8000b40 <__aeabi_dcmple>
 801125c:	b1a0      	cbz	r0, 8011288 <_strtod_l+0xb60>
 801125e:	4649      	mov	r1, r9
 8011260:	4640      	mov	r0, r8
 8011262:	f7ef fcc9 	bl	8000bf8 <__aeabi_d2uiz>
 8011266:	2801      	cmp	r0, #1
 8011268:	bf38      	it	cc
 801126a:	2001      	movcc	r0, #1
 801126c:	f7ef f972 	bl	8000554 <__aeabi_ui2d>
 8011270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011272:	4680      	mov	r8, r0
 8011274:	4689      	mov	r9, r1
 8011276:	bb23      	cbnz	r3, 80112c2 <_strtod_l+0xb9a>
 8011278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801127c:	9010      	str	r0, [sp, #64]	; 0x40
 801127e:	9311      	str	r3, [sp, #68]	; 0x44
 8011280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011284:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801128a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801128c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011290:	1a9b      	subs	r3, r3, r2
 8011292:	9309      	str	r3, [sp, #36]	; 0x24
 8011294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011298:	eeb0 0a48 	vmov.f32	s0, s16
 801129c:	eef0 0a68 	vmov.f32	s1, s17
 80112a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80112a4:	f002 f94a 	bl	801353c <__ulp>
 80112a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80112ac:	ec53 2b10 	vmov	r2, r3, d0
 80112b0:	f7ef f9ca 	bl	8000648 <__aeabi_dmul>
 80112b4:	ec53 2b18 	vmov	r2, r3, d8
 80112b8:	f7ef f810 	bl	80002dc <__adddf3>
 80112bc:	4682      	mov	sl, r0
 80112be:	468b      	mov	fp, r1
 80112c0:	e78d      	b.n	80111de <_strtod_l+0xab6>
 80112c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80112c6:	e7db      	b.n	8011280 <_strtod_l+0xb58>
 80112c8:	a311      	add	r3, pc, #68	; (adr r3, 8011310 <_strtod_l+0xbe8>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	f7ef fc2d 	bl	8000b2c <__aeabi_dcmplt>
 80112d2:	e7b2      	b.n	801123a <_strtod_l+0xb12>
 80112d4:	2300      	movs	r3, #0
 80112d6:	930a      	str	r3, [sp, #40]	; 0x28
 80112d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80112da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	f7ff ba6b 	b.w	80107b8 <_strtod_l+0x90>
 80112e2:	2a65      	cmp	r2, #101	; 0x65
 80112e4:	f43f ab5f 	beq.w	80109a6 <_strtod_l+0x27e>
 80112e8:	2a45      	cmp	r2, #69	; 0x45
 80112ea:	f43f ab5c 	beq.w	80109a6 <_strtod_l+0x27e>
 80112ee:	2301      	movs	r3, #1
 80112f0:	f7ff bb94 	b.w	8010a1c <_strtod_l+0x2f4>
 80112f4:	f3af 8000 	nop.w
 80112f8:	94a03595 	.word	0x94a03595
 80112fc:	3fdfffff 	.word	0x3fdfffff
 8011300:	35afe535 	.word	0x35afe535
 8011304:	3fe00000 	.word	0x3fe00000
 8011308:	ffc00000 	.word	0xffc00000
 801130c:	41dfffff 	.word	0x41dfffff
 8011310:	94a03595 	.word	0x94a03595
 8011314:	3fcfffff 	.word	0x3fcfffff
 8011318:	3ff00000 	.word	0x3ff00000
 801131c:	7ff00000 	.word	0x7ff00000
 8011320:	7fe00000 	.word	0x7fe00000
 8011324:	7c9fffff 	.word	0x7c9fffff
 8011328:	3fe00000 	.word	0x3fe00000
 801132c:	bff00000 	.word	0xbff00000
 8011330:	7fefffff 	.word	0x7fefffff

08011334 <_strtod_r>:
 8011334:	4b01      	ldr	r3, [pc, #4]	; (801133c <_strtod_r+0x8>)
 8011336:	f7ff b9f7 	b.w	8010728 <_strtod_l>
 801133a:	bf00      	nop
 801133c:	20000144 	.word	0x20000144

08011340 <_strtol_l.constprop.0>:
 8011340:	2b01      	cmp	r3, #1
 8011342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011346:	d001      	beq.n	801134c <_strtol_l.constprop.0+0xc>
 8011348:	2b24      	cmp	r3, #36	; 0x24
 801134a:	d906      	bls.n	801135a <_strtol_l.constprop.0+0x1a>
 801134c:	f7fe f90e 	bl	800f56c <__errno>
 8011350:	2316      	movs	r3, #22
 8011352:	6003      	str	r3, [r0, #0]
 8011354:	2000      	movs	r0, #0
 8011356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801135a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011440 <_strtol_l.constprop.0+0x100>
 801135e:	460d      	mov	r5, r1
 8011360:	462e      	mov	r6, r5
 8011362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011366:	f814 700c 	ldrb.w	r7, [r4, ip]
 801136a:	f017 0708 	ands.w	r7, r7, #8
 801136e:	d1f7      	bne.n	8011360 <_strtol_l.constprop.0+0x20>
 8011370:	2c2d      	cmp	r4, #45	; 0x2d
 8011372:	d132      	bne.n	80113da <_strtol_l.constprop.0+0x9a>
 8011374:	782c      	ldrb	r4, [r5, #0]
 8011376:	2701      	movs	r7, #1
 8011378:	1cb5      	adds	r5, r6, #2
 801137a:	2b00      	cmp	r3, #0
 801137c:	d05b      	beq.n	8011436 <_strtol_l.constprop.0+0xf6>
 801137e:	2b10      	cmp	r3, #16
 8011380:	d109      	bne.n	8011396 <_strtol_l.constprop.0+0x56>
 8011382:	2c30      	cmp	r4, #48	; 0x30
 8011384:	d107      	bne.n	8011396 <_strtol_l.constprop.0+0x56>
 8011386:	782c      	ldrb	r4, [r5, #0]
 8011388:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801138c:	2c58      	cmp	r4, #88	; 0x58
 801138e:	d14d      	bne.n	801142c <_strtol_l.constprop.0+0xec>
 8011390:	786c      	ldrb	r4, [r5, #1]
 8011392:	2310      	movs	r3, #16
 8011394:	3502      	adds	r5, #2
 8011396:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801139a:	f108 38ff 	add.w	r8, r8, #4294967295
 801139e:	f04f 0c00 	mov.w	ip, #0
 80113a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80113a6:	4666      	mov	r6, ip
 80113a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80113ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80113b0:	f1be 0f09 	cmp.w	lr, #9
 80113b4:	d816      	bhi.n	80113e4 <_strtol_l.constprop.0+0xa4>
 80113b6:	4674      	mov	r4, lr
 80113b8:	42a3      	cmp	r3, r4
 80113ba:	dd24      	ble.n	8011406 <_strtol_l.constprop.0+0xc6>
 80113bc:	f1bc 0f00 	cmp.w	ip, #0
 80113c0:	db1e      	blt.n	8011400 <_strtol_l.constprop.0+0xc0>
 80113c2:	45b1      	cmp	r9, r6
 80113c4:	d31c      	bcc.n	8011400 <_strtol_l.constprop.0+0xc0>
 80113c6:	d101      	bne.n	80113cc <_strtol_l.constprop.0+0x8c>
 80113c8:	45a2      	cmp	sl, r4
 80113ca:	db19      	blt.n	8011400 <_strtol_l.constprop.0+0xc0>
 80113cc:	fb06 4603 	mla	r6, r6, r3, r4
 80113d0:	f04f 0c01 	mov.w	ip, #1
 80113d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113d8:	e7e8      	b.n	80113ac <_strtol_l.constprop.0+0x6c>
 80113da:	2c2b      	cmp	r4, #43	; 0x2b
 80113dc:	bf04      	itt	eq
 80113de:	782c      	ldrbeq	r4, [r5, #0]
 80113e0:	1cb5      	addeq	r5, r6, #2
 80113e2:	e7ca      	b.n	801137a <_strtol_l.constprop.0+0x3a>
 80113e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80113e8:	f1be 0f19 	cmp.w	lr, #25
 80113ec:	d801      	bhi.n	80113f2 <_strtol_l.constprop.0+0xb2>
 80113ee:	3c37      	subs	r4, #55	; 0x37
 80113f0:	e7e2      	b.n	80113b8 <_strtol_l.constprop.0+0x78>
 80113f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80113f6:	f1be 0f19 	cmp.w	lr, #25
 80113fa:	d804      	bhi.n	8011406 <_strtol_l.constprop.0+0xc6>
 80113fc:	3c57      	subs	r4, #87	; 0x57
 80113fe:	e7db      	b.n	80113b8 <_strtol_l.constprop.0+0x78>
 8011400:	f04f 3cff 	mov.w	ip, #4294967295
 8011404:	e7e6      	b.n	80113d4 <_strtol_l.constprop.0+0x94>
 8011406:	f1bc 0f00 	cmp.w	ip, #0
 801140a:	da05      	bge.n	8011418 <_strtol_l.constprop.0+0xd8>
 801140c:	2322      	movs	r3, #34	; 0x22
 801140e:	6003      	str	r3, [r0, #0]
 8011410:	4646      	mov	r6, r8
 8011412:	b942      	cbnz	r2, 8011426 <_strtol_l.constprop.0+0xe6>
 8011414:	4630      	mov	r0, r6
 8011416:	e79e      	b.n	8011356 <_strtol_l.constprop.0+0x16>
 8011418:	b107      	cbz	r7, 801141c <_strtol_l.constprop.0+0xdc>
 801141a:	4276      	negs	r6, r6
 801141c:	2a00      	cmp	r2, #0
 801141e:	d0f9      	beq.n	8011414 <_strtol_l.constprop.0+0xd4>
 8011420:	f1bc 0f00 	cmp.w	ip, #0
 8011424:	d000      	beq.n	8011428 <_strtol_l.constprop.0+0xe8>
 8011426:	1e69      	subs	r1, r5, #1
 8011428:	6011      	str	r1, [r2, #0]
 801142a:	e7f3      	b.n	8011414 <_strtol_l.constprop.0+0xd4>
 801142c:	2430      	movs	r4, #48	; 0x30
 801142e:	2b00      	cmp	r3, #0
 8011430:	d1b1      	bne.n	8011396 <_strtol_l.constprop.0+0x56>
 8011432:	2308      	movs	r3, #8
 8011434:	e7af      	b.n	8011396 <_strtol_l.constprop.0+0x56>
 8011436:	2c30      	cmp	r4, #48	; 0x30
 8011438:	d0a5      	beq.n	8011386 <_strtol_l.constprop.0+0x46>
 801143a:	230a      	movs	r3, #10
 801143c:	e7ab      	b.n	8011396 <_strtol_l.constprop.0+0x56>
 801143e:	bf00      	nop
 8011440:	0802ab81 	.word	0x0802ab81

08011444 <_strtol_r>:
 8011444:	f7ff bf7c 	b.w	8011340 <_strtol_l.constprop.0>

08011448 <__swbuf_r>:
 8011448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144a:	460e      	mov	r6, r1
 801144c:	4614      	mov	r4, r2
 801144e:	4605      	mov	r5, r0
 8011450:	b118      	cbz	r0, 801145a <__swbuf_r+0x12>
 8011452:	6983      	ldr	r3, [r0, #24]
 8011454:	b90b      	cbnz	r3, 801145a <__swbuf_r+0x12>
 8011456:	f001 f853 	bl	8012500 <__sinit>
 801145a:	4b21      	ldr	r3, [pc, #132]	; (80114e0 <__swbuf_r+0x98>)
 801145c:	429c      	cmp	r4, r3
 801145e:	d12b      	bne.n	80114b8 <__swbuf_r+0x70>
 8011460:	686c      	ldr	r4, [r5, #4]
 8011462:	69a3      	ldr	r3, [r4, #24]
 8011464:	60a3      	str	r3, [r4, #8]
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	071a      	lsls	r2, r3, #28
 801146a:	d52f      	bpl.n	80114cc <__swbuf_r+0x84>
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	b36b      	cbz	r3, 80114cc <__swbuf_r+0x84>
 8011470:	6923      	ldr	r3, [r4, #16]
 8011472:	6820      	ldr	r0, [r4, #0]
 8011474:	1ac0      	subs	r0, r0, r3
 8011476:	6963      	ldr	r3, [r4, #20]
 8011478:	b2f6      	uxtb	r6, r6
 801147a:	4283      	cmp	r3, r0
 801147c:	4637      	mov	r7, r6
 801147e:	dc04      	bgt.n	801148a <__swbuf_r+0x42>
 8011480:	4621      	mov	r1, r4
 8011482:	4628      	mov	r0, r5
 8011484:	f000 ffa8 	bl	80123d8 <_fflush_r>
 8011488:	bb30      	cbnz	r0, 80114d8 <__swbuf_r+0x90>
 801148a:	68a3      	ldr	r3, [r4, #8]
 801148c:	3b01      	subs	r3, #1
 801148e:	60a3      	str	r3, [r4, #8]
 8011490:	6823      	ldr	r3, [r4, #0]
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	6022      	str	r2, [r4, #0]
 8011496:	701e      	strb	r6, [r3, #0]
 8011498:	6963      	ldr	r3, [r4, #20]
 801149a:	3001      	adds	r0, #1
 801149c:	4283      	cmp	r3, r0
 801149e:	d004      	beq.n	80114aa <__swbuf_r+0x62>
 80114a0:	89a3      	ldrh	r3, [r4, #12]
 80114a2:	07db      	lsls	r3, r3, #31
 80114a4:	d506      	bpl.n	80114b4 <__swbuf_r+0x6c>
 80114a6:	2e0a      	cmp	r6, #10
 80114a8:	d104      	bne.n	80114b4 <__swbuf_r+0x6c>
 80114aa:	4621      	mov	r1, r4
 80114ac:	4628      	mov	r0, r5
 80114ae:	f000 ff93 	bl	80123d8 <_fflush_r>
 80114b2:	b988      	cbnz	r0, 80114d8 <__swbuf_r+0x90>
 80114b4:	4638      	mov	r0, r7
 80114b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b8:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <__swbuf_r+0x9c>)
 80114ba:	429c      	cmp	r4, r3
 80114bc:	d101      	bne.n	80114c2 <__swbuf_r+0x7a>
 80114be:	68ac      	ldr	r4, [r5, #8]
 80114c0:	e7cf      	b.n	8011462 <__swbuf_r+0x1a>
 80114c2:	4b09      	ldr	r3, [pc, #36]	; (80114e8 <__swbuf_r+0xa0>)
 80114c4:	429c      	cmp	r4, r3
 80114c6:	bf08      	it	eq
 80114c8:	68ec      	ldreq	r4, [r5, #12]
 80114ca:	e7ca      	b.n	8011462 <__swbuf_r+0x1a>
 80114cc:	4621      	mov	r1, r4
 80114ce:	4628      	mov	r0, r5
 80114d0:	f000 f80c 	bl	80114ec <__swsetup_r>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d0cb      	beq.n	8011470 <__swbuf_r+0x28>
 80114d8:	f04f 37ff 	mov.w	r7, #4294967295
 80114dc:	e7ea      	b.n	80114b4 <__swbuf_r+0x6c>
 80114de:	bf00      	nop
 80114e0:	0802ad54 	.word	0x0802ad54
 80114e4:	0802ad74 	.word	0x0802ad74
 80114e8:	0802ad34 	.word	0x0802ad34

080114ec <__swsetup_r>:
 80114ec:	4b32      	ldr	r3, [pc, #200]	; (80115b8 <__swsetup_r+0xcc>)
 80114ee:	b570      	push	{r4, r5, r6, lr}
 80114f0:	681d      	ldr	r5, [r3, #0]
 80114f2:	4606      	mov	r6, r0
 80114f4:	460c      	mov	r4, r1
 80114f6:	b125      	cbz	r5, 8011502 <__swsetup_r+0x16>
 80114f8:	69ab      	ldr	r3, [r5, #24]
 80114fa:	b913      	cbnz	r3, 8011502 <__swsetup_r+0x16>
 80114fc:	4628      	mov	r0, r5
 80114fe:	f000 ffff 	bl	8012500 <__sinit>
 8011502:	4b2e      	ldr	r3, [pc, #184]	; (80115bc <__swsetup_r+0xd0>)
 8011504:	429c      	cmp	r4, r3
 8011506:	d10f      	bne.n	8011528 <__swsetup_r+0x3c>
 8011508:	686c      	ldr	r4, [r5, #4]
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011510:	0719      	lsls	r1, r3, #28
 8011512:	d42c      	bmi.n	801156e <__swsetup_r+0x82>
 8011514:	06dd      	lsls	r5, r3, #27
 8011516:	d411      	bmi.n	801153c <__swsetup_r+0x50>
 8011518:	2309      	movs	r3, #9
 801151a:	6033      	str	r3, [r6, #0]
 801151c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011520:	81a3      	strh	r3, [r4, #12]
 8011522:	f04f 30ff 	mov.w	r0, #4294967295
 8011526:	e03e      	b.n	80115a6 <__swsetup_r+0xba>
 8011528:	4b25      	ldr	r3, [pc, #148]	; (80115c0 <__swsetup_r+0xd4>)
 801152a:	429c      	cmp	r4, r3
 801152c:	d101      	bne.n	8011532 <__swsetup_r+0x46>
 801152e:	68ac      	ldr	r4, [r5, #8]
 8011530:	e7eb      	b.n	801150a <__swsetup_r+0x1e>
 8011532:	4b24      	ldr	r3, [pc, #144]	; (80115c4 <__swsetup_r+0xd8>)
 8011534:	429c      	cmp	r4, r3
 8011536:	bf08      	it	eq
 8011538:	68ec      	ldreq	r4, [r5, #12]
 801153a:	e7e6      	b.n	801150a <__swsetup_r+0x1e>
 801153c:	0758      	lsls	r0, r3, #29
 801153e:	d512      	bpl.n	8011566 <__swsetup_r+0x7a>
 8011540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011542:	b141      	cbz	r1, 8011556 <__swsetup_r+0x6a>
 8011544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011548:	4299      	cmp	r1, r3
 801154a:	d002      	beq.n	8011552 <__swsetup_r+0x66>
 801154c:	4630      	mov	r0, r6
 801154e:	f002 f95b 	bl	8013808 <_free_r>
 8011552:	2300      	movs	r3, #0
 8011554:	6363      	str	r3, [r4, #52]	; 0x34
 8011556:	89a3      	ldrh	r3, [r4, #12]
 8011558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	2300      	movs	r3, #0
 8011560:	6063      	str	r3, [r4, #4]
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	f043 0308 	orr.w	r3, r3, #8
 801156c:	81a3      	strh	r3, [r4, #12]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	b94b      	cbnz	r3, 8011586 <__swsetup_r+0x9a>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801157c:	d003      	beq.n	8011586 <__swsetup_r+0x9a>
 801157e:	4621      	mov	r1, r4
 8011580:	4630      	mov	r0, r6
 8011582:	f001 fbf5 	bl	8012d70 <__smakebuf_r>
 8011586:	89a0      	ldrh	r0, [r4, #12]
 8011588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801158c:	f010 0301 	ands.w	r3, r0, #1
 8011590:	d00a      	beq.n	80115a8 <__swsetup_r+0xbc>
 8011592:	2300      	movs	r3, #0
 8011594:	60a3      	str	r3, [r4, #8]
 8011596:	6963      	ldr	r3, [r4, #20]
 8011598:	425b      	negs	r3, r3
 801159a:	61a3      	str	r3, [r4, #24]
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	b943      	cbnz	r3, 80115b2 <__swsetup_r+0xc6>
 80115a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115a4:	d1ba      	bne.n	801151c <__swsetup_r+0x30>
 80115a6:	bd70      	pop	{r4, r5, r6, pc}
 80115a8:	0781      	lsls	r1, r0, #30
 80115aa:	bf58      	it	pl
 80115ac:	6963      	ldrpl	r3, [r4, #20]
 80115ae:	60a3      	str	r3, [r4, #8]
 80115b0:	e7f4      	b.n	801159c <__swsetup_r+0xb0>
 80115b2:	2000      	movs	r0, #0
 80115b4:	e7f7      	b.n	80115a6 <__swsetup_r+0xba>
 80115b6:	bf00      	nop
 80115b8:	200000dc 	.word	0x200000dc
 80115bc:	0802ad54 	.word	0x0802ad54
 80115c0:	0802ad74 	.word	0x0802ad74
 80115c4:	0802ad34 	.word	0x0802ad34

080115c8 <abort>:
 80115c8:	b508      	push	{r3, lr}
 80115ca:	2006      	movs	r0, #6
 80115cc:	f002 fbc8 	bl	8013d60 <raise>
 80115d0:	2001      	movs	r0, #1
 80115d2:	f7f2 fc2d 	bl	8003e30 <_exit>

080115d6 <quorem>:
 80115d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115da:	6903      	ldr	r3, [r0, #16]
 80115dc:	690c      	ldr	r4, [r1, #16]
 80115de:	42a3      	cmp	r3, r4
 80115e0:	4607      	mov	r7, r0
 80115e2:	f2c0 8081 	blt.w	80116e8 <quorem+0x112>
 80115e6:	3c01      	subs	r4, #1
 80115e8:	f101 0814 	add.w	r8, r1, #20
 80115ec:	f100 0514 	add.w	r5, r0, #20
 80115f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115f4:	9301      	str	r3, [sp, #4]
 80115f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115fe:	3301      	adds	r3, #1
 8011600:	429a      	cmp	r2, r3
 8011602:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011606:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801160a:	fbb2 f6f3 	udiv	r6, r2, r3
 801160e:	d331      	bcc.n	8011674 <quorem+0x9e>
 8011610:	f04f 0e00 	mov.w	lr, #0
 8011614:	4640      	mov	r0, r8
 8011616:	46ac      	mov	ip, r5
 8011618:	46f2      	mov	sl, lr
 801161a:	f850 2b04 	ldr.w	r2, [r0], #4
 801161e:	b293      	uxth	r3, r2
 8011620:	fb06 e303 	mla	r3, r6, r3, lr
 8011624:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011628:	b29b      	uxth	r3, r3
 801162a:	ebaa 0303 	sub.w	r3, sl, r3
 801162e:	f8dc a000 	ldr.w	sl, [ip]
 8011632:	0c12      	lsrs	r2, r2, #16
 8011634:	fa13 f38a 	uxtah	r3, r3, sl
 8011638:	fb06 e202 	mla	r2, r6, r2, lr
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	9b00      	ldr	r3, [sp, #0]
 8011640:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011644:	b292      	uxth	r2, r2
 8011646:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801164a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801164e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011652:	4581      	cmp	r9, r0
 8011654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011658:	f84c 3b04 	str.w	r3, [ip], #4
 801165c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011660:	d2db      	bcs.n	801161a <quorem+0x44>
 8011662:	f855 300b 	ldr.w	r3, [r5, fp]
 8011666:	b92b      	cbnz	r3, 8011674 <quorem+0x9e>
 8011668:	9b01      	ldr	r3, [sp, #4]
 801166a:	3b04      	subs	r3, #4
 801166c:	429d      	cmp	r5, r3
 801166e:	461a      	mov	r2, r3
 8011670:	d32e      	bcc.n	80116d0 <quorem+0xfa>
 8011672:	613c      	str	r4, [r7, #16]
 8011674:	4638      	mov	r0, r7
 8011676:	f001 febb 	bl	80133f0 <__mcmp>
 801167a:	2800      	cmp	r0, #0
 801167c:	db24      	blt.n	80116c8 <quorem+0xf2>
 801167e:	3601      	adds	r6, #1
 8011680:	4628      	mov	r0, r5
 8011682:	f04f 0c00 	mov.w	ip, #0
 8011686:	f858 2b04 	ldr.w	r2, [r8], #4
 801168a:	f8d0 e000 	ldr.w	lr, [r0]
 801168e:	b293      	uxth	r3, r2
 8011690:	ebac 0303 	sub.w	r3, ip, r3
 8011694:	0c12      	lsrs	r2, r2, #16
 8011696:	fa13 f38e 	uxtah	r3, r3, lr
 801169a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801169e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116a8:	45c1      	cmp	r9, r8
 80116aa:	f840 3b04 	str.w	r3, [r0], #4
 80116ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80116b2:	d2e8      	bcs.n	8011686 <quorem+0xb0>
 80116b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116bc:	b922      	cbnz	r2, 80116c8 <quorem+0xf2>
 80116be:	3b04      	subs	r3, #4
 80116c0:	429d      	cmp	r5, r3
 80116c2:	461a      	mov	r2, r3
 80116c4:	d30a      	bcc.n	80116dc <quorem+0x106>
 80116c6:	613c      	str	r4, [r7, #16]
 80116c8:	4630      	mov	r0, r6
 80116ca:	b003      	add	sp, #12
 80116cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	3b04      	subs	r3, #4
 80116d4:	2a00      	cmp	r2, #0
 80116d6:	d1cc      	bne.n	8011672 <quorem+0x9c>
 80116d8:	3c01      	subs	r4, #1
 80116da:	e7c7      	b.n	801166c <quorem+0x96>
 80116dc:	6812      	ldr	r2, [r2, #0]
 80116de:	3b04      	subs	r3, #4
 80116e0:	2a00      	cmp	r2, #0
 80116e2:	d1f0      	bne.n	80116c6 <quorem+0xf0>
 80116e4:	3c01      	subs	r4, #1
 80116e6:	e7eb      	b.n	80116c0 <quorem+0xea>
 80116e8:	2000      	movs	r0, #0
 80116ea:	e7ee      	b.n	80116ca <quorem+0xf4>
 80116ec:	0000      	movs	r0, r0
	...

080116f0 <_dtoa_r>:
 80116f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f4:	ed2d 8b04 	vpush	{d8-d9}
 80116f8:	ec57 6b10 	vmov	r6, r7, d0
 80116fc:	b093      	sub	sp, #76	; 0x4c
 80116fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011700:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011704:	9106      	str	r1, [sp, #24]
 8011706:	ee10 aa10 	vmov	sl, s0
 801170a:	4604      	mov	r4, r0
 801170c:	9209      	str	r2, [sp, #36]	; 0x24
 801170e:	930c      	str	r3, [sp, #48]	; 0x30
 8011710:	46bb      	mov	fp, r7
 8011712:	b975      	cbnz	r5, 8011732 <_dtoa_r+0x42>
 8011714:	2010      	movs	r0, #16
 8011716:	f001 fb6b 	bl	8012df0 <malloc>
 801171a:	4602      	mov	r2, r0
 801171c:	6260      	str	r0, [r4, #36]	; 0x24
 801171e:	b920      	cbnz	r0, 801172a <_dtoa_r+0x3a>
 8011720:	4ba7      	ldr	r3, [pc, #668]	; (80119c0 <_dtoa_r+0x2d0>)
 8011722:	21ea      	movs	r1, #234	; 0xea
 8011724:	48a7      	ldr	r0, [pc, #668]	; (80119c4 <_dtoa_r+0x2d4>)
 8011726:	f7fd ff03 	bl	800f530 <__assert_func>
 801172a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801172e:	6005      	str	r5, [r0, #0]
 8011730:	60c5      	str	r5, [r0, #12]
 8011732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011734:	6819      	ldr	r1, [r3, #0]
 8011736:	b151      	cbz	r1, 801174e <_dtoa_r+0x5e>
 8011738:	685a      	ldr	r2, [r3, #4]
 801173a:	604a      	str	r2, [r1, #4]
 801173c:	2301      	movs	r3, #1
 801173e:	4093      	lsls	r3, r2
 8011740:	608b      	str	r3, [r1, #8]
 8011742:	4620      	mov	r0, r4
 8011744:	f001 fbc8 	bl	8012ed8 <_Bfree>
 8011748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801174a:	2200      	movs	r2, #0
 801174c:	601a      	str	r2, [r3, #0]
 801174e:	1e3b      	subs	r3, r7, #0
 8011750:	bfaa      	itet	ge
 8011752:	2300      	movge	r3, #0
 8011754:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011758:	f8c8 3000 	strge.w	r3, [r8]
 801175c:	4b9a      	ldr	r3, [pc, #616]	; (80119c8 <_dtoa_r+0x2d8>)
 801175e:	bfbc      	itt	lt
 8011760:	2201      	movlt	r2, #1
 8011762:	f8c8 2000 	strlt.w	r2, [r8]
 8011766:	ea33 030b 	bics.w	r3, r3, fp
 801176a:	d11b      	bne.n	80117a4 <_dtoa_r+0xb4>
 801176c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801176e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011778:	4333      	orrs	r3, r6
 801177a:	f000 8592 	beq.w	80122a2 <_dtoa_r+0xbb2>
 801177e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011780:	b963      	cbnz	r3, 801179c <_dtoa_r+0xac>
 8011782:	4b92      	ldr	r3, [pc, #584]	; (80119cc <_dtoa_r+0x2dc>)
 8011784:	e022      	b.n	80117cc <_dtoa_r+0xdc>
 8011786:	4b92      	ldr	r3, [pc, #584]	; (80119d0 <_dtoa_r+0x2e0>)
 8011788:	9301      	str	r3, [sp, #4]
 801178a:	3308      	adds	r3, #8
 801178c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801178e:	6013      	str	r3, [r2, #0]
 8011790:	9801      	ldr	r0, [sp, #4]
 8011792:	b013      	add	sp, #76	; 0x4c
 8011794:	ecbd 8b04 	vpop	{d8-d9}
 8011798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179c:	4b8b      	ldr	r3, [pc, #556]	; (80119cc <_dtoa_r+0x2dc>)
 801179e:	9301      	str	r3, [sp, #4]
 80117a0:	3303      	adds	r3, #3
 80117a2:	e7f3      	b.n	801178c <_dtoa_r+0x9c>
 80117a4:	2200      	movs	r2, #0
 80117a6:	2300      	movs	r3, #0
 80117a8:	4650      	mov	r0, sl
 80117aa:	4659      	mov	r1, fp
 80117ac:	f7ef f9b4 	bl	8000b18 <__aeabi_dcmpeq>
 80117b0:	ec4b ab19 	vmov	d9, sl, fp
 80117b4:	4680      	mov	r8, r0
 80117b6:	b158      	cbz	r0, 80117d0 <_dtoa_r+0xe0>
 80117b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117ba:	2301      	movs	r3, #1
 80117bc:	6013      	str	r3, [r2, #0]
 80117be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 856b 	beq.w	801229c <_dtoa_r+0xbac>
 80117c6:	4883      	ldr	r0, [pc, #524]	; (80119d4 <_dtoa_r+0x2e4>)
 80117c8:	6018      	str	r0, [r3, #0]
 80117ca:	1e43      	subs	r3, r0, #1
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	e7df      	b.n	8011790 <_dtoa_r+0xa0>
 80117d0:	ec4b ab10 	vmov	d0, sl, fp
 80117d4:	aa10      	add	r2, sp, #64	; 0x40
 80117d6:	a911      	add	r1, sp, #68	; 0x44
 80117d8:	4620      	mov	r0, r4
 80117da:	f001 ff2b 	bl	8013634 <__d2b>
 80117de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80117e2:	ee08 0a10 	vmov	s16, r0
 80117e6:	2d00      	cmp	r5, #0
 80117e8:	f000 8084 	beq.w	80118f4 <_dtoa_r+0x204>
 80117ec:	ee19 3a90 	vmov	r3, s19
 80117f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80117f8:	4656      	mov	r6, sl
 80117fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80117fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011802:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011806:	4b74      	ldr	r3, [pc, #464]	; (80119d8 <_dtoa_r+0x2e8>)
 8011808:	2200      	movs	r2, #0
 801180a:	4630      	mov	r0, r6
 801180c:	4639      	mov	r1, r7
 801180e:	f7ee fd63 	bl	80002d8 <__aeabi_dsub>
 8011812:	a365      	add	r3, pc, #404	; (adr r3, 80119a8 <_dtoa_r+0x2b8>)
 8011814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011818:	f7ee ff16 	bl	8000648 <__aeabi_dmul>
 801181c:	a364      	add	r3, pc, #400	; (adr r3, 80119b0 <_dtoa_r+0x2c0>)
 801181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011822:	f7ee fd5b 	bl	80002dc <__adddf3>
 8011826:	4606      	mov	r6, r0
 8011828:	4628      	mov	r0, r5
 801182a:	460f      	mov	r7, r1
 801182c:	f7ee fea2 	bl	8000574 <__aeabi_i2d>
 8011830:	a361      	add	r3, pc, #388	; (adr r3, 80119b8 <_dtoa_r+0x2c8>)
 8011832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011836:	f7ee ff07 	bl	8000648 <__aeabi_dmul>
 801183a:	4602      	mov	r2, r0
 801183c:	460b      	mov	r3, r1
 801183e:	4630      	mov	r0, r6
 8011840:	4639      	mov	r1, r7
 8011842:	f7ee fd4b 	bl	80002dc <__adddf3>
 8011846:	4606      	mov	r6, r0
 8011848:	460f      	mov	r7, r1
 801184a:	f7ef f9ad 	bl	8000ba8 <__aeabi_d2iz>
 801184e:	2200      	movs	r2, #0
 8011850:	9000      	str	r0, [sp, #0]
 8011852:	2300      	movs	r3, #0
 8011854:	4630      	mov	r0, r6
 8011856:	4639      	mov	r1, r7
 8011858:	f7ef f968 	bl	8000b2c <__aeabi_dcmplt>
 801185c:	b150      	cbz	r0, 8011874 <_dtoa_r+0x184>
 801185e:	9800      	ldr	r0, [sp, #0]
 8011860:	f7ee fe88 	bl	8000574 <__aeabi_i2d>
 8011864:	4632      	mov	r2, r6
 8011866:	463b      	mov	r3, r7
 8011868:	f7ef f956 	bl	8000b18 <__aeabi_dcmpeq>
 801186c:	b910      	cbnz	r0, 8011874 <_dtoa_r+0x184>
 801186e:	9b00      	ldr	r3, [sp, #0]
 8011870:	3b01      	subs	r3, #1
 8011872:	9300      	str	r3, [sp, #0]
 8011874:	9b00      	ldr	r3, [sp, #0]
 8011876:	2b16      	cmp	r3, #22
 8011878:	d85a      	bhi.n	8011930 <_dtoa_r+0x240>
 801187a:	9a00      	ldr	r2, [sp, #0]
 801187c:	4b57      	ldr	r3, [pc, #348]	; (80119dc <_dtoa_r+0x2ec>)
 801187e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011886:	ec51 0b19 	vmov	r0, r1, d9
 801188a:	f7ef f94f 	bl	8000b2c <__aeabi_dcmplt>
 801188e:	2800      	cmp	r0, #0
 8011890:	d050      	beq.n	8011934 <_dtoa_r+0x244>
 8011892:	9b00      	ldr	r3, [sp, #0]
 8011894:	3b01      	subs	r3, #1
 8011896:	9300      	str	r3, [sp, #0]
 8011898:	2300      	movs	r3, #0
 801189a:	930b      	str	r3, [sp, #44]	; 0x2c
 801189c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801189e:	1b5d      	subs	r5, r3, r5
 80118a0:	1e6b      	subs	r3, r5, #1
 80118a2:	9305      	str	r3, [sp, #20]
 80118a4:	bf45      	ittet	mi
 80118a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80118aa:	9304      	strmi	r3, [sp, #16]
 80118ac:	2300      	movpl	r3, #0
 80118ae:	2300      	movmi	r3, #0
 80118b0:	bf4c      	ite	mi
 80118b2:	9305      	strmi	r3, [sp, #20]
 80118b4:	9304      	strpl	r3, [sp, #16]
 80118b6:	9b00      	ldr	r3, [sp, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	db3d      	blt.n	8011938 <_dtoa_r+0x248>
 80118bc:	9b05      	ldr	r3, [sp, #20]
 80118be:	9a00      	ldr	r2, [sp, #0]
 80118c0:	920a      	str	r2, [sp, #40]	; 0x28
 80118c2:	4413      	add	r3, r2
 80118c4:	9305      	str	r3, [sp, #20]
 80118c6:	2300      	movs	r3, #0
 80118c8:	9307      	str	r3, [sp, #28]
 80118ca:	9b06      	ldr	r3, [sp, #24]
 80118cc:	2b09      	cmp	r3, #9
 80118ce:	f200 8089 	bhi.w	80119e4 <_dtoa_r+0x2f4>
 80118d2:	2b05      	cmp	r3, #5
 80118d4:	bfc4      	itt	gt
 80118d6:	3b04      	subgt	r3, #4
 80118d8:	9306      	strgt	r3, [sp, #24]
 80118da:	9b06      	ldr	r3, [sp, #24]
 80118dc:	f1a3 0302 	sub.w	r3, r3, #2
 80118e0:	bfcc      	ite	gt
 80118e2:	2500      	movgt	r5, #0
 80118e4:	2501      	movle	r5, #1
 80118e6:	2b03      	cmp	r3, #3
 80118e8:	f200 8087 	bhi.w	80119fa <_dtoa_r+0x30a>
 80118ec:	e8df f003 	tbb	[pc, r3]
 80118f0:	59383a2d 	.word	0x59383a2d
 80118f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80118f8:	441d      	add	r5, r3
 80118fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80118fe:	2b20      	cmp	r3, #32
 8011900:	bfc1      	itttt	gt
 8011902:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011906:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801190a:	fa0b f303 	lslgt.w	r3, fp, r3
 801190e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011912:	bfda      	itte	le
 8011914:	f1c3 0320 	rsble	r3, r3, #32
 8011918:	fa06 f003 	lslle.w	r0, r6, r3
 801191c:	4318      	orrgt	r0, r3
 801191e:	f7ee fe19 	bl	8000554 <__aeabi_ui2d>
 8011922:	2301      	movs	r3, #1
 8011924:	4606      	mov	r6, r0
 8011926:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801192a:	3d01      	subs	r5, #1
 801192c:	930e      	str	r3, [sp, #56]	; 0x38
 801192e:	e76a      	b.n	8011806 <_dtoa_r+0x116>
 8011930:	2301      	movs	r3, #1
 8011932:	e7b2      	b.n	801189a <_dtoa_r+0x1aa>
 8011934:	900b      	str	r0, [sp, #44]	; 0x2c
 8011936:	e7b1      	b.n	801189c <_dtoa_r+0x1ac>
 8011938:	9b04      	ldr	r3, [sp, #16]
 801193a:	9a00      	ldr	r2, [sp, #0]
 801193c:	1a9b      	subs	r3, r3, r2
 801193e:	9304      	str	r3, [sp, #16]
 8011940:	4253      	negs	r3, r2
 8011942:	9307      	str	r3, [sp, #28]
 8011944:	2300      	movs	r3, #0
 8011946:	930a      	str	r3, [sp, #40]	; 0x28
 8011948:	e7bf      	b.n	80118ca <_dtoa_r+0x1da>
 801194a:	2300      	movs	r3, #0
 801194c:	9308      	str	r3, [sp, #32]
 801194e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011950:	2b00      	cmp	r3, #0
 8011952:	dc55      	bgt.n	8011a00 <_dtoa_r+0x310>
 8011954:	2301      	movs	r3, #1
 8011956:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801195a:	461a      	mov	r2, r3
 801195c:	9209      	str	r2, [sp, #36]	; 0x24
 801195e:	e00c      	b.n	801197a <_dtoa_r+0x28a>
 8011960:	2301      	movs	r3, #1
 8011962:	e7f3      	b.n	801194c <_dtoa_r+0x25c>
 8011964:	2300      	movs	r3, #0
 8011966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011968:	9308      	str	r3, [sp, #32]
 801196a:	9b00      	ldr	r3, [sp, #0]
 801196c:	4413      	add	r3, r2
 801196e:	9302      	str	r3, [sp, #8]
 8011970:	3301      	adds	r3, #1
 8011972:	2b01      	cmp	r3, #1
 8011974:	9303      	str	r3, [sp, #12]
 8011976:	bfb8      	it	lt
 8011978:	2301      	movlt	r3, #1
 801197a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801197c:	2200      	movs	r2, #0
 801197e:	6042      	str	r2, [r0, #4]
 8011980:	2204      	movs	r2, #4
 8011982:	f102 0614 	add.w	r6, r2, #20
 8011986:	429e      	cmp	r6, r3
 8011988:	6841      	ldr	r1, [r0, #4]
 801198a:	d93d      	bls.n	8011a08 <_dtoa_r+0x318>
 801198c:	4620      	mov	r0, r4
 801198e:	f001 fa63 	bl	8012e58 <_Balloc>
 8011992:	9001      	str	r0, [sp, #4]
 8011994:	2800      	cmp	r0, #0
 8011996:	d13b      	bne.n	8011a10 <_dtoa_r+0x320>
 8011998:	4b11      	ldr	r3, [pc, #68]	; (80119e0 <_dtoa_r+0x2f0>)
 801199a:	4602      	mov	r2, r0
 801199c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80119a0:	e6c0      	b.n	8011724 <_dtoa_r+0x34>
 80119a2:	2301      	movs	r3, #1
 80119a4:	e7df      	b.n	8011966 <_dtoa_r+0x276>
 80119a6:	bf00      	nop
 80119a8:	636f4361 	.word	0x636f4361
 80119ac:	3fd287a7 	.word	0x3fd287a7
 80119b0:	8b60c8b3 	.word	0x8b60c8b3
 80119b4:	3fc68a28 	.word	0x3fc68a28
 80119b8:	509f79fb 	.word	0x509f79fb
 80119bc:	3fd34413 	.word	0x3fd34413
 80119c0:	0802ac8e 	.word	0x0802ac8e
 80119c4:	0802aca5 	.word	0x0802aca5
 80119c8:	7ff00000 	.word	0x7ff00000
 80119cc:	0802ac8a 	.word	0x0802ac8a
 80119d0:	0802ac81 	.word	0x0802ac81
 80119d4:	0802ab06 	.word	0x0802ab06
 80119d8:	3ff80000 	.word	0x3ff80000
 80119dc:	0802aed8 	.word	0x0802aed8
 80119e0:	0802ad23 	.word	0x0802ad23
 80119e4:	2501      	movs	r5, #1
 80119e6:	2300      	movs	r3, #0
 80119e8:	9306      	str	r3, [sp, #24]
 80119ea:	9508      	str	r5, [sp, #32]
 80119ec:	f04f 33ff 	mov.w	r3, #4294967295
 80119f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80119f4:	2200      	movs	r2, #0
 80119f6:	2312      	movs	r3, #18
 80119f8:	e7b0      	b.n	801195c <_dtoa_r+0x26c>
 80119fa:	2301      	movs	r3, #1
 80119fc:	9308      	str	r3, [sp, #32]
 80119fe:	e7f5      	b.n	80119ec <_dtoa_r+0x2fc>
 8011a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011a06:	e7b8      	b.n	801197a <_dtoa_r+0x28a>
 8011a08:	3101      	adds	r1, #1
 8011a0a:	6041      	str	r1, [r0, #4]
 8011a0c:	0052      	lsls	r2, r2, #1
 8011a0e:	e7b8      	b.n	8011982 <_dtoa_r+0x292>
 8011a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a12:	9a01      	ldr	r2, [sp, #4]
 8011a14:	601a      	str	r2, [r3, #0]
 8011a16:	9b03      	ldr	r3, [sp, #12]
 8011a18:	2b0e      	cmp	r3, #14
 8011a1a:	f200 809d 	bhi.w	8011b58 <_dtoa_r+0x468>
 8011a1e:	2d00      	cmp	r5, #0
 8011a20:	f000 809a 	beq.w	8011b58 <_dtoa_r+0x468>
 8011a24:	9b00      	ldr	r3, [sp, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	dd32      	ble.n	8011a90 <_dtoa_r+0x3a0>
 8011a2a:	4ab7      	ldr	r2, [pc, #732]	; (8011d08 <_dtoa_r+0x618>)
 8011a2c:	f003 030f 	and.w	r3, r3, #15
 8011a30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a38:	9b00      	ldr	r3, [sp, #0]
 8011a3a:	05d8      	lsls	r0, r3, #23
 8011a3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011a40:	d516      	bpl.n	8011a70 <_dtoa_r+0x380>
 8011a42:	4bb2      	ldr	r3, [pc, #712]	; (8011d0c <_dtoa_r+0x61c>)
 8011a44:	ec51 0b19 	vmov	r0, r1, d9
 8011a48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011a4c:	f7ee ff26 	bl	800089c <__aeabi_ddiv>
 8011a50:	f007 070f 	and.w	r7, r7, #15
 8011a54:	4682      	mov	sl, r0
 8011a56:	468b      	mov	fp, r1
 8011a58:	2503      	movs	r5, #3
 8011a5a:	4eac      	ldr	r6, [pc, #688]	; (8011d0c <_dtoa_r+0x61c>)
 8011a5c:	b957      	cbnz	r7, 8011a74 <_dtoa_r+0x384>
 8011a5e:	4642      	mov	r2, r8
 8011a60:	464b      	mov	r3, r9
 8011a62:	4650      	mov	r0, sl
 8011a64:	4659      	mov	r1, fp
 8011a66:	f7ee ff19 	bl	800089c <__aeabi_ddiv>
 8011a6a:	4682      	mov	sl, r0
 8011a6c:	468b      	mov	fp, r1
 8011a6e:	e028      	b.n	8011ac2 <_dtoa_r+0x3d2>
 8011a70:	2502      	movs	r5, #2
 8011a72:	e7f2      	b.n	8011a5a <_dtoa_r+0x36a>
 8011a74:	07f9      	lsls	r1, r7, #31
 8011a76:	d508      	bpl.n	8011a8a <_dtoa_r+0x39a>
 8011a78:	4640      	mov	r0, r8
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011a80:	f7ee fde2 	bl	8000648 <__aeabi_dmul>
 8011a84:	3501      	adds	r5, #1
 8011a86:	4680      	mov	r8, r0
 8011a88:	4689      	mov	r9, r1
 8011a8a:	107f      	asrs	r7, r7, #1
 8011a8c:	3608      	adds	r6, #8
 8011a8e:	e7e5      	b.n	8011a5c <_dtoa_r+0x36c>
 8011a90:	f000 809b 	beq.w	8011bca <_dtoa_r+0x4da>
 8011a94:	9b00      	ldr	r3, [sp, #0]
 8011a96:	4f9d      	ldr	r7, [pc, #628]	; (8011d0c <_dtoa_r+0x61c>)
 8011a98:	425e      	negs	r6, r3
 8011a9a:	4b9b      	ldr	r3, [pc, #620]	; (8011d08 <_dtoa_r+0x618>)
 8011a9c:	f006 020f 	and.w	r2, r6, #15
 8011aa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa8:	ec51 0b19 	vmov	r0, r1, d9
 8011aac:	f7ee fdcc 	bl	8000648 <__aeabi_dmul>
 8011ab0:	1136      	asrs	r6, r6, #4
 8011ab2:	4682      	mov	sl, r0
 8011ab4:	468b      	mov	fp, r1
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	2502      	movs	r5, #2
 8011aba:	2e00      	cmp	r6, #0
 8011abc:	d17a      	bne.n	8011bb4 <_dtoa_r+0x4c4>
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1d3      	bne.n	8011a6a <_dtoa_r+0x37a>
 8011ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f000 8082 	beq.w	8011bce <_dtoa_r+0x4de>
 8011aca:	4b91      	ldr	r3, [pc, #580]	; (8011d10 <_dtoa_r+0x620>)
 8011acc:	2200      	movs	r2, #0
 8011ace:	4650      	mov	r0, sl
 8011ad0:	4659      	mov	r1, fp
 8011ad2:	f7ef f82b 	bl	8000b2c <__aeabi_dcmplt>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d079      	beq.n	8011bce <_dtoa_r+0x4de>
 8011ada:	9b03      	ldr	r3, [sp, #12]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d076      	beq.n	8011bce <_dtoa_r+0x4de>
 8011ae0:	9b02      	ldr	r3, [sp, #8]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	dd36      	ble.n	8011b54 <_dtoa_r+0x464>
 8011ae6:	9b00      	ldr	r3, [sp, #0]
 8011ae8:	4650      	mov	r0, sl
 8011aea:	4659      	mov	r1, fp
 8011aec:	1e5f      	subs	r7, r3, #1
 8011aee:	2200      	movs	r2, #0
 8011af0:	4b88      	ldr	r3, [pc, #544]	; (8011d14 <_dtoa_r+0x624>)
 8011af2:	f7ee fda9 	bl	8000648 <__aeabi_dmul>
 8011af6:	9e02      	ldr	r6, [sp, #8]
 8011af8:	4682      	mov	sl, r0
 8011afa:	468b      	mov	fp, r1
 8011afc:	3501      	adds	r5, #1
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7ee fd38 	bl	8000574 <__aeabi_i2d>
 8011b04:	4652      	mov	r2, sl
 8011b06:	465b      	mov	r3, fp
 8011b08:	f7ee fd9e 	bl	8000648 <__aeabi_dmul>
 8011b0c:	4b82      	ldr	r3, [pc, #520]	; (8011d18 <_dtoa_r+0x628>)
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f7ee fbe4 	bl	80002dc <__adddf3>
 8011b14:	46d0      	mov	r8, sl
 8011b16:	46d9      	mov	r9, fp
 8011b18:	4682      	mov	sl, r0
 8011b1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011b1e:	2e00      	cmp	r6, #0
 8011b20:	d158      	bne.n	8011bd4 <_dtoa_r+0x4e4>
 8011b22:	4b7e      	ldr	r3, [pc, #504]	; (8011d1c <_dtoa_r+0x62c>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	4640      	mov	r0, r8
 8011b28:	4649      	mov	r1, r9
 8011b2a:	f7ee fbd5 	bl	80002d8 <__aeabi_dsub>
 8011b2e:	4652      	mov	r2, sl
 8011b30:	465b      	mov	r3, fp
 8011b32:	4680      	mov	r8, r0
 8011b34:	4689      	mov	r9, r1
 8011b36:	f7ef f817 	bl	8000b68 <__aeabi_dcmpgt>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	f040 8295 	bne.w	801206a <_dtoa_r+0x97a>
 8011b40:	4652      	mov	r2, sl
 8011b42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011b46:	4640      	mov	r0, r8
 8011b48:	4649      	mov	r1, r9
 8011b4a:	f7ee ffef 	bl	8000b2c <__aeabi_dcmplt>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	f040 8289 	bne.w	8012066 <_dtoa_r+0x976>
 8011b54:	ec5b ab19 	vmov	sl, fp, d9
 8011b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f2c0 8148 	blt.w	8011df0 <_dtoa_r+0x700>
 8011b60:	9a00      	ldr	r2, [sp, #0]
 8011b62:	2a0e      	cmp	r2, #14
 8011b64:	f300 8144 	bgt.w	8011df0 <_dtoa_r+0x700>
 8011b68:	4b67      	ldr	r3, [pc, #412]	; (8011d08 <_dtoa_r+0x618>)
 8011b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f280 80d5 	bge.w	8011d24 <_dtoa_r+0x634>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f300 80d1 	bgt.w	8011d24 <_dtoa_r+0x634>
 8011b82:	f040 826f 	bne.w	8012064 <_dtoa_r+0x974>
 8011b86:	4b65      	ldr	r3, [pc, #404]	; (8011d1c <_dtoa_r+0x62c>)
 8011b88:	2200      	movs	r2, #0
 8011b8a:	4640      	mov	r0, r8
 8011b8c:	4649      	mov	r1, r9
 8011b8e:	f7ee fd5b 	bl	8000648 <__aeabi_dmul>
 8011b92:	4652      	mov	r2, sl
 8011b94:	465b      	mov	r3, fp
 8011b96:	f7ee ffdd 	bl	8000b54 <__aeabi_dcmpge>
 8011b9a:	9e03      	ldr	r6, [sp, #12]
 8011b9c:	4637      	mov	r7, r6
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	f040 8245 	bne.w	801202e <_dtoa_r+0x93e>
 8011ba4:	9d01      	ldr	r5, [sp, #4]
 8011ba6:	2331      	movs	r3, #49	; 0x31
 8011ba8:	f805 3b01 	strb.w	r3, [r5], #1
 8011bac:	9b00      	ldr	r3, [sp, #0]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	e240      	b.n	8012036 <_dtoa_r+0x946>
 8011bb4:	07f2      	lsls	r2, r6, #31
 8011bb6:	d505      	bpl.n	8011bc4 <_dtoa_r+0x4d4>
 8011bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011bbc:	f7ee fd44 	bl	8000648 <__aeabi_dmul>
 8011bc0:	3501      	adds	r5, #1
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	1076      	asrs	r6, r6, #1
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	e777      	b.n	8011aba <_dtoa_r+0x3ca>
 8011bca:	2502      	movs	r5, #2
 8011bcc:	e779      	b.n	8011ac2 <_dtoa_r+0x3d2>
 8011bce:	9f00      	ldr	r7, [sp, #0]
 8011bd0:	9e03      	ldr	r6, [sp, #12]
 8011bd2:	e794      	b.n	8011afe <_dtoa_r+0x40e>
 8011bd4:	9901      	ldr	r1, [sp, #4]
 8011bd6:	4b4c      	ldr	r3, [pc, #304]	; (8011d08 <_dtoa_r+0x618>)
 8011bd8:	4431      	add	r1, r6
 8011bda:	910d      	str	r1, [sp, #52]	; 0x34
 8011bdc:	9908      	ldr	r1, [sp, #32]
 8011bde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011be2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011be6:	2900      	cmp	r1, #0
 8011be8:	d043      	beq.n	8011c72 <_dtoa_r+0x582>
 8011bea:	494d      	ldr	r1, [pc, #308]	; (8011d20 <_dtoa_r+0x630>)
 8011bec:	2000      	movs	r0, #0
 8011bee:	f7ee fe55 	bl	800089c <__aeabi_ddiv>
 8011bf2:	4652      	mov	r2, sl
 8011bf4:	465b      	mov	r3, fp
 8011bf6:	f7ee fb6f 	bl	80002d8 <__aeabi_dsub>
 8011bfa:	9d01      	ldr	r5, [sp, #4]
 8011bfc:	4682      	mov	sl, r0
 8011bfe:	468b      	mov	fp, r1
 8011c00:	4649      	mov	r1, r9
 8011c02:	4640      	mov	r0, r8
 8011c04:	f7ee ffd0 	bl	8000ba8 <__aeabi_d2iz>
 8011c08:	4606      	mov	r6, r0
 8011c0a:	f7ee fcb3 	bl	8000574 <__aeabi_i2d>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	4640      	mov	r0, r8
 8011c14:	4649      	mov	r1, r9
 8011c16:	f7ee fb5f 	bl	80002d8 <__aeabi_dsub>
 8011c1a:	3630      	adds	r6, #48	; 0x30
 8011c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8011c20:	4652      	mov	r2, sl
 8011c22:	465b      	mov	r3, fp
 8011c24:	4680      	mov	r8, r0
 8011c26:	4689      	mov	r9, r1
 8011c28:	f7ee ff80 	bl	8000b2c <__aeabi_dcmplt>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d163      	bne.n	8011cf8 <_dtoa_r+0x608>
 8011c30:	4642      	mov	r2, r8
 8011c32:	464b      	mov	r3, r9
 8011c34:	4936      	ldr	r1, [pc, #216]	; (8011d10 <_dtoa_r+0x620>)
 8011c36:	2000      	movs	r0, #0
 8011c38:	f7ee fb4e 	bl	80002d8 <__aeabi_dsub>
 8011c3c:	4652      	mov	r2, sl
 8011c3e:	465b      	mov	r3, fp
 8011c40:	f7ee ff74 	bl	8000b2c <__aeabi_dcmplt>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	f040 80b5 	bne.w	8011db4 <_dtoa_r+0x6c4>
 8011c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c4c:	429d      	cmp	r5, r3
 8011c4e:	d081      	beq.n	8011b54 <_dtoa_r+0x464>
 8011c50:	4b30      	ldr	r3, [pc, #192]	; (8011d14 <_dtoa_r+0x624>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	4650      	mov	r0, sl
 8011c56:	4659      	mov	r1, fp
 8011c58:	f7ee fcf6 	bl	8000648 <__aeabi_dmul>
 8011c5c:	4b2d      	ldr	r3, [pc, #180]	; (8011d14 <_dtoa_r+0x624>)
 8011c5e:	4682      	mov	sl, r0
 8011c60:	468b      	mov	fp, r1
 8011c62:	4640      	mov	r0, r8
 8011c64:	4649      	mov	r1, r9
 8011c66:	2200      	movs	r2, #0
 8011c68:	f7ee fcee 	bl	8000648 <__aeabi_dmul>
 8011c6c:	4680      	mov	r8, r0
 8011c6e:	4689      	mov	r9, r1
 8011c70:	e7c6      	b.n	8011c00 <_dtoa_r+0x510>
 8011c72:	4650      	mov	r0, sl
 8011c74:	4659      	mov	r1, fp
 8011c76:	f7ee fce7 	bl	8000648 <__aeabi_dmul>
 8011c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c7c:	9d01      	ldr	r5, [sp, #4]
 8011c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c80:	4682      	mov	sl, r0
 8011c82:	468b      	mov	fp, r1
 8011c84:	4649      	mov	r1, r9
 8011c86:	4640      	mov	r0, r8
 8011c88:	f7ee ff8e 	bl	8000ba8 <__aeabi_d2iz>
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	f7ee fc71 	bl	8000574 <__aeabi_i2d>
 8011c92:	3630      	adds	r6, #48	; 0x30
 8011c94:	4602      	mov	r2, r0
 8011c96:	460b      	mov	r3, r1
 8011c98:	4640      	mov	r0, r8
 8011c9a:	4649      	mov	r1, r9
 8011c9c:	f7ee fb1c 	bl	80002d8 <__aeabi_dsub>
 8011ca0:	f805 6b01 	strb.w	r6, [r5], #1
 8011ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ca6:	429d      	cmp	r5, r3
 8011ca8:	4680      	mov	r8, r0
 8011caa:	4689      	mov	r9, r1
 8011cac:	f04f 0200 	mov.w	r2, #0
 8011cb0:	d124      	bne.n	8011cfc <_dtoa_r+0x60c>
 8011cb2:	4b1b      	ldr	r3, [pc, #108]	; (8011d20 <_dtoa_r+0x630>)
 8011cb4:	4650      	mov	r0, sl
 8011cb6:	4659      	mov	r1, fp
 8011cb8:	f7ee fb10 	bl	80002dc <__adddf3>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	4649      	mov	r1, r9
 8011cc4:	f7ee ff50 	bl	8000b68 <__aeabi_dcmpgt>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	d173      	bne.n	8011db4 <_dtoa_r+0x6c4>
 8011ccc:	4652      	mov	r2, sl
 8011cce:	465b      	mov	r3, fp
 8011cd0:	4913      	ldr	r1, [pc, #76]	; (8011d20 <_dtoa_r+0x630>)
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	f7ee fb00 	bl	80002d8 <__aeabi_dsub>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	460b      	mov	r3, r1
 8011cdc:	4640      	mov	r0, r8
 8011cde:	4649      	mov	r1, r9
 8011ce0:	f7ee ff24 	bl	8000b2c <__aeabi_dcmplt>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	f43f af35 	beq.w	8011b54 <_dtoa_r+0x464>
 8011cea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011cec:	1e6b      	subs	r3, r5, #1
 8011cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011cf4:	2b30      	cmp	r3, #48	; 0x30
 8011cf6:	d0f8      	beq.n	8011cea <_dtoa_r+0x5fa>
 8011cf8:	9700      	str	r7, [sp, #0]
 8011cfa:	e049      	b.n	8011d90 <_dtoa_r+0x6a0>
 8011cfc:	4b05      	ldr	r3, [pc, #20]	; (8011d14 <_dtoa_r+0x624>)
 8011cfe:	f7ee fca3 	bl	8000648 <__aeabi_dmul>
 8011d02:	4680      	mov	r8, r0
 8011d04:	4689      	mov	r9, r1
 8011d06:	e7bd      	b.n	8011c84 <_dtoa_r+0x594>
 8011d08:	0802aed8 	.word	0x0802aed8
 8011d0c:	0802aeb0 	.word	0x0802aeb0
 8011d10:	3ff00000 	.word	0x3ff00000
 8011d14:	40240000 	.word	0x40240000
 8011d18:	401c0000 	.word	0x401c0000
 8011d1c:	40140000 	.word	0x40140000
 8011d20:	3fe00000 	.word	0x3fe00000
 8011d24:	9d01      	ldr	r5, [sp, #4]
 8011d26:	4656      	mov	r6, sl
 8011d28:	465f      	mov	r7, fp
 8011d2a:	4642      	mov	r2, r8
 8011d2c:	464b      	mov	r3, r9
 8011d2e:	4630      	mov	r0, r6
 8011d30:	4639      	mov	r1, r7
 8011d32:	f7ee fdb3 	bl	800089c <__aeabi_ddiv>
 8011d36:	f7ee ff37 	bl	8000ba8 <__aeabi_d2iz>
 8011d3a:	4682      	mov	sl, r0
 8011d3c:	f7ee fc1a 	bl	8000574 <__aeabi_i2d>
 8011d40:	4642      	mov	r2, r8
 8011d42:	464b      	mov	r3, r9
 8011d44:	f7ee fc80 	bl	8000648 <__aeabi_dmul>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	4639      	mov	r1, r7
 8011d50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011d54:	f7ee fac0 	bl	80002d8 <__aeabi_dsub>
 8011d58:	f805 6b01 	strb.w	r6, [r5], #1
 8011d5c:	9e01      	ldr	r6, [sp, #4]
 8011d5e:	9f03      	ldr	r7, [sp, #12]
 8011d60:	1bae      	subs	r6, r5, r6
 8011d62:	42b7      	cmp	r7, r6
 8011d64:	4602      	mov	r2, r0
 8011d66:	460b      	mov	r3, r1
 8011d68:	d135      	bne.n	8011dd6 <_dtoa_r+0x6e6>
 8011d6a:	f7ee fab7 	bl	80002dc <__adddf3>
 8011d6e:	4642      	mov	r2, r8
 8011d70:	464b      	mov	r3, r9
 8011d72:	4606      	mov	r6, r0
 8011d74:	460f      	mov	r7, r1
 8011d76:	f7ee fef7 	bl	8000b68 <__aeabi_dcmpgt>
 8011d7a:	b9d0      	cbnz	r0, 8011db2 <_dtoa_r+0x6c2>
 8011d7c:	4642      	mov	r2, r8
 8011d7e:	464b      	mov	r3, r9
 8011d80:	4630      	mov	r0, r6
 8011d82:	4639      	mov	r1, r7
 8011d84:	f7ee fec8 	bl	8000b18 <__aeabi_dcmpeq>
 8011d88:	b110      	cbz	r0, 8011d90 <_dtoa_r+0x6a0>
 8011d8a:	f01a 0f01 	tst.w	sl, #1
 8011d8e:	d110      	bne.n	8011db2 <_dtoa_r+0x6c2>
 8011d90:	4620      	mov	r0, r4
 8011d92:	ee18 1a10 	vmov	r1, s16
 8011d96:	f001 f89f 	bl	8012ed8 <_Bfree>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	9800      	ldr	r0, [sp, #0]
 8011d9e:	702b      	strb	r3, [r5, #0]
 8011da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011da2:	3001      	adds	r0, #1
 8011da4:	6018      	str	r0, [r3, #0]
 8011da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	f43f acf1 	beq.w	8011790 <_dtoa_r+0xa0>
 8011dae:	601d      	str	r5, [r3, #0]
 8011db0:	e4ee      	b.n	8011790 <_dtoa_r+0xa0>
 8011db2:	9f00      	ldr	r7, [sp, #0]
 8011db4:	462b      	mov	r3, r5
 8011db6:	461d      	mov	r5, r3
 8011db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011dbc:	2a39      	cmp	r2, #57	; 0x39
 8011dbe:	d106      	bne.n	8011dce <_dtoa_r+0x6de>
 8011dc0:	9a01      	ldr	r2, [sp, #4]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d1f7      	bne.n	8011db6 <_dtoa_r+0x6c6>
 8011dc6:	9901      	ldr	r1, [sp, #4]
 8011dc8:	2230      	movs	r2, #48	; 0x30
 8011dca:	3701      	adds	r7, #1
 8011dcc:	700a      	strb	r2, [r1, #0]
 8011dce:	781a      	ldrb	r2, [r3, #0]
 8011dd0:	3201      	adds	r2, #1
 8011dd2:	701a      	strb	r2, [r3, #0]
 8011dd4:	e790      	b.n	8011cf8 <_dtoa_r+0x608>
 8011dd6:	4ba6      	ldr	r3, [pc, #664]	; (8012070 <_dtoa_r+0x980>)
 8011dd8:	2200      	movs	r2, #0
 8011dda:	f7ee fc35 	bl	8000648 <__aeabi_dmul>
 8011dde:	2200      	movs	r2, #0
 8011de0:	2300      	movs	r3, #0
 8011de2:	4606      	mov	r6, r0
 8011de4:	460f      	mov	r7, r1
 8011de6:	f7ee fe97 	bl	8000b18 <__aeabi_dcmpeq>
 8011dea:	2800      	cmp	r0, #0
 8011dec:	d09d      	beq.n	8011d2a <_dtoa_r+0x63a>
 8011dee:	e7cf      	b.n	8011d90 <_dtoa_r+0x6a0>
 8011df0:	9a08      	ldr	r2, [sp, #32]
 8011df2:	2a00      	cmp	r2, #0
 8011df4:	f000 80d7 	beq.w	8011fa6 <_dtoa_r+0x8b6>
 8011df8:	9a06      	ldr	r2, [sp, #24]
 8011dfa:	2a01      	cmp	r2, #1
 8011dfc:	f300 80ba 	bgt.w	8011f74 <_dtoa_r+0x884>
 8011e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e02:	2a00      	cmp	r2, #0
 8011e04:	f000 80b2 	beq.w	8011f6c <_dtoa_r+0x87c>
 8011e08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011e0c:	9e07      	ldr	r6, [sp, #28]
 8011e0e:	9d04      	ldr	r5, [sp, #16]
 8011e10:	9a04      	ldr	r2, [sp, #16]
 8011e12:	441a      	add	r2, r3
 8011e14:	9204      	str	r2, [sp, #16]
 8011e16:	9a05      	ldr	r2, [sp, #20]
 8011e18:	2101      	movs	r1, #1
 8011e1a:	441a      	add	r2, r3
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	9205      	str	r2, [sp, #20]
 8011e20:	f001 f95c 	bl	80130dc <__i2b>
 8011e24:	4607      	mov	r7, r0
 8011e26:	2d00      	cmp	r5, #0
 8011e28:	dd0c      	ble.n	8011e44 <_dtoa_r+0x754>
 8011e2a:	9b05      	ldr	r3, [sp, #20]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	dd09      	ble.n	8011e44 <_dtoa_r+0x754>
 8011e30:	42ab      	cmp	r3, r5
 8011e32:	9a04      	ldr	r2, [sp, #16]
 8011e34:	bfa8      	it	ge
 8011e36:	462b      	movge	r3, r5
 8011e38:	1ad2      	subs	r2, r2, r3
 8011e3a:	9204      	str	r2, [sp, #16]
 8011e3c:	9a05      	ldr	r2, [sp, #20]
 8011e3e:	1aed      	subs	r5, r5, r3
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	9305      	str	r3, [sp, #20]
 8011e44:	9b07      	ldr	r3, [sp, #28]
 8011e46:	b31b      	cbz	r3, 8011e90 <_dtoa_r+0x7a0>
 8011e48:	9b08      	ldr	r3, [sp, #32]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f000 80af 	beq.w	8011fae <_dtoa_r+0x8be>
 8011e50:	2e00      	cmp	r6, #0
 8011e52:	dd13      	ble.n	8011e7c <_dtoa_r+0x78c>
 8011e54:	4639      	mov	r1, r7
 8011e56:	4632      	mov	r2, r6
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f001 f9ff 	bl	801325c <__pow5mult>
 8011e5e:	ee18 2a10 	vmov	r2, s16
 8011e62:	4601      	mov	r1, r0
 8011e64:	4607      	mov	r7, r0
 8011e66:	4620      	mov	r0, r4
 8011e68:	f001 f94e 	bl	8013108 <__multiply>
 8011e6c:	ee18 1a10 	vmov	r1, s16
 8011e70:	4680      	mov	r8, r0
 8011e72:	4620      	mov	r0, r4
 8011e74:	f001 f830 	bl	8012ed8 <_Bfree>
 8011e78:	ee08 8a10 	vmov	s16, r8
 8011e7c:	9b07      	ldr	r3, [sp, #28]
 8011e7e:	1b9a      	subs	r2, r3, r6
 8011e80:	d006      	beq.n	8011e90 <_dtoa_r+0x7a0>
 8011e82:	ee18 1a10 	vmov	r1, s16
 8011e86:	4620      	mov	r0, r4
 8011e88:	f001 f9e8 	bl	801325c <__pow5mult>
 8011e8c:	ee08 0a10 	vmov	s16, r0
 8011e90:	2101      	movs	r1, #1
 8011e92:	4620      	mov	r0, r4
 8011e94:	f001 f922 	bl	80130dc <__i2b>
 8011e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	f340 8088 	ble.w	8011fb2 <_dtoa_r+0x8c2>
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	4601      	mov	r1, r0
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f001 f9d8 	bl	801325c <__pow5mult>
 8011eac:	9b06      	ldr	r3, [sp, #24]
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	f340 8081 	ble.w	8011fb8 <_dtoa_r+0x8c8>
 8011eb6:	f04f 0800 	mov.w	r8, #0
 8011eba:	6933      	ldr	r3, [r6, #16]
 8011ebc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011ec0:	6918      	ldr	r0, [r3, #16]
 8011ec2:	f001 f8bb 	bl	801303c <__hi0bits>
 8011ec6:	f1c0 0020 	rsb	r0, r0, #32
 8011eca:	9b05      	ldr	r3, [sp, #20]
 8011ecc:	4418      	add	r0, r3
 8011ece:	f010 001f 	ands.w	r0, r0, #31
 8011ed2:	f000 8092 	beq.w	8011ffa <_dtoa_r+0x90a>
 8011ed6:	f1c0 0320 	rsb	r3, r0, #32
 8011eda:	2b04      	cmp	r3, #4
 8011edc:	f340 808a 	ble.w	8011ff4 <_dtoa_r+0x904>
 8011ee0:	f1c0 001c 	rsb	r0, r0, #28
 8011ee4:	9b04      	ldr	r3, [sp, #16]
 8011ee6:	4403      	add	r3, r0
 8011ee8:	9304      	str	r3, [sp, #16]
 8011eea:	9b05      	ldr	r3, [sp, #20]
 8011eec:	4403      	add	r3, r0
 8011eee:	4405      	add	r5, r0
 8011ef0:	9305      	str	r3, [sp, #20]
 8011ef2:	9b04      	ldr	r3, [sp, #16]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	dd07      	ble.n	8011f08 <_dtoa_r+0x818>
 8011ef8:	ee18 1a10 	vmov	r1, s16
 8011efc:	461a      	mov	r2, r3
 8011efe:	4620      	mov	r0, r4
 8011f00:	f001 fa06 	bl	8013310 <__lshift>
 8011f04:	ee08 0a10 	vmov	s16, r0
 8011f08:	9b05      	ldr	r3, [sp, #20]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	dd05      	ble.n	8011f1a <_dtoa_r+0x82a>
 8011f0e:	4631      	mov	r1, r6
 8011f10:	461a      	mov	r2, r3
 8011f12:	4620      	mov	r0, r4
 8011f14:	f001 f9fc 	bl	8013310 <__lshift>
 8011f18:	4606      	mov	r6, r0
 8011f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d06e      	beq.n	8011ffe <_dtoa_r+0x90e>
 8011f20:	ee18 0a10 	vmov	r0, s16
 8011f24:	4631      	mov	r1, r6
 8011f26:	f001 fa63 	bl	80133f0 <__mcmp>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	da67      	bge.n	8011ffe <_dtoa_r+0x90e>
 8011f2e:	9b00      	ldr	r3, [sp, #0]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	ee18 1a10 	vmov	r1, s16
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	220a      	movs	r2, #10
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f000 ffed 	bl	8012f1c <__multadd>
 8011f42:	9b08      	ldr	r3, [sp, #32]
 8011f44:	ee08 0a10 	vmov	s16, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f000 81b1 	beq.w	80122b0 <_dtoa_r+0xbc0>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	4639      	mov	r1, r7
 8011f52:	220a      	movs	r2, #10
 8011f54:	4620      	mov	r0, r4
 8011f56:	f000 ffe1 	bl	8012f1c <__multadd>
 8011f5a:	9b02      	ldr	r3, [sp, #8]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	4607      	mov	r7, r0
 8011f60:	f300 808e 	bgt.w	8012080 <_dtoa_r+0x990>
 8011f64:	9b06      	ldr	r3, [sp, #24]
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	dc51      	bgt.n	801200e <_dtoa_r+0x91e>
 8011f6a:	e089      	b.n	8012080 <_dtoa_r+0x990>
 8011f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011f72:	e74b      	b.n	8011e0c <_dtoa_r+0x71c>
 8011f74:	9b03      	ldr	r3, [sp, #12]
 8011f76:	1e5e      	subs	r6, r3, #1
 8011f78:	9b07      	ldr	r3, [sp, #28]
 8011f7a:	42b3      	cmp	r3, r6
 8011f7c:	bfbf      	itttt	lt
 8011f7e:	9b07      	ldrlt	r3, [sp, #28]
 8011f80:	9607      	strlt	r6, [sp, #28]
 8011f82:	1af2      	sublt	r2, r6, r3
 8011f84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011f86:	bfb6      	itet	lt
 8011f88:	189b      	addlt	r3, r3, r2
 8011f8a:	1b9e      	subge	r6, r3, r6
 8011f8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011f8e:	9b03      	ldr	r3, [sp, #12]
 8011f90:	bfb8      	it	lt
 8011f92:	2600      	movlt	r6, #0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	bfb7      	itett	lt
 8011f98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011f9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011fa0:	1a9d      	sublt	r5, r3, r2
 8011fa2:	2300      	movlt	r3, #0
 8011fa4:	e734      	b.n	8011e10 <_dtoa_r+0x720>
 8011fa6:	9e07      	ldr	r6, [sp, #28]
 8011fa8:	9d04      	ldr	r5, [sp, #16]
 8011faa:	9f08      	ldr	r7, [sp, #32]
 8011fac:	e73b      	b.n	8011e26 <_dtoa_r+0x736>
 8011fae:	9a07      	ldr	r2, [sp, #28]
 8011fb0:	e767      	b.n	8011e82 <_dtoa_r+0x792>
 8011fb2:	9b06      	ldr	r3, [sp, #24]
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	dc18      	bgt.n	8011fea <_dtoa_r+0x8fa>
 8011fb8:	f1ba 0f00 	cmp.w	sl, #0
 8011fbc:	d115      	bne.n	8011fea <_dtoa_r+0x8fa>
 8011fbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fc2:	b993      	cbnz	r3, 8011fea <_dtoa_r+0x8fa>
 8011fc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011fc8:	0d1b      	lsrs	r3, r3, #20
 8011fca:	051b      	lsls	r3, r3, #20
 8011fcc:	b183      	cbz	r3, 8011ff0 <_dtoa_r+0x900>
 8011fce:	9b04      	ldr	r3, [sp, #16]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	9304      	str	r3, [sp, #16]
 8011fd4:	9b05      	ldr	r3, [sp, #20]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	9305      	str	r3, [sp, #20]
 8011fda:	f04f 0801 	mov.w	r8, #1
 8011fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	f47f af6a 	bne.w	8011eba <_dtoa_r+0x7ca>
 8011fe6:	2001      	movs	r0, #1
 8011fe8:	e76f      	b.n	8011eca <_dtoa_r+0x7da>
 8011fea:	f04f 0800 	mov.w	r8, #0
 8011fee:	e7f6      	b.n	8011fde <_dtoa_r+0x8ee>
 8011ff0:	4698      	mov	r8, r3
 8011ff2:	e7f4      	b.n	8011fde <_dtoa_r+0x8ee>
 8011ff4:	f43f af7d 	beq.w	8011ef2 <_dtoa_r+0x802>
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	301c      	adds	r0, #28
 8011ffc:	e772      	b.n	8011ee4 <_dtoa_r+0x7f4>
 8011ffe:	9b03      	ldr	r3, [sp, #12]
 8012000:	2b00      	cmp	r3, #0
 8012002:	dc37      	bgt.n	8012074 <_dtoa_r+0x984>
 8012004:	9b06      	ldr	r3, [sp, #24]
 8012006:	2b02      	cmp	r3, #2
 8012008:	dd34      	ble.n	8012074 <_dtoa_r+0x984>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	9302      	str	r3, [sp, #8]
 801200e:	9b02      	ldr	r3, [sp, #8]
 8012010:	b96b      	cbnz	r3, 801202e <_dtoa_r+0x93e>
 8012012:	4631      	mov	r1, r6
 8012014:	2205      	movs	r2, #5
 8012016:	4620      	mov	r0, r4
 8012018:	f000 ff80 	bl	8012f1c <__multadd>
 801201c:	4601      	mov	r1, r0
 801201e:	4606      	mov	r6, r0
 8012020:	ee18 0a10 	vmov	r0, s16
 8012024:	f001 f9e4 	bl	80133f0 <__mcmp>
 8012028:	2800      	cmp	r0, #0
 801202a:	f73f adbb 	bgt.w	8011ba4 <_dtoa_r+0x4b4>
 801202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012030:	9d01      	ldr	r5, [sp, #4]
 8012032:	43db      	mvns	r3, r3
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	f04f 0800 	mov.w	r8, #0
 801203a:	4631      	mov	r1, r6
 801203c:	4620      	mov	r0, r4
 801203e:	f000 ff4b 	bl	8012ed8 <_Bfree>
 8012042:	2f00      	cmp	r7, #0
 8012044:	f43f aea4 	beq.w	8011d90 <_dtoa_r+0x6a0>
 8012048:	f1b8 0f00 	cmp.w	r8, #0
 801204c:	d005      	beq.n	801205a <_dtoa_r+0x96a>
 801204e:	45b8      	cmp	r8, r7
 8012050:	d003      	beq.n	801205a <_dtoa_r+0x96a>
 8012052:	4641      	mov	r1, r8
 8012054:	4620      	mov	r0, r4
 8012056:	f000 ff3f 	bl	8012ed8 <_Bfree>
 801205a:	4639      	mov	r1, r7
 801205c:	4620      	mov	r0, r4
 801205e:	f000 ff3b 	bl	8012ed8 <_Bfree>
 8012062:	e695      	b.n	8011d90 <_dtoa_r+0x6a0>
 8012064:	2600      	movs	r6, #0
 8012066:	4637      	mov	r7, r6
 8012068:	e7e1      	b.n	801202e <_dtoa_r+0x93e>
 801206a:	9700      	str	r7, [sp, #0]
 801206c:	4637      	mov	r7, r6
 801206e:	e599      	b.n	8011ba4 <_dtoa_r+0x4b4>
 8012070:	40240000 	.word	0x40240000
 8012074:	9b08      	ldr	r3, [sp, #32]
 8012076:	2b00      	cmp	r3, #0
 8012078:	f000 80ca 	beq.w	8012210 <_dtoa_r+0xb20>
 801207c:	9b03      	ldr	r3, [sp, #12]
 801207e:	9302      	str	r3, [sp, #8]
 8012080:	2d00      	cmp	r5, #0
 8012082:	dd05      	ble.n	8012090 <_dtoa_r+0x9a0>
 8012084:	4639      	mov	r1, r7
 8012086:	462a      	mov	r2, r5
 8012088:	4620      	mov	r0, r4
 801208a:	f001 f941 	bl	8013310 <__lshift>
 801208e:	4607      	mov	r7, r0
 8012090:	f1b8 0f00 	cmp.w	r8, #0
 8012094:	d05b      	beq.n	801214e <_dtoa_r+0xa5e>
 8012096:	6879      	ldr	r1, [r7, #4]
 8012098:	4620      	mov	r0, r4
 801209a:	f000 fedd 	bl	8012e58 <_Balloc>
 801209e:	4605      	mov	r5, r0
 80120a0:	b928      	cbnz	r0, 80120ae <_dtoa_r+0x9be>
 80120a2:	4b87      	ldr	r3, [pc, #540]	; (80122c0 <_dtoa_r+0xbd0>)
 80120a4:	4602      	mov	r2, r0
 80120a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80120aa:	f7ff bb3b 	b.w	8011724 <_dtoa_r+0x34>
 80120ae:	693a      	ldr	r2, [r7, #16]
 80120b0:	3202      	adds	r2, #2
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	f107 010c 	add.w	r1, r7, #12
 80120b8:	300c      	adds	r0, #12
 80120ba:	f7fd fa93 	bl	800f5e4 <memcpy>
 80120be:	2201      	movs	r2, #1
 80120c0:	4629      	mov	r1, r5
 80120c2:	4620      	mov	r0, r4
 80120c4:	f001 f924 	bl	8013310 <__lshift>
 80120c8:	9b01      	ldr	r3, [sp, #4]
 80120ca:	f103 0901 	add.w	r9, r3, #1
 80120ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80120d2:	4413      	add	r3, r2
 80120d4:	9305      	str	r3, [sp, #20]
 80120d6:	f00a 0301 	and.w	r3, sl, #1
 80120da:	46b8      	mov	r8, r7
 80120dc:	9304      	str	r3, [sp, #16]
 80120de:	4607      	mov	r7, r0
 80120e0:	4631      	mov	r1, r6
 80120e2:	ee18 0a10 	vmov	r0, s16
 80120e6:	f7ff fa76 	bl	80115d6 <quorem>
 80120ea:	4641      	mov	r1, r8
 80120ec:	9002      	str	r0, [sp, #8]
 80120ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80120f2:	ee18 0a10 	vmov	r0, s16
 80120f6:	f001 f97b 	bl	80133f0 <__mcmp>
 80120fa:	463a      	mov	r2, r7
 80120fc:	9003      	str	r0, [sp, #12]
 80120fe:	4631      	mov	r1, r6
 8012100:	4620      	mov	r0, r4
 8012102:	f001 f991 	bl	8013428 <__mdiff>
 8012106:	68c2      	ldr	r2, [r0, #12]
 8012108:	f109 3bff 	add.w	fp, r9, #4294967295
 801210c:	4605      	mov	r5, r0
 801210e:	bb02      	cbnz	r2, 8012152 <_dtoa_r+0xa62>
 8012110:	4601      	mov	r1, r0
 8012112:	ee18 0a10 	vmov	r0, s16
 8012116:	f001 f96b 	bl	80133f0 <__mcmp>
 801211a:	4602      	mov	r2, r0
 801211c:	4629      	mov	r1, r5
 801211e:	4620      	mov	r0, r4
 8012120:	9207      	str	r2, [sp, #28]
 8012122:	f000 fed9 	bl	8012ed8 <_Bfree>
 8012126:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801212a:	ea43 0102 	orr.w	r1, r3, r2
 801212e:	9b04      	ldr	r3, [sp, #16]
 8012130:	430b      	orrs	r3, r1
 8012132:	464d      	mov	r5, r9
 8012134:	d10f      	bne.n	8012156 <_dtoa_r+0xa66>
 8012136:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801213a:	d02a      	beq.n	8012192 <_dtoa_r+0xaa2>
 801213c:	9b03      	ldr	r3, [sp, #12]
 801213e:	2b00      	cmp	r3, #0
 8012140:	dd02      	ble.n	8012148 <_dtoa_r+0xa58>
 8012142:	9b02      	ldr	r3, [sp, #8]
 8012144:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012148:	f88b a000 	strb.w	sl, [fp]
 801214c:	e775      	b.n	801203a <_dtoa_r+0x94a>
 801214e:	4638      	mov	r0, r7
 8012150:	e7ba      	b.n	80120c8 <_dtoa_r+0x9d8>
 8012152:	2201      	movs	r2, #1
 8012154:	e7e2      	b.n	801211c <_dtoa_r+0xa2c>
 8012156:	9b03      	ldr	r3, [sp, #12]
 8012158:	2b00      	cmp	r3, #0
 801215a:	db04      	blt.n	8012166 <_dtoa_r+0xa76>
 801215c:	9906      	ldr	r1, [sp, #24]
 801215e:	430b      	orrs	r3, r1
 8012160:	9904      	ldr	r1, [sp, #16]
 8012162:	430b      	orrs	r3, r1
 8012164:	d122      	bne.n	80121ac <_dtoa_r+0xabc>
 8012166:	2a00      	cmp	r2, #0
 8012168:	ddee      	ble.n	8012148 <_dtoa_r+0xa58>
 801216a:	ee18 1a10 	vmov	r1, s16
 801216e:	2201      	movs	r2, #1
 8012170:	4620      	mov	r0, r4
 8012172:	f001 f8cd 	bl	8013310 <__lshift>
 8012176:	4631      	mov	r1, r6
 8012178:	ee08 0a10 	vmov	s16, r0
 801217c:	f001 f938 	bl	80133f0 <__mcmp>
 8012180:	2800      	cmp	r0, #0
 8012182:	dc03      	bgt.n	801218c <_dtoa_r+0xa9c>
 8012184:	d1e0      	bne.n	8012148 <_dtoa_r+0xa58>
 8012186:	f01a 0f01 	tst.w	sl, #1
 801218a:	d0dd      	beq.n	8012148 <_dtoa_r+0xa58>
 801218c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012190:	d1d7      	bne.n	8012142 <_dtoa_r+0xa52>
 8012192:	2339      	movs	r3, #57	; 0x39
 8012194:	f88b 3000 	strb.w	r3, [fp]
 8012198:	462b      	mov	r3, r5
 801219a:	461d      	mov	r5, r3
 801219c:	3b01      	subs	r3, #1
 801219e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80121a2:	2a39      	cmp	r2, #57	; 0x39
 80121a4:	d071      	beq.n	801228a <_dtoa_r+0xb9a>
 80121a6:	3201      	adds	r2, #1
 80121a8:	701a      	strb	r2, [r3, #0]
 80121aa:	e746      	b.n	801203a <_dtoa_r+0x94a>
 80121ac:	2a00      	cmp	r2, #0
 80121ae:	dd07      	ble.n	80121c0 <_dtoa_r+0xad0>
 80121b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80121b4:	d0ed      	beq.n	8012192 <_dtoa_r+0xaa2>
 80121b6:	f10a 0301 	add.w	r3, sl, #1
 80121ba:	f88b 3000 	strb.w	r3, [fp]
 80121be:	e73c      	b.n	801203a <_dtoa_r+0x94a>
 80121c0:	9b05      	ldr	r3, [sp, #20]
 80121c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80121c6:	4599      	cmp	r9, r3
 80121c8:	d047      	beq.n	801225a <_dtoa_r+0xb6a>
 80121ca:	ee18 1a10 	vmov	r1, s16
 80121ce:	2300      	movs	r3, #0
 80121d0:	220a      	movs	r2, #10
 80121d2:	4620      	mov	r0, r4
 80121d4:	f000 fea2 	bl	8012f1c <__multadd>
 80121d8:	45b8      	cmp	r8, r7
 80121da:	ee08 0a10 	vmov	s16, r0
 80121de:	f04f 0300 	mov.w	r3, #0
 80121e2:	f04f 020a 	mov.w	r2, #10
 80121e6:	4641      	mov	r1, r8
 80121e8:	4620      	mov	r0, r4
 80121ea:	d106      	bne.n	80121fa <_dtoa_r+0xb0a>
 80121ec:	f000 fe96 	bl	8012f1c <__multadd>
 80121f0:	4680      	mov	r8, r0
 80121f2:	4607      	mov	r7, r0
 80121f4:	f109 0901 	add.w	r9, r9, #1
 80121f8:	e772      	b.n	80120e0 <_dtoa_r+0x9f0>
 80121fa:	f000 fe8f 	bl	8012f1c <__multadd>
 80121fe:	4639      	mov	r1, r7
 8012200:	4680      	mov	r8, r0
 8012202:	2300      	movs	r3, #0
 8012204:	220a      	movs	r2, #10
 8012206:	4620      	mov	r0, r4
 8012208:	f000 fe88 	bl	8012f1c <__multadd>
 801220c:	4607      	mov	r7, r0
 801220e:	e7f1      	b.n	80121f4 <_dtoa_r+0xb04>
 8012210:	9b03      	ldr	r3, [sp, #12]
 8012212:	9302      	str	r3, [sp, #8]
 8012214:	9d01      	ldr	r5, [sp, #4]
 8012216:	ee18 0a10 	vmov	r0, s16
 801221a:	4631      	mov	r1, r6
 801221c:	f7ff f9db 	bl	80115d6 <quorem>
 8012220:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012224:	9b01      	ldr	r3, [sp, #4]
 8012226:	f805 ab01 	strb.w	sl, [r5], #1
 801222a:	1aea      	subs	r2, r5, r3
 801222c:	9b02      	ldr	r3, [sp, #8]
 801222e:	4293      	cmp	r3, r2
 8012230:	dd09      	ble.n	8012246 <_dtoa_r+0xb56>
 8012232:	ee18 1a10 	vmov	r1, s16
 8012236:	2300      	movs	r3, #0
 8012238:	220a      	movs	r2, #10
 801223a:	4620      	mov	r0, r4
 801223c:	f000 fe6e 	bl	8012f1c <__multadd>
 8012240:	ee08 0a10 	vmov	s16, r0
 8012244:	e7e7      	b.n	8012216 <_dtoa_r+0xb26>
 8012246:	9b02      	ldr	r3, [sp, #8]
 8012248:	2b00      	cmp	r3, #0
 801224a:	bfc8      	it	gt
 801224c:	461d      	movgt	r5, r3
 801224e:	9b01      	ldr	r3, [sp, #4]
 8012250:	bfd8      	it	le
 8012252:	2501      	movle	r5, #1
 8012254:	441d      	add	r5, r3
 8012256:	f04f 0800 	mov.w	r8, #0
 801225a:	ee18 1a10 	vmov	r1, s16
 801225e:	2201      	movs	r2, #1
 8012260:	4620      	mov	r0, r4
 8012262:	f001 f855 	bl	8013310 <__lshift>
 8012266:	4631      	mov	r1, r6
 8012268:	ee08 0a10 	vmov	s16, r0
 801226c:	f001 f8c0 	bl	80133f0 <__mcmp>
 8012270:	2800      	cmp	r0, #0
 8012272:	dc91      	bgt.n	8012198 <_dtoa_r+0xaa8>
 8012274:	d102      	bne.n	801227c <_dtoa_r+0xb8c>
 8012276:	f01a 0f01 	tst.w	sl, #1
 801227a:	d18d      	bne.n	8012198 <_dtoa_r+0xaa8>
 801227c:	462b      	mov	r3, r5
 801227e:	461d      	mov	r5, r3
 8012280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012284:	2a30      	cmp	r2, #48	; 0x30
 8012286:	d0fa      	beq.n	801227e <_dtoa_r+0xb8e>
 8012288:	e6d7      	b.n	801203a <_dtoa_r+0x94a>
 801228a:	9a01      	ldr	r2, [sp, #4]
 801228c:	429a      	cmp	r2, r3
 801228e:	d184      	bne.n	801219a <_dtoa_r+0xaaa>
 8012290:	9b00      	ldr	r3, [sp, #0]
 8012292:	3301      	adds	r3, #1
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	2331      	movs	r3, #49	; 0x31
 8012298:	7013      	strb	r3, [r2, #0]
 801229a:	e6ce      	b.n	801203a <_dtoa_r+0x94a>
 801229c:	4b09      	ldr	r3, [pc, #36]	; (80122c4 <_dtoa_r+0xbd4>)
 801229e:	f7ff ba95 	b.w	80117cc <_dtoa_r+0xdc>
 80122a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f47f aa6e 	bne.w	8011786 <_dtoa_r+0x96>
 80122aa:	4b07      	ldr	r3, [pc, #28]	; (80122c8 <_dtoa_r+0xbd8>)
 80122ac:	f7ff ba8e 	b.w	80117cc <_dtoa_r+0xdc>
 80122b0:	9b02      	ldr	r3, [sp, #8]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	dcae      	bgt.n	8012214 <_dtoa_r+0xb24>
 80122b6:	9b06      	ldr	r3, [sp, #24]
 80122b8:	2b02      	cmp	r3, #2
 80122ba:	f73f aea8 	bgt.w	801200e <_dtoa_r+0x91e>
 80122be:	e7a9      	b.n	8012214 <_dtoa_r+0xb24>
 80122c0:	0802ad23 	.word	0x0802ad23
 80122c4:	0802ab05 	.word	0x0802ab05
 80122c8:	0802ac81 	.word	0x0802ac81

080122cc <__sflush_r>:
 80122cc:	898a      	ldrh	r2, [r1, #12]
 80122ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d2:	4605      	mov	r5, r0
 80122d4:	0710      	lsls	r0, r2, #28
 80122d6:	460c      	mov	r4, r1
 80122d8:	d458      	bmi.n	801238c <__sflush_r+0xc0>
 80122da:	684b      	ldr	r3, [r1, #4]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	dc05      	bgt.n	80122ec <__sflush_r+0x20>
 80122e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	dc02      	bgt.n	80122ec <__sflush_r+0x20>
 80122e6:	2000      	movs	r0, #0
 80122e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122ee:	2e00      	cmp	r6, #0
 80122f0:	d0f9      	beq.n	80122e6 <__sflush_r+0x1a>
 80122f2:	2300      	movs	r3, #0
 80122f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122f8:	682f      	ldr	r7, [r5, #0]
 80122fa:	602b      	str	r3, [r5, #0]
 80122fc:	d032      	beq.n	8012364 <__sflush_r+0x98>
 80122fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012300:	89a3      	ldrh	r3, [r4, #12]
 8012302:	075a      	lsls	r2, r3, #29
 8012304:	d505      	bpl.n	8012312 <__sflush_r+0x46>
 8012306:	6863      	ldr	r3, [r4, #4]
 8012308:	1ac0      	subs	r0, r0, r3
 801230a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801230c:	b10b      	cbz	r3, 8012312 <__sflush_r+0x46>
 801230e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012310:	1ac0      	subs	r0, r0, r3
 8012312:	2300      	movs	r3, #0
 8012314:	4602      	mov	r2, r0
 8012316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012318:	6a21      	ldr	r1, [r4, #32]
 801231a:	4628      	mov	r0, r5
 801231c:	47b0      	blx	r6
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	d106      	bne.n	8012332 <__sflush_r+0x66>
 8012324:	6829      	ldr	r1, [r5, #0]
 8012326:	291d      	cmp	r1, #29
 8012328:	d82c      	bhi.n	8012384 <__sflush_r+0xb8>
 801232a:	4a2a      	ldr	r2, [pc, #168]	; (80123d4 <__sflush_r+0x108>)
 801232c:	40ca      	lsrs	r2, r1
 801232e:	07d6      	lsls	r6, r2, #31
 8012330:	d528      	bpl.n	8012384 <__sflush_r+0xb8>
 8012332:	2200      	movs	r2, #0
 8012334:	6062      	str	r2, [r4, #4]
 8012336:	04d9      	lsls	r1, r3, #19
 8012338:	6922      	ldr	r2, [r4, #16]
 801233a:	6022      	str	r2, [r4, #0]
 801233c:	d504      	bpl.n	8012348 <__sflush_r+0x7c>
 801233e:	1c42      	adds	r2, r0, #1
 8012340:	d101      	bne.n	8012346 <__sflush_r+0x7a>
 8012342:	682b      	ldr	r3, [r5, #0]
 8012344:	b903      	cbnz	r3, 8012348 <__sflush_r+0x7c>
 8012346:	6560      	str	r0, [r4, #84]	; 0x54
 8012348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801234a:	602f      	str	r7, [r5, #0]
 801234c:	2900      	cmp	r1, #0
 801234e:	d0ca      	beq.n	80122e6 <__sflush_r+0x1a>
 8012350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012354:	4299      	cmp	r1, r3
 8012356:	d002      	beq.n	801235e <__sflush_r+0x92>
 8012358:	4628      	mov	r0, r5
 801235a:	f001 fa55 	bl	8013808 <_free_r>
 801235e:	2000      	movs	r0, #0
 8012360:	6360      	str	r0, [r4, #52]	; 0x34
 8012362:	e7c1      	b.n	80122e8 <__sflush_r+0x1c>
 8012364:	6a21      	ldr	r1, [r4, #32]
 8012366:	2301      	movs	r3, #1
 8012368:	4628      	mov	r0, r5
 801236a:	47b0      	blx	r6
 801236c:	1c41      	adds	r1, r0, #1
 801236e:	d1c7      	bne.n	8012300 <__sflush_r+0x34>
 8012370:	682b      	ldr	r3, [r5, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d0c4      	beq.n	8012300 <__sflush_r+0x34>
 8012376:	2b1d      	cmp	r3, #29
 8012378:	d001      	beq.n	801237e <__sflush_r+0xb2>
 801237a:	2b16      	cmp	r3, #22
 801237c:	d101      	bne.n	8012382 <__sflush_r+0xb6>
 801237e:	602f      	str	r7, [r5, #0]
 8012380:	e7b1      	b.n	80122e6 <__sflush_r+0x1a>
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012388:	81a3      	strh	r3, [r4, #12]
 801238a:	e7ad      	b.n	80122e8 <__sflush_r+0x1c>
 801238c:	690f      	ldr	r7, [r1, #16]
 801238e:	2f00      	cmp	r7, #0
 8012390:	d0a9      	beq.n	80122e6 <__sflush_r+0x1a>
 8012392:	0793      	lsls	r3, r2, #30
 8012394:	680e      	ldr	r6, [r1, #0]
 8012396:	bf08      	it	eq
 8012398:	694b      	ldreq	r3, [r1, #20]
 801239a:	600f      	str	r7, [r1, #0]
 801239c:	bf18      	it	ne
 801239e:	2300      	movne	r3, #0
 80123a0:	eba6 0807 	sub.w	r8, r6, r7
 80123a4:	608b      	str	r3, [r1, #8]
 80123a6:	f1b8 0f00 	cmp.w	r8, #0
 80123aa:	dd9c      	ble.n	80122e6 <__sflush_r+0x1a>
 80123ac:	6a21      	ldr	r1, [r4, #32]
 80123ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123b0:	4643      	mov	r3, r8
 80123b2:	463a      	mov	r2, r7
 80123b4:	4628      	mov	r0, r5
 80123b6:	47b0      	blx	r6
 80123b8:	2800      	cmp	r0, #0
 80123ba:	dc06      	bgt.n	80123ca <__sflush_r+0xfe>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c2:	81a3      	strh	r3, [r4, #12]
 80123c4:	f04f 30ff 	mov.w	r0, #4294967295
 80123c8:	e78e      	b.n	80122e8 <__sflush_r+0x1c>
 80123ca:	4407      	add	r7, r0
 80123cc:	eba8 0800 	sub.w	r8, r8, r0
 80123d0:	e7e9      	b.n	80123a6 <__sflush_r+0xda>
 80123d2:	bf00      	nop
 80123d4:	20400001 	.word	0x20400001

080123d8 <_fflush_r>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	690b      	ldr	r3, [r1, #16]
 80123dc:	4605      	mov	r5, r0
 80123de:	460c      	mov	r4, r1
 80123e0:	b913      	cbnz	r3, 80123e8 <_fflush_r+0x10>
 80123e2:	2500      	movs	r5, #0
 80123e4:	4628      	mov	r0, r5
 80123e6:	bd38      	pop	{r3, r4, r5, pc}
 80123e8:	b118      	cbz	r0, 80123f2 <_fflush_r+0x1a>
 80123ea:	6983      	ldr	r3, [r0, #24]
 80123ec:	b90b      	cbnz	r3, 80123f2 <_fflush_r+0x1a>
 80123ee:	f000 f887 	bl	8012500 <__sinit>
 80123f2:	4b14      	ldr	r3, [pc, #80]	; (8012444 <_fflush_r+0x6c>)
 80123f4:	429c      	cmp	r4, r3
 80123f6:	d11b      	bne.n	8012430 <_fflush_r+0x58>
 80123f8:	686c      	ldr	r4, [r5, #4]
 80123fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d0ef      	beq.n	80123e2 <_fflush_r+0xa>
 8012402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012404:	07d0      	lsls	r0, r2, #31
 8012406:	d404      	bmi.n	8012412 <_fflush_r+0x3a>
 8012408:	0599      	lsls	r1, r3, #22
 801240a:	d402      	bmi.n	8012412 <_fflush_r+0x3a>
 801240c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801240e:	f000 fc88 	bl	8012d22 <__retarget_lock_acquire_recursive>
 8012412:	4628      	mov	r0, r5
 8012414:	4621      	mov	r1, r4
 8012416:	f7ff ff59 	bl	80122cc <__sflush_r>
 801241a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801241c:	07da      	lsls	r2, r3, #31
 801241e:	4605      	mov	r5, r0
 8012420:	d4e0      	bmi.n	80123e4 <_fflush_r+0xc>
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	059b      	lsls	r3, r3, #22
 8012426:	d4dd      	bmi.n	80123e4 <_fflush_r+0xc>
 8012428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801242a:	f000 fc7b 	bl	8012d24 <__retarget_lock_release_recursive>
 801242e:	e7d9      	b.n	80123e4 <_fflush_r+0xc>
 8012430:	4b05      	ldr	r3, [pc, #20]	; (8012448 <_fflush_r+0x70>)
 8012432:	429c      	cmp	r4, r3
 8012434:	d101      	bne.n	801243a <_fflush_r+0x62>
 8012436:	68ac      	ldr	r4, [r5, #8]
 8012438:	e7df      	b.n	80123fa <_fflush_r+0x22>
 801243a:	4b04      	ldr	r3, [pc, #16]	; (801244c <_fflush_r+0x74>)
 801243c:	429c      	cmp	r4, r3
 801243e:	bf08      	it	eq
 8012440:	68ec      	ldreq	r4, [r5, #12]
 8012442:	e7da      	b.n	80123fa <_fflush_r+0x22>
 8012444:	0802ad54 	.word	0x0802ad54
 8012448:	0802ad74 	.word	0x0802ad74
 801244c:	0802ad34 	.word	0x0802ad34

08012450 <std>:
 8012450:	2300      	movs	r3, #0
 8012452:	b510      	push	{r4, lr}
 8012454:	4604      	mov	r4, r0
 8012456:	e9c0 3300 	strd	r3, r3, [r0]
 801245a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801245e:	6083      	str	r3, [r0, #8]
 8012460:	8181      	strh	r1, [r0, #12]
 8012462:	6643      	str	r3, [r0, #100]	; 0x64
 8012464:	81c2      	strh	r2, [r0, #14]
 8012466:	6183      	str	r3, [r0, #24]
 8012468:	4619      	mov	r1, r3
 801246a:	2208      	movs	r2, #8
 801246c:	305c      	adds	r0, #92	; 0x5c
 801246e:	f7fd f8c7 	bl	800f600 <memset>
 8012472:	4b05      	ldr	r3, [pc, #20]	; (8012488 <std+0x38>)
 8012474:	6263      	str	r3, [r4, #36]	; 0x24
 8012476:	4b05      	ldr	r3, [pc, #20]	; (801248c <std+0x3c>)
 8012478:	62a3      	str	r3, [r4, #40]	; 0x28
 801247a:	4b05      	ldr	r3, [pc, #20]	; (8012490 <std+0x40>)
 801247c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801247e:	4b05      	ldr	r3, [pc, #20]	; (8012494 <std+0x44>)
 8012480:	6224      	str	r4, [r4, #32]
 8012482:	6323      	str	r3, [r4, #48]	; 0x30
 8012484:	bd10      	pop	{r4, pc}
 8012486:	bf00      	nop
 8012488:	08013d99 	.word	0x08013d99
 801248c:	08013dbb 	.word	0x08013dbb
 8012490:	08013df3 	.word	0x08013df3
 8012494:	08013e17 	.word	0x08013e17

08012498 <_cleanup_r>:
 8012498:	4901      	ldr	r1, [pc, #4]	; (80124a0 <_cleanup_r+0x8>)
 801249a:	f000 b8af 	b.w	80125fc <_fwalk_reent>
 801249e:	bf00      	nop
 80124a0:	080123d9 	.word	0x080123d9

080124a4 <__sfmoreglue>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	2268      	movs	r2, #104	; 0x68
 80124a8:	1e4d      	subs	r5, r1, #1
 80124aa:	4355      	muls	r5, r2
 80124ac:	460e      	mov	r6, r1
 80124ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80124b2:	f001 fa15 	bl	80138e0 <_malloc_r>
 80124b6:	4604      	mov	r4, r0
 80124b8:	b140      	cbz	r0, 80124cc <__sfmoreglue+0x28>
 80124ba:	2100      	movs	r1, #0
 80124bc:	e9c0 1600 	strd	r1, r6, [r0]
 80124c0:	300c      	adds	r0, #12
 80124c2:	60a0      	str	r0, [r4, #8]
 80124c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80124c8:	f7fd f89a 	bl	800f600 <memset>
 80124cc:	4620      	mov	r0, r4
 80124ce:	bd70      	pop	{r4, r5, r6, pc}

080124d0 <__sfp_lock_acquire>:
 80124d0:	4801      	ldr	r0, [pc, #4]	; (80124d8 <__sfp_lock_acquire+0x8>)
 80124d2:	f000 bc26 	b.w	8012d22 <__retarget_lock_acquire_recursive>
 80124d6:	bf00      	nop
 80124d8:	20013467 	.word	0x20013467

080124dc <__sfp_lock_release>:
 80124dc:	4801      	ldr	r0, [pc, #4]	; (80124e4 <__sfp_lock_release+0x8>)
 80124de:	f000 bc21 	b.w	8012d24 <__retarget_lock_release_recursive>
 80124e2:	bf00      	nop
 80124e4:	20013467 	.word	0x20013467

080124e8 <__sinit_lock_acquire>:
 80124e8:	4801      	ldr	r0, [pc, #4]	; (80124f0 <__sinit_lock_acquire+0x8>)
 80124ea:	f000 bc1a 	b.w	8012d22 <__retarget_lock_acquire_recursive>
 80124ee:	bf00      	nop
 80124f0:	20013468 	.word	0x20013468

080124f4 <__sinit_lock_release>:
 80124f4:	4801      	ldr	r0, [pc, #4]	; (80124fc <__sinit_lock_release+0x8>)
 80124f6:	f000 bc15 	b.w	8012d24 <__retarget_lock_release_recursive>
 80124fa:	bf00      	nop
 80124fc:	20013468 	.word	0x20013468

08012500 <__sinit>:
 8012500:	b510      	push	{r4, lr}
 8012502:	4604      	mov	r4, r0
 8012504:	f7ff fff0 	bl	80124e8 <__sinit_lock_acquire>
 8012508:	69a3      	ldr	r3, [r4, #24]
 801250a:	b11b      	cbz	r3, 8012514 <__sinit+0x14>
 801250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012510:	f7ff bff0 	b.w	80124f4 <__sinit_lock_release>
 8012514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012518:	6523      	str	r3, [r4, #80]	; 0x50
 801251a:	4b13      	ldr	r3, [pc, #76]	; (8012568 <__sinit+0x68>)
 801251c:	4a13      	ldr	r2, [pc, #76]	; (801256c <__sinit+0x6c>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	62a2      	str	r2, [r4, #40]	; 0x28
 8012522:	42a3      	cmp	r3, r4
 8012524:	bf04      	itt	eq
 8012526:	2301      	moveq	r3, #1
 8012528:	61a3      	streq	r3, [r4, #24]
 801252a:	4620      	mov	r0, r4
 801252c:	f000 f820 	bl	8012570 <__sfp>
 8012530:	6060      	str	r0, [r4, #4]
 8012532:	4620      	mov	r0, r4
 8012534:	f000 f81c 	bl	8012570 <__sfp>
 8012538:	60a0      	str	r0, [r4, #8]
 801253a:	4620      	mov	r0, r4
 801253c:	f000 f818 	bl	8012570 <__sfp>
 8012540:	2200      	movs	r2, #0
 8012542:	60e0      	str	r0, [r4, #12]
 8012544:	2104      	movs	r1, #4
 8012546:	6860      	ldr	r0, [r4, #4]
 8012548:	f7ff ff82 	bl	8012450 <std>
 801254c:	68a0      	ldr	r0, [r4, #8]
 801254e:	2201      	movs	r2, #1
 8012550:	2109      	movs	r1, #9
 8012552:	f7ff ff7d 	bl	8012450 <std>
 8012556:	68e0      	ldr	r0, [r4, #12]
 8012558:	2202      	movs	r2, #2
 801255a:	2112      	movs	r1, #18
 801255c:	f7ff ff78 	bl	8012450 <std>
 8012560:	2301      	movs	r3, #1
 8012562:	61a3      	str	r3, [r4, #24]
 8012564:	e7d2      	b.n	801250c <__sinit+0xc>
 8012566:	bf00      	nop
 8012568:	0802aae0 	.word	0x0802aae0
 801256c:	08012499 	.word	0x08012499

08012570 <__sfp>:
 8012570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012572:	4607      	mov	r7, r0
 8012574:	f7ff ffac 	bl	80124d0 <__sfp_lock_acquire>
 8012578:	4b1e      	ldr	r3, [pc, #120]	; (80125f4 <__sfp+0x84>)
 801257a:	681e      	ldr	r6, [r3, #0]
 801257c:	69b3      	ldr	r3, [r6, #24]
 801257e:	b913      	cbnz	r3, 8012586 <__sfp+0x16>
 8012580:	4630      	mov	r0, r6
 8012582:	f7ff ffbd 	bl	8012500 <__sinit>
 8012586:	3648      	adds	r6, #72	; 0x48
 8012588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801258c:	3b01      	subs	r3, #1
 801258e:	d503      	bpl.n	8012598 <__sfp+0x28>
 8012590:	6833      	ldr	r3, [r6, #0]
 8012592:	b30b      	cbz	r3, 80125d8 <__sfp+0x68>
 8012594:	6836      	ldr	r6, [r6, #0]
 8012596:	e7f7      	b.n	8012588 <__sfp+0x18>
 8012598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801259c:	b9d5      	cbnz	r5, 80125d4 <__sfp+0x64>
 801259e:	4b16      	ldr	r3, [pc, #88]	; (80125f8 <__sfp+0x88>)
 80125a0:	60e3      	str	r3, [r4, #12]
 80125a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80125a6:	6665      	str	r5, [r4, #100]	; 0x64
 80125a8:	f000 fbba 	bl	8012d20 <__retarget_lock_init_recursive>
 80125ac:	f7ff ff96 	bl	80124dc <__sfp_lock_release>
 80125b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80125b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80125b8:	6025      	str	r5, [r4, #0]
 80125ba:	61a5      	str	r5, [r4, #24]
 80125bc:	2208      	movs	r2, #8
 80125be:	4629      	mov	r1, r5
 80125c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80125c4:	f7fd f81c 	bl	800f600 <memset>
 80125c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80125cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80125d0:	4620      	mov	r0, r4
 80125d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125d4:	3468      	adds	r4, #104	; 0x68
 80125d6:	e7d9      	b.n	801258c <__sfp+0x1c>
 80125d8:	2104      	movs	r1, #4
 80125da:	4638      	mov	r0, r7
 80125dc:	f7ff ff62 	bl	80124a4 <__sfmoreglue>
 80125e0:	4604      	mov	r4, r0
 80125e2:	6030      	str	r0, [r6, #0]
 80125e4:	2800      	cmp	r0, #0
 80125e6:	d1d5      	bne.n	8012594 <__sfp+0x24>
 80125e8:	f7ff ff78 	bl	80124dc <__sfp_lock_release>
 80125ec:	230c      	movs	r3, #12
 80125ee:	603b      	str	r3, [r7, #0]
 80125f0:	e7ee      	b.n	80125d0 <__sfp+0x60>
 80125f2:	bf00      	nop
 80125f4:	0802aae0 	.word	0x0802aae0
 80125f8:	ffff0001 	.word	0xffff0001

080125fc <_fwalk_reent>:
 80125fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012600:	4606      	mov	r6, r0
 8012602:	4688      	mov	r8, r1
 8012604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012608:	2700      	movs	r7, #0
 801260a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801260e:	f1b9 0901 	subs.w	r9, r9, #1
 8012612:	d505      	bpl.n	8012620 <_fwalk_reent+0x24>
 8012614:	6824      	ldr	r4, [r4, #0]
 8012616:	2c00      	cmp	r4, #0
 8012618:	d1f7      	bne.n	801260a <_fwalk_reent+0xe>
 801261a:	4638      	mov	r0, r7
 801261c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012620:	89ab      	ldrh	r3, [r5, #12]
 8012622:	2b01      	cmp	r3, #1
 8012624:	d907      	bls.n	8012636 <_fwalk_reent+0x3a>
 8012626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801262a:	3301      	adds	r3, #1
 801262c:	d003      	beq.n	8012636 <_fwalk_reent+0x3a>
 801262e:	4629      	mov	r1, r5
 8012630:	4630      	mov	r0, r6
 8012632:	47c0      	blx	r8
 8012634:	4307      	orrs	r7, r0
 8012636:	3568      	adds	r5, #104	; 0x68
 8012638:	e7e9      	b.n	801260e <_fwalk_reent+0x12>

0801263a <rshift>:
 801263a:	6903      	ldr	r3, [r0, #16]
 801263c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012644:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012648:	f100 0414 	add.w	r4, r0, #20
 801264c:	dd45      	ble.n	80126da <rshift+0xa0>
 801264e:	f011 011f 	ands.w	r1, r1, #31
 8012652:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012656:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801265a:	d10c      	bne.n	8012676 <rshift+0x3c>
 801265c:	f100 0710 	add.w	r7, r0, #16
 8012660:	4629      	mov	r1, r5
 8012662:	42b1      	cmp	r1, r6
 8012664:	d334      	bcc.n	80126d0 <rshift+0x96>
 8012666:	1a9b      	subs	r3, r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	1eea      	subs	r2, r5, #3
 801266c:	4296      	cmp	r6, r2
 801266e:	bf38      	it	cc
 8012670:	2300      	movcc	r3, #0
 8012672:	4423      	add	r3, r4
 8012674:	e015      	b.n	80126a2 <rshift+0x68>
 8012676:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801267a:	f1c1 0820 	rsb	r8, r1, #32
 801267e:	40cf      	lsrs	r7, r1
 8012680:	f105 0e04 	add.w	lr, r5, #4
 8012684:	46a1      	mov	r9, r4
 8012686:	4576      	cmp	r6, lr
 8012688:	46f4      	mov	ip, lr
 801268a:	d815      	bhi.n	80126b8 <rshift+0x7e>
 801268c:	1a9a      	subs	r2, r3, r2
 801268e:	0092      	lsls	r2, r2, #2
 8012690:	3a04      	subs	r2, #4
 8012692:	3501      	adds	r5, #1
 8012694:	42ae      	cmp	r6, r5
 8012696:	bf38      	it	cc
 8012698:	2200      	movcc	r2, #0
 801269a:	18a3      	adds	r3, r4, r2
 801269c:	50a7      	str	r7, [r4, r2]
 801269e:	b107      	cbz	r7, 80126a2 <rshift+0x68>
 80126a0:	3304      	adds	r3, #4
 80126a2:	1b1a      	subs	r2, r3, r4
 80126a4:	42a3      	cmp	r3, r4
 80126a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80126aa:	bf08      	it	eq
 80126ac:	2300      	moveq	r3, #0
 80126ae:	6102      	str	r2, [r0, #16]
 80126b0:	bf08      	it	eq
 80126b2:	6143      	streq	r3, [r0, #20]
 80126b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126b8:	f8dc c000 	ldr.w	ip, [ip]
 80126bc:	fa0c fc08 	lsl.w	ip, ip, r8
 80126c0:	ea4c 0707 	orr.w	r7, ip, r7
 80126c4:	f849 7b04 	str.w	r7, [r9], #4
 80126c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80126cc:	40cf      	lsrs	r7, r1
 80126ce:	e7da      	b.n	8012686 <rshift+0x4c>
 80126d0:	f851 cb04 	ldr.w	ip, [r1], #4
 80126d4:	f847 cf04 	str.w	ip, [r7, #4]!
 80126d8:	e7c3      	b.n	8012662 <rshift+0x28>
 80126da:	4623      	mov	r3, r4
 80126dc:	e7e1      	b.n	80126a2 <rshift+0x68>

080126de <__hexdig_fun>:
 80126de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80126e2:	2b09      	cmp	r3, #9
 80126e4:	d802      	bhi.n	80126ec <__hexdig_fun+0xe>
 80126e6:	3820      	subs	r0, #32
 80126e8:	b2c0      	uxtb	r0, r0
 80126ea:	4770      	bx	lr
 80126ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80126f0:	2b05      	cmp	r3, #5
 80126f2:	d801      	bhi.n	80126f8 <__hexdig_fun+0x1a>
 80126f4:	3847      	subs	r0, #71	; 0x47
 80126f6:	e7f7      	b.n	80126e8 <__hexdig_fun+0xa>
 80126f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80126fc:	2b05      	cmp	r3, #5
 80126fe:	d801      	bhi.n	8012704 <__hexdig_fun+0x26>
 8012700:	3827      	subs	r0, #39	; 0x27
 8012702:	e7f1      	b.n	80126e8 <__hexdig_fun+0xa>
 8012704:	2000      	movs	r0, #0
 8012706:	4770      	bx	lr

08012708 <__gethex>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	ed2d 8b02 	vpush	{d8}
 8012710:	b089      	sub	sp, #36	; 0x24
 8012712:	ee08 0a10 	vmov	s16, r0
 8012716:	9304      	str	r3, [sp, #16]
 8012718:	4bb4      	ldr	r3, [pc, #720]	; (80129ec <__gethex+0x2e4>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	9301      	str	r3, [sp, #4]
 801271e:	4618      	mov	r0, r3
 8012720:	468b      	mov	fp, r1
 8012722:	4690      	mov	r8, r2
 8012724:	f7ed fd7c 	bl	8000220 <strlen>
 8012728:	9b01      	ldr	r3, [sp, #4]
 801272a:	f8db 2000 	ldr.w	r2, [fp]
 801272e:	4403      	add	r3, r0
 8012730:	4682      	mov	sl, r0
 8012732:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012736:	9305      	str	r3, [sp, #20]
 8012738:	1c93      	adds	r3, r2, #2
 801273a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801273e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012742:	32fe      	adds	r2, #254	; 0xfe
 8012744:	18d1      	adds	r1, r2, r3
 8012746:	461f      	mov	r7, r3
 8012748:	f813 0b01 	ldrb.w	r0, [r3], #1
 801274c:	9100      	str	r1, [sp, #0]
 801274e:	2830      	cmp	r0, #48	; 0x30
 8012750:	d0f8      	beq.n	8012744 <__gethex+0x3c>
 8012752:	f7ff ffc4 	bl	80126de <__hexdig_fun>
 8012756:	4604      	mov	r4, r0
 8012758:	2800      	cmp	r0, #0
 801275a:	d13a      	bne.n	80127d2 <__gethex+0xca>
 801275c:	9901      	ldr	r1, [sp, #4]
 801275e:	4652      	mov	r2, sl
 8012760:	4638      	mov	r0, r7
 8012762:	f001 fb5c 	bl	8013e1e <strncmp>
 8012766:	4605      	mov	r5, r0
 8012768:	2800      	cmp	r0, #0
 801276a:	d168      	bne.n	801283e <__gethex+0x136>
 801276c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012770:	eb07 060a 	add.w	r6, r7, sl
 8012774:	f7ff ffb3 	bl	80126de <__hexdig_fun>
 8012778:	2800      	cmp	r0, #0
 801277a:	d062      	beq.n	8012842 <__gethex+0x13a>
 801277c:	4633      	mov	r3, r6
 801277e:	7818      	ldrb	r0, [r3, #0]
 8012780:	2830      	cmp	r0, #48	; 0x30
 8012782:	461f      	mov	r7, r3
 8012784:	f103 0301 	add.w	r3, r3, #1
 8012788:	d0f9      	beq.n	801277e <__gethex+0x76>
 801278a:	f7ff ffa8 	bl	80126de <__hexdig_fun>
 801278e:	2301      	movs	r3, #1
 8012790:	fab0 f480 	clz	r4, r0
 8012794:	0964      	lsrs	r4, r4, #5
 8012796:	4635      	mov	r5, r6
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	463a      	mov	r2, r7
 801279c:	4616      	mov	r6, r2
 801279e:	3201      	adds	r2, #1
 80127a0:	7830      	ldrb	r0, [r6, #0]
 80127a2:	f7ff ff9c 	bl	80126de <__hexdig_fun>
 80127a6:	2800      	cmp	r0, #0
 80127a8:	d1f8      	bne.n	801279c <__gethex+0x94>
 80127aa:	9901      	ldr	r1, [sp, #4]
 80127ac:	4652      	mov	r2, sl
 80127ae:	4630      	mov	r0, r6
 80127b0:	f001 fb35 	bl	8013e1e <strncmp>
 80127b4:	b980      	cbnz	r0, 80127d8 <__gethex+0xd0>
 80127b6:	b94d      	cbnz	r5, 80127cc <__gethex+0xc4>
 80127b8:	eb06 050a 	add.w	r5, r6, sl
 80127bc:	462a      	mov	r2, r5
 80127be:	4616      	mov	r6, r2
 80127c0:	3201      	adds	r2, #1
 80127c2:	7830      	ldrb	r0, [r6, #0]
 80127c4:	f7ff ff8b 	bl	80126de <__hexdig_fun>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d1f8      	bne.n	80127be <__gethex+0xb6>
 80127cc:	1bad      	subs	r5, r5, r6
 80127ce:	00ad      	lsls	r5, r5, #2
 80127d0:	e004      	b.n	80127dc <__gethex+0xd4>
 80127d2:	2400      	movs	r4, #0
 80127d4:	4625      	mov	r5, r4
 80127d6:	e7e0      	b.n	801279a <__gethex+0x92>
 80127d8:	2d00      	cmp	r5, #0
 80127da:	d1f7      	bne.n	80127cc <__gethex+0xc4>
 80127dc:	7833      	ldrb	r3, [r6, #0]
 80127de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80127e2:	2b50      	cmp	r3, #80	; 0x50
 80127e4:	d13b      	bne.n	801285e <__gethex+0x156>
 80127e6:	7873      	ldrb	r3, [r6, #1]
 80127e8:	2b2b      	cmp	r3, #43	; 0x2b
 80127ea:	d02c      	beq.n	8012846 <__gethex+0x13e>
 80127ec:	2b2d      	cmp	r3, #45	; 0x2d
 80127ee:	d02e      	beq.n	801284e <__gethex+0x146>
 80127f0:	1c71      	adds	r1, r6, #1
 80127f2:	f04f 0900 	mov.w	r9, #0
 80127f6:	7808      	ldrb	r0, [r1, #0]
 80127f8:	f7ff ff71 	bl	80126de <__hexdig_fun>
 80127fc:	1e43      	subs	r3, r0, #1
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	2b18      	cmp	r3, #24
 8012802:	d82c      	bhi.n	801285e <__gethex+0x156>
 8012804:	f1a0 0210 	sub.w	r2, r0, #16
 8012808:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801280c:	f7ff ff67 	bl	80126de <__hexdig_fun>
 8012810:	1e43      	subs	r3, r0, #1
 8012812:	b2db      	uxtb	r3, r3
 8012814:	2b18      	cmp	r3, #24
 8012816:	d91d      	bls.n	8012854 <__gethex+0x14c>
 8012818:	f1b9 0f00 	cmp.w	r9, #0
 801281c:	d000      	beq.n	8012820 <__gethex+0x118>
 801281e:	4252      	negs	r2, r2
 8012820:	4415      	add	r5, r2
 8012822:	f8cb 1000 	str.w	r1, [fp]
 8012826:	b1e4      	cbz	r4, 8012862 <__gethex+0x15a>
 8012828:	9b00      	ldr	r3, [sp, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	bf14      	ite	ne
 801282e:	2700      	movne	r7, #0
 8012830:	2706      	moveq	r7, #6
 8012832:	4638      	mov	r0, r7
 8012834:	b009      	add	sp, #36	; 0x24
 8012836:	ecbd 8b02 	vpop	{d8}
 801283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283e:	463e      	mov	r6, r7
 8012840:	4625      	mov	r5, r4
 8012842:	2401      	movs	r4, #1
 8012844:	e7ca      	b.n	80127dc <__gethex+0xd4>
 8012846:	f04f 0900 	mov.w	r9, #0
 801284a:	1cb1      	adds	r1, r6, #2
 801284c:	e7d3      	b.n	80127f6 <__gethex+0xee>
 801284e:	f04f 0901 	mov.w	r9, #1
 8012852:	e7fa      	b.n	801284a <__gethex+0x142>
 8012854:	230a      	movs	r3, #10
 8012856:	fb03 0202 	mla	r2, r3, r2, r0
 801285a:	3a10      	subs	r2, #16
 801285c:	e7d4      	b.n	8012808 <__gethex+0x100>
 801285e:	4631      	mov	r1, r6
 8012860:	e7df      	b.n	8012822 <__gethex+0x11a>
 8012862:	1bf3      	subs	r3, r6, r7
 8012864:	3b01      	subs	r3, #1
 8012866:	4621      	mov	r1, r4
 8012868:	2b07      	cmp	r3, #7
 801286a:	dc0b      	bgt.n	8012884 <__gethex+0x17c>
 801286c:	ee18 0a10 	vmov	r0, s16
 8012870:	f000 faf2 	bl	8012e58 <_Balloc>
 8012874:	4604      	mov	r4, r0
 8012876:	b940      	cbnz	r0, 801288a <__gethex+0x182>
 8012878:	4b5d      	ldr	r3, [pc, #372]	; (80129f0 <__gethex+0x2e8>)
 801287a:	4602      	mov	r2, r0
 801287c:	21de      	movs	r1, #222	; 0xde
 801287e:	485d      	ldr	r0, [pc, #372]	; (80129f4 <__gethex+0x2ec>)
 8012880:	f7fc fe56 	bl	800f530 <__assert_func>
 8012884:	3101      	adds	r1, #1
 8012886:	105b      	asrs	r3, r3, #1
 8012888:	e7ee      	b.n	8012868 <__gethex+0x160>
 801288a:	f100 0914 	add.w	r9, r0, #20
 801288e:	f04f 0b00 	mov.w	fp, #0
 8012892:	f1ca 0301 	rsb	r3, sl, #1
 8012896:	f8cd 9008 	str.w	r9, [sp, #8]
 801289a:	f8cd b000 	str.w	fp, [sp]
 801289e:	9306      	str	r3, [sp, #24]
 80128a0:	42b7      	cmp	r7, r6
 80128a2:	d340      	bcc.n	8012926 <__gethex+0x21e>
 80128a4:	9802      	ldr	r0, [sp, #8]
 80128a6:	9b00      	ldr	r3, [sp, #0]
 80128a8:	f840 3b04 	str.w	r3, [r0], #4
 80128ac:	eba0 0009 	sub.w	r0, r0, r9
 80128b0:	1080      	asrs	r0, r0, #2
 80128b2:	0146      	lsls	r6, r0, #5
 80128b4:	6120      	str	r0, [r4, #16]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f000 fbc0 	bl	801303c <__hi0bits>
 80128bc:	1a30      	subs	r0, r6, r0
 80128be:	f8d8 6000 	ldr.w	r6, [r8]
 80128c2:	42b0      	cmp	r0, r6
 80128c4:	dd63      	ble.n	801298e <__gethex+0x286>
 80128c6:	1b87      	subs	r7, r0, r6
 80128c8:	4639      	mov	r1, r7
 80128ca:	4620      	mov	r0, r4
 80128cc:	f000 ff64 	bl	8013798 <__any_on>
 80128d0:	4682      	mov	sl, r0
 80128d2:	b1a8      	cbz	r0, 8012900 <__gethex+0x1f8>
 80128d4:	1e7b      	subs	r3, r7, #1
 80128d6:	1159      	asrs	r1, r3, #5
 80128d8:	f003 021f 	and.w	r2, r3, #31
 80128dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80128e0:	f04f 0a01 	mov.w	sl, #1
 80128e4:	fa0a f202 	lsl.w	r2, sl, r2
 80128e8:	420a      	tst	r2, r1
 80128ea:	d009      	beq.n	8012900 <__gethex+0x1f8>
 80128ec:	4553      	cmp	r3, sl
 80128ee:	dd05      	ble.n	80128fc <__gethex+0x1f4>
 80128f0:	1eb9      	subs	r1, r7, #2
 80128f2:	4620      	mov	r0, r4
 80128f4:	f000 ff50 	bl	8013798 <__any_on>
 80128f8:	2800      	cmp	r0, #0
 80128fa:	d145      	bne.n	8012988 <__gethex+0x280>
 80128fc:	f04f 0a02 	mov.w	sl, #2
 8012900:	4639      	mov	r1, r7
 8012902:	4620      	mov	r0, r4
 8012904:	f7ff fe99 	bl	801263a <rshift>
 8012908:	443d      	add	r5, r7
 801290a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801290e:	42ab      	cmp	r3, r5
 8012910:	da4c      	bge.n	80129ac <__gethex+0x2a4>
 8012912:	ee18 0a10 	vmov	r0, s16
 8012916:	4621      	mov	r1, r4
 8012918:	f000 fade 	bl	8012ed8 <_Bfree>
 801291c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801291e:	2300      	movs	r3, #0
 8012920:	6013      	str	r3, [r2, #0]
 8012922:	27a3      	movs	r7, #163	; 0xa3
 8012924:	e785      	b.n	8012832 <__gethex+0x12a>
 8012926:	1e73      	subs	r3, r6, #1
 8012928:	9a05      	ldr	r2, [sp, #20]
 801292a:	9303      	str	r3, [sp, #12]
 801292c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012930:	4293      	cmp	r3, r2
 8012932:	d019      	beq.n	8012968 <__gethex+0x260>
 8012934:	f1bb 0f20 	cmp.w	fp, #32
 8012938:	d107      	bne.n	801294a <__gethex+0x242>
 801293a:	9b02      	ldr	r3, [sp, #8]
 801293c:	9a00      	ldr	r2, [sp, #0]
 801293e:	f843 2b04 	str.w	r2, [r3], #4
 8012942:	9302      	str	r3, [sp, #8]
 8012944:	2300      	movs	r3, #0
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	469b      	mov	fp, r3
 801294a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801294e:	f7ff fec6 	bl	80126de <__hexdig_fun>
 8012952:	9b00      	ldr	r3, [sp, #0]
 8012954:	f000 000f 	and.w	r0, r0, #15
 8012958:	fa00 f00b 	lsl.w	r0, r0, fp
 801295c:	4303      	orrs	r3, r0
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	f10b 0b04 	add.w	fp, fp, #4
 8012964:	9b03      	ldr	r3, [sp, #12]
 8012966:	e00d      	b.n	8012984 <__gethex+0x27c>
 8012968:	9b03      	ldr	r3, [sp, #12]
 801296a:	9a06      	ldr	r2, [sp, #24]
 801296c:	4413      	add	r3, r2
 801296e:	42bb      	cmp	r3, r7
 8012970:	d3e0      	bcc.n	8012934 <__gethex+0x22c>
 8012972:	4618      	mov	r0, r3
 8012974:	9901      	ldr	r1, [sp, #4]
 8012976:	9307      	str	r3, [sp, #28]
 8012978:	4652      	mov	r2, sl
 801297a:	f001 fa50 	bl	8013e1e <strncmp>
 801297e:	9b07      	ldr	r3, [sp, #28]
 8012980:	2800      	cmp	r0, #0
 8012982:	d1d7      	bne.n	8012934 <__gethex+0x22c>
 8012984:	461e      	mov	r6, r3
 8012986:	e78b      	b.n	80128a0 <__gethex+0x198>
 8012988:	f04f 0a03 	mov.w	sl, #3
 801298c:	e7b8      	b.n	8012900 <__gethex+0x1f8>
 801298e:	da0a      	bge.n	80129a6 <__gethex+0x29e>
 8012990:	1a37      	subs	r7, r6, r0
 8012992:	4621      	mov	r1, r4
 8012994:	ee18 0a10 	vmov	r0, s16
 8012998:	463a      	mov	r2, r7
 801299a:	f000 fcb9 	bl	8013310 <__lshift>
 801299e:	1bed      	subs	r5, r5, r7
 80129a0:	4604      	mov	r4, r0
 80129a2:	f100 0914 	add.w	r9, r0, #20
 80129a6:	f04f 0a00 	mov.w	sl, #0
 80129aa:	e7ae      	b.n	801290a <__gethex+0x202>
 80129ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80129b0:	42a8      	cmp	r0, r5
 80129b2:	dd72      	ble.n	8012a9a <__gethex+0x392>
 80129b4:	1b45      	subs	r5, r0, r5
 80129b6:	42ae      	cmp	r6, r5
 80129b8:	dc36      	bgt.n	8012a28 <__gethex+0x320>
 80129ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129be:	2b02      	cmp	r3, #2
 80129c0:	d02a      	beq.n	8012a18 <__gethex+0x310>
 80129c2:	2b03      	cmp	r3, #3
 80129c4:	d02c      	beq.n	8012a20 <__gethex+0x318>
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d11c      	bne.n	8012a04 <__gethex+0x2fc>
 80129ca:	42ae      	cmp	r6, r5
 80129cc:	d11a      	bne.n	8012a04 <__gethex+0x2fc>
 80129ce:	2e01      	cmp	r6, #1
 80129d0:	d112      	bne.n	80129f8 <__gethex+0x2f0>
 80129d2:	9a04      	ldr	r2, [sp, #16]
 80129d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80129d8:	6013      	str	r3, [r2, #0]
 80129da:	2301      	movs	r3, #1
 80129dc:	6123      	str	r3, [r4, #16]
 80129de:	f8c9 3000 	str.w	r3, [r9]
 80129e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129e4:	2762      	movs	r7, #98	; 0x62
 80129e6:	601c      	str	r4, [r3, #0]
 80129e8:	e723      	b.n	8012832 <__gethex+0x12a>
 80129ea:	bf00      	nop
 80129ec:	0802ae1c 	.word	0x0802ae1c
 80129f0:	0802ad23 	.word	0x0802ad23
 80129f4:	0802ad94 	.word	0x0802ad94
 80129f8:	1e71      	subs	r1, r6, #1
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fecc 	bl	8013798 <__any_on>
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d1e6      	bne.n	80129d2 <__gethex+0x2ca>
 8012a04:	ee18 0a10 	vmov	r0, s16
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f000 fa65 	bl	8012ed8 <_Bfree>
 8012a0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a10:	2300      	movs	r3, #0
 8012a12:	6013      	str	r3, [r2, #0]
 8012a14:	2750      	movs	r7, #80	; 0x50
 8012a16:	e70c      	b.n	8012832 <__gethex+0x12a>
 8012a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d1f2      	bne.n	8012a04 <__gethex+0x2fc>
 8012a1e:	e7d8      	b.n	80129d2 <__gethex+0x2ca>
 8012a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d1d5      	bne.n	80129d2 <__gethex+0x2ca>
 8012a26:	e7ed      	b.n	8012a04 <__gethex+0x2fc>
 8012a28:	1e6f      	subs	r7, r5, #1
 8012a2a:	f1ba 0f00 	cmp.w	sl, #0
 8012a2e:	d131      	bne.n	8012a94 <__gethex+0x38c>
 8012a30:	b127      	cbz	r7, 8012a3c <__gethex+0x334>
 8012a32:	4639      	mov	r1, r7
 8012a34:	4620      	mov	r0, r4
 8012a36:	f000 feaf 	bl	8013798 <__any_on>
 8012a3a:	4682      	mov	sl, r0
 8012a3c:	117b      	asrs	r3, r7, #5
 8012a3e:	2101      	movs	r1, #1
 8012a40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012a44:	f007 071f 	and.w	r7, r7, #31
 8012a48:	fa01 f707 	lsl.w	r7, r1, r7
 8012a4c:	421f      	tst	r7, r3
 8012a4e:	4629      	mov	r1, r5
 8012a50:	4620      	mov	r0, r4
 8012a52:	bf18      	it	ne
 8012a54:	f04a 0a02 	orrne.w	sl, sl, #2
 8012a58:	1b76      	subs	r6, r6, r5
 8012a5a:	f7ff fdee 	bl	801263a <rshift>
 8012a5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012a62:	2702      	movs	r7, #2
 8012a64:	f1ba 0f00 	cmp.w	sl, #0
 8012a68:	d048      	beq.n	8012afc <__gethex+0x3f4>
 8012a6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a6e:	2b02      	cmp	r3, #2
 8012a70:	d015      	beq.n	8012a9e <__gethex+0x396>
 8012a72:	2b03      	cmp	r3, #3
 8012a74:	d017      	beq.n	8012aa6 <__gethex+0x39e>
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d109      	bne.n	8012a8e <__gethex+0x386>
 8012a7a:	f01a 0f02 	tst.w	sl, #2
 8012a7e:	d006      	beq.n	8012a8e <__gethex+0x386>
 8012a80:	f8d9 0000 	ldr.w	r0, [r9]
 8012a84:	ea4a 0a00 	orr.w	sl, sl, r0
 8012a88:	f01a 0f01 	tst.w	sl, #1
 8012a8c:	d10e      	bne.n	8012aac <__gethex+0x3a4>
 8012a8e:	f047 0710 	orr.w	r7, r7, #16
 8012a92:	e033      	b.n	8012afc <__gethex+0x3f4>
 8012a94:	f04f 0a01 	mov.w	sl, #1
 8012a98:	e7d0      	b.n	8012a3c <__gethex+0x334>
 8012a9a:	2701      	movs	r7, #1
 8012a9c:	e7e2      	b.n	8012a64 <__gethex+0x35c>
 8012a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012aa0:	f1c3 0301 	rsb	r3, r3, #1
 8012aa4:	9315      	str	r3, [sp, #84]	; 0x54
 8012aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d0f0      	beq.n	8012a8e <__gethex+0x386>
 8012aac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012ab0:	f104 0314 	add.w	r3, r4, #20
 8012ab4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012ab8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012abc:	f04f 0c00 	mov.w	ip, #0
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ac6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012aca:	d01c      	beq.n	8012b06 <__gethex+0x3fe>
 8012acc:	3201      	adds	r2, #1
 8012ace:	6002      	str	r2, [r0, #0]
 8012ad0:	2f02      	cmp	r7, #2
 8012ad2:	f104 0314 	add.w	r3, r4, #20
 8012ad6:	d13f      	bne.n	8012b58 <__gethex+0x450>
 8012ad8:	f8d8 2000 	ldr.w	r2, [r8]
 8012adc:	3a01      	subs	r2, #1
 8012ade:	42b2      	cmp	r2, r6
 8012ae0:	d10a      	bne.n	8012af8 <__gethex+0x3f0>
 8012ae2:	1171      	asrs	r1, r6, #5
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012aea:	f006 061f 	and.w	r6, r6, #31
 8012aee:	fa02 f606 	lsl.w	r6, r2, r6
 8012af2:	421e      	tst	r6, r3
 8012af4:	bf18      	it	ne
 8012af6:	4617      	movne	r7, r2
 8012af8:	f047 0720 	orr.w	r7, r7, #32
 8012afc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012afe:	601c      	str	r4, [r3, #0]
 8012b00:	9b04      	ldr	r3, [sp, #16]
 8012b02:	601d      	str	r5, [r3, #0]
 8012b04:	e695      	b.n	8012832 <__gethex+0x12a>
 8012b06:	4299      	cmp	r1, r3
 8012b08:	f843 cc04 	str.w	ip, [r3, #-4]
 8012b0c:	d8d8      	bhi.n	8012ac0 <__gethex+0x3b8>
 8012b0e:	68a3      	ldr	r3, [r4, #8]
 8012b10:	459b      	cmp	fp, r3
 8012b12:	db19      	blt.n	8012b48 <__gethex+0x440>
 8012b14:	6861      	ldr	r1, [r4, #4]
 8012b16:	ee18 0a10 	vmov	r0, s16
 8012b1a:	3101      	adds	r1, #1
 8012b1c:	f000 f99c 	bl	8012e58 <_Balloc>
 8012b20:	4681      	mov	r9, r0
 8012b22:	b918      	cbnz	r0, 8012b2c <__gethex+0x424>
 8012b24:	4b1a      	ldr	r3, [pc, #104]	; (8012b90 <__gethex+0x488>)
 8012b26:	4602      	mov	r2, r0
 8012b28:	2184      	movs	r1, #132	; 0x84
 8012b2a:	e6a8      	b.n	801287e <__gethex+0x176>
 8012b2c:	6922      	ldr	r2, [r4, #16]
 8012b2e:	3202      	adds	r2, #2
 8012b30:	f104 010c 	add.w	r1, r4, #12
 8012b34:	0092      	lsls	r2, r2, #2
 8012b36:	300c      	adds	r0, #12
 8012b38:	f7fc fd54 	bl	800f5e4 <memcpy>
 8012b3c:	4621      	mov	r1, r4
 8012b3e:	ee18 0a10 	vmov	r0, s16
 8012b42:	f000 f9c9 	bl	8012ed8 <_Bfree>
 8012b46:	464c      	mov	r4, r9
 8012b48:	6923      	ldr	r3, [r4, #16]
 8012b4a:	1c5a      	adds	r2, r3, #1
 8012b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b50:	6122      	str	r2, [r4, #16]
 8012b52:	2201      	movs	r2, #1
 8012b54:	615a      	str	r2, [r3, #20]
 8012b56:	e7bb      	b.n	8012ad0 <__gethex+0x3c8>
 8012b58:	6922      	ldr	r2, [r4, #16]
 8012b5a:	455a      	cmp	r2, fp
 8012b5c:	dd0b      	ble.n	8012b76 <__gethex+0x46e>
 8012b5e:	2101      	movs	r1, #1
 8012b60:	4620      	mov	r0, r4
 8012b62:	f7ff fd6a 	bl	801263a <rshift>
 8012b66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b6a:	3501      	adds	r5, #1
 8012b6c:	42ab      	cmp	r3, r5
 8012b6e:	f6ff aed0 	blt.w	8012912 <__gethex+0x20a>
 8012b72:	2701      	movs	r7, #1
 8012b74:	e7c0      	b.n	8012af8 <__gethex+0x3f0>
 8012b76:	f016 061f 	ands.w	r6, r6, #31
 8012b7a:	d0fa      	beq.n	8012b72 <__gethex+0x46a>
 8012b7c:	4453      	add	r3, sl
 8012b7e:	f1c6 0620 	rsb	r6, r6, #32
 8012b82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b86:	f000 fa59 	bl	801303c <__hi0bits>
 8012b8a:	42b0      	cmp	r0, r6
 8012b8c:	dbe7      	blt.n	8012b5e <__gethex+0x456>
 8012b8e:	e7f0      	b.n	8012b72 <__gethex+0x46a>
 8012b90:	0802ad23 	.word	0x0802ad23

08012b94 <L_shift>:
 8012b94:	f1c2 0208 	rsb	r2, r2, #8
 8012b98:	0092      	lsls	r2, r2, #2
 8012b9a:	b570      	push	{r4, r5, r6, lr}
 8012b9c:	f1c2 0620 	rsb	r6, r2, #32
 8012ba0:	6843      	ldr	r3, [r0, #4]
 8012ba2:	6804      	ldr	r4, [r0, #0]
 8012ba4:	fa03 f506 	lsl.w	r5, r3, r6
 8012ba8:	432c      	orrs	r4, r5
 8012baa:	40d3      	lsrs	r3, r2
 8012bac:	6004      	str	r4, [r0, #0]
 8012bae:	f840 3f04 	str.w	r3, [r0, #4]!
 8012bb2:	4288      	cmp	r0, r1
 8012bb4:	d3f4      	bcc.n	8012ba0 <L_shift+0xc>
 8012bb6:	bd70      	pop	{r4, r5, r6, pc}

08012bb8 <__match>:
 8012bb8:	b530      	push	{r4, r5, lr}
 8012bba:	6803      	ldr	r3, [r0, #0]
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bc2:	b914      	cbnz	r4, 8012bca <__match+0x12>
 8012bc4:	6003      	str	r3, [r0, #0]
 8012bc6:	2001      	movs	r0, #1
 8012bc8:	bd30      	pop	{r4, r5, pc}
 8012bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012bd2:	2d19      	cmp	r5, #25
 8012bd4:	bf98      	it	ls
 8012bd6:	3220      	addls	r2, #32
 8012bd8:	42a2      	cmp	r2, r4
 8012bda:	d0f0      	beq.n	8012bbe <__match+0x6>
 8012bdc:	2000      	movs	r0, #0
 8012bde:	e7f3      	b.n	8012bc8 <__match+0x10>

08012be0 <__hexnan>:
 8012be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be4:	680b      	ldr	r3, [r1, #0]
 8012be6:	115e      	asrs	r6, r3, #5
 8012be8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012bec:	f013 031f 	ands.w	r3, r3, #31
 8012bf0:	b087      	sub	sp, #28
 8012bf2:	bf18      	it	ne
 8012bf4:	3604      	addne	r6, #4
 8012bf6:	2500      	movs	r5, #0
 8012bf8:	1f37      	subs	r7, r6, #4
 8012bfa:	4690      	mov	r8, r2
 8012bfc:	6802      	ldr	r2, [r0, #0]
 8012bfe:	9301      	str	r3, [sp, #4]
 8012c00:	4682      	mov	sl, r0
 8012c02:	f846 5c04 	str.w	r5, [r6, #-4]
 8012c06:	46b9      	mov	r9, r7
 8012c08:	463c      	mov	r4, r7
 8012c0a:	9502      	str	r5, [sp, #8]
 8012c0c:	46ab      	mov	fp, r5
 8012c0e:	7851      	ldrb	r1, [r2, #1]
 8012c10:	1c53      	adds	r3, r2, #1
 8012c12:	9303      	str	r3, [sp, #12]
 8012c14:	b341      	cbz	r1, 8012c68 <__hexnan+0x88>
 8012c16:	4608      	mov	r0, r1
 8012c18:	9205      	str	r2, [sp, #20]
 8012c1a:	9104      	str	r1, [sp, #16]
 8012c1c:	f7ff fd5f 	bl	80126de <__hexdig_fun>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	d14f      	bne.n	8012cc4 <__hexnan+0xe4>
 8012c24:	9904      	ldr	r1, [sp, #16]
 8012c26:	9a05      	ldr	r2, [sp, #20]
 8012c28:	2920      	cmp	r1, #32
 8012c2a:	d818      	bhi.n	8012c5e <__hexnan+0x7e>
 8012c2c:	9b02      	ldr	r3, [sp, #8]
 8012c2e:	459b      	cmp	fp, r3
 8012c30:	dd13      	ble.n	8012c5a <__hexnan+0x7a>
 8012c32:	454c      	cmp	r4, r9
 8012c34:	d206      	bcs.n	8012c44 <__hexnan+0x64>
 8012c36:	2d07      	cmp	r5, #7
 8012c38:	dc04      	bgt.n	8012c44 <__hexnan+0x64>
 8012c3a:	462a      	mov	r2, r5
 8012c3c:	4649      	mov	r1, r9
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f7ff ffa8 	bl	8012b94 <L_shift>
 8012c44:	4544      	cmp	r4, r8
 8012c46:	d950      	bls.n	8012cea <__hexnan+0x10a>
 8012c48:	2300      	movs	r3, #0
 8012c4a:	f1a4 0904 	sub.w	r9, r4, #4
 8012c4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c52:	f8cd b008 	str.w	fp, [sp, #8]
 8012c56:	464c      	mov	r4, r9
 8012c58:	461d      	mov	r5, r3
 8012c5a:	9a03      	ldr	r2, [sp, #12]
 8012c5c:	e7d7      	b.n	8012c0e <__hexnan+0x2e>
 8012c5e:	2929      	cmp	r1, #41	; 0x29
 8012c60:	d156      	bne.n	8012d10 <__hexnan+0x130>
 8012c62:	3202      	adds	r2, #2
 8012c64:	f8ca 2000 	str.w	r2, [sl]
 8012c68:	f1bb 0f00 	cmp.w	fp, #0
 8012c6c:	d050      	beq.n	8012d10 <__hexnan+0x130>
 8012c6e:	454c      	cmp	r4, r9
 8012c70:	d206      	bcs.n	8012c80 <__hexnan+0xa0>
 8012c72:	2d07      	cmp	r5, #7
 8012c74:	dc04      	bgt.n	8012c80 <__hexnan+0xa0>
 8012c76:	462a      	mov	r2, r5
 8012c78:	4649      	mov	r1, r9
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f7ff ff8a 	bl	8012b94 <L_shift>
 8012c80:	4544      	cmp	r4, r8
 8012c82:	d934      	bls.n	8012cee <__hexnan+0x10e>
 8012c84:	f1a8 0204 	sub.w	r2, r8, #4
 8012c88:	4623      	mov	r3, r4
 8012c8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c92:	429f      	cmp	r7, r3
 8012c94:	d2f9      	bcs.n	8012c8a <__hexnan+0xaa>
 8012c96:	1b3b      	subs	r3, r7, r4
 8012c98:	f023 0303 	bic.w	r3, r3, #3
 8012c9c:	3304      	adds	r3, #4
 8012c9e:	3401      	adds	r4, #1
 8012ca0:	3e03      	subs	r6, #3
 8012ca2:	42b4      	cmp	r4, r6
 8012ca4:	bf88      	it	hi
 8012ca6:	2304      	movhi	r3, #4
 8012ca8:	4443      	add	r3, r8
 8012caa:	2200      	movs	r2, #0
 8012cac:	f843 2b04 	str.w	r2, [r3], #4
 8012cb0:	429f      	cmp	r7, r3
 8012cb2:	d2fb      	bcs.n	8012cac <__hexnan+0xcc>
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	b91b      	cbnz	r3, 8012cc0 <__hexnan+0xe0>
 8012cb8:	4547      	cmp	r7, r8
 8012cba:	d127      	bne.n	8012d0c <__hexnan+0x12c>
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	603b      	str	r3, [r7, #0]
 8012cc0:	2005      	movs	r0, #5
 8012cc2:	e026      	b.n	8012d12 <__hexnan+0x132>
 8012cc4:	3501      	adds	r5, #1
 8012cc6:	2d08      	cmp	r5, #8
 8012cc8:	f10b 0b01 	add.w	fp, fp, #1
 8012ccc:	dd06      	ble.n	8012cdc <__hexnan+0xfc>
 8012cce:	4544      	cmp	r4, r8
 8012cd0:	d9c3      	bls.n	8012c5a <__hexnan+0x7a>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8012cd8:	2501      	movs	r5, #1
 8012cda:	3c04      	subs	r4, #4
 8012cdc:	6822      	ldr	r2, [r4, #0]
 8012cde:	f000 000f 	and.w	r0, r0, #15
 8012ce2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012ce6:	6022      	str	r2, [r4, #0]
 8012ce8:	e7b7      	b.n	8012c5a <__hexnan+0x7a>
 8012cea:	2508      	movs	r5, #8
 8012cec:	e7b5      	b.n	8012c5a <__hexnan+0x7a>
 8012cee:	9b01      	ldr	r3, [sp, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d0df      	beq.n	8012cb4 <__hexnan+0xd4>
 8012cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8012cf8:	f1c3 0320 	rsb	r3, r3, #32
 8012cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8012d00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012d04:	401a      	ands	r2, r3
 8012d06:	f846 2c04 	str.w	r2, [r6, #-4]
 8012d0a:	e7d3      	b.n	8012cb4 <__hexnan+0xd4>
 8012d0c:	3f04      	subs	r7, #4
 8012d0e:	e7d1      	b.n	8012cb4 <__hexnan+0xd4>
 8012d10:	2004      	movs	r0, #4
 8012d12:	b007      	add	sp, #28
 8012d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d18 <_localeconv_r>:
 8012d18:	4800      	ldr	r0, [pc, #0]	; (8012d1c <_localeconv_r+0x4>)
 8012d1a:	4770      	bx	lr
 8012d1c:	20000234 	.word	0x20000234

08012d20 <__retarget_lock_init_recursive>:
 8012d20:	4770      	bx	lr

08012d22 <__retarget_lock_acquire_recursive>:
 8012d22:	4770      	bx	lr

08012d24 <__retarget_lock_release_recursive>:
 8012d24:	4770      	bx	lr

08012d26 <__swhatbuf_r>:
 8012d26:	b570      	push	{r4, r5, r6, lr}
 8012d28:	460e      	mov	r6, r1
 8012d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d2e:	2900      	cmp	r1, #0
 8012d30:	b096      	sub	sp, #88	; 0x58
 8012d32:	4614      	mov	r4, r2
 8012d34:	461d      	mov	r5, r3
 8012d36:	da08      	bge.n	8012d4a <__swhatbuf_r+0x24>
 8012d38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	602a      	str	r2, [r5, #0]
 8012d40:	061a      	lsls	r2, r3, #24
 8012d42:	d410      	bmi.n	8012d66 <__swhatbuf_r+0x40>
 8012d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d48:	e00e      	b.n	8012d68 <__swhatbuf_r+0x42>
 8012d4a:	466a      	mov	r2, sp
 8012d4c:	f001 f8aa 	bl	8013ea4 <_fstat_r>
 8012d50:	2800      	cmp	r0, #0
 8012d52:	dbf1      	blt.n	8012d38 <__swhatbuf_r+0x12>
 8012d54:	9a01      	ldr	r2, [sp, #4]
 8012d56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d5e:	425a      	negs	r2, r3
 8012d60:	415a      	adcs	r2, r3
 8012d62:	602a      	str	r2, [r5, #0]
 8012d64:	e7ee      	b.n	8012d44 <__swhatbuf_r+0x1e>
 8012d66:	2340      	movs	r3, #64	; 0x40
 8012d68:	2000      	movs	r0, #0
 8012d6a:	6023      	str	r3, [r4, #0]
 8012d6c:	b016      	add	sp, #88	; 0x58
 8012d6e:	bd70      	pop	{r4, r5, r6, pc}

08012d70 <__smakebuf_r>:
 8012d70:	898b      	ldrh	r3, [r1, #12]
 8012d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d74:	079d      	lsls	r5, r3, #30
 8012d76:	4606      	mov	r6, r0
 8012d78:	460c      	mov	r4, r1
 8012d7a:	d507      	bpl.n	8012d8c <__smakebuf_r+0x1c>
 8012d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d80:	6023      	str	r3, [r4, #0]
 8012d82:	6123      	str	r3, [r4, #16]
 8012d84:	2301      	movs	r3, #1
 8012d86:	6163      	str	r3, [r4, #20]
 8012d88:	b002      	add	sp, #8
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	ab01      	add	r3, sp, #4
 8012d8e:	466a      	mov	r2, sp
 8012d90:	f7ff ffc9 	bl	8012d26 <__swhatbuf_r>
 8012d94:	9900      	ldr	r1, [sp, #0]
 8012d96:	4605      	mov	r5, r0
 8012d98:	4630      	mov	r0, r6
 8012d9a:	f000 fda1 	bl	80138e0 <_malloc_r>
 8012d9e:	b948      	cbnz	r0, 8012db4 <__smakebuf_r+0x44>
 8012da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012da4:	059a      	lsls	r2, r3, #22
 8012da6:	d4ef      	bmi.n	8012d88 <__smakebuf_r+0x18>
 8012da8:	f023 0303 	bic.w	r3, r3, #3
 8012dac:	f043 0302 	orr.w	r3, r3, #2
 8012db0:	81a3      	strh	r3, [r4, #12]
 8012db2:	e7e3      	b.n	8012d7c <__smakebuf_r+0xc>
 8012db4:	4b0d      	ldr	r3, [pc, #52]	; (8012dec <__smakebuf_r+0x7c>)
 8012db6:	62b3      	str	r3, [r6, #40]	; 0x28
 8012db8:	89a3      	ldrh	r3, [r4, #12]
 8012dba:	6020      	str	r0, [r4, #0]
 8012dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dc0:	81a3      	strh	r3, [r4, #12]
 8012dc2:	9b00      	ldr	r3, [sp, #0]
 8012dc4:	6163      	str	r3, [r4, #20]
 8012dc6:	9b01      	ldr	r3, [sp, #4]
 8012dc8:	6120      	str	r0, [r4, #16]
 8012dca:	b15b      	cbz	r3, 8012de4 <__smakebuf_r+0x74>
 8012dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	f001 f879 	bl	8013ec8 <_isatty_r>
 8012dd6:	b128      	cbz	r0, 8012de4 <__smakebuf_r+0x74>
 8012dd8:	89a3      	ldrh	r3, [r4, #12]
 8012dda:	f023 0303 	bic.w	r3, r3, #3
 8012dde:	f043 0301 	orr.w	r3, r3, #1
 8012de2:	81a3      	strh	r3, [r4, #12]
 8012de4:	89a0      	ldrh	r0, [r4, #12]
 8012de6:	4305      	orrs	r5, r0
 8012de8:	81a5      	strh	r5, [r4, #12]
 8012dea:	e7cd      	b.n	8012d88 <__smakebuf_r+0x18>
 8012dec:	08012499 	.word	0x08012499

08012df0 <malloc>:
 8012df0:	4b02      	ldr	r3, [pc, #8]	; (8012dfc <malloc+0xc>)
 8012df2:	4601      	mov	r1, r0
 8012df4:	6818      	ldr	r0, [r3, #0]
 8012df6:	f000 bd73 	b.w	80138e0 <_malloc_r>
 8012dfa:	bf00      	nop
 8012dfc:	200000dc 	.word	0x200000dc

08012e00 <__ascii_mbtowc>:
 8012e00:	b082      	sub	sp, #8
 8012e02:	b901      	cbnz	r1, 8012e06 <__ascii_mbtowc+0x6>
 8012e04:	a901      	add	r1, sp, #4
 8012e06:	b142      	cbz	r2, 8012e1a <__ascii_mbtowc+0x1a>
 8012e08:	b14b      	cbz	r3, 8012e1e <__ascii_mbtowc+0x1e>
 8012e0a:	7813      	ldrb	r3, [r2, #0]
 8012e0c:	600b      	str	r3, [r1, #0]
 8012e0e:	7812      	ldrb	r2, [r2, #0]
 8012e10:	1e10      	subs	r0, r2, #0
 8012e12:	bf18      	it	ne
 8012e14:	2001      	movne	r0, #1
 8012e16:	b002      	add	sp, #8
 8012e18:	4770      	bx	lr
 8012e1a:	4610      	mov	r0, r2
 8012e1c:	e7fb      	b.n	8012e16 <__ascii_mbtowc+0x16>
 8012e1e:	f06f 0001 	mvn.w	r0, #1
 8012e22:	e7f8      	b.n	8012e16 <__ascii_mbtowc+0x16>

08012e24 <memmove>:
 8012e24:	4288      	cmp	r0, r1
 8012e26:	b510      	push	{r4, lr}
 8012e28:	eb01 0402 	add.w	r4, r1, r2
 8012e2c:	d902      	bls.n	8012e34 <memmove+0x10>
 8012e2e:	4284      	cmp	r4, r0
 8012e30:	4623      	mov	r3, r4
 8012e32:	d807      	bhi.n	8012e44 <memmove+0x20>
 8012e34:	1e43      	subs	r3, r0, #1
 8012e36:	42a1      	cmp	r1, r4
 8012e38:	d008      	beq.n	8012e4c <memmove+0x28>
 8012e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e42:	e7f8      	b.n	8012e36 <memmove+0x12>
 8012e44:	4402      	add	r2, r0
 8012e46:	4601      	mov	r1, r0
 8012e48:	428a      	cmp	r2, r1
 8012e4a:	d100      	bne.n	8012e4e <memmove+0x2a>
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e56:	e7f7      	b.n	8012e48 <memmove+0x24>

08012e58 <_Balloc>:
 8012e58:	b570      	push	{r4, r5, r6, lr}
 8012e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	460d      	mov	r5, r1
 8012e60:	b976      	cbnz	r6, 8012e80 <_Balloc+0x28>
 8012e62:	2010      	movs	r0, #16
 8012e64:	f7ff ffc4 	bl	8012df0 <malloc>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e6c:	b920      	cbnz	r0, 8012e78 <_Balloc+0x20>
 8012e6e:	4b18      	ldr	r3, [pc, #96]	; (8012ed0 <_Balloc+0x78>)
 8012e70:	4818      	ldr	r0, [pc, #96]	; (8012ed4 <_Balloc+0x7c>)
 8012e72:	2166      	movs	r1, #102	; 0x66
 8012e74:	f7fc fb5c 	bl	800f530 <__assert_func>
 8012e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e7c:	6006      	str	r6, [r0, #0]
 8012e7e:	60c6      	str	r6, [r0, #12]
 8012e80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e82:	68f3      	ldr	r3, [r6, #12]
 8012e84:	b183      	cbz	r3, 8012ea8 <_Balloc+0x50>
 8012e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e8e:	b9b8      	cbnz	r0, 8012ec0 <_Balloc+0x68>
 8012e90:	2101      	movs	r1, #1
 8012e92:	fa01 f605 	lsl.w	r6, r1, r5
 8012e96:	1d72      	adds	r2, r6, #5
 8012e98:	0092      	lsls	r2, r2, #2
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	f000 fc9d 	bl	80137da <_calloc_r>
 8012ea0:	b160      	cbz	r0, 8012ebc <_Balloc+0x64>
 8012ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ea6:	e00e      	b.n	8012ec6 <_Balloc+0x6e>
 8012ea8:	2221      	movs	r2, #33	; 0x21
 8012eaa:	2104      	movs	r1, #4
 8012eac:	4620      	mov	r0, r4
 8012eae:	f000 fc94 	bl	80137da <_calloc_r>
 8012eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012eb4:	60f0      	str	r0, [r6, #12]
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d1e4      	bne.n	8012e86 <_Balloc+0x2e>
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	bd70      	pop	{r4, r5, r6, pc}
 8012ec0:	6802      	ldr	r2, [r0, #0]
 8012ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ecc:	e7f7      	b.n	8012ebe <_Balloc+0x66>
 8012ece:	bf00      	nop
 8012ed0:	0802ac8e 	.word	0x0802ac8e
 8012ed4:	0802ae30 	.word	0x0802ae30

08012ed8 <_Bfree>:
 8012ed8:	b570      	push	{r4, r5, r6, lr}
 8012eda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012edc:	4605      	mov	r5, r0
 8012ede:	460c      	mov	r4, r1
 8012ee0:	b976      	cbnz	r6, 8012f00 <_Bfree+0x28>
 8012ee2:	2010      	movs	r0, #16
 8012ee4:	f7ff ff84 	bl	8012df0 <malloc>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	6268      	str	r0, [r5, #36]	; 0x24
 8012eec:	b920      	cbnz	r0, 8012ef8 <_Bfree+0x20>
 8012eee:	4b09      	ldr	r3, [pc, #36]	; (8012f14 <_Bfree+0x3c>)
 8012ef0:	4809      	ldr	r0, [pc, #36]	; (8012f18 <_Bfree+0x40>)
 8012ef2:	218a      	movs	r1, #138	; 0x8a
 8012ef4:	f7fc fb1c 	bl	800f530 <__assert_func>
 8012ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012efc:	6006      	str	r6, [r0, #0]
 8012efe:	60c6      	str	r6, [r0, #12]
 8012f00:	b13c      	cbz	r4, 8012f12 <_Bfree+0x3a>
 8012f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012f04:	6862      	ldr	r2, [r4, #4]
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f0c:	6021      	str	r1, [r4, #0]
 8012f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f12:	bd70      	pop	{r4, r5, r6, pc}
 8012f14:	0802ac8e 	.word	0x0802ac8e
 8012f18:	0802ae30 	.word	0x0802ae30

08012f1c <__multadd>:
 8012f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f20:	690d      	ldr	r5, [r1, #16]
 8012f22:	4607      	mov	r7, r0
 8012f24:	460c      	mov	r4, r1
 8012f26:	461e      	mov	r6, r3
 8012f28:	f101 0c14 	add.w	ip, r1, #20
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8012f32:	b299      	uxth	r1, r3
 8012f34:	fb02 6101 	mla	r1, r2, r1, r6
 8012f38:	0c1e      	lsrs	r6, r3, #16
 8012f3a:	0c0b      	lsrs	r3, r1, #16
 8012f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8012f40:	b289      	uxth	r1, r1
 8012f42:	3001      	adds	r0, #1
 8012f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f48:	4285      	cmp	r5, r0
 8012f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8012f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f52:	dcec      	bgt.n	8012f2e <__multadd+0x12>
 8012f54:	b30e      	cbz	r6, 8012f9a <__multadd+0x7e>
 8012f56:	68a3      	ldr	r3, [r4, #8]
 8012f58:	42ab      	cmp	r3, r5
 8012f5a:	dc19      	bgt.n	8012f90 <__multadd+0x74>
 8012f5c:	6861      	ldr	r1, [r4, #4]
 8012f5e:	4638      	mov	r0, r7
 8012f60:	3101      	adds	r1, #1
 8012f62:	f7ff ff79 	bl	8012e58 <_Balloc>
 8012f66:	4680      	mov	r8, r0
 8012f68:	b928      	cbnz	r0, 8012f76 <__multadd+0x5a>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	4b0c      	ldr	r3, [pc, #48]	; (8012fa0 <__multadd+0x84>)
 8012f6e:	480d      	ldr	r0, [pc, #52]	; (8012fa4 <__multadd+0x88>)
 8012f70:	21b5      	movs	r1, #181	; 0xb5
 8012f72:	f7fc fadd 	bl	800f530 <__assert_func>
 8012f76:	6922      	ldr	r2, [r4, #16]
 8012f78:	3202      	adds	r2, #2
 8012f7a:	f104 010c 	add.w	r1, r4, #12
 8012f7e:	0092      	lsls	r2, r2, #2
 8012f80:	300c      	adds	r0, #12
 8012f82:	f7fc fb2f 	bl	800f5e4 <memcpy>
 8012f86:	4621      	mov	r1, r4
 8012f88:	4638      	mov	r0, r7
 8012f8a:	f7ff ffa5 	bl	8012ed8 <_Bfree>
 8012f8e:	4644      	mov	r4, r8
 8012f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012f94:	3501      	adds	r5, #1
 8012f96:	615e      	str	r6, [r3, #20]
 8012f98:	6125      	str	r5, [r4, #16]
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa0:	0802ad23 	.word	0x0802ad23
 8012fa4:	0802ae30 	.word	0x0802ae30

08012fa8 <__s2b>:
 8012fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fac:	460c      	mov	r4, r1
 8012fae:	4615      	mov	r5, r2
 8012fb0:	461f      	mov	r7, r3
 8012fb2:	2209      	movs	r2, #9
 8012fb4:	3308      	adds	r3, #8
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fbc:	2100      	movs	r1, #0
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	db09      	blt.n	8012fd8 <__s2b+0x30>
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	f7ff ff47 	bl	8012e58 <_Balloc>
 8012fca:	b940      	cbnz	r0, 8012fde <__s2b+0x36>
 8012fcc:	4602      	mov	r2, r0
 8012fce:	4b19      	ldr	r3, [pc, #100]	; (8013034 <__s2b+0x8c>)
 8012fd0:	4819      	ldr	r0, [pc, #100]	; (8013038 <__s2b+0x90>)
 8012fd2:	21ce      	movs	r1, #206	; 0xce
 8012fd4:	f7fc faac 	bl	800f530 <__assert_func>
 8012fd8:	0052      	lsls	r2, r2, #1
 8012fda:	3101      	adds	r1, #1
 8012fdc:	e7f0      	b.n	8012fc0 <__s2b+0x18>
 8012fde:	9b08      	ldr	r3, [sp, #32]
 8012fe0:	6143      	str	r3, [r0, #20]
 8012fe2:	2d09      	cmp	r5, #9
 8012fe4:	f04f 0301 	mov.w	r3, #1
 8012fe8:	6103      	str	r3, [r0, #16]
 8012fea:	dd16      	ble.n	801301a <__s2b+0x72>
 8012fec:	f104 0909 	add.w	r9, r4, #9
 8012ff0:	46c8      	mov	r8, r9
 8012ff2:	442c      	add	r4, r5
 8012ff4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ff8:	4601      	mov	r1, r0
 8012ffa:	3b30      	subs	r3, #48	; 0x30
 8012ffc:	220a      	movs	r2, #10
 8012ffe:	4630      	mov	r0, r6
 8013000:	f7ff ff8c 	bl	8012f1c <__multadd>
 8013004:	45a0      	cmp	r8, r4
 8013006:	d1f5      	bne.n	8012ff4 <__s2b+0x4c>
 8013008:	f1a5 0408 	sub.w	r4, r5, #8
 801300c:	444c      	add	r4, r9
 801300e:	1b2d      	subs	r5, r5, r4
 8013010:	1963      	adds	r3, r4, r5
 8013012:	42bb      	cmp	r3, r7
 8013014:	db04      	blt.n	8013020 <__s2b+0x78>
 8013016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801301a:	340a      	adds	r4, #10
 801301c:	2509      	movs	r5, #9
 801301e:	e7f6      	b.n	801300e <__s2b+0x66>
 8013020:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013024:	4601      	mov	r1, r0
 8013026:	3b30      	subs	r3, #48	; 0x30
 8013028:	220a      	movs	r2, #10
 801302a:	4630      	mov	r0, r6
 801302c:	f7ff ff76 	bl	8012f1c <__multadd>
 8013030:	e7ee      	b.n	8013010 <__s2b+0x68>
 8013032:	bf00      	nop
 8013034:	0802ad23 	.word	0x0802ad23
 8013038:	0802ae30 	.word	0x0802ae30

0801303c <__hi0bits>:
 801303c:	0c03      	lsrs	r3, r0, #16
 801303e:	041b      	lsls	r3, r3, #16
 8013040:	b9d3      	cbnz	r3, 8013078 <__hi0bits+0x3c>
 8013042:	0400      	lsls	r0, r0, #16
 8013044:	2310      	movs	r3, #16
 8013046:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801304a:	bf04      	itt	eq
 801304c:	0200      	lsleq	r0, r0, #8
 801304e:	3308      	addeq	r3, #8
 8013050:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013054:	bf04      	itt	eq
 8013056:	0100      	lsleq	r0, r0, #4
 8013058:	3304      	addeq	r3, #4
 801305a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801305e:	bf04      	itt	eq
 8013060:	0080      	lsleq	r0, r0, #2
 8013062:	3302      	addeq	r3, #2
 8013064:	2800      	cmp	r0, #0
 8013066:	db05      	blt.n	8013074 <__hi0bits+0x38>
 8013068:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801306c:	f103 0301 	add.w	r3, r3, #1
 8013070:	bf08      	it	eq
 8013072:	2320      	moveq	r3, #32
 8013074:	4618      	mov	r0, r3
 8013076:	4770      	bx	lr
 8013078:	2300      	movs	r3, #0
 801307a:	e7e4      	b.n	8013046 <__hi0bits+0xa>

0801307c <__lo0bits>:
 801307c:	6803      	ldr	r3, [r0, #0]
 801307e:	f013 0207 	ands.w	r2, r3, #7
 8013082:	4601      	mov	r1, r0
 8013084:	d00b      	beq.n	801309e <__lo0bits+0x22>
 8013086:	07da      	lsls	r2, r3, #31
 8013088:	d423      	bmi.n	80130d2 <__lo0bits+0x56>
 801308a:	0798      	lsls	r0, r3, #30
 801308c:	bf49      	itett	mi
 801308e:	085b      	lsrmi	r3, r3, #1
 8013090:	089b      	lsrpl	r3, r3, #2
 8013092:	2001      	movmi	r0, #1
 8013094:	600b      	strmi	r3, [r1, #0]
 8013096:	bf5c      	itt	pl
 8013098:	600b      	strpl	r3, [r1, #0]
 801309a:	2002      	movpl	r0, #2
 801309c:	4770      	bx	lr
 801309e:	b298      	uxth	r0, r3
 80130a0:	b9a8      	cbnz	r0, 80130ce <__lo0bits+0x52>
 80130a2:	0c1b      	lsrs	r3, r3, #16
 80130a4:	2010      	movs	r0, #16
 80130a6:	b2da      	uxtb	r2, r3
 80130a8:	b90a      	cbnz	r2, 80130ae <__lo0bits+0x32>
 80130aa:	3008      	adds	r0, #8
 80130ac:	0a1b      	lsrs	r3, r3, #8
 80130ae:	071a      	lsls	r2, r3, #28
 80130b0:	bf04      	itt	eq
 80130b2:	091b      	lsreq	r3, r3, #4
 80130b4:	3004      	addeq	r0, #4
 80130b6:	079a      	lsls	r2, r3, #30
 80130b8:	bf04      	itt	eq
 80130ba:	089b      	lsreq	r3, r3, #2
 80130bc:	3002      	addeq	r0, #2
 80130be:	07da      	lsls	r2, r3, #31
 80130c0:	d403      	bmi.n	80130ca <__lo0bits+0x4e>
 80130c2:	085b      	lsrs	r3, r3, #1
 80130c4:	f100 0001 	add.w	r0, r0, #1
 80130c8:	d005      	beq.n	80130d6 <__lo0bits+0x5a>
 80130ca:	600b      	str	r3, [r1, #0]
 80130cc:	4770      	bx	lr
 80130ce:	4610      	mov	r0, r2
 80130d0:	e7e9      	b.n	80130a6 <__lo0bits+0x2a>
 80130d2:	2000      	movs	r0, #0
 80130d4:	4770      	bx	lr
 80130d6:	2020      	movs	r0, #32
 80130d8:	4770      	bx	lr
	...

080130dc <__i2b>:
 80130dc:	b510      	push	{r4, lr}
 80130de:	460c      	mov	r4, r1
 80130e0:	2101      	movs	r1, #1
 80130e2:	f7ff feb9 	bl	8012e58 <_Balloc>
 80130e6:	4602      	mov	r2, r0
 80130e8:	b928      	cbnz	r0, 80130f6 <__i2b+0x1a>
 80130ea:	4b05      	ldr	r3, [pc, #20]	; (8013100 <__i2b+0x24>)
 80130ec:	4805      	ldr	r0, [pc, #20]	; (8013104 <__i2b+0x28>)
 80130ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80130f2:	f7fc fa1d 	bl	800f530 <__assert_func>
 80130f6:	2301      	movs	r3, #1
 80130f8:	6144      	str	r4, [r0, #20]
 80130fa:	6103      	str	r3, [r0, #16]
 80130fc:	bd10      	pop	{r4, pc}
 80130fe:	bf00      	nop
 8013100:	0802ad23 	.word	0x0802ad23
 8013104:	0802ae30 	.word	0x0802ae30

08013108 <__multiply>:
 8013108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310c:	4691      	mov	r9, r2
 801310e:	690a      	ldr	r2, [r1, #16]
 8013110:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013114:	429a      	cmp	r2, r3
 8013116:	bfb8      	it	lt
 8013118:	460b      	movlt	r3, r1
 801311a:	460c      	mov	r4, r1
 801311c:	bfbc      	itt	lt
 801311e:	464c      	movlt	r4, r9
 8013120:	4699      	movlt	r9, r3
 8013122:	6927      	ldr	r7, [r4, #16]
 8013124:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013128:	68a3      	ldr	r3, [r4, #8]
 801312a:	6861      	ldr	r1, [r4, #4]
 801312c:	eb07 060a 	add.w	r6, r7, sl
 8013130:	42b3      	cmp	r3, r6
 8013132:	b085      	sub	sp, #20
 8013134:	bfb8      	it	lt
 8013136:	3101      	addlt	r1, #1
 8013138:	f7ff fe8e 	bl	8012e58 <_Balloc>
 801313c:	b930      	cbnz	r0, 801314c <__multiply+0x44>
 801313e:	4602      	mov	r2, r0
 8013140:	4b44      	ldr	r3, [pc, #272]	; (8013254 <__multiply+0x14c>)
 8013142:	4845      	ldr	r0, [pc, #276]	; (8013258 <__multiply+0x150>)
 8013144:	f240 115d 	movw	r1, #349	; 0x15d
 8013148:	f7fc f9f2 	bl	800f530 <__assert_func>
 801314c:	f100 0514 	add.w	r5, r0, #20
 8013150:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013154:	462b      	mov	r3, r5
 8013156:	2200      	movs	r2, #0
 8013158:	4543      	cmp	r3, r8
 801315a:	d321      	bcc.n	80131a0 <__multiply+0x98>
 801315c:	f104 0314 	add.w	r3, r4, #20
 8013160:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013164:	f109 0314 	add.w	r3, r9, #20
 8013168:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801316c:	9202      	str	r2, [sp, #8]
 801316e:	1b3a      	subs	r2, r7, r4
 8013170:	3a15      	subs	r2, #21
 8013172:	f022 0203 	bic.w	r2, r2, #3
 8013176:	3204      	adds	r2, #4
 8013178:	f104 0115 	add.w	r1, r4, #21
 801317c:	428f      	cmp	r7, r1
 801317e:	bf38      	it	cc
 8013180:	2204      	movcc	r2, #4
 8013182:	9201      	str	r2, [sp, #4]
 8013184:	9a02      	ldr	r2, [sp, #8]
 8013186:	9303      	str	r3, [sp, #12]
 8013188:	429a      	cmp	r2, r3
 801318a:	d80c      	bhi.n	80131a6 <__multiply+0x9e>
 801318c:	2e00      	cmp	r6, #0
 801318e:	dd03      	ble.n	8013198 <__multiply+0x90>
 8013190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013194:	2b00      	cmp	r3, #0
 8013196:	d05a      	beq.n	801324e <__multiply+0x146>
 8013198:	6106      	str	r6, [r0, #16]
 801319a:	b005      	add	sp, #20
 801319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a0:	f843 2b04 	str.w	r2, [r3], #4
 80131a4:	e7d8      	b.n	8013158 <__multiply+0x50>
 80131a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80131aa:	f1ba 0f00 	cmp.w	sl, #0
 80131ae:	d024      	beq.n	80131fa <__multiply+0xf2>
 80131b0:	f104 0e14 	add.w	lr, r4, #20
 80131b4:	46a9      	mov	r9, r5
 80131b6:	f04f 0c00 	mov.w	ip, #0
 80131ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80131be:	f8d9 1000 	ldr.w	r1, [r9]
 80131c2:	fa1f fb82 	uxth.w	fp, r2
 80131c6:	b289      	uxth	r1, r1
 80131c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80131cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80131d0:	f8d9 2000 	ldr.w	r2, [r9]
 80131d4:	4461      	add	r1, ip
 80131d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80131da:	fb0a c20b 	mla	r2, sl, fp, ip
 80131de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80131e2:	b289      	uxth	r1, r1
 80131e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80131e8:	4577      	cmp	r7, lr
 80131ea:	f849 1b04 	str.w	r1, [r9], #4
 80131ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80131f2:	d8e2      	bhi.n	80131ba <__multiply+0xb2>
 80131f4:	9a01      	ldr	r2, [sp, #4]
 80131f6:	f845 c002 	str.w	ip, [r5, r2]
 80131fa:	9a03      	ldr	r2, [sp, #12]
 80131fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013200:	3304      	adds	r3, #4
 8013202:	f1b9 0f00 	cmp.w	r9, #0
 8013206:	d020      	beq.n	801324a <__multiply+0x142>
 8013208:	6829      	ldr	r1, [r5, #0]
 801320a:	f104 0c14 	add.w	ip, r4, #20
 801320e:	46ae      	mov	lr, r5
 8013210:	f04f 0a00 	mov.w	sl, #0
 8013214:	f8bc b000 	ldrh.w	fp, [ip]
 8013218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801321c:	fb09 220b 	mla	r2, r9, fp, r2
 8013220:	4492      	add	sl, r2
 8013222:	b289      	uxth	r1, r1
 8013224:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013228:	f84e 1b04 	str.w	r1, [lr], #4
 801322c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013230:	f8be 1000 	ldrh.w	r1, [lr]
 8013234:	0c12      	lsrs	r2, r2, #16
 8013236:	fb09 1102 	mla	r1, r9, r2, r1
 801323a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801323e:	4567      	cmp	r7, ip
 8013240:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013244:	d8e6      	bhi.n	8013214 <__multiply+0x10c>
 8013246:	9a01      	ldr	r2, [sp, #4]
 8013248:	50a9      	str	r1, [r5, r2]
 801324a:	3504      	adds	r5, #4
 801324c:	e79a      	b.n	8013184 <__multiply+0x7c>
 801324e:	3e01      	subs	r6, #1
 8013250:	e79c      	b.n	801318c <__multiply+0x84>
 8013252:	bf00      	nop
 8013254:	0802ad23 	.word	0x0802ad23
 8013258:	0802ae30 	.word	0x0802ae30

0801325c <__pow5mult>:
 801325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013260:	4615      	mov	r5, r2
 8013262:	f012 0203 	ands.w	r2, r2, #3
 8013266:	4606      	mov	r6, r0
 8013268:	460f      	mov	r7, r1
 801326a:	d007      	beq.n	801327c <__pow5mult+0x20>
 801326c:	4c25      	ldr	r4, [pc, #148]	; (8013304 <__pow5mult+0xa8>)
 801326e:	3a01      	subs	r2, #1
 8013270:	2300      	movs	r3, #0
 8013272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013276:	f7ff fe51 	bl	8012f1c <__multadd>
 801327a:	4607      	mov	r7, r0
 801327c:	10ad      	asrs	r5, r5, #2
 801327e:	d03d      	beq.n	80132fc <__pow5mult+0xa0>
 8013280:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013282:	b97c      	cbnz	r4, 80132a4 <__pow5mult+0x48>
 8013284:	2010      	movs	r0, #16
 8013286:	f7ff fdb3 	bl	8012df0 <malloc>
 801328a:	4602      	mov	r2, r0
 801328c:	6270      	str	r0, [r6, #36]	; 0x24
 801328e:	b928      	cbnz	r0, 801329c <__pow5mult+0x40>
 8013290:	4b1d      	ldr	r3, [pc, #116]	; (8013308 <__pow5mult+0xac>)
 8013292:	481e      	ldr	r0, [pc, #120]	; (801330c <__pow5mult+0xb0>)
 8013294:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013298:	f7fc f94a 	bl	800f530 <__assert_func>
 801329c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132a0:	6004      	str	r4, [r0, #0]
 80132a2:	60c4      	str	r4, [r0, #12]
 80132a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80132a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132ac:	b94c      	cbnz	r4, 80132c2 <__pow5mult+0x66>
 80132ae:	f240 2171 	movw	r1, #625	; 0x271
 80132b2:	4630      	mov	r0, r6
 80132b4:	f7ff ff12 	bl	80130dc <__i2b>
 80132b8:	2300      	movs	r3, #0
 80132ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80132be:	4604      	mov	r4, r0
 80132c0:	6003      	str	r3, [r0, #0]
 80132c2:	f04f 0900 	mov.w	r9, #0
 80132c6:	07eb      	lsls	r3, r5, #31
 80132c8:	d50a      	bpl.n	80132e0 <__pow5mult+0x84>
 80132ca:	4639      	mov	r1, r7
 80132cc:	4622      	mov	r2, r4
 80132ce:	4630      	mov	r0, r6
 80132d0:	f7ff ff1a 	bl	8013108 <__multiply>
 80132d4:	4639      	mov	r1, r7
 80132d6:	4680      	mov	r8, r0
 80132d8:	4630      	mov	r0, r6
 80132da:	f7ff fdfd 	bl	8012ed8 <_Bfree>
 80132de:	4647      	mov	r7, r8
 80132e0:	106d      	asrs	r5, r5, #1
 80132e2:	d00b      	beq.n	80132fc <__pow5mult+0xa0>
 80132e4:	6820      	ldr	r0, [r4, #0]
 80132e6:	b938      	cbnz	r0, 80132f8 <__pow5mult+0x9c>
 80132e8:	4622      	mov	r2, r4
 80132ea:	4621      	mov	r1, r4
 80132ec:	4630      	mov	r0, r6
 80132ee:	f7ff ff0b 	bl	8013108 <__multiply>
 80132f2:	6020      	str	r0, [r4, #0]
 80132f4:	f8c0 9000 	str.w	r9, [r0]
 80132f8:	4604      	mov	r4, r0
 80132fa:	e7e4      	b.n	80132c6 <__pow5mult+0x6a>
 80132fc:	4638      	mov	r0, r7
 80132fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013302:	bf00      	nop
 8013304:	0802afa0 	.word	0x0802afa0
 8013308:	0802ac8e 	.word	0x0802ac8e
 801330c:	0802ae30 	.word	0x0802ae30

08013310 <__lshift>:
 8013310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013314:	460c      	mov	r4, r1
 8013316:	6849      	ldr	r1, [r1, #4]
 8013318:	6923      	ldr	r3, [r4, #16]
 801331a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801331e:	68a3      	ldr	r3, [r4, #8]
 8013320:	4607      	mov	r7, r0
 8013322:	4691      	mov	r9, r2
 8013324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013328:	f108 0601 	add.w	r6, r8, #1
 801332c:	42b3      	cmp	r3, r6
 801332e:	db0b      	blt.n	8013348 <__lshift+0x38>
 8013330:	4638      	mov	r0, r7
 8013332:	f7ff fd91 	bl	8012e58 <_Balloc>
 8013336:	4605      	mov	r5, r0
 8013338:	b948      	cbnz	r0, 801334e <__lshift+0x3e>
 801333a:	4602      	mov	r2, r0
 801333c:	4b2a      	ldr	r3, [pc, #168]	; (80133e8 <__lshift+0xd8>)
 801333e:	482b      	ldr	r0, [pc, #172]	; (80133ec <__lshift+0xdc>)
 8013340:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013344:	f7fc f8f4 	bl	800f530 <__assert_func>
 8013348:	3101      	adds	r1, #1
 801334a:	005b      	lsls	r3, r3, #1
 801334c:	e7ee      	b.n	801332c <__lshift+0x1c>
 801334e:	2300      	movs	r3, #0
 8013350:	f100 0114 	add.w	r1, r0, #20
 8013354:	f100 0210 	add.w	r2, r0, #16
 8013358:	4618      	mov	r0, r3
 801335a:	4553      	cmp	r3, sl
 801335c:	db37      	blt.n	80133ce <__lshift+0xbe>
 801335e:	6920      	ldr	r0, [r4, #16]
 8013360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013364:	f104 0314 	add.w	r3, r4, #20
 8013368:	f019 091f 	ands.w	r9, r9, #31
 801336c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013374:	d02f      	beq.n	80133d6 <__lshift+0xc6>
 8013376:	f1c9 0e20 	rsb	lr, r9, #32
 801337a:	468a      	mov	sl, r1
 801337c:	f04f 0c00 	mov.w	ip, #0
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	fa02 f209 	lsl.w	r2, r2, r9
 8013386:	ea42 020c 	orr.w	r2, r2, ip
 801338a:	f84a 2b04 	str.w	r2, [sl], #4
 801338e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013392:	4298      	cmp	r0, r3
 8013394:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013398:	d8f2      	bhi.n	8013380 <__lshift+0x70>
 801339a:	1b03      	subs	r3, r0, r4
 801339c:	3b15      	subs	r3, #21
 801339e:	f023 0303 	bic.w	r3, r3, #3
 80133a2:	3304      	adds	r3, #4
 80133a4:	f104 0215 	add.w	r2, r4, #21
 80133a8:	4290      	cmp	r0, r2
 80133aa:	bf38      	it	cc
 80133ac:	2304      	movcc	r3, #4
 80133ae:	f841 c003 	str.w	ip, [r1, r3]
 80133b2:	f1bc 0f00 	cmp.w	ip, #0
 80133b6:	d001      	beq.n	80133bc <__lshift+0xac>
 80133b8:	f108 0602 	add.w	r6, r8, #2
 80133bc:	3e01      	subs	r6, #1
 80133be:	4638      	mov	r0, r7
 80133c0:	612e      	str	r6, [r5, #16]
 80133c2:	4621      	mov	r1, r4
 80133c4:	f7ff fd88 	bl	8012ed8 <_Bfree>
 80133c8:	4628      	mov	r0, r5
 80133ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80133d2:	3301      	adds	r3, #1
 80133d4:	e7c1      	b.n	801335a <__lshift+0x4a>
 80133d6:	3904      	subs	r1, #4
 80133d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80133e0:	4298      	cmp	r0, r3
 80133e2:	d8f9      	bhi.n	80133d8 <__lshift+0xc8>
 80133e4:	e7ea      	b.n	80133bc <__lshift+0xac>
 80133e6:	bf00      	nop
 80133e8:	0802ad23 	.word	0x0802ad23
 80133ec:	0802ae30 	.word	0x0802ae30

080133f0 <__mcmp>:
 80133f0:	b530      	push	{r4, r5, lr}
 80133f2:	6902      	ldr	r2, [r0, #16]
 80133f4:	690c      	ldr	r4, [r1, #16]
 80133f6:	1b12      	subs	r2, r2, r4
 80133f8:	d10e      	bne.n	8013418 <__mcmp+0x28>
 80133fa:	f100 0314 	add.w	r3, r0, #20
 80133fe:	3114      	adds	r1, #20
 8013400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801340c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013410:	42a5      	cmp	r5, r4
 8013412:	d003      	beq.n	801341c <__mcmp+0x2c>
 8013414:	d305      	bcc.n	8013422 <__mcmp+0x32>
 8013416:	2201      	movs	r2, #1
 8013418:	4610      	mov	r0, r2
 801341a:	bd30      	pop	{r4, r5, pc}
 801341c:	4283      	cmp	r3, r0
 801341e:	d3f3      	bcc.n	8013408 <__mcmp+0x18>
 8013420:	e7fa      	b.n	8013418 <__mcmp+0x28>
 8013422:	f04f 32ff 	mov.w	r2, #4294967295
 8013426:	e7f7      	b.n	8013418 <__mcmp+0x28>

08013428 <__mdiff>:
 8013428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342c:	460c      	mov	r4, r1
 801342e:	4606      	mov	r6, r0
 8013430:	4611      	mov	r1, r2
 8013432:	4620      	mov	r0, r4
 8013434:	4690      	mov	r8, r2
 8013436:	f7ff ffdb 	bl	80133f0 <__mcmp>
 801343a:	1e05      	subs	r5, r0, #0
 801343c:	d110      	bne.n	8013460 <__mdiff+0x38>
 801343e:	4629      	mov	r1, r5
 8013440:	4630      	mov	r0, r6
 8013442:	f7ff fd09 	bl	8012e58 <_Balloc>
 8013446:	b930      	cbnz	r0, 8013456 <__mdiff+0x2e>
 8013448:	4b3a      	ldr	r3, [pc, #232]	; (8013534 <__mdiff+0x10c>)
 801344a:	4602      	mov	r2, r0
 801344c:	f240 2132 	movw	r1, #562	; 0x232
 8013450:	4839      	ldr	r0, [pc, #228]	; (8013538 <__mdiff+0x110>)
 8013452:	f7fc f86d 	bl	800f530 <__assert_func>
 8013456:	2301      	movs	r3, #1
 8013458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801345c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013460:	bfa4      	itt	ge
 8013462:	4643      	movge	r3, r8
 8013464:	46a0      	movge	r8, r4
 8013466:	4630      	mov	r0, r6
 8013468:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801346c:	bfa6      	itte	ge
 801346e:	461c      	movge	r4, r3
 8013470:	2500      	movge	r5, #0
 8013472:	2501      	movlt	r5, #1
 8013474:	f7ff fcf0 	bl	8012e58 <_Balloc>
 8013478:	b920      	cbnz	r0, 8013484 <__mdiff+0x5c>
 801347a:	4b2e      	ldr	r3, [pc, #184]	; (8013534 <__mdiff+0x10c>)
 801347c:	4602      	mov	r2, r0
 801347e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013482:	e7e5      	b.n	8013450 <__mdiff+0x28>
 8013484:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013488:	6926      	ldr	r6, [r4, #16]
 801348a:	60c5      	str	r5, [r0, #12]
 801348c:	f104 0914 	add.w	r9, r4, #20
 8013490:	f108 0514 	add.w	r5, r8, #20
 8013494:	f100 0e14 	add.w	lr, r0, #20
 8013498:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801349c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80134a0:	f108 0210 	add.w	r2, r8, #16
 80134a4:	46f2      	mov	sl, lr
 80134a6:	2100      	movs	r1, #0
 80134a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80134ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80134b0:	fa1f f883 	uxth.w	r8, r3
 80134b4:	fa11 f18b 	uxtah	r1, r1, fp
 80134b8:	0c1b      	lsrs	r3, r3, #16
 80134ba:	eba1 0808 	sub.w	r8, r1, r8
 80134be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80134c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80134c6:	fa1f f888 	uxth.w	r8, r8
 80134ca:	1419      	asrs	r1, r3, #16
 80134cc:	454e      	cmp	r6, r9
 80134ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80134d2:	f84a 3b04 	str.w	r3, [sl], #4
 80134d6:	d8e7      	bhi.n	80134a8 <__mdiff+0x80>
 80134d8:	1b33      	subs	r3, r6, r4
 80134da:	3b15      	subs	r3, #21
 80134dc:	f023 0303 	bic.w	r3, r3, #3
 80134e0:	3304      	adds	r3, #4
 80134e2:	3415      	adds	r4, #21
 80134e4:	42a6      	cmp	r6, r4
 80134e6:	bf38      	it	cc
 80134e8:	2304      	movcc	r3, #4
 80134ea:	441d      	add	r5, r3
 80134ec:	4473      	add	r3, lr
 80134ee:	469e      	mov	lr, r3
 80134f0:	462e      	mov	r6, r5
 80134f2:	4566      	cmp	r6, ip
 80134f4:	d30e      	bcc.n	8013514 <__mdiff+0xec>
 80134f6:	f10c 0203 	add.w	r2, ip, #3
 80134fa:	1b52      	subs	r2, r2, r5
 80134fc:	f022 0203 	bic.w	r2, r2, #3
 8013500:	3d03      	subs	r5, #3
 8013502:	45ac      	cmp	ip, r5
 8013504:	bf38      	it	cc
 8013506:	2200      	movcc	r2, #0
 8013508:	441a      	add	r2, r3
 801350a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801350e:	b17b      	cbz	r3, 8013530 <__mdiff+0x108>
 8013510:	6107      	str	r7, [r0, #16]
 8013512:	e7a3      	b.n	801345c <__mdiff+0x34>
 8013514:	f856 8b04 	ldr.w	r8, [r6], #4
 8013518:	fa11 f288 	uxtah	r2, r1, r8
 801351c:	1414      	asrs	r4, r2, #16
 801351e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013522:	b292      	uxth	r2, r2
 8013524:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013528:	f84e 2b04 	str.w	r2, [lr], #4
 801352c:	1421      	asrs	r1, r4, #16
 801352e:	e7e0      	b.n	80134f2 <__mdiff+0xca>
 8013530:	3f01      	subs	r7, #1
 8013532:	e7ea      	b.n	801350a <__mdiff+0xe2>
 8013534:	0802ad23 	.word	0x0802ad23
 8013538:	0802ae30 	.word	0x0802ae30

0801353c <__ulp>:
 801353c:	b082      	sub	sp, #8
 801353e:	ed8d 0b00 	vstr	d0, [sp]
 8013542:	9b01      	ldr	r3, [sp, #4]
 8013544:	4912      	ldr	r1, [pc, #72]	; (8013590 <__ulp+0x54>)
 8013546:	4019      	ands	r1, r3
 8013548:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801354c:	2900      	cmp	r1, #0
 801354e:	dd05      	ble.n	801355c <__ulp+0x20>
 8013550:	2200      	movs	r2, #0
 8013552:	460b      	mov	r3, r1
 8013554:	ec43 2b10 	vmov	d0, r2, r3
 8013558:	b002      	add	sp, #8
 801355a:	4770      	bx	lr
 801355c:	4249      	negs	r1, r1
 801355e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013562:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013566:	f04f 0200 	mov.w	r2, #0
 801356a:	f04f 0300 	mov.w	r3, #0
 801356e:	da04      	bge.n	801357a <__ulp+0x3e>
 8013570:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013574:	fa41 f300 	asr.w	r3, r1, r0
 8013578:	e7ec      	b.n	8013554 <__ulp+0x18>
 801357a:	f1a0 0114 	sub.w	r1, r0, #20
 801357e:	291e      	cmp	r1, #30
 8013580:	bfda      	itte	le
 8013582:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013586:	fa20 f101 	lsrle.w	r1, r0, r1
 801358a:	2101      	movgt	r1, #1
 801358c:	460a      	mov	r2, r1
 801358e:	e7e1      	b.n	8013554 <__ulp+0x18>
 8013590:	7ff00000 	.word	0x7ff00000

08013594 <__b2d>:
 8013594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013596:	6905      	ldr	r5, [r0, #16]
 8013598:	f100 0714 	add.w	r7, r0, #20
 801359c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80135a0:	1f2e      	subs	r6, r5, #4
 80135a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80135a6:	4620      	mov	r0, r4
 80135a8:	f7ff fd48 	bl	801303c <__hi0bits>
 80135ac:	f1c0 0320 	rsb	r3, r0, #32
 80135b0:	280a      	cmp	r0, #10
 80135b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013630 <__b2d+0x9c>
 80135b6:	600b      	str	r3, [r1, #0]
 80135b8:	dc14      	bgt.n	80135e4 <__b2d+0x50>
 80135ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80135be:	fa24 f10e 	lsr.w	r1, r4, lr
 80135c2:	42b7      	cmp	r7, r6
 80135c4:	ea41 030c 	orr.w	r3, r1, ip
 80135c8:	bf34      	ite	cc
 80135ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135ce:	2100      	movcs	r1, #0
 80135d0:	3015      	adds	r0, #21
 80135d2:	fa04 f000 	lsl.w	r0, r4, r0
 80135d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80135da:	ea40 0201 	orr.w	r2, r0, r1
 80135de:	ec43 2b10 	vmov	d0, r2, r3
 80135e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135e4:	42b7      	cmp	r7, r6
 80135e6:	bf3a      	itte	cc
 80135e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80135f0:	2100      	movcs	r1, #0
 80135f2:	380b      	subs	r0, #11
 80135f4:	d017      	beq.n	8013626 <__b2d+0x92>
 80135f6:	f1c0 0c20 	rsb	ip, r0, #32
 80135fa:	fa04 f500 	lsl.w	r5, r4, r0
 80135fe:	42be      	cmp	r6, r7
 8013600:	fa21 f40c 	lsr.w	r4, r1, ip
 8013604:	ea45 0504 	orr.w	r5, r5, r4
 8013608:	bf8c      	ite	hi
 801360a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801360e:	2400      	movls	r4, #0
 8013610:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013614:	fa01 f000 	lsl.w	r0, r1, r0
 8013618:	fa24 f40c 	lsr.w	r4, r4, ip
 801361c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013620:	ea40 0204 	orr.w	r2, r0, r4
 8013624:	e7db      	b.n	80135de <__b2d+0x4a>
 8013626:	ea44 030c 	orr.w	r3, r4, ip
 801362a:	460a      	mov	r2, r1
 801362c:	e7d7      	b.n	80135de <__b2d+0x4a>
 801362e:	bf00      	nop
 8013630:	3ff00000 	.word	0x3ff00000

08013634 <__d2b>:
 8013634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013638:	4689      	mov	r9, r1
 801363a:	2101      	movs	r1, #1
 801363c:	ec57 6b10 	vmov	r6, r7, d0
 8013640:	4690      	mov	r8, r2
 8013642:	f7ff fc09 	bl	8012e58 <_Balloc>
 8013646:	4604      	mov	r4, r0
 8013648:	b930      	cbnz	r0, 8013658 <__d2b+0x24>
 801364a:	4602      	mov	r2, r0
 801364c:	4b25      	ldr	r3, [pc, #148]	; (80136e4 <__d2b+0xb0>)
 801364e:	4826      	ldr	r0, [pc, #152]	; (80136e8 <__d2b+0xb4>)
 8013650:	f240 310a 	movw	r1, #778	; 0x30a
 8013654:	f7fb ff6c 	bl	800f530 <__assert_func>
 8013658:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801365c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013660:	bb35      	cbnz	r5, 80136b0 <__d2b+0x7c>
 8013662:	2e00      	cmp	r6, #0
 8013664:	9301      	str	r3, [sp, #4]
 8013666:	d028      	beq.n	80136ba <__d2b+0x86>
 8013668:	4668      	mov	r0, sp
 801366a:	9600      	str	r6, [sp, #0]
 801366c:	f7ff fd06 	bl	801307c <__lo0bits>
 8013670:	9900      	ldr	r1, [sp, #0]
 8013672:	b300      	cbz	r0, 80136b6 <__d2b+0x82>
 8013674:	9a01      	ldr	r2, [sp, #4]
 8013676:	f1c0 0320 	rsb	r3, r0, #32
 801367a:	fa02 f303 	lsl.w	r3, r2, r3
 801367e:	430b      	orrs	r3, r1
 8013680:	40c2      	lsrs	r2, r0
 8013682:	6163      	str	r3, [r4, #20]
 8013684:	9201      	str	r2, [sp, #4]
 8013686:	9b01      	ldr	r3, [sp, #4]
 8013688:	61a3      	str	r3, [r4, #24]
 801368a:	2b00      	cmp	r3, #0
 801368c:	bf14      	ite	ne
 801368e:	2202      	movne	r2, #2
 8013690:	2201      	moveq	r2, #1
 8013692:	6122      	str	r2, [r4, #16]
 8013694:	b1d5      	cbz	r5, 80136cc <__d2b+0x98>
 8013696:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801369a:	4405      	add	r5, r0
 801369c:	f8c9 5000 	str.w	r5, [r9]
 80136a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136a4:	f8c8 0000 	str.w	r0, [r8]
 80136a8:	4620      	mov	r0, r4
 80136aa:	b003      	add	sp, #12
 80136ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136b4:	e7d5      	b.n	8013662 <__d2b+0x2e>
 80136b6:	6161      	str	r1, [r4, #20]
 80136b8:	e7e5      	b.n	8013686 <__d2b+0x52>
 80136ba:	a801      	add	r0, sp, #4
 80136bc:	f7ff fcde 	bl	801307c <__lo0bits>
 80136c0:	9b01      	ldr	r3, [sp, #4]
 80136c2:	6163      	str	r3, [r4, #20]
 80136c4:	2201      	movs	r2, #1
 80136c6:	6122      	str	r2, [r4, #16]
 80136c8:	3020      	adds	r0, #32
 80136ca:	e7e3      	b.n	8013694 <__d2b+0x60>
 80136cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136d4:	f8c9 0000 	str.w	r0, [r9]
 80136d8:	6918      	ldr	r0, [r3, #16]
 80136da:	f7ff fcaf 	bl	801303c <__hi0bits>
 80136de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136e2:	e7df      	b.n	80136a4 <__d2b+0x70>
 80136e4:	0802ad23 	.word	0x0802ad23
 80136e8:	0802ae30 	.word	0x0802ae30

080136ec <__ratio>:
 80136ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	4688      	mov	r8, r1
 80136f2:	4669      	mov	r1, sp
 80136f4:	4681      	mov	r9, r0
 80136f6:	f7ff ff4d 	bl	8013594 <__b2d>
 80136fa:	a901      	add	r1, sp, #4
 80136fc:	4640      	mov	r0, r8
 80136fe:	ec55 4b10 	vmov	r4, r5, d0
 8013702:	f7ff ff47 	bl	8013594 <__b2d>
 8013706:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801370a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801370e:	eba3 0c02 	sub.w	ip, r3, r2
 8013712:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013716:	1a9b      	subs	r3, r3, r2
 8013718:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801371c:	ec51 0b10 	vmov	r0, r1, d0
 8013720:	2b00      	cmp	r3, #0
 8013722:	bfd6      	itet	le
 8013724:	460a      	movle	r2, r1
 8013726:	462a      	movgt	r2, r5
 8013728:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801372c:	468b      	mov	fp, r1
 801372e:	462f      	mov	r7, r5
 8013730:	bfd4      	ite	le
 8013732:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013736:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801373a:	4620      	mov	r0, r4
 801373c:	ee10 2a10 	vmov	r2, s0
 8013740:	465b      	mov	r3, fp
 8013742:	4639      	mov	r1, r7
 8013744:	f7ed f8aa 	bl	800089c <__aeabi_ddiv>
 8013748:	ec41 0b10 	vmov	d0, r0, r1
 801374c:	b003      	add	sp, #12
 801374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013752 <__copybits>:
 8013752:	3901      	subs	r1, #1
 8013754:	b570      	push	{r4, r5, r6, lr}
 8013756:	1149      	asrs	r1, r1, #5
 8013758:	6914      	ldr	r4, [r2, #16]
 801375a:	3101      	adds	r1, #1
 801375c:	f102 0314 	add.w	r3, r2, #20
 8013760:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013764:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013768:	1f05      	subs	r5, r0, #4
 801376a:	42a3      	cmp	r3, r4
 801376c:	d30c      	bcc.n	8013788 <__copybits+0x36>
 801376e:	1aa3      	subs	r3, r4, r2
 8013770:	3b11      	subs	r3, #17
 8013772:	f023 0303 	bic.w	r3, r3, #3
 8013776:	3211      	adds	r2, #17
 8013778:	42a2      	cmp	r2, r4
 801377a:	bf88      	it	hi
 801377c:	2300      	movhi	r3, #0
 801377e:	4418      	add	r0, r3
 8013780:	2300      	movs	r3, #0
 8013782:	4288      	cmp	r0, r1
 8013784:	d305      	bcc.n	8013792 <__copybits+0x40>
 8013786:	bd70      	pop	{r4, r5, r6, pc}
 8013788:	f853 6b04 	ldr.w	r6, [r3], #4
 801378c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013790:	e7eb      	b.n	801376a <__copybits+0x18>
 8013792:	f840 3b04 	str.w	r3, [r0], #4
 8013796:	e7f4      	b.n	8013782 <__copybits+0x30>

08013798 <__any_on>:
 8013798:	f100 0214 	add.w	r2, r0, #20
 801379c:	6900      	ldr	r0, [r0, #16]
 801379e:	114b      	asrs	r3, r1, #5
 80137a0:	4298      	cmp	r0, r3
 80137a2:	b510      	push	{r4, lr}
 80137a4:	db11      	blt.n	80137ca <__any_on+0x32>
 80137a6:	dd0a      	ble.n	80137be <__any_on+0x26>
 80137a8:	f011 011f 	ands.w	r1, r1, #31
 80137ac:	d007      	beq.n	80137be <__any_on+0x26>
 80137ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80137b2:	fa24 f001 	lsr.w	r0, r4, r1
 80137b6:	fa00 f101 	lsl.w	r1, r0, r1
 80137ba:	428c      	cmp	r4, r1
 80137bc:	d10b      	bne.n	80137d6 <__any_on+0x3e>
 80137be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d803      	bhi.n	80137ce <__any_on+0x36>
 80137c6:	2000      	movs	r0, #0
 80137c8:	bd10      	pop	{r4, pc}
 80137ca:	4603      	mov	r3, r0
 80137cc:	e7f7      	b.n	80137be <__any_on+0x26>
 80137ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137d2:	2900      	cmp	r1, #0
 80137d4:	d0f5      	beq.n	80137c2 <__any_on+0x2a>
 80137d6:	2001      	movs	r0, #1
 80137d8:	e7f6      	b.n	80137c8 <__any_on+0x30>

080137da <_calloc_r>:
 80137da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137dc:	fba1 2402 	umull	r2, r4, r1, r2
 80137e0:	b94c      	cbnz	r4, 80137f6 <_calloc_r+0x1c>
 80137e2:	4611      	mov	r1, r2
 80137e4:	9201      	str	r2, [sp, #4]
 80137e6:	f000 f87b 	bl	80138e0 <_malloc_r>
 80137ea:	9a01      	ldr	r2, [sp, #4]
 80137ec:	4605      	mov	r5, r0
 80137ee:	b930      	cbnz	r0, 80137fe <_calloc_r+0x24>
 80137f0:	4628      	mov	r0, r5
 80137f2:	b003      	add	sp, #12
 80137f4:	bd30      	pop	{r4, r5, pc}
 80137f6:	220c      	movs	r2, #12
 80137f8:	6002      	str	r2, [r0, #0]
 80137fa:	2500      	movs	r5, #0
 80137fc:	e7f8      	b.n	80137f0 <_calloc_r+0x16>
 80137fe:	4621      	mov	r1, r4
 8013800:	f7fb fefe 	bl	800f600 <memset>
 8013804:	e7f4      	b.n	80137f0 <_calloc_r+0x16>
	...

08013808 <_free_r>:
 8013808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801380a:	2900      	cmp	r1, #0
 801380c:	d044      	beq.n	8013898 <_free_r+0x90>
 801380e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013812:	9001      	str	r0, [sp, #4]
 8013814:	2b00      	cmp	r3, #0
 8013816:	f1a1 0404 	sub.w	r4, r1, #4
 801381a:	bfb8      	it	lt
 801381c:	18e4      	addlt	r4, r4, r3
 801381e:	f000 fb75 	bl	8013f0c <__malloc_lock>
 8013822:	4a1e      	ldr	r2, [pc, #120]	; (801389c <_free_r+0x94>)
 8013824:	9801      	ldr	r0, [sp, #4]
 8013826:	6813      	ldr	r3, [r2, #0]
 8013828:	b933      	cbnz	r3, 8013838 <_free_r+0x30>
 801382a:	6063      	str	r3, [r4, #4]
 801382c:	6014      	str	r4, [r2, #0]
 801382e:	b003      	add	sp, #12
 8013830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013834:	f000 bb70 	b.w	8013f18 <__malloc_unlock>
 8013838:	42a3      	cmp	r3, r4
 801383a:	d908      	bls.n	801384e <_free_r+0x46>
 801383c:	6825      	ldr	r5, [r4, #0]
 801383e:	1961      	adds	r1, r4, r5
 8013840:	428b      	cmp	r3, r1
 8013842:	bf01      	itttt	eq
 8013844:	6819      	ldreq	r1, [r3, #0]
 8013846:	685b      	ldreq	r3, [r3, #4]
 8013848:	1949      	addeq	r1, r1, r5
 801384a:	6021      	streq	r1, [r4, #0]
 801384c:	e7ed      	b.n	801382a <_free_r+0x22>
 801384e:	461a      	mov	r2, r3
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	b10b      	cbz	r3, 8013858 <_free_r+0x50>
 8013854:	42a3      	cmp	r3, r4
 8013856:	d9fa      	bls.n	801384e <_free_r+0x46>
 8013858:	6811      	ldr	r1, [r2, #0]
 801385a:	1855      	adds	r5, r2, r1
 801385c:	42a5      	cmp	r5, r4
 801385e:	d10b      	bne.n	8013878 <_free_r+0x70>
 8013860:	6824      	ldr	r4, [r4, #0]
 8013862:	4421      	add	r1, r4
 8013864:	1854      	adds	r4, r2, r1
 8013866:	42a3      	cmp	r3, r4
 8013868:	6011      	str	r1, [r2, #0]
 801386a:	d1e0      	bne.n	801382e <_free_r+0x26>
 801386c:	681c      	ldr	r4, [r3, #0]
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	6053      	str	r3, [r2, #4]
 8013872:	4421      	add	r1, r4
 8013874:	6011      	str	r1, [r2, #0]
 8013876:	e7da      	b.n	801382e <_free_r+0x26>
 8013878:	d902      	bls.n	8013880 <_free_r+0x78>
 801387a:	230c      	movs	r3, #12
 801387c:	6003      	str	r3, [r0, #0]
 801387e:	e7d6      	b.n	801382e <_free_r+0x26>
 8013880:	6825      	ldr	r5, [r4, #0]
 8013882:	1961      	adds	r1, r4, r5
 8013884:	428b      	cmp	r3, r1
 8013886:	bf04      	itt	eq
 8013888:	6819      	ldreq	r1, [r3, #0]
 801388a:	685b      	ldreq	r3, [r3, #4]
 801388c:	6063      	str	r3, [r4, #4]
 801388e:	bf04      	itt	eq
 8013890:	1949      	addeq	r1, r1, r5
 8013892:	6021      	streq	r1, [r4, #0]
 8013894:	6054      	str	r4, [r2, #4]
 8013896:	e7ca      	b.n	801382e <_free_r+0x26>
 8013898:	b003      	add	sp, #12
 801389a:	bd30      	pop	{r4, r5, pc}
 801389c:	2001346c 	.word	0x2001346c

080138a0 <sbrk_aligned>:
 80138a0:	b570      	push	{r4, r5, r6, lr}
 80138a2:	4e0e      	ldr	r6, [pc, #56]	; (80138dc <sbrk_aligned+0x3c>)
 80138a4:	460c      	mov	r4, r1
 80138a6:	6831      	ldr	r1, [r6, #0]
 80138a8:	4605      	mov	r5, r0
 80138aa:	b911      	cbnz	r1, 80138b2 <sbrk_aligned+0x12>
 80138ac:	f000 fa20 	bl	8013cf0 <_sbrk_r>
 80138b0:	6030      	str	r0, [r6, #0]
 80138b2:	4621      	mov	r1, r4
 80138b4:	4628      	mov	r0, r5
 80138b6:	f000 fa1b 	bl	8013cf0 <_sbrk_r>
 80138ba:	1c43      	adds	r3, r0, #1
 80138bc:	d00a      	beq.n	80138d4 <sbrk_aligned+0x34>
 80138be:	1cc4      	adds	r4, r0, #3
 80138c0:	f024 0403 	bic.w	r4, r4, #3
 80138c4:	42a0      	cmp	r0, r4
 80138c6:	d007      	beq.n	80138d8 <sbrk_aligned+0x38>
 80138c8:	1a21      	subs	r1, r4, r0
 80138ca:	4628      	mov	r0, r5
 80138cc:	f000 fa10 	bl	8013cf0 <_sbrk_r>
 80138d0:	3001      	adds	r0, #1
 80138d2:	d101      	bne.n	80138d8 <sbrk_aligned+0x38>
 80138d4:	f04f 34ff 	mov.w	r4, #4294967295
 80138d8:	4620      	mov	r0, r4
 80138da:	bd70      	pop	{r4, r5, r6, pc}
 80138dc:	20013470 	.word	0x20013470

080138e0 <_malloc_r>:
 80138e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138e4:	1ccd      	adds	r5, r1, #3
 80138e6:	f025 0503 	bic.w	r5, r5, #3
 80138ea:	3508      	adds	r5, #8
 80138ec:	2d0c      	cmp	r5, #12
 80138ee:	bf38      	it	cc
 80138f0:	250c      	movcc	r5, #12
 80138f2:	2d00      	cmp	r5, #0
 80138f4:	4607      	mov	r7, r0
 80138f6:	db01      	blt.n	80138fc <_malloc_r+0x1c>
 80138f8:	42a9      	cmp	r1, r5
 80138fa:	d905      	bls.n	8013908 <_malloc_r+0x28>
 80138fc:	230c      	movs	r3, #12
 80138fe:	603b      	str	r3, [r7, #0]
 8013900:	2600      	movs	r6, #0
 8013902:	4630      	mov	r0, r6
 8013904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013908:	4e2e      	ldr	r6, [pc, #184]	; (80139c4 <_malloc_r+0xe4>)
 801390a:	f000 faff 	bl	8013f0c <__malloc_lock>
 801390e:	6833      	ldr	r3, [r6, #0]
 8013910:	461c      	mov	r4, r3
 8013912:	bb34      	cbnz	r4, 8013962 <_malloc_r+0x82>
 8013914:	4629      	mov	r1, r5
 8013916:	4638      	mov	r0, r7
 8013918:	f7ff ffc2 	bl	80138a0 <sbrk_aligned>
 801391c:	1c43      	adds	r3, r0, #1
 801391e:	4604      	mov	r4, r0
 8013920:	d14d      	bne.n	80139be <_malloc_r+0xde>
 8013922:	6834      	ldr	r4, [r6, #0]
 8013924:	4626      	mov	r6, r4
 8013926:	2e00      	cmp	r6, #0
 8013928:	d140      	bne.n	80139ac <_malloc_r+0xcc>
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	4631      	mov	r1, r6
 801392e:	4638      	mov	r0, r7
 8013930:	eb04 0803 	add.w	r8, r4, r3
 8013934:	f000 f9dc 	bl	8013cf0 <_sbrk_r>
 8013938:	4580      	cmp	r8, r0
 801393a:	d13a      	bne.n	80139b2 <_malloc_r+0xd2>
 801393c:	6821      	ldr	r1, [r4, #0]
 801393e:	3503      	adds	r5, #3
 8013940:	1a6d      	subs	r5, r5, r1
 8013942:	f025 0503 	bic.w	r5, r5, #3
 8013946:	3508      	adds	r5, #8
 8013948:	2d0c      	cmp	r5, #12
 801394a:	bf38      	it	cc
 801394c:	250c      	movcc	r5, #12
 801394e:	4629      	mov	r1, r5
 8013950:	4638      	mov	r0, r7
 8013952:	f7ff ffa5 	bl	80138a0 <sbrk_aligned>
 8013956:	3001      	adds	r0, #1
 8013958:	d02b      	beq.n	80139b2 <_malloc_r+0xd2>
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	442b      	add	r3, r5
 801395e:	6023      	str	r3, [r4, #0]
 8013960:	e00e      	b.n	8013980 <_malloc_r+0xa0>
 8013962:	6822      	ldr	r2, [r4, #0]
 8013964:	1b52      	subs	r2, r2, r5
 8013966:	d41e      	bmi.n	80139a6 <_malloc_r+0xc6>
 8013968:	2a0b      	cmp	r2, #11
 801396a:	d916      	bls.n	801399a <_malloc_r+0xba>
 801396c:	1961      	adds	r1, r4, r5
 801396e:	42a3      	cmp	r3, r4
 8013970:	6025      	str	r5, [r4, #0]
 8013972:	bf18      	it	ne
 8013974:	6059      	strne	r1, [r3, #4]
 8013976:	6863      	ldr	r3, [r4, #4]
 8013978:	bf08      	it	eq
 801397a:	6031      	streq	r1, [r6, #0]
 801397c:	5162      	str	r2, [r4, r5]
 801397e:	604b      	str	r3, [r1, #4]
 8013980:	4638      	mov	r0, r7
 8013982:	f104 060b 	add.w	r6, r4, #11
 8013986:	f000 fac7 	bl	8013f18 <__malloc_unlock>
 801398a:	f026 0607 	bic.w	r6, r6, #7
 801398e:	1d23      	adds	r3, r4, #4
 8013990:	1af2      	subs	r2, r6, r3
 8013992:	d0b6      	beq.n	8013902 <_malloc_r+0x22>
 8013994:	1b9b      	subs	r3, r3, r6
 8013996:	50a3      	str	r3, [r4, r2]
 8013998:	e7b3      	b.n	8013902 <_malloc_r+0x22>
 801399a:	6862      	ldr	r2, [r4, #4]
 801399c:	42a3      	cmp	r3, r4
 801399e:	bf0c      	ite	eq
 80139a0:	6032      	streq	r2, [r6, #0]
 80139a2:	605a      	strne	r2, [r3, #4]
 80139a4:	e7ec      	b.n	8013980 <_malloc_r+0xa0>
 80139a6:	4623      	mov	r3, r4
 80139a8:	6864      	ldr	r4, [r4, #4]
 80139aa:	e7b2      	b.n	8013912 <_malloc_r+0x32>
 80139ac:	4634      	mov	r4, r6
 80139ae:	6876      	ldr	r6, [r6, #4]
 80139b0:	e7b9      	b.n	8013926 <_malloc_r+0x46>
 80139b2:	230c      	movs	r3, #12
 80139b4:	603b      	str	r3, [r7, #0]
 80139b6:	4638      	mov	r0, r7
 80139b8:	f000 faae 	bl	8013f18 <__malloc_unlock>
 80139bc:	e7a1      	b.n	8013902 <_malloc_r+0x22>
 80139be:	6025      	str	r5, [r4, #0]
 80139c0:	e7de      	b.n	8013980 <_malloc_r+0xa0>
 80139c2:	bf00      	nop
 80139c4:	2001346c 	.word	0x2001346c

080139c8 <_realloc_r>:
 80139c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139cc:	4680      	mov	r8, r0
 80139ce:	4614      	mov	r4, r2
 80139d0:	460e      	mov	r6, r1
 80139d2:	b921      	cbnz	r1, 80139de <_realloc_r+0x16>
 80139d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139d8:	4611      	mov	r1, r2
 80139da:	f7ff bf81 	b.w	80138e0 <_malloc_r>
 80139de:	b92a      	cbnz	r2, 80139ec <_realloc_r+0x24>
 80139e0:	f7ff ff12 	bl	8013808 <_free_r>
 80139e4:	4625      	mov	r5, r4
 80139e6:	4628      	mov	r0, r5
 80139e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ec:	f000 fa9a 	bl	8013f24 <_malloc_usable_size_r>
 80139f0:	4284      	cmp	r4, r0
 80139f2:	4607      	mov	r7, r0
 80139f4:	d802      	bhi.n	80139fc <_realloc_r+0x34>
 80139f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80139fa:	d812      	bhi.n	8013a22 <_realloc_r+0x5a>
 80139fc:	4621      	mov	r1, r4
 80139fe:	4640      	mov	r0, r8
 8013a00:	f7ff ff6e 	bl	80138e0 <_malloc_r>
 8013a04:	4605      	mov	r5, r0
 8013a06:	2800      	cmp	r0, #0
 8013a08:	d0ed      	beq.n	80139e6 <_realloc_r+0x1e>
 8013a0a:	42bc      	cmp	r4, r7
 8013a0c:	4622      	mov	r2, r4
 8013a0e:	4631      	mov	r1, r6
 8013a10:	bf28      	it	cs
 8013a12:	463a      	movcs	r2, r7
 8013a14:	f7fb fde6 	bl	800f5e4 <memcpy>
 8013a18:	4631      	mov	r1, r6
 8013a1a:	4640      	mov	r0, r8
 8013a1c:	f7ff fef4 	bl	8013808 <_free_r>
 8013a20:	e7e1      	b.n	80139e6 <_realloc_r+0x1e>
 8013a22:	4635      	mov	r5, r6
 8013a24:	e7df      	b.n	80139e6 <_realloc_r+0x1e>

08013a26 <__ssputs_r>:
 8013a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a2a:	688e      	ldr	r6, [r1, #8]
 8013a2c:	429e      	cmp	r6, r3
 8013a2e:	4682      	mov	sl, r0
 8013a30:	460c      	mov	r4, r1
 8013a32:	4690      	mov	r8, r2
 8013a34:	461f      	mov	r7, r3
 8013a36:	d838      	bhi.n	8013aaa <__ssputs_r+0x84>
 8013a38:	898a      	ldrh	r2, [r1, #12]
 8013a3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a3e:	d032      	beq.n	8013aa6 <__ssputs_r+0x80>
 8013a40:	6825      	ldr	r5, [r4, #0]
 8013a42:	6909      	ldr	r1, [r1, #16]
 8013a44:	eba5 0901 	sub.w	r9, r5, r1
 8013a48:	6965      	ldr	r5, [r4, #20]
 8013a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a52:	3301      	adds	r3, #1
 8013a54:	444b      	add	r3, r9
 8013a56:	106d      	asrs	r5, r5, #1
 8013a58:	429d      	cmp	r5, r3
 8013a5a:	bf38      	it	cc
 8013a5c:	461d      	movcc	r5, r3
 8013a5e:	0553      	lsls	r3, r2, #21
 8013a60:	d531      	bpl.n	8013ac6 <__ssputs_r+0xa0>
 8013a62:	4629      	mov	r1, r5
 8013a64:	f7ff ff3c 	bl	80138e0 <_malloc_r>
 8013a68:	4606      	mov	r6, r0
 8013a6a:	b950      	cbnz	r0, 8013a82 <__ssputs_r+0x5c>
 8013a6c:	230c      	movs	r3, #12
 8013a6e:	f8ca 3000 	str.w	r3, [sl]
 8013a72:	89a3      	ldrh	r3, [r4, #12]
 8013a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a78:	81a3      	strh	r3, [r4, #12]
 8013a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a82:	6921      	ldr	r1, [r4, #16]
 8013a84:	464a      	mov	r2, r9
 8013a86:	f7fb fdad 	bl	800f5e4 <memcpy>
 8013a8a:	89a3      	ldrh	r3, [r4, #12]
 8013a8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a94:	81a3      	strh	r3, [r4, #12]
 8013a96:	6126      	str	r6, [r4, #16]
 8013a98:	6165      	str	r5, [r4, #20]
 8013a9a:	444e      	add	r6, r9
 8013a9c:	eba5 0509 	sub.w	r5, r5, r9
 8013aa0:	6026      	str	r6, [r4, #0]
 8013aa2:	60a5      	str	r5, [r4, #8]
 8013aa4:	463e      	mov	r6, r7
 8013aa6:	42be      	cmp	r6, r7
 8013aa8:	d900      	bls.n	8013aac <__ssputs_r+0x86>
 8013aaa:	463e      	mov	r6, r7
 8013aac:	6820      	ldr	r0, [r4, #0]
 8013aae:	4632      	mov	r2, r6
 8013ab0:	4641      	mov	r1, r8
 8013ab2:	f7ff f9b7 	bl	8012e24 <memmove>
 8013ab6:	68a3      	ldr	r3, [r4, #8]
 8013ab8:	1b9b      	subs	r3, r3, r6
 8013aba:	60a3      	str	r3, [r4, #8]
 8013abc:	6823      	ldr	r3, [r4, #0]
 8013abe:	4433      	add	r3, r6
 8013ac0:	6023      	str	r3, [r4, #0]
 8013ac2:	2000      	movs	r0, #0
 8013ac4:	e7db      	b.n	8013a7e <__ssputs_r+0x58>
 8013ac6:	462a      	mov	r2, r5
 8013ac8:	f7ff ff7e 	bl	80139c8 <_realloc_r>
 8013acc:	4606      	mov	r6, r0
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d1e1      	bne.n	8013a96 <__ssputs_r+0x70>
 8013ad2:	6921      	ldr	r1, [r4, #16]
 8013ad4:	4650      	mov	r0, sl
 8013ad6:	f7ff fe97 	bl	8013808 <_free_r>
 8013ada:	e7c7      	b.n	8013a6c <__ssputs_r+0x46>

08013adc <_svfiprintf_r>:
 8013adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae0:	4698      	mov	r8, r3
 8013ae2:	898b      	ldrh	r3, [r1, #12]
 8013ae4:	061b      	lsls	r3, r3, #24
 8013ae6:	b09d      	sub	sp, #116	; 0x74
 8013ae8:	4607      	mov	r7, r0
 8013aea:	460d      	mov	r5, r1
 8013aec:	4614      	mov	r4, r2
 8013aee:	d50e      	bpl.n	8013b0e <_svfiprintf_r+0x32>
 8013af0:	690b      	ldr	r3, [r1, #16]
 8013af2:	b963      	cbnz	r3, 8013b0e <_svfiprintf_r+0x32>
 8013af4:	2140      	movs	r1, #64	; 0x40
 8013af6:	f7ff fef3 	bl	80138e0 <_malloc_r>
 8013afa:	6028      	str	r0, [r5, #0]
 8013afc:	6128      	str	r0, [r5, #16]
 8013afe:	b920      	cbnz	r0, 8013b0a <_svfiprintf_r+0x2e>
 8013b00:	230c      	movs	r3, #12
 8013b02:	603b      	str	r3, [r7, #0]
 8013b04:	f04f 30ff 	mov.w	r0, #4294967295
 8013b08:	e0d1      	b.n	8013cae <_svfiprintf_r+0x1d2>
 8013b0a:	2340      	movs	r3, #64	; 0x40
 8013b0c:	616b      	str	r3, [r5, #20]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	9309      	str	r3, [sp, #36]	; 0x24
 8013b12:	2320      	movs	r3, #32
 8013b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b1c:	2330      	movs	r3, #48	; 0x30
 8013b1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013cc8 <_svfiprintf_r+0x1ec>
 8013b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b26:	f04f 0901 	mov.w	r9, #1
 8013b2a:	4623      	mov	r3, r4
 8013b2c:	469a      	mov	sl, r3
 8013b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b32:	b10a      	cbz	r2, 8013b38 <_svfiprintf_r+0x5c>
 8013b34:	2a25      	cmp	r2, #37	; 0x25
 8013b36:	d1f9      	bne.n	8013b2c <_svfiprintf_r+0x50>
 8013b38:	ebba 0b04 	subs.w	fp, sl, r4
 8013b3c:	d00b      	beq.n	8013b56 <_svfiprintf_r+0x7a>
 8013b3e:	465b      	mov	r3, fp
 8013b40:	4622      	mov	r2, r4
 8013b42:	4629      	mov	r1, r5
 8013b44:	4638      	mov	r0, r7
 8013b46:	f7ff ff6e 	bl	8013a26 <__ssputs_r>
 8013b4a:	3001      	adds	r0, #1
 8013b4c:	f000 80aa 	beq.w	8013ca4 <_svfiprintf_r+0x1c8>
 8013b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b52:	445a      	add	r2, fp
 8013b54:	9209      	str	r2, [sp, #36]	; 0x24
 8013b56:	f89a 3000 	ldrb.w	r3, [sl]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f000 80a2 	beq.w	8013ca4 <_svfiprintf_r+0x1c8>
 8013b60:	2300      	movs	r3, #0
 8013b62:	f04f 32ff 	mov.w	r2, #4294967295
 8013b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b6a:	f10a 0a01 	add.w	sl, sl, #1
 8013b6e:	9304      	str	r3, [sp, #16]
 8013b70:	9307      	str	r3, [sp, #28]
 8013b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b76:	931a      	str	r3, [sp, #104]	; 0x68
 8013b78:	4654      	mov	r4, sl
 8013b7a:	2205      	movs	r2, #5
 8013b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b80:	4851      	ldr	r0, [pc, #324]	; (8013cc8 <_svfiprintf_r+0x1ec>)
 8013b82:	f7ec fb55 	bl	8000230 <memchr>
 8013b86:	9a04      	ldr	r2, [sp, #16]
 8013b88:	b9d8      	cbnz	r0, 8013bc2 <_svfiprintf_r+0xe6>
 8013b8a:	06d0      	lsls	r0, r2, #27
 8013b8c:	bf44      	itt	mi
 8013b8e:	2320      	movmi	r3, #32
 8013b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b94:	0711      	lsls	r1, r2, #28
 8013b96:	bf44      	itt	mi
 8013b98:	232b      	movmi	r3, #43	; 0x2b
 8013b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ba4:	d015      	beq.n	8013bd2 <_svfiprintf_r+0xf6>
 8013ba6:	9a07      	ldr	r2, [sp, #28]
 8013ba8:	4654      	mov	r4, sl
 8013baa:	2000      	movs	r0, #0
 8013bac:	f04f 0c0a 	mov.w	ip, #10
 8013bb0:	4621      	mov	r1, r4
 8013bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bb6:	3b30      	subs	r3, #48	; 0x30
 8013bb8:	2b09      	cmp	r3, #9
 8013bba:	d94e      	bls.n	8013c5a <_svfiprintf_r+0x17e>
 8013bbc:	b1b0      	cbz	r0, 8013bec <_svfiprintf_r+0x110>
 8013bbe:	9207      	str	r2, [sp, #28]
 8013bc0:	e014      	b.n	8013bec <_svfiprintf_r+0x110>
 8013bc2:	eba0 0308 	sub.w	r3, r0, r8
 8013bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8013bca:	4313      	orrs	r3, r2
 8013bcc:	9304      	str	r3, [sp, #16]
 8013bce:	46a2      	mov	sl, r4
 8013bd0:	e7d2      	b.n	8013b78 <_svfiprintf_r+0x9c>
 8013bd2:	9b03      	ldr	r3, [sp, #12]
 8013bd4:	1d19      	adds	r1, r3, #4
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	9103      	str	r1, [sp, #12]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	bfbb      	ittet	lt
 8013bde:	425b      	neglt	r3, r3
 8013be0:	f042 0202 	orrlt.w	r2, r2, #2
 8013be4:	9307      	strge	r3, [sp, #28]
 8013be6:	9307      	strlt	r3, [sp, #28]
 8013be8:	bfb8      	it	lt
 8013bea:	9204      	strlt	r2, [sp, #16]
 8013bec:	7823      	ldrb	r3, [r4, #0]
 8013bee:	2b2e      	cmp	r3, #46	; 0x2e
 8013bf0:	d10c      	bne.n	8013c0c <_svfiprintf_r+0x130>
 8013bf2:	7863      	ldrb	r3, [r4, #1]
 8013bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf6:	d135      	bne.n	8013c64 <_svfiprintf_r+0x188>
 8013bf8:	9b03      	ldr	r3, [sp, #12]
 8013bfa:	1d1a      	adds	r2, r3, #4
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	9203      	str	r2, [sp, #12]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	bfb8      	it	lt
 8013c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c08:	3402      	adds	r4, #2
 8013c0a:	9305      	str	r3, [sp, #20]
 8013c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013cd8 <_svfiprintf_r+0x1fc>
 8013c10:	7821      	ldrb	r1, [r4, #0]
 8013c12:	2203      	movs	r2, #3
 8013c14:	4650      	mov	r0, sl
 8013c16:	f7ec fb0b 	bl	8000230 <memchr>
 8013c1a:	b140      	cbz	r0, 8013c2e <_svfiprintf_r+0x152>
 8013c1c:	2340      	movs	r3, #64	; 0x40
 8013c1e:	eba0 000a 	sub.w	r0, r0, sl
 8013c22:	fa03 f000 	lsl.w	r0, r3, r0
 8013c26:	9b04      	ldr	r3, [sp, #16]
 8013c28:	4303      	orrs	r3, r0
 8013c2a:	3401      	adds	r4, #1
 8013c2c:	9304      	str	r3, [sp, #16]
 8013c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c32:	4826      	ldr	r0, [pc, #152]	; (8013ccc <_svfiprintf_r+0x1f0>)
 8013c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c38:	2206      	movs	r2, #6
 8013c3a:	f7ec faf9 	bl	8000230 <memchr>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	d038      	beq.n	8013cb4 <_svfiprintf_r+0x1d8>
 8013c42:	4b23      	ldr	r3, [pc, #140]	; (8013cd0 <_svfiprintf_r+0x1f4>)
 8013c44:	bb1b      	cbnz	r3, 8013c8e <_svfiprintf_r+0x1b2>
 8013c46:	9b03      	ldr	r3, [sp, #12]
 8013c48:	3307      	adds	r3, #7
 8013c4a:	f023 0307 	bic.w	r3, r3, #7
 8013c4e:	3308      	adds	r3, #8
 8013c50:	9303      	str	r3, [sp, #12]
 8013c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c54:	4433      	add	r3, r6
 8013c56:	9309      	str	r3, [sp, #36]	; 0x24
 8013c58:	e767      	b.n	8013b2a <_svfiprintf_r+0x4e>
 8013c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c5e:	460c      	mov	r4, r1
 8013c60:	2001      	movs	r0, #1
 8013c62:	e7a5      	b.n	8013bb0 <_svfiprintf_r+0xd4>
 8013c64:	2300      	movs	r3, #0
 8013c66:	3401      	adds	r4, #1
 8013c68:	9305      	str	r3, [sp, #20]
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	f04f 0c0a 	mov.w	ip, #10
 8013c70:	4620      	mov	r0, r4
 8013c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c76:	3a30      	subs	r2, #48	; 0x30
 8013c78:	2a09      	cmp	r2, #9
 8013c7a:	d903      	bls.n	8013c84 <_svfiprintf_r+0x1a8>
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0c5      	beq.n	8013c0c <_svfiprintf_r+0x130>
 8013c80:	9105      	str	r1, [sp, #20]
 8013c82:	e7c3      	b.n	8013c0c <_svfiprintf_r+0x130>
 8013c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c88:	4604      	mov	r4, r0
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e7f0      	b.n	8013c70 <_svfiprintf_r+0x194>
 8013c8e:	ab03      	add	r3, sp, #12
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	462a      	mov	r2, r5
 8013c94:	4b0f      	ldr	r3, [pc, #60]	; (8013cd4 <_svfiprintf_r+0x1f8>)
 8013c96:	a904      	add	r1, sp, #16
 8013c98:	4638      	mov	r0, r7
 8013c9a:	f7fb feb3 	bl	800fa04 <_printf_float>
 8013c9e:	1c42      	adds	r2, r0, #1
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	d1d6      	bne.n	8013c52 <_svfiprintf_r+0x176>
 8013ca4:	89ab      	ldrh	r3, [r5, #12]
 8013ca6:	065b      	lsls	r3, r3, #25
 8013ca8:	f53f af2c 	bmi.w	8013b04 <_svfiprintf_r+0x28>
 8013cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cae:	b01d      	add	sp, #116	; 0x74
 8013cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cb4:	ab03      	add	r3, sp, #12
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	462a      	mov	r2, r5
 8013cba:	4b06      	ldr	r3, [pc, #24]	; (8013cd4 <_svfiprintf_r+0x1f8>)
 8013cbc:	a904      	add	r1, sp, #16
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	f7fc f944 	bl	800ff4c <_printf_i>
 8013cc4:	e7eb      	b.n	8013c9e <_svfiprintf_r+0x1c2>
 8013cc6:	bf00      	nop
 8013cc8:	0802aae4 	.word	0x0802aae4
 8013ccc:	0802aaee 	.word	0x0802aaee
 8013cd0:	0800fa05 	.word	0x0800fa05
 8013cd4:	08013a27 	.word	0x08013a27
 8013cd8:	0802aaea 	.word	0x0802aaea
 8013cdc:	00000000 	.word	0x00000000

08013ce0 <nan>:
 8013ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ce8 <nan+0x8>
 8013ce4:	4770      	bx	lr
 8013ce6:	bf00      	nop
 8013ce8:	00000000 	.word	0x00000000
 8013cec:	7ff80000 	.word	0x7ff80000

08013cf0 <_sbrk_r>:
 8013cf0:	b538      	push	{r3, r4, r5, lr}
 8013cf2:	4d06      	ldr	r5, [pc, #24]	; (8013d0c <_sbrk_r+0x1c>)
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	4608      	mov	r0, r1
 8013cfa:	602b      	str	r3, [r5, #0]
 8013cfc:	f7f0 f8f4 	bl	8003ee8 <_sbrk>
 8013d00:	1c43      	adds	r3, r0, #1
 8013d02:	d102      	bne.n	8013d0a <_sbrk_r+0x1a>
 8013d04:	682b      	ldr	r3, [r5, #0]
 8013d06:	b103      	cbz	r3, 8013d0a <_sbrk_r+0x1a>
 8013d08:	6023      	str	r3, [r4, #0]
 8013d0a:	bd38      	pop	{r3, r4, r5, pc}
 8013d0c:	20013474 	.word	0x20013474

08013d10 <_raise_r>:
 8013d10:	291f      	cmp	r1, #31
 8013d12:	b538      	push	{r3, r4, r5, lr}
 8013d14:	4604      	mov	r4, r0
 8013d16:	460d      	mov	r5, r1
 8013d18:	d904      	bls.n	8013d24 <_raise_r+0x14>
 8013d1a:	2316      	movs	r3, #22
 8013d1c:	6003      	str	r3, [r0, #0]
 8013d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d22:	bd38      	pop	{r3, r4, r5, pc}
 8013d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013d26:	b112      	cbz	r2, 8013d2e <_raise_r+0x1e>
 8013d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d2c:	b94b      	cbnz	r3, 8013d42 <_raise_r+0x32>
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f000 f830 	bl	8013d94 <_getpid_r>
 8013d34:	462a      	mov	r2, r5
 8013d36:	4601      	mov	r1, r0
 8013d38:	4620      	mov	r0, r4
 8013d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d3e:	f000 b817 	b.w	8013d70 <_kill_r>
 8013d42:	2b01      	cmp	r3, #1
 8013d44:	d00a      	beq.n	8013d5c <_raise_r+0x4c>
 8013d46:	1c59      	adds	r1, r3, #1
 8013d48:	d103      	bne.n	8013d52 <_raise_r+0x42>
 8013d4a:	2316      	movs	r3, #22
 8013d4c:	6003      	str	r3, [r0, #0]
 8013d4e:	2001      	movs	r0, #1
 8013d50:	e7e7      	b.n	8013d22 <_raise_r+0x12>
 8013d52:	2400      	movs	r4, #0
 8013d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013d58:	4628      	mov	r0, r5
 8013d5a:	4798      	blx	r3
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	e7e0      	b.n	8013d22 <_raise_r+0x12>

08013d60 <raise>:
 8013d60:	4b02      	ldr	r3, [pc, #8]	; (8013d6c <raise+0xc>)
 8013d62:	4601      	mov	r1, r0
 8013d64:	6818      	ldr	r0, [r3, #0]
 8013d66:	f7ff bfd3 	b.w	8013d10 <_raise_r>
 8013d6a:	bf00      	nop
 8013d6c:	200000dc 	.word	0x200000dc

08013d70 <_kill_r>:
 8013d70:	b538      	push	{r3, r4, r5, lr}
 8013d72:	4d07      	ldr	r5, [pc, #28]	; (8013d90 <_kill_r+0x20>)
 8013d74:	2300      	movs	r3, #0
 8013d76:	4604      	mov	r4, r0
 8013d78:	4608      	mov	r0, r1
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	602b      	str	r3, [r5, #0]
 8013d7e:	f7f0 f847 	bl	8003e10 <_kill>
 8013d82:	1c43      	adds	r3, r0, #1
 8013d84:	d102      	bne.n	8013d8c <_kill_r+0x1c>
 8013d86:	682b      	ldr	r3, [r5, #0]
 8013d88:	b103      	cbz	r3, 8013d8c <_kill_r+0x1c>
 8013d8a:	6023      	str	r3, [r4, #0]
 8013d8c:	bd38      	pop	{r3, r4, r5, pc}
 8013d8e:	bf00      	nop
 8013d90:	20013474 	.word	0x20013474

08013d94 <_getpid_r>:
 8013d94:	f7f0 b834 	b.w	8003e00 <_getpid>

08013d98 <__sread>:
 8013d98:	b510      	push	{r4, lr}
 8013d9a:	460c      	mov	r4, r1
 8013d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013da0:	f000 f8c8 	bl	8013f34 <_read_r>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	bfab      	itete	ge
 8013da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013daa:	89a3      	ldrhlt	r3, [r4, #12]
 8013dac:	181b      	addge	r3, r3, r0
 8013dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013db2:	bfac      	ite	ge
 8013db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013db6:	81a3      	strhlt	r3, [r4, #12]
 8013db8:	bd10      	pop	{r4, pc}

08013dba <__swrite>:
 8013dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbe:	461f      	mov	r7, r3
 8013dc0:	898b      	ldrh	r3, [r1, #12]
 8013dc2:	05db      	lsls	r3, r3, #23
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	460c      	mov	r4, r1
 8013dc8:	4616      	mov	r6, r2
 8013dca:	d505      	bpl.n	8013dd8 <__swrite+0x1e>
 8013dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dd0:	2302      	movs	r3, #2
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f000 f888 	bl	8013ee8 <_lseek_r>
 8013dd8:	89a3      	ldrh	r3, [r4, #12]
 8013dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013de2:	81a3      	strh	r3, [r4, #12]
 8013de4:	4632      	mov	r2, r6
 8013de6:	463b      	mov	r3, r7
 8013de8:	4628      	mov	r0, r5
 8013dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dee:	f000 b837 	b.w	8013e60 <_write_r>

08013df2 <__sseek>:
 8013df2:	b510      	push	{r4, lr}
 8013df4:	460c      	mov	r4, r1
 8013df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dfa:	f000 f875 	bl	8013ee8 <_lseek_r>
 8013dfe:	1c43      	adds	r3, r0, #1
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	bf15      	itete	ne
 8013e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e0e:	81a3      	strheq	r3, [r4, #12]
 8013e10:	bf18      	it	ne
 8013e12:	81a3      	strhne	r3, [r4, #12]
 8013e14:	bd10      	pop	{r4, pc}

08013e16 <__sclose>:
 8013e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e1a:	f000 b833 	b.w	8013e84 <_close_r>

08013e1e <strncmp>:
 8013e1e:	b510      	push	{r4, lr}
 8013e20:	b17a      	cbz	r2, 8013e42 <strncmp+0x24>
 8013e22:	4603      	mov	r3, r0
 8013e24:	3901      	subs	r1, #1
 8013e26:	1884      	adds	r4, r0, r2
 8013e28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013e2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013e30:	4290      	cmp	r0, r2
 8013e32:	d101      	bne.n	8013e38 <strncmp+0x1a>
 8013e34:	42a3      	cmp	r3, r4
 8013e36:	d101      	bne.n	8013e3c <strncmp+0x1e>
 8013e38:	1a80      	subs	r0, r0, r2
 8013e3a:	bd10      	pop	{r4, pc}
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	d1f3      	bne.n	8013e28 <strncmp+0xa>
 8013e40:	e7fa      	b.n	8013e38 <strncmp+0x1a>
 8013e42:	4610      	mov	r0, r2
 8013e44:	e7f9      	b.n	8013e3a <strncmp+0x1c>

08013e46 <__ascii_wctomb>:
 8013e46:	b149      	cbz	r1, 8013e5c <__ascii_wctomb+0x16>
 8013e48:	2aff      	cmp	r2, #255	; 0xff
 8013e4a:	bf85      	ittet	hi
 8013e4c:	238a      	movhi	r3, #138	; 0x8a
 8013e4e:	6003      	strhi	r3, [r0, #0]
 8013e50:	700a      	strbls	r2, [r1, #0]
 8013e52:	f04f 30ff 	movhi.w	r0, #4294967295
 8013e56:	bf98      	it	ls
 8013e58:	2001      	movls	r0, #1
 8013e5a:	4770      	bx	lr
 8013e5c:	4608      	mov	r0, r1
 8013e5e:	4770      	bx	lr

08013e60 <_write_r>:
 8013e60:	b538      	push	{r3, r4, r5, lr}
 8013e62:	4d07      	ldr	r5, [pc, #28]	; (8013e80 <_write_r+0x20>)
 8013e64:	4604      	mov	r4, r0
 8013e66:	4608      	mov	r0, r1
 8013e68:	4611      	mov	r1, r2
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	602a      	str	r2, [r5, #0]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	f7ef f9cc 	bl	800320c <_write>
 8013e74:	1c43      	adds	r3, r0, #1
 8013e76:	d102      	bne.n	8013e7e <_write_r+0x1e>
 8013e78:	682b      	ldr	r3, [r5, #0]
 8013e7a:	b103      	cbz	r3, 8013e7e <_write_r+0x1e>
 8013e7c:	6023      	str	r3, [r4, #0]
 8013e7e:	bd38      	pop	{r3, r4, r5, pc}
 8013e80:	20013474 	.word	0x20013474

08013e84 <_close_r>:
 8013e84:	b538      	push	{r3, r4, r5, lr}
 8013e86:	4d06      	ldr	r5, [pc, #24]	; (8013ea0 <_close_r+0x1c>)
 8013e88:	2300      	movs	r3, #0
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	4608      	mov	r0, r1
 8013e8e:	602b      	str	r3, [r5, #0]
 8013e90:	f7ef fff5 	bl	8003e7e <_close>
 8013e94:	1c43      	adds	r3, r0, #1
 8013e96:	d102      	bne.n	8013e9e <_close_r+0x1a>
 8013e98:	682b      	ldr	r3, [r5, #0]
 8013e9a:	b103      	cbz	r3, 8013e9e <_close_r+0x1a>
 8013e9c:	6023      	str	r3, [r4, #0]
 8013e9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ea0:	20013474 	.word	0x20013474

08013ea4 <_fstat_r>:
 8013ea4:	b538      	push	{r3, r4, r5, lr}
 8013ea6:	4d07      	ldr	r5, [pc, #28]	; (8013ec4 <_fstat_r+0x20>)
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	4604      	mov	r4, r0
 8013eac:	4608      	mov	r0, r1
 8013eae:	4611      	mov	r1, r2
 8013eb0:	602b      	str	r3, [r5, #0]
 8013eb2:	f7ef fff0 	bl	8003e96 <_fstat>
 8013eb6:	1c43      	adds	r3, r0, #1
 8013eb8:	d102      	bne.n	8013ec0 <_fstat_r+0x1c>
 8013eba:	682b      	ldr	r3, [r5, #0]
 8013ebc:	b103      	cbz	r3, 8013ec0 <_fstat_r+0x1c>
 8013ebe:	6023      	str	r3, [r4, #0]
 8013ec0:	bd38      	pop	{r3, r4, r5, pc}
 8013ec2:	bf00      	nop
 8013ec4:	20013474 	.word	0x20013474

08013ec8 <_isatty_r>:
 8013ec8:	b538      	push	{r3, r4, r5, lr}
 8013eca:	4d06      	ldr	r5, [pc, #24]	; (8013ee4 <_isatty_r+0x1c>)
 8013ecc:	2300      	movs	r3, #0
 8013ece:	4604      	mov	r4, r0
 8013ed0:	4608      	mov	r0, r1
 8013ed2:	602b      	str	r3, [r5, #0]
 8013ed4:	f7ef ffef 	bl	8003eb6 <_isatty>
 8013ed8:	1c43      	adds	r3, r0, #1
 8013eda:	d102      	bne.n	8013ee2 <_isatty_r+0x1a>
 8013edc:	682b      	ldr	r3, [r5, #0]
 8013ede:	b103      	cbz	r3, 8013ee2 <_isatty_r+0x1a>
 8013ee0:	6023      	str	r3, [r4, #0]
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
 8013ee4:	20013474 	.word	0x20013474

08013ee8 <_lseek_r>:
 8013ee8:	b538      	push	{r3, r4, r5, lr}
 8013eea:	4d07      	ldr	r5, [pc, #28]	; (8013f08 <_lseek_r+0x20>)
 8013eec:	4604      	mov	r4, r0
 8013eee:	4608      	mov	r0, r1
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	602a      	str	r2, [r5, #0]
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	f7ef ffe8 	bl	8003ecc <_lseek>
 8013efc:	1c43      	adds	r3, r0, #1
 8013efe:	d102      	bne.n	8013f06 <_lseek_r+0x1e>
 8013f00:	682b      	ldr	r3, [r5, #0]
 8013f02:	b103      	cbz	r3, 8013f06 <_lseek_r+0x1e>
 8013f04:	6023      	str	r3, [r4, #0]
 8013f06:	bd38      	pop	{r3, r4, r5, pc}
 8013f08:	20013474 	.word	0x20013474

08013f0c <__malloc_lock>:
 8013f0c:	4801      	ldr	r0, [pc, #4]	; (8013f14 <__malloc_lock+0x8>)
 8013f0e:	f7fe bf08 	b.w	8012d22 <__retarget_lock_acquire_recursive>
 8013f12:	bf00      	nop
 8013f14:	20013466 	.word	0x20013466

08013f18 <__malloc_unlock>:
 8013f18:	4801      	ldr	r0, [pc, #4]	; (8013f20 <__malloc_unlock+0x8>)
 8013f1a:	f7fe bf03 	b.w	8012d24 <__retarget_lock_release_recursive>
 8013f1e:	bf00      	nop
 8013f20:	20013466 	.word	0x20013466

08013f24 <_malloc_usable_size_r>:
 8013f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f28:	1f18      	subs	r0, r3, #4
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	bfbc      	itt	lt
 8013f2e:	580b      	ldrlt	r3, [r1, r0]
 8013f30:	18c0      	addlt	r0, r0, r3
 8013f32:	4770      	bx	lr

08013f34 <_read_r>:
 8013f34:	b538      	push	{r3, r4, r5, lr}
 8013f36:	4d07      	ldr	r5, [pc, #28]	; (8013f54 <_read_r+0x20>)
 8013f38:	4604      	mov	r4, r0
 8013f3a:	4608      	mov	r0, r1
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	2200      	movs	r2, #0
 8013f40:	602a      	str	r2, [r5, #0]
 8013f42:	461a      	mov	r2, r3
 8013f44:	f7ef ff7e 	bl	8003e44 <_read>
 8013f48:	1c43      	adds	r3, r0, #1
 8013f4a:	d102      	bne.n	8013f52 <_read_r+0x1e>
 8013f4c:	682b      	ldr	r3, [r5, #0]
 8013f4e:	b103      	cbz	r3, 8013f52 <_read_r+0x1e>
 8013f50:	6023      	str	r3, [r4, #0]
 8013f52:	bd38      	pop	{r3, r4, r5, pc}
 8013f54:	20013474 	.word	0x20013474

08013f58 <cosf>:
 8013f58:	ee10 3a10 	vmov	r3, s0
 8013f5c:	4a18      	ldr	r2, [pc, #96]	; (8013fc0 <cosf+0x68>)
 8013f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f62:	4293      	cmp	r3, r2
 8013f64:	dd1b      	ble.n	8013f9e <cosf+0x46>
 8013f66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f6a:	db02      	blt.n	8013f72 <cosf+0x1a>
 8013f6c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013f70:	4770      	bx	lr
 8013f72:	b500      	push	{lr}
 8013f74:	b083      	sub	sp, #12
 8013f76:	4668      	mov	r0, sp
 8013f78:	f000 fa86 	bl	8014488 <__ieee754_rem_pio2f>
 8013f7c:	f000 0003 	and.w	r0, r0, #3
 8013f80:	2801      	cmp	r0, #1
 8013f82:	eddd 0a01 	vldr	s1, [sp, #4]
 8013f86:	ed9d 0a00 	vldr	s0, [sp]
 8013f8a:	d00c      	beq.n	8013fa6 <cosf+0x4e>
 8013f8c:	2802      	cmp	r0, #2
 8013f8e:	d012      	beq.n	8013fb6 <cosf+0x5e>
 8013f90:	b170      	cbz	r0, 8013fb0 <cosf+0x58>
 8013f92:	2001      	movs	r0, #1
 8013f94:	f000 ff6a 	bl	8014e6c <__kernel_sinf>
 8013f98:	b003      	add	sp, #12
 8013f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f9e:	eddf 0a09 	vldr	s1, [pc, #36]	; 8013fc4 <cosf+0x6c>
 8013fa2:	f000 bba7 	b.w	80146f4 <__kernel_cosf>
 8013fa6:	f000 ff61 	bl	8014e6c <__kernel_sinf>
 8013faa:	eeb1 0a40 	vneg.f32	s0, s0
 8013fae:	e7f3      	b.n	8013f98 <cosf+0x40>
 8013fb0:	f000 fba0 	bl	80146f4 <__kernel_cosf>
 8013fb4:	e7f0      	b.n	8013f98 <cosf+0x40>
 8013fb6:	f000 fb9d 	bl	80146f4 <__kernel_cosf>
 8013fba:	eeb1 0a40 	vneg.f32	s0, s0
 8013fbe:	e7eb      	b.n	8013f98 <cosf+0x40>
 8013fc0:	3f490fd8 	.word	0x3f490fd8
 8013fc4:	00000000 	.word	0x00000000

08013fc8 <sinf>:
 8013fc8:	ee10 3a10 	vmov	r3, s0
 8013fcc:	4a19      	ldr	r2, [pc, #100]	; (8014034 <sinf+0x6c>)
 8013fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013fd2:	4293      	cmp	r3, r2
 8013fd4:	dd1c      	ble.n	8014010 <sinf+0x48>
 8013fd6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013fda:	db02      	blt.n	8013fe2 <sinf+0x1a>
 8013fdc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013fe0:	4770      	bx	lr
 8013fe2:	b500      	push	{lr}
 8013fe4:	b083      	sub	sp, #12
 8013fe6:	4668      	mov	r0, sp
 8013fe8:	f000 fa4e 	bl	8014488 <__ieee754_rem_pio2f>
 8013fec:	f000 0003 	and.w	r0, r0, #3
 8013ff0:	2801      	cmp	r0, #1
 8013ff2:	eddd 0a01 	vldr	s1, [sp, #4]
 8013ff6:	ed9d 0a00 	vldr	s0, [sp]
 8013ffa:	d00e      	beq.n	801401a <sinf+0x52>
 8013ffc:	2802      	cmp	r0, #2
 8013ffe:	d013      	beq.n	8014028 <sinf+0x60>
 8014000:	b170      	cbz	r0, 8014020 <sinf+0x58>
 8014002:	f000 fb77 	bl	80146f4 <__kernel_cosf>
 8014006:	eeb1 0a40 	vneg.f32	s0, s0
 801400a:	b003      	add	sp, #12
 801400c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014010:	eddf 0a09 	vldr	s1, [pc, #36]	; 8014038 <sinf+0x70>
 8014014:	2000      	movs	r0, #0
 8014016:	f000 bf29 	b.w	8014e6c <__kernel_sinf>
 801401a:	f000 fb6b 	bl	80146f4 <__kernel_cosf>
 801401e:	e7f4      	b.n	801400a <sinf+0x42>
 8014020:	2001      	movs	r0, #1
 8014022:	f000 ff23 	bl	8014e6c <__kernel_sinf>
 8014026:	e7f0      	b.n	801400a <sinf+0x42>
 8014028:	2001      	movs	r0, #1
 801402a:	f000 ff1f 	bl	8014e6c <__kernel_sinf>
 801402e:	eeb1 0a40 	vneg.f32	s0, s0
 8014032:	e7ea      	b.n	801400a <sinf+0x42>
 8014034:	3f490fd8 	.word	0x3f490fd8
 8014038:	00000000 	.word	0x00000000

0801403c <tanf>:
 801403c:	ee10 3a10 	vmov	r3, s0
 8014040:	4a11      	ldr	r2, [pc, #68]	; (8014088 <tanf+0x4c>)
 8014042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014046:	4293      	cmp	r3, r2
 8014048:	dd18      	ble.n	801407c <tanf+0x40>
 801404a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801404e:	db02      	blt.n	8014056 <tanf+0x1a>
 8014050:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014054:	4770      	bx	lr
 8014056:	b500      	push	{lr}
 8014058:	b083      	sub	sp, #12
 801405a:	4668      	mov	r0, sp
 801405c:	f000 fa14 	bl	8014488 <__ieee754_rem_pio2f>
 8014060:	0040      	lsls	r0, r0, #1
 8014062:	f000 0002 	and.w	r0, r0, #2
 8014066:	eddd 0a01 	vldr	s1, [sp, #4]
 801406a:	ed9d 0a00 	vldr	s0, [sp]
 801406e:	f1c0 0001 	rsb	r0, r0, #1
 8014072:	f000 ff43 	bl	8014efc <__kernel_tanf>
 8014076:	b003      	add	sp, #12
 8014078:	f85d fb04 	ldr.w	pc, [sp], #4
 801407c:	eddf 0a03 	vldr	s1, [pc, #12]	; 801408c <tanf+0x50>
 8014080:	2001      	movs	r0, #1
 8014082:	f000 bf3b 	b.w	8014efc <__kernel_tanf>
 8014086:	bf00      	nop
 8014088:	3f490fda 	.word	0x3f490fda
 801408c:	00000000 	.word	0x00000000

08014090 <atan2f>:
 8014090:	f000 b852 	b.w	8014138 <__ieee754_atan2f>

08014094 <logf>:
 8014094:	b508      	push	{r3, lr}
 8014096:	ed2d 8b02 	vpush	{d8}
 801409a:	eeb0 8a40 	vmov.f32	s16, s0
 801409e:	f000 f8f3 	bl	8014288 <__ieee754_logf>
 80140a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80140a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140aa:	d60f      	bvs.n	80140cc <logf+0x38>
 80140ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80140b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b4:	dc0a      	bgt.n	80140cc <logf+0x38>
 80140b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80140ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140be:	d108      	bne.n	80140d2 <logf+0x3e>
 80140c0:	f7fb fa54 	bl	800f56c <__errno>
 80140c4:	2322      	movs	r3, #34	; 0x22
 80140c6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80140ec <logf+0x58>
 80140ca:	6003      	str	r3, [r0, #0]
 80140cc:	ecbd 8b02 	vpop	{d8}
 80140d0:	bd08      	pop	{r3, pc}
 80140d2:	f7fb fa4b 	bl	800f56c <__errno>
 80140d6:	ecbd 8b02 	vpop	{d8}
 80140da:	4603      	mov	r3, r0
 80140dc:	2221      	movs	r2, #33	; 0x21
 80140de:	601a      	str	r2, [r3, #0]
 80140e0:	4803      	ldr	r0, [pc, #12]	; (80140f0 <logf+0x5c>)
 80140e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80140e6:	f7fc badd 	b.w	80106a4 <nanf>
 80140ea:	bf00      	nop
 80140ec:	ff800000 	.word	0xff800000
 80140f0:	0802afac 	.word	0x0802afac

080140f4 <sqrtf>:
 80140f4:	b508      	push	{r3, lr}
 80140f6:	ed2d 8b02 	vpush	{d8}
 80140fa:	eeb0 8a40 	vmov.f32	s16, s0
 80140fe:	f000 faf5 	bl	80146ec <__ieee754_sqrtf>
 8014102:	eeb4 8a48 	vcmp.f32	s16, s16
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	d606      	bvs.n	801411a <sqrtf+0x26>
 801410c:	eddf 8a09 	vldr	s17, [pc, #36]	; 8014134 <sqrtf+0x40>
 8014110:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014118:	d402      	bmi.n	8014120 <sqrtf+0x2c>
 801411a:	ecbd 8b02 	vpop	{d8}
 801411e:	bd08      	pop	{r3, pc}
 8014120:	f7fb fa24 	bl	800f56c <__errno>
 8014124:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014128:	ecbd 8b02 	vpop	{d8}
 801412c:	2321      	movs	r3, #33	; 0x21
 801412e:	6003      	str	r3, [r0, #0]
 8014130:	bd08      	pop	{r3, pc}
 8014132:	bf00      	nop
 8014134:	00000000 	.word	0x00000000

08014138 <__ieee754_atan2f>:
 8014138:	b510      	push	{r4, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	edcd 0a01 	vstr	s1, [sp, #4]
 8014140:	9b01      	ldr	r3, [sp, #4]
 8014142:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014146:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801414a:	eef0 7a40 	vmov.f32	s15, s0
 801414e:	dc30      	bgt.n	80141b2 <__ieee754_atan2f+0x7a>
 8014150:	ee10 0a10 	vmov	r0, s0
 8014154:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8014158:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801415c:	dc29      	bgt.n	80141b2 <__ieee754_atan2f+0x7a>
 801415e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014162:	d042      	beq.n	80141ea <__ieee754_atan2f+0xb2>
 8014164:	179c      	asrs	r4, r3, #30
 8014166:	f004 0402 	and.w	r4, r4, #2
 801416a:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801416e:	b331      	cbz	r1, 80141be <__ieee754_atan2f+0x86>
 8014170:	b37a      	cbz	r2, 80141d2 <__ieee754_atan2f+0x9a>
 8014172:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014176:	d040      	beq.n	80141fa <__ieee754_atan2f+0xc2>
 8014178:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801417c:	d029      	beq.n	80141d2 <__ieee754_atan2f+0x9a>
 801417e:	1a8a      	subs	r2, r1, r2
 8014180:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8014184:	ea4f 51e2 	mov.w	r1, r2, asr #23
 8014188:	da34      	bge.n	80141f4 <__ieee754_atan2f+0xbc>
 801418a:	2b00      	cmp	r3, #0
 801418c:	da42      	bge.n	8014214 <__ieee754_atan2f+0xdc>
 801418e:	313c      	adds	r1, #60	; 0x3c
 8014190:	da40      	bge.n	8014214 <__ieee754_atan2f+0xdc>
 8014192:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8014264 <__ieee754_atan2f+0x12c>
 8014196:	2c01      	cmp	r4, #1
 8014198:	d04e      	beq.n	8014238 <__ieee754_atan2f+0x100>
 801419a:	2c02      	cmp	r4, #2
 801419c:	d043      	beq.n	8014226 <__ieee754_atan2f+0xee>
 801419e:	b164      	cbz	r4, 80141ba <__ieee754_atan2f+0x82>
 80141a0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014268 <__ieee754_atan2f+0x130>
 80141a4:	eddf 7a31 	vldr	s15, [pc, #196]	; 801426c <__ieee754_atan2f+0x134>
 80141a8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80141ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80141b0:	e003      	b.n	80141ba <__ieee754_atan2f+0x82>
 80141b2:	ed9d 7a01 	vldr	s14, [sp, #4]
 80141b6:	ee37 0a27 	vadd.f32	s0, s14, s15
 80141ba:	b002      	add	sp, #8
 80141bc:	bd10      	pop	{r4, pc}
 80141be:	2c02      	cmp	r4, #2
 80141c0:	d010      	beq.n	80141e4 <__ieee754_atan2f+0xac>
 80141c2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8014270 <__ieee754_atan2f+0x138>
 80141c6:	2c03      	cmp	r4, #3
 80141c8:	bf18      	it	ne
 80141ca:	eeb0 0a67 	vmovne.f32	s0, s15
 80141ce:	b002      	add	sp, #8
 80141d0:	bd10      	pop	{r4, pc}
 80141d2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8014274 <__ieee754_atan2f+0x13c>
 80141d6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014278 <__ieee754_atan2f+0x140>
 80141da:	2800      	cmp	r0, #0
 80141dc:	bfb8      	it	lt
 80141de:	eeb0 0a67 	vmovlt.f32	s0, s15
 80141e2:	e7ea      	b.n	80141ba <__ieee754_atan2f+0x82>
 80141e4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 801426c <__ieee754_atan2f+0x134>
 80141e8:	e7e7      	b.n	80141ba <__ieee754_atan2f+0x82>
 80141ea:	b002      	add	sp, #8
 80141ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141f0:	f000 bf64 	b.w	80150bc <atanf>
 80141f4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8014274 <__ieee754_atan2f+0x13c>
 80141f8:	e7cd      	b.n	8014196 <__ieee754_atan2f+0x5e>
 80141fa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80141fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8014202:	d020      	beq.n	8014246 <__ieee754_atan2f+0x10e>
 8014204:	2c02      	cmp	r4, #2
 8014206:	d826      	bhi.n	8014256 <__ieee754_atan2f+0x11e>
 8014208:	4b1c      	ldr	r3, [pc, #112]	; (801427c <__ieee754_atan2f+0x144>)
 801420a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801420e:	ed94 0a00 	vldr	s0, [r4]
 8014212:	e7d2      	b.n	80141ba <__ieee754_atan2f+0x82>
 8014214:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014218:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801421c:	f001 f828 	bl	8015270 <fabsf>
 8014220:	f000 ff4c 	bl	80150bc <atanf>
 8014224:	e7b7      	b.n	8014196 <__ieee754_atan2f+0x5e>
 8014226:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014268 <__ieee754_atan2f+0x130>
 801422a:	eddf 7a10 	vldr	s15, [pc, #64]	; 801426c <__ieee754_atan2f+0x134>
 801422e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014232:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014236:	e7c0      	b.n	80141ba <__ieee754_atan2f+0x82>
 8014238:	ee10 3a10 	vmov	r3, s0
 801423c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014240:	ee00 3a10 	vmov	s0, r3
 8014244:	e7b9      	b.n	80141ba <__ieee754_atan2f+0x82>
 8014246:	2c02      	cmp	r4, #2
 8014248:	d808      	bhi.n	801425c <__ieee754_atan2f+0x124>
 801424a:	4b0d      	ldr	r3, [pc, #52]	; (8014280 <__ieee754_atan2f+0x148>)
 801424c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014250:	ed94 0a00 	vldr	s0, [r4]
 8014254:	e7b1      	b.n	80141ba <__ieee754_atan2f+0x82>
 8014256:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014264 <__ieee754_atan2f+0x12c>
 801425a:	e7ae      	b.n	80141ba <__ieee754_atan2f+0x82>
 801425c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014284 <__ieee754_atan2f+0x14c>
 8014260:	e7ab      	b.n	80141ba <__ieee754_atan2f+0x82>
 8014262:	bf00      	nop
 8014264:	00000000 	.word	0x00000000
 8014268:	33bbbd2e 	.word	0x33bbbd2e
 801426c:	40490fdb 	.word	0x40490fdb
 8014270:	c0490fdb 	.word	0xc0490fdb
 8014274:	3fc90fdb 	.word	0x3fc90fdb
 8014278:	bfc90fdb 	.word	0xbfc90fdb
 801427c:	0802afbc 	.word	0x0802afbc
 8014280:	0802afb0 	.word	0x0802afb0
 8014284:	3f490fdb 	.word	0x3f490fdb

08014288 <__ieee754_logf>:
 8014288:	ee10 3a10 	vmov	r3, s0
 801428c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014290:	d02e      	beq.n	80142f0 <__ieee754_logf+0x68>
 8014292:	2b00      	cmp	r3, #0
 8014294:	db33      	blt.n	80142fe <__ieee754_logf+0x76>
 8014296:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801429a:	da40      	bge.n	801431e <__ieee754_logf+0x96>
 801429c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80142a0:	db34      	blt.n	801430c <__ieee754_logf+0x84>
 80142a2:	f04f 0c00 	mov.w	ip, #0
 80142a6:	4868      	ldr	r0, [pc, #416]	; (8014448 <__ieee754_logf+0x1c0>)
 80142a8:	f3c3 0116 	ubfx	r1, r3, #0, #23
 80142ac:	4408      	add	r0, r1
 80142ae:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 80142b2:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 80142b6:	430a      	orrs	r2, r1
 80142b8:	15db      	asrs	r3, r3, #23
 80142ba:	ee00 2a10 	vmov	s0, r2
 80142be:	3b7f      	subs	r3, #127	; 0x7f
 80142c0:	4a62      	ldr	r2, [pc, #392]	; (801444c <__ieee754_logf+0x1c4>)
 80142c2:	4463      	add	r3, ip
 80142c4:	f101 0c0f 	add.w	ip, r1, #15
 80142c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142cc:	ea0c 0202 	and.w	r2, ip, r2
 80142d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80142d4:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80142d8:	bb22      	cbnz	r2, 8014324 <__ieee754_logf+0x9c>
 80142da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80142de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e2:	d160      	bne.n	80143a6 <__ieee754_logf+0x11e>
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f040 8092 	bne.w	801440e <__ieee754_logf+0x186>
 80142ea:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8014450 <__ieee754_logf+0x1c8>
 80142ee:	4770      	bx	lr
 80142f0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8014454 <__ieee754_logf+0x1cc>
 80142f4:	eddf 7a56 	vldr	s15, [pc, #344]	; 8014450 <__ieee754_logf+0x1c8>
 80142f8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80142fc:	4770      	bx	lr
 80142fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014302:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8014450 <__ieee754_logf+0x1c8>
 8014306:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801430a:	4770      	bx	lr
 801430c:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014458 <__ieee754_logf+0x1d0>
 8014310:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014314:	f06f 0c18 	mvn.w	ip, #24
 8014318:	ee17 3a90 	vmov	r3, s15
 801431c:	e7c3      	b.n	80142a6 <__ieee754_logf+0x1e>
 801431e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014322:	4770      	bx	lr
 8014324:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014328:	ee70 7a27 	vadd.f32	s15, s0, s15
 801432c:	ee07 3a10 	vmov	s14, r3
 8014330:	ee80 4a27 	vdiv.f32	s8, s0, s15
 8014334:	4849      	ldr	r0, [pc, #292]	; (801445c <__ieee754_logf+0x1d4>)
 8014336:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
 801433a:	4408      	add	r0, r1
 801433c:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8014340:	4302      	orrs	r2, r0
 8014342:	2a00      	cmp	r2, #0
 8014344:	ed9f 3a46 	vldr	s6, [pc, #280]	; 8014460 <__ieee754_logf+0x1d8>
 8014348:	eddf 4a46 	vldr	s9, [pc, #280]	; 8014464 <__ieee754_logf+0x1dc>
 801434c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8014468 <__ieee754_logf+0x1e0>
 8014350:	eddf 3a46 	vldr	s7, [pc, #280]	; 801446c <__ieee754_logf+0x1e4>
 8014354:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8014470 <__ieee754_logf+0x1e8>
 8014358:	eddf 7a46 	vldr	s15, [pc, #280]	; 8014474 <__ieee754_logf+0x1ec>
 801435c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8014478 <__ieee754_logf+0x1f0>
 8014360:	ee24 6a04 	vmul.f32	s12, s8, s8
 8014364:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 8014368:	ee26 7a06 	vmul.f32	s14, s12, s12
 801436c:	eee7 4a03 	vfma.f32	s9, s14, s6
 8014370:	eea7 5a23 	vfma.f32	s10, s14, s7
 8014374:	eee4 5a87 	vfma.f32	s11, s9, s14
 8014378:	eee5 6a07 	vfma.f32	s13, s10, s14
 801437c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8014380:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014384:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014388:	dd2a      	ble.n	80143e0 <__ieee754_logf+0x158>
 801438a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801438e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014392:	ee27 7a00 	vmul.f32	s14, s14, s0
 8014396:	bb4b      	cbnz	r3, 80143ec <__ieee754_logf+0x164>
 8014398:	ee77 7a87 	vadd.f32	s15, s15, s14
 801439c:	eea7 7ac4 	vfms.f32	s14, s15, s8
 80143a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80143a4:	4770      	bx	lr
 80143a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80143aa:	eddf 6a34 	vldr	s13, [pc, #208]	; 801447c <__ieee754_logf+0x1f4>
 80143ae:	eef0 7a47 	vmov.f32	s15, s14
 80143b2:	eee0 7a66 	vfms.f32	s15, s0, s13
 80143b6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80143ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d0ee      	beq.n	80143a0 <__ieee754_logf+0x118>
 80143c2:	ee07 3a90 	vmov	s15, r3
 80143c6:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8014480 <__ieee754_logf+0x1f8>
 80143ca:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014484 <__ieee754_logf+0x1fc>
 80143ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d2:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80143d6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80143da:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 80143de:	4770      	bx	lr
 80143e0:	bb13      	cbnz	r3, 8014428 <__ieee754_logf+0x1a0>
 80143e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80143e6:	eea7 0ac4 	vfms.f32	s0, s15, s8
 80143ea:	4770      	bx	lr
 80143ec:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014480 <__ieee754_logf+0x1f8>
 80143f0:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8014484 <__ieee754_logf+0x1fc>
 80143f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143f8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80143fc:	eee7 6a84 	vfma.f32	s13, s15, s8
 8014400:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014404:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014408:	ee92 0a86 	vfnms.f32	s0, s5, s12
 801440c:	4770      	bx	lr
 801440e:	ee07 3a90 	vmov	s15, r3
 8014412:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8014480 <__ieee754_logf+0x1f8>
 8014416:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8014484 <__ieee754_logf+0x1fc>
 801441a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801441e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014422:	eea7 0a87 	vfma.f32	s0, s15, s14
 8014426:	4770      	bx	lr
 8014428:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014480 <__ieee754_logf+0x1f8>
 801442c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014484 <__ieee754_logf+0x1fc>
 8014430:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014434:	ee27 7a62 	vnmul.f32	s14, s14, s5
 8014438:	eea7 7a84 	vfma.f32	s14, s15, s8
 801443c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014440:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8014444:	4770      	bx	lr
 8014446:	bf00      	nop
 8014448:	004afb20 	.word	0x004afb20
 801444c:	007ffff0 	.word	0x007ffff0
 8014450:	00000000 	.word	0x00000000
 8014454:	cc000000 	.word	0xcc000000
 8014458:	4c000000 	.word	0x4c000000
 801445c:	ffcf5c30 	.word	0xffcf5c30
 8014460:	3e178897 	.word	0x3e178897
 8014464:	3e3a3325 	.word	0x3e3a3325
 8014468:	3e924925 	.word	0x3e924925
 801446c:	3e1cd04f 	.word	0x3e1cd04f
 8014470:	3e638e29 	.word	0x3e638e29
 8014474:	3f2aaaab 	.word	0x3f2aaaab
 8014478:	3ecccccd 	.word	0x3ecccccd
 801447c:	3eaaaaab 	.word	0x3eaaaaab
 8014480:	3717f7d1 	.word	0x3717f7d1
 8014484:	3f317180 	.word	0x3f317180

08014488 <__ieee754_rem_pio2f>:
 8014488:	b570      	push	{r4, r5, r6, lr}
 801448a:	ee10 3a10 	vmov	r3, s0
 801448e:	4a89      	ldr	r2, [pc, #548]	; (80146b4 <__ieee754_rem_pio2f+0x22c>)
 8014490:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014494:	4294      	cmp	r4, r2
 8014496:	b086      	sub	sp, #24
 8014498:	4605      	mov	r5, r0
 801449a:	dd70      	ble.n	801457e <__ieee754_rem_pio2f+0xf6>
 801449c:	4a86      	ldr	r2, [pc, #536]	; (80146b8 <__ieee754_rem_pio2f+0x230>)
 801449e:	4294      	cmp	r4, r2
 80144a0:	ee10 6a10 	vmov	r6, s0
 80144a4:	dc22      	bgt.n	80144ec <__ieee754_rem_pio2f+0x64>
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	eddf 7a84 	vldr	s15, [pc, #528]	; 80146bc <__ieee754_rem_pio2f+0x234>
 80144ac:	4a84      	ldr	r2, [pc, #528]	; (80146c0 <__ieee754_rem_pio2f+0x238>)
 80144ae:	f024 040f 	bic.w	r4, r4, #15
 80144b2:	eeb0 7a40 	vmov.f32	s14, s0
 80144b6:	f340 80e4 	ble.w	8014682 <__ieee754_rem_pio2f+0x1fa>
 80144ba:	4294      	cmp	r4, r2
 80144bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80144c0:	bf09      	itett	eq
 80144c2:	eddf 6a80 	vldreq	s13, [pc, #512]	; 80146c4 <__ieee754_rem_pio2f+0x23c>
 80144c6:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 80146c8 <__ieee754_rem_pio2f+0x240>
 80144ca:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 80146cc <__ieee754_rem_pio2f+0x244>
 80144ce:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
 80144d2:	2001      	movs	r0, #1
 80144d4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80144d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80144dc:	edc5 6a00 	vstr	s13, [r5]
 80144e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144e4:	edc5 7a01 	vstr	s15, [r5, #4]
 80144e8:	b006      	add	sp, #24
 80144ea:	bd70      	pop	{r4, r5, r6, pc}
 80144ec:	4a78      	ldr	r2, [pc, #480]	; (80146d0 <__ieee754_rem_pio2f+0x248>)
 80144ee:	4294      	cmp	r4, r2
 80144f0:	dd54      	ble.n	801459c <__ieee754_rem_pio2f+0x114>
 80144f2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80144f6:	da49      	bge.n	801458c <__ieee754_rem_pio2f+0x104>
 80144f8:	15e2      	asrs	r2, r4, #23
 80144fa:	3a86      	subs	r2, #134	; 0x86
 80144fc:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8014500:	ee07 3a90 	vmov	s15, r3
 8014504:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014508:	eddf 6a72 	vldr	s13, [pc, #456]	; 80146d4 <__ieee754_rem_pio2f+0x24c>
 801450c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014514:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801451c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014528:	ed8d 7a04 	vstr	s14, [sp, #16]
 801452c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014538:	edcd 7a05 	vstr	s15, [sp, #20]
 801453c:	f040 8090 	bne.w	8014660 <__ieee754_rem_pio2f+0x1d8>
 8014540:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014548:	bf14      	ite	ne
 801454a:	2302      	movne	r3, #2
 801454c:	2301      	moveq	r3, #1
 801454e:	4962      	ldr	r1, [pc, #392]	; (80146d8 <__ieee754_rem_pio2f+0x250>)
 8014550:	9101      	str	r1, [sp, #4]
 8014552:	2102      	movs	r1, #2
 8014554:	9100      	str	r1, [sp, #0]
 8014556:	a803      	add	r0, sp, #12
 8014558:	4629      	mov	r1, r5
 801455a:	f000 f94d 	bl	80147f8 <__kernel_rem_pio2f>
 801455e:	2e00      	cmp	r6, #0
 8014560:	dac2      	bge.n	80144e8 <__ieee754_rem_pio2f+0x60>
 8014562:	ed95 7a00 	vldr	s14, [r5]
 8014566:	edd5 7a01 	vldr	s15, [r5, #4]
 801456a:	eeb1 7a47 	vneg.f32	s14, s14
 801456e:	eef1 7a67 	vneg.f32	s15, s15
 8014572:	ed85 7a00 	vstr	s14, [r5]
 8014576:	edc5 7a01 	vstr	s15, [r5, #4]
 801457a:	4240      	negs	r0, r0
 801457c:	e7b4      	b.n	80144e8 <__ieee754_rem_pio2f+0x60>
 801457e:	2200      	movs	r2, #0
 8014580:	ed85 0a00 	vstr	s0, [r5]
 8014584:	6042      	str	r2, [r0, #4]
 8014586:	2000      	movs	r0, #0
 8014588:	b006      	add	sp, #24
 801458a:	bd70      	pop	{r4, r5, r6, pc}
 801458c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014590:	2000      	movs	r0, #0
 8014592:	edc5 7a01 	vstr	s15, [r5, #4]
 8014596:	edc5 7a00 	vstr	s15, [r5]
 801459a:	e7a5      	b.n	80144e8 <__ieee754_rem_pio2f+0x60>
 801459c:	f000 fe68 	bl	8015270 <fabsf>
 80145a0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80146dc <__ieee754_rem_pio2f+0x254>
 80145a4:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80146bc <__ieee754_rem_pio2f+0x234>
 80145a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80145ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80145b0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80146c8 <__ieee754_rem_pio2f+0x240>
 80145b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145b8:	ee17 0a90 	vmov	r0, s15
 80145bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80145c0:	281f      	cmp	r0, #31
 80145c2:	eea6 0ac6 	vfms.f32	s0, s13, s12
 80145c6:	ee66 7a87 	vmul.f32	s15, s13, s14
 80145ca:	eeb1 6a66 	vneg.f32	s12, s13
 80145ce:	dc1e      	bgt.n	801460e <__ieee754_rem_pio2f+0x186>
 80145d0:	4a43      	ldr	r2, [pc, #268]	; (80146e0 <__ieee754_rem_pio2f+0x258>)
 80145d2:	1e41      	subs	r1, r0, #1
 80145d4:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 80145d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80145dc:	4293      	cmp	r3, r2
 80145de:	d016      	beq.n	801460e <__ieee754_rem_pio2f+0x186>
 80145e0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80145e4:	ed85 7a00 	vstr	s14, [r5]
 80145e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80145ec:	2e00      	cmp	r6, #0
 80145ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80145f2:	ed85 0a01 	vstr	s0, [r5, #4]
 80145f6:	f6bf af77 	bge.w	80144e8 <__ieee754_rem_pio2f+0x60>
 80145fa:	eeb1 7a47 	vneg.f32	s14, s14
 80145fe:	eeb1 0a40 	vneg.f32	s0, s0
 8014602:	ed85 7a00 	vstr	s14, [r5]
 8014606:	ed85 0a01 	vstr	s0, [r5, #4]
 801460a:	4240      	negs	r0, r0
 801460c:	e76c      	b.n	80144e8 <__ieee754_rem_pio2f+0x60>
 801460e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014612:	15e2      	asrs	r2, r4, #23
 8014614:	ee17 3a10 	vmov	r3, s14
 8014618:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801461c:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
 8014620:	2c08      	cmp	r4, #8
 8014622:	dddf      	ble.n	80145e4 <__ieee754_rem_pio2f+0x15c>
 8014624:	eddf 7a27 	vldr	s15, [pc, #156]	; 80146c4 <__ieee754_rem_pio2f+0x23c>
 8014628:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80146cc <__ieee754_rem_pio2f+0x244>
 801462c:	eef0 5a40 	vmov.f32	s11, s0
 8014630:	eee6 5a27 	vfma.f32	s11, s12, s15
 8014634:	ee30 0a65 	vsub.f32	s0, s0, s11
 8014638:	eea6 0a27 	vfma.f32	s0, s12, s15
 801463c:	eef0 7a40 	vmov.f32	s15, s0
 8014640:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8014644:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8014648:	ee17 3a10 	vmov	r3, s14
 801464c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014650:	1ad2      	subs	r2, r2, r3
 8014652:	2a19      	cmp	r2, #25
 8014654:	dc06      	bgt.n	8014664 <__ieee754_rem_pio2f+0x1dc>
 8014656:	eeb0 0a65 	vmov.f32	s0, s11
 801465a:	ed85 7a00 	vstr	s14, [r5]
 801465e:	e7c3      	b.n	80145e8 <__ieee754_rem_pio2f+0x160>
 8014660:	2303      	movs	r3, #3
 8014662:	e774      	b.n	801454e <__ieee754_rem_pio2f+0xc6>
 8014664:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80146e4 <__ieee754_rem_pio2f+0x25c>
 8014668:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80146e8 <__ieee754_rem_pio2f+0x260>
 801466c:	eeb0 0a65 	vmov.f32	s0, s11
 8014670:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014674:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8014678:	eee6 7a07 	vfma.f32	s15, s12, s14
 801467c:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8014680:	e7ae      	b.n	80145e0 <__ieee754_rem_pio2f+0x158>
 8014682:	4294      	cmp	r4, r2
 8014684:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014688:	bf09      	itett	eq
 801468a:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 80146c4 <__ieee754_rem_pio2f+0x23c>
 801468e:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 80146c8 <__ieee754_rem_pio2f+0x240>
 8014692:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 80146cc <__ieee754_rem_pio2f+0x244>
 8014696:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 801469a:	f04f 30ff 	mov.w	r0, #4294967295
 801469e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80146a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80146a6:	edc5 6a00 	vstr	s13, [r5]
 80146aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146ae:	edc5 7a01 	vstr	s15, [r5, #4]
 80146b2:	e719      	b.n	80144e8 <__ieee754_rem_pio2f+0x60>
 80146b4:	3f490fd8 	.word	0x3f490fd8
 80146b8:	4016cbe3 	.word	0x4016cbe3
 80146bc:	3fc90f80 	.word	0x3fc90f80
 80146c0:	3fc90fd0 	.word	0x3fc90fd0
 80146c4:	37354400 	.word	0x37354400
 80146c8:	37354443 	.word	0x37354443
 80146cc:	2e85a308 	.word	0x2e85a308
 80146d0:	43490f80 	.word	0x43490f80
 80146d4:	43800000 	.word	0x43800000
 80146d8:	0802b048 	.word	0x0802b048
 80146dc:	3f22f984 	.word	0x3f22f984
 80146e0:	0802afc8 	.word	0x0802afc8
 80146e4:	2e85a300 	.word	0x2e85a300
 80146e8:	248d3132 	.word	0x248d3132

080146ec <__ieee754_sqrtf>:
 80146ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80146f0:	4770      	bx	lr
 80146f2:	bf00      	nop

080146f4 <__kernel_cosf>:
 80146f4:	ee10 3a10 	vmov	r3, s0
 80146f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80146fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014700:	da2c      	bge.n	801475c <__kernel_cosf+0x68>
 8014702:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014706:	ee17 3a90 	vmov	r3, s15
 801470a:	2b00      	cmp	r3, #0
 801470c:	d060      	beq.n	80147d0 <__kernel_cosf+0xdc>
 801470e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014712:	eddf 7a31 	vldr	s15, [pc, #196]	; 80147d8 <__kernel_cosf+0xe4>
 8014716:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80147dc <__kernel_cosf+0xe8>
 801471a:	eddf 5a31 	vldr	s11, [pc, #196]	; 80147e0 <__kernel_cosf+0xec>
 801471e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80147e4 <__kernel_cosf+0xf0>
 8014722:	eddf 6a31 	vldr	s13, [pc, #196]	; 80147e8 <__kernel_cosf+0xf4>
 8014726:	eea7 5a27 	vfma.f32	s10, s14, s15
 801472a:	eddf 7a30 	vldr	s15, [pc, #192]	; 80147ec <__kernel_cosf+0xf8>
 801472e:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014732:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014736:	eee7 7a06 	vfma.f32	s15, s14, s12
 801473a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801473e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014742:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8014746:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801474a:	eee7 0a26 	vfma.f32	s1, s14, s13
 801474e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014752:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014756:	ee30 0a60 	vsub.f32	s0, s0, s1
 801475a:	4770      	bx	lr
 801475c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014760:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80147d8 <__kernel_cosf+0xe4>
 8014764:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80147dc <__kernel_cosf+0xe8>
 8014768:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80147e0 <__kernel_cosf+0xec>
 801476c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80147e4 <__kernel_cosf+0xf0>
 8014770:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80147e8 <__kernel_cosf+0xf4>
 8014774:	4a1e      	ldr	r2, [pc, #120]	; (80147f0 <__kernel_cosf+0xfc>)
 8014776:	eea7 5a27 	vfma.f32	s10, s14, s15
 801477a:	4293      	cmp	r3, r2
 801477c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80147ec <__kernel_cosf+0xf8>
 8014780:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014784:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014788:	eee6 7a07 	vfma.f32	s15, s12, s14
 801478c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014790:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014794:	ddd5      	ble.n	8014742 <__kernel_cosf+0x4e>
 8014796:	4a17      	ldr	r2, [pc, #92]	; (80147f4 <__kernel_cosf+0x100>)
 8014798:	4293      	cmp	r3, r2
 801479a:	dc14      	bgt.n	80147c6 <__kernel_cosf+0xd2>
 801479c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80147a0:	ee07 3a90 	vmov	s15, r3
 80147a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80147ac:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80147b0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80147b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80147b8:	eee7 0a26 	vfma.f32	s1, s14, s13
 80147bc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80147c0:	ee36 0a60 	vsub.f32	s0, s12, s1
 80147c4:	4770      	bx	lr
 80147c6:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80147ca:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 80147ce:	e7ed      	b.n	80147ac <__kernel_cosf+0xb8>
 80147d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	ad47d74e 	.word	0xad47d74e
 80147dc:	310f74f6 	.word	0x310f74f6
 80147e0:	b493f27c 	.word	0xb493f27c
 80147e4:	37d00d01 	.word	0x37d00d01
 80147e8:	3d2aaaab 	.word	0x3d2aaaab
 80147ec:	bab60b61 	.word	0xbab60b61
 80147f0:	3e999999 	.word	0x3e999999
 80147f4:	3f480000 	.word	0x3f480000

080147f8 <__kernel_rem_pio2f>:
 80147f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147fc:	ed2d 8b04 	vpush	{d8-d9}
 8014800:	b0db      	sub	sp, #364	; 0x16c
 8014802:	461c      	mov	r4, r3
 8014804:	9303      	str	r3, [sp, #12]
 8014806:	9106      	str	r1, [sp, #24]
 8014808:	4ba2      	ldr	r3, [pc, #648]	; (8014a94 <__kernel_rem_pio2f+0x29c>)
 801480a:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 801480c:	9208      	str	r2, [sp, #32]
 801480e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8014812:	1d11      	adds	r1, r2, #4
 8014814:	4682      	mov	sl, r0
 8014816:	f104 38ff 	add.w	r8, r4, #4294967295
 801481a:	f2c0 82a3 	blt.w	8014d64 <__kernel_rem_pio2f+0x56c>
 801481e:	1ed3      	subs	r3, r2, #3
 8014820:	bf48      	it	mi
 8014822:	1d13      	addmi	r3, r2, #4
 8014824:	10db      	asrs	r3, r3, #3
 8014826:	9302      	str	r3, [sp, #8]
 8014828:	3301      	adds	r3, #1
 801482a:	00db      	lsls	r3, r3, #3
 801482c:	9307      	str	r3, [sp, #28]
 801482e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014832:	1a9b      	subs	r3, r3, r2
 8014834:	9305      	str	r3, [sp, #20]
 8014836:	9b02      	ldr	r3, [sp, #8]
 8014838:	eb15 0108 	adds.w	r1, r5, r8
 801483c:	eba3 0308 	sub.w	r3, r3, r8
 8014840:	d416      	bmi.n	8014870 <__kernel_rem_pio2f+0x78>
 8014842:	3101      	adds	r1, #1
 8014844:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8014a98 <__kernel_rem_pio2f+0x2a0>
 8014848:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 801484a:	4419      	add	r1, r3
 801484c:	aa1e      	add	r2, sp, #120	; 0x78
 801484e:	2b00      	cmp	r3, #0
 8014850:	bfa4      	itt	ge
 8014852:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8014856:	ee07 4a90 	vmovge	s15, r4
 801485a:	f103 0301 	add.w	r3, r3, #1
 801485e:	bfac      	ite	ge
 8014860:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8014864:	eef0 7a47 	vmovlt.f32	s15, s14
 8014868:	428b      	cmp	r3, r1
 801486a:	ece2 7a01 	vstmia	r2!, {s15}
 801486e:	d1ee      	bne.n	801484e <__kernel_rem_pio2f+0x56>
 8014870:	2d00      	cmp	r5, #0
 8014872:	f2c0 82e7 	blt.w	8014e44 <__kernel_rem_pio2f+0x64c>
 8014876:	9b03      	ldr	r3, [sp, #12]
 8014878:	aa1e      	add	r2, sp, #120	; 0x78
 801487a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801487e:	ae46      	add	r6, sp, #280	; 0x118
 8014880:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014884:	4640      	mov	r0, r8
 8014886:	18ef      	adds	r7, r5, r3
 8014888:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 801488c:	f1b8 0f00 	cmp.w	r8, #0
 8014890:	eddf 7a81 	vldr	s15, [pc, #516]	; 8014a98 <__kernel_rem_pio2f+0x2a0>
 8014894:	db09      	blt.n	80148aa <__kernel_rem_pio2f+0xb2>
 8014896:	4622      	mov	r2, r4
 8014898:	4653      	mov	r3, sl
 801489a:	ecf3 6a01 	vldmia	r3!, {s13}
 801489e:	ed32 7a01 	vldmdb	r2!, {s14}
 80148a2:	428b      	cmp	r3, r1
 80148a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80148a8:	d1f7      	bne.n	801489a <__kernel_rem_pio2f+0xa2>
 80148aa:	3001      	adds	r0, #1
 80148ac:	42b8      	cmp	r0, r7
 80148ae:	ece6 7a01 	vstmia	r6!, {s15}
 80148b2:	f104 0404 	add.w	r4, r4, #4
 80148b6:	d1e9      	bne.n	801488c <__kernel_rem_pio2f+0x94>
 80148b8:	ab09      	add	r3, sp, #36	; 0x24
 80148ba:	af0a      	add	r7, sp, #40	; 0x28
 80148bc:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 80148c0:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80148c4:	3b08      	subs	r3, #8
 80148c6:	ed9f 9a76 	vldr	s18, [pc, #472]	; 8014aa0 <__kernel_rem_pio2f+0x2a8>
 80148ca:	eddf 8a74 	vldr	s17, [pc, #464]	; 8014a9c <__kernel_rem_pio2f+0x2a4>
 80148ce:	9805      	ldr	r0, [sp, #20]
 80148d0:	9304      	str	r3, [sp, #16]
 80148d2:	eb0a 040c 	add.w	r4, sl, ip
 80148d6:	ae46      	add	r6, sp, #280	; 0x118
 80148d8:	9500      	str	r5, [sp, #0]
 80148da:	ab5a      	add	r3, sp, #360	; 0x168
 80148dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80148e0:	2d00      	cmp	r5, #0
 80148e2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80148e6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 80148ea:	dd16      	ble.n	801491a <__kernel_rem_pio2f+0x122>
 80148ec:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80148f0:	463a      	mov	r2, r7
 80148f2:	ee60 7a09 	vmul.f32	s15, s0, s18
 80148f6:	eeb0 7a40 	vmov.f32	s14, s0
 80148fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148fe:	ed73 6a01 	vldmdb	r3!, {s13}
 8014902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014906:	42b3      	cmp	r3, r6
 8014908:	eea7 7ae8 	vfms.f32	s14, s15, s17
 801490c:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8014910:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014914:	eca2 7a01 	vstmia	r2!, {s14}
 8014918:	d1eb      	bne.n	80148f2 <__kernel_rem_pio2f+0xfa>
 801491a:	9001      	str	r0, [sp, #4]
 801491c:	f000 fcf6 	bl	801530c <scalbnf>
 8014920:	eeb0 8a40 	vmov.f32	s16, s0
 8014924:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014928:	ee28 0a00 	vmul.f32	s0, s16, s0
 801492c:	f000 fca8 	bl	8015280 <floorf>
 8014930:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014934:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014938:	9801      	ldr	r0, [sp, #4]
 801493a:	2800      	cmp	r0, #0
 801493c:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014940:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8014944:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014948:	dd79      	ble.n	8014a3e <__kernel_rem_pio2f+0x246>
 801494a:	f105 3eff 	add.w	lr, r5, #4294967295
 801494e:	f1c0 0308 	rsb	r3, r0, #8
 8014952:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 8014956:	fa41 fc03 	asr.w	ip, r1, r3
 801495a:	fa0c f303 	lsl.w	r3, ip, r3
 801495e:	1acb      	subs	r3, r1, r3
 8014960:	f1c0 0207 	rsb	r2, r0, #7
 8014964:	ee19 1a90 	vmov	r1, s19
 8014968:	fa43 f202 	asr.w	r2, r3, r2
 801496c:	4461      	add	r1, ip
 801496e:	2a00      	cmp	r2, #0
 8014970:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
 8014974:	ee09 1a90 	vmov	s19, r1
 8014978:	dc69      	bgt.n	8014a4e <__kernel_rem_pio2f+0x256>
 801497a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014982:	f040 80c0 	bne.w	8014b06 <__kernel_rem_pio2f+0x30e>
 8014986:	9b00      	ldr	r3, [sp, #0]
 8014988:	f105 3bff 	add.w	fp, r5, #4294967295
 801498c:	455b      	cmp	r3, fp
 801498e:	dc10      	bgt.n	80149b2 <__kernel_rem_pio2f+0x1ba>
 8014990:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8014994:	3b01      	subs	r3, #1
 8014996:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801499a:	2100      	movs	r1, #0
 801499c:	4694      	mov	ip, r2
 801499e:	f853 2904 	ldr.w	r2, [r3], #-4
 80149a2:	454b      	cmp	r3, r9
 80149a4:	ea41 0102 	orr.w	r1, r1, r2
 80149a8:	d1f9      	bne.n	801499e <__kernel_rem_pio2f+0x1a6>
 80149aa:	4662      	mov	r2, ip
 80149ac:	2900      	cmp	r1, #0
 80149ae:	f040 80f2 	bne.w	8014b96 <__kernel_rem_pio2f+0x39e>
 80149b2:	9b00      	ldr	r3, [sp, #0]
 80149b4:	3b01      	subs	r3, #1
 80149b6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f040 80e7 	bne.w	8014b8e <__kernel_rem_pio2f+0x396>
 80149c0:	9b04      	ldr	r3, [sp, #16]
 80149c2:	f04f 0c01 	mov.w	ip, #1
 80149c6:	f853 2904 	ldr.w	r2, [r3], #-4
 80149ca:	f10c 0c01 	add.w	ip, ip, #1
 80149ce:	2a00      	cmp	r2, #0
 80149d0:	d0f9      	beq.n	80149c6 <__kernel_rem_pio2f+0x1ce>
 80149d2:	1c6b      	adds	r3, r5, #1
 80149d4:	44ac      	add	ip, r5
 80149d6:	469e      	mov	lr, r3
 80149d8:	9a03      	ldr	r2, [sp, #12]
 80149da:	1951      	adds	r1, r2, r5
 80149dc:	9a02      	ldr	r2, [sp, #8]
 80149de:	eb02 0b03 	add.w	fp, r2, r3
 80149e2:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 80149e6:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80149e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80149ec:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80149f0:	ab1e      	add	r3, sp, #120	; 0x78
 80149f2:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80149f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80149fa:	eddb 7a01 	vldr	s15, [fp, #4]
 80149fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014a98 <__kernel_rem_pio2f+0x2a0>
 8014a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a06:	f1b8 0f00 	cmp.w	r8, #0
 8014a0a:	f10b 0b04 	add.w	fp, fp, #4
 8014a0e:	edc1 7a00 	vstr	s15, [r1]
 8014a12:	460a      	mov	r2, r1
 8014a14:	f101 0104 	add.w	r1, r1, #4
 8014a18:	db09      	blt.n	8014a2e <__kernel_rem_pio2f+0x236>
 8014a1a:	4653      	mov	r3, sl
 8014a1c:	e001      	b.n	8014a22 <__kernel_rem_pio2f+0x22a>
 8014a1e:	ed72 7a01 	vldmdb	r2!, {s15}
 8014a22:	ecf3 6a01 	vldmia	r3!, {s13}
 8014a26:	42a3      	cmp	r3, r4
 8014a28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a2c:	d1f7      	bne.n	8014a1e <__kernel_rem_pio2f+0x226>
 8014a2e:	f10e 0e01 	add.w	lr, lr, #1
 8014a32:	45e6      	cmp	lr, ip
 8014a34:	eca5 7a01 	vstmia	r5!, {s14}
 8014a38:	dddf      	ble.n	80149fa <__kernel_rem_pio2f+0x202>
 8014a3a:	4665      	mov	r5, ip
 8014a3c:	e74d      	b.n	80148da <__kernel_rem_pio2f+0xe2>
 8014a3e:	f040 809c 	bne.w	8014b7a <__kernel_rem_pio2f+0x382>
 8014a42:	1e6b      	subs	r3, r5, #1
 8014a44:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8014a48:	11d2      	asrs	r2, r2, #7
 8014a4a:	2a00      	cmp	r2, #0
 8014a4c:	dd95      	ble.n	801497a <__kernel_rem_pio2f+0x182>
 8014a4e:	ee19 3a90 	vmov	r3, s19
 8014a52:	2d00      	cmp	r5, #0
 8014a54:	f103 0301 	add.w	r3, r3, #1
 8014a58:	ee09 3a90 	vmov	s19, r3
 8014a5c:	f340 8198 	ble.w	8014d90 <__kernel_rem_pio2f+0x598>
 8014a60:	6839      	ldr	r1, [r7, #0]
 8014a62:	2900      	cmp	r1, #0
 8014a64:	d17f      	bne.n	8014b66 <__kernel_rem_pio2f+0x36e>
 8014a66:	2d01      	cmp	r5, #1
 8014a68:	d026      	beq.n	8014ab8 <__kernel_rem_pio2f+0x2c0>
 8014a6a:	463b      	mov	r3, r7
 8014a6c:	f04f 0c01 	mov.w	ip, #1
 8014a70:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8014a74:	2900      	cmp	r1, #0
 8014a76:	d07a      	beq.n	8014b6e <__kernel_rem_pio2f+0x376>
 8014a78:	f10c 0301 	add.w	r3, ip, #1
 8014a7c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8014a80:	429d      	cmp	r5, r3
 8014a82:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
 8014a86:	dd16      	ble.n	8014ab6 <__kernel_rem_pio2f+0x2be>
 8014a88:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8014a8c:	44bb      	add	fp, r7
 8014a8e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014a92:	e00a      	b.n	8014aaa <__kernel_rem_pio2f+0x2b2>
 8014a94:	0802b38c 	.word	0x0802b38c
 8014a98:	00000000 	.word	0x00000000
 8014a9c:	43800000 	.word	0x43800000
 8014aa0:	3b800000 	.word	0x3b800000
 8014aa4:	3fc90000 	.word	0x3fc90000
 8014aa8:	6819      	ldr	r1, [r3, #0]
 8014aaa:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8014aae:	f843 1b04 	str.w	r1, [r3], #4
 8014ab2:	455b      	cmp	r3, fp
 8014ab4:	d1f8      	bne.n	8014aa8 <__kernel_rem_pio2f+0x2b0>
 8014ab6:	2101      	movs	r1, #1
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	dd0c      	ble.n	8014ad6 <__kernel_rem_pio2f+0x2de>
 8014abc:	2801      	cmp	r0, #1
 8014abe:	f000 8148 	beq.w	8014d52 <__kernel_rem_pio2f+0x55a>
 8014ac2:	2802      	cmp	r0, #2
 8014ac4:	d107      	bne.n	8014ad6 <__kernel_rem_pio2f+0x2de>
 8014ac6:	f105 3cff 	add.w	ip, r5, #4294967295
 8014aca:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ad2:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014ad6:	2a02      	cmp	r2, #2
 8014ad8:	f47f af4f 	bne.w	801497a <__kernel_rem_pio2f+0x182>
 8014adc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014ae0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014ae4:	2900      	cmp	r1, #0
 8014ae6:	f43f af48 	beq.w	801497a <__kernel_rem_pio2f+0x182>
 8014aea:	9209      	str	r2, [sp, #36]	; 0x24
 8014aec:	9001      	str	r0, [sp, #4]
 8014aee:	f000 fc0d 	bl	801530c <scalbnf>
 8014af2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014af8:	9801      	ldr	r0, [sp, #4]
 8014afa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b02:	f43f af40 	beq.w	8014986 <__kernel_rem_pio2f+0x18e>
 8014b06:	9202      	str	r2, [sp, #8]
 8014b08:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8014b10:	1a98      	subs	r0, r3, r2
 8014b12:	9501      	str	r5, [sp, #4]
 8014b14:	9d00      	ldr	r5, [sp, #0]
 8014b16:	f000 fbf9 	bl	801530c <scalbnf>
 8014b1a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8014a9c <__kernel_rem_pio2f+0x2a4>
 8014b1e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8014b2a:	f2c0 8159 	blt.w	8014de0 <__kernel_rem_pio2f+0x5e8>
 8014b2e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8014aa0 <__kernel_rem_pio2f+0x2a8>
 8014b32:	9905      	ldr	r1, [sp, #20]
 8014b34:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014b38:	3108      	adds	r1, #8
 8014b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b3e:	9105      	str	r1, [sp, #20]
 8014b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b44:	f103 0b01 	add.w	fp, r3, #1
 8014b48:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014b54:	ee10 1a10 	vmov	r1, s0
 8014b58:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014b5c:	ee17 3a90 	vmov	r3, s15
 8014b60:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
 8014b64:	e02e      	b.n	8014bc4 <__kernel_rem_pio2f+0x3cc>
 8014b66:	2301      	movs	r3, #1
 8014b68:	f04f 0c00 	mov.w	ip, #0
 8014b6c:	e786      	b.n	8014a7c <__kernel_rem_pio2f+0x284>
 8014b6e:	f10c 0c01 	add.w	ip, ip, #1
 8014b72:	45ac      	cmp	ip, r5
 8014b74:	f47f af7c 	bne.w	8014a70 <__kernel_rem_pio2f+0x278>
 8014b78:	e79e      	b.n	8014ab8 <__kernel_rem_pio2f+0x2c0>
 8014b7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014b7e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b86:	f280 80f2 	bge.w	8014d6e <__kernel_rem_pio2f+0x576>
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	e6f5      	b.n	801497a <__kernel_rem_pio2f+0x182>
 8014b8e:	1c6b      	adds	r3, r5, #1
 8014b90:	469e      	mov	lr, r3
 8014b92:	469c      	mov	ip, r3
 8014b94:	e720      	b.n	80149d8 <__kernel_rem_pio2f+0x1e0>
 8014b96:	9905      	ldr	r1, [sp, #20]
 8014b98:	f1a1 0008 	sub.w	r0, r1, #8
 8014b9c:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 8014ba0:	9005      	str	r0, [sp, #20]
 8014ba2:	462b      	mov	r3, r5
 8014ba4:	9d00      	ldr	r5, [sp, #0]
 8014ba6:	b969      	cbnz	r1, 8014bc4 <__kernel_rem_pio2f+0x3cc>
 8014ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014bac:	3b02      	subs	r3, #2
 8014bae:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014bb2:	4601      	mov	r1, r0
 8014bb4:	f853 0904 	ldr.w	r0, [r3], #-4
 8014bb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bbc:	3908      	subs	r1, #8
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	d0f8      	beq.n	8014bb4 <__kernel_rem_pio2f+0x3bc>
 8014bc2:	9105      	str	r1, [sp, #20]
 8014bc4:	9805      	ldr	r0, [sp, #20]
 8014bc6:	9200      	str	r2, [sp, #0]
 8014bc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014bcc:	f000 fb9e 	bl	801530c <scalbnf>
 8014bd0:	f1bb 0f00 	cmp.w	fp, #0
 8014bd4:	9a00      	ldr	r2, [sp, #0]
 8014bd6:	f2c0 8128 	blt.w	8014e2a <__kernel_rem_pio2f+0x632>
 8014bda:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 8014bde:	ab46      	add	r3, sp, #280	; 0x118
 8014be0:	eb03 060e 	add.w	r6, r3, lr
 8014be4:	f10e 0c04 	add.w	ip, lr, #4
 8014be8:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 8014aa0 <__kernel_rem_pio2f+0x2a8>
 8014bec:	eb07 030c 	add.w	r3, r7, ip
 8014bf0:	1d31      	adds	r1, r6, #4
 8014bf2:	ed73 7a01 	vldmdb	r3!, {s15}
 8014bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bfa:	42bb      	cmp	r3, r7
 8014bfc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c00:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c04:	ed61 7a01 	vstmdb	r1!, {s15}
 8014c08:	d1f3      	bne.n	8014bf2 <__kernel_rem_pio2f+0x3fa>
 8014c0a:	2d00      	cmp	r5, #0
 8014c0c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 8014aa4 <__kernel_rem_pio2f+0x2ac>
 8014c10:	f04f 0400 	mov.w	r4, #0
 8014c14:	db20      	blt.n	8014c58 <__kernel_rem_pio2f+0x460>
 8014c16:	4893      	ldr	r0, [pc, #588]	; (8014e64 <__kernel_rem_pio2f+0x66c>)
 8014c18:	eddf 7a93 	vldr	s15, [pc, #588]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014c1c:	eeb0 7a46 	vmov.f32	s14, s12
 8014c20:	4631      	mov	r1, r6
 8014c22:	2300      	movs	r3, #0
 8014c24:	e003      	b.n	8014c2e <__kernel_rem_pio2f+0x436>
 8014c26:	429c      	cmp	r4, r3
 8014c28:	db08      	blt.n	8014c3c <__kernel_rem_pio2f+0x444>
 8014c2a:	ecb0 7a01 	vldmia	r0!, {s14}
 8014c2e:	ecf1 6a01 	vldmia	r1!, {s13}
 8014c32:	3301      	adds	r3, #1
 8014c34:	429d      	cmp	r5, r3
 8014c36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c3a:	daf4      	bge.n	8014c26 <__kernel_rem_pio2f+0x42e>
 8014c3c:	ab5a      	add	r3, sp, #360	; 0x168
 8014c3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014c42:	45a3      	cmp	fp, r4
 8014c44:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
 8014c48:	f1a6 0604 	sub.w	r6, r6, #4
 8014c4c:	f104 0301 	add.w	r3, r4, #1
 8014c50:	d005      	beq.n	8014c5e <__kernel_rem_pio2f+0x466>
 8014c52:	2d00      	cmp	r5, #0
 8014c54:	461c      	mov	r4, r3
 8014c56:	dade      	bge.n	8014c16 <__kernel_rem_pio2f+0x41e>
 8014c58:	eddf 7a83 	vldr	s15, [pc, #524]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014c5c:	e7ee      	b.n	8014c3c <__kernel_rem_pio2f+0x444>
 8014c5e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 8014c60:	2902      	cmp	r1, #2
 8014c62:	dc1c      	bgt.n	8014c9e <__kernel_rem_pio2f+0x4a6>
 8014c64:	2900      	cmp	r1, #0
 8014c66:	f300 8095 	bgt.w	8014d94 <__kernel_rem_pio2f+0x59c>
 8014c6a:	d10f      	bne.n	8014c8c <__kernel_rem_pio2f+0x494>
 8014c6c:	ab32      	add	r3, sp, #200	; 0xc8
 8014c6e:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014c72:	449c      	add	ip, r3
 8014c74:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014c78:	4563      	cmp	r3, ip
 8014c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c7e:	d1f9      	bne.n	8014c74 <__kernel_rem_pio2f+0x47c>
 8014c80:	b10a      	cbz	r2, 8014c86 <__kernel_rem_pio2f+0x48e>
 8014c82:	eef1 7a67 	vneg.f32	s15, s15
 8014c86:	9b06      	ldr	r3, [sp, #24]
 8014c88:	edc3 7a00 	vstr	s15, [r3]
 8014c8c:	ee19 3a90 	vmov	r3, s19
 8014c90:	f003 0007 	and.w	r0, r3, #7
 8014c94:	b05b      	add	sp, #364	; 0x16c
 8014c96:	ecbd 8b04 	vpop	{d8-d9}
 8014c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	d1f3      	bne.n	8014c8c <__kernel_rem_pio2f+0x494>
 8014ca4:	f1bb 0f00 	cmp.w	fp, #0
 8014ca8:	f000 80d4 	beq.w	8014e54 <__kernel_rem_pio2f+0x65c>
 8014cac:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014cb0:	446b      	add	r3, sp
 8014cb2:	a932      	add	r1, sp, #200	; 0xc8
 8014cb4:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8014cb8:	eb01 038b 	add.w	r3, r1, fp, lsl #2
 8014cbc:	ed73 7a01 	vldmdb	r3!, {s15}
 8014cc0:	eef0 6a47 	vmov.f32	s13, s14
 8014cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014cc8:	4299      	cmp	r1, r3
 8014cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cce:	ed83 7a00 	vstr	s14, [r3]
 8014cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014cd6:	edc3 7a01 	vstr	s15, [r3, #4]
 8014cda:	d1ef      	bne.n	8014cbc <__kernel_rem_pio2f+0x4c4>
 8014cdc:	f1bb 0f01 	cmp.w	fp, #1
 8014ce0:	f340 80b8 	ble.w	8014e54 <__kernel_rem_pio2f+0x65c>
 8014ce4:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 8014ce8:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 8014cec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cf0:	eb0d 0e03 	add.w	lr, sp, r3
 8014cf4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8014cf8:	f10b 0304 	add.w	r3, fp, #4
 8014cfc:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
 8014d00:	440b      	add	r3, r1
 8014d02:	a833      	add	r0, sp, #204	; 0xcc
 8014d04:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d08:	eef0 6a47 	vmov.f32	s13, s14
 8014d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d10:	4298      	cmp	r0, r3
 8014d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d16:	ed83 7a00 	vstr	s14, [r3]
 8014d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d1e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014d22:	d1ef      	bne.n	8014d04 <__kernel_rem_pio2f+0x50c>
 8014d24:	f10b 0b08 	add.w	fp, fp, #8
 8014d28:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014d2c:	eb01 030b 	add.w	r3, r1, fp
 8014d30:	3108      	adds	r1, #8
 8014d32:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d36:	4299      	cmp	r1, r3
 8014d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d3c:	d1f9      	bne.n	8014d32 <__kernel_rem_pio2f+0x53a>
 8014d3e:	2a00      	cmp	r2, #0
 8014d40:	d156      	bne.n	8014df0 <__kernel_rem_pio2f+0x5f8>
 8014d42:	9906      	ldr	r1, [sp, #24]
 8014d44:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014d46:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014d48:	600a      	str	r2, [r1, #0]
 8014d4a:	604b      	str	r3, [r1, #4]
 8014d4c:	edc1 7a02 	vstr	s15, [r1, #8]
 8014d50:	e79c      	b.n	8014c8c <__kernel_rem_pio2f+0x494>
 8014d52:	f105 3cff 	add.w	ip, r5, #4294967295
 8014d56:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8014d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d5e:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8014d62:	e6b8      	b.n	8014ad6 <__kernel_rem_pio2f+0x2de>
 8014d64:	2308      	movs	r3, #8
 8014d66:	9307      	str	r3, [sp, #28]
 8014d68:	2300      	movs	r3, #0
 8014d6a:	9302      	str	r3, [sp, #8]
 8014d6c:	e55f      	b.n	801482e <__kernel_rem_pio2f+0x36>
 8014d6e:	ee19 3a90 	vmov	r3, s19
 8014d72:	2d00      	cmp	r5, #0
 8014d74:	f103 0301 	add.w	r3, r3, #1
 8014d78:	ee09 3a90 	vmov	s19, r3
 8014d7c:	bfc8      	it	gt
 8014d7e:	2202      	movgt	r2, #2
 8014d80:	f73f ae6e 	bgt.w	8014a60 <__kernel_rem_pio2f+0x268>
 8014d84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d88:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8014d8c:	2202      	movs	r2, #2
 8014d8e:	e5f4      	b.n	801497a <__kernel_rem_pio2f+0x182>
 8014d90:	2100      	movs	r1, #0
 8014d92:	e691      	b.n	8014ab8 <__kernel_rem_pio2f+0x2c0>
 8014d94:	a932      	add	r1, sp, #200	; 0xc8
 8014d96:	eddf 7a34 	vldr	s15, [pc, #208]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014d9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d9e:	ed33 7a01 	vldmdb	r3!, {s14}
 8014da2:	4299      	cmp	r1, r3
 8014da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014da8:	d1f9      	bne.n	8014d9e <__kernel_rem_pio2f+0x5a6>
 8014daa:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8014dae:	bb8a      	cbnz	r2, 8014e14 <__kernel_rem_pio2f+0x61c>
 8014db0:	9b06      	ldr	r3, [sp, #24]
 8014db2:	f1bb 0f00 	cmp.w	fp, #0
 8014db6:	edc3 7a00 	vstr	s15, [r3]
 8014dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014dbe:	dd0b      	ble.n	8014dd8 <__kernel_rem_pio2f+0x5e0>
 8014dc0:	a933      	add	r1, sp, #204	; 0xcc
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	ecb1 7a01 	vldmia	r1!, {s14}
 8014dc8:	3301      	adds	r3, #1
 8014dca:	459b      	cmp	fp, r3
 8014dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dd0:	daf8      	bge.n	8014dc4 <__kernel_rem_pio2f+0x5cc>
 8014dd2:	b10a      	cbz	r2, 8014dd8 <__kernel_rem_pio2f+0x5e0>
 8014dd4:	eef1 7a67 	vneg.f32	s15, s15
 8014dd8:	9b06      	ldr	r3, [sp, #24]
 8014dda:	edc3 7a01 	vstr	s15, [r3, #4]
 8014dde:	e755      	b.n	8014c8c <__kernel_rem_pio2f+0x494>
 8014de0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014de4:	469b      	mov	fp, r3
 8014de6:	ee10 1a10 	vmov	r1, s0
 8014dea:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8014dee:	e6e9      	b.n	8014bc4 <__kernel_rem_pio2f+0x3cc>
 8014df0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8014df4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014df8:	9b06      	ldr	r3, [sp, #24]
 8014dfa:	eef1 6a66 	vneg.f32	s13, s13
 8014dfe:	eeb1 7a47 	vneg.f32	s14, s14
 8014e02:	eef1 7a67 	vneg.f32	s15, s15
 8014e06:	edc3 6a00 	vstr	s13, [r3]
 8014e0a:	ed83 7a01 	vstr	s14, [r3, #4]
 8014e0e:	edc3 7a02 	vstr	s15, [r3, #8]
 8014e12:	e73b      	b.n	8014c8c <__kernel_rem_pio2f+0x494>
 8014e14:	9b06      	ldr	r3, [sp, #24]
 8014e16:	eef1 6a67 	vneg.f32	s13, s15
 8014e1a:	f1bb 0f00 	cmp.w	fp, #0
 8014e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e22:	edc3 6a00 	vstr	s13, [r3]
 8014e26:	dccb      	bgt.n	8014dc0 <__kernel_rem_pio2f+0x5c8>
 8014e28:	e7d4      	b.n	8014dd4 <__kernel_rem_pio2f+0x5dc>
 8014e2a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	dc0d      	bgt.n	8014e4c <__kernel_rem_pio2f+0x654>
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	dc14      	bgt.n	8014e5e <__kernel_rem_pio2f+0x666>
 8014e34:	f47f af2a 	bne.w	8014c8c <__kernel_rem_pio2f+0x494>
 8014e38:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014e3c:	2a00      	cmp	r2, #0
 8014e3e:	f43f af22 	beq.w	8014c86 <__kernel_rem_pio2f+0x48e>
 8014e42:	e71e      	b.n	8014c82 <__kernel_rem_pio2f+0x48a>
 8014e44:	9b03      	ldr	r3, [sp, #12]
 8014e46:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014e4a:	e535      	b.n	80148b8 <__kernel_rem_pio2f+0xc0>
 8014e4c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8014e4e:	2b03      	cmp	r3, #3
 8014e50:	f47f af1c 	bne.w	8014c8c <__kernel_rem_pio2f+0x494>
 8014e54:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014e58:	2a00      	cmp	r2, #0
 8014e5a:	d1c9      	bne.n	8014df0 <__kernel_rem_pio2f+0x5f8>
 8014e5c:	e771      	b.n	8014d42 <__kernel_rem_pio2f+0x54a>
 8014e5e:	eddf 7a02 	vldr	s15, [pc, #8]	; 8014e68 <__kernel_rem_pio2f+0x670>
 8014e62:	e7a2      	b.n	8014daa <__kernel_rem_pio2f+0x5b2>
 8014e64:	0802b364 	.word	0x0802b364
 8014e68:	00000000 	.word	0x00000000

08014e6c <__kernel_sinf>:
 8014e6c:	ee10 3a10 	vmov	r3, s0
 8014e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014e78:	da04      	bge.n	8014e84 <__kernel_sinf+0x18>
 8014e7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014e7e:	ee17 3a90 	vmov	r3, s15
 8014e82:	b35b      	cbz	r3, 8014edc <__kernel_sinf+0x70>
 8014e84:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014e88:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014ee0 <__kernel_sinf+0x74>
 8014e8c:	eddf 5a15 	vldr	s11, [pc, #84]	; 8014ee4 <__kernel_sinf+0x78>
 8014e90:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014ee8 <__kernel_sinf+0x7c>
 8014e94:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014eec <__kernel_sinf+0x80>
 8014e98:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014e9c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014ef0 <__kernel_sinf+0x84>
 8014ea0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014ea4:	ee20 5a27 	vmul.f32	s10, s0, s15
 8014ea8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014eac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014eb0:	b930      	cbnz	r0, 8014ec0 <__kernel_sinf+0x54>
 8014eb2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8014ef4 <__kernel_sinf+0x88>
 8014eb6:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014eba:	eea6 0a85 	vfma.f32	s0, s13, s10
 8014ebe:	4770      	bx	lr
 8014ec0:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8014ec4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014ec8:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8014ecc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8014ef8 <__kernel_sinf+0x8c>
 8014ed0:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8014ed4:	eee5 0a26 	vfma.f32	s1, s10, s13
 8014ed8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	2f2ec9d3 	.word	0x2f2ec9d3
 8014ee4:	b2d72f34 	.word	0xb2d72f34
 8014ee8:	3638ef1b 	.word	0x3638ef1b
 8014eec:	b9500d01 	.word	0xb9500d01
 8014ef0:	3c088889 	.word	0x3c088889
 8014ef4:	be2aaaab 	.word	0xbe2aaaab
 8014ef8:	3e2aaaab 	.word	0x3e2aaaab

08014efc <__kernel_tanf>:
 8014efc:	b508      	push	{r3, lr}
 8014efe:	ee10 3a10 	vmov	r3, s0
 8014f02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014f06:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014f0a:	eef0 7a40 	vmov.f32	s15, s0
 8014f0e:	da0f      	bge.n	8014f30 <__kernel_tanf+0x34>
 8014f10:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014f14:	ee17 1a10 	vmov	r1, s14
 8014f18:	bb01      	cbnz	r1, 8014f5c <__kernel_tanf+0x60>
 8014f1a:	1c43      	adds	r3, r0, #1
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	f000 80a0 	beq.w	8015062 <__kernel_tanf+0x166>
 8014f22:	2801      	cmp	r0, #1
 8014f24:	d003      	beq.n	8014f2e <__kernel_tanf+0x32>
 8014f26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014f2a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014f2e:	bd08      	pop	{r3, pc}
 8014f30:	4950      	ldr	r1, [pc, #320]	; (8015074 <__kernel_tanf+0x178>)
 8014f32:	428a      	cmp	r2, r1
 8014f34:	db12      	blt.n	8014f5c <__kernel_tanf+0x60>
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	bfb8      	it	lt
 8014f3a:	eef1 7a40 	vneglt.f32	s15, s0
 8014f3e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8015078 <__kernel_tanf+0x17c>
 8014f42:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 801507c <__kernel_tanf+0x180>
 8014f46:	bfb8      	it	lt
 8014f48:	eef1 0a60 	vneglt.f32	s1, s1
 8014f4c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014f50:	ee37 0a60 	vsub.f32	s0, s14, s1
 8014f54:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8015080 <__kernel_tanf+0x184>
 8014f58:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014f5c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014f60:	eddf 4a48 	vldr	s9, [pc, #288]	; 8015084 <__kernel_tanf+0x188>
 8014f64:	eddf 5a48 	vldr	s11, [pc, #288]	; 8015088 <__kernel_tanf+0x18c>
 8014f68:	ed9f 5a48 	vldr	s10, [pc, #288]	; 801508c <__kernel_tanf+0x190>
 8014f6c:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8015090 <__kernel_tanf+0x194>
 8014f70:	4940      	ldr	r1, [pc, #256]	; (8015074 <__kernel_tanf+0x178>)
 8014f72:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014f76:	428a      	cmp	r2, r1
 8014f78:	eee7 5a24 	vfma.f32	s11, s14, s9
 8014f7c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014f80:	eddf 4a44 	vldr	s9, [pc, #272]	; 8015094 <__kernel_tanf+0x198>
 8014f84:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8015098 <__kernel_tanf+0x19c>
 8014f88:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014f8c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014f90:	eddf 5a42 	vldr	s11, [pc, #264]	; 801509c <__kernel_tanf+0x1a0>
 8014f94:	ed9f 6a42 	vldr	s12, [pc, #264]	; 80150a0 <__kernel_tanf+0x1a4>
 8014f98:	eee4 5a87 	vfma.f32	s11, s9, s14
 8014f9c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014fa0:	eddf 4a40 	vldr	s9, [pc, #256]	; 80150a4 <__kernel_tanf+0x1a8>
 8014fa4:	ed9f 5a40 	vldr	s10, [pc, #256]	; 80150a8 <__kernel_tanf+0x1ac>
 8014fa8:	eee5 4a87 	vfma.f32	s9, s11, s14
 8014fac:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014fb0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80150ac <__kernel_tanf+0x1b0>
 8014fb4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80150b0 <__kernel_tanf+0x1b4>
 8014fb8:	eea4 6a87 	vfma.f32	s12, s9, s14
 8014fbc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014fc0:	eeb0 7a46 	vmov.f32	s14, s12
 8014fc4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014fc8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8014fcc:	eeb0 6a60 	vmov.f32	s12, s1
 8014fd0:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014fd4:	eddf 4a37 	vldr	s9, [pc, #220]	; 80150b4 <__kernel_tanf+0x1b8>
 8014fd8:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014fdc:	eee5 0a24 	vfma.f32	s1, s10, s9
 8014fe0:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8014fe4:	da1f      	bge.n	8015026 <__kernel_tanf+0x12a>
 8014fe6:	2801      	cmp	r0, #1
 8014fe8:	d0a1      	beq.n	8014f2e <__kernel_tanf+0x32>
 8014fea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014fee:	eec7 6a00 	vdiv.f32	s13, s14, s0
 8014ff2:	4b31      	ldr	r3, [pc, #196]	; (80150b8 <__kernel_tanf+0x1bc>)
 8014ff4:	ee10 2a10 	vmov	r2, s0
 8014ff8:	401a      	ands	r2, r3
 8014ffa:	ee06 2a10 	vmov	s12, r2
 8014ffe:	ee16 2a90 	vmov	r2, s13
 8015002:	ee76 7a67 	vsub.f32	s15, s12, s15
 8015006:	4013      	ands	r3, r2
 8015008:	ee00 3a10 	vmov	s0, r3
 801500c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015010:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015014:	eef0 7a47 	vmov.f32	s15, s14
 8015018:	eee6 7a00 	vfma.f32	s15, s12, s0
 801501c:	eee0 7a80 	vfma.f32	s15, s1, s0
 8015020:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8015024:	bd08      	pop	{r3, pc}
 8015026:	ee07 0a10 	vmov	s14, r0
 801502a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801502e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8015032:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015036:	179b      	asrs	r3, r3, #30
 8015038:	eec5 6a80 	vdiv.f32	s13, s11, s0
 801503c:	f003 0302 	and.w	r3, r3, #2
 8015040:	f1c3 0301 	rsb	r3, r3, #1
 8015044:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015048:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801504c:	ee00 3a10 	vmov	s0, r3
 8015050:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015054:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015058:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801505c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015060:	bd08      	pop	{r3, pc}
 8015062:	f000 f905 	bl	8015270 <fabsf>
 8015066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801506a:	eef0 7a40 	vmov.f32	s15, s0
 801506e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015072:	bd08      	pop	{r3, pc}
 8015074:	3f2ca140 	.word	0x3f2ca140
 8015078:	33222168 	.word	0x33222168
 801507c:	3f490fda 	.word	0x3f490fda
 8015080:	00000000 	.word	0x00000000
 8015084:	b79bae5f 	.word	0xb79bae5f
 8015088:	38a3f445 	.word	0x38a3f445
 801508c:	37d95384 	.word	0x37d95384
 8015090:	3895c07a 	.word	0x3895c07a
 8015094:	3a1a26c8 	.word	0x3a1a26c8
 8015098:	398137b9 	.word	0x398137b9
 801509c:	3b6b6916 	.word	0x3b6b6916
 80150a0:	3abede48 	.word	0x3abede48
 80150a4:	3cb327a4 	.word	0x3cb327a4
 80150a8:	3c11371f 	.word	0x3c11371f
 80150ac:	3e088889 	.word	0x3e088889
 80150b0:	3d5d0dd1 	.word	0x3d5d0dd1
 80150b4:	3eaaaaab 	.word	0x3eaaaaab
 80150b8:	fffff000 	.word	0xfffff000

080150bc <atanf>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	ee10 5a10 	vmov	r5, s0
 80150c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80150c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80150ca:	eef0 7a40 	vmov.f32	s15, s0
 80150ce:	db0b      	blt.n	80150e8 <atanf+0x2c>
 80150d0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80150d4:	dc5b      	bgt.n	801518e <atanf+0xd2>
 80150d6:	eddf 7a53 	vldr	s15, [pc, #332]	; 8015224 <atanf+0x168>
 80150da:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8015228 <atanf+0x16c>
 80150de:	2d00      	cmp	r5, #0
 80150e0:	bfc8      	it	gt
 80150e2:	eeb0 0a67 	vmovgt.f32	s0, s15
 80150e6:	bd38      	pop	{r3, r4, r5, pc}
 80150e8:	4b50      	ldr	r3, [pc, #320]	; (801522c <atanf+0x170>)
 80150ea:	429c      	cmp	r4, r3
 80150ec:	dc5e      	bgt.n	80151ac <atanf+0xf0>
 80150ee:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80150f2:	db4f      	blt.n	8015194 <atanf+0xd8>
 80150f4:	f04f 33ff 	mov.w	r3, #4294967295
 80150f8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80150fc:	eddf 4a4c 	vldr	s9, [pc, #304]	; 8015230 <atanf+0x174>
 8015100:	eddf 5a4c 	vldr	s11, [pc, #304]	; 8015234 <atanf+0x178>
 8015104:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8015238 <atanf+0x17c>
 8015108:	ed9f 4a4c 	vldr	s8, [pc, #304]	; 801523c <atanf+0x180>
 801510c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8015110:	eeb0 6a66 	vmov.f32	s12, s13
 8015114:	eee7 5a24 	vfma.f32	s11, s14, s9
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	eddf 4a49 	vldr	s9, [pc, #292]	; 8015240 <atanf+0x184>
 801511e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8015244 <atanf+0x188>
 8015122:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015126:	eee7 6a24 	vfma.f32	s13, s14, s9
 801512a:	eddf 5a47 	vldr	s11, [pc, #284]	; 8015248 <atanf+0x18c>
 801512e:	eddf 4a47 	vldr	s9, [pc, #284]	; 801524c <atanf+0x190>
 8015132:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015136:	eea5 4a07 	vfma.f32	s8, s10, s14
 801513a:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8015250 <atanf+0x194>
 801513e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8015254 <atanf+0x198>
 8015142:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015146:	eee4 4a07 	vfma.f32	s9, s8, s14
 801514a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8015258 <atanf+0x19c>
 801514e:	eee4 6a87 	vfma.f32	s13, s9, s14
 8015152:	eee5 5a07 	vfma.f32	s11, s10, s14
 8015156:	ee66 6a86 	vmul.f32	s13, s13, s12
 801515a:	ee25 7a87 	vmul.f32	s14, s11, s14
 801515e:	d03a      	beq.n	80151d6 <atanf+0x11a>
 8015160:	4a3e      	ldr	r2, [pc, #248]	; (801525c <atanf+0x1a0>)
 8015162:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015166:	ee76 6a87 	vadd.f32	s13, s13, s14
 801516a:	ed92 0a00 	vldr	s0, [r2]
 801516e:	4a3c      	ldr	r2, [pc, #240]	; (8015260 <atanf+0x1a4>)
 8015170:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8015174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015178:	2d00      	cmp	r5, #0
 801517a:	ed93 7a00 	vldr	s14, [r3]
 801517e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015182:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015186:	daae      	bge.n	80150e6 <atanf+0x2a>
 8015188:	eeb1 0a40 	vneg.f32	s0, s0
 801518c:	bd38      	pop	{r3, r4, r5, pc}
 801518e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015192:	bd38      	pop	{r3, r4, r5, pc}
 8015194:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8015264 <atanf+0x1a8>
 8015198:	ee30 7a07 	vadd.f32	s14, s0, s14
 801519c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80151a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80151a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151a8:	dda4      	ble.n	80150f4 <atanf+0x38>
 80151aa:	bd38      	pop	{r3, r4, r5, pc}
 80151ac:	f000 f860 	bl	8015270 <fabsf>
 80151b0:	4b2d      	ldr	r3, [pc, #180]	; (8015268 <atanf+0x1ac>)
 80151b2:	429c      	cmp	r4, r3
 80151b4:	dc16      	bgt.n	80151e4 <atanf+0x128>
 80151b6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80151ba:	429c      	cmp	r4, r3
 80151bc:	dc27      	bgt.n	801520e <atanf+0x152>
 80151be:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80151c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80151c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80151ca:	2300      	movs	r3, #0
 80151cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80151d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80151d4:	e790      	b.n	80150f8 <atanf+0x3c>
 80151d6:	ee76 6a87 	vadd.f32	s13, s13, s14
 80151da:	eee6 7ae7 	vfms.f32	s15, s13, s15
 80151de:	eeb0 0a67 	vmov.f32	s0, s15
 80151e2:	bd38      	pop	{r3, r4, r5, pc}
 80151e4:	4b21      	ldr	r3, [pc, #132]	; (801526c <atanf+0x1b0>)
 80151e6:	429c      	cmp	r4, r3
 80151e8:	dc0b      	bgt.n	8015202 <atanf+0x146>
 80151ea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80151ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80151f2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80151f6:	2302      	movs	r3, #2
 80151f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80151fc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015200:	e77a      	b.n	80150f8 <atanf+0x3c>
 8015202:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015206:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801520a:	2303      	movs	r3, #3
 801520c:	e774      	b.n	80150f8 <atanf+0x3c>
 801520e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015212:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015216:	ee30 0a27 	vadd.f32	s0, s0, s15
 801521a:	2301      	movs	r3, #1
 801521c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015220:	e76a      	b.n	80150f8 <atanf+0x3c>
 8015222:	bf00      	nop
 8015224:	3fc90fdb 	.word	0x3fc90fdb
 8015228:	bfc90fdb 	.word	0xbfc90fdb
 801522c:	3edfffff 	.word	0x3edfffff
 8015230:	3c8569d7 	.word	0x3c8569d7
 8015234:	3d4bda59 	.word	0x3d4bda59
 8015238:	3d886b35 	.word	0x3d886b35
 801523c:	3dba2e6e 	.word	0x3dba2e6e
 8015240:	bd15a221 	.word	0xbd15a221
 8015244:	bd6ef16b 	.word	0xbd6ef16b
 8015248:	bd9d8795 	.word	0xbd9d8795
 801524c:	3e124925 	.word	0x3e124925
 8015250:	bde38e38 	.word	0xbde38e38
 8015254:	3eaaaaab 	.word	0x3eaaaaab
 8015258:	be4ccccd 	.word	0xbe4ccccd
 801525c:	0802b3a8 	.word	0x0802b3a8
 8015260:	0802b398 	.word	0x0802b398
 8015264:	7149f2ca 	.word	0x7149f2ca
 8015268:	3f97ffff 	.word	0x3f97ffff
 801526c:	401bffff 	.word	0x401bffff

08015270 <fabsf>:
 8015270:	ee10 3a10 	vmov	r3, s0
 8015274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015278:	ee00 3a10 	vmov	s0, r3
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop

08015280 <floorf>:
 8015280:	ee10 2a10 	vmov	r2, s0
 8015284:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8015288:	3b7f      	subs	r3, #127	; 0x7f
 801528a:	2b16      	cmp	r3, #22
 801528c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015290:	dc28      	bgt.n	80152e4 <floorf+0x64>
 8015292:	2b00      	cmp	r3, #0
 8015294:	db18      	blt.n	80152c8 <floorf+0x48>
 8015296:	491a      	ldr	r1, [pc, #104]	; (8015300 <floorf+0x80>)
 8015298:	4119      	asrs	r1, r3
 801529a:	420a      	tst	r2, r1
 801529c:	d021      	beq.n	80152e2 <floorf+0x62>
 801529e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015304 <floorf+0x84>
 80152a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80152a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80152aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ae:	dd18      	ble.n	80152e2 <floorf+0x62>
 80152b0:	2a00      	cmp	r2, #0
 80152b2:	da04      	bge.n	80152be <floorf+0x3e>
 80152b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80152b8:	fa40 f303 	asr.w	r3, r0, r3
 80152bc:	441a      	add	r2, r3
 80152be:	ea22 0301 	bic.w	r3, r2, r1
 80152c2:	ee00 3a10 	vmov	s0, r3
 80152c6:	4770      	bx	lr
 80152c8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8015304 <floorf+0x84>
 80152cc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80152d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80152d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d8:	dd03      	ble.n	80152e2 <floorf+0x62>
 80152da:	2a00      	cmp	r2, #0
 80152dc:	db08      	blt.n	80152f0 <floorf+0x70>
 80152de:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015308 <floorf+0x88>
 80152e2:	4770      	bx	lr
 80152e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80152e8:	d3fb      	bcc.n	80152e2 <floorf+0x62>
 80152ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80152ee:	4770      	bx	lr
 80152f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80152f4:	2900      	cmp	r1, #0
 80152f6:	bf18      	it	ne
 80152f8:	eeb0 0a67 	vmovne.f32	s0, s15
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop
 8015300:	007fffff 	.word	0x007fffff
 8015304:	7149f2ca 	.word	0x7149f2ca
 8015308:	00000000 	.word	0x00000000

0801530c <scalbnf>:
 801530c:	b082      	sub	sp, #8
 801530e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015312:	9b01      	ldr	r3, [sp, #4]
 8015314:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015318:	d02a      	beq.n	8015370 <scalbnf+0x64>
 801531a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801531e:	d223      	bcs.n	8015368 <scalbnf+0x5c>
 8015320:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015324:	d128      	bne.n	8015378 <scalbnf+0x6c>
 8015326:	ed9d 7a01 	vldr	s14, [sp, #4]
 801532a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80153d4 <scalbnf+0xc8>
 801532e:	4b2a      	ldr	r3, [pc, #168]	; (80153d8 <scalbnf+0xcc>)
 8015330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015334:	4298      	cmp	r0, r3
 8015336:	edcd 7a01 	vstr	s15, [sp, #4]
 801533a:	db37      	blt.n	80153ac <scalbnf+0xa0>
 801533c:	9b01      	ldr	r3, [sp, #4]
 801533e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015342:	3a19      	subs	r2, #25
 8015344:	4402      	add	r2, r0
 8015346:	2afe      	cmp	r2, #254	; 0xfe
 8015348:	dd1a      	ble.n	8015380 <scalbnf+0x74>
 801534a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80153dc <scalbnf+0xd0>
 801534e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80153e0 <scalbnf+0xd4>
 8015352:	9b01      	ldr	r3, [sp, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	eef0 7a40 	vmov.f32	s15, s0
 801535a:	bfb8      	it	lt
 801535c:	eeb0 0a47 	vmovlt.f32	s0, s14
 8015360:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015364:	b002      	add	sp, #8
 8015366:	4770      	bx	lr
 8015368:	ee30 0a00 	vadd.f32	s0, s0, s0
 801536c:	b002      	add	sp, #8
 801536e:	4770      	bx	lr
 8015370:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015374:	b002      	add	sp, #8
 8015376:	4770      	bx	lr
 8015378:	0dd2      	lsrs	r2, r2, #23
 801537a:	4402      	add	r2, r0
 801537c:	2afe      	cmp	r2, #254	; 0xfe
 801537e:	dce4      	bgt.n	801534a <scalbnf+0x3e>
 8015380:	2a00      	cmp	r2, #0
 8015382:	dc0b      	bgt.n	801539c <scalbnf+0x90>
 8015384:	f112 0f16 	cmn.w	r2, #22
 8015388:	da17      	bge.n	80153ba <scalbnf+0xae>
 801538a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801538e:	4298      	cmp	r0, r3
 8015390:	dcdb      	bgt.n	801534a <scalbnf+0x3e>
 8015392:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80153e4 <scalbnf+0xd8>
 8015396:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80153e8 <scalbnf+0xdc>
 801539a:	e7da      	b.n	8015352 <scalbnf+0x46>
 801539c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153a0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80153a4:	ee00 3a10 	vmov	s0, r3
 80153a8:	b002      	add	sp, #8
 80153aa:	4770      	bx	lr
 80153ac:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80153e4 <scalbnf+0xd8>
 80153b0:	eddd 7a01 	vldr	s15, [sp, #4]
 80153b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80153b8:	e7d8      	b.n	801536c <scalbnf+0x60>
 80153ba:	3219      	adds	r2, #25
 80153bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153c0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80153c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80153ec <scalbnf+0xe0>
 80153c8:	ee07 3a10 	vmov	s14, r3
 80153cc:	ee27 0a27 	vmul.f32	s0, s14, s15
 80153d0:	e7cc      	b.n	801536c <scalbnf+0x60>
 80153d2:	bf00      	nop
 80153d4:	4c000000 	.word	0x4c000000
 80153d8:	ffff3cb0 	.word	0xffff3cb0
 80153dc:	7149f2ca 	.word	0x7149f2ca
 80153e0:	f149f2ca 	.word	0xf149f2ca
 80153e4:	0da24260 	.word	0x0da24260
 80153e8:	8da24260 	.word	0x8da24260
 80153ec:	33000000 	.word	0x33000000

080153f0 <_init>:
 80153f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153f2:	bf00      	nop
 80153f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153f6:	bc08      	pop	{r3}
 80153f8:	469e      	mov	lr, r3
 80153fa:	4770      	bx	lr

080153fc <_fini>:
 80153fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153fe:	bf00      	nop
 8015400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015402:	bc08      	pop	{r3}
 8015404:	469e      	mov	lr, r3
 8015406:	4770      	bx	lr
